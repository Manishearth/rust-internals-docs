initSidebarItems({"mod":[["escape","HTML EscapingThis module contains one unit-struct which can be used to HTML-escape a string of text (for use in a format string)."],["format","HTML formatting moduleThis module contains a large number of `fmt::Display` implementations for various types in `rustdoc::clean`. These implementations all currently assume that HTML output is desired, although it may be possible to redesign them in the future to instead emit any format desired."],["highlight","Basic html highlighting functionalityThis module uses libsyntax's lexer to provide token-based highlighting for the HTML documentation generated by rustdoc."],["item_type","Item types."],["layout",""],["markdown","Markdown formatting for rustdocThis module implements markdown formatting through the hoedown C-library (bundled into the rust runtime). This module self-contains the C bindings and necessary legwork to render markdown, and exposes all of the functionality through a unit-struct, `Markdown`, which has an implementation of `fmt::Display`. Example usage:"],["render","Rustdoc's HTML Rendering moduleThis modules contains the bulk of the logic necessary for rendering a rustdoc `clean::Crate` instance to a set of static HTML pages. This rendering process is largely driven by the `format!` syntax extension to perform all I/O into files and streams.The rendering process is largely driven by the `Context` and `Cache` structures. The cache is pre-populated by crawling the crate in question, and then it is shared among the various rendering threads. The cache is meant to be a fairly large structure not implementing `Clone` (because it's shared among threads). The context, however, should be a lightweight structure. This is cloned per-thread and contains information about what is currently being rendered.In order to speed up rendering (mostly because of markdown rendering), the rendering process has been parallelized. This parallelization is only exposed through the `crate` method on the context, and then also from the fact that the shared cache is stored in TLS (and must be accessed as such).In addition to rendering the crate itself, this module is also responsible for creating the corresponding search index and source file renderings. These threads are not parallelized (they haven't been a bottleneck yet), and both occur before the crate is rendered."],["toc","Table-of-contents creation."]]});