initSidebarItems({"mod":[["bitvec",""],["fnv",""],["graph","A graph module for use in dataflow, region resolution, and elsewhere.Interface detailsYou customize the graph by specifying a \"node data\" type `N` and an \"edge data\" type `E`. You can then later gain access (mutable or immutable) to these \"user-data\" bits. Currently, you can only add nodes or edges to the graph. You cannot remove or modify them once added. This could be changed if we have a need.Implementation detailsThe main tricky thing about this code is the way that edges are stored. The edges are stored in a central array, but they are also threaded onto two linked lists for each node, one for incoming edges and one for outgoing edges. Note that every edge is a member of some incoming list and some outgoing list.  Basically you can load the first index of the linked list from the node data structures (the field `first_edge`) and then, for each edge, load the next index from the field `next_edge`). Each of those fields is an array that should be indexed by the direction (see the type `Direction`)."],["ivar",""],["obligation_forest","The `ObligationForest` is a utility data structure used in trait matching to track the set of outstanding obligations (those not yet resolved to success or error). It also tracks the \"backtrace\" of each pending obligation (why we are trying to figure this out in the first place). See README.md for a general overview of how to use this class."],["snapshot_vec","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either to rollback to the start of the snapshot or commit those changes.This vector is intended to be used as part of an abstraction, not serve as a complete abstraction on its own. As such, while it will roll back most changes on its own, it also supports a `get_mut` operation that gives you an arbitrary mutable pointer into the vector. To ensure that any changes you make this with this pointer are rolled back, you must invoke `record` to record any changes you make and also supplying a delegate capable of reversing those changes."],["transitive_relation",""],["tuple_slice",""],["unify",""],["veccell",""]]});