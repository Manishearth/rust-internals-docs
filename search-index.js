var searchIndex = {};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Opt","getopts","A description of a possible option.",null,null],[12,"name","","Name of the option",0,null],[12,"hasarg","","Whether it has an argument",0,null],[12,"occur","","How often it can occur",0,null],[12,"aliases","","Which options it aliases",0,null],[3,"OptGroup","","One group of options, e.g., both `-h` and `--help`, along with their shared description and properties.",null,null],[12,"short_name","","Short name of the option, e.g. `h` for a `-h` option",1,null],[12,"long_name","","Long name of the option, e.g. `help` for a `--help` option",1,null],[12,"hint","","Hint for argument, e.g. `FILE` for a `-o FILE` option",1,null],[12,"desc","","Description for usage help text",1,null],[12,"hasarg","","Whether option has an argument",1,null],[12,"occur","","How often it can occur",1,null],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",2,null],[4,"Name","","Name of an option. Either a string or a single char.",null,null],[13,"Long","","A string representing the long name of an option. For example: \"help\"",3,null],[13,"Short","","A char representing the short name of an option. For example: 'h'",3,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",4,null],[13,"No","","The option takes no argument.",4,null],[13,"Maybe","","The option argument is optional.",4,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",5,null],[13,"Optional","","The option occurs at most once.",5,null],[13,"Multi","","The option occurs zero or more times.",5,null],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",6,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",6,null],[13,"OptionMissing","","A required option is not present.",6,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",6,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",6,null],[4,"FailType","","The type of failure that occurred.",null,null],[13,"ArgumentMissing_","","",7,null],[13,"UnrecognizedOption_","","",7,null],[13,"OptionMissing_","","",7,null],[13,"OptionDuplicated_","","",7,null],[13,"UnexpectedArgument_","","",7,null],[5,"reqopt","","Create a long option that is required and takes an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optopt","","Create a long option that is optional and takes an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optflag","","Create a long option that is optional and does not take an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optflagopt","","Create a long option that is optional and takes an optional argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"opt","","Create a generic option group, stating all parameters explicitly",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"optgroup"}}],[5,"getopts","","Parse command line arguments according to the provided options.",null,null],[5,"usage","","Derive a usage message from a set of long options.",null,null],[5,"short_usage","","Derive a short one-line usage summary from a set of long options.",null,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"hasarg"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"occur"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"opt"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"opt"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"opt"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"optgroup"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"optgroup"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"optgroup"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"failtype"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"failtype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"long_to_short","","Translate OptGroup into Opt. (Both short and long names correspond to different Opts).",1,{"inputs":[{"name":"self"}],"output":{"name":"opt"}}],[11,"opt_present","","Returns true if an option was matched.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",2,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",2,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or none.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Opt"],[3,"OptGroup"],[3,"Matches"],[4,"Name"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",1,null],[12,"bools","","Map of capability name to boolean value",1,null],[12,"numbers","","Map of capability name to numeric value",1,null],[12,"strings","","Map of capability name to raw (unexpanded) string",1,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its parsed Terminfo database record.",null,null],[4,"Error","","A terminfo creation error.",null,null],[13,"TermUnset","","TermUnset Indicates that the environment doesn't include enough information to find the terminfo entry.",2,null],[13,"MalformedTerminfo","","MalformedTerminfo indicates that parsing the terminfo entry failed.",2,null],[13,"IoError","","io::Error forwards any io::Errors encountered when finding or reading the terminfo entry.",2,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing. ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",3,null],[13,"Number","","",3,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"new","","Return a new zero-initialized Variables",4,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_env","","Create a TermInfo based on current environment.",1,{"inputs":[],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fg","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",5,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",5,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",5,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",5,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal (foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",6,null],[10,"fg","","Sets the foreground color to the given color.",6,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",6,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)` if the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if there was an I/O error.",6,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",6,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",6,null],[10,"get_mut","","Gets a mutable reference to the stream inside",6,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",6,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}]],"paths":[[4,"Attr"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["test"] = {"doc":"Support code for rustc's built in unit-test and micro-benchmarking framework.","items":[[3,"Bencher","test","Manager of the benchmarking runs.",null,null],[12,"bytes","","",0,null],[3,"TestDesc","","",null,null],[12,"name","","",1,null],[12,"ignore","","",1,null],[12,"should_panic","","",1,null],[3,"TestPaths","","",null,null],[12,"file","","",2,null],[12,"base","","",2,null],[12,"relative_dir","","",2,null],[3,"TestDescAndFn","","",null,null],[12,"desc","","",3,null],[12,"testfn","","",3,null],[3,"Metric","","",null,null],[3,"MetricMap","","",null,null],[3,"TestOpts","","",null,null],[12,"list","","",4,null],[12,"filter","","",4,null],[12,"filter_exact","","",4,null],[12,"run_ignored","","",4,null],[12,"run_tests","","",4,null],[12,"bench_benchmarks","","",4,null],[12,"logfile","","",4,null],[12,"nocapture","","",4,null],[12,"color","","",4,null],[12,"quiet","","",4,null],[12,"test_threads","","",4,null],[12,"skip","","",4,null],[3,"BenchSamples","","",null,null],[4,"TestName","","",null,null],[13,"StaticTestName","","",5,null],[13,"DynTestName","","",5,null],[4,"TestFn","","",null,null],[13,"StaticTestFn","","",6,null],[13,"StaticBenchFn","","",6,null],[13,"StaticMetricFn","","",6,null],[13,"DynTestFn","","",6,null],[13,"DynMetricFn","","",6,null],[13,"DynBenchFn","","",6,null],[4,"BenchMode","","",null,null],[13,"Auto","","",7,null],[13,"Single","","",7,null],[4,"ShouldPanic","","",null,null],[13,"No","","",8,null],[13,"Yes","","",8,null],[13,"YesWithMessage","","",8,null],[4,"ColorConfig","","",null,null],[13,"AutoColor","","",9,null],[13,"AlwaysColor","","",9,null],[13,"NeverColor","","",9,null],[4,"TestResult","","",null,null],[13,"TrOk","","",10,null],[13,"TrFailed","","",10,null],[13,"TrFailedMsg","","",10,null],[13,"TrIgnored","","",10,null],[13,"TrMetrics","","",10,null],[13,"TrBench","","",10,null],[5,"test_main","","",null,null],[5,"test_main_static","","",null,null],[5,"parse_opts","","",null,null],[5,"fmt_bench_samples","","",null,{"inputs":[{"name":"benchsamples"}],"output":{"name":"string"}}],[5,"list_tests_console","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"result"}}],[5,"run_tests_console","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"result"}}],[5,"filter_tests","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"convert_benchmarks_to_tests","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"run_test","","",null,{"inputs":[{"name":"testopts"},{"name":"bool"},{"name":"testdescandfn"},{"name":"sender"}],"output":null}],[5,"black_box","","A function that is opaque to the optimizer, to allow benchmarks to pretend to use outputs to assist in avoiding dead-code elimination.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"iter","","",null,{"inputs":[{"name":"f"}],"output":{"name":"summary"}}],[0,"test","","",null,null],[0,"stats","","",null,null],[3,"Summary","test::stats","Extracted collection of all the summary statistics of a sample set.",null,null],[12,"sum","","",11,null],[12,"min","","",11,null],[12,"max","","",11,null],[12,"mean","","",11,null],[12,"median","","",11,null],[12,"var","","",11,null],[12,"std_dev","","",11,null],[12,"std_dev_pct","","",11,null],[12,"median_abs_dev","","",11,null],[12,"median_abs_dev_pct","","",11,null],[12,"quartiles","","",11,null],[12,"iqr","","",11,null],[5,"winsorize","","Winsorize a set of samples, replacing values above the `100-pct` percentile and below the `pct` percentile with those percentiles themselves. This is a way of minimizing the effect of outliers, at the cost of biasing the sample. It differs from trimming in that it does not change the number of samples, just changes the values of those that are outliers.",null,null],[8,"Stats","","Trait that provides simple descriptive statistics on a univariate set of numeric samples.",null,null],[10,"sum","","Sum of the samples.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"min","","Minimum value of the samples.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"max","","Maximum value of the samples.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"mean","","Arithmetic mean (average) of the samples: sum divided by sample-count.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"median","","Median of the samples: value separating the lower half of the samples from the higher half. Equal to `self.percentile(50.0)`.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"var","","Variance of the samples: bias-corrected mean of the squares of the differences of each sample from the sample mean. Note that this calculates the _sample variance_ rather than the population variance, which is assumed to be unknown. It therefore corrects the `(n-1)/n` bias that would appear if we calculated a population variance, by dividing by `(n-1)` rather than `n`.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"std_dev","","Standard deviation: the square root of the sample variance.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"std_dev_pct","","Standard deviation as a percent of the mean value. See `std_dev` and `mean`.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"median_abs_dev","","Scaled median of the absolute deviations of each sample from the sample median. This is a robust (distribution-agnostic) estimator of sample variability. Use this in preference to `std_dev` if you cannot assume your sample is normally distributed. Note that this is scaled by the constant `1.4826` to allow its use as a consistent estimator for the standard deviation.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"percentile","","Percentile: the value below which `pct` percent of the values in `self` fall. For example, percentile(95.0) will return the value `v` such that 95% of the samples `s` in `self` satisfy `s <= v`.",12,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[10,"quartiles","","Quartiles of the sample: three values that divide the sample into four equal groups, each with 1/4 of the data. The middle value is the median. See `median` and `percentile`. This function may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but is otherwise equivalent.",12,null],[10,"iqr","","Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th percentile (3rd quartile). See `quartiles`.",12,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"summary"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"new","","Construct a new summary of a sample set.",11,null],[0,"bench","test","",null,null],[5,"benchmark","test::bench","",null,{"inputs":[{"name":"f"}],"output":{"name":"benchsamples"}}],[5,"run_once","","",null,{"inputs":[{"name":"f"}],"output":null}],[6,"OptRes","test","Result of parsing the options.",null,null],[6,"MonitorMsg","","",null,null],[8,"TDynBenchFn","","Represents a benchmark function.",null,null],[10,"run","","",13,{"inputs":[{"name":"self"},{"name":"bencher"}],"output":null}],[8,"FnBox","","",null,null],[10,"call_box","","",14,{"inputs":[{"name":"box"},{"name":"t"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"testname"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"testname"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"testname"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bencher"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"benchmode"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"benchmode"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"shouldpanic"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"shouldpanic"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"shouldpanic"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"testdesc"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"testdesc"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"testdesc"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"testpaths"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"metric"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",15,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"metric"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"metricmap"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"metricmap"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"metricmap"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"benchsamples"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"benchsamples"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"benchsamples"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"testresult"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"testresult"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"testresult"}],"output":{"name":"bool"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"metricmap"}}],[11,"insert_metric","","Insert a named `value` (+/- `noise`) metric into the map. The value must be non-negative. The `noise` indicates the uncertainty of the metric, which doubles as the \"noise range\" of acceptable pairwise-regressions on this named value, when comparing from one metric to the next using `compare_to_old`.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"fmt_metrics","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"iter","","Callback for benchmark functions to run in their body.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"bench","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}]],"paths":[[3,"Bencher"],[3,"TestDesc"],[3,"TestPaths"],[3,"TestDescAndFn"],[3,"TestOpts"],[4,"TestName"],[4,"TestFn"],[4,"BenchMode"],[4,"ShouldPanic"],[4,"ColorConfig"],[4,"TestResult"],[3,"Summary"],[8,"Stats"],[8,"TDynBenchFn"],[8,"FnBox"],[3,"Metric"],[3,"MetricMap"],[3,"BenchSamples"]]};
searchIndex["test_shim"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
