var searchIndex = {};
searchIndex["alloc"] = {"doc":"The Rust core allocation and collections library","items":[[4,"Bound","alloc","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",0,null],[13,"Excluded","","An exclusive bound.",0,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",0,null],[0,"allocator","","",null,null],[3,"Excess","alloc::allocator","Represents the combination of a starting address and a total capacity of the returned block.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"Layout","","Layout of a block of memory.",null,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout.",null,null],[4,"AllocErr","","The `AllocErr` error specifies whether an allocation failure is specifically due to resource exhaustion or if it is due to something wrong when combining the given input arguments with this allocator.",null,null],[13,"Exhausted","","Error due to hitting some resource limit or otherwise running out of memory. This condition strongly implies that some series of deallocations would allow a subsequent reissuing of the original allocation request to succeed.",2,null],[12,"request","alloc::allocator::AllocErr","",2,null],[13,"Unsupported","alloc::allocator","Error due to allocator being fundamentally incapable of satisfying the original request. This condition implies that such an allocation request will never succeed on the given allocator, regardless of environment, memory pressure, or other contextual conditions.",2,null],[12,"details","alloc::allocator::AllocErr","",2,null],[8,"Alloc","alloc::allocator","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`.",null,null],[10,"alloc","","Returns a pointer meeting the size and alignment guarantees of `layout`.",3,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",3,null],[11,"oom","","Allocator-specific method for signaling an out-of-memory condition.",3,null],[11,"usable_size","","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`.",3,null],[11,"realloc","","Returns a pointer suitable for holding data described by `new_layout`, meeting its size and alignment guarantees. To accomplish this, this may extend or shrink the allocation referenced by `ptr` to fit `new_layout`.",3,null],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.",3,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",3,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",3,null],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to fit `new_layout`.",3,null],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to fit `new_layout`.",3,null],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",3,{"inputs":[{"name":"self"},{"name":"unique"}],"output":null}],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"realloc_array","","Reallocates a block previously suitable for holding `n_old` instances of `T`, returning a block suitable for holding `n_new` instances of `T`.",3,{"inputs":[{"name":"self"},{"name":"unique"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of `T`.",3,{"inputs":[{"name":"self"},{"name":"unique"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"from_size_align","","Constructs a `Layout` from a given `size` and `align`, or returns `None` if any of the following conditions are not met:",4,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",4,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"layout"}}],[11,"size","","The minimum size in bytes for a memory block of this layout.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"align","","The minimum byte alignment for a memory block of this layout.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Constructs a `Layout` suitable for holding a value of type `T`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"for_value","","Produces layout describing a record that could be used to allocate backing structure for `T` (which could be a trait or other unsized type like a slice).",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"align_to","","Creates a layout describing the record that can hold a value of the same layout as `self`, but that also is aligned to alignment `align` (measured in bytes).",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self` to ensure that the following address will satisfy `align` (measured in bytes).",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"repeat","","Creates a layout describing the record for `n` instances of `self`, with a suitable amount of padding between each to ensure that each instance is given its requested size and alignment. On success, returns `(k, offs)` where `k` is the layout of the array and `offs` is the distance between the start of each element in the array.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"extend","","Creates a layout describing the record for `self` followed by `next`, including any necessary padding to ensure that `next` will be properly aligned. Note that the result layout will satisfy the alignment properties of both `self` and `next`.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"repeat_packed","","Creates a layout describing the record for `n` instances of `self`, with no padding between each instance.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"extend_packed","","Creates a layout describing the record for `self` followed by `next` with no additional padding between the two. Since no padding is inserted, the alignment of `next` is irrelevant, and is not incorporated at all into the resulting layout.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"array","","Creates a layout describing the record for a `[T; n]`.",4,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"allocerr"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"invalid_input","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"is_memory_exhausted","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_request_unsupported","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cannotreallocinplace"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"cannotreallocinplace"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"heap","alloc","",null,null],[3,"Heap","alloc::heap","",null,null],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"heap"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"heap"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"alloc","","",6,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"oom","","",6,null],[11,"dealloc","","",6,null],[11,"usable_size","","",6,null],[11,"realloc","","",6,null],[11,"alloc_zeroed","","",6,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"alloc_excess","","",6,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"realloc_excess","","",6,null],[11,"grow_in_place","","",6,null],[11,"shrink_in_place","","",6,null],[0,"boxed","alloc","A pointer type for heap allocation.",null,null],[3,"ExchangeHeapSingleton","alloc::boxed","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[17,"HEAP","","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",7,null],[10,"call_box","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",9,null],[11,"make_place","","",9,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",9,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"finalize","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",8,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Allocates memory on the heap and then places `x` into it.",10,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",10,null],[11,"from_unique","","Constructs a `Box` from a `Unique<T>` pointer.",10,{"inputs":[{"name":"unique"}],"output":{"name":"self"}}],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",10,null],[11,"into_unique","","Consumes the `Box`, returning the wrapped pointer as `Unique<T>`.",10,{"inputs":[{"name":"box"}],"output":{"name":"unique"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",10,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",10,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"finish","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",10,null],[11,"write_u8","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",10,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_u128","","",10,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"write_usize","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","",10,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","",10,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","",10,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_i128","","",10,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"write_isize","","",10,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"from","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",10,null],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",10,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"nth","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"call_once","","",10,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",10,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"borrow","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"resume","","",10,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[0,"arc","alloc","Thread-safe reference-counting pointers.",null,null],[3,"Arc","alloc::arc","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Arc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",12,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Returns the contained value, if the `Arc` has exactly one strong reference.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",12,null],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",12,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",12,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this value.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr_eq","","Returns true if the two `Arc`s point to the same value (not just values that compare as equal).",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","Makes a clone of the `Arc` pointer.",12,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Arc` or [`Weak`][weak] pointers to the same value.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc`.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",11,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Arc`], extending the lifetime of the value if successful.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak` pointer that points to the same value.",11,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"default","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",11,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak` pointer.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","Equality for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a new `Arc<T>`, with the `Default` value for `T`.",12,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",12,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",12,null],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"name":"arc"}}],[11,"from","","",12,{"inputs":[{"name":"string"}],"output":{"name":"arc"}}],[11,"from","","",12,{"inputs":[{"name":"box"}],"output":{"name":"arc"}}],[11,"from","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"arc"}}],[11,"borrow","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"rc","alloc","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Rc","alloc::rc","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.",null,null],[11,"new","","Constructs a new `Rc<T>`.",13,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",13,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",13,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",13,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the `Rc<Any>` to a concrete type.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc`.",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","Makes a clone of the `Rc` pointer.",13,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",13,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",13,null],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[11,"from","","",13,{"inputs":[{"name":"string"}],"output":{"name":"rc"}}],[11,"from","","",13,{"inputs":[{"name":"box"}],"output":{"name":"rc"}}],[11,"from","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",14,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`], extending the lifetime of the value if successful.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak` pointer.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","Makes a clone of the `Weak` pointer that points to the same value.",14,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",14,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"raw_vec","alloc","",null,null],[3,"RawVec","alloc::raw_vec","A low-level utility for more ergonomically allocating, reallocating, and deallocating a buffer of memory on the heap without having to worry about all the corner cases involved. This type is excellent for building your own data structures like Vec and VecDeque. In particular:",null,null],[11,"new_in","","Like `new` but parameterized over the choice of allocator for the returned RawVec.",15,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"with_capacity_in","","Like `with_capacity` but parameterized over the choice of allocator for the returned RawVec.",15,{"inputs":[{"name":"usize"},{"name":"a"}],"output":{"name":"self"}}],[11,"with_capacity_zeroed_in","","Like `with_capacity_zeroed` but parameterized over the choice of allocator for the returned RawVec.",15,{"inputs":[{"name":"usize"},{"name":"a"}],"output":{"name":"self"}}],[11,"new","","Creates the biggest possible RawVec (on the system heap) without allocating. If T has positive size, then this makes a RawVec with capacity 0. If T has 0 size, then it it makes a RawVec with capacity `usize::MAX`. Useful for implementing delayed allocation.",15,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a RawVec (on the system heap) with exactly the capacity and alignment requirements for a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0 or T is zero-sized. Note that if `T` is zero-sized this means you will not get a RawVec with the requested capacity!",15,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity_zeroed","","Like `with_capacity` but guarantees the buffer is zeroed.",15,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts_in","","Reconstitutes a RawVec from a pointer, capacity, and allocator.",15,null],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer, capacity.",15,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",15,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is Unique::empty() if `cap = 0` or T is zero-sized. In the former case, you must be careful.",15,null],[11,"cap","","Gets the capacity of the allocation.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"alloc","","Returns a shared reference to the allocator backing this RawVec.",15,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"alloc_mut","","Returns a mutable reference to the allocator backing this RawVec.",15,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough to want to do that it's easiest to just have a dedicated method. Slightly more efficient logic can be provided for this than the general case.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"double_in_place","","Attempts to double the size of the type's backing allocation in place. This is common enough to want to do that it's easiest to just have a dedicated method. Slightly more efficient logic can be provided for this than the general case.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold `used_cap + needed_extra_cap` elements. If it doesn't already, will reallocate the minimum possible amount of memory necessary. Generally this will be exactly the amount of memory necessary, but in principle the allocator is free to give back more than we asked for.",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reserve","","Ensures that the buffer contains at least enough space to hold `used_cap + needed_extra_cap` elements. If it doesn't already have enough capacity, will reallocate enough space plus comfortable slack space to get amortized `O(1)` behavior. Will limit this behavior if it would needlessly cause itself to panic.",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold `used_cap + needed_extra_cap` elements. If it doesn't already have enough capacity, will reallocate in place enough space plus comfortable slack space to get amortized `O(1)` behavior. Will limit this behaviour if it would needlessly cause itself to panic.",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount is 0, actually completely deallocates.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",15,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"dealloc_buffer","","Frees the memory owned by the RawVec without trying to Drop its contents.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","Frees the memory owned by the RawVec without trying to Drop its contents.",15,{"inputs":[{"name":"self"}],"output":null}],[0,"binary_heap","alloc","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","alloc::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"BinaryHeapPlace","","",null,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"pop","","Removes the peeked value from the heap and returns it.",16,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","Creates an empty `BinaryHeap<T>`.",17,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",17,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",17,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",17,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",17,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",17,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",17,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pointer","","",21,null],[11,"finalize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"borrow","alloc","A module for working with borrowed data.",null,null],[8,"Borrow","alloc::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",22,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",23,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",24,null],[13,"Owned","","Owned data.",24,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",25,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",25,null],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",25,null],[11,"borrow","","",24,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone_from","","",24,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",24,null],[11,"into_owned","","Extracts the owned data.",24,null],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an owned Cow<'a, B> with the default value for the contained owned value.",24,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",24,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"add","","",24,null],[11,"add","","",24,null],[11,"add_assign","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_assign","","",24,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[0,"fmt","alloc","Utilities for formatting and printing `String`s",null,null],[3,"Formatter","alloc::fmt","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",26,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[5,"format","","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[0,"linked_list","alloc","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","alloc::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `LinkedList<T>`.",39,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates an empty `LinkedList`.",39,{"inputs":[],"output":{"name":"self"}}],[11,"append","","Moves all elements from `other` to the end of the list.",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"iter","","Provides a forward iterator.",39,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",39,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",39,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",39,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",39,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",39,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"drop","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","",39,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",39,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",40,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",40,null],[11,"finalize","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",41,null],[11,"finalize","","",41,{"inputs":[{"name":"self"}],"output":null}],[0,"range","alloc","Range syntax.",null,null],[8,"RangeArgument","alloc::range","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound.",42,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound.",42,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[0,"slice","alloc","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[3,"Chunks","alloc::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a time).",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",43,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",43,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",43,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",43,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",43,null],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",44,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",44,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",44,null],[10,"connect","","",44,null],[0,"str","alloc","Unicode string slices.",null,null],[8,"FromStr","alloc::str","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",45,null],[10,"from_str","","Parses a string `s` to return a value of this type.",45,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","alloc::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",46,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",46,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",47,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",47,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",47,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",48,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",48,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",49,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"EncodeUtf16","alloc::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[0,"string","alloc","A UTF-8 encoded, growable string.",null,null],[3,"String","alloc::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[3,"Drain","","A draining iterator for `String`.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",51,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",52,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",52,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",52,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",52,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"cmp","","",52,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",52,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",52,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",52,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",52,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",52,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",52,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",52,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",52,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"capacity","","Returns this `String`'s capacity, in bytes.",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"push","","Appends the given [`char`] to the end of this `String`.",52,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",52,null],[11,"truncate","","Shortens this `String` to the specified length.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"pop","","Removes the last character from the string buffer and returns it.",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"insert","","Inserts a character into this `String` at a byte position.",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"char"}],"output":null}],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",52,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",52,{"inputs":[{"name":"self"},{"name":"r"},{"name":"str"}],"output":null}],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",52,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"as_bytes","","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",53,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",53,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",52,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"from_iter","","",52,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",52,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",52,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",52,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",52,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","alloc::borrow","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","alloc::string","",52,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","Creates an empty `String`.",52,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"add_assign","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"index","","",52,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",52,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",52,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",52,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",52,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",52,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",52,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",52,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",52,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",52,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",52,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",52,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",52,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"to_string","alloc::borrow","",24,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","alloc::string","",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",52,null],[11,"from","","",52,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",52,{"inputs":[{"name":"box"}],"output":{"name":"string"}}],[11,"from","alloc::boxed","",10,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","alloc::string","",52,{"inputs":[{"name":"cow"}],"output":{"name":"string"}}],[11,"from","alloc::borrow","",24,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",24,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"write_str","alloc::string","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",52,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"vec","alloc","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",null,null],[3,"Vec","alloc::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[11,"new","","Constructs a new, empty `Vec<T>`.",57,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",57,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",57,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",57,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",57,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",57,null],[11,"set_len","","Sets the length of a vector.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","Removes an element from the vector and returns it.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"push","","Appends an element to the back of a collection.",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",57,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",57,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",57,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",57,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"dedup","","Removes consecutive repeated elements in the vector.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",57,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"hash","","",57,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",57,null],[11,"index","","",57,null],[11,"index","","",57,null],[11,"index","","",57,null],[11,"index","","",57,null],[11,"index","","",57,null],[11,"index_mut","","",57,null],[11,"index_mut","","",57,null],[11,"index_mut","","",57,null],[11,"index_mut","","",57,null],[11,"index_mut","","",57,null],[11,"index_mut","","",57,null],[11,"deref","","",57,null],[11,"deref_mut","","",57,null],[11,"from_iter","","",57,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",57,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",57,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",57,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"extend","","",57,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","alloc::borrow","",24,null],[11,"ne","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","alloc::vec","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates an empty `Vec<T>`.",57,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",57,null],[11,"as_mut","","",57,null],[11,"from","","",57,null],[11,"from","","",57,null],[11,"from","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",57,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","alloc::boxed","",10,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","alloc::vec","",57,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","alloc::borrow","",24,null],[11,"from","","",24,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"fmt","alloc::vec","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",58,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",58,null],[11,"next","","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"count","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_back","","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drop","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"is_empty","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",60,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",60,null],[11,"finalize","","",60,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"drop","","",62,{"inputs":[{"name":"self"}],"output":null}],[0,"vec_deque","alloc","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"VecDeque","alloc::vec_deque","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `VecDeque`.",null,null],[3,"PlaceFront","","A place for insertion at the front of a `VecDeque`.",null,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"drop","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates an empty `VecDeque<T>`.",63,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",63,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",63,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",63,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"iter","","Returns a front-to-back iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",63,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",63,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",63,null],[11,"len","","Returns the number of elements in the `VecDeque`.",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",63,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Prepends an element to the `VecDeque`.",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_back","","Appends an element to the back of the `VecDeque`.",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",63,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",63,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",63,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",63,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements or by appending clones of `value` to the back.",63,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"fold","","",64,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",64,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"is_empty","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"fold","","",65,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",65,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"is_empty","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"eq","","",63,null],[11,"partial_cmp","","",63,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",63,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",63,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",63,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by value.",63,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",63,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","alloc::vec","",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"self"}}],[11,"fmt","alloc::vec_deque","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",68,null],[11,"finalize","","",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",69,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",69,null],[11,"finalize","","",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"btree_map","alloc","A map based on a B-Tree.",null,null],[3,"BTreeMap","alloc::btree_map","A map based on a B-Tree.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant entry.",70,null],[13,"Occupied","","An occupied entry.",70,null],[0,"btree_set","alloc","A set based on a B-Tree.",null,null],[3,"BTreeSet","alloc::btree_set","A set based on a B-Tree.",null,null],[3,"Iter","","An iterator over the items of a `BTreeSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `BTreeSet`s.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `BTreeSet`s.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",null,null],[11,"clone","alloc","",0,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[14,"format","","Creates a `String` using interpolation of runtime expressions.",null,null],[11,"from","alloc::vec","",57,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"drop","alloc::btree_map","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",71,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",71,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",71,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",71,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",71,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",71,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",71,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",71,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",71,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",71,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",71,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",71,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"self"}}],[11,"next","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",71,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drop","","",74,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"next","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_back","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","",71,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",71,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"hash","","",71,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"default","","Creates an empty `BTreeMap<K, V>`.",71,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",71,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",71,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",71,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",71,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",71,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",71,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the map contains no elements.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",70,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",70,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",70,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",80,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",80,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",80,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",81,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take ownership of the key and value from the map.",81,null],[11,"get","","Gets a reference to the value in the entry.",81,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",81,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",81,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",81,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",81,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"clone","alloc::btree_set","",82,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"hash","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `BTreeSet` with a reasonable choice of B.",82,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",82,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",82,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",82,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no elements.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",82,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",82,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",82,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",82,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",82,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",82,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",82,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",82,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"self"}}],[11,"from_iter","","",82,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the `BTreeSet`'s contents.",82,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",82,{"inputs":[{"name":"self"},{"name":"iter"}],"output":null}],[11,"extend","","",82,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",82,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"next","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"fmt","alloc::str","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","alloc::str::pattern","",47,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","alloc::fmt","",92,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","alloc::str","",93,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"haystack","alloc::str::pattern","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",94,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",95,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",97,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::slice","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::slice","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::slice","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::slice","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::fmt","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::slice","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str::pattern","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::fmt","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::slice","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str::pattern","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::slice","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str::pattern","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::slice","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","alloc::fmt","",92,{"inputs":[],"output":{"name":"error"}}],[11,"clone","alloc::str","",123,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","alloc::str::pattern","",94,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","alloc::str","",119,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","alloc::str::pattern","",96,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","alloc::fmt","",92,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","alloc::str","",125,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","alloc::slice","",102,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","alloc::str","",101,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","alloc::slice","",104,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","alloc::str::pattern","",95,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","alloc::slice","",103,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","alloc::str","",120,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","alloc::str::pattern","",47,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","alloc::str","",121,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","alloc::fmt","",113,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","alloc::slice","",110,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","alloc::str::pattern","",97,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","alloc::str","",116,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","alloc::slice","",114,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","alloc::str","",106,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"partial_cmp","alloc::fmt","",92,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"write_str","","",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",127,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",127,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"as_ref","alloc::slice","",104,null],[11,"hash","alloc::fmt","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::str","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","alloc::fmt","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","alloc::str","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::slice","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"count","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",114,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next","alloc::str","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",120,null],[11,"last","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::slice","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","alloc::str","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",116,null],[11,"last","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::slice","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"count","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",122,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::str","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::slice","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next","","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"count","","",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",110,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::str","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"count","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",109,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",109,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",109,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",109,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",109,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",109,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::slice","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"count","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",111,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next","alloc::str","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next","","",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::slice","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"count","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",104,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next","alloc::str","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","alloc::slice","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","alloc::str","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","alloc::slice","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","alloc::str","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::slice","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::slice","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::slice","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::slice","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",109,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::slice","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::slice","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::str::pattern","",95,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",94,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",96,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","alloc::fmt","",92,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",127,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",127,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",127,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",127,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",127,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",127,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",127,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"entry","","Adds a new entry to the list output.",128,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",128,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",128,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",129,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",129,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",129,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",130,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",130,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",130,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",131,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",131,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",132,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",132,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_slice","alloc::slice","View the underlying data as a subslice of the original data.",104,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",111,null],[11,"borrow","alloc::vec","",57,null],[11,"borrow_mut","","",57,null],[11,"valid_up_to","alloc::str","Returns the index in the given string up to which valid UTF-8 was verified.",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",116,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","alloc::string","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","alloc::vec","",57,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}]],"paths":[[4,"Bound"],[3,"Excess"],[4,"AllocErr"],[8,"Alloc"],[3,"Layout"],[3,"CannotReallocInPlace"],[3,"Heap"],[8,"FnBox"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BinaryHeapPlace"],[8,"Borrow"],[8,"BorrowMut"],[4,"Cow"],[8,"ToOwned"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"LinkedList"],[3,"FrontPlace"],[3,"BackPlace"],[8,"RangeArgument"],[8,"SliceIndex"],[8,"SliceConcatExt"],[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"EncodeUtf16"],[8,"ToString"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"PlaceBack"],[3,"Splice"],[3,"DrainFilter"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"PlaceBack"],[3,"PlaceFront"],[4,"Entry"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"SplitWhitespace"],[3,"Utf8Error"],[3,"Error"],[3,"ParseBoolError"],[3,"StrSearcher"],[3,"CharSliceSearcher"],[3,"CharSearcher"],[3,"CharPredicateSearcher"],[3,"SplitN"],[3,"SplitN"],[3,"RSplitMut"],[3,"SplitTerminator"],[3,"Split"],[3,"RSplit"],[3,"Iter"],[3,"Lines"],[3,"RMatchIndices"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Bytes"],[3,"Chunks"],[3,"IterMut"],[3,"MatchIndices"],[3,"Arguments"],[3,"Windows"],[3,"SplitMut"],[3,"Chars"],[3,"RMatches"],[3,"Split"],[3,"LinesAny"],[3,"CharIndices"],[3,"RSplitTerminator"],[3,"ChunksMut"],[3,"RSplitN"],[3,"RSplitN"],[3,"RSplit"],[3,"Matches"],[3,"Formatter"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"]]};
searchIndex["alloc_jemalloc"] = {"doc":"","items":[[5,"__rde_alloc","alloc_jemalloc","",null,null],[5,"__rde_oom","","",null,null],[5,"__rde_dealloc","","",null,null],[5,"__rde_usable_size","","",null,null],[5,"__rde_realloc","","",null,null],[5,"__rde_alloc_zeroed","","",null,null],[5,"__rde_alloc_excess","","",null,null],[5,"__rde_realloc_excess","","",null,null],[5,"__rde_grow_in_place","","",null,null],[5,"__rde_shrink_in_place","","",null,null]],"paths":[]};
searchIndex["alloc_system"] = {"doc":"","items":[[3,"System","alloc_system","",null,null],[11,"alloc","","",0,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"alloc_zeroed","","",0,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"dealloc","","",0,null],[11,"realloc","","",0,null],[11,"oom","","",0,null],[11,"usable_size","","",0,null],[11,"alloc_excess","","",0,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"realloc_excess","","",0,null],[11,"grow_in_place","","",0,null],[11,"shrink_in_place","","",0,null]],"paths":[[3,"System"]]};
searchIndex["ar"] = {"doc":"A library for encoding/decoding Unix archive files.","items":[[3,"Header","ar","Representation of an archive entry header.",null,null],[3,"Archive","","A structure for reading archives.",null,null],[3,"Entry","","Representation of an archive entry.",null,null],[3,"Builder","","A structure for building archives.",null,null],[4,"Variant","","Variants of the Unix archive format.",null,null],[13,"Common","","Used by Debian package files; allows only short filenames.",0,null],[13,"BSD","","Used by BSD `ar` (and OS X); backwards-compatible with common variant.",0,null],[13,"GNU","","Used by GNU `ar` (and Windows); incompatible with common variant.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"new","","Creates a header with the given file identifier and size, and all other fields set to zero.",1,{"inputs":[{"name":"string"},{"name":"u64"}],"output":{"name":"header"}}],[11,"from_metadata","","Creates a header with the given file identifier and all other fields set from the given filesystem metadata.",1,{"inputs":[{"name":"string"},{"name":"metadata"}],"output":{"name":"header"}}],[11,"identifier","","Returns the file identifier.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_identifier","","Sets the file identifier.",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mtime","","Returns the last modification time in Unix time format.",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_mtime","","Sets the last modification time in Unix time format.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"uid","","Returns the value of the owner's user ID field.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_uid","","Sets the value of the owner's user ID field.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"gid","","Returns the value of the group's user ID field.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_gid","","Returns the value of the group's user ID field.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"mode","","Returns the mode bits for this file.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_mode","","Sets the mode bits for this file.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"size","","Returns the length of the file, in bytes.",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_size","","Sets the length of the file, in bytes.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"new","","Create a new archive reader with the underlying reader object as the source of all data read.",2,{"inputs":[{"name":"r"}],"output":{"name":"archive"}}],[11,"variant","","Returns which format variant this archive appears to be so far.",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"into_inner","","Unwrap this archive reader, returning the underlying reader object.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","Reads the next entry from the archive, or returns None if there are no more.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"header","","Returns the header for this archive entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"read","","",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new archive builder with the underlying writer object as the destination of all data written.",4,{"inputs":[{"name":"w"}],"output":{"name":"builder"}}],[11,"into_inner","","Unwrap this archive builder, returning the underlying writer object.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"append","","Adds a new entry to this archive.",4,{"inputs":[{"name":"self"},{"name":"header"},{"name":"r"}],"output":{"name":"result"}}],[11,"append_path","","Adds a file on the local filesystem to this archive, using the file name as its identifier.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"append_file","","Adds a file to this archive, with the given name as its identifier.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"file"}],"output":{"name":"result"}}]],"paths":[[4,"Variant"],[3,"Header"],[3,"Archive"],[3,"Entry"],[3,"Builder"]]};
searchIndex["arena"] = {"doc":"The arena, a fast but limited type of allocator.","items":[[3,"TypedArena","arena","An arena that can hold objects of only one type.",null,null],[3,"DroplessArena","","",null,null],[11,"new","","Creates a new `TypedArena`.",0,{"inputs":[],"output":{"name":"typedarena"}}],[11,"alloc","","Allocates an object in the `TypedArena`, returning a reference to it.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"alloc_slice","","Allocates a slice of objects that are copy into the `TypedArena`, returning a mutable reference to it. Will panic if passed a zero-sized types.",0,null],[11,"clear","","Clears the arena. Deallocates all but the longest chunk which may be reused.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"droplessarena"}}],[11,"in_arena","","",1,null],[11,"alloc","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"alloc_slice","","Allocates a slice of objects that are copied into the `DroplessArena`, returning a mutable reference to it. Will panic if passed a zero-sized type.",1,null]],"paths":[[3,"TypedArena"],[3,"DroplessArena"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["collections"] = {"doc":"Collection types","items":[[4,"Bound","collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",0,null],[13,"Excluded","","An exclusive bound.",0,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",0,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"BinaryHeapPlace","","",null,null],[0,"borrow","collections","A module for working with borrowed data.",null,null],[8,"ToOwned","collections::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",1,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",1,null],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",1,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",2,null],[13,"Owned","","Owned data.",2,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",3,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",4,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"fmt","collections","Utilities for formatting and printing `String`s",null,null],[5,"format","collections::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[6,"Result","","The type returned by formatter methods.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",7,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"linked_list","collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[0,"range","collections","Range syntax.",null,null],[8,"RangeArgument","collections::range","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound.",15,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound.",15,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[0,"slice","collections","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","collections::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",16,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",16,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",16,null],[10,"connect","","",16,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",17,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",17,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",17,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",17,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",17,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a time).",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[0,"str","collections","Unicode string slices.",null,null],[3,"EncodeUtf16","collections::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",18,null],[10,"from_str","","Parses a string `s` to return a value of this type.",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","collections::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",19,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",19,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",20,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",20,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",20,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",21,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",22,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"RSplit","collections::str","Created with the method [`rsplit`].",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[0,"string","collections","A UTF-8 encoded, growable string.",null,null],[3,"String","collections::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",23,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","collections","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",null,null],[3,"Vec","collections::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[0,"vec_deque","collections","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"VecDeque","collections::vec_deque","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `VecDeque`.",null,null],[3,"PlaceFront","","A place for insertion at the front of a `VecDeque`.",null,null],[0,"btree_map","collections","A map based on a B-Tree.",null,null],[3,"Values","collections::btree_map","An iterator over the values of a `BTreeMap`.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant entry.",24,null],[13,"Occupied","","An occupied entry.",24,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[0,"btree_set","collections","A set based on a B-Tree.",null,null],[3,"SymmetricDifference","collections::btree_set","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `BTreeSet`s.",null,null],[3,"Iter","","An iterator over the items of a `BTreeSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `BTreeSet`s.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[14,"format","collections","Creates a `String` using interpolation of runtime expressions.",null,null],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[11,"deref_mut","collections::string","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","collections::vec","",26,null],[11,"deref_mut","collections::binary_heap","",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_empty","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","collections::vec_deque","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","collections::btree_map","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","collections::binary_heap","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","collections::btree_map","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","collections::vec","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","collections::btree_map","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","collections::binary_heap","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","collections::vec","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","collections::btree_set","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","collections::vec_deque","",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","collections::btree_set","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","collections::vec_deque","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","collections::string","",25,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","collections::vec","",26,null],[11,"index","collections::string","",25,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","collections::vec","",26,null],[11,"index","","",26,null],[11,"index","collections::string","",25,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",25,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","collections::vec","",26,null],[11,"index","","",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",26,null],[11,"index","collections::vec_deque","",44,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index","collections::btree_map","",45,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","collections::string","",25,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","collections::vec","",26,null],[11,"index","collections::string","",25,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"from_str","","",25,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","collections::btree_set","",46,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","collections::vec_deque","",43,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","collections::btree_set","",47,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","collections::linked_list","",48,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","collections::str","",49,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","collections::string","",50,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","collections::vec_deque","",44,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","collections::btree_map","",34,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","collections::binary_heap","",51,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",51,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","collections::btree_map","",31,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","collections::linked_list","",52,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","collections::vec","",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",26,null],[11,"clone","collections::btree_set","",53,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","collections::linked_list","",54,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"clone","collections::borrow","",2,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone_from","","",2,null],[11,"clone","collections::btree_set","",40,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","collections::btree_map","",30,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"clone","collections::vec_deque","",41,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","collections::btree_set","",56,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","collections::string","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",25,null],[11,"clone","collections::btree_set","",57,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"clone","collections::vec","",35,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","collections::binary_heap","",32,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","collections::btree_set","",58,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","collections","",0,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"default","collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",47,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","collections::linked_list","Creates an empty `LinkedList<T>`.",54,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"default","collections::vec_deque","Creates an empty `VecDeque<T>`.",44,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"default","collections::borrow","Creates an owned Cow<'a, B> with the default value for the contained owned value.",2,{"inputs":[],"output":{"name":"cow"}}],[11,"default","collections::string","Creates an empty `String`.",25,{"inputs":[],"output":{"name":"string"}}],[11,"default","collections::binary_heap","Creates an empty `BinaryHeap<T>`.",51,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"default","collections::btree_map","Creates an empty `BTreeMap<K, V>`.",45,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","collections::vec","Creates an empty `Vec<T>`.",26,{"inputs":[],"output":{"name":"vec"}}],[11,"from_iter","collections::string","",25,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","collections::linked_list","",54,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"from_iter","collections::binary_heap","",51,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from_iter","collections::vec_deque","",44,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"from_iter","collections::borrow","",2,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","collections::btree_map","",45,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","collections::borrow","",2,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","collections::string","",25,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","collections::borrow","",2,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","collections::string","",25,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","collections::vec","",26,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",2,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","collections::string","",25,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",25,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","collections::btree_set","",47,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"add","collections::borrow","",2,null],[11,"add","collections::string","",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"add","collections::borrow","",2,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::string","",50,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::borrow","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::borrow","",2,null],[11,"ne","","",2,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::linked_list","",54,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections","",0,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",2,null],[11,"ne","","",2,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::string","",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::btree_set","",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::borrow","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::string","",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::borrow","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::string","",25,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::btree_map","",45,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::borrow","",2,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::borrow","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::string","",25,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","","",44,null],[11,"eq","","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"eq","collections::vec_deque","",44,null],[11,"eq","collections::vec","",26,null],[11,"ne","","",26,null],[11,"next_back","collections::btree_map","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::vec","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::btree_map","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::vec","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::btree_map","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::binary_heap","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::linked_list","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::btree_map","",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::vec_deque","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::btree_set","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::binary_heap","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::btree_set","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::vec_deque","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",43,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","collections::binary_heap","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::vec_deque","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",29,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","collections::linked_list","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::btree_map","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::linked_list","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::string","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::btree_map","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::vec","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::btree_set","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::btree_map","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extend","collections::vec","",26,null],[11,"extend","collections::binary_heap","",51,null],[11,"extend","collections::vec_deque","",44,null],[11,"extend","","",44,null],[11,"extend","collections::btree_set","",47,null],[11,"extend","collections::string","",25,null],[11,"extend","collections::linked_list","",54,null],[11,"extend","collections::vec","",26,null],[11,"extend","collections::string","",25,null],[11,"extend","","",25,null],[11,"extend","collections::btree_map","",45,null],[11,"extend","collections::string","",25,null],[11,"extend","collections::btree_map","",45,null],[11,"extend","collections::string","",25,null],[11,"extend","collections::binary_heap","",51,null],[11,"extend","collections::linked_list","",54,null],[11,"extend","collections::btree_set","",47,null],[11,"pointer","collections::vec","",64,null],[11,"pointer","collections::linked_list","",65,null],[11,"pointer","collections::vec_deque","",66,null],[11,"pointer","collections::linked_list","",67,null],[11,"pointer","collections::binary_heap","",68,null],[11,"pointer","collections::vec_deque","",69,null],[11,"fmt","collections::string","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::borrow","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::string","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow_mut","collections::vec","",26,null],[11,"finalize","collections::linked_list","",67,null],[11,"finalize","collections::vec_deque","",66,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","collections::binary_heap","",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","collections::linked_list","",65,null],[11,"finalize","collections::vec_deque","",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","collections::vec","",64,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","collections::btree_set","",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","collections::linked_list","",54,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"cmp","collections::borrow","",2,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"cmp","collections::vec","",26,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","collections::btree_map","",45,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"cmp","collections::string","",25,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"cmp","collections::vec_deque","",44,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"as_mut","collections::vec","",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",26,null],[11,"next","collections::btree_set","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next","collections::btree_map","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next","collections::vec_deque","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next","collections::btree_set","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","collections::vec_deque","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next","collections::str","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next","collections::vec_deque","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"fold","","",43,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","collections::btree_map","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next","collections::string","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next","collections::btree_map","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next","collections::btree_set","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next","collections::linked_list","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next","collections::binary_heap","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"next","collections::btree_map","",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::vec","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"count","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","collections::vec_deque","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"fold","","",29,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","collections::btree_map","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next","collections::linked_list","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","collections::binary_heap","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next","collections::btree_map","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::vec","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next","collections::btree_set","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next","collections::linked_list","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next","collections::vec","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next","collections::binary_heap","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next","collections::vec","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"from","","",26,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","","",26,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"from","","",26,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",2,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","collections::string","",25,{"inputs":[{"name":"cow"}],"output":{"name":"string"}}],[11,"from","collections::vec","",26,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","collections::binary_heap","",51,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::borrow","",2,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from","collections::string","",25,{"inputs":[{"name":"box"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",2,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","collections::vec","",26,null],[11,"from","collections::string","",25,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::vec","",26,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",2,null],[11,"from","collections::vec","",26,null],[11,"from","collections::vec_deque","",44,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",26,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"write_str","collections::string","",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",25,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"make_place","collections::vec_deque","",66,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","collections::vec","",64,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","collections::linked_list","",67,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"make_place","collections::vec_deque","",69,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"make_place","collections::linked_list","",65,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_set","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::linked_list","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_set","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::binary_heap","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec_deque","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_set","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::string","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec_deque","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::string","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec_deque","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::string","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::string","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::binary_heap","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::linked_list","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::binary_heap","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_set","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec_deque","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::binary_heap","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_set","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_set","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::linked_list","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::string","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec_deque","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::borrow","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_map","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::linked_list","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::btree_set","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::vec_deque","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::binary_heap","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","collections::vec_deque","",44,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"partial_cmp","collections::btree_set","",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::vec","",26,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"partial_cmp","collections::btree_map","",45,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"partial_cmp","collections::borrow","",2,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","collections::linked_list","",54,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"partial_cmp","collections::string","",25,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"deref","collections::borrow","",2,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"deref","collections::vec","",26,null],[11,"deref","collections::binary_heap","",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","collections::string","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","collections::vec","",72,null],[11,"drop","collections::binary_heap","",27,null],[11,"drop","collections::vec_deque","",61,null],[11,"drop","collections::vec","",26,null],[11,"drop","","",35,null],[11,"drop","collections::linked_list","",54,null],[11,"drop","collections::vec","",39,null],[11,"drop","collections::btree_map","",36,null],[11,"drop","collections::string","",63,null],[11,"drop","collections::btree_map","",45,null],[11,"drop","collections::vec","",59,null],[11,"drop","collections::vec_deque","",44,null],[11,"index_mut","collections::string","",25,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",25,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","collections::vec_deque","",44,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","collections::string","",25,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","collections::vec","",26,null],[11,"index_mut","collections::string","",25,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","collections::vec","",26,null],[11,"index_mut","collections::string","",25,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","collections::vec","",26,null],[11,"index_mut","collections::string","",25,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","collections::vec","",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",26,null],[11,"index_mut","","",26,null],[11,"index_mut","","",26,null],[11,"hash","collections::btree_map","",45,null],[11,"hash","collections::borrow","",2,null],[11,"hash","collections::linked_list","",54,null],[11,"hash","collections","",0,null],[11,"hash","collections::vec_deque","",44,null],[11,"hash","collections::string","",25,null],[11,"hash","collections::vec","",26,null],[11,"hash","collections::btree_set","",47,null],[11,"to_string","collections::borrow","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","collections::string","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"borrow","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","collections::borrow","",2,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"borrow","collections::vec","",26,null],[11,"into_iter","collections::vec_deque","Consumes the list into a front-to-back iterator yielding elements by value.",44,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",51,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",47,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","collections::linked_list","Consumes the list into an iterator yielding elements by value.",54,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","collections::vec","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",26,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","collections::btree_map","",45,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"as_ref","collections::borrow","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","collections::vec","",26,null],[11,"as_ref","collections::string","",25,null],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","collections::vec","",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"add_assign","collections::borrow","",2,null],[11,"add_assign","collections::string","",25,null],[11,"add_assign","collections::borrow","",2,null],[11,"eq","collections::str","",75,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","collections::str::pattern","",20,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","collections::fmt","",76,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","collections::str","",77,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"haystack","collections::str::pattern","",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",78,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",79,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",79,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",80,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",81,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",81,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::slice","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::slice","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::slice","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::slice","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::fmt","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::slice","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str::pattern","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::fmt","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::slice","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str::pattern","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::slice","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str::pattern","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::slice","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","collections::fmt","",76,{"inputs":[],"output":{"name":"error"}}],[11,"clone","collections::str","",107,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","collections::str::pattern","",78,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","collections::str","",103,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","collections::str::pattern","",80,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","collections::fmt","",76,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","collections::str","",109,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","collections::slice","",86,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","collections::str","",85,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","collections::slice","",88,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","collections::str::pattern","",79,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","collections::slice","",87,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","collections::str","",104,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","collections::str::pattern","",20,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","collections::str","",105,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","collections::fmt","",97,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","collections::slice","",94,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","collections::str::pattern","",81,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","collections::str","",100,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","collections::slice","",98,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","collections::str","",90,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"partial_cmp","collections::fmt","",76,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"write_str","","",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",111,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",111,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"as_ref","collections::slice","",88,null],[11,"hash","collections::fmt","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::fmt","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","collections::str","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next","","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::slice","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"count","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next","collections::str","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",104,null],[11,"last","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::slice","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next","collections::str","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",100,null],[11,"last","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::slice","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"count","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::str","",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::slice","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"count","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",94,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::str","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"count","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",93,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",93,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",93,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",93,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",93,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",93,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"count","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",95,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next","","",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next","collections::str","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::slice","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"count","","",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next","collections::str","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","collections::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","collections::str","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","collections::slice","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","collections::str","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::slice","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::str","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::slice","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::str","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::slice","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::str","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::slice","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","collections::str","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",93,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::slice","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","collections::str","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::slice","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::str","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::str::pattern","",79,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",81,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",78,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",80,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","collections::fmt","",76,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"fmt","collections::str","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"new","collections::binary_heap","Creates an empty `BinaryHeap` as a max-heap.",51,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",51,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",51,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",51,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",51,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",51,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",51,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",51,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",51,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",51,null],[11,"pop","","Removes the peeked value from the heap and returns it.",27,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"to_mut","collections::borrow","Acquires a mutable reference to the owned form of the data.",2,null],[11,"into_owned","","Extracts the owned data.",2,null],[11,"field","collections::fmt","Adds a new field to the generated tuple struct output.",113,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",113,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",114,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",114,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",111,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",111,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting",111,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",111,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",111,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",111,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",111,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",111,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"field","","Adds a new field to the generated struct output.",115,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",116,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",116,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",116,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",117,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",117,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","collections::linked_list","Creates an empty `LinkedList`.",54,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",54,null],[11,"iter","","Provides a forward iterator.",54,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",54,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",54,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",54,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",54,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",54,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",54,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"insert_next","","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",62,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice","collections::slice","View the underlying data as a subslice of the original data.",88,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",95,null],[11,"valid_up_to","collections::str","Returns the index in the given string up to which valid UTF-8 was verified.",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",100,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","collections::string","Creates a new empty `String`.",25,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",25,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",25,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",25,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",25,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",25,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",25,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",25,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",25,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",25,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",25,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",25,null],[11,"push","","Appends the given [`char`] to the end of this `String`.",25,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",25,null],[11,"truncate","","Shortens this `String` to the specified length.",25,null],[11,"pop","","Removes the last character from the string buffer and returns it.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",25,null],[11,"insert","","Inserts a character into this `String` at a byte position.",25,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",25,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",25,null],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",25,null],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",25,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"as_bytes","","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",71,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",71,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",71,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",26,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",26,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",26,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",26,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",26,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",26,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",26,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",26,null],[11,"as_slice","","Extracts a slice containing the entire vector.",26,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",26,null],[11,"set_len","","Sets the length of a vector.",26,null],[11,"swap_remove","","Removes an element from the vector and returns it.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",26,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",26,null],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",26,null],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",26,null],[11,"push","","Appends an element to the back of a collection.",26,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",26,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",26,null],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",26,null],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",26,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",26,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",26,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",26,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",26,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",35,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",35,null],[11,"new","collections::vec_deque","Creates an empty `VecDeque`.",44,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",44,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",44,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",44,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",44,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",44,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",44,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",44,null],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",44,null],[11,"iter","","Returns a front-to-back iterator.",44,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",44,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",44,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",44,null],[11,"len","","Returns the number of elements in the `VecDeque`.",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",44,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",44,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Prepends an element to the `VecDeque`.",44,null],[11,"push_back","","Appends an element to the back of the `VecDeque`.",44,null],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",44,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",44,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",44,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",44,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",44,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",44,null],[11,"retain","","Retains only the elements specified by the predicate.",44,null],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",44,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",44,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements or by appending clones of `value` to the back.",44,null],[11,"new","collections::btree_map","Makes a new empty BTreeMap with a reasonable choice for B.",45,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",45,null],[11,"get","","Returns a reference to the value corresponding to the key.",45,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",45,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",45,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",45,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",45,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",45,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",45,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",45,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",45,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",45,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",45,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",45,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",45,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",45,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",45,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the map contains no elements.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",74,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",74,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",74,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",73,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take ownership of the key and value from the map.",73,null],[11,"get","","Gets a reference to the value in the entry.",73,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",73,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",73,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",73,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",73,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",24,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"entry"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",24,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"new","collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",47,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",47,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",47,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no elements.",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",47,null],[11,"contains","","Returns `true` if the set contains a value.",47,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",47,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",47,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",47,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",47,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",47,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",47,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}]],"paths":[[4,"Bound"],[8,"ToOwned"],[4,"Cow"],[8,"BorrowMut"],[8,"Borrow"],[8,"Octal"],[8,"Binary"],[8,"Write"],[8,"Display"],[8,"Pointer"],[8,"UpperExp"],[8,"UpperHex"],[8,"Debug"],[8,"LowerHex"],[8,"LowerExp"],[8,"RangeArgument"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"ToString"],[4,"Entry"],[3,"String"],[3,"Vec"],[3,"PeekMut"],[3,"Drain"],[3,"IterMut"],[3,"Keys"],[3,"Iter"],[3,"Iter"],[3,"IterMut"],[3,"Values"],[3,"IntoIter"],[3,"IntoIter"],[3,"ValuesMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIter"],[3,"Iter"],[3,"VecDeque"],[3,"BTreeMap"],[3,"Difference"],[3,"BTreeSet"],[3,"IntoIter"],[3,"EncodeUtf16"],[4,"ParseError"],[3,"BinaryHeap"],[3,"Iter"],[3,"Intersection"],[3,"LinkedList"],[3,"Range"],[3,"Union"],[3,"SymmetricDifference"],[3,"Range"],[3,"Splice"],[3,"RangeMut"],[3,"Drain"],[3,"IterMut"],[3,"Drain"],[3,"PlaceBack"],[3,"FrontPlace"],[3,"PlaceBack"],[3,"BackPlace"],[3,"BinaryHeapPlace"],[3,"PlaceFront"],[3,"FromUtf16Error"],[3,"FromUtf8Error"],[3,"DrainFilter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Utf8Error"],[3,"Error"],[3,"ParseBoolError"],[3,"StrSearcher"],[3,"CharSliceSearcher"],[3,"CharSearcher"],[3,"CharPredicateSearcher"],[3,"SplitN"],[3,"SplitN"],[3,"RSplitMut"],[3,"SplitTerminator"],[3,"Split"],[3,"RSplit"],[3,"Iter"],[3,"Lines"],[3,"RMatchIndices"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Bytes"],[3,"Chunks"],[3,"IterMut"],[3,"MatchIndices"],[3,"Arguments"],[3,"Windows"],[3,"SplitMut"],[3,"Chars"],[3,"RMatches"],[3,"Split"],[3,"LinesAny"],[3,"CharIndices"],[3,"RSplitTerminator"],[3,"ChunksMut"],[3,"RSplitN"],[3,"RSplitN"],[3,"RSplit"],[3,"Matches"],[3,"Formatter"],[3,"SplitWhitespace"],[3,"DebugTuple"],[3,"DebugMap"],[3,"DebugStruct"],[3,"DebugSet"],[3,"DebugList"]]};
searchIndex["compiler_builtins"] = {"doc":"","items":[[0,"int","compiler_builtins","",null,null],[0,"mul","compiler_builtins::int","",null,null],[5,"__muldi3","compiler_builtins::int::mul","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"__multi3","","",null,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[5,"__mulosi4","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"__mulodi4","","",null,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"__muloti4","","",null,{"inputs":[{"name":"i128"},{"name":"i128"},{"name":"i32"}],"output":{"name":"i128"}}],[0,"sdiv","compiler_builtins::int","",null,null],[5,"__divsi3","compiler_builtins::int::sdiv","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"__divdi3","","",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"__divti3","","",null,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[5,"__modsi3","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"__moddi3","","",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"__modti3","","",null,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[5,"__divmodsi4","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"__divmoddi4","","",null,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[0,"shift","compiler_builtins::int","",null,null],[5,"__ashldi3","compiler_builtins::int::shift","",null,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"u64"}}],[5,"__ashlti3","","",null,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"u128"}}],[5,"__ashrdi3","","",null,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"i64"}}],[5,"__ashrti3","","",null,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"i128"}}],[5,"__lshrdi3","","",null,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"u64"}}],[5,"__lshrti3","","",null,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"u128"}}],[0,"udiv","compiler_builtins::int","",null,null],[5,"__udivsi3","compiler_builtins::int::udiv","Returns `n / d`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"__umodsi3","","Returns `n % d`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"__udivmodsi4","","Returns `n / d` and sets `*rem = n % d`",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"option"}],"output":{"name":"u32"}}],[5,"__udivdi3","","Returns `n / d`",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"__umoddi3","","Returns `n % d`",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"__udivti3","","Returns `n / d`",null,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[5,"__umodti3","","Returns `n % d`",null,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[5,"__udivmoddi4","","Returns `n / d` and sets `*rem = n % d`",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"option"}],"output":{"name":"u64"}}],[5,"__udivmodti4","","Returns `n / d` and sets `*rem = n % d`",null,{"inputs":[{"name":"u128"},{"name":"u128"},{"name":"option"}],"output":{"name":"u128"}}],[8,"Int","compiler_builtins::int","Trait for some basic operations on integers",null,null],[16,"OtherSign","","Type with the same width but other signedness",0,null],[16,"UnsignedInt","","Unsigned version of Self",0,null],[18,"BITS","","The bitwidth of the int type",0,null],[18,"ZERO","","",0,null],[18,"ONE","","",0,null],[10,"extract_sign","","Extracts the sign from self and returns a tuple.",0,null],[10,"unsigned","","",0,null],[10,"from_unsigned","","",0,null],[10,"from_bool","","",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[10,"max_value","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","",0,{"inputs":[],"output":{"name":"self"}}],[10,"wrapping_add","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"wrapping_mul","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"wrapping_sub","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"wrapping_shl","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"aborting_div","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"aborting_rem","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"leading_zeros","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"LargeInt","","Trait to convert an integer to/from smaller parts",null,null],[16,"LowHalf","","",1,null],[16,"HighHalf","","",1,null],[10,"low","","",1,null],[10,"low_as_high","","",1,null],[10,"high","","",1,null],[10,"high_as_low","","",1,null],[10,"from_parts","","",1,null],[8,"CastInto","","Trait to express (possibly lossy) casting of integers",null,null],[10,"cast","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"float","compiler_builtins","",null,null],[0,"conv","compiler_builtins::float","",null,null],[5,"__floatsisf","compiler_builtins::float::conv","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f32"}}],[5,"__floatsidf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[5,"__floatdidf","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"f64"}}],[5,"__floattisf","","",null,{"inputs":[{"name":"i128"}],"output":{"name":"f32"}}],[5,"__floattidf","","",null,{"inputs":[{"name":"i128"}],"output":{"name":"f64"}}],[5,"__floatunsisf","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"f32"}}],[5,"__floatunsidf","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"f64"}}],[5,"__floatundidf","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"f64"}}],[5,"__floatuntisf","","",null,{"inputs":[{"name":"u128"}],"output":{"name":"f32"}}],[5,"__floatuntidf","","",null,{"inputs":[{"name":"u128"}],"output":{"name":"f64"}}],[5,"__fixsfsi","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i32"}}],[5,"__fixsfdi","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i64"}}],[5,"__fixsfti","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"i128"}}],[5,"__fixdfsi","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i32"}}],[5,"__fixdfdi","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i64"}}],[5,"__fixdfti","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i128"}}],[5,"__fixunssfsi","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u32"}}],[5,"__fixunssfdi","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u64"}}],[5,"__fixunssfti","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"u128"}}],[5,"__fixunsdfsi","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u32"}}],[5,"__fixunsdfdi","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u64"}}],[5,"__fixunsdfti","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"u128"}}],[0,"add","compiler_builtins::float","",null,null],[5,"__addsf3","compiler_builtins::float::add","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"__adddf3","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[0,"pow","compiler_builtins::float","",null,null],[5,"__powisf2","compiler_builtins::float::pow","",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"__powidf2","","",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[0,"sub","compiler_builtins::float","",null,null],[5,"__subsf3","compiler_builtins::float::sub","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"__subdf3","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[8,"Float","compiler_builtins::float","Trait for some basic operations on floats",null,null],[16,"Int","","A uint of the same with as the float",3,null],[18,"ZERO","","",3,null],[18,"ONE","","",3,null],[18,"BITS","","The bitwidth of the float type",3,null],[18,"SIGNIFICAND_BITS","","The bitwidth of the significand",3,null],[18,"EXPONENT_BITS","","The bitwidth of the exponent",3,null],[18,"EXPONENT_MAX","","The maximum value of the exponent",3,null],[18,"EXPONENT_BIAS","","The exponent bias value",3,null],[18,"SIGN_MASK","","A mask for the sign bit",3,null],[18,"SIGNIFICAND_MASK","","A mask for the significand",3,null],[18,"IMPLICIT_BIT","","",3,null],[18,"EXPONENT_MASK","","A mask for the exponent",3,null],[10,"repr","","Returns `self` transmuted to `Self::Int`",3,null],[10,"from_repr","","Returns a `Self::Int` transmuted back to `Self`",3,null],[10,"from_parts","","Constructs a `Self` from its parts. Inputs are treated as bits and shifted into position.",3,null],[10,"normalize","","Returns (normalized exponent, normalized significand)",3,null],[0,"mem","compiler_builtins","",null,null],[5,"memcpy","compiler_builtins::mem","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"memcmp","","",null,null],[0,"x86_64","compiler_builtins","",null,null],[0,"probestack","","This module defines the `__rust_probestack` intrinsic which is used in the implementation of \"stack probes\" on certain platforms.",null,null],[5,"__rust_probestack","compiler_builtins::probestack","",null,{"inputs":[],"output":null}]],"paths":[[8,"Int"],[8,"LargeInt"],[8,"CastInto"],[8,"Float"]]};
searchIndex["core"] = {"doc":"The Rust Core Library","items":[[0,"isize","core","The pointer-sized signed integer type.",null,null],[17,"MIN","core::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","core","The 8-bit signed integer type.",null,null],[17,"MIN","core::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","core","The 16-bit signed integer type.",null,null],[17,"MIN","core::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","core","The 32-bit signed integer type.",null,null],[17,"MIN","core::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","core","The 64-bit signed integer type.",null,null],[17,"MIN","core::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i128","core","The 128-bit signed integer type.",null,null],[17,"MIN","core::i128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","core::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","core","The 8-bit unsigned integer type.",null,null],[17,"MIN","core::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","core","The 16-bit unsigned integer type.",null,null],[17,"MIN","core::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","core","The 32-bit unsigned integer type.",null,null],[17,"MIN","core::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","core","The 64-bit unsigned integer type.",null,null],[17,"MIN","core::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u128","core","The 128-bit unsigned integer type.",null,null],[17,"MIN","core::u128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"f32","core","Operations and constants for 32-bits floats (`f32` type)",null,null],[0,"consts","core::f32","Basic mathematical constants.",null,null],[17,"PI","core::f32::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f32","The radix or base of the internal representation of `f32`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[0,"f64","core","Operations and constants for 64-bits floats (`f64` type)",null,null],[0,"consts","core::f64","Basic mathematical constants.",null,null],[17,"PI","core::f64::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f64","The radix or base of the internal representation of `f64`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[0,"num","core","Numeric traits and functions for the built-in numeric types.",null,null],[3,"Wrapping","core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",0,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",1,null],[13,"Infinite","","Positive or negative infinity.",1,null],[13,"Zero","","Positive or negative zero.",1,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",1,null],[13,"Normal","","A regular floating point number.",1,null],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parsefloaterror"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"infallible"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"parseinterror"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","core","The libcore prelude",null,null],[0,"v1","core::prelude","The core prelude",null,null],[0,"intrinsics","core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","core::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",null,null],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,null],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,null],[5,"pref_align_of","","",null,null],[5,"size_of_val","","",null,null],[5,"min_align_of_val","","",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,null],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",null,null],[5,"init","","Creates a value initialized to zero.",null,null],[5,"uninit","","Creates an uninitialized value.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",null,null],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may not overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,null],[5,"sqrtf64","","Returns the square root of an `f64`",null,null],[5,"powif32","","Raises an `f32` to an integer power.",null,null],[5,"powif64","","Raises an `f64` to an integer power.",null,null],[5,"sinf32","","Returns the sine of an `f32`.",null,null],[5,"sinf64","","Returns the sine of an `f64`.",null,null],[5,"cosf32","","Returns the cosine of an `f32`.",null,null],[5,"cosf64","","Returns the cosine of an `f64`.",null,null],[5,"powf32","","Raises an `f32` to an `f32` power.",null,null],[5,"powf64","","Raises an `f64` to an `f64` power.",null,null],[5,"expf32","","Returns the exponential of an `f32`.",null,null],[5,"expf64","","Returns the exponential of an `f64`.",null,null],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,null],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,null],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,null],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,null],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,null],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,null],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,null],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,null],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,null],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,null],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,null],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,null],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,null],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,null],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,null],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,null],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,null],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,null],[5,"truncf32","","Returns the integer part of an `f32`.",null,null],[5,"truncf64","","Returns the integer part of an `f64`.",null,null],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",null,null],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",null,null],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,null],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,null],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,null],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,null],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,null],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",null,null],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,null],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",null,null],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,null],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,null],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,null],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,null],[5,"overflowing_add","","Returns (a + b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",null,null],[5,"overflowing_sub","","Returns (a - b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",null,null],[5,"overflowing_mul","","Returns (a * b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",null,null],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",null,null],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",null,null],[5,"align_offset","","Computes the byte offset that needs to be applied to `ptr` in order to make it aligned to `align`. If it is not possible to align `ptr`, the implementation returns `usize::max_value()`.",null,null],[0,"mem","core","Basic functions for dealing with memory.",null,null],[3,"Discriminant","core::mem","Opaque type representing the discriminant of an enum.",null,null],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[5,"forget","","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":null}],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Wrap a value to be manually dropped.",6,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",6,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",6,{"inputs":[{"name":"manuallydrop"}],"output":null}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"nonzero","core","Exposes the NonZero lang item which provides optimization hints.",null,null],[3,"NonZero","core::nonzero","A wrapper type for raw pointers and integers that will never be NULL or 0 that might allow certain optimizations.",null,null],[8,"Zeroable","","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[10,"is_zero","","Whether this value is zero",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"nonzero"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"new_unchecked","","Creates an instance of NonZero with the provided value. You must indeed ensure that the value is actually \"non-zero\".",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates an instance of NonZero with the provided value.",8,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"get","","Gets the inner value.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"ptr","core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[3,"Unique","core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper owns the referent. Useful for building abstractions like `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`.",null,null],[3,"Shared","","A wrapper around a raw `*mut T` that indicates that the possessor of this wrapper has shared ownership of the referent. Useful for building abstractions like `Rc<T>`, `Arc<T>`, or doubly-linked lists, which internally use aliased raw pointers to manage the memory that they own.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"null","","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.",null,null],[5,"swap_nonoverlapping","","Swaps a sequence of values at two mutable locations of the same type.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old value, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",null,null],[5,"eq","","Compare raw pointers for equality.",null,null],[11,"empty","","Creates a new `Unique` that is dangling, but well-aligned.",9,{"inputs":[],"output":{"name":"self"}}],[11,"new_unchecked","","Creates a new `Unique`.",9,null],[11,"new","","Creates a new `Unique` if `ptr` is non-null.",9,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",9,null],[11,"as_ref","","Dereferences the content.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"empty","","Creates a new `Shared` that is dangling, but well-aligned.",10,{"inputs":[],"output":{"name":"self"}}],[11,"new_unchecked","","Creates a new `Shared`.",10,null],[11,"new","","Creates a new `Shared` if `ptr` is non-null.",10,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",10,null],[11,"as_ref","","Dereferences the content.",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut_ptr","","Acquires the underlying pointer as a `*mut` pointer.",10,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"unique"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"marker","core","Primitive traits and types representing basic properties of types.",null,null],[3,"PhantomData","core::marker","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"phantomdata"}}],[0,"ops","core","Overloadable operators.",null,null],[3,"Range","core::ops","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",12,null],[12,"end","","The upper bound of the range (exclusive).",12,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",13,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",14,null],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",15,null],[12,"end","","The upper bound of the range (inclusive).",15,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",16,null],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",17,null],[13,"Complete","","The generator completed with a return value.",17,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"ordering"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",12,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",13,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",14,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",15,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",16,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",19,null],[10,"add","","Performs the `+` operation.",19,null],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",20,null],[10,"sub","","Performs the `-` operation.",20,null],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",21,null],[10,"mul","","Performs the `*` operation.",21,null],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",22,null],[10,"div","","Performs the `/` operation.",22,null],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",23,null],[10,"rem","","Performs the `%` operation.",23,null],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",24,null],[10,"neg","","Performs the unary `-` operation.",24,null],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",25,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",26,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",27,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",28,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",29,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",30,null],[10,"not","","Performs the unary `!` operation.",30,null],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",31,null],[10,"bitand","","Performs the `&` operation.",31,null],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",32,null],[10,"bitor","","Performs the `|` operation.",32,null],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",33,null],[10,"bitxor","","Performs the `^` operation.",33,null],[8,"Shl","","The left shift operator `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",34,null],[10,"shl","","Performs the `<<` operation.",34,null],[8,"Shr","","The right shift operator `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",35,null],[10,"shr","","Performs the `>>` operation.",35,null],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",36,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",37,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",38,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",39,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",40,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",41,null],[10,"deref","","Dereferences the value.",41,null],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",null,null],[10,"deref_mut","","Mutably dereferences the value.",42,null],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","Executes the destructor for this type.",43,{"inputs":[{"name":"self"}],"output":null}],[8,"Fn","","The version of the call operator that takes an immutable receiver.",null,null],[10,"call","","Performs the call operation.",44,null],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","Performs the call operation.",45,null],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",46,null],[10,"call_once","","Performs the call operation.",46,null],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",null,null],[16,"Output","","The returned type after indexing.",47,null],[10,"index","","Performs the indexing (`container[index]`) operation.",47,null],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",48,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",49,null],[16,"Error","","The type of this value when viewed as failed.",49,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",49,null],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",49,null],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",50,null],[16,"Return","","The type of value this generator returns.",50,null],[10,"resume","","Resumes the execution of this generator.",50,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[8,"Place","","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",51,null],[8,"Placer","","Interface to implementations of  `PLACE <- EXPR`.",null,null],[16,"Place","","`Place` is the intermediate agent guarding the uninitialized state for `Data`.",52,null],[10,"make_place","","Creates a fresh place from `self`.",52,null],[8,"InPlace","","Specialization of `Place` trait supporting `PLACE <- EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `PLACE <- EXPR`",53,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",53,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",54,null],[16,"Place","","The place that will negotiate the storage of the data.",54,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",54,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",55,{"inputs":[],"output":{"name":"self"}}],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[0,"cmp","core","Functionality for ordering and comparison.",null,null],[3,"Reverse","core::cmp","A helper struct for reverse ordering.",null,null],[12,"0","","",56,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",57,null],[13,"Equal","","An ordering where a compared value is equal [to another].",57,null],[13,"Greater","","An ordering where a compared value is greater [than another].",57,null],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"PartialEq","","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",58,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",58,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",59,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",59,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",59,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"reverse","","Reverses the `Ordering`.",57,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",57,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[0,"clone","core","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","core::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",61,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",61,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[0,"default","core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",62,{"inputs":[],"output":{"name":"self"}}],[0,"convert","core","Traits for conversions between types.",null,null],[4,"Infallible","core::convert","A type used as the error type for implementations of fallible conversion traits in cases where conversions cannot actually fail.",null,null],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",null,null],[10,"as_ref","","Performs the conversion.",63,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",64,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",65,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",66,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Error","","The type returned in the event of a conversion error.",67,null],[10,"try_into","","Performs the conversion.",67,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",68,null],[10,"try_from","","Performs the conversion.",68,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"infallible"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"ordering"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"borrow","core","A module for working with borrowed data.",null,null],[8,"Borrow","core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",70,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",71,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"any","core","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",null,null],[3,"TypeId","core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[8,"Any","","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",72,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the boxed type is the same as `T`.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"cmp","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"ordering"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"of","","Returns the `TypeId` of the type this generic function has been instantiated with.",73,{"inputs":[],"output":{"name":"typeid"}}],[0,"array","core","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths.",null,null],[8,"FixedSizeArray","core::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",74,null],[10,"as_mut_slice","","Converts the array to mutable slice",74,null],[0,"sync","core","Synchronization primitives",null,null],[0,"atomic","core::sync","Atomic types",null,null],[3,"AtomicBool","core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",75,null],[13,"Release","","When coupled with a store, all previous writes become visible to the other threads that perform a load with [`Acquire`] ordering on the same value.",75,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data written before a store with [`Release`] ordering on the same value in other threads.",75,null],[13,"AcqRel","","When coupled with a load, uses [`Acquire`] ordering, and with a store [`Release`] ordering.",75,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all sequentially consistent operations in the same order.",75,null],[5,"hint_core_should_pause","","Save power or switch hyperthreads in a busy-wait spin-loop.",null,{"inputs":[],"output":null}],[5,"fence","","An atomic fence.",null,{"inputs":[{"name":"ordering"}],"output":null}],[5,"compiler_fence","","A compiler memory fence.",null,{"inputs":[{"name":"ordering"}],"output":null}],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[11,"default","","Creates an `AtomicBool` initialized to `false`.",76,{"inputs":[],"output":{"name":"self"}}],[11,"default","","Creates a null `AtomicPtr<T>`.",77,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicBool`.",76,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"load","","Loads a value from the bool.",76,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",76,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the bool, returning the previous value.",76,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",76,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",76,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",76,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",76,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",76,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",76,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",76,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",77,null],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",77,null],[11,"into_inner","","Consumes the atomic and returns the contained value.",77,null],[11,"load","","Loads a value from the pointer.",77,null],[11,"store","","Stores a value into the pointer.",77,null],[11,"swap","","Stores a value into the pointer, returning the previous value.",77,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"default","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",78,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",78,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",78,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"load","","Loads a value from the atomic integer.",78,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",78,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"default","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",79,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",79,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"load","","Loads a value from the atomic integer.",79,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",79,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",80,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",80,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"load","","Loads a value from the atomic integer.",80,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",80,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"default","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",81,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",81,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"load","","Loads a value from the atomic integer.",81,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",81,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",82,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",82,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"load","","Loads a value from the atomic integer.",82,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",82,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",83,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",83,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"load","","Loads a value from the atomic integer.",83,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",83,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",84,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",84,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"load","","Loads a value from the atomic integer.",84,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",84,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",85,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",85,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load","","Loads a value from the atomic integer.",85,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",85,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",86,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",86,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"load","","Loads a value from the atomic integer.",86,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",86,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"load","","Loads a value from the atomic integer.",87,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cell","core","Shareable mutable containers.",null,null],[3,"Cell","core::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[11,"get","","Returns a copy of the contained value.",88,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"default","","Creates a `Cell<T>`, with the `Default` value for T.",88,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"cmp","","",88,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"from","","",88,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"new","","Creates a new `Cell` containing the given value.",88,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",88,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",88,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"replace","","Replaces the contained value, and returns it.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps the value.",88,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",88,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `RefCell` containing `value`.",91,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",91,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",91,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"borrow","","Immutably borrows the wrapped value.",91,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",91,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",91,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",91,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",91,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",91,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"default","","Creates a `RefCell<T>`, with the `Default` value for T.",91,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"from","","",91,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"deref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",92,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",94,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",94,null],[11,"default","","Creates an `UnsafeCell`, with the `Default` value for T.",94,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"from","","",94,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[0,"char","core","Character manipulation.",null,null],[3,"ParseCharError","core::char","An error which can be returned when parsing a char.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[3,"InvalidSequence","","`<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"parsecharerror"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"count","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"count","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"invalidsequence"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"invalidsequence"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"panicking","core","Panic support for libcore",null,null],[5,"panic","core::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","core","Composable external iteration.",null,null],[3,"Repeat","core::iter","An iterator that repeats an element endlessly.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[3,"Rev","","A double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[11,"next","core::ops","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"nth","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"nth","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"nth","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","core::iter","",102,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"sum","core::num","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[8,"Iterator","core::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",105,null],[10,"next","","Advances the iterator and returns the next value.",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",105,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",105,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",105,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",105,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",105,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",105,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",105,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",105,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",105,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",105,null],[11,"fold","","An iterator method that applies a function, producing a single, final value.",105,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",105,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",105,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",105,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",105,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",105,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",105,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",106,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",106,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",106,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",106,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",106,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_usize","","Add an usize, returning None on overflow",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",107,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",108,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",108,null],[10,"into_iter","","Creates an iterator from a value.",108,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",109,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",109,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",112,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",113,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"fold","","",114,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"find","","",114,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",114,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",114,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"rfind","","",114,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"len","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"fold","","",115,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",115,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"len","","",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",118,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",118,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",118,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",118,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",118,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"fold","","",120,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",120,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"len","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"count","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",121,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",121,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"fold","","",122,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",122,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Overflow Behavior",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"nth","","",123,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",123,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",123,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"len","","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",124,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"fold","","",124,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"fold","","",125,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",127,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"fold","","",127,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",128,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"fold","","",130,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",130,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",131,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",131,null],[11,"fold","","",131,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",131,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",131,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",131,null],[11,"fold","","",131,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",131,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"len","","",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"fold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"len","","",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"option","core","Optional values.",null,null],[3,"Iter","core::option","An iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",null,null],[4,"Option","","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",133,null],[13,"Some","","Some value `T`",133,null],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"is_some","","Returns `true` if the option is a [`Some`] value.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",133,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",133,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",133,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",133,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",133,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a [`default`][] (if not).",133,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a [`default`][] (if not).",133,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",133,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",133,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",133,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",133,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",133,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",133,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",133,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",133,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",133,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","Returns [`None`].",133,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",133,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"from","","",133,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"next_back","","",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",135,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next_back","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",133,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"noneerror"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",137,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"option"}}],[11,"cmp","","",137,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"ordering"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",137,null],[11,"into_result","","",133,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ok","","",133,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_error","","",133,{"inputs":[{"name":"noneerror"}],"output":{"name":"self"}}],[0,"raw","core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"TraitObject","core::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",138,null],[12,"vtable","","",138,null],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"traitobject"}}],[0,"result","core","Error handling with the `Result` type.",null,null],[3,"Iter","core::result","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",139,null],[13,"Err","","Contains the error value",139,null],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"cmp","","",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",139,null],[11,"is_ok","","Returns `true` if the result is [`Ok`].",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns `true` if the result is [`Err`].",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",139,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",139,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",139,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",139,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",139,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",139,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",139,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",139,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",139,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",139,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",139,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",139,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",139,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",139,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",140,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"next_back","","",140,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"next_back","","",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"next_back","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",139,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"into_result","","",139,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_ok","","",139,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_error","","",139,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[0,"slice","core","Slice management and manipulation",null,null],[3,"Iter","core::slice","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a time).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[8,"SliceExt","","Extension methods for slices.",null,null],[16,"Item","","",143,null],[10,"split_at","","",143,null],[10,"iter","","",143,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[10,"split","","",143,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[10,"rsplit","","",143,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplit"}}],[10,"splitn","","",143,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",143,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",143,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",143,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",143,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[10,"first","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_first","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_last","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"last","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_unchecked","","",143,null],[10,"as_ptr","","",143,null],[10,"binary_search","","",143,null],[10,"binary_search_by","","",143,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"binary_search_by_key","","",143,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_mut","","",143,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[10,"iter_mut","","",143,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[10,"first_mut","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_first_mut","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_last_mut","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"last_mut","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_mut","","",143,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"rsplit_mut","","",143,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplitmut"}}],[10,"splitn_mut","","",143,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",143,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",143,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",143,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"split_at_mut","","",143,null],[10,"reverse","","",143,{"inputs":[{"name":"self"}],"output":null}],[10,"get_unchecked_mut","","",143,null],[10,"as_mut_ptr","","",143,null],[10,"contains","","",143,null],[10,"starts_with","","",143,null],[10,"ends_with","","",143,null],[10,"rotate","","",143,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"clone_from_slice","","",143,null],[10,"copy_from_slice","","",143,null],[10,"swap_with_slice","","",143,null],[10,"sort_unstable","","",143,{"inputs":[{"name":"self"}],"output":null}],[10,"sort_unstable_by","","",143,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"sort_unstable_by_key","","",143,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",144,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",144,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",144,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",144,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",144,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",144,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",144,null],[11,"get","core::ops","",12,null],[11,"get_mut","","",12,null],[11,"get_unchecked","","",12,null],[11,"get_unchecked_mut","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"get","","",14,null],[11,"get_mut","","",14,null],[11,"get_unchecked","","",14,null],[11,"get_unchecked_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"get","","",13,null],[11,"get_mut","","",13,null],[11,"get_unchecked","","",13,null],[11,"get_unchecked_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"get","","",18,null],[11,"get_mut","","",18,null],[11,"get_unchecked","","",18,null],[11,"get_unchecked_mut","","",18,null],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"get","","",15,null],[11,"get_mut","","",15,null],[11,"get_unchecked","","",15,null],[11,"get_unchecked_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"get","","",16,null],[11,"get_mut","","",16,null],[11,"get_unchecked","","",16,null],[11,"get_unchecked_mut","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"fmt","core::slice","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",145,null],[11,"next","","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"count","","",145,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",145,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",145,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",145,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",145,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",145,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",145,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",145,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_empty","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"as_ref","","",145,null],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",146,null],[11,"next","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"count","","",146,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",146,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",146,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",146,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",146,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",146,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",146,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_empty","","",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"next","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"next_back","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next_back","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"next_back","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"next_back","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",151,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",151,null],[11,"next","","",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",152,null],[11,"next","","",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"next","","",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",154,null],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"next","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"count","","",155,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",155,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"next","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"count","","",156,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",156,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"count","","",157,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",157,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"str","core","String manipulation",null,null],[3,"ParseBoolError","core::str","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a UTF-8-like encoding).",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"utf8_char_width","","Given a first byte, determines how many bytes are in this UTF-8 character.",null,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[0,"pattern","","The string Pattern API.",null,null],[3,"CharSearcher","core::str::pattern","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",158,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",158,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",158,null],[8,"Pattern","","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",159,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",159,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",159,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",159,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",159,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",160,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",160,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",161,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",162,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",162,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",162,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",163,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",163,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",163,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",164,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",164,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",164,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",165,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",165,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",165,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","core::ops","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",18,null],[11,"get_unchecked_mut","","",18,null],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"get","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",12,null],[11,"get_unchecked_mut","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"get","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",14,null],[11,"get_unchecked_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"get","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",13,null],[11,"get_unchecked_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"get","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",15,null],[11,"get_unchecked_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"get","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",16,null],[11,"get_unchecked_mut","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[8,"FromStr","core::str","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",166,null],[10,"from_str","","Parses a string `s` to return a value of this type.",166,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",168,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",169,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",169,null],[11,"last","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",169,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",170,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",170,null],[11,"last","","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",170,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",171,null],[11,"count","","",171,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",171,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",171,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",171,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",171,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",171,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",171,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","","",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",171,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"len","","",171,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",182,null],[11,"next_back","","",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",183,null],[11,"next_back","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"hash","core","Generic hashing support.",null,null],[3,"SipHasher","core::hash","An implementation of SipHash 2-4.",null,null],[3,"SipHasher13","","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",null,null],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",184,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",185,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",186,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",186,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",186,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",184,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",184,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",185,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",185,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",186,null],[11,"finish","","",186,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",184,null],[11,"finish","","",184,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",185,null],[11,"finish","","",185,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",187,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",187,null],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",188,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",188,null],[11,"write_u8","","Writes a single `u8` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","Writes a single `u16` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","Writes a single `u32` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","Writes a single `u64` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_u128","","Writes a single `u128` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"write_usize","","Writes a single `usize` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","Writes a single `i8` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","Writes a single `i16` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","Writes a single `i32` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","Writes a single `i64` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_i128","","Writes a single `i128` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"write_isize","","Writes a single `isize` into this hasher.",188,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",189,null],[10,"build_hasher","","Creates a new hasher.",189,null],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",190,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",190,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[0,"fmt","core","Utilities for formatting and printing strings.",null,null],[3,"DebugStruct","core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",191,null],[13,"Right","","Indication that contents should be right-aligned.",191,null],[13,"Center","","Indication that contents should be center-aligned.",191,null],[13,"Unknown","","No alignment was requested.",191,null],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",192,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",192,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",193,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",193,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",194,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",194,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",194,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",195,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",195,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",195,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",196,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",196,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",196,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",197,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",197,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",197,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",207,{"inputs":[],"output":{"name":"error"}}],[11,"hash","","",207,null],[11,"cmp","","",207,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",207,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",209,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",209,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",209,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",209,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting",209,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",209,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",209,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",209,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",209,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",209,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",209,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",209,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"write_str","","",209,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",209,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",209,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"panic","core","Entry point of thread panic, for details, see std::macros",null,null],[14,"assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other (using [`PartialEq`]).",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other (using [`PartialEq`]).",null,null],[14,"debug_assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",null,null],[14,"write","","Write formatted data into a buffer",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"unreachable","","A utility macro for indicating unreachable code.",null,null],[14,"unimplemented","","A standardized placeholder for marking unfinished code.",null,null],[14,"compile_error","","Unconditionally causes compilation to fail with the given error message when encountered.",null,null],[14,"format_args","","The core macro for formatted string creation & output.",null,null],[14,"env","","Inspect an environment variable at compile time.",null,null],[14,"option_env","","Optionally inspect an environment variable at compile time.",null,null],[14,"concat_idents","","Concatenate identifiers into one identifier.",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"line","","A macro which expands to the line number on which it was invoked.",null,null],[14,"column","","A macro which expands to the column number on which it was invoked.",null,null],[14,"file","","A macro which expands to the file name from which it was invoked.",null,null],[14,"stringify","","A macro which stringifies its argument.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"cfg","","Boolean evaluation of configuration flags.",null,null],[14,"include","","Parse a file as an expression or an item according to the context.",null,null],[11,"size_hint","core::iter","Returns the bounds on the remaining length of the iterator.",105,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",105,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",105,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",105,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",105,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",105,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",105,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",105,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",105,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",105,null],[11,"fold","","An iterator method that applies a function, producing a single, final value.",105,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",105,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",105,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",105,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",105,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",105,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",105,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",105,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",109,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",109,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"len","","Returns the exact number of times the iterator will iterate.",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sum","core::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",139,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",139,{"inputs":[{"name":"i"}],"output":{"name":"result"}}]],"paths":[[3,"Wrapping"],[4,"FpCategory"],[3,"ParseFloatError"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"Discriminant"],[19,"ManuallyDrop"],[8,"Zeroable"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeInclusive"],[3,"RangeToInclusive"],[4,"GeneratorState"],[3,"RangeFull"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Index"],[8,"IndexMut"],[8,"Try"],[8,"Generator"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[3,"Reverse"],[4,"Ordering"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Clone"],[8,"Default"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[4,"Infallible"],[8,"Borrow"],[8,"BorrowMut"],[8,"Any"],[3,"TypeId"],[8,"FixedSizeArray"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"ParseCharError"],[3,"CharTryFromError"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"DecodeUtf8"],[3,"InvalidSequence"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[8,"Iterator"],[8,"Step"],[8,"FromIterator"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"Extend"],[8,"ExactSizeIterator"],[8,"Sum"],[8,"Product"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"StepBy"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoneError"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[8,"SliceExt"],[8,"SliceIndex"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[8,"FromStr"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Error"],[3,"Arguments"],[3,"Formatter"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard error.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger. It can be used to customize the log format, change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[4,"LogTarget","","Log target, either stdout or stderr.",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",1,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"target","","Sets the target for the log output.",1,{"inputs":[{"name":"self"},{"name":"logtarget"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build","","Build an env logger.",1,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",2,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"enabled","","",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}]],"paths":[[4,"LogTarget"],[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"Crc","","The CRC calculated by a [`CrcReader`].",null,null],[3,"CrcReader","","A wrapper around a [`Read`] that calculates the CRC.",null,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or decompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",0,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",0,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is not aligned to a byte boundary.",0,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the output is not aligned on a byte boundary and up to seven vits of the current block are held to be written as the next byte after the next deflate block is completed.",0,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is reset so decompression can restart from this point if previous compressed data has been damaged or if random access is desired.",0,null],[13,"Finish","","Pending input is processed and pending output is flushed.",0,null],[4,"Status","","Possible status results of compressing some data or successfully decompressing a block of data.",null,null],[13,"Ok","","Indicates success.",1,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output buffers being empty.",1,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have been written. Decompression/compression should not be called again.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in this enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data slightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new CRC.",3,{"inputs":[],"output":{"name":"crc"}}],[11,"sum","","bla",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"amount","","The number of bytes that have been used to calculate the CRC. This value is only accurate if the amount is lower than 2^32.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"update","","Update the CRC with the bytes in `data`.",3,null],[11,"reset","","Reset the CRC.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"combine","","Combine the CRC with the CRC for the subsequent block of bytes.",3,{"inputs":[{"name":"self"},{"name":"crc"}],"output":null}],[11,"new","","Create a new CrcReader.",4,{"inputs":[{"name":"r"}],"output":{"name":"crcreader"}}],[11,"crc","","Get the Crc for this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"crc"}}],[11,"into_inner","","Get the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_ref","","Get the reader that is wrapped by this CrcReader by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Get a mutable reference to the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"reset","","Reset the Crc in this CrcReader.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",4,null],[11,"fill_buf","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mtime","","This gives the most recent modification time of the original file being compressed.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mtime_as_datetime","","Returns the most recent modification time represented by a date-time type. Returns `None` if the value of the underlying counter is 0, indicating no time stamp is available.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new blank builder with no header by default.",6,{"inputs":[],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"comment","","Configure the `comment` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"write","","Consume this builder, creating a writer encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flush"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it's given.",7,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"new","","Creates a new object ready for decompressing data that it's given.",8,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",8,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector specified by `output`.",8,null],[11,"reset","","Performs the equivalent of replacing this decompression state with a freshly allocated copy.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over [`Read`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[0,"write","flate2","Types which operate over [`Write`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over [`BufRead`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"deflatedecoder"}}],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"deflatedecoder"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"compression"}}],[11,"fmt","flate2::bufread","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",12,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",13,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the state of this decoder's data",13,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Acquires a reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",14,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",14,null],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",15,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",15,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",16,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",16,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",17,{"inputs":[{"name":"w"}],"output":{"name":"deflatedecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",17,null],[11,"fmt","flate2::bufread","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",19,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",19,null],[11,"write","","",19,null],[11,"flush","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the current header associated with this stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",21,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",21,null],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",22,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",22,null],[11,"write","","",22,null],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",23,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the current header associated with this stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",23,null],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",24,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the encoding is done.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","flate2::bufread","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",25,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",25,null],[11,"write","","",25,null],[11,"flush","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",26,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",26,null],[11,"write","","",26,null],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",27,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",27,null],[11,"write","","",27,null],[11,"flush","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",28,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",28,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",29,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",29,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",29,null],[11,"flush","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",30,{"inputs":[{"name":"w"}],"output":{"name":"zlibdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",30,null],[11,"flush","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",30,null]],"paths":[[4,"Flush"],[4,"Status"],[4,"Compression"],[3,"Crc"],[3,"CrcReader"],[3,"GzHeader"],[3,"GzBuilder"],[3,"Compress"],[3,"Decompress"],[3,"DataError"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]};
searchIndex["fmt_macros"] = {"doc":"Macro support for format strings","items":[[3,"Argument","fmt_macros","Representation of an argument specification.",null,null],[12,"position","","Where to find this argument",0,null],[12,"format","","How to format the argument",0,null],[3,"FormatSpec","","Specification for the formatting of an argument in the format string.",null,null],[12,"fill","","Optionally specified character to fill alignment with",1,null],[12,"align","","Optionally specified alignment",1,null],[12,"flags","","Packed version of various flags provided",1,null],[12,"precision","","The integer precision to use",1,null],[12,"width","","The string width requested for the resulting format",1,null],[12,"ty","","The descriptor string representing the name of the format desired for this argument, this can be empty or any number of characters, although it is required to be one word.",1,null],[3,"Parser","","The parser structure for interpreting the input format string. This is modeled as an iterator over `Piece` structures to form a stream of tokens being output.",null,null],[12,"errors","","Error messages accumulated during parsing",2,null],[4,"Piece","","A piece is a portion of the format string which represents the next part to emit. These are emitted as a stream by the `Parser` class.",null,null],[13,"String","","A literal string which should directly be emitted",3,null],[13,"NextArgument","","This describes that formatting should process the next argument (as specified inside) for emission.",3,null],[4,"Position","","Enum describing where an argument for a format can be located.",null,null],[13,"ArgumentIs","","The argument is located at a specific index.",4,null],[13,"ArgumentNamed","","The argument has a name.",4,null],[4,"Alignment","","Enum of alignments which are supported.",null,null],[13,"AlignLeft","","The value will be aligned to the left.",5,null],[13,"AlignRight","","The value will be aligned to the right.",5,null],[13,"AlignCenter","","The value will be aligned in the center.",5,null],[13,"AlignUnknown","","The value will take on a default alignment.",5,null],[4,"Flag","","Various flags which can be applied to format strings. The meaning of these flags is defined by the formatters themselves.",null,null],[13,"FlagSignPlus","","A `+` will be used to denote positive numbers.",6,null],[13,"FlagSignMinus","","A `-` will be used to denote negative numbers. This is the default.",6,null],[13,"FlagAlternate","","An alternate form will be used for the value. In the case of numbers, this means that the number will be prefixed with the supplied string.",6,null],[13,"FlagSignAwareZeroPad","","For numbers, this means that the number will be padded with zeroes, and the sign (`+` or `-`) will precede them.",6,null],[4,"Count","","A count is used for the precision and width parameters of an integer, and can reference either an argument or a literal integer.",null,null],[13,"CountIs","","The count is specified explicitly.",7,null],[13,"CountIsName","","The count is specified by the argument with the given name.",7,null],[13,"CountIsParam","","The count is specified by the argument at the given index.",7,null],[13,"CountImplied","","The count is implied and cannot be explicitly specified.",7,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"piece"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"argument"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"formatspec"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"formatspec"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"formatspec"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"count"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"count"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"count"}],"output":{"name":"bool"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new parser for the given format string",2,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}]],"paths":[[3,"Argument"],[3,"FormatSpec"],[3,"Parser"],[4,"Piece"],[4,"Position"],[4,"Alignment"],[4,"Flag"],[4,"Count"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop considering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",5,{"inputs":[],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style.",5,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"options"}}],[11,"long_only","","Set or clear \"long options only\" mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"options"}}],[11,"opt","","Create a generic option group, stating all parameters explicitly.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"options"}}],[11,"optflag","","Create a long option that is optional and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optopt","","Create a long option that is optional and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"reqopt","","Create a long option that is required and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"parse","","Parse command line arguments according to the provided options.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"result"}}],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage","","Derive a usage message from a set of options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parsingstyle"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hasarg"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"occur"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"opt_defined","","Returns true if an option was defined",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_present","","Returns true if an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
searchIndex["graphviz"] = {"doc":"Generate files suitable for use with Graphviz","items":[[3,"Id","graphviz","`Id` is a Graphviz `ID`.",null,null],[4,"LabelText","","The text for a graphviz label on a node or edge.",null,null],[13,"LabelStr","","This kind of label preserves the text directly as is.",0,null],[13,"EscStr","","This kind of label uses the graphviz label escString type: http://www.graphviz.org/content/attrs#kescString",0,null],[13,"HtmlStr","","This uses a graphviz [HTML string label][html]. The string is printed exactly as given, but between `<` and `>`. No escaping is performed.",0,null],[4,"Style","","The style for a node or edge. See http://www.graphviz.org/doc/info/attrs.html#k:style for descriptions. Note that some of these are not valid for edges.",null,null],[13,"None","","",1,null],[13,"Solid","","",1,null],[13,"Dashed","","",1,null],[13,"Dotted","","",1,null],[13,"Bold","","",1,null],[13,"Rounded","","",1,null],[13,"Diagonals","","",1,null],[13,"Filled","","",1,null],[13,"Striped","","",1,null],[13,"Wedged","","",1,null],[4,"RenderOption","","",null,null],[13,"NoEdgeLabels","","",2,null],[13,"NoNodeLabels","","",2,null],[13,"NoEdgeStyles","","",2,null],[13,"NoNodeStyles","","",2,null],[5,"escape_html","","Escape tags in such a way that it is suitable for inclusion in a Graphviz HTML label.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"default_options","","Returns vec holding all the default render options.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"render","","Renders directed graph `g` into the writer `w` in DOT syntax. (Simple wrapper around `render_opts` that passes a default set of options.)",null,{"inputs":[{"name":"g"},{"name":"w"}],"output":{"name":"result"}}],[5,"render_opts","","Renders directed graph `g` into the writer `w` in DOT syntax. (Main entry point for the library.)",null,null],[6,"Nodes","","",null,null],[6,"Edges","","",null,null],[8,"Labeller","","Each instance of a type that implements `Label<C>` maps to a unique identifier with respect to `C`, which is used to identify it in the generated .dot file. They can also provide more elaborate (and non-unique) label text that is used in the graphviz rendered output. The graph instance is responsible for providing the DOT compatible identifiers for the nodes and (optionally) rendered labels for the nodes and edges, as well as an identifier for the graph itself.",null,null],[16,"Node","","",3,null],[16,"Edge","","",3,null],[10,"graph_id","","Must return a DOT compatible identifier naming the graph.",3,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[10,"node_id","","Maps `n` to a unique identifier with respect to `self`. The implementor is responsible for ensuring that the returned name is a valid DOT identifier.",3,null],[11,"node_shape","","Maps `n` to one of the [graphviz `shape` names][1]. If `None` is returned, no `shape` attribute is specified.",3,null],[11,"node_label","","Maps `n` to a label that will be used in the rendered output. The label need not be unique, and may be the empty string; the default is just the output from `node_id`.",3,null],[11,"edge_label","","Maps `e` to a label that will be used in the rendered output. The label need not be unique, and may be the empty string; the default is in fact the empty string.",3,null],[11,"node_style","","Maps `n` to a style that will be used in the rendered output.",3,null],[11,"edge_style","","Maps `e` to a style that will be used in the rendered output.",3,null],[8,"GraphWalk","","GraphWalk is an abstraction over a directed graph = (nodes,edges) made up of node handles `N` and edge handles `E`, where each `E` can be mapped to its source and target nodes.",null,null],[16,"Node","","",4,null],[16,"Edge","","",4,null],[10,"nodes","","Returns all the nodes in this graph.",4,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[10,"edges","","Returns all of the edges in this graph.",4,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[10,"source","","The source node for `edge`.",4,null],[10,"target","","The target node for `edge`.",4,null],[8,"IntoCow","","",null,null],[10,"into_cow","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates an `Id` named `name`.",6,{"inputs":[{"name":"name"}],"output":{"name":"result"}}],[11,"as_slice","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name","","",6,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"label","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"escaped","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"html","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"to_dot_string","","Renders text as string suitable for a label in a .dot file. This includes quotes or suitable delimiters.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"prefix_line","","Puts `prefix` on a line above this label, with a blank line separator.",0,{"inputs":[{"name":"self"},{"name":"labeltext"}],"output":{"name":"labeltext"}}],[11,"suffix_line","","Puts `suffix` on a line below this label, with a blank line separator.",0,{"inputs":[{"name":"self"},{"name":"labeltext"}],"output":{"name":"labeltext"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"renderoption"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"renderoption"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"LabelText"],[4,"Style"],[4,"RenderOption"],[8,"Labeller"],[8,"GraphWalk"],[8,"IntoCow"],[3,"Id"]]};
searchIndex["jobserver"] = {"doc":"An implementation of the GNU make jobserver.","items":[[3,"Client","jobserver","A client of a jobserver",null,null],[3,"Acquired","","An acquired token from a jobserver.",null,null],[3,"HelperThread","","Structure returned from `Client::into_helper_thread` to manage the lifetime of the helper thread returned, see those associated docs for more info.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new jobserver initialized with the given parallelism limit.",0,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"from_env","","Attempts to connect to the jobserver specified in this process's environment.",0,{"inputs":[],"output":{"name":"option"}}],[11,"acquire","","Acquires a token from this jobserver client.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"configure","","Configures a child process to have access to this client's jobserver as well.",0,{"inputs":[{"name":"self"},{"name":"command"}],"output":null}],[11,"into_helper_thread","","Converts this `Client` into a helper thread to deal with a blocking `acquire` function a little more easily.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"request_token","","Request that the helper thread acquires a token, eventually calling the original closure with a token when it's available.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Client"],[3,"Acquired"],[3,"HelperThread"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",18,null],[12,"sa_family","","",18,null],[12,"sa_data","","",18,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",19,null],[12,"sin6_family","","",19,null],[12,"sin6_port","","",19,null],[12,"sin6_flowinfo","","",19,null],[12,"sin6_addr","","",19,null],[12,"sin6_scope_id","","",19,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",20,null],[12,"sun_family","","",20,null],[12,"sun_path","","",20,null],[3,"passwd","","",null,null],[12,"pw_name","","",21,null],[12,"pw_passwd","","",21,null],[12,"pw_uid","","",21,null],[12,"pw_gid","","",21,null],[12,"pw_change","","",21,null],[12,"pw_class","","",21,null],[12,"pw_gecos","","",21,null],[12,"pw_dir","","",21,null],[12,"pw_shell","","",21,null],[12,"pw_expire","","",21,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",22,null],[12,"ifa_name","","",22,null],[12,"ifa_flags","","",22,null],[12,"ifa_addr","","",22,null],[12,"ifa_netmask","","",22,null],[12,"ifa_dstaddr","","",22,null],[12,"ifa_data","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"utsname","","",null,null],[12,"sysname","","",24,null],[12,"nodename","","",24,null],[12,"release","","",24,null],[12,"version","","",24,null],[12,"machine","","",24,null],[3,"msghdr","","",null,null],[12,"msg_name","","",25,null],[12,"msg_namelen","","",25,null],[12,"msg_iov","","",25,null],[12,"msg_iovlen","","",25,null],[12,"msg_control","","",25,null],[12,"msg_controllen","","",25,null],[12,"msg_flags","","",25,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",26,null],[12,"cmsg_level","","",26,null],[12,"cmsg_type","","",26,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",27,null],[12,"if_name","","",27,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",28,null],[12,"aio_offset","","",28,null],[12,"aio_buf","","",28,null],[12,"aio_nbytes","","",28,null],[12,"aio_reqprio","","",28,null],[12,"aio_sigevent","","",28,null],[12,"aio_lio_opcode","","",28,null],[3,"utmpx","","",null,null],[12,"ut_user","","",29,null],[12,"ut_id","","",29,null],[12,"ut_line","","",29,null],[12,"ut_pid","","",29,null],[12,"ut_type","","",29,null],[12,"ut_tv","","",29,null],[12,"ut_host","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_pathv","","",30,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",31,null],[12,"ss_family","","",31,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",32,null],[12,"ai_family","","",32,null],[12,"ai_socktype","","",32,null],[12,"ai_protocol","","",32,null],[12,"ai_addrlen","","",32,null],[12,"ai_canonname","","",32,null],[12,"ai_addr","","",32,null],[12,"ai_next","","",32,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",33,null],[12,"denom","","",33,null],[3,"stat","","",null,null],[12,"st_dev","","",34,null],[12,"st_mode","","",34,null],[12,"st_nlink","","",34,null],[12,"st_ino","","",34,null],[12,"st_uid","","",34,null],[12,"st_gid","","",34,null],[12,"st_rdev","","",34,null],[12,"st_atime","","",34,null],[12,"st_atime_nsec","","",34,null],[12,"st_mtime","","",34,null],[12,"st_mtime_nsec","","",34,null],[12,"st_ctime","","",34,null],[12,"st_ctime_nsec","","",34,null],[12,"st_birthtime","","",34,null],[12,"st_birthtime_nsec","","",34,null],[12,"st_size","","",34,null],[12,"st_blocks","","",34,null],[12,"st_blksize","","",34,null],[12,"st_flags","","",34,null],[12,"st_gen","","",34,null],[12,"st_lspare","","",34,null],[12,"st_qspare","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_seekoff","","",35,null],[12,"d_reclen","","",35,null],[12,"d_namlen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",36,null],[12,"si_errno","","",36,null],[12,"si_code","","",36,null],[12,"si_pid","","",36,null],[12,"si_uid","","",36,null],[12,"si_status","","",36,null],[12,"si_addr","","",36,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_size","","",38,null],[12,"ss_flags","","",38,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",39,null],[12,"fst_posmode","","",39,null],[12,"fst_offset","","",39,null],[12,"fst_length","","",39,null],[12,"fst_bytesalloc","","",39,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",40,null],[12,"ra_count","","",40,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",41,null],[12,"f_frsize","","",41,null],[12,"f_blocks","","",41,null],[12,"f_bfree","","",41,null],[12,"f_bavail","","",41,null],[12,"f_files","","",41,null],[12,"f_ffree","","",41,null],[12,"f_favail","","",41,null],[12,"f_fsid","","",41,null],[12,"f_flag","","",41,null],[12,"f_namemax","","",41,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",42,null],[12,"dli_fbase","","",42,null],[12,"dli_sname","","",42,null],[12,"dli_saddr","","",42,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",43,null],[12,"sin_family","","",43,null],[12,"sin_port","","",43,null],[12,"sin_addr","","",43,null],[12,"sin_zero","","",43,null],[3,"statfs","","",null,null],[12,"f_bsize","","",44,null],[12,"f_iosize","","",44,null],[12,"f_blocks","","",44,null],[12,"f_bfree","","",44,null],[12,"f_bavail","","",44,null],[12,"f_files","","",44,null],[12,"f_ffree","","",44,null],[12,"f_fsid","","",44,null],[12,"f_owner","","",44,null],[12,"f_type","","",44,null],[12,"f_flags","","",44,null],[12,"f_fssubtype","","",44,null],[12,"f_fstypename","","",44,null],[12,"f_mntonname","","",44,null],[12,"f_mntfromname","","",44,null],[12,"f_reserved","","",44,null],[3,"kevent","","",null,null],[12,"ident","","",45,null],[12,"filter","","",45,null],[12,"flags","","",45,null],[12,"fflags","","",45,null],[12,"data","","",45,null],[12,"udata","","",45,null],[3,"kevent64_s","","",null,null],[12,"ident","","",46,null],[12,"filter","","",46,null],[12,"flags","","",46,null],[12,"fflags","","",46,null],[12,"data","","",46,null],[12,"udata","","",46,null],[12,"ext","","",46,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",47,null],[12,"dqb_bsoftlimit","","",47,null],[12,"dqb_curbytes","","",47,null],[12,"dqb_ihardlimit","","",47,null],[12,"dqb_isoftlimit","","",47,null],[12,"dqb_curinodes","","",47,null],[12,"dqb_btime","","",47,null],[12,"dqb_itime","","",47,null],[12,"dqb_id","","",47,null],[12,"dqb_spare","","",47,null],[3,"if_msghdr","","",null,null],[12,"ifm_msglen","","",48,null],[12,"ifm_version","","",48,null],[12,"ifm_type","","",48,null],[12,"ifm_addrs","","",48,null],[12,"ifm_flags","","",48,null],[12,"ifm_index","","",48,null],[12,"ifm_data","","",48,null],[3,"termios","","",null,null],[12,"c_iflag","","",49,null],[12,"c_oflag","","",49,null],[12,"c_cflag","","",49,null],[12,"c_lflag","","",49,null],[12,"c_cc","","",49,null],[12,"c_ispeed","","",49,null],[12,"c_ospeed","","",49,null],[3,"flock","","",null,null],[12,"l_start","","",50,null],[12,"l_len","","",50,null],[12,"l_pid","","",50,null],[12,"l_type","","",50,null],[12,"l_whence","","",50,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",51,null],[12,"hdr_cnt","","",51,null],[12,"trailers","","",51,null],[12,"trl_cnt","","",51,null],[3,"lconv","","",null,null],[12,"decimal_point","","",52,null],[12,"thousands_sep","","",52,null],[12,"grouping","","",52,null],[12,"int_curr_symbol","","",52,null],[12,"currency_symbol","","",52,null],[12,"mon_decimal_point","","",52,null],[12,"mon_thousands_sep","","",52,null],[12,"mon_grouping","","",52,null],[12,"positive_sign","","",52,null],[12,"negative_sign","","",52,null],[12,"int_frac_digits","","",52,null],[12,"frac_digits","","",52,null],[12,"p_cs_precedes","","",52,null],[12,"p_sep_by_space","","",52,null],[12,"n_cs_precedes","","",52,null],[12,"n_sep_by_space","","",52,null],[12,"p_sign_posn","","",52,null],[12,"n_sign_posn","","",52,null],[12,"int_p_cs_precedes","","",52,null],[12,"int_n_cs_precedes","","",52,null],[12,"int_p_sep_by_space","","",52,null],[12,"int_n_sep_by_space","","",52,null],[12,"int_p_sign_posn","","",52,null],[12,"int_n_sign_posn","","",52,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",53,null],[12,"sigev_signo","","",53,null],[12,"sigev_value","","",53,null],[12,"sigev_notify_attributes","","",53,null],[3,"proc_taskinfo","","",null,null],[12,"pti_virtual_size","","",54,null],[12,"pti_resident_size","","",54,null],[12,"pti_total_user","","",54,null],[12,"pti_total_system","","",54,null],[12,"pti_threads_user","","",54,null],[12,"pti_threads_system","","",54,null],[12,"pti_policy","","",54,null],[12,"pti_faults","","",54,null],[12,"pti_pageins","","",54,null],[12,"pti_cow_faults","","",54,null],[12,"pti_messages_sent","","",54,null],[12,"pti_messages_received","","",54,null],[12,"pti_syscalls_mach","","",54,null],[12,"pti_syscalls_unix","","",54,null],[12,"pti_csw","","",54,null],[12,"pti_threadnum","","",54,null],[12,"pti_numrunning","","",54,null],[12,"pti_priority","","",54,null],[3,"proc_bsdinfo","","",null,null],[12,"pbi_flags","","",55,null],[12,"pbi_status","","",55,null],[12,"pbi_xstatus","","",55,null],[12,"pbi_pid","","",55,null],[12,"pbi_ppid","","",55,null],[12,"pbi_uid","","",55,null],[12,"pbi_gid","","",55,null],[12,"pbi_ruid","","",55,null],[12,"pbi_rgid","","",55,null],[12,"pbi_svuid","","",55,null],[12,"pbi_svgid","","",55,null],[12,"rfu_1","","",55,null],[12,"pbi_comm","","",55,null],[12,"pbi_name","","",55,null],[12,"pbi_nfiles","","",55,null],[12,"pbi_pgid","","",55,null],[12,"pbi_pjobc","","",55,null],[12,"e_tdev","","",55,null],[12,"e_tpgid","","",55,null],[12,"pbi_nice","","",55,null],[12,"pbi_start_tvsec","","",55,null],[12,"pbi_start_tvusec","","",55,null],[3,"proc_taskallinfo","","",null,null],[12,"pbsd","","",56,null],[12,"ptinfo","","",56,null],[3,"proc_threadinfo","","",null,null],[12,"pth_user_time","","",57,null],[12,"pth_system_time","","",57,null],[12,"pth_cpu_usage","","",57,null],[12,"pth_policy","","",57,null],[12,"pth_run_state","","",57,null],[12,"pth_flags","","",57,null],[12,"pth_sleep_time","","",57,null],[12,"pth_curpri","","",57,null],[12,"pth_priority","","",57,null],[12,"pth_maxpriority","","",57,null],[12,"pth_name","","",57,null],[3,"xsw_usage","","",null,null],[12,"xsu_total","","",58,null],[12,"xsu_avail","","",58,null],[12,"xsu_used","","",58,null],[12,"xsu_pagesize","","",58,null],[12,"xsu_encrypted","","",58,null],[3,"pthread_attr_t","","",null,null],[3,"timeval32","","",null,null],[12,"tv_sec","","",59,null],[12,"tv_usec","","",59,null],[3,"if_data","","",null,null],[12,"ifi_type","","",60,null],[12,"ifi_typelen","","",60,null],[12,"ifi_physical","","",60,null],[12,"ifi_addrlen","","",60,null],[12,"ifi_hdrlen","","",60,null],[12,"ifi_recvquota","","",60,null],[12,"ifi_xmitquota","","",60,null],[12,"ifi_unused1","","",60,null],[12,"ifi_mtu","","",60,null],[12,"ifi_metric","","",60,null],[12,"ifi_baudrate","","",60,null],[12,"ifi_ipackets","","",60,null],[12,"ifi_ierrors","","",60,null],[12,"ifi_opackets","","",60,null],[12,"ifi_oerrors","","",60,null],[12,"ifi_collisions","","",60,null],[12,"ifi_ibytes","","",60,null],[12,"ifi_obytes","","",60,null],[12,"ifi_imcasts","","",60,null],[12,"ifi_omcasts","","",60,null],[12,"ifi_iqdrops","","",60,null],[12,"ifi_noproto","","",60,null],[12,"ifi_recvtiming","","",60,null],[12,"ifi_xmittiming","","",60,null],[12,"ifi_lastchange","","",60,null],[12,"ifi_unused2","","",60,null],[12,"ifi_hwassist","","",60,null],[12,"ifi_reserved1","","",60,null],[12,"ifi_reserved2","","",60,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sync","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"dirfd","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"getxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"getgrouplist","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"settimeofday","","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"boolean_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"NCCS","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_SHLOCK","","",null,null],[17,"O_EXLOCK","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"MDMBUF","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_SELF","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"VM_FLAGS_FIXED","","",null,null],[17,"VM_FLAGS_ANYWHERE","","",null,null],[17,"VM_FLAGS_PURGABLE","","",null,null],[17,"VM_FLAGS_RANDOM_ADDR","","",null,null],[17,"VM_FLAGS_NO_CACHE","","",null,null],[17,"VM_FLAGS_RESILIENT_CODESIGN","","",null,null],[17,"VM_FLAGS_RESILIENT_MEDIA","","",null,null],[17,"VM_FLAGS_OVERWRITE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_MASK","","",null,null],[17,"VM_FLAGS_RETURN_DATA_ADDR","","",null,null],[17,"VM_FLAGS_RETURN_4K_DATA_ADDR","","",null,null],[17,"VM_FLAGS_ALIAS_MASK","","",null,null],[17,"VM_FLAGS_USER_ALLOCATE","","",null,null],[17,"VM_FLAGS_USER_MAP","","",null,null],[17,"VM_FLAGS_USER_REMAP","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SHIFT","","",null,null],[17,"SUPERPAGE_NONE","","",null,null],[17,"SUPERPAGE_SIZE_ANY","","",null,null],[17,"VM_FLAGS_SUPERPAGE_NONE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_ANY","","",null,null],[17,"SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_MEMORY_MALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_SMALL","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE","","",null,null],[17,"VM_MEMORY_MALLOC_HUGE","","",null,null],[17,"VM_MEMORY_SBRK","","",null,null],[17,"VM_MEMORY_REALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_TINY","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSABLE","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSED","","",null,null],[17,"VM_MEMORY_ANALYSIS_TOOL","","",null,null],[17,"VM_MEMORY_MALLOC_NANO","","",null,null],[17,"VM_MEMORY_MACH_MSG","","",null,null],[17,"VM_MEMORY_IOKIT","","",null,null],[17,"VM_MEMORY_STACK","","",null,null],[17,"VM_MEMORY_GUARD","","",null,null],[17,"VM_MEMORY_SHARED_PMAP","","",null,null],[17,"VM_MEMORY_DYLIB","","",null,null],[17,"VM_MEMORY_OBJC_DISPATCHERS","","",null,null],[17,"VM_MEMORY_UNSHARED_PMAP","","",null,null],[17,"VM_MEMORY_APPKIT","","",null,null],[17,"VM_MEMORY_FOUNDATION","","",null,null],[17,"VM_MEMORY_COREGRAPHICS","","",null,null],[17,"VM_MEMORY_CORESERVICES","","",null,null],[17,"VM_MEMORY_CARBON","","",null,null],[17,"VM_MEMORY_JAVA","","",null,null],[17,"VM_MEMORY_COREDATA","","",null,null],[17,"VM_MEMORY_COREDATA_OBJECTIDS","","",null,null],[17,"VM_MEMORY_ATS","","",null,null],[17,"VM_MEMORY_LAYERKIT","","",null,null],[17,"VM_MEMORY_CGIMAGE","","",null,null],[17,"VM_MEMORY_TCMALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_DATA","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_SHARED","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_BACKINGSTORES","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_XALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_MISC","","",null,null],[17,"VM_MEMORY_DYLD","","",null,null],[17,"VM_MEMORY_DYLD_MALLOC","","",null,null],[17,"VM_MEMORY_SQLITE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_CORE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","","",null,null],[17,"VM_MEMORY_GLSL","","",null,null],[17,"VM_MEMORY_OPENCL","","",null,null],[17,"VM_MEMORY_COREIMAGE","","",null,null],[17,"VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","","",null,null],[17,"VM_MEMORY_IMAGEIO","","",null,null],[17,"VM_MEMORY_COREPROFILE","","",null,null],[17,"VM_MEMORY_ASSETSD","","",null,null],[17,"VM_MEMORY_OS_ALLOC_ONCE","","",null,null],[17,"VM_MEMORY_LIBDISPATCH","","",null,null],[17,"VM_MEMORY_ACCELERATE","","",null,null],[17,"VM_MEMORY_COREUI","","",null,null],[17,"VM_MEMORY_COREUIFILE","","",null,null],[17,"VM_MEMORY_GENEALOGY","","",null,null],[17,"VM_MEMORY_RAWCAMERA","","",null,null],[17,"VM_MEMORY_CORPSEINFO","","",null,null],[17,"VM_MEMORY_ASL","","",null,null],[17,"VM_MEMORY_SWIFT_RUNTIME","","",null,null],[17,"VM_MEMORY_SWIFT_METADATA","","",null,null],[17,"VM_MEMORY_DHMM","","",null,null],[17,"VM_MEMORY_SCENEKIT","","",null,null],[17,"VM_MEMORY_SKYWALK","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_1","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_16","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"B7200","","",null,null],[17,"B14400","","",null,null],[17,"B28800","","",null,null],[17,"B57600","","",null,null],[17,"B76800","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_GGP","","gateway^2 (deprecated)",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_ST","","Stream protocol II.",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PIGP","","private interior gateway",null,null],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",null,null],[17,"IPPROTO_NVPII","","network voice protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_ARGUS","","Argus",null,null],[17,"IPPROTO_EMCON","","EMCON",null,null],[17,"IPPROTO_XNET","","Cross Net Debugger",null,null],[17,"IPPROTO_CHAOS","","Chaos",null,null],[17,"IPPROTO_MUX","","Multiplexing",null,null],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",null,null],[17,"IPPROTO_HMP","","Host Monitoring",null,null],[17,"IPPROTO_PRM","","Packet Radio Measurement",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TRUNK1","","Trunk-1",null,null],[17,"IPPROTO_TRUNK2","","Trunk-2",null,null],[17,"IPPROTO_LEAF1","","Leaf-1",null,null],[17,"IPPROTO_LEAF2","","Leaf-2",null,null],[17,"IPPROTO_RDP","","Reliable Data",null,null],[17,"IPPROTO_IRTP","","Reliable Transaction",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_BLT","","Bulk Data Transfer",null,null],[17,"IPPROTO_NSP","","Network Services",null,null],[17,"IPPROTO_INP","","Merit Internodal",null,null],[17,"IPPROTO_SEP","","Sequential Exchange",null,null],[17,"IPPROTO_3PC","","Third Party Connect",null,null],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",null,null],[17,"IPPROTO_XTP","","XTP",null,null],[17,"IPPROTO_DDP","","Datagram Delivery",null,null],[17,"IPPROTO_CMTP","","Control Message Transport",null,null],[17,"IPPROTO_TPXX","","TP++ Transport",null,null],[17,"IPPROTO_IL","","IL transport protocol",null,null],[17,"IPPROTO_SDRP","","Source Demand Routing",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_IDRP","","InterDomain Routing",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_MHRP","","Mobile Host Routing",null,null],[17,"IPPROTO_BHA","","BHA",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",null,null],[17,"IPPROTO_SWIPE","","IP with encryption",null,null],[17,"IPPROTO_NHRP","","Next Hop Resolution",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_AHIP","","any host internal protocol",null,null],[17,"IPPROTO_CFTP","","CFTP",null,null],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",null,null],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",null,null],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",null,null],[17,"IPPROTO_RVD","","Remote Virtual Disk",null,null],[17,"IPPROTO_IPPC","","Pluribus Packet Core",null,null],[17,"IPPROTO_ADFS","","Any distributed FS",null,null],[17,"IPPROTO_SATMON","","Satnet Monitoring",null,null],[17,"IPPROTO_VISA","","VISA Protocol",null,null],[17,"IPPROTO_IPCV","","Packet Core Utility",null,null],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",null,null],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",null,null],[17,"IPPROTO_WSN","","Wang Span Network",null,null],[17,"IPPROTO_PVP","","Packet Video Protocol",null,null],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",null,null],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",null,null],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",null,null],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",null,null],[17,"IPPROTO_EON","","ISO cnlp",null,null],[17,"IPPROTO_VMTP","","VMTP",null,null],[17,"IPPROTO_SVMTP","","Secure VMTP",null,null],[17,"IPPROTO_VINES","","Banyon VINES",null,null],[17,"IPPROTO_TTP","","TTP",null,null],[17,"IPPROTO_IGP","","NSFNET-IGP",null,null],[17,"IPPROTO_DGP","","dissimilar gateway prot.",null,null],[17,"IPPROTO_TCF","","TCF",null,null],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",null,null],[17,"IPPROTO_OSPFIGP","","OSPFIGP",null,null],[17,"IPPROTO_SRPC","","Strite RPC protocol",null,null],[17,"IPPROTO_LARP","","Locus Address Resoloution",null,null],[17,"IPPROTO_MTP","","Multicast Transport",null,null],[17,"IPPROTO_AX25","","AX.25 Frames",null,null],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",null,null],[17,"IPPROTO_MICP","","Mobile Int.ing control",null,null],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",null,null],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_APES","","any private encr. scheme",null,null],[17,"IPPROTO_GMTP","","GMTP",null,null],[17,"IPPROTO_PIM","","Protocol Independent Mcast",null,null],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",null,null],[17,"IPPROTO_PGM","","PGM",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_IMPLINK","","",null,null],[17,"AF_PUP","","",null,null],[17,"AF_CHAOS","","",null,null],[17,"AF_NS","","",null,null],[17,"AF_ISO","","",null,null],[17,"AF_OSI","","",null,null],[17,"AF_ECMA","","",null,null],[17,"AF_DATAKIT","","",null,null],[17,"AF_CCITT","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_DLI","","",null,null],[17,"AF_LAT","","",null,null],[17,"AF_HYLINK","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_LINK","","",null,null],[17,"pseudo_AF_XTP","","",null,null],[17,"AF_COIP","","",null,null],[17,"AF_CNT","","",null,null],[17,"pseudo_AF_RTIP","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_SIP","","",null,null],[17,"pseudo_AF_PIP","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_E164","","",null,null],[17,"pseudo_AF_KEY","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NATM","","",null,null],[17,"AF_SYSTEM","","",null,null],[17,"AF_NETBIOS","","",null,null],[17,"AF_PPP","","",null,null],[17,"pseudo_AF_HDRCMPLT","","",null,null],[17,"AF_SYS_CONTROL","","",null,null],[17,"SYSPROTO_EVENT","","",null,null],[17,"SYSPROTO_CONTROL","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_IMPLINK","","",null,null],[17,"PF_PUP","","",null,null],[17,"PF_CHAOS","","",null,null],[17,"PF_NS","","",null,null],[17,"PF_ISO","","",null,null],[17,"PF_OSI","","",null,null],[17,"PF_ECMA","","",null,null],[17,"PF_DATAKIT","","",null,null],[17,"PF_CCITT","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_DLI","","",null,null],[17,"PF_LAT","","",null,null],[17,"PF_HYLINK","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_LINK","","",null,null],[17,"PF_XTP","","",null,null],[17,"PF_COIP","","",null,null],[17,"PF_CNT","","",null,null],[17,"PF_SIP","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_RTIP","","",null,null],[17,"PF_PIP","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_NATM","","",null,null],[17,"PF_SYSTEM","","",null,null],[17,"PF_NETBIOS","","",null,null],[17,"PF_PPP","","",null,null],[17,"NET_RT_DUMP","","",null,null],[17,"NET_RT_FLAGS","","",null,null],[17,"NET_RT_IFLIST","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"SOCK_MAXADDRLEN","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOF","","",null,null],[17,"MSG_FLUSH","","",null,null],[17,"MSG_HOLD","","",null,null],[17,"MSG_SEND","","",null,null],[17,"MSG_HAVEMORE","","",null,null],[17,"MSG_RCVMORE","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SCM_CREDS","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"NLDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"OFDEL","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"XATTR_NOFOLLOW","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"XATTR_NOSECURITY","","",null,null],[17,"XATTR_NODEFAULT","","",null,null],[17,"XATTR_SHOWCOMPRESSION","","",null,null],[17,"NET_RT_IFLIST2","","",null,null],[17,"RTM_IFINFO2","","",null,null],[17,"KERN_PROCARGS2","","",null,null],[17,"PROC_PIDTASKALLINFO","","",null,null],[17,"PROC_PIDTASKINFO","","",null,null],[17,"PROC_PIDTHREADINFO","","",null,null],[17,"MAXCOMLEN","","",null,null],[17,"MAXTHREADNAMESIZE","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"proc_threadinfo"],[3,"xsw_usage"],[3,"timeval32"],[3,"if_data"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message. This structure is primarily used as a parameter in the [`log`] method of the [`Log`] trait.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework.",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["num_cpus"] = {"doc":"num_cpus","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["panic_abort"] = {"doc":"Implementation of Rust panics via process aborts","items":[[5,"__rust_maybe_catch_panic","panic_abort","",null,null],[5,"__rust_start_panic","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"u32"}}],[0,"personalities","","",null,null],[5,"rust_eh_personality","panic_abort::personalities","",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex["panic_unwind"] = {"doc":"Implementation of panics via stack unwinding","items":[[5,"__rust_maybe_catch_panic","panic_unwind","",null,null],[5,"__rust_start_panic","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"u32"}}]],"paths":[]};
searchIndex["proc_macro"] = {"doc":"A support library for macro authors when defining new macros.","items":[[3,"Diagnostic","proc_macro","A structure representing a diagnostic message and associated children messages.",null,null],[3,"TokenStream","","The main type provided by this crate, representing an abstract stream of tokens.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"LineColumn","","A line-column pair representing the start or end of a `Span`.",null,null],[3,"SourceFile","","The source file of a given `Span`.",null,null],[3,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[12,"span","","The `TokenTree`'s span",0,null],[12,"kind","","Description of the `TokenTree`",0,null],[3,"Term","","An interned string.",null,null],[3,"Literal","","A literal character (`'a'`), string (`\"hello\"`), or number (`2.3`).",null,null],[3,"TokenTreeIter","","An iterator over `TokenTree`s.",null,null],[4,"Level","","An enum representing a diagnostic level.",null,null],[13,"Error","","An error.",1,null],[13,"Warning","","A warning.",1,null],[13,"Note","","A note.",1,null],[13,"Help","","A help message.",1,null],[4,"TokenNode","","Description of a `TokenTree`",null,null],[13,"Group","","A delimited tokenstream.",2,null],[13,"Term","","A unicode identifier.",2,null],[13,"Op","","A punctuation character (`+`, `,`, `$`, etc.).",2,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), or number (`2.3`).",2,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",3,null],[13,"Brace","","`{ ... }`",3,null],[13,"Bracket","","`[ ... ]`",3,null],[13,"None","","An implicit delimiter, e.g. `$var`, where $var is  `...`.",3,null],[4,"Spacing","","Whether an `Op` is either followed immediately by another `Op` or followed by whitespace.",null,null],[13,"Alone","","e.g. `+` is `Alone` in `+ =`.",4,null],[13,"Joint","","e.g. `+` is `Joint` in `+=`.",4,null],[5,"quote_span","","Quote a `Span` into a `TokenStream`. This is needed to implement a custom quoter.",null,{"inputs":[{"name":"span"}],"output":{"name":"tokenstream"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new diagnostic with the given `level` and `message`.",5,{"inputs":[{"name":"level"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"spanned","","Create a new diagnostic with the given `level` and `message` pointing to the given `span`.",5,{"inputs":[{"name":"span"},{"name":"level"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"span_error","","Add a new child diagnostic message to `self` with the level identified by this methods name with the given `span` and `message`.",5,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"error","","Add a new child diagnostic message to `self` with the level identified by this method's name with the given `message`.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"span_warning","","Add a new child diagnostic message to `self` with the level identified by this methods name with the given `span` and `message`.",5,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"warning","","Add a new child diagnostic message to `self` with the level identified by this method's name with the given `message`.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"span_note","","Add a new child diagnostic message to `self` with the level identified by this methods name with the given `span` and `message`.",5,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"note","","Add a new child diagnostic message to `self` with the level identified by this method's name with the given `message`.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"span_help","","Add a new child diagnostic message to `self` with the level identified by this methods name with the given `span` and `message`.",5,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"help","","Add a new child diagnostic message to `self` with the level identified by this method's name with the given `message`.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"level","","Returns the diagnostic `level` for `self`.",5,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"emit","","Emit the diagnostic.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from","","",6,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"empty","","Returns an empty `TokenStream`.",6,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"span"}}],[11,"call_site","","The span of the invocation of the current procedural macro.",8,{"inputs":[],"output":{"name":"span"}}],[11,"source_file","","The original source file into which this span points.",8,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"start","","Get the starting line/column in the source file for this span.",8,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","Get the ending line/column in the source file for this span.",8,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","Create a new span encompassing `self` and `other`.",8,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"error","","Create a new `Diagnostic` with the given `message` at the span `self`.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"warning","","Create a new `Diagnostic` with the given `message` at the span `self`.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"note","","Create a new `Diagnostic` with the given `message` at the span `self`.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"help","","Create a new `Diagnostic` with the given `message` at the span `self`.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"linecolumn"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"linecolumn"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"as_str","","Get the path to this source file as a string.",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_real","","Returns `true` if this source file is a real source file, and not generated by an external macro's expansion.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokennode"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"intern","","Intern a string into a `Term`.",11,{"inputs":[{"name":"str"}],"output":{"name":"term"}}],[11,"as_str","","Get a reference to the interned string.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"integer","","Integer literal",12,{"inputs":[{"name":"i128"}],"output":{"name":"literal"}}],[11,"u8","","Integer literal.",12,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"i8","","Integer literal.",12,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"u16","","Integer literal.",12,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"i16","","Integer literal.",12,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"u32","","Integer literal.",12,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"i32","","Integer literal.",12,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"u64","","Integer literal.",12,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"i64","","Integer literal.",12,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"usize","","Integer literal.",12,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"isize","","Integer literal.",12,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"float","","Floating point literal.",12,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32","","Floating point literal.",12,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"f64","","Floating point literal.",12,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"string","","String literal.",12,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","Character literal.",12,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","Byte string literal.",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[14,"quote","","`quote!(..)` accepts arbitrary tokens and expands into a `TokenStream` describing the input. For example, `quote!(a + b)` will produce a expression, that, when evaluated, constructs the `TokenStream` `[Word(\"a\"), Op('+', Alone), Word(\"b\")]`.",null,null]],"paths":[[3,"TokenTree"],[4,"Level"],[4,"TokenNode"],[4,"Delimiter"],[4,"Spacing"],[3,"Diagnostic"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"LineColumn"],[3,"SourceFile"],[3,"Term"],[3,"Literal"],[3,"TokenTreeIter"]]};
searchIndex["rand"] = {"doc":"Interface to random number generators in Rust.","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",3,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",4,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",5,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",6,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",7,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",8,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",9,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",9,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",11,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",12,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"randsample"}}],[11,"sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",16,null],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",17,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",19,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",19,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",19,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behavior when reseeding the RNG.",20,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",21,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",20,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",20,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","Creates an instance of `ReseedWithDefault`.",22,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[8,"Rng","rand","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",23,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",23,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",23,null],[11,"gen","","Return a random value of a `Rand` type.",23,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",23,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",23,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",23,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",23,null],[11,"shuffle","","Shuffle a mutable slice in place.",23,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",24,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",24,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",27,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",27,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",27,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"]]};
searchIndex["rls_data"] = {"doc":"","items":[[3,"Analysis","rls_data","",null,null],[12,"config","","The Config used to generate this analysis data.",0,null],[12,"prelude","","",0,null],[12,"imports","","",0,null],[12,"defs","","",0,null],[12,"impls","","",0,null],[12,"refs","","",0,null],[12,"macro_refs","","",0,null],[12,"relations","","",0,null],[3,"Id","","",null,null],[12,"krate","","",1,null],[12,"index","","",1,null],[3,"SpanData","","",null,null],[12,"file_name","","",2,null],[12,"byte_start","","",2,null],[12,"byte_end","","",2,null],[12,"line_start","","",2,null],[12,"line_end","","",2,null],[12,"column_start","","",2,null],[12,"column_end","","",2,null],[3,"CratePreludeData","","",null,null],[12,"crate_name","","",3,null],[12,"crate_root","","",3,null],[12,"external_crates","","",3,null],[12,"span","","",3,null],[3,"ExternalCrateData","","Data for external crates in the prelude of a crate.",null,null],[12,"name","","",4,null],[12,"num","","",4,null],[12,"file_name","","",4,null],[3,"Import","","",null,null],[12,"kind","","",5,null],[12,"ref_id","","",5,null],[12,"span","","",5,null],[12,"name","","",5,null],[12,"value","","",5,null],[3,"Def","","",null,null],[12,"kind","","",6,null],[12,"id","","",6,null],[12,"span","","",6,null],[12,"name","","",6,null],[12,"qualname","","",6,null],[12,"value","","",6,null],[12,"parent","","",6,null],[12,"children","","",6,null],[12,"decl_id","","",6,null],[12,"docs","","",6,null],[12,"sig","","",6,null],[12,"attributes","","",6,null],[3,"Impl","","",null,null],[12,"id","","",7,null],[12,"kind","","",7,null],[12,"span","","",7,null],[12,"value","","",7,null],[12,"parent","","",7,null],[12,"children","","",7,null],[12,"docs","","",7,null],[12,"sig","","",7,null],[12,"attributes","","",7,null],[3,"Attribute","","",null,null],[12,"value","","",8,null],[12,"span","","",8,null],[3,"Ref","","",null,null],[12,"kind","","",9,null],[12,"span","","",9,null],[12,"ref_id","","",9,null],[3,"MacroRef","","",null,null],[12,"span","","",10,null],[12,"qualname","","",10,null],[12,"callee_span","","",10,null],[3,"Relation","","",null,null],[12,"span","","",11,null],[12,"kind","","",11,null],[12,"from","","",11,null],[12,"to","","",11,null],[3,"Signature","","",null,null],[12,"text","","",12,null],[12,"defs","","",12,null],[12,"refs","","",12,null],[3,"SigElement","","",null,null],[12,"id","","",13,null],[12,"start","","",13,null],[12,"end","","",13,null],[4,"ImportKind","","",null,null],[13,"ExternCrate","","",14,null],[13,"Use","","",14,null],[13,"GlobUse","","",14,null],[4,"DefKind","","",null,null],[13,"Enum","","",15,null],[13,"Tuple","","",15,null],[13,"Struct","","",15,null],[13,"Union","","",15,null],[13,"Trait","","",15,null],[13,"Function","","",15,null],[13,"Method","","",15,null],[13,"Macro","","",15,null],[13,"Mod","","",15,null],[13,"Type","","",15,null],[13,"Local","","",15,null],[13,"Static","","",15,null],[13,"Const","","",15,null],[13,"Field","","",15,null],[4,"ImplKind","","",null,null],[13,"Inherent","","",16,null],[13,"Direct","","",16,null],[13,"Indirect","","",16,null],[13,"Blanket","","",16,null],[13,"Deref","","",16,null],[4,"RefKind","","",null,null],[13,"Function","","",17,null],[13,"Mod","","",17,null],[13,"Type","","",17,null],[13,"Variable","","",17,null],[4,"RelationKind","","",null,null],[13,"Impl","","",18,null],[13,"SuperTrait","","",18,null],[0,"config","","",null,null],[3,"Config","rls_data::config","Used to configure save-analysis.",null,null],[12,"output_file","","File to output save-analysis data to.",19,null],[12,"full_docs","","Include all documentation for items. (If `false`, only includes the summary (first paragraph) for each item).",19,null],[12,"pub_only","","If true only includes data for public items in a crate (useful for library crates).",19,null],[12,"distro_crate","","True if and only if the analysed crate is part of the standard Rust distro.",19,null],[12,"signatures","","Include signature information.",19,null],[12,"borrow_data","","Include experimental borrow data.",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"config"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","rls_data","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"analysis"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"config"}],"output":{"name":"analysis"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cratepreludedata"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"externalcratedata"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"import"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"importkind"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"importkind"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"defkind"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"defkind"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"implkind"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"implkind"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"implkind"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"refkind"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"refkind"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"macroref"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"relation"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"relationkind"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"relationkind"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sigelement"}}],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}]],"paths":[[3,"Analysis"],[3,"Id"],[3,"SpanData"],[3,"CratePreludeData"],[3,"ExternalCrateData"],[3,"Import"],[3,"Def"],[3,"Impl"],[3,"Attribute"],[3,"Ref"],[3,"MacroRef"],[3,"Relation"],[3,"Signature"],[3,"SigElement"],[4,"ImportKind"],[4,"DefKind"],[4,"ImplKind"],[4,"RefKind"],[4,"RelationKind"],[3,"Config"]]};
searchIndex["rls_span"] = {"doc":"","items":[[3,"Column","rls_span","",null,null],[12,"0","","",0,null],[3,"Row","","",null,null],[12,"0","","",1,null],[3,"Position","","",null,null],[12,"row","","",2,null],[12,"col","","",2,null],[3,"Range","","",null,null],[12,"row_start","","",3,null],[12,"row_end","","",3,null],[12,"col_start","","",3,null],[12,"col_end","","",3,null],[3,"Location","","",null,null],[12,"file","","",4,null],[12,"position","","",4,null],[3,"Span","","",null,null],[12,"file","","",5,null],[12,"range","","",5,null],[3,"ZeroIndexed","","",null,null],[3,"OneIndexed","","",null,null],[0,"compiler","","",null,null],[3,"DiagnosticSpan","rls_span::compiler","",null,null],[12,"file_name","","",6,null],[12,"byte_start","","",6,null],[12,"byte_end","","",6,null],[12,"line_start","","1-based.",6,null],[12,"line_end","","",6,null],[12,"column_start","","1-based, character offset.",6,null],[12,"column_end","","",6,null],[12,"is_primary","","Is this a \"primary\" span -- meaning the point, or one of the points, where the error occurred?",6,null],[12,"text","","Source text from the start of line_start to the end of line_end.",6,null],[12,"label","","Label that should be placed at this location (if any)",6,null],[12,"suggested_replacement","","If we are suggesting a replacement, this will contain text that should be sliced in atop this span. You may prefer to load the fully rendered version from the parent `Diagnostic`, however.",6,null],[12,"expansion","","Macro invocations that created the code at this span, if any.",6,null],[3,"DiagnosticSpanLine","","",null,null],[12,"text","","",7,null],[12,"highlight_start","","1-based, character offset in self.text.",7,null],[12,"highlight_end","","",7,null],[3,"DiagnosticSpanMacroExpansion","","",null,null],[12,"span","","span where macro was applied to generate this code; note that this may itself derive from a macro (if `span.expansion.is_some()`)",8,null],[12,"macro_decl_name","","name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")",8,null],[12,"def_site_span","","span where macro was defined (if known)",8,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticspan"}}],[11,"rls_span","","",6,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticspanline"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticspanmacroexpansion"}}],[8,"Indexed","rls_span","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_one_indexed","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"column"}}],[11,"zero_indexed","","",0,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"new_zero_indexed","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"column"}}],[11,"one_indexed","","",0,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_one_indexed","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"row"}}],[11,"zero_indexed","","",1,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"new_zero_indexed","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"row"}}],[11,"one_indexed","","",1,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"decode","","",2,{"inputs":[{"name":"__di"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__si"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"ordering"}}],[11,"new","","",2,{"inputs":[{"name":"row"},{"name":"column"}],"output":{"name":"position"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"zero_indexed","","",2,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"one_indexed","","",2,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"decode","","",3,{"inputs":[{"name":"__di"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__si"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"ordering"}}],[11,"new","","",3,{"inputs":[{"name":"row"},{"name":"row"},{"name":"column"},{"name":"column"}],"output":{"name":"range"}}],[11,"from_positions","","",3,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"range"}}],[11,"start","","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"end","","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"zero_indexed","","",3,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"one_indexed","","",3,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"decode","","",4,{"inputs":[{"name":"__di"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__si"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"ordering"}}],[11,"new","","",4,{"inputs":[{"name":"row"},{"name":"column"},{"name":"f"}],"output":{"name":"location"}}],[11,"from_position","","",4,{"inputs":[{"name":"position"},{"name":"f"}],"output":{"name":"location"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"zero_indexed","","",4,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"one_indexed","","",4,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"decode","","",5,{"inputs":[{"name":"__di"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__si"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"new","","",5,{"inputs":[{"name":"row"},{"name":"row"},{"name":"column"},{"name":"column"},{"name":"f"}],"output":{"name":"span"}}],[11,"from_range","","",5,{"inputs":[{"name":"range"},{"name":"f"}],"output":{"name":"span"}}],[11,"from_positions","","",5,{"inputs":[{"name":"position"},{"name":"position"},{"name":"f"}],"output":{"name":"span"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"zero_indexed","","",5,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"one_indexed","","",5,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"zeroindexed"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"zeroindexed"}],"output":{"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"zeroindexed"}],"output":{"name":"ordering"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"oneindexed"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"oneindexed"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"oneindexed"}],"output":{"name":"ordering"}}]],"paths":[[3,"Column"],[3,"Row"],[3,"Position"],[3,"Range"],[3,"Location"],[3,"Span"],[3,"DiagnosticSpan"],[3,"DiagnosticSpanLine"],[3,"DiagnosticSpanMacroExpansion"],[3,"ZeroIndexed"],[3,"OneIndexed"]]};
searchIndex["rustc"] = {"doc":"The \"main crate\" of the Rust compiler. This crate contains common type definitions that are used by the other crates in the rustc \"family\". Some prominent examples (note that each of these modules has their own README with further details).","items":[[0,"diagnostics","rustc","",null,null],[0,"cfg","","Module that constructs a control-flow graph representing an item. Uses `Graph` as the underlying representation.",null,null],[3,"CFG","rustc::cfg","",null,null],[12,"owner_def_id","","",0,null],[12,"graph","","",0,null],[12,"entry","","",0,null],[12,"exit","","",0,null],[3,"CFGEdgeData","","",null,null],[12,"exiting_scopes","","",1,null],[4,"CFGNodeData","","",null,null],[13,"AST","","",2,null],[13,"Entry","","",2,null],[13,"Exit","","",2,null],[13,"Dummy","","",2,null],[13,"Unreachable","","",2,null],[0,"graphviz","","",null,null],[3,"LabelledCFG","rustc::cfg::graphviz","",null,null],[12,"tcx","","",3,null],[12,"cfg","","",3,null],[12,"name","","",3,null],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",3,null],[6,"Node","","",null,null],[6,"Edge","","",null,null],[11,"graph_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node_id","","",3,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"id"}}],[11,"node_label","","",3,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"labeltext"}}],[11,"edge_label","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"labeltext"}}],[11,"nodes","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"edges","","",3,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[11,"source","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}],[11,"target","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}],[6,"CFGIndex","rustc::cfg","",null,null],[6,"CFGGraph","","",null,null],[6,"CFGNode","","",null,null],[6,"CFGEdge","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cfgnodedata"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cfgnodedata"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"cfgnodedata"}],"output":{"name":"bool"}}],[11,"id","","",2,{"inputs":[{"name":"self"}],"output":{"name":"itemlocalid"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"tyctxt"},{"name":"body"}],"output":{"name":"cfg"}}],[11,"node_is_reachable","","",0,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"bool"}}],[0,"dep_graph","rustc","",null,null],[3,"DepTrackingMap","rustc::dep_graph","A DepTrackingMap offers a subset of the `Map` API and ensures that we make calls to `read` and `write` as appropriate. We key the maps with a unique type for brevity.",null,null],[3,"DepNode","","",null,null],[12,"kind","","",4,null],[12,"hash","","",4,null],[3,"WorkProductId","","A \"work product\" corresponds to a `.o` (or other) file that we save in between runs. These ids do not have a DefId but rather some independent path or string that persists between runs without the need to be mapped or unmapped. (This ensures we can serialize them even in the absence of a tcx.)",null,null],[3,"DepGraph","","",null,null],[3,"WorkProduct","","A \"work product\" is an intermediate result that we save into the incremental directory for later re-use. The primary example are the object files that we save for each partition at code generation time.",null,null],[12,"cgu_name","","",5,null],[12,"saved_files","","Saved files associated with this CGU",5,null],[3,"DepNodeIndex","","",null,null],[3,"PreviousDepGraph","","",null,null],[3,"DepGraphQuery","","",null,null],[12,"graph","","",6,null],[12,"indices","","",6,null],[3,"AssertDepGraphSafe","","A convenient override that lets you pass arbitrary state into a task. Every use should be accompanied by a comment explaining why it makes sense (or how it could be refactored away in the future).",null,null],[12,"0","","",7,null],[3,"SerializedDepGraph","","Data for use when recompiling the current crate.",null,null],[12,"nodes","","The set of all DepNodes in the graph",8,null],[12,"edge_list_indices","","For each DepNode, stores the list of edges originating from that DepNode. Encoded as a [start, end) pair indexing into edge_list_data, which holds the actual DepNodeIndices of the target nodes.",8,null],[12,"edge_list_data","","A flattened list of all edge targets in the graph. Edge sources are implicit in edge_list_indices.",8,null],[4,"DepKind","","",null,null],[13,"Krate","","",9,null],[13,"HirBody","","",9,null],[13,"Hir","","",9,null],[13,"CrateMetadata","","",9,null],[13,"WorkProduct","","",9,null],[13,"RegionScopeTree","","",9,null],[13,"Coherence","","",9,null],[13,"CoherenceInherentImplOverlapCheck","","",9,null],[13,"CoherenceCheckTrait","","",9,null],[13,"PrivacyAccessLevels","","",9,null],[13,"MirConstQualif","","",9,null],[13,"MirConst","","",9,null],[13,"MirValidated","","",9,null],[13,"MirOptimized","","",9,null],[13,"MirShim","","",9,null],[13,"BorrowCheckKrate","","",9,null],[13,"BorrowCheck","","",9,null],[13,"MirBorrowCheck","","",9,null],[13,"UnsafetyViolations","","",9,null],[13,"Reachability","","",9,null],[13,"MirKeys","","",9,null],[13,"CrateVariances","","",9,null],[13,"AssociatedItems","","",9,null],[13,"TypeOfItem","","",9,null],[13,"GenericsOfItem","","",9,null],[13,"PredicatesOfItem","","",9,null],[13,"InferredOutlivesOf","","",9,null],[13,"SuperPredicatesOfItem","","",9,null],[13,"TraitDefOfItem","","",9,null],[13,"AdtDefOfItem","","",9,null],[13,"IsDefaultImpl","","",9,null],[13,"ImplTraitRef","","",9,null],[13,"ImplPolarity","","",9,null],[13,"ClosureKind","","",9,null],[13,"FnSignature","","",9,null],[13,"GenSignature","","",9,null],[13,"CoerceUnsizedInfo","","",9,null],[13,"ItemVarianceConstraints","","",9,null],[13,"ItemVariances","","",9,null],[13,"IsConstFn","","",9,null],[13,"IsForeignItem","","",9,null],[13,"TypeParamPredicates","","",9,null],[13,"SizedConstraint","","",9,null],[13,"DtorckConstraint","","",9,null],[13,"AdtDestructor","","",9,null],[13,"AssociatedItemDefIds","","",9,null],[13,"InherentImpls","","",9,null],[13,"TypeckBodiesKrate","","",9,null],[13,"TypeckTables","","",9,null],[13,"HasTypeckTables","","",9,null],[13,"ConstEval","","",9,null],[13,"SymbolName","","",9,null],[13,"InstanceSymbolName","","",9,null],[13,"SpecializationGraph","","",9,null],[13,"ObjectSafety","","",9,null],[13,"FulfillObligation","","",9,null],[13,"VtableMethods","","",9,null],[13,"IsCopy","","",9,null],[13,"IsSized","","",9,null],[13,"IsFreeze","","",9,null],[13,"NeedsDrop","","",9,null],[13,"Layout","","",9,null],[13,"TraitImpls","","",9,null],[13,"AllLocalTraitImpls","","",9,null],[13,"TraitSelect","","",9,null],[13,"ParamEnv","","",9,null],[13,"DescribeDef","","",9,null],[13,"DefSpan","","",9,null],[13,"LookupStability","","",9,null],[13,"LookupDeprecationEntry","","",9,null],[13,"ItemBodyNestedBodies","","",9,null],[13,"ConstIsRvaluePromotableToStatic","","",9,null],[13,"RvaluePromotableMap","","",9,null],[13,"ImplParent","","",9,null],[13,"TraitOfItem","","",9,null],[13,"IsExportedSymbol","","",9,null],[13,"IsMirAvailable","","",9,null],[13,"ItemAttrs","","",9,null],[13,"FnArgNames","","",9,null],[13,"DylibDepFormats","","",9,null],[13,"IsPanicRuntime","","",9,null],[13,"IsCompilerBuiltins","","",9,null],[13,"HasGlobalAllocator","","",9,null],[13,"ExternCrate","","",9,null],[13,"LintLevels","","",9,null],[13,"Specializes","","",9,null],[13,"InScopeTraits","","",9,null],[13,"ModuleExports","","",9,null],[13,"IsSanitizerRuntime","","",9,null],[13,"IsProfilerRuntime","","",9,null],[13,"GetPanicStrategy","","",9,null],[13,"IsNoBuiltins","","",9,null],[13,"ImplDefaultness","","",9,null],[13,"ExportedSymbolIds","","",9,null],[13,"NativeLibraries","","",9,null],[13,"PluginRegistrarFn","","",9,null],[13,"DeriveRegistrarFn","","",9,null],[13,"CrateDisambiguator","","",9,null],[13,"CrateHash","","",9,null],[13,"OriginalCrateName","","",9,null],[13,"ImplementationsOfTrait","","",9,null],[13,"AllTraitImplementations","","",9,null],[13,"IsDllimportForeignItem","","",9,null],[13,"IsStaticallyIncludedForeignItem","","",9,null],[13,"NativeLibraryKind","","",9,null],[13,"LinkArgs","","",9,null],[13,"NamedRegion","","",9,null],[13,"IsLateBound","","",9,null],[13,"ObjectLifetimeDefaults","","",9,null],[13,"Visibility","","",9,null],[13,"DepKind","","",9,null],[13,"CrateName","","",9,null],[13,"ItemChildren","","",9,null],[13,"ExternModStmtCnum","","",9,null],[13,"GetLangItems","","",9,null],[13,"DefinedLangItems","","",9,null],[13,"MissingLangItems","","",9,null],[13,"ExternConstBody","","",9,null],[13,"VisibleParentMap","","",9,null],[13,"MissingExternCrateItem","","",9,null],[13,"UsedCrateSource","","",9,null],[13,"PostorderCnums","","",9,null],[13,"HasCloneClosures","","",9,null],[13,"HasCopyClosures","","",9,null],[13,"EraseRegionsTy","","",9,null],[13,"Freevars","","",9,null],[13,"MaybeUnusedTraitImport","","",9,null],[13,"MaybeUnusedExternCrates","","",9,null],[13,"StabilityIndex","","",9,null],[13,"AllCrateNums","","",9,null],[13,"ExportedSymbols","","",9,null],[13,"CollectAndPartitionTranslationItems","","",9,null],[13,"ExportName","","",9,null],[13,"ContainsExternIndicator","","",9,null],[13,"IsTranslatedFunction","","",9,null],[13,"CodegenUnit","","",9,null],[13,"CompileCodegenUnit","","",9,null],[13,"OutputFilenames","","",9,null],[13,"Null","","",9,null],[4,"DepConstructor","","",null,null],[13,"Krate","","",10,null],[13,"HirBody","","",10,null],[13,"Hir","","",10,null],[13,"CrateMetadata","","",10,null],[13,"WorkProduct","","",10,null],[13,"RegionScopeTree","","",10,null],[13,"Coherence","","",10,null],[13,"CoherenceInherentImplOverlapCheck","","",10,null],[13,"CoherenceCheckTrait","","",10,null],[13,"PrivacyAccessLevels","","",10,null],[13,"MirConstQualif","","",10,null],[13,"MirConst","","",10,null],[13,"MirValidated","","",10,null],[13,"MirOptimized","","",10,null],[13,"MirShim","","",10,null],[12,"instance_def","rustc::dep_graph::DepConstructor","",10,null],[13,"BorrowCheckKrate","rustc::dep_graph","",10,null],[13,"BorrowCheck","","",10,null],[13,"MirBorrowCheck","","",10,null],[13,"UnsafetyViolations","","",10,null],[13,"Reachability","","",10,null],[13,"MirKeys","","",10,null],[13,"CrateVariances","","",10,null],[13,"AssociatedItems","","",10,null],[13,"TypeOfItem","","",10,null],[13,"GenericsOfItem","","",10,null],[13,"PredicatesOfItem","","",10,null],[13,"InferredOutlivesOf","","",10,null],[13,"SuperPredicatesOfItem","","",10,null],[13,"TraitDefOfItem","","",10,null],[13,"AdtDefOfItem","","",10,null],[13,"IsDefaultImpl","","",10,null],[13,"ImplTraitRef","","",10,null],[13,"ImplPolarity","","",10,null],[13,"ClosureKind","","",10,null],[13,"FnSignature","","",10,null],[13,"GenSignature","","",10,null],[13,"CoerceUnsizedInfo","","",10,null],[13,"ItemVarianceConstraints","","",10,null],[13,"ItemVariances","","",10,null],[13,"IsConstFn","","",10,null],[13,"IsForeignItem","","",10,null],[13,"TypeParamPredicates","","",10,null],[12,"item_id","rustc::dep_graph::DepConstructor","",10,null],[12,"param_id","","",10,null],[13,"SizedConstraint","rustc::dep_graph","",10,null],[13,"DtorckConstraint","","",10,null],[13,"AdtDestructor","","",10,null],[13,"AssociatedItemDefIds","","",10,null],[13,"InherentImpls","","",10,null],[13,"TypeckBodiesKrate","","",10,null],[13,"TypeckTables","","",10,null],[13,"HasTypeckTables","","",10,null],[13,"ConstEval","","",10,null],[12,"param_env","rustc::dep_graph::DepConstructor","",10,null],[13,"SymbolName","rustc::dep_graph","",10,null],[13,"InstanceSymbolName","","",10,null],[12,"instance","rustc::dep_graph::DepConstructor","",10,null],[13,"SpecializationGraph","rustc::dep_graph","",10,null],[13,"ObjectSafety","","",10,null],[13,"FulfillObligation","","",10,null],[12,"param_env","rustc::dep_graph::DepConstructor","",10,null],[12,"trait_ref","","",10,null],[13,"VtableMethods","rustc::dep_graph","",10,null],[12,"trait_ref","rustc::dep_graph::DepConstructor","",10,null],[13,"IsCopy","rustc::dep_graph","",10,null],[12,"param_env","rustc::dep_graph::DepConstructor","",10,null],[13,"IsSized","rustc::dep_graph","",10,null],[12,"param_env","rustc::dep_graph::DepConstructor","",10,null],[13,"IsFreeze","rustc::dep_graph","",10,null],[12,"param_env","rustc::dep_graph::DepConstructor","",10,null],[13,"NeedsDrop","rustc::dep_graph","",10,null],[12,"param_env","rustc::dep_graph::DepConstructor","",10,null],[13,"Layout","rustc::dep_graph","",10,null],[12,"param_env","rustc::dep_graph::DepConstructor","",10,null],[13,"TraitImpls","rustc::dep_graph","",10,null],[13,"AllLocalTraitImpls","","",10,null],[13,"TraitSelect","","",10,null],[13,"ParamEnv","","",10,null],[13,"DescribeDef","","",10,null],[13,"DefSpan","","",10,null],[13,"LookupStability","","",10,null],[13,"LookupDeprecationEntry","","",10,null],[13,"ItemBodyNestedBodies","","",10,null],[13,"ConstIsRvaluePromotableToStatic","","",10,null],[13,"RvaluePromotableMap","","",10,null],[13,"ImplParent","","",10,null],[13,"TraitOfItem","","",10,null],[13,"IsExportedSymbol","","",10,null],[13,"IsMirAvailable","","",10,null],[13,"ItemAttrs","","",10,null],[13,"FnArgNames","","",10,null],[13,"DylibDepFormats","","",10,null],[13,"IsPanicRuntime","","",10,null],[13,"IsCompilerBuiltins","","",10,null],[13,"HasGlobalAllocator","","",10,null],[13,"ExternCrate","","",10,null],[13,"LintLevels","","",10,null],[13,"Specializes","","",10,null],[12,"impl1","rustc::dep_graph::DepConstructor","",10,null],[12,"impl2","","",10,null],[13,"InScopeTraits","rustc::dep_graph","",10,null],[13,"ModuleExports","","",10,null],[13,"IsSanitizerRuntime","","",10,null],[13,"IsProfilerRuntime","","",10,null],[13,"GetPanicStrategy","","",10,null],[13,"IsNoBuiltins","","",10,null],[13,"ImplDefaultness","","",10,null],[13,"ExportedSymbolIds","","",10,null],[13,"NativeLibraries","","",10,null],[13,"PluginRegistrarFn","","",10,null],[13,"DeriveRegistrarFn","","",10,null],[13,"CrateDisambiguator","","",10,null],[13,"CrateHash","","",10,null],[13,"OriginalCrateName","","",10,null],[13,"ImplementationsOfTrait","","",10,null],[12,"krate","rustc::dep_graph::DepConstructor","",10,null],[12,"trait_id","","",10,null],[13,"AllTraitImplementations","rustc::dep_graph","",10,null],[13,"IsDllimportForeignItem","","",10,null],[13,"IsStaticallyIncludedForeignItem","","",10,null],[13,"NativeLibraryKind","","",10,null],[13,"LinkArgs","","",10,null],[13,"NamedRegion","","",10,null],[13,"IsLateBound","","",10,null],[13,"ObjectLifetimeDefaults","","",10,null],[13,"Visibility","","",10,null],[13,"DepKind","","",10,null],[13,"CrateName","","",10,null],[13,"ItemChildren","","",10,null],[13,"ExternModStmtCnum","","",10,null],[13,"GetLangItems","","",10,null],[13,"DefinedLangItems","","",10,null],[13,"MissingLangItems","","",10,null],[13,"ExternConstBody","","",10,null],[13,"VisibleParentMap","","",10,null],[13,"MissingExternCrateItem","","",10,null],[13,"UsedCrateSource","","",10,null],[13,"PostorderCnums","","",10,null],[13,"HasCloneClosures","","",10,null],[13,"HasCopyClosures","","",10,null],[13,"EraseRegionsTy","","",10,null],[12,"ty","rustc::dep_graph::DepConstructor","",10,null],[13,"Freevars","rustc::dep_graph","",10,null],[13,"MaybeUnusedTraitImport","","",10,null],[13,"MaybeUnusedExternCrates","","",10,null],[13,"StabilityIndex","","",10,null],[13,"AllCrateNums","","",10,null],[13,"ExportedSymbols","","",10,null],[13,"CollectAndPartitionTranslationItems","","",10,null],[13,"ExportName","","",10,null],[13,"ContainsExternIndicator","","",10,null],[13,"IsTranslatedFunction","","",10,null],[13,"CodegenUnit","","",10,null],[13,"CompileCodegenUnit","","",10,null],[13,"OutputFilenames","","",10,null],[13,"Null","","",10,null],[4,"DepNodeColor","","",null,null],[13,"Red","","",11,null],[13,"Green","","",11,null],[0,"debug","","Code for debugging the dep-graph.",null,null],[3,"DepNodeFilter","rustc::dep_graph::debug","A dep-node filter goes from a user-defined string to a query over nodes. Right now the format is like this:",null,null],[3,"EdgeFilter","","A filter like `F -> G` where `F` and `G` are valid dep-node filters. This can be used to test the source/target independently.",null,null],[12,"source","","",12,null],[12,"target","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"accepts_all","","True if all nodes always pass the filter.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"test","","Tests whether `node` meets the filter, returning true if so.",13,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"new","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"test","","",12,{"inputs":[{"name":"self"},{"name":"depnode"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"fmt","rustc::dep_graph","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fingerprint_needed_for_crate_hash","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"hash","","",9,null],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"can_reconstruct_query_key","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anon","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_input","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_params","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"depnode"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"tyctxt"},{"name":"depconstructor"}],"output":{"name":"depnode"}}],[11,"from_def_path_hash","","Construct a DepNode from the given DepKind and DefPathHash. This method will assert that the given DepKind actually requires a single DefId/DefPathHash parameter.",4,{"inputs":[{"name":"depkind"},{"name":"defpathhash"}],"output":{"name":"depnode"}}],[11,"new_no_params","","Create a new, parameterless DepNode. This method will assert that the DepNode corresponding to the given DepKind actually does not require any parameters.",4,{"inputs":[{"name":"depkind"}],"output":{"name":"depnode"}}],[11,"extract_def_id","","Extract the DefId corresponding to this DepNode. This will work if two conditions are met:",4,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"from_label_string","","Used in testing",4,{"inputs":[{"name":"str"},{"name":"defpathhash"}],"output":{"name":"result"}}],[11,"has_label_string","","Used in testing",4,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"workproductid"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"ordering"}}],[11,"hash","","",14,null],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_cgu_name","","",14,{"inputs":[{"name":"str"}],"output":{"name":"workproductid"}}],[11,"from_fingerprint","","",14,{"inputs":[{"name":"fingerprint"}],"output":{"name":"workproductid"}}],[11,"to_dep_node","","",14,{"inputs":[{"name":"self"}],"output":{"name":"depnode"}}],[11,"hash_stable","","",14,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"new","","",15,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"depgraph"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"depnodeindex"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"depnodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"depnodeindex"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"new","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"depnodecolor"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"depnodecolor"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"depnodecolor"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"is_green","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",16,{"inputs":[{"name":"previousdepgraph"}],"output":{"name":"depgraph"}}],[11,"new_disabled","","",16,{"inputs":[],"output":{"name":"depgraph"}}],[11,"is_fully_enabled","","True if we are actually building the full dep-graph.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"query","","",16,{"inputs":[{"name":"self"}],"output":{"name":"depgraphquery"}}],[11,"in_ignore","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_ignore","","",16,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"with_task","","Starts a new dep-graph task. Dep-graph tasks are specified using a free function (`task`) and not a closure -- this is intentional because we want to exercise tight control over what state they have access to. In particular, we want to prevent implicit 'leaks' of tracked state into the task (which could then be read without generating correct edges in the dep-graph -- see the [README] for more details on the dep-graph). To this end, the task function gets exactly two pieces of state: the context `cx` and an argument `arg`. Both of these bits of state must be of some type that implements `DepGraphSafe` and hence does not leak.",16,null],[11,"with_anon_task","","Execute something within an \"anonymous\" task, that is, a task the DepNode of which is determined by the list of inputs it read from.",16,null],[11,"read","","",16,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":null}],[11,"read_index","","",16,{"inputs":[{"name":"self"},{"name":"depnodeindex"}],"output":null}],[11,"fingerprint_of","","",16,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"fingerprint"}}],[11,"prev_fingerprint_of","","",16,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"insert_previous_work_product","","Indicates that a previous work product exists for `v`. This is invoked during initial start-up based on what nodes are clean (and what files exist in the incr. directory).",16,{"inputs":[{"name":"self"},{"name":"workproductid"},{"name":"workproduct"}],"output":null}],[11,"insert_work_product","","Indicates that we created the given work-product in this run for `v`. This record will be preserved and loaded in the next run.",16,{"inputs":[{"name":"self"},{"name":"workproductid"},{"name":"workproduct"}],"output":null}],[11,"previous_work_product","","Check whether a previous work product exists for `v` and, if so, return the path that leads to it. Used to skip doing work.",16,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"option"}}],[11,"work_products","","Access the map of work-products created during this run. Only used during saving of the dep-graph.",16,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"previous_work_products","","Access the map of work-products created during the cached run. Only used during saving of the dep-graph.",16,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"register_dep_node_debug_str","","",16,{"inputs":[{"name":"self"},{"name":"depnode"},{"name":"f"}],"output":null}],[11,"serialize","","",16,{"inputs":[{"name":"self"}],"output":{"name":"serializeddepgraph"}}],[11,"node_color","","",16,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"try_mark_green","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"is_green","","",16,{"inputs":[{"name":"self"},{"name":"depnodeindex"}],"output":{"name":"bool"}}],[11,"mark_loaded_from_cache","","",16,{"inputs":[{"name":"self"},{"name":"depnodeindex"},{"name":"bool"}],"output":null}],[11,"was_loaded_from_cache","","",16,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"workproduct"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[{"name":"serializeddepgraph"}],"output":{"name":"previousdepgraph"}}],[11,"edges_from","","",18,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"index_to_node","","",18,{"inputs":[{"name":"self"},{"name":"serializeddepnodeindex"}],"output":{"name":"depnode"}}],[11,"fingerprint_of","","",18,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"fingerprint_by_index","","",18,{"inputs":[{"name":"self"},{"name":"serializeddepnodeindex"}],"output":{"name":"fingerprint"}}],[11,"new","","",6,null],[11,"contains_node","","",6,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"nodes","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"edges","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"transitive_successors","","All nodes reachable from `node`. In other words, things that will have to be recomputed if `node` changes.",6,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"transitive_predecessors","","All nodes that can reach `node`.",6,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"immediate_successors","","Just the outgoing edges from `node`.",6,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"serializeddepgraph"}}],[11,"edge_targets_from","","",8,null],[0,"label_strs","","Contains variant => str representations for constructing DepNode groups for tests.",null,null],[17,"Krate","rustc::dep_graph::label_strs","",null,null],[17,"HirBody","","",null,null],[17,"Hir","","",null,null],[17,"CrateMetadata","","",null,null],[17,"WorkProduct","","",null,null],[17,"RegionScopeTree","","",null,null],[17,"Coherence","","",null,null],[17,"CoherenceInherentImplOverlapCheck","","",null,null],[17,"CoherenceCheckTrait","","",null,null],[17,"PrivacyAccessLevels","","",null,null],[17,"MirConstQualif","","",null,null],[17,"MirConst","","",null,null],[17,"MirValidated","","",null,null],[17,"MirOptimized","","",null,null],[17,"MirShim","","",null,null],[17,"BorrowCheckKrate","","",null,null],[17,"BorrowCheck","","",null,null],[17,"MirBorrowCheck","","",null,null],[17,"UnsafetyViolations","","",null,null],[17,"Reachability","","",null,null],[17,"MirKeys","","",null,null],[17,"CrateVariances","","",null,null],[17,"AssociatedItems","","",null,null],[17,"TypeOfItem","","",null,null],[17,"GenericsOfItem","","",null,null],[17,"PredicatesOfItem","","",null,null],[17,"InferredOutlivesOf","","",null,null],[17,"SuperPredicatesOfItem","","",null,null],[17,"TraitDefOfItem","","",null,null],[17,"AdtDefOfItem","","",null,null],[17,"IsDefaultImpl","","",null,null],[17,"ImplTraitRef","","",null,null],[17,"ImplPolarity","","",null,null],[17,"ClosureKind","","",null,null],[17,"FnSignature","","",null,null],[17,"GenSignature","","",null,null],[17,"CoerceUnsizedInfo","","",null,null],[17,"ItemVarianceConstraints","","",null,null],[17,"ItemVariances","","",null,null],[17,"IsConstFn","","",null,null],[17,"IsForeignItem","","",null,null],[17,"TypeParamPredicates","","",null,null],[17,"SizedConstraint","","",null,null],[17,"DtorckConstraint","","",null,null],[17,"AdtDestructor","","",null,null],[17,"AssociatedItemDefIds","","",null,null],[17,"InherentImpls","","",null,null],[17,"TypeckBodiesKrate","","",null,null],[17,"TypeckTables","","",null,null],[17,"HasTypeckTables","","",null,null],[17,"ConstEval","","",null,null],[17,"SymbolName","","",null,null],[17,"InstanceSymbolName","","",null,null],[17,"SpecializationGraph","","",null,null],[17,"ObjectSafety","","",null,null],[17,"FulfillObligation","","",null,null],[17,"VtableMethods","","",null,null],[17,"IsCopy","","",null,null],[17,"IsSized","","",null,null],[17,"IsFreeze","","",null,null],[17,"NeedsDrop","","",null,null],[17,"Layout","","",null,null],[17,"TraitImpls","","",null,null],[17,"AllLocalTraitImpls","","",null,null],[17,"TraitSelect","","",null,null],[17,"ParamEnv","","",null,null],[17,"DescribeDef","","",null,null],[17,"DefSpan","","",null,null],[17,"LookupStability","","",null,null],[17,"LookupDeprecationEntry","","",null,null],[17,"ItemBodyNestedBodies","","",null,null],[17,"ConstIsRvaluePromotableToStatic","","",null,null],[17,"RvaluePromotableMap","","",null,null],[17,"ImplParent","","",null,null],[17,"TraitOfItem","","",null,null],[17,"IsExportedSymbol","","",null,null],[17,"IsMirAvailable","","",null,null],[17,"ItemAttrs","","",null,null],[17,"FnArgNames","","",null,null],[17,"DylibDepFormats","","",null,null],[17,"IsPanicRuntime","","",null,null],[17,"IsCompilerBuiltins","","",null,null],[17,"HasGlobalAllocator","","",null,null],[17,"ExternCrate","","",null,null],[17,"LintLevels","","",null,null],[17,"Specializes","","",null,null],[17,"InScopeTraits","","",null,null],[17,"ModuleExports","","",null,null],[17,"IsSanitizerRuntime","","",null,null],[17,"IsProfilerRuntime","","",null,null],[17,"GetPanicStrategy","","",null,null],[17,"IsNoBuiltins","","",null,null],[17,"ImplDefaultness","","",null,null],[17,"ExportedSymbolIds","","",null,null],[17,"NativeLibraries","","",null,null],[17,"PluginRegistrarFn","","",null,null],[17,"DeriveRegistrarFn","","",null,null],[17,"CrateDisambiguator","","",null,null],[17,"CrateHash","","",null,null],[17,"OriginalCrateName","","",null,null],[17,"ImplementationsOfTrait","","",null,null],[17,"AllTraitImplementations","","",null,null],[17,"IsDllimportForeignItem","","",null,null],[17,"IsStaticallyIncludedForeignItem","","",null,null],[17,"NativeLibraryKind","","",null,null],[17,"LinkArgs","","",null,null],[17,"NamedRegion","","",null,null],[17,"IsLateBound","","",null,null],[17,"ObjectLifetimeDefaults","","",null,null],[17,"Visibility","","",null,null],[17,"DepKind","","",null,null],[17,"CrateName","","",null,null],[17,"ItemChildren","","",null,null],[17,"ExternModStmtCnum","","",null,null],[17,"GetLangItems","","",null,null],[17,"DefinedLangItems","","",null,null],[17,"MissingLangItems","","",null,null],[17,"ExternConstBody","","",null,null],[17,"VisibleParentMap","","",null,null],[17,"MissingExternCrateItem","","",null,null],[17,"UsedCrateSource","","",null,null],[17,"PostorderCnums","","",null,null],[17,"HasCloneClosures","","",null,null],[17,"HasCopyClosures","","",null,null],[17,"EraseRegionsTy","","",null,null],[17,"Freevars","","",null,null],[17,"MaybeUnusedTraitImport","","",null,null],[17,"MaybeUnusedExternCrates","","",null,null],[17,"StabilityIndex","","",null,null],[17,"AllCrateNums","","",null,null],[17,"ExportedSymbols","","",null,null],[17,"CollectAndPartitionTranslationItems","","",null,null],[17,"ExportName","","",null,null],[17,"ContainsExternIndicator","","",null,null],[17,"IsTranslatedFunction","","",null,null],[17,"CodegenUnit","","",null,null],[17,"CompileCodegenUnit","","",null,null],[17,"OutputFilenames","","",null,null],[17,"Null","","",null,null],[8,"DepTrackingMapConfig","rustc::dep_graph","",null,null],[16,"Key","","",19,null],[16,"Value","","",19,null],[10,"to_dep_kind","","",19,{"inputs":[],"output":{"name":"depkind"}}],[8,"DepGraphSafe","","The `DepGraphSafe` trait is used to specify what kinds of values are safe to \"leak\" into a task. The idea is that this should be only be implemented for things like the tcx as well as various id types, which will create reads in the dep-graph whenever the trait loads anything that might depend on the input program.",null,null],[0,"hir","rustc","",null,null],[3,"HirId","rustc::hir","A HirId uniquely identifies a node in the HIR of the current crate. It is composed of the `owner`, which is the DefIndex of the directly enclosing hir::Item, hir::TraitItem, or hir::ImplItem (i.e. the closest \"item-like\"), and the `local_id` which is unique within the given owner.",null,null],[12,"owner","","",20,null],[12,"local_id","","",20,null],[3,"ItemLocalId","","An `ItemLocalId` uniquely identifies something within a given \"item-like\", that is within a hir::Item, hir::TraitItem, or hir::ImplItem. There is no guarantee that the numerical value of a given `ItemLocalId` corresponds to the node's position within the owning item in any way, but there is a guarantee that the `LocalItemId`s within an owner occupy a dense range of integers starting at zero, so a mapping that maps all or most nodes within an \"item-like\" to something else can be implement by a `Vec` instead of a tree or hash map.",null,null],[12,"0","","",21,null],[3,"Lifetime","","",null,null],[12,"id","","",22,null],[12,"span","","",22,null],[12,"name","","Either \"'a\", referring to a named lifetime definition, or \"\" (aka keywords::Invalid), for elision placeholders.",22,null],[3,"LifetimeDef","","A lifetime definition, eg `'a: 'b+'c+'d`",null,null],[12,"lifetime","","",23,null],[12,"bounds","","",23,null],[12,"pure_wrt_drop","","",23,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name; for instance: std::cmp::PartialEq  .  It's represented as a sequence of identifiers, along with a bunch of supporting information.",null,null],[12,"span","","",24,null],[12,"def","","The definition that the path resolved to.",24,null],[12,"segments","","The segments in the path: the things separated by `::`.",24,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"name","","The identifier portion of this path segment.",25,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",25,null],[12,"infer_types","","Whether to infer remaining type parameters, if any. This only applies to expression and pattern paths, and out of those only the segments with no type parameters to begin with, e.g. `Vec::new` is `<Vec<..>>::new::<..>`.",25,null],[3,"PathParameters","","",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",26,null],[12,"types","","The type parameters for this path segment, if present.",26,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present. E.g., `Foo<A=Bar>`.",26,null],[12,"parenthesized","","Were parameters written in parenthesized form `Fn(T) -> U`? This is required mostly for pretty-printing and diagnostics, but also for changing lifetime elision rules to be \"function-like\".",26,null],[3,"TyParam","","",null,null],[12,"name","","",27,null],[12,"id","","",27,null],[12,"bounds","","",27,null],[12,"default","","",27,null],[12,"span","","",27,null],[12,"pure_wrt_drop","","",27,null],[12,"synthetic","","",27,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",28,null],[12,"ty_params","","",28,null],[12,"where_clause","","",28,null],[12,"span","","",28,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",29,null],[12,"predicates","","",29,null],[3,"WhereBoundPredicate","","A type bound, eg `for<'c> Foo: Send+Clone+'c`",null,null],[12,"span","","",30,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",30,null],[12,"bounded_ty","","The type being bounded",30,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",30,null],[3,"WhereRegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",null,null],[12,"span","","",31,null],[12,"lifetime","","",31,null],[12,"bounds","","",31,null],[3,"WhereEqPredicate","","An equality predicate (unsupported), e.g. `T=int`",null,null],[12,"id","","",32,null],[12,"span","","",32,null],[12,"lhs_ty","","",32,null],[12,"rhs_ty","","",32,null],[3,"Crate","","The top-level data structure that stores the entire contents of the crate currently being compiled.",null,null],[12,"module","","",33,null],[12,"attrs","","",33,null],[12,"span","","",33,null],[12,"exported_macros","","",33,null],[12,"items","","",33,null],[12,"trait_items","","",33,null],[12,"impl_items","","",33,null],[12,"bodies","","",33,null],[12,"trait_impls","","",33,null],[12,"trait_default_impl","","",33,null],[12,"body_ids","","A list of the body ids written out in the order in which they appear in the crate. If you're going to process all the bodies in the crate, you should iterate over this list rather than the keys of bodies.",33,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"name","","",34,null],[12,"vis","","",34,null],[12,"attrs","","",34,null],[12,"id","","",34,null],[12,"span","","",34,null],[12,"body","","",34,null],[12,"legacy","","",34,null],[3,"Block","","",null,null],[12,"stmts","","Statements in a block",35,null],[12,"expr","","An expression at the end of the block without a semicolon, if any",35,null],[12,"id","","",35,null],[12,"hir_id","","",35,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",35,null],[12,"span","","",35,null],[12,"targeted_by_break","","If true, then there may exist `break 'a` values that aim to break out of this block early. As of this writing, this is not currently permitted in Rust itself, but it is generated as part of `catch` statements.",35,null],[3,"Pat","","",null,null],[12,"id","","",36,null],[12,"hir_id","","",36,null],[12,"node","","",36,null],[12,"span","","",36,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"name","","The identifier for the field",37,null],[12,"pat","","The pattern the field is destructured to",37,null],[12,"is_shorthand","","",37,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",38,null],[12,"ty","","",38,null],[12,"init","","Initializer expression to set the value, if any",38,null],[12,"id","","",38,null],[12,"hir_id","","",38,null],[12,"span","","",38,null],[12,"attrs","","",38,null],[12,"source","","",38,null],[3,"Arm","","represents one arm of a 'match'",null,null],[12,"attrs","","",39,null],[12,"pats","","",39,null],[12,"guard","","",39,null],[12,"body","","",39,null],[3,"Field","","",null,null],[12,"name","","",40,null],[12,"expr","","",40,null],[12,"span","","",40,null],[12,"is_shorthand","","",40,null],[3,"BodyId","","",null,null],[12,"node_id","","",41,null],[3,"Body","","The body of a function, closure, or constant value. In the case of a function, the body contains not only the function body itself (which is an expression), but also the argument patterns, since those are something that the caller doesn't really care about.",null,null],[12,"arguments","","",42,null],[12,"value","","",42,null],[12,"is_generator","","",42,null],[3,"Expr","","An expression",null,null],[12,"id","","",43,null],[12,"span","","",43,null],[12,"node","","",43,null],[12,"attrs","","",43,null],[12,"hir_id","","",43,null],[3,"Destination","","",null,null],[12,"ident","","",44,null],[12,"target_id","","",44,null],[3,"MutTy","","",null,null],[12,"ty","","",45,null],[12,"mutbl","","",45,null],[3,"MethodSig","","Represents a method's signature in a trait declaration or implementation.",null,null],[12,"unsafety","","",46,null],[12,"constness","","",46,null],[12,"abi","","",46,null],[12,"decl","","",46,null],[12,"generics","","",46,null],[3,"TraitItemId","","",null,null],[12,"node_id","","",47,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",48,null],[12,"name","","",48,null],[12,"hir_id","","",48,null],[12,"attrs","","",48,null],[12,"node","","",48,null],[12,"span","","",48,null],[3,"ImplItemId","","",null,null],[12,"node_id","","",49,null],[3,"ImplItem","","Represents anything within an `impl` block",null,null],[12,"id","","",50,null],[12,"name","","",50,null],[12,"hir_id","","",50,null],[12,"vis","","",50,null],[12,"defaultness","","",50,null],[12,"attrs","","",50,null],[12,"node","","",50,null],[12,"span","","",50,null],[3,"TypeBinding","","",null,null],[12,"id","","",51,null],[12,"name","","",51,null],[12,"ty","","",51,null],[12,"span","","",51,null],[3,"Ty","","",null,null],[12,"id","","",52,null],[12,"node","","",52,null],[12,"span","","",52,null],[12,"hir_id","","",52,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",53,null],[12,"abi","","",53,null],[12,"lifetimes","","",53,null],[12,"decl","","",53,null],[12,"arg_names","","",53,null],[3,"InlineAsmOutput","","",null,null],[12,"constraint","","",54,null],[12,"is_rw","","",54,null],[12,"is_indirect","","",54,null],[3,"InlineAsm","","",null,null],[12,"asm","","",55,null],[12,"asm_str_style","","",55,null],[12,"outputs","","",55,null],[12,"inputs","","",55,null],[12,"clobbers","","",55,null],[12,"volatile","","",55,null],[12,"alignstack","","",55,null],[12,"dialect","","",55,null],[12,"ctxt","","",55,null],[3,"Arg","","represents an argument in a function header",null,null],[12,"pat","","",56,null],[12,"id","","",56,null],[12,"hir_id","","",56,null],[3,"FnDecl","","Represents the header (not the body) of a function declaration",null,null],[12,"inputs","","",57,null],[12,"output","","",57,null],[12,"variadic","","",57,null],[12,"has_implicit_self","","True if this function has an `self`, `&self` or `&mut self` receiver (but not a `self: Xxx` one).",57,null],[3,"Mod","","",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`. For `mod foo;`, the inner span ranges from the first token to the last token in the external file.",58,null],[12,"item_ids","","",58,null],[3,"ForeignMod","","",null,null],[12,"abi","","",59,null],[12,"items","","",59,null],[3,"GlobalAsm","","",null,null],[12,"asm","","",60,null],[12,"ctxt","","",60,null],[3,"EnumDef","","",null,null],[12,"variants","","",61,null],[3,"Variant_","","",null,null],[12,"name","","",62,null],[12,"attrs","","",62,null],[12,"data","","",62,null],[12,"disr_expr","","Explicit discriminant, eg `Foo = 1`",62,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",63,null],[12,"ref_id","","",63,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",64,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",64,null],[12,"span","","",64,null],[3,"StructField","","",null,null],[12,"span","","",65,null],[12,"name","","",65,null],[12,"vis","","",65,null],[12,"id","","",65,null],[12,"ty","","",65,null],[12,"attrs","","",65,null],[3,"ItemId","","",null,null],[12,"id","","",66,null],[3,"Item","","An item",null,null],[12,"name","","",67,null],[12,"id","","",67,null],[12,"hir_id","","",67,null],[12,"attrs","","",67,null],[12,"node","","",67,null],[12,"vis","","",67,null],[12,"span","","",67,null],[3,"TraitItemRef","","A reference from an trait to one of its associated items. This contains the item's id, naturally, but also the item's name and some other high-level details (like whether it is an associated type or method, and whether it is public). This allows other passes to find the impl they want without loading the id (which means fewer edges in the incremental compilation graph).",null,null],[12,"id","","",68,null],[12,"name","","",68,null],[12,"kind","","",68,null],[12,"span","","",68,null],[12,"defaultness","","",68,null],[3,"ImplItemRef","","A reference from an impl to one of its associated items. This contains the item's id, naturally, but also the item's name and some other high-level details (like whether it is an associated type or method, and whether it is public). This allows other passes to find the impl they want without loading the id (which means fewer edges in the incremental compilation graph).",null,null],[12,"id","","",69,null],[12,"name","","",69,null],[12,"kind","","",69,null],[12,"span","","",69,null],[12,"vis","","",69,null],[12,"defaultness","","",69,null],[3,"ForeignItem","","",null,null],[12,"name","","",70,null],[12,"attrs","","",70,null],[12,"node","","",70,null],[12,"id","","",70,null],[12,"span","","",70,null],[12,"vis","","",70,null],[3,"Freevar","","A free variable referred to in a function.",null,null],[12,"def","","The variable being accessed free.",71,null],[12,"span","","",71,null],[3,"TraitCandidate","","",null,null],[12,"def_id","","",72,null],[12,"import_id","","",72,null],[4,"LifetimeName","","",null,null],[13,"Implicit","","",73,null],[13,"Underscore","","",73,null],[13,"Static","","",73,null],[13,"Name","","",73,null],[4,"TyParamBound","","The AST represents all type param bounds as types. typeck::collect::compute_bounds matches these against the \"special\" built-in traits (see middle::lang_items) and detects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",74,null],[13,"RegionTyParamBound","","",74,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",75,null],[13,"Maybe","","",75,null],[4,"UnsafeGeneric","","",null,null],[13,"Region","","",76,null],[13,"Type","","",76,null],[4,"SyntheticTyParamKind","","Synthetic Type Parameters are converted to an other form during lowering, this allows to track the original form they had. Usefull for error messages.",null,null],[13,"ImplTrait","","",77,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, eg `for<'c> Foo: Send+Clone+'c`",78,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",78,null],[13,"EqPredicate","","An equality predicate (unsupported)",78,null],[4,"BindingAnnotation","","Explicit binding annotations given in the HIR for a binding. Note that this is not the final binding mode that we infer after type inference.",null,null],[13,"Unannotated","","No binding annotation given: this means that the final binding mode will depend on whether we have skipped through a `&` reference when matching. For example, the `x` in `Some(x)` will have binding mode `None`; if you do `let Some(x) = &Some(22)`, it will ultimately be inferred to be by-reference.",79,null],[13,"Mutable","","Annotated with `mut x` -- could be either ref or not, similar to `None`.",79,null],[13,"Ref","","Annotated as `ref`, like `ref x`",79,null],[13,"RefMut","","Annotated as `ref mut x`.",79,null],[4,"RangeEnd","","",null,null],[13,"Included","","",80,null],[13,"Excluded","","",80,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",81,null],[13,"Binding","","A fresh binding `ref mut binding @ OPT_SUBPATTERN`. The `NodeId` is the canonical ID for the variable being bound, e.g. in `Ok(x) | Err(x)`, both `x` use the same canonical ID, which is the pattern ID of the first `x`.",81,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",81,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",81,null],[13,"Path","","A path pattern for an unit struct/variant or a (maybe-associated) constant.",81,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",81,null],[13,"Box","","A `box` pattern",81,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",81,null],[13,"Lit","","A literal",81,null],[13,"Range","","A range pattern, e.g. `1...2` or `1..2`",81,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `PatKind::Slice(box [a, b], Some(i), box [y, z])`",81,null],[4,"Mutability","","",null,null],[13,"MutMutable","","",82,null],[13,"MutImmutable","","",82,null],[4,"BinOp_","","",null,null],[13,"BiAdd","","The `+` operator (addition)",83,null],[13,"BiSub","","The `-` operator (subtraction)",83,null],[13,"BiMul","","The `*` operator (multiplication)",83,null],[13,"BiDiv","","The `/` operator (division)",83,null],[13,"BiRem","","The `%` operator (modulus)",83,null],[13,"BiAnd","","The `&&` operator (logical and)",83,null],[13,"BiOr","","The `||` operator (logical or)",83,null],[13,"BiBitXor","","The `^` operator (bitwise xor)",83,null],[13,"BiBitAnd","","The `&` operator (bitwise and)",83,null],[13,"BiBitOr","","The `|` operator (bitwise or)",83,null],[13,"BiShl","","The `<<` operator (shift left)",83,null],[13,"BiShr","","The `>>` operator (shift right)",83,null],[13,"BiEq","","The `==` operator (equality)",83,null],[13,"BiLt","","The `<` operator (less than)",83,null],[13,"BiLe","","The `<=` operator (less than or equal to)",83,null],[13,"BiNe","","The `!=` operator (not equal to)",83,null],[13,"BiGe","","The `>=` operator (greater than or equal to)",83,null],[13,"BiGt","","The `>` operator (greater than)",83,null],[4,"UnOp","","",null,null],[13,"UnDeref","","The `*` operator for dereferencing",84,null],[13,"UnNot","","The `!` operator for logical inversion",84,null],[13,"UnNeg","","The `-` operator for negation",84,null],[4,"Stmt_","","",null,null],[13,"StmtDecl","","Could be an item or a local (let) binding:",85,null],[13,"StmtExpr","","Expr without trailing semi-colon (must have unit type):",85,null],[13,"StmtSemi","","Expr with trailing semi-colon (may have any type):",85,null],[4,"Decl_","","",null,null],[13,"DeclLocal","","A local (let) binding:",86,null],[13,"DeclItem","","An item binding:",86,null],[4,"BlockCheckMode","","",null,null],[13,"DefaultBlock","","",87,null],[13,"UnsafeBlock","","",87,null],[13,"PushUnsafeBlock","","",87,null],[13,"PopUnsafeBlock","","",87,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",88,null],[13,"UserProvided","","",88,null],[4,"Expr_","","",null,null],[13,"ExprBox","","A `box x` expression.",89,null],[13,"ExprArray","","An array (`[a, b, c, d]`)",89,null],[13,"ExprCall","","A function call",89,null],[13,"ExprMethodCall","","A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)",89,null],[13,"ExprTup","","A tuple (`(a, b, c ,d)`)",89,null],[13,"ExprBinary","","A binary operation (For example: `a + b`, `a * b`)",89,null],[13,"ExprUnary","","A unary operation (For example: `!x`, `*x`)",89,null],[13,"ExprLit","","A literal (For example: `1`, `\"foo\"`)",89,null],[13,"ExprCast","","A cast (`foo as f64`)",89,null],[13,"ExprType","","",89,null],[13,"ExprIf","","An `if` block, with an optional else block",89,null],[13,"ExprWhile","","A while loop, with an optional label",89,null],[13,"ExprLoop","","Conditionless loop (can be exited with break, continue, or return)",89,null],[13,"ExprMatch","","A `match` block, with a source that indicates whether or not it is the result of a desugaring, and if so, which kind.",89,null],[13,"ExprClosure","","A closure (for example, `move |a, b, c| {a + b + c}`).",89,null],[13,"ExprBlock","","A block (`{ ... }`)",89,null],[13,"ExprAssign","","An assignment (`a = foo()`)",89,null],[13,"ExprAssignOp","","An assignment with an operator",89,null],[13,"ExprField","","Access of a named struct field (`obj.foo`)",89,null],[13,"ExprTupField","","Access of an unnamed field of a struct or tuple-struct",89,null],[13,"ExprIndex","","An indexing operation (`foo[2]`)",89,null],[13,"ExprPath","","Path to a definition, possibly containing lifetime or type parameters.",89,null],[13,"ExprAddrOf","","A referencing operation (`&a` or `&mut a`)",89,null],[13,"ExprBreak","","A `break`, with an optional label to break",89,null],[13,"ExprAgain","","A `continue`, with an optional label",89,null],[13,"ExprRet","","A `return`, with an optional value to be returned",89,null],[13,"ExprInlineAsm","","Inline assembly (from `asm!`), with its outputs and inputs.",89,null],[13,"ExprStruct","","A struct or struct-like variant literal expression.",89,null],[13,"ExprRepeat","","An array literal constructed from one repeated element.",89,null],[13,"ExprYield","","A suspension point for generators. This is `yield <expr>` in Rust.",89,null],[4,"QPath","","Optionally `Self`-qualified value/type path or associated extension.",null,null],[13,"Resolved","","Path to a definition, optionally \"fully-qualified\" with a `Self` type, if the path points to an associated item in a trait.",90,null],[13,"TypeRelative","","Type-related paths, e.g. `<T>::default` or `<T>::Output`. Will be resolved by type-checking to an associated item.",90,null],[4,"LocalSource","","Hints at the original code for a let statement",null,null],[13,"Normal","","A `match _ { .. }`",91,null],[13,"ForLoopDesugar","","A desugared `for _ in _ { .. }` loop",91,null],[4,"MatchSource","","Hints at the original code for a `match _ { .. }`",null,null],[13,"Normal","","A `match _ { .. }`",92,null],[13,"IfLetDesugar","","An `if let _ = _ { .. }` (optionally with `else { .. }`)",92,null],[12,"contains_else_clause","rustc::hir::MatchSource","",92,null],[13,"WhileLetDesugar","rustc::hir","A `while let _ = _ { .. }` (which was desugared to a `loop { match _ { .. } }`)",92,null],[13,"ForLoopDesugar","","A desugared `for _ in _ { .. }` loop",92,null],[13,"TryDesugar","","A desugared `?` operator",92,null],[4,"LoopSource","","The loop type that yielded an ExprLoop",null,null],[13,"Loop","","A `loop { .. }` loop",93,null],[13,"WhileLet","","A `while let _ = _ { .. }` loop",93,null],[13,"ForLoop","","A `for _ in _ { .. }` loop",93,null],[4,"LoopIdError","","",null,null],[13,"OutsideLoopScope","","",94,null],[13,"UnlabeledCfInWhileCondition","","",94,null],[13,"UnresolvedLabel","","",94,null],[4,"LoopIdResult","","",null,null],[13,"Ok","","",95,null],[13,"Err","","",95,null],[4,"ScopeTarget","","",null,null],[13,"Block","","",96,null],[13,"Loop","","",96,null],[4,"CaptureClause","","",null,null],[13,"CaptureByValue","","",97,null],[13,"CaptureByRef","","",97,null],[4,"TraitMethod","","A trait method's body (or just argument names).",null,null],[13,"Required","","No default body in the trait, just a signature.",98,null],[13,"Provided","","Both signature and body are provided in the trait.",98,null],[4,"TraitItemKind","","Represents a trait method or associated constant or type",null,null],[13,"Const","","An associated constant with an optional value (otherwise `impl`s must contain a value)",99,null],[13,"Method","","A method with an optional body",99,null],[13,"Type","","An associated type with (possibly empty) bounds and optional concrete type",99,null],[4,"ImplItemKind","","Represents different contents within `impl`s",null,null],[13,"Const","","An associated constant of the given type, set to the constant result of the expression",100,null],[13,"Method","","A method implementation with the given signature and body",100,null],[13,"Type","","An associated type",100,null],[4,"PrimTy","","Not represented directly in the AST, referred to by name through a ty_path.",null,null],[13,"TyInt","","",101,null],[13,"TyUint","","",101,null],[13,"TyFloat","","",101,null],[13,"TyStr","","",101,null],[13,"TyBool","","",101,null],[13,"TyChar","","",101,null],[4,"Ty_","","The different kinds of types recognized by the compiler",null,null],[13,"TySlice","","A variable length slice (`[T]`)",102,null],[13,"TyArray","","A fixed length array (`[T; n]`)",102,null],[13,"TyPtr","","A raw pointer (`*const T` or `*mut T`)",102,null],[13,"TyRptr","","A reference (`&'a T` or `&'a mut T`)",102,null],[13,"TyBareFn","","A bare function (e.g. `fn(usize) -> bool`)",102,null],[13,"TyNever","","The never type (`!`)",102,null],[13,"TyTup","","A tuple (`(A, B, C, D,...)`)",102,null],[13,"TyPath","","A path to a type definition (`module::module::...::Type`), or an associated type, e.g. `<Vec<T> as Trait>::Type` or `<T>::Target`.",102,null],[13,"TyTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",102,null],[13,"TyImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",102,null],[13,"TyTypeof","","Unused for now",102,null],[13,"TyInfer","","TyInfer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",102,null],[13,"TyErr","","Placeholder for a type that has failed to be defined.",102,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",103,null],[13,"Normal","","",103,null],[4,"Constness","","",null,null],[13,"Const","","",104,null],[13,"NotConst","","",104,null],[4,"Defaultness","","",null,null],[13,"Default","","",105,null],[12,"has_value","rustc::hir::Defaultness","",105,null],[13,"Final","rustc::hir","",105,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",106,null],[13,"Negative","","`impl !Trait for Type`",106,null],[4,"FunctionRetTy","","",null,null],[13,"DefaultReturn","","Return type is not specified.",107,null],[13,"Return","","Everything else",107,null],[4,"UseKind","","",null,null],[13,"Single","","One import, e.g. `use foo::bar` or `use foo::bar as baz`. Also produced for each element of a list `use`, e.g.",108,null],[13,"Glob","","Glob import, e.g. `use foo::*`.",108,null],[13,"ListStem","","Degenerate list import, e.g. `use foo::{a, b}` produces an additional `use foo::{}` for performing checks such as unstable feature gating. May be removed in the future.",108,null],[4,"Visibility","","",null,null],[13,"Public","","",109,null],[13,"Crate","","",109,null],[13,"Restricted","","",109,null],[12,"path","rustc::hir::Visibility","",109,null],[12,"id","","",109,null],[13,"Inherited","rustc::hir","",109,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","",110,null],[13,"Tuple","","",110,null],[13,"Unit","","",110,null],[4,"Item_","","",null,null],[13,"ItemExternCrate","","An `extern crate` item, with optional original crate name,",111,null],[13,"ItemUse","","`use foo::bar::*;` or `use foo::bar::baz as quux;`",111,null],[13,"ItemStatic","","A `static` item",111,null],[13,"ItemConst","","A `const` item",111,null],[13,"ItemFn","","A function declaration",111,null],[13,"ItemMod","","A module",111,null],[13,"ItemForeignMod","","An external module",111,null],[13,"ItemGlobalAsm","","Module-level inline assembly (from global_asm!)",111,null],[13,"ItemTy","","A type alias, e.g. `type Foo = Bar<u8>`",111,null],[13,"ItemEnum","","An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`",111,null],[13,"ItemStruct","","A struct definition, e.g. `struct Foo<A> {x: A}`",111,null],[13,"ItemUnion","","A union definition, e.g. `union Foo<A, B> {x: A, y: B}`",111,null],[13,"ItemTrait","","Represents a Trait Declaration",111,null],[13,"ItemDefaultImpl","","",111,null],[13,"ItemImpl","","An implementation, eg `impl<A> Trait for Foo { .. }`",111,null],[4,"AssociatedItemKind","","",null,null],[13,"Const","","",112,null],[13,"Method","","",112,null],[12,"has_self","rustc::hir::AssociatedItemKind","",112,null],[13,"Type","rustc::hir","",112,null],[4,"ForeignItem_","","An item within an `extern` block",null,null],[13,"ForeignItemFn","","A foreign function",113,null],[13,"ForeignItemStatic","","A foreign static item (`static ext: u8`), with optional mutability (the boolean is true when mutable)",113,null],[0,"check_attr","","This module implements some validity checks for attributes. In particular it verifies that `#[inline]` and `#[repr]` attributes are attached to items that actually support them and if there are conflicts between multiple such attributes attached to the same item.",null,null],[5,"check_crate","rustc::hir::check_attr","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"def","rustc::hir","",null,null],[3,"PathResolution","rustc::hir::def","The result of resolving a path before lowering to HIR. `base_def` is definition of resolved part of the path, `unresolved_segments` is the number of unresolved segments.     module::Type::AssocX::AssocY::MethodOrAssocType     ^~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     base_def      unresolved_segments = 3",null,null],[3,"Export","","",null,null],[12,"ident","","The name of the target.",114,null],[12,"def","","The definition of the target.",114,null],[12,"span","","The span of the target definition.",114,null],[4,"CtorKind","","",null,null],[13,"Fn","","Constructor function automatically created by a tuple struct/variant.",115,null],[13,"Const","","Constructor constant automatically created by a unit struct/variant.",115,null],[13,"Fictive","","Unusable name in value namespace created by a struct variant.",115,null],[4,"Def","","",null,null],[13,"Mod","","",116,null],[13,"Struct","","",116,null],[13,"Union","","",116,null],[13,"Enum","","",116,null],[13,"Variant","","",116,null],[13,"Trait","","",116,null],[13,"TyAlias","","",116,null],[13,"AssociatedTy","","",116,null],[13,"PrimTy","","",116,null],[13,"TyParam","","",116,null],[13,"SelfTy","","",116,null],[13,"Fn","","",116,null],[13,"Const","","",116,null],[13,"Static","","",116,null],[13,"StructCtor","","",116,null],[13,"VariantCtor","","",116,null],[13,"Method","","",116,null],[13,"AssociatedConst","","",116,null],[13,"Local","","",116,null],[13,"Upvar","","",116,null],[13,"Label","","",116,null],[13,"Macro","","",116,null],[13,"GlobalAsm","","",116,null],[13,"Err","","",116,null],[6,"DefMap","","Definition mapping",null,null],[6,"ExportMap","","This is the replacement export map. It maps a module to all of the exports within.",null,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"ctorkind"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"ctorkind"}],"output":{"name":"bool"}}],[11,"encode","","",115,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",115,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",115,null],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"encode","","",116,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",116,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",116,null],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"pathresolution"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",117,{"inputs":[{"name":"def"}],"output":{"name":"self"}}],[11,"with_unresolved_segments","","",117,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"self"}}],[11,"base_def","","",117,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"unresolved_segments","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind_name","","",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"export"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",114,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",114,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_ast","","",115,{"inputs":[{"name":"variantdata"}],"output":{"name":"ctorkind"}}],[11,"from_hir","","",115,{"inputs":[{"name":"variantdata"}],"output":{"name":"ctorkind"}}],[11,"def_id","","",116,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"kind_name","","A human readable kind name",116,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"def_id","rustc::hir","",null,null],[3,"CrateNum","rustc::hir::def_id","",null,null],[3,"DefIndex","","A DefIndex is an index into the hir-map for a crate, identifying a particular definition. It should really be considered an interned shorthand for a particular DefPath.",null,null],[3,"DefId","","A DefId identifies a particular definition, by combining a crate index and a def index.",null,null],[12,"krate","","",118,null],[12,"index","","",118,null],[4,"DefIndexAddressSpace","","",null,null],[13,"Low","","",119,null],[13,"High","","",119,null],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum LOCAL_CRATE in their DefId.",null,null],[17,"BUILTIN_MACROS_CRATE","","Virtual crate for builtin macros",null,null],[17,"INVALID_CRATE","","A CrateNum value that indicates that something is wrong.",null,null],[17,"CRATE_DEF_INDEX","","The crate root is always assigned index 0 by the AST Map code, thanks to `NodeCollector::new`.",null,null],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"cmp","","",120,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",120,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",120,{"inputs":[{"name":"usize"}],"output":{"name":"cratenum"}}],[11,"from_u32","","",120,{"inputs":[{"name":"u32"}],"output":{"name":"cratenum"}}],[11,"as_usize","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",120,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_def_id","","",120,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_encode","","",120,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",120,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"defindex"}}],[11,"cmp","","",121,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",121,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"lt","","",121,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"le","","",121,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"gt","","",121,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"ge","","",121,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"encode","","",121,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",121,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",121,null],[11,"new","","",121,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",121,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",121,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",121,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"address_space","","",121,{"inputs":[{"name":"self"}],"output":{"name":"defindexaddressspace"}}],[11,"as_array_index","","Converts this DefIndex into a zero-based array index. This index is the offset within the given \"range\" of the DefIndex, that is, if the DefIndex is part of the \"high\" range, the resulting index will be (DefIndex - DEF_INDEX_HI_START).",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_array_index","","",121,{"inputs":[{"name":"usize"},{"name":"defindexaddressspace"}],"output":{"name":"defindex"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"defindexaddressspace"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"defindexaddressspace"}],"output":{"name":"bool"}}],[11,"hash","","",119,null],[11,"index","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"start","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"cmp","","",118,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",118,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lt","","",118,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"le","","",118,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"gt","","",118,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ge","","",118,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"encode","","",118,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",118,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"local","","Make a local `DefId` with the given index.",118,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"intravisit","rustc::hir","HIR walker for walking the contents of nodes.",null,null],[3,"IdRange","rustc::hir::intravisit","",null,null],[12,"min","","",122,null],[12,"max","","",122,null],[3,"IdRangeComputingVisitor","","",null,null],[4,"FnKind","","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",123,null],[13,"Method","","fn foo(&self)",123,null],[13,"Closure","","|x, y| {}",123,null],[4,"NestedVisitorMap","","Specifies what nested things a visitor wants to visit. The most common choice is `OnlyBodies`, which will cause the visitor to visit fn bodies for fns that it encounters, but skip over nested item-like things.",null,null],[13,"None","","Do not visit any nested things. When you add a new \"non-nested\" thing, you will want to audit such uses to see if they remain valid.",124,null],[13,"OnlyBodies","","Do not visit nested item-like things, but visit nested things that are inside of an item-like.",124,null],[13,"All","","Visit all nested things, including item-likes.",124,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_sp_name","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_crate","","Walks the contents of a crate. See also `Crate::visit_all_items`.",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"},{"name":"nodeid"}],"output":null}],[5,"walk_body","","",null,{"inputs":[{"name":"v"},{"name":"body"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_qpath","","",null,{"inputs":[{"name":"v"},{"name":"qpath"},{"name":"nodeid"},{"name":"span"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_kind","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"bodyid"},{"name":"span"},{"name":"nodeid"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_trait_item_ref","","",null,{"inputs":[{"name":"v"},{"name":"traititemref"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_impl_item_ref","","",null,{"inputs":[{"name":"v"},{"name":"implitemref"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_decl","","",null,{"inputs":[{"name":"v"},{"name":"decl"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"walk_associated_item_kind","","",null,{"inputs":[{"name":"v"},{"name":"associateditemkind"}],"output":null}],[5,"walk_defaultness","","",null,{"inputs":[{"name":"v"},{"name":"defaultness"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `intravisit::walk_mod`.",null,null],[10,"nested_visit_map","","The default versions of the `visit_nested_XXX` routines invoke this method to get a map to use. By selecting an enum variant, you control which kinds of nested HIR are visited; see `NestedVisitorMap` for details. By \"nested HIR\", we are referring to bits of HIR that are not directly embedded within one another but rather indirectly, through a table in the crate. This is done to control dependencies during incremental compilation: the non-inline bits of HIR can be tracked and hashed separately.",125,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_nested_item","","Invoked when a nested item is encountered. By default does nothing unless you override `nested_visit_map` to return `Some(_)`, in which case it will walk the item. You probably don't want to override this method -- instead, override `nested_visit_map` or use the \"shallow\" or \"deep\" visit patterns described on `itemlikevisit::ItemLikeVisitor`. The only reason to override this method is if you want a nested pattern but cannot supply a `Map`; see `nested_visit_map` for advice.",125,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":null}],[11,"visit_nested_trait_item","","Like `visit_nested_item()`, but for trait items. See `visit_nested_item()` for advice on when to override this method.",125,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":null}],[11,"visit_nested_impl_item","","Like `visit_nested_item()`, but for impl items. See `visit_nested_item()` for advice on when to override this method.",125,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":null}],[11,"visit_nested_body","","Invoked to visit the body of a function, method or closure. Like visit_nested_item, does nothing by default unless you override `nested_visit_map` to return `Some(_)`, in which case it will walk the body.",125,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":null}],[11,"visit_item","","Visit the top-level item and (optionally) nested items / impl items. See `visit_nested_item` for details.",125,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_body","","",125,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"as_deep_visitor","","When invoking `visit_all_item_likes()`, you need to supply an item-like visitor.  This method converts a \"intra-visit\" visitor into an item-like visitor that walks the entire tree. If you use this, you probably don't want to process the contents of nested item-like things, since the outer loop will visit them as well.",125,{"inputs":[{"name":"self"}],"output":{"name":"deepvisitor"}}],[11,"visit_id","","",125,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"visit_def_mention","","",125,{"inputs":[{"name":"self"},{"name":"def"}],"output":null}],[11,"visit_name","","",125,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_mod","","",125,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",125,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_local","","",125,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",125,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",125,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",125,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",125,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_decl","","",125,{"inputs":[{"name":"self"},{"name":"decl"}],"output":null}],[11,"visit_expr","","",125,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",125,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",125,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_where_predicate","","",125,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[11,"visit_fn_decl","","",125,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_fn","","",125,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"bodyid"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",125,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_trait_item_ref","","",125,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":null}],[11,"visit_impl_item","","",125,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_impl_item_ref","","",125,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":null}],[11,"visit_trait_ref","","",125,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",125,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",125,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",125,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"name"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",125,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",125,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",125,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",125,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",125,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_qpath","","",125,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_path","","",125,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_segment","","",125,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",125,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",125,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",125,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_macro_def","","",125,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":null}],[11,"visit_vis","","",125,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_associated_item_kind","","",125,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":null}],[11,"visit_defaultness","","",125,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":null}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"attrs","","",123,null],[11,"intra","","Returns the map to use for an \"intra item-like\" thing (if any). e.g., function body.",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inter","","Returns the map to use for an \"item-like\" thing (if any). e.g., item, impl-item.",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"idrange"}}],[11,"encode","","",122,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",122,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"idrange"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"idrange"}],"output":{"name":"bool"}}],[11,"max","","",122,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",122,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"add","","",122,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"new","","",126,{"inputs":[{"name":"map"}],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",126,{"inputs":[{"name":"self"}],"output":{"name":"idrange"}}],[11,"nested_visit_map","","",126,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_id","","",126,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[0,"itemlikevisit","rustc::hir","",null,null],[3,"DeepVisitor","rustc::hir::itemlikevisit","",null,null],[8,"ItemLikeVisitor","","The \"item-like visitor\" visitor defines only the top-level methods that can be invoked by `Crate::visit_all_item_likes()`. Whether this trait is the right one to implement will depend on the overall pattern you need. Here are the three available patterns, in roughly the order of desirability:",null,null],[10,"visit_item","","",127,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[10,"visit_trait_item","","",127,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[10,"visit_impl_item","","",127,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"new","","",128,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[11,"visit_item","","",128,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_trait_item","","",128,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",128,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[0,"lowering","rustc::hir","Lowers the AST to the HIR.",null,null],[3,"LoweringContext","rustc::hir::lowering","",null,null],[5,"lower_crate","","",null,{"inputs":[{"name":"session"},{"name":"cratestore"},{"name":"depgraph"},{"name":"crate"},{"name":"resolver"}],"output":{"name":"crate"}}],[8,"Resolver","","",null,null],[10,"resolve_hir_path","","Resolve a hir path generated by the lowerer when expanding `for`, `if let`, etc.",129,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":null}],[10,"get_resolution","","Obtain the resolution for a node id",129,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"definitions","","We must keep the set of definitions up to date as we add nodes that weren't in the AST. This should only return `None` during testing.",129,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"lower_item","","",130,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"option"}}],[0,"map","rustc::hir","",null,null],[3,"DefCollector","rustc::hir::map","Creates def ids for nodes in the AST.",null,null],[12,"visit_macro_invoc","","",131,null],[3,"MacroInvocationData","","",null,null],[12,"mark","","",132,null],[12,"def_index","","",132,null],[12,"const_expr","","",132,null],[3,"Forest","","Stores a crate and any number of inlined items from other crates.",null,null],[12,"dep_graph","","",133,null],[3,"Map","","Represents a mapping from Node IDs to AST elements and their parent Node IDs",null,null],[12,"forest","","The backing storage for all the AST nodes.",134,null],[12,"dep_graph","","Same as the dep_graph in forest, just available with one fewer deref. This is a gratuitous micro-optimization.",134,null],[3,"NodesMatchingSuffix","","",null,null],[4,"Node","","",null,null],[13,"NodeItem","","",135,null],[13,"NodeForeignItem","","",135,null],[13,"NodeTraitItem","","",135,null],[13,"NodeImplItem","","",135,null],[13,"NodeVariant","","",135,null],[13,"NodeField","","",135,null],[13,"NodeExpr","","",135,null],[13,"NodeStmt","","",135,null],[13,"NodeTy","","",135,null],[13,"NodeTraitRef","","",135,null],[13,"NodeBinding","","",135,null],[13,"NodePat","","",135,null],[13,"NodeBlock","","",135,null],[13,"NodeLocal","","",135,null],[13,"NodeMacroDef","","",135,null],[13,"NodeStructCtor","","NodeStructCtor represents a tuple struct.",135,null],[13,"NodeLifetime","","",135,null],[13,"NodeTyParam","","",135,null],[13,"NodeVisibility","","",135,null],[5,"map_crate","","",null,{"inputs":[{"name":"session"},{"name":"cratestore"},{"name":"forest"},{"name":"definitions"}],"output":{"name":"map"}}],[0,"blocks","","This module provides a simplified abstraction for working with code blocks identified by their integer node-id.  In particular, it captures a common set of attributes that all \"function-like things\" (represented by `FnLike` instances) share.  For example, all `FnLike` instances have a type signature (be it explicit or inferred).  And all `FnLike` instances have a body, i.e. the code that is run when the function-like thing it represents is invoked.",null,null],[3,"FnLikeNode","rustc::hir::map::blocks","An FnLikeNode is a Node that is like a fn, in that it has a decl and a body (as well as a NodeId, a span, etc).",null,null],[4,"Code","","Carries either an FnLikeNode or a Expr, as these are the two constructs that correspond to \"code\" (as in, something from which we can construct a control-flow graph).",null,null],[13,"FnLike","","",136,null],[13,"Expr","","",136,null],[8,"MaybeFnLike","","MaybeFnLike wraps a method that indicates if an object corresponds to some FnLikeNode.",null,null],[10,"is_fn_like","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"fnlikenode"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_fn_like","rustc::hir","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","rustc::hir::map::blocks","",136,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"id","","",136,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Expr node input.",136,{"inputs":[{"name":"map"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",138,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"body","","",138,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"decl","","",138,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"span","","",138,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"id","","",138,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"constness","","",138,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"unsafety","","",138,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"kind","","",138,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"new","rustc::hir::map","",131,{"inputs":[{"name":"definitions"},{"name":"mark"}],"output":{"name":"self"}}],[11,"collect_root","","",131,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"with_parent","","",131,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"f"}],"output":null}],[11,"visit_const_expr","","",131,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_item","","",131,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_foreign_item","","",131,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_generics","","",131,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_trait_item","","",131,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",131,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_pat","","",131,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",131,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",131,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_lifetime_def","","",131,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_stmt","","",131,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[0,"definitions","","For each definition, we track the following data.  A definition here is defined somewhat circularly as \"something with a def-id\", but it generally corresponds to things like structs, enums, etc. There are also some rather random cases (like const initializer expressions) that are mostly just leftovers.",null,null],[3,"DefPathTable","rustc::hir::map::definitions","The DefPathTable maps DefIndexes to DefKeys and vice versa. Internally the DefPathTable holds a tree of DefKeys, where each DefKey stores the DefIndex of its parent. There is one DefPathTable for each crate.",null,null],[3,"Definitions","","The definition table containing node definitions. It holds the DefPathTable for local DefIds/DefPaths and it also stores a mapping from NodeIds to local DefIds.",null,null],[3,"DefKey","","A unique identifier that we can use to lookup a definition precisely. It combines the index of the definition's parent (if any) with a `DisambiguatedDefPathData`.",null,null],[12,"parent","","Parent path.",139,null],[12,"disambiguated_data","","Identifier of this node.",139,null],[3,"DisambiguatedDefPathData","","Pair of `DefPathData` and an integer disambiguator. The integer is normally 0, but in the event that there are multiple defs with the same `parent` and `data`, we use this field to disambiguate between them. This introduces some artificial ordering dependency but means that if you have (e.g.) two impls for the same type in the same module, they do get distinct def-ids.",null,null],[12,"data","","",140,null],[12,"disambiguator","","",140,null],[3,"DefPath","","",null,null],[12,"data","","the path leading from the crate root to the item",141,null],[12,"krate","","what krate root is this path relative to?",141,null],[3,"DefPathHash","","",null,null],[12,"0","","",142,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","The crate root (marker)",143,null],[13,"Misc","","",143,null],[13,"Impl","","An impl",143,null],[13,"TypeNs","","Something in the type NS",143,null],[13,"ValueNs","","Something in the value NS",143,null],[13,"Module","","A module declaration",143,null],[13,"MacroDef","","A macro rule",143,null],[13,"ClosureExpr","","A closure expression",143,null],[13,"TypeParam","","A type parameter (generic parameter)",143,null],[13,"LifetimeDef","","A lifetime definition",143,null],[13,"EnumVariant","","A variant of a enum",143,null],[13,"Field","","A struct field",143,null],[13,"StructCtor","","Implicit ctor for a tuple-like struct",143,null],[13,"Initializer","","Initializer for a const",143,null],[13,"ImplTrait","","An `impl Trait` type node.",143,null],[13,"Typeof","","A `typeof` type node.",143,null],[13,"GlobalMetaData","","GlobalMetaData identifies a piece of crate metadata that is global to a whole crate (as opposed to just one item). GlobalMetaData components are only supposed to show up right below the crate root.",143,null],[4,"GlobalMetaDataKind","","",null,null],[13,"Krate","","",144,null],[13,"CrateDeps","","",144,null],[13,"DylibDependencyFormats","","",144,null],[13,"LangItems","","",144,null],[13,"LangItemsMissing","","",144,null],[13,"NativeLibraries","","",144,null],[13,"CodeMap","","",144,null],[13,"Impls","","",144,null],[13,"ExportedSymbols","","",144,null],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"def_key","","",145,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_path_hash","","",145,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpathhash"}}],[11,"add_def_path_hashes_to","","",145,{"inputs":[{"name":"self"},{"name":"cratenum"},{"name":"fxhashmap"}],"output":null}],[11,"size","","",145,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encode","","",145,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",145,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"defkey"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"hash","","",139,null],[11,"encode","","",139,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",139,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"disambiguateddefpathdata"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"disambiguateddefpathdata"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"disambiguateddefpathdata"}],"output":{"name":"bool"}}],[11,"hash","","",140,null],[11,"encode","","",140,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",140,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"defpath"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"defpath"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"defpath"}],"output":{"name":"bool"}}],[11,"hash","","",141,null],[11,"encode","","",141,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",141,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"is_local","","",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"make","","",141,{"inputs":[{"name":"cratenum"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"to_string_no_crate","","Returns a string representation of the DefPath without the crate-prefix. This method is useful if you don't have a TyCtxt available.",141,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"defpathdata"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"defpathdata"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"defpathdata"}],"output":{"name":"bool"}}],[11,"hash","","",143,null],[11,"encode","","",143,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",143,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"defpathhash"}}],[11,"hash","","",142,null],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"defpathhash"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"defpathhash"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"self"},{"name":"defpathhash"}],"output":{"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"self"},{"name":"defpathhash"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"self"},{"name":"defpathhash"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"self"},{"name":"defpathhash"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"self"},{"name":"defpathhash"}],"output":{"name":"bool"}}],[11,"cmp","","",142,{"inputs":[{"name":"self"},{"name":"defpathhash"}],"output":{"name":"ordering"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",142,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",142,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash_stable","","",142,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"new","","Create new empty definition map.",146,{"inputs":[],"output":{"name":"definitions"}}],[11,"def_path_table","","",146,{"inputs":[{"name":"self"}],"output":{"name":"defpathtable"}}],[11,"def_index_counts_lo_hi","","Get the number of definitions.",146,null],[11,"def_key","","",146,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_path_hash","","",146,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpathhash"}}],[11,"def_path","","Returns the path from the crate root to `index`. The root nodes are not included in the path (i.e., this will be an empty vector for the crate root). For an inlined item, this will be the path of the item in the external crate (but the path will begin with the path to the external crate).",146,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpath"}}],[11,"opt_def_index","","",146,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"opt_local_def_id","","",146,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"local_def_id","","",146,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"as_local_node_id","","",146,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"node_to_hir_id","","",146,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"hirid"}}],[11,"find_node_for_hir_id","","",146,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"nodeid"}}],[11,"def_index_to_hir_id","","",146,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"hirid"}}],[11,"create_root_def","","Add a definition with a parent definition.",146,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"defindex"}}],[11,"create_def_with_parent","","Add a definition with a parent definition.",146,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"nodeid"},{"name":"defpathdata"},{"name":"defindexaddressspace"},{"name":"mark"}],"output":{"name":"defindex"}}],[11,"init_node_id_to_hir_id_mapping","","Initialize the ast::NodeId to HirId mapping once it has been generated during AST to HIR lowering.",146,{"inputs":[{"name":"self"},{"name":"indexvec"}],"output":null}],[11,"expansion","","",146,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"mark"}}],[11,"macro_def_scope","","",146,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"defid"}}],[11,"add_macro_def_scope","","",146,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"defid"}],"output":null}],[11,"get_opt_name","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_interned_str","","",143,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"to_string","","",143,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"globalmetadatakind"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"globalmetadatakind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",144,{"inputs":[{"name":"self"},{"name":"globalmetadatakind"}],"output":{"name":"option"}}],[11,"cmp","","",144,{"inputs":[{"name":"self"},{"name":"globalmetadatakind"}],"output":{"name":"ordering"}}],[11,"hash","","",144,null],[11,"encode","","",144,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",144,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"def_index","","",144,{"inputs":[{"name":"self"},{"name":"defpathtable"}],"output":{"name":"defindex"}}],[17,"ITEM_LIKE_SPACE","rustc::hir::map","",null,null],[17,"REGULAR_SPACE","","",null,null],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",133,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",133,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"read","","Registers a read in the dependency graph of the AST node with the given `id`. This needs to be called each time a public function returns the HIR for a node -- in other words, when it \"reveals\" the content of a node to the caller (who might not otherwise have had access to those contents, and hence needs a read recorded). If the function just returns a DefId or NodeId, no actual content was returned, so no read is needed.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"definitions","","",134,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"def_key","","",134,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path_from_id","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"def_path","","",134,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"local_def_id","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"opt_local_def_id","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"as_local_node_id","","",134,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"hir_to_node_id","","",134,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"nodeid"}}],[11,"node_to_hir_id","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"hirid"}}],[11,"def_index_to_hir_id","","",134,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"hirid"}}],[11,"def_index_to_node_id","","",134,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"nodeid"}}],[11,"krate","","",134,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"trait_item","","",134,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"traititem"}}],[11,"impl_item","","",134,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"implitem"}}],[11,"body","","",134,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"body"}}],[11,"body_owner","","Returns the `NodeId` that corresponds to the definition of which this is the body of, i.e. a `fn`, `const` or `static` item (possibly associated), or a closure, or the body itself for embedded constant expressions (e.g. `N` in `[T; N]`).",134,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"nodeid"}}],[11,"body_owner_def_id","","",134,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"defid"}}],[11,"maybe_body_owned_by","","Given a node id, returns the `BodyId` associated with it, if the node is a body owner, otherwise returns `None`.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"body_owned_by","","Given a body owner's id, returns the `BodyId` associated with it.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bodyid"}}],[11,"ty_param_owner","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"ty_param_name","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"name"}}],[11,"trait_impls","","",134,null],[11,"trait_default_impl","","",134,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_is_auto","","",134,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to invoking `krate.attrs` because it registers a tighter dep-graph access.",134,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot be found.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"node"}}],[11,"get_if_local","","",134,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"find","","Retrieve the Node corresponding to `id`, returning None if cannot be found.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no parent. Note that the parent may be CRATE_NODE_ID, which is not itself present in the map -- so passing the return value of get_parent_node to get may actually panic. This function returns the immediate parent in the AST, whereas get_parent returns the enclosing item. Note that this might not be the actual parent node in the AST - some kinds of nodes are not in the map and these will never appear as the parent_node. So you can always walk the parent_nodes from a node to the root of the ast (unless you get the same id back here that can happen if the id is not in the map itself or is just weird).",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose immediate parent is an item or a closure.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"get_return_block","","Retrieve the NodeId for `id`'s enclosing method, unless there's a `while` or `loop` before reaching it, as block tail returns are not available in them.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_parent","","Retrieve the NodeId for `id`'s parent item, or `id` itself if no parent item is in this map. The \"parent item\" is the closest parent node in the AST which is recorded by the map and is an item, either an item in a module, trait, or impl.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"get_module_parent","","Returns the NodeId of `id`'s nearest module parent, or `id` itself if no module parent is in this map.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block. FIXME it is not clear to me that all items qualify as scopes - statics and associated types probably shouldn't, for example. Behavior in this regard should be expected to be highly unstable.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_parent_did","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"get_foreign_abi","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"abi"}}],[11,"expect_item","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"item"}}],[11,"expect_impl_item","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"implitem"}}],[11,"expect_trait_item","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"traititem"}}],[11,"expect_variant_data","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"variantdata"}}],[11,"expect_variant","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"variant"}}],[11,"expect_foreign_item","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"foreignitem"}}],[11,"expect_expr","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"expr"}}],[11,"get_inlined_body_untracked","","",134,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"intern_inlined_body","","",134,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"body"}],"output":{"name":"body"}}],[11,"name","","Returns the name associated with the given NodeId's AST.",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"name"}}],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST corresponding to the Node ID",134,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id's with paths that match `parts`.  (Requires `parts` is non-empty.)",134,null],[11,"span","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"span"}}],[11,"span_if_local","","",134,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"node_to_string","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"node_to_user_string","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"node_to_pretty_string","","",134,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"next","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nested","","",134,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[0,"pat_util","rustc::hir","",null,null],[3,"EnumerateAndAdjust","rustc::hir::pat_util","",null,null],[8,"EnumerateAndAdjustIterator","","",null,null],[10,"enumerate_and_adjust","","",148,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"option"}],"output":{"name":"enumerateandadjust"}}],[11,"next","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_refutable","rustc::hir","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_const","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"each_binding","","Call `f` on every \"binding\" in a pattern, e.g., on `a` in `match foo() { Some(a) => (), None => () }`",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"contains_bindings","","Checks if the pattern contains any patterns that bind something to an ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to an ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"simple_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"necessary_variants","","Return variants that are necessary to exist for the pattern to match.",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"contains_explicit_ref_binding","","Checks if the pattern contains any `ref` or `ref mut` bindings, and if yes whether it contains mutable or just immutables ones.",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains_explicit_ref_binding","","Checks if the patterns for this arm contain any `ref` or `ref mut` bindings, and if yes whether its containing mutable ones or just immutables ones.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"print","","",null,null],[3,"NoAnn","rustc::hir::print","",null,null],[3,"State","","",null,null],[12,"s","","",150,null],[4,"AnnNode","","",null,null],[13,"NodeName","","",151,null],[13,"NodeBlock","","",151,null],[13,"NodeItem","","",151,null],[13,"NodeSubItem","","",151,null],[13,"NodeExpr","","",151,null],[13,"NodePat","","",151,null],[4,"Nested","","",null,null],[13,"Item","","",152,null],[13,"TraitItem","","",152,null],[13,"ImplItem","","",152,null],[13,"Body","","",152,null],[13,"BodyArgPat","","",152,null],[5,"print_crate","","Requires you to pass an input filename and reader so that it can scan the input text for comments and literals to copy forward.",null,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"ppann"},{"name":"f"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"NO_ANN","","",null,null],[17,"indent_unit","","",null,null],[17,"default_columns","","",null,null],[8,"PpAnn","","",null,null],[11,"nested","","",153,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",153,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",153,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"nested","rustc::hir","",33,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"writer","rustc::hir::print","",150,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[11,"boxes","","",150,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"comments","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cur_cmnt","","",150,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cur_lit","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bump_lit","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new_from_input","","",150,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",150,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",150,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"nbsp","","",150,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"word_nbsp","","",150,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",150,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",150,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bclose_","","",150,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",150,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",150,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"space_if_not_bol","","",150,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"break_offset_if_not_bol","","",150,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",150,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",150,null],[11,"commasep_exprs","","",150,null],[11,"print_mod","","",150,null],[11,"print_foreign_mod","","",150,null],[11,"print_opt_lifetime","","",150,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_type","","",150,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",150,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",150,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_trait_ref","","",150,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"print_enum_def","","",150,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"name"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",150,null],[11,"print_visibility","","",150,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_defaultness","","",150,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"result"}}],[11,"print_struct","","",150,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"generics"},{"name":"name"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_variant","","",150,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"print_method_sig","","",150,null],[11,"print_trait_item","","",150,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",150,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",150,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"result"}}],[11,"print_block","","",150,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",150,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_indent","","",150,{"inputs":[{"name":"self"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",150,null],[11,"print_block_maybe_unclosed","","",150,null],[11,"print_if","","",150,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"expr"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",150,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_expr_maybe_paren","","",150,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"i8"}],"output":{"name":"result"}}],[11,"print_expr_as_cond","","Print an expr using syntax that's acceptable in a condition position, such as the `cond` in `if cond { ... }`.",150,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",150,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",150,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_decl","","",150,{"inputs":[{"name":"self"},{"name":"decl"}],"output":{"name":"result"}}],[11,"print_usize","","",150,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",150,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",150,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_path","","",150,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_qpath","","",150,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_pat","","",150,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",150,null],[11,"print_capture_clause","","",150,{"inputs":[{"name":"self"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"print_bounds","","",150,null],[11,"print_lifetime","","",150,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_def","","",150,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"result"}}],[11,"print_generics","","",150,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",150,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",150,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_mutability","","",150,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",150,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_fn_output","","",150,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",150,null],[11,"maybe_print_trailing_comment","","",150,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",150,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",150,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",150,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",150,{"inputs":[{"name":"self"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",150,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"result"}}],[0,"svh","rustc::hir","Calculation and management of a Strict Version Hash for crates",null,null],[3,"Svh","rustc::hir::svh","",null,null],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"svh"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Svh` given the hash. If you actually want to compute the SVH from some HIR, you want the `calculate_svh` function found in `librustc_incremental`.",154,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_u64","","",154,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_string","","",154,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"hash","","",154,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",154,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",154,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash_stable","","",154,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[6,"HirVec","rustc::hir","HIR doesn't commit to a concrete storage type and has its own alias for a vector. It can be `Vec`, `P<[T]>` or potentially `Box<[T]>`, or some other container with similar behavior. Unlike AST, HIR is mostly a static structure, so we can use an owned slice instead of `Vec` to avoid keeping extra capacity.",null,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","",null,null],[6,"BinOp","","",null,null],[6,"Stmt","","A statement",null,null],[6,"Decl","","",null,null],[6,"Variant","","",null,null],[6,"FreevarMap","","",null,null],[6,"CaptureModeMap","","",null,null],[6,"TraitMap","","",null,null],[6,"GlobMap","","",null,null],[17,"CRATE_HIR_ID","","The `HirId` corresponding to CRATE_NODE_ID and CRATE_DEF_INDEX",null,null],[17,"DUMMY_HIR_ID","","",null,null],[17,"DUMMY_ITEM_LOCAL_ID","","",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"hirid"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"ordering"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"itemlocalid"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"ordering"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"as_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",21,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"lifetimename"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"lifetimename"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"lifetimename"}],"output":{"name":"bool"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"name","","",73,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_elided","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_static","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"is_global","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_name","","Convert an identifier to the corresponding segment.",25,{"inputs":[{"name":"name"}],"output":{"name":"pathsegment"}}],[11,"new","","",25,{"inputs":[{"name":"name"},{"name":"pathparameters"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_parameters","","",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"none","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inputs","","",26,null],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","",28,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attr_name","","",76,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"carries_unsafe_attr","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"synthetictyparamkind"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"synthetictyparamkind"}],"output":{"name":"bool"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"item","","",33,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"item"}}],[11,"trait_item","","",33,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"traititem"}}],[11,"impl_item","","",33,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"implitem"}}],[11,"visit_all_item_likes","","Visits all items in the crate in some deterministic (but unspecified) order. If you just need to process every item, but don't care about nesting, this method is the best choice.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"body","","",33,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"body"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"macrodef"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"walk","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bindingannotation"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"bindingannotation"}],"output":{"name":"bool"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"rangeend"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"bool"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"and","","Return MutMutable only if both arguments are mutable.",82,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"binop_"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","",83,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_lazy","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shift","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_comparison","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"stmt_"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"attrs","","",85,null],[11,"id","","",85,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"decl_"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"attrs","","",86,null],[11,"is_local","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unsafesource"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"ordering"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"expr_"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"qpath"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"qpath"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"qpath"}],"output":{"name":"bool"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"localsource"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"localsource"}],"output":{"name":"bool"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"matchsource"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"loopsource"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"loopsource"}],"output":{"name":"bool"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"loopiderror"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"loopiderror"}],"output":{"name":"bool"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"loopidresult"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"loopidresult"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"loopidresult"}],"output":{"name":"bool"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",95,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",95,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"scopetarget"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"scopetarget"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"scopetarget"}],"output":{"name":"bool"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"opt_id","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"destination"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"destination"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"destination"}],"output":{"name":"bool"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"captureclause"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"traititemid"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"option"}}],[11,"lt","","",47,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"le","","",47,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"gt","","",47,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"ge","","",47,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"cmp","","",47,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"ordering"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"traitmethod"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"traitmethod"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"traitmethod"}],"output":{"name":"bool"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"encode","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"implitemid"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"ordering"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"primty"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"ty_"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"encode","","",102,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmoutput"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"inlineasm"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"encode","","",103,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"encode","","",104,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"encode","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_value","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_final","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_default","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"encode","","",106,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"encode","","",107,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",107,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"globalasm"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"globalasm"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"globalasm"}],"output":{"name":"bool"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"variant_"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"usekind"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"usekind"}],"output":{"name":"bool"}}],[11,"encode","","",108,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"encode","","",109,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_pub_restricted","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"structfield"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_positional","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"encode","","",110,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fields","","",110,null],[11,"id","","",110,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"itemid"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":{"name":"bool"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"item_"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"encode","","",111,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",111,null],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"adt_kind","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"traititemref"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":{"name":"bool"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"implitemref"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":{"name":"bool"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"associateditemkind"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":{"name":"bool"}}],[11,"encode","","",112,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem_"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"encode","","",113,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",113,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"freevar"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"var_id","","",71,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"traitcandidate"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ich","rustc","ICH - Incremental Compilation Hash",null,null],[3,"Fingerprint","rustc::ich","",null,null],[3,"CachingCodemapView","","",null,null],[3,"StableHashingContext","","This is the context state available during incr. comp. hashing. It contains enough information to transform DefIds and HirIds into stable DefPaths (i.e. a reference to the TyCtxt) and it holds a few caches for speeding up various things (e.g. each DefId/DefPath is only hashed once).",null,null],[4,"NodeIdHashingMode","","",null,null],[13,"Ignore","","",155,null],[13,"HashDefPath","","",155,null],[5,"hash_stable_trait_impls","","",null,{"inputs":[{"name":"stablehashingcontext"},{"name":"stablehasher"},{"name":"vec"},{"name":"hashmap"}],"output":null}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"cmp","","",156,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"option"}}],[11,"lt","","",156,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"le","","",156,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"gt","","",156,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"ge","","",156,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"fingerprint"}}],[11,"encode","","",156,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",156,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"zero","","",156,{"inputs":[],"output":{"name":"fingerprint"}}],[11,"from_smaller_hash","","",156,{"inputs":[{"name":"u64"}],"output":{"name":"fingerprint"}}],[11,"to_smaller_hash","","",156,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"combine","","",156,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"fingerprint"}}],[11,"to_hex","","",156,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"finish","","",156,{"inputs":[{"name":"stablehasher"}],"output":{"name":"self"}}],[11,"hash_stable","","",156,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"cachingcodemapview"}}],[11,"new","","",157,{"inputs":[{"name":"codemap"}],"output":{"name":"cachingcodemapview"}}],[11,"byte_pos_to_line_and_col","","",157,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"stablehashingcontext"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"nodeidhashingmode"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"nodeidhashingmode"}}],[11,"new","","",158,{"inputs":[{"name":"session"},{"name":"crate"},{"name":"definitions"},{"name":"cratestore"}],"output":{"name":"self"}}],[11,"sess","","",158,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"force_span_hashing","","",158,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"while_hashing_hir_bodies","","",158,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":null}],[11,"while_hashing_spans","","",158,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":null}],[11,"with_node_id_hashing_mode","","",158,{"inputs":[{"name":"self"},{"name":"nodeidhashingmode"},{"name":"f"}],"output":null}],[11,"def_path_hash","","",158,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpathhash"}}],[11,"local_def_path_hash","","",158,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpathhash"}}],[11,"node_to_hir_id","","",158,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"hirid"}}],[11,"hash_spans","","",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash_bodies","","",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"codemap","","",158,{"inputs":[{"name":"self"}],"output":{"name":"cachingcodemapview"}}],[11,"is_ignored_attr","","",158,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"hash_hir_item_like","","",158,null],[11,"binop_can_panic_at_runtime","","",158,{"inputs":[{"name":"self"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"unop_can_panic_at_runtime","","",158,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"create_stable_hashing_context","","",158,null],[11,"hash_stable","rustc::hir","",41,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",20,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",20,null],[11,"hash_stable","rustc::hir::def_id","",118,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",118,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"}],"output":{"name":"defpathhash"}}],[11,"hash_stable","","",120,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",120,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"}],"output":{"name":"defpathhash"}}],[11,"hash_stable","rustc::hir","",21,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",21,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"}],"output":{"name":"itemlocalid"}}],[11,"hash_stable","","",66,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",47,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",49,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",73,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",22,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",23,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",24,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",25,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",26,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",74,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",75,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",27,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",28,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",77,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",29,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",78,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",30,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",31,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",32,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",45,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",46,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",51,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",52,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",101,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",53,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",102,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",57,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",107,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",63,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",64,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",90,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",34,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",35,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",36,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",37,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",79,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",80,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",81,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",83,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",84,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",38,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",86,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",39,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",40,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",87,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",88,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",43,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",89,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",91,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",93,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",92,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",97,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",44,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",95,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",94,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",96,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",48,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",98,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",99,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",50,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",100,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",109,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",105,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",106,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",58,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",59,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",61,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",62,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",108,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",65,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",110,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",67,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",111,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",68,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",69,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",112,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",70,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",113,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",85,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",56,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",42,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",41,null],[11,"hash_stable","","",54,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",60,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",55,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::hir::def","",115,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",116,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::hir","",82,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",103,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",104,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::hir::def_id","",121,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",121,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"}],"output":{"name":"defpathhash"}}],[11,"hash_stable","rustc::hir::def","",114,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::hir","",72,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",72,null],[11,"hash_stable","","",71,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[17,"ATTR_DIRTY","rustc::ich","",null,null],[17,"ATTR_CLEAN","","",null,null],[17,"ATTR_DIRTY_METADATA","","",null,null],[17,"ATTR_CLEAN_METADATA","","",null,null],[17,"ATTR_IF_THIS_CHANGED","","",null,null],[17,"ATTR_THEN_THIS_WOULD_NEED","","",null,null],[17,"ATTR_PARTITION_REUSED","","",null,null],[17,"ATTR_PARTITION_TRANSLATED","","",null,null],[17,"DEP_GRAPH_ASSERT_ATTRS","","",null,null],[17,"IGNORED_ATTRIBUTES","","",null,null],[0,"infer","rustc","See the Book for more information.",null,null],[3,"TypeFreshener","rustc::infer","",null,null],[3,"InferOk","","",null,null],[12,"value","","",159,null],[12,"obligations","","",159,null],[3,"InferCtxt","","",null,null],[12,"tcx","","",160,null],[12,"in_progress_tables","","During type-checking/inference of a body, `in_progress_tables` contains a reference to the tables being built up, which are used for reading closure kinds/signatures as they are inferred, and for error reporting logic to read arbitrary node types.",160,null],[12,"projection_cache","","",160,null],[12,"type_variables","","",160,null],[12,"selection_cache","","Caches the results of trait selection. This cache is used for things that have to do with the parameters in scope.",160,null],[12,"evaluation_cache","","Caches the results of trait evaluation.",160,null],[12,"reported_trait_errors","","",160,null],[3,"TypeTrace","","The trace designates the path through inference that we took to encounter an error or subtyping constraint.",null,null],[3,"InferCtxtBuilder","","Helper type of a temporary returned by tcx.infer_ctxt(). Necessary because we can't write the following bound: F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(InferCtxt<'b, 'gcx, 'tcx>).",null,null],[3,"CombinedSnapshot","","",null,null],[4,"ValuePairs","","See `error_reporting` module for more details",null,null],[13,"Types","","",161,null],[13,"TraitRefs","","",161,null],[13,"PolyTraitRefs","","",161,null],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint.",null,null],[13,"Subtype","","",162,null],[13,"InfStackClosure","","",162,null],[13,"InvokeClosure","","",162,null],[13,"DerefPointer","","",162,null],[13,"FreeVariable","","",162,null],[13,"IndexSlice","","",162,null],[13,"RelateObjectBound","","",162,null],[13,"RelateParamBound","","",162,null],[13,"RelateRegionParamBound","","",162,null],[13,"RelateDefaultParamBound","","",162,null],[13,"Reborrow","","",162,null],[13,"ReborrowUpvar","","",162,null],[13,"DataBorrowed","","",162,null],[13,"ReferenceOutlivesReferent","","",162,null],[13,"ParameterInScope","","",162,null],[13,"ExprTypeIsNotInScope","","",162,null],[13,"BindingTypeIsNotValidAtDecl","","",162,null],[13,"CallRcvr","","",162,null],[13,"CallArg","","",162,null],[13,"CallReturn","","",162,null],[13,"Operand","","",162,null],[13,"AddrOf","","",162,null],[13,"AutoBorrow","","",162,null],[13,"SafeDestructor","","",162,null],[13,"CompareImplMethodObligation","","",162,null],[12,"span","rustc::infer::SubregionOrigin","",162,null],[12,"item_name","","",162,null],[12,"impl_item_def_id","","",162,null],[12,"trait_item_def_id","","",162,null],[12,"lint_id","","",162,null],[4,"ParameterOrigin","rustc::infer","Places that type/region parameters can appear.",null,null],[13,"Path","","",163,null],[13,"MethodCall","","",163,null],[13,"OverloadedOperator","","",163,null],[13,"OverloadedDeref","","",163,null],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:",null,null],[13,"FnCall","","when a fn is called",164,null],[13,"HigherRankedType","","when two higher-ranked types are compared",164,null],[13,"AssocTypeProjection","","when projecting an associated type",164,null],[4,"RegionVariableOrigin","","Reasons to create a region inference variable",null,null],[13,"MiscVariable","","",165,null],[13,"PatternRegion","","",165,null],[13,"AddrOfRegion","","",165,null],[13,"Autoref","","",165,null],[13,"Coercion","","",165,null],[13,"EarlyBoundRegion","","",165,null],[13,"LateBoundRegion","","",165,null],[13,"UpvarRegion","","",165,null],[13,"BoundRegionInCoherence","","",165,null],[4,"FixupError","","",null,null],[13,"UnresolvedIntTy","","",166,null],[13,"UnresolvedFloatTy","","",166,null],[13,"UnresolvedTy","","",166,null],[0,"at","","A nice interface for working with the infcx.  The basic idea is to do `infcx.at(cause, param_env)`, which sets the \"cause\" of the operation as well as the surrounding parameter environment.  Then you can do something like `.sub(a, b)` or `.eq(a, b)` to create a subtype or equality relationship respectively. The first argument is always the \"expected\" output from the POV of diagnostics.",null,null],[3,"At","rustc::infer::at","",null,null],[3,"Trace","","",null,null],[8,"ToTrace","","",null,null],[10,"to_trace","","",167,{"inputs":[{"name":"obligationcause"},{"name":"bool"},{"name":"self"},{"name":"self"}],"output":{"name":"typetrace"}}],[11,"at","rustc::infer","",160,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"paramenv"}],"output":{"name":"at"}}],[11,"eq_impl_headers","rustc::infer::at","Hacky routine for equating two impl headers in coherence.",168,{"inputs":[{"name":"self"},{"name":"implheader"},{"name":"implheader"}],"output":{"name":"inferresult"}}],[11,"sub_exp","","Make `a <: b` where `a` may or may not be expected",168,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"sup","","Make `actual <: expected`. For example, if type-checking a call like `foo(x)`, where `foo: fn(i32)`, you might have `sup(i32, x)`, since the \"expected\" type is the type that appears in the signature.",168,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"sub","","Make `expected <: actual`",168,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"eq_exp","","Make `expected <: actual`",168,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"eq","","Make `expected <: actual`",168,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"lub","","Compute the least-upper-bound, or mutual supertype, of two values. The order of the arguments doesn't matter, but since this can result in an error (e.g., if asked to compute LUB of u32 and i32), it is meaningful to call one of them the \"expected type\".",168,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"glb","","Compute the greatest-lower-bound, or mutual subtype, of two values. As with `lub` order doesn't matter, except for error cases.",168,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"trace","","Sets the \"trace\" values that will be used for error-reporting, but doesn't actually perform any operation yet (this is useful when you want to set the trace using distinct values from those you wish to operate upon).",168,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"trace"}}],[11,"trace_exp","","Like `trace`, but the expected value is determined by the boolean argument (if true, then the first argument `a` is the \"expected\" value).",168,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"t"},{"name":"t"}],"output":{"name":"trace"}}],[11,"sub","","Make `a <: b` where `a` may or may not be expected (if `a_is_expected` is true, then `a` is expected). Make `expected <: actual`",169,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"eq","","Make `a == b`; the expectation is set by the call to `trace()`.",169,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"lub","","",169,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"glb","","",169,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"super_combine_tys","rustc::infer","",160,{"inputs":[{"name":"self"},{"name":"r"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[0,"error_reporting","","Error Reporting Code for the inference engine",null,null],[11,"need_type_info","","",160,{"inputs":[{"name":"self"},{"name":"option"},{"name":"span"},{"name":"ty"}],"output":null}],[11,"try_report_named_anon_conflict","","",160,{"inputs":[{"name":"self"},{"name":"regionresolutionerror"}],"output":{"name":"bool"}}],[11,"find_arg_with_region","","",160,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":{"name":"option"}}],[11,"is_suitable_region","","",160,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"option"}}],[11,"is_return_type_anon","","",160,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"boundregion"},{"name":"fndecl"}],"output":{"name":"option"}}],[11,"is_self_anon","","",160,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_bound_region_in_impl_item","","",160,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_named_region","","",160,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"try_report_anon_anon_conflict","","",160,{"inputs":[{"name":"self"},{"name":"regionresolutionerror"}],"output":{"name":"bool"}}],[11,"find_anon_type","","This function calls the `visit_ty` method for the parameters corresponding to the anonymous regions. The `nested_visitor.found_type` contains the anonymous type.",160,{"inputs":[{"name":"self"},{"name":"region"},{"name":"boundregion"}],"output":{"name":"option"}}],[11,"report_region_errors","","",160,{"inputs":[{"name":"self"},{"name":"scopetree"},{"name":"vec"}],"output":null}],[11,"note_type_err","","",160,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"obligationcause"},{"name":"option"},{"name":"option"},{"name":"typeerror"}],"output":null}],[11,"report_and_explain_type_error","","",160,{"inputs":[{"name":"self"},{"name":"typetrace"},{"name":"typeerror"}],"output":{"name":"diagnosticbuilder"}}],[11,"fudge_regions_if_ok","","This rather funky routine is used while processing expected types. What happens here is that we want to propagate a coercion through the return type of a fn to its argument. Consider the type of `Option::Some`, which is basically `for<T> fn(T) -> Option<T>`. So if we have an expression `Some(&[1, 2, 3])`, and that has the expected type `Option<&[u32]>`, we would like to type check `&[1, 2, 3]` with the expectation of `&[u32]`. This will cause us to coerce from `&[u32; 3]` to `&[u32]` and make the users life more pleasant.",160,{"inputs":[{"name":"self"},{"name":"regionvariableorigin"},{"name":"f"}],"output":{"name":"result"}}],[11,"skolemize_late_bound_regions","","Replace all regions bound by `binder` with skolemized regions and return a map indicating which bound-region was replaced with what skolemized region. This is the first step of checking subtyping when higher-ranked things are involved.",160,null],[11,"leak_check","","Searches the region constraints created since `snapshot` was started and checks to determine whether any of the skolemized regions created in `skol_map` would \"escape\" -- meaning that they are related to other regions in some way. If so, the higher-ranked subtyping doesn't hold. See `README.md` for more details.",160,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"span"},{"name":"skolemizationmap"},{"name":"combinedsnapshot"}],"output":{"name":"relateresult"}}],[11,"plug_leaks","","This code converts from skolemized regions back to late-bound regions. It works by replacing each region in the taint set of a skolemized region with a bound-region. The bound region will be bound by the outer-most binder in `value`; the caller must ensure that there is such a binder and it is the right place.",160,{"inputs":[{"name":"self"},{"name":"skolemizationmap"},{"name":"combinedsnapshot"},{"name":"t"}],"output":{"name":"t"}}],[11,"pop_skolemized","","Pops the skolemized regions found in `skol_map` from the region inference context. Whenever you create skolemized regions via `skolemize_late_bound_regions`, they must be popped before you commit the enclosing snapshot (if you do not commit, e.g. within a probe or as a result of an error, then this is not necessary, as popping happens as part of the rollback).",160,{"inputs":[{"name":"self"},{"name":"skolemizationmap"},{"name":"combinedsnapshot"}],"output":null}],[0,"lattice","","Lattice Variables",null,null],[5,"super_lattice_tys","rustc::infer::lattice","",null,{"inputs":[{"name":"l"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[8,"LatticeDir","","",null,null],[10,"infcx","","",170,{"inputs":[{"name":"self"}],"output":{"name":"inferctxt"}}],[10,"cause","","",170,{"inputs":[{"name":"self"}],"output":{"name":"obligationcause"}}],[10,"relate_bound","","",170,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[0,"region_inference","rustc::infer","See README.md",null,null],[3,"Verify","rustc::infer::region_inference","VerifyGenericBound(T, _, R, RS): The parameter type `T` (or associated type) must outlive the region `R`. `T` is known to outlive `RS`. Therefore verify that `R <= RS[i]` for some `i`. Inference variables may be involved (but this verification step doesn't influence inference).",null,null],[3,"TwoRegions","","",null,null],[3,"RegionVarBindings","","",null,null],[3,"RegionSnapshot","","",null,null],[3,"TaintDirections","","When working with skolemized regions, we often wish to find all of the regions that are either reachable from a skolemized region, or which can reach a skolemized region, or both. We call such regions tained regions.  This struct allows you to decide what set of tainted regions you want.",null,null],[4,"Constraint","","A constraint that influences the inference process.",null,null],[13,"ConstrainVarSubVar","","One region variable is subregion of another",171,null],[13,"ConstrainRegSubVar","","Concrete region is subregion of region variable",171,null],[13,"ConstrainVarSubReg","","Region variable is subregion of concrete region. This does not directly affect inference, but instead is checked after inference is complete.",171,null],[13,"ConstrainRegSubReg","","A constraint where neither side is a variable. This does not directly affect inference, but instead is checked after inference is complete.",171,null],[4,"GenericKind","","",null,null],[13,"Param","","",172,null],[13,"Projection","","",172,null],[4,"VerifyBound","","When we introduce a verification step, we wish to test that a particular region (let's call it `'min`) meets some bound. The bound is described the by the following grammar:",null,null],[13,"AnyRegion","","B = exists {R} --> some 'r in {R} must outlive 'min",173,null],[13,"AllRegions","","B = forall {R} --> all 'r in {R} must outlive 'min",173,null],[13,"AnyBound","","B = exists {B} --> 'min must meet some bound b in {B}",173,null],[13,"AllBounds","","B = forall {B} --> 'min must meet all bounds b in {B}",173,null],[4,"UndoLogEntry","","",null,null],[13,"OpenSnapshot","","Pushed when we start a snapshot.",174,null],[13,"CommitedSnapshot","","Replaces an `OpenSnapshot` when a snapshot is committed, but that snapshot is not the root. If the root snapshot is unrolled, all nested snapshots must be committed.",174,null],[13,"AddVar","","We added `RegionVid`",174,null],[13,"AddConstraint","","We added the given `constraint`",174,null],[13,"AddVerify","","We added the given `verify`",174,null],[13,"AddGiven","","We added the given `given`",174,null],[13,"AddCombination","","We added a GLB/LUB \"combination variable\"",174,null],[13,"Purged","","During skolemization, we sometimes purge entries from the undo log in a kind of minisnapshot (unlike other snapshots, this purging actually takes place on success). In that case, we replace the corresponding entry with `Noop` so as to avoid the need to do a bunch of swapping. (We can't use `swap_remove` as the order of the vector is important.)",174,null],[4,"CombineMapType","","",null,null],[13,"Lub","","",175,null],[13,"Glb","","",175,null],[4,"RegionResolutionError","","",null,null],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",176,null],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a)",176,null],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",176,null],[4,"ProcessedErrorOrigin","","",null,null],[13,"ConcreteFailure","","",177,null],[13,"VariableFailure","","",177,null],[4,"VarValue","","",null,null],[13,"Value","","",178,null],[13,"ErrorValue","","",178,null],[6,"CombineMap","","",null,null],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"constraint"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"bool"}}],[11,"hash","","",171,null],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"generickind"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"generickind"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"generickind"}],"output":{"name":"bool"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"tworegions"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"tworegions"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"tworegions"}],"output":{"name":"bool"}}],[11,"hash","","",180,null],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"undologentry"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"undologentry"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"undologentry"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"combinemaptype"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"combinemaptype"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"regionresolutionerror"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"processederrororigin"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"incoming","","",181,{"inputs":[],"output":{"name":"self"}}],[11,"outgoing","","",181,{"inputs":[],"output":{"name":"self"}}],[11,"both","","",181,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",182,{"inputs":[{"name":"tyctxt"}],"output":{"name":"regionvarbindings"}}],[11,"start_snapshot","","",182,{"inputs":[{"name":"self"}],"output":{"name":"regionsnapshot"}}],[11,"commit","","",182,{"inputs":[{"name":"self"},{"name":"regionsnapshot"}],"output":null}],[11,"rollback_to","","",182,{"inputs":[{"name":"self"},{"name":"regionsnapshot"}],"output":null}],[11,"rollback_undo_entry","","",182,{"inputs":[{"name":"self"},{"name":"undologentry"}],"output":null}],[11,"num_vars","","",182,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new_region_var","","",182,{"inputs":[{"name":"self"},{"name":"regionvariableorigin"}],"output":{"name":"regionvid"}}],[11,"var_origin","","",182,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"regionvariableorigin"}}],[11,"push_skolemized","","Creates a new skolemized region. Skolemized regions are fresh regions used when performing higher-ranked computations. They must be used in a very particular way and are never supposed to \"escape\" out into error messages or the code at large.",182,{"inputs":[{"name":"self"},{"name":"boundregion"},{"name":"regionsnapshot"}],"output":{"name":"region"}}],[11,"pop_skolemized","","Removes all the edges to/from the skolemized regions that are in `skols`. This is used after a higher-ranked operation completes to remove all trace of the skolemized regions created in that time.",182,{"inputs":[{"name":"self"},{"name":"fxhashset"},{"name":"regionsnapshot"}],"output":null}],[11,"new_bound","","",182,{"inputs":[{"name":"self"},{"name":"debruijnindex"}],"output":{"name":"region"}}],[11,"add_given","","",182,{"inputs":[{"name":"self"},{"name":"region"},{"name":"regionvid"}],"output":null}],[11,"make_eqregion","","",182,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":null}],[11,"make_subregion","","",182,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":null}],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",182,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"generickind"},{"name":"region"},{"name":"verifybound"}],"output":null}],[11,"lub_regions","","",182,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":{"name":"region"}}],[11,"glb_regions","","",182,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":{"name":"region"}}],[11,"resolve_var","","",182,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"region"}}],[11,"opportunistic_resolve_var","","",182,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"region"}}],[11,"combine_vars","","",182,{"inputs":[{"name":"self"},{"name":"combinemaptype"},{"name":"region"},{"name":"region"},{"name":"subregionorigin"},{"name":"f"}],"output":{"name":"region"}}],[11,"vars_created_since_snapshot","","",182,{"inputs":[{"name":"self"},{"name":"regionsnapshot"}],"output":{"name":"vec"}}],[11,"tainted","","Computes all regions that have been related to `r0` since the mark `mark` was made---`r0` itself will be the first entry. The `directions` parameter controls what kind of relations are considered. For example, one can say that only \"incoming\" edges to `r0` are desired, in which case one will get the set of regions `{r|r <= r0}`. This is used when checking whether skolemized regions are being improperly related to other regions.",182,{"inputs":[{"name":"self"},{"name":"regionsnapshot"},{"name":"region"},{"name":"taintdirections"}],"output":{"name":"fxhashset"}}],[11,"resolve_regions","","This function performs the actual region resolution.  It must be called after all constraints have been added.  It performs a fixed-point iteration to find region values which satisfy all constraints, assuming such values can be found; if they cannot, errors are reported.",182,{"inputs":[{"name":"self"},{"name":"regionrelations"}],"output":{"name":"vec"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"varvalue"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_ty","","",172,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"must_hold","","",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_hold","","",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"or","","",173,{"inputs":[{"name":"self"},{"name":"verifybound"}],"output":{"name":"verifybound"}}],[11,"and","","",173,{"inputs":[{"name":"self"},{"name":"verifybound"}],"output":{"name":"verifybound"}}],[0,"resolve","rustc::infer","",null,null],[3,"OpportunisticTypeResolver","rustc::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces type variables that have been unified with the things they have been unified with (similar to `shallow_resolve`, but deep). This is useful for printing messages etc but also required at various points for correctness.",null,null],[3,"OpportunisticTypeAndRegionResolver","","The opportunistic type and region resolver is similar to the opportunistic type resolver, but also opportunistically resolves regions. It is useful for canonicalization.",null,null],[3,"UnresolvedTypeFinder","","The unresolved type finder walks your type and searches for type variables that don't yet have a value. They get pushed into a vector. It does not construct the fully resolved type (which might involve some hashing and so forth).",null,null],[5,"fully_resolve","","Full type resolution replaces all type and region variables with their concrete results. If any variable cannot be replaced (never unified, etc) then an `Err` result is returned.",null,{"inputs":[{"name":"inferctxt"},{"name":"t"}],"output":{"name":"fixupresult"}}],[11,"new","","",184,{"inputs":[{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"tcx","","",184,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_ty","","",184,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"new","","",185,{"inputs":[{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"tcx","","",185,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_ty","","",185,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"fold_region","","",185,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"region"}}],[11,"new","","",186,{"inputs":[{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"visit_ty","","",186,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"new","rustc::infer","",187,{"inputs":[{"name":"inferctxt"}],"output":{"name":"typefreshener"}}],[11,"tcx","","",187,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_region","","",187,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"region"}}],[11,"fold_ty","","",187,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[0,"type_variable","","",null,null],[3,"TypeVariableTable","rustc::infer::type_variable","",null,null],[3,"Default","","",null,null],[12,"ty","","",188,null],[12,"origin_span","","The span where the default was incurred",188,null],[12,"def_id","","The definition that the default originates from",188,null],[3,"Snapshot","","",null,null],[4,"TypeVariableOrigin","","Reasons to create a type inference variable",null,null],[13,"MiscVariable","","",189,null],[13,"NormalizeProjectionType","","",189,null],[13,"TypeInference","","",189,null],[13,"TypeParameterDefinition","","",189,null],[13,"TransformedUpvar","","",189,null],[13,"SubstitutionPlaceholder","","",189,null],[13,"AutoDeref","","",189,null],[13,"AdjustmentType","","",189,null],[13,"DivergingStmt","","",189,null],[13,"DivergingBlockExpr","","",189,null],[13,"DivergingFn","","",189,null],[13,"LatticeVariable","","",189,null],[13,"Generalized","","",189,null],[6,"TypeVariableMap","","",null,null],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"typevariableorigin"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"hash","","",188,null],[11,"new","","",190,{"inputs":[],"output":{"name":"typevariabletable"}}],[11,"default","","",190,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"option"}}],[11,"var_diverges","","",190,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"bool"}}],[11,"var_origin","","",190,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"typevariableorigin"}}],[11,"equate","","Records that `a == b`, depending on `dir`.",190,{"inputs":[{"name":"self"},{"name":"tyvid"},{"name":"tyvid"}],"output":null}],[11,"sub","","Records that `a <: b`, depending on `dir`.",190,{"inputs":[{"name":"self"},{"name":"tyvid"},{"name":"tyvid"}],"output":null}],[11,"instantiate","","Instantiates `vid` with the type `ty`.",190,{"inputs":[{"name":"self"},{"name":"tyvid"},{"name":"ty"}],"output":null}],[11,"new_var","","",190,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"typevariableorigin"},{"name":"option"}],"output":{"name":"tyvid"}}],[11,"num_vars","","",190,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"root_var","","Returns the \"root\" variable of `vid` in the `eq_relations` equivalence table. All type variables that have been equated will yield the same root variable (per the union-find algorithm), so `root_var(a) == root_var(b)` implies that `a == b` (transitively).",190,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"tyvid"}}],[11,"sub_root_var","","Returns the \"root\" variable of `vid` in the `sub_relations` equivalence table. All type variables that have been are related via equality or subtyping will yield the same root variable (per the union-find algorithm), so `sub_root_var(a) == sub_root_var(b)` implies that:",190,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"tyvid"}}],[11,"sub_unified","","True if `a` and `b` have same \"sub-root\" (i.e., exists some type X such that `forall i in {a, b}. (i <: X || X <: i)`.",190,{"inputs":[{"name":"self"},{"name":"tyvid"},{"name":"tyvid"}],"output":{"name":"bool"}}],[11,"probe","","",190,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"option"}}],[11,"origin","","",190,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"typevariableorigin"}}],[11,"probe_root","","Retrieves the type of `vid` given that it is currently a root in the unification table",190,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"option"}}],[11,"replace_if_possible","","",190,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"snapshot","","",190,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"rollback_to","","",190,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","",190,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"types_created_since_snapshot","","Returns a map `{V1 -> V2}`, where the keys `{V1}` are ty-variables created during the snapshot, and the values `{V2}` are the root variables that they were unified with, along with their origin.",190,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":{"name":"typevariablemap"}}],[11,"types_escaping_snapshot","","Find the set of type variables that existed before `s` but which have only been unified since `s` started, and return the types with which they were unified. So if we had a type variable `V0`, then we started the snapshot, then we created a type variable `V1`, unifed `V0` with `T0`, and unified `V1` with `T1`, this function would return `{T0}`.",190,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":{"name":"vec"}}],[11,"unsolved_variables","","",190,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"unify_key","rustc::infer","",null,null],[3,"RegionVidKey","rustc::infer::unify_key","",null,null],[12,"min_vid","","The minimum region vid in the unification set. This is needed to have a canonical name for a type to prevent infinite recursion.",191,null],[8,"ToType","","",null,null],[10,"to_type","","",192,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"regionvidkey"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"regionvidkey"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"regionvidkey"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"combine","","",191,{"inputs":[{"name":"self"},{"name":"regionvidkey"}],"output":{"name":"regionvidkey"}}],[6,"InferResult","rustc::infer","",null,null],[6,"Bound","","",null,null],[6,"UnitResult","","",null,null],[6,"FixupResult","","",null,null],[6,"SkolemizationMap","","A map returned by `skolemize_late_bound_regions()` indicating the skolemized region that each late-bound region was replaced with.",null,null],[8,"TransNormalize","","Helper trait for shortening the lifetimes inside a value for post-type-checking normalization.",null,null],[10,"trans_normalize","","",193,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"}],"output":{"name":"self"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"valuepairs"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"typetrace"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"subregionorigin"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"parameterorigin"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"lateboundregionconversiontime"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"regionvariableorigin"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"fixuperror"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_fresh_in_progress_tables","","Used only by `rustc_typeck` during body type-checking/inference, will initialize `in_progress_tables` with fresh `TypeckTables`.",195,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"self"}}],[11,"enter","","",195,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"unit","","",159,{"inputs":[{"name":"self"}],"output":{"name":"inferok"}}],[11,"drain_fulfillment_cx_or_panic","","Finishes processes any obligations that remain in the fulfillment context, and then returns the result with all type variables removed and regions erased. Because this is intended for use after type-check has completed, if any errors occur, it will panic. It is used during normalization and other cases where processing the obligations in `fulfill_cx` may cause type inference variables that appear in `result` to be unified, and hence we need to process those obligations to get the complete picture of the type.",160,null],[11,"is_in_snapshot","","",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"freshen","","",160,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"type_var_diverges","","",160,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"freshener","","",160,{"inputs":[{"name":"self"}],"output":{"name":"typefreshener"}}],[11,"type_is_unconstrained_numeric","","",160,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"unconstrainednumeric"}}],[11,"default","","Returns a type variable's default fallback if any exists. A default must be attached to the variable when created, if it is created without a default, this will return None.",160,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"option"}}],[11,"unsolved_variables","","",160,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"save_and_restore_in_snapshot_flag","","",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"commit_unconditionally","","Execute `f` and commit the bindings",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"commit_if_ok","","Execute `f` and commit the bindings if closure `f` returns `Ok(_)`",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"in_snapshot","","",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"probe","","Execute `f` then unroll any bindings it creates",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"add_given","","",160,{"inputs":[{"name":"self"},{"name":"region"},{"name":"regionvid"}],"output":null}],[11,"can_sub","","",160,{"inputs":[{"name":"self"},{"name":"paramenv"},{"name":"t"},{"name":"t"}],"output":{"name":"unitresult"}}],[11,"can_eq","","",160,{"inputs":[{"name":"self"},{"name":"paramenv"},{"name":"t"},{"name":"t"}],"output":{"name":"unitresult"}}],[11,"sub_regions","","",160,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":null}],[11,"equality_predicate","","",160,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"paramenv"},{"name":"polyequatepredicate"}],"output":{"name":"inferresult"}}],[11,"subtype_predicate","","",160,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"paramenv"},{"name":"polysubtypepredicate"}],"output":{"name":"option"}}],[11,"region_outlives_predicate","","",160,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"polyregionoutlivespredicate"}],"output":{"name":"unitresult"}}],[11,"next_ty_var_id","","",160,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"typevariableorigin"}],"output":{"name":"tyvid"}}],[11,"next_ty_var","","",160,{"inputs":[{"name":"self"},{"name":"typevariableorigin"}],"output":{"name":"ty"}}],[11,"next_diverging_ty_var","","",160,{"inputs":[{"name":"self"},{"name":"typevariableorigin"}],"output":{"name":"ty"}}],[11,"next_int_var_id","","",160,{"inputs":[{"name":"self"}],"output":{"name":"intvid"}}],[11,"next_float_var_id","","",160,{"inputs":[{"name":"self"}],"output":{"name":"floatvid"}}],[11,"next_region_var","","",160,{"inputs":[{"name":"self"},{"name":"regionvariableorigin"}],"output":{"name":"region"}}],[11,"region_var_for_def","","Create a region inference variable for the given region parameter definition.",160,{"inputs":[{"name":"self"},{"name":"span"},{"name":"regionparameterdef"}],"output":{"name":"region"}}],[11,"type_var_for_def","","Create a type inference variable for the given type parameter definition. The substitutions are for actual parameters that may be referred to by the default of this type parameter, if it exists. E.g. `struct Foo<A, B, C = (A, B)>(...);` when used in a path such as `Foo::<T, U>::new()` will use an inference variable for `C` with `[T, U]` as the substitutions for the default, `(T, U)`.",160,null],[11,"fresh_substs_for_item","","Given a set of generics defined on a type or impl, returns a substitution mapping each type/region parameter to a fresh inference variable.",160,{"inputs":[{"name":"self"},{"name":"span"},{"name":"defid"}],"output":{"name":"substs"}}],[11,"fresh_bound_region","","",160,{"inputs":[{"name":"self"},{"name":"debruijnindex"}],"output":{"name":"region"}}],[11,"is_tainted_by_errors","","True if errors have been reported since this infcx was created.  This is sometimes used as a heuristic to skip reporting errors that often occur as a result of earlier errors, but where it's hard to be 100% sure (e.g., unresolved inference variables, regionck errors).",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tainted_by_errors","","Set the \"tainted by errors\" flag to true. We call this when we observe an error from a prior pass.",160,{"inputs":[{"name":"self"}],"output":null}],[11,"resolve_regions_and_report_errors","","",160,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"scopetree"},{"name":"freeregionmap"}],"output":null}],[11,"ty_to_string","","",160,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"string"}}],[11,"tys_to_string","","",160,null],[11,"trait_ref_to_string","","",160,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"string"}}],[11,"shallow_resolve","","",160,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in `value` with their final value. Note that region variables are unaffected. If a type variable has not been unified, it is left as is.  This is an idempotent operation that does not affect inference state in any way and so you can do it at will.",160,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"any_unresolved_type_vars","","Returns true if `T` contains unresolved type variables. In the process of visiting `T`, this will resolve (where possible) type variables in `T`, but it never constructs the final, resolved type, so it's more efficient than `resolve_type_vars_if_possible()`.",160,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"resolve_type_and_region_vars_if_possible","","",160,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"fully_resolve","","Attempts to resolve all type/region variables in `value`. Region inference must have been run already (e.g., by calling `resolve_regions_and_report_errors`).  If some variable was never unified, an `Err` results.",160,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"fixupresult"}}],[11,"type_error_struct_with_diag","","",160,{"inputs":[{"name":"self"},{"name":"span"},{"name":"m"},{"name":"ty"}],"output":{"name":"diagnosticbuilder"}}],[11,"report_mismatched_types","","",160,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"ty"},{"name":"ty"},{"name":"typeerror"}],"output":{"name":"diagnosticbuilder"}}],[11,"report_conflicting_default_types","","",160,{"inputs":[{"name":"self"},{"name":"span"},{"name":"nodeid"},{"name":"default"},{"name":"default"}],"output":null}],[11,"replace_late_bound_regions_with_fresh_var","","",160,null],[11,"match_poly_projection_predicate","","Given a higher-ranked projection predicate like:",160,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"paramenv"},{"name":"polyprojectionpredicate"},{"name":"traitref"}],"output":{"name":"inferresult"}}],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",160,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"generickind"},{"name":"region"},{"name":"verifybound"}],"output":null}],[11,"type_moves_by_default","","",160,{"inputs":[{"name":"self"},{"name":"paramenv"},{"name":"ty"},{"name":"span"}],"output":{"name":"bool"}}],[11,"closure_kind","","",160,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"fn_sig","","Obtain the signature of a function or closure. For closures, unlike `tcx.fn_sig(def_id)`, this method will work during the type-checking of the enclosing function and return the closure signature in its partially inferred state.",160,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"polyfnsig"}}],[11,"generator_sig","","",160,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"span","","",194,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"types","","",194,{"inputs":[{"name":"obligationcause"},{"name":"bool"},{"name":"ty"},{"name":"ty"}],"output":{"name":"typetrace"}}],[11,"dummy","","",194,{"inputs":[{"name":"tyctxt"}],"output":{"name":"typetrace"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",162,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"from_obligation_cause","","",162,{"inputs":[{"name":"obligationcause"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",165,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"super_fold_with","","",161,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",161,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",194,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",194,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[0,"lint","rustc","Lints, aka compiler warnings.",null,null],[3,"LateContext","rustc::lint","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we're checking in.",196,null],[12,"tables","","Side-tables for the body we are in.",196,null],[12,"param_env","","Parameter environment for the item we are in.",196,null],[12,"access_levels","","Items accessible from the crate being checked.",196,null],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to HIR.",null,null],[12,"sess","","Type context we're checking in.",197,null],[12,"krate","","The crate being checked.",197,null],[3,"LintStore","","Information about the registered lints.",null,null],[3,"FutureIncompatibleInfo","","Extra information for a future incompatibility lint. See the call to `register_future_incompatible` in `librustc_lint/lib.rs` for guidelines.",null,null],[12,"id","","",198,null],[12,"reference","","",198,null],[3,"BufferedEarlyLint","","Lints that are buffered up early on in the `Session` before the `LintLevels` is calculated",null,null],[12,"lint_id","","",199,null],[12,"ast_id","","",199,null],[12,"span","","",199,null],[12,"msg","","",199,null],[3,"Lint","","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",200,null],[12,"default_level","","Default level for the lint.",200,null],[12,"desc","","Description of the lint or the issue it detects.",200,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[3,"LintLevelSets","","",null,null],[3,"LintLevelMap","","",null,null],[3,"LintBuffer","","",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",201,null],[13,"Warn","","",201,null],[13,"Deny","","",201,null],[13,"Forbid","","",201,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared in rustc or a plugin.",202,null],[13,"Node","","Lint level was set by an attribute.",202,null],[13,"CommandLine","","Lint level was set by a command-line flag.",202,null],[5,"check_crate","","Perform lint checking on a crate.",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"check_ast_crate","","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[5,"struct_lint_level","","",null,{"inputs":[{"name":"session"},{"name":"lint"},{"name":"level"},{"name":"lintsource"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[3,"HardwiredLints","rustc::lint::builtin","Does nothing as a lint pass, but registers some `Lint`s which are used by other parts of the compiler.",null,null],[7,"CONST_ERR","","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"UNREACHABLE_PATTERNS","","",null,null],[7,"UNUSED_MACROS","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"PUB_USE_OF_PRIVATE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"RESOLVE_TRAIT_ON_DEFAULTED_UNIT","","",null,null],[7,"SAFE_EXTERN_STATICS","","",null,null],[7,"PATTERNS_IN_FNS_WITHOUT_BODY","","",null,null],[7,"EXTRA_REQUIREMENT_IN_IMPL","","",null,null],[7,"LEGACY_DIRECTORY_OWNERSHIP","","",null,null],[7,"LEGACY_IMPORTS","","",null,null],[7,"LEGACY_CONSTRUCTOR_VISIBILITY","","",null,null],[7,"MISSING_FRAGMENT_SPECIFIER","","",null,null],[7,"PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES","","",null,null],[7,"LATE_BOUND_LIFETIME_ARGUMENTS","","",null,null],[7,"DEPRECATED","","",null,null],[7,"UNUSED_UNSAFE","","",null,null],[7,"UNUSED_MUT","","",null,null],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"hardwiredlints"}}],[11,"get_lints","","",203,{"inputs":[{"name":"self"}],"output":{"name":"lintarray"}}],[11,"eq","rustc::lint","",199,{"inputs":[{"name":"self"},{"name":"bufferedearlylint"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"self"},{"name":"bufferedearlylint"}],"output":{"name":"bool"}}],[11,"encode","","",199,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",199,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",204,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",204,null],[11,"get_lint_groups","","",204,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_early_pass","","",204,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bool"},{"name":"earlylintpassobject"}],"output":null}],[11,"register_late_pass","","",204,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bool"},{"name":"latelintpassobject"}],"output":null}],[11,"register_future_incompatible","","",204,{"inputs":[{"name":"self"},{"name":"option"},{"name":"vec"}],"output":null}],[11,"future_incompatible","","",204,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"option"}}],[11,"register_group","","",204,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bool"},{"name":"str"},{"name":"vec"}],"output":null}],[11,"register_renamed","","",204,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"register_removed","","",204,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"find_lints","","",204,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"check_lint_name_cmdline","","Checks the validity of lint names derived from the command line",204,{"inputs":[{"name":"self"},{"name":"session"},{"name":"str"},{"name":"level"}],"output":null}],[11,"check_lint_name","","Checks the name of a lint for its existence, and whether it was renamed or removed. Generates a DiagnosticBuilder containing a warning for renamed and removed lints. This is over both lint names from attributes and those passed on the command line. Since it emits non-fatal warnings and there are two lint passes that inspect attributes, this is only run from the late pass to avoid printing duplicate warnings.",204,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"checklintnameresult"}}],[11,"sess","","Get the overall compiler `Session` object.",196,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",196,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"lint_sess","","",196,{"inputs":[{"name":"self"}],"output":{"name":"lintsession"}}],[11,"lint_sess_mut","","",196,{"inputs":[{"name":"self"}],"output":{"name":"lintsession"}}],[11,"enter_attrs","","",196,null],[11,"exit_attrs","","",196,null],[11,"lookup","","",196,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"with_lint_attrs","","",196,null],[11,"sess","","Get the overall compiler `Session` object.",197,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",197,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"lint_sess","","",197,{"inputs":[{"name":"self"}],"output":{"name":"lintsession"}}],[11,"lint_sess_mut","","",197,{"inputs":[{"name":"self"}],"output":{"name":"lintsession"}}],[11,"enter_attrs","","",197,null],[11,"exit_attrs","","",197,null],[11,"lookup","","",197,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"with_lint_attrs","","",197,null],[11,"nested_visit_map","","Because lints are scoped lexically, we want to walk nested items in the context of the outer item, so enable deep-walking.",196,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_nested_body","","",196,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":null}],[11,"visit_body","","",196,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"visit_item","","",196,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_foreign_item","","",196,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_pat","","",196,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",196,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_stmt","","",196,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_fn","","",196,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"bodyid"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_variant_data","","",196,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"name"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",196,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_variant","","",196,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_ty","","",196,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_name","","",196,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_mod","","",196,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_local","","",196,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",196,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_arm","","",196,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_decl","","",196,{"inputs":[{"name":"self"},{"name":"decl"}],"output":null}],[11,"visit_generics","","",196,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_trait_item","","",196,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",196,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_lifetime","","",196,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",196,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",196,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_attribute","","",196,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_item","","",197,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_foreign_item","","",197,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_pat","","",197,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",197,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_stmt","","",197,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_fn","","",197,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_variant_data","","",197,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",197,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_variant","","",197,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_ty","","",197,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_ident","","",197,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",197,null],[11,"visit_local","","",197,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",197,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_arm","","",197,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_expr_post","","",197,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_generics","","",197,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_trait_item","","",197,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",197,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_lifetime","","",197,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",197,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",197,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",197,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_attribute","","",197,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_mac_def","","",197,{"inputs":[{"name":"self"},{"name":"macrodef"},{"name":"nodeid"}],"output":null}],[11,"encode","","",205,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",205,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","",206,{"inputs":[{"name":"session"}],"output":{"name":"lintlevelsets"}}],[11,"builder","","",206,{"inputs":[{"name":"session"}],"output":{"name":"lintlevelsbuilder"}}],[11,"level_and_source","","If the `id` was previously registered with `register_id` when building this `LintLevelMap` this returns the corresponding lint level and source of the lint level for the lint provided.",207,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"hirid"}],"output":{"name":"option"}}],[11,"lint_level_set","","Returns if this `id` has lint level information.",207,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"option"}}],[11,"hash_stable","","",207,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",205,{"inputs":[{"name":"self"},{"name":"hcx"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",205,{"inputs":[{"name":"self"},{"name":"hcx"}],"output":{"name":"str"}}],[6,"LintArray","","",null,null],[6,"EarlyLintPassObject","","A lint pass boxed up as a trait object.",null,null],[6,"LateLintPassObject","","",null,null],[6,"LevelSource","","",null,null],[8,"LintContext","","",null,null],[16,"PassObject","","",208,null],[10,"sess","","",208,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[10,"lints","","",208,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"lint_sess","","",208,{"inputs":[{"name":"self"}],"output":{"name":"lintsession"}}],[10,"lint_sess_mut","","",208,{"inputs":[{"name":"self"}],"output":{"name":"lintsession"}}],[10,"enter_attrs","","",208,null],[10,"exit_attrs","","",208,null],[11,"lookup_and_emit","","",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":null}],[10,"lookup","","",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":null}],[11,"struct_span_lint","","",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"str"}],"output":null}],[10,"with_lint_attrs","","Merge the lints specified by any lint attributes into the current lint context, call the provided function, then reset the lints in effect to their previous state.",208,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",209,{"inputs":[{"name":"self"}],"output":{"name":"lintarray"}}],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_body","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"body"}],"output":null}],[11,"check_body_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"body"}],"output":null}],[11,"check_name","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"span"},{"name":"name"}],"output":null}],[11,"check_crate","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"crate"}],"output":null}],[11,"check_crate_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"crate"}],"output":null}],[11,"check_mod","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_mod_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_foreign_item","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"foreignitem"}],"output":null}],[11,"check_foreign_item_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"foreignitem"}],"output":null}],[11,"check_item","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_item_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_local","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"local"}],"output":null}],[11,"check_block","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"block"}],"output":null}],[11,"check_block_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"block"}],"output":null}],[11,"check_stmt","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[11,"check_arm","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"arm"}],"output":null}],[11,"check_pat","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"pat"}],"output":null}],[11,"check_decl","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"decl"}],"output":null}],[11,"check_expr","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_expr_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_ty","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"ty"}],"output":null}],[11,"check_generics","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"generics"}],"output":null}],[11,"check_fn","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"body"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_fn_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"body"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_trait_item","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[11,"check_trait_item_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[11,"check_impl_item","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_impl_item_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_struct_def","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"variantdata"},{"name":"name"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"check_struct_def_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"variantdata"},{"name":"name"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"check_struct_field","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"structfield"}],"output":null}],[11,"check_variant","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"check_variant_post","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"check_lifetime","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"lifetime"}],"output":null}],[11,"check_lifetime_def","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"lifetimedef"}],"output":null}],[11,"check_path","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"check_attribute","","",210,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"attribute"}],"output":null}],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with all the attributes of that node.",210,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",210,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"check_crate","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"crate"}],"output":null}],[11,"check_crate_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"crate"}],"output":null}],[11,"check_mod","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_mod_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_foreign_item","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"foreignitem"}],"output":null}],[11,"check_foreign_item_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"foreignitem"}],"output":null}],[11,"check_item","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"item"}],"output":null}],[11,"check_item_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"item"}],"output":null}],[11,"check_local","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"local"}],"output":null}],[11,"check_block","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[11,"check_block_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[11,"check_stmt","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"stmt"}],"output":null}],[11,"check_arm","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"arm"}],"output":null}],[11,"check_pat","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"pat"}],"output":null}],[11,"check_expr","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[11,"check_expr_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[11,"check_ty","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"ty"}],"output":null}],[11,"check_generics","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"generics"}],"output":null}],[11,"check_fn","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_fn_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_trait_item","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"traititem"}],"output":null}],[11,"check_trait_item_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"traititem"}],"output":null}],[11,"check_impl_item","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"implitem"}],"output":null}],[11,"check_impl_item_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"implitem"}],"output":null}],[11,"check_struct_def","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"check_struct_def_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"check_struct_field","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"structfield"}],"output":null}],[11,"check_variant","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"check_variant_post","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"check_lifetime","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"lifetime"}],"output":null}],[11,"check_lifetime_def","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"lifetimedef"}],"output":null}],[11,"check_path","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"check_path_list_item","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"pathlistitem"}],"output":null}],[11,"check_attribute","","",211,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"attribute"}],"output":null}],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with all the attributes of that node.",211,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",211,null],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"lint"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",200,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"lintid"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"bool"}}],[11,"hash","","",205,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"of","","Get the `LintId` for a `Lint`.",205,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"lint_name_raw","","",205,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_string","","Get the name of the lint.",205,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",201,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"cmp","","",201,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",201,null],[11,"hash_stable","","",201,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"as_str","","Convert a level to a lower-case string.",201,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","Convert a lower-case string to a level.",201,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"lintsource"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"hash_stable","","",202,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"new","","",212,{"inputs":[],"output":{"name":"lintbuffer"}}],[11,"add_lint","","",212,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"multispan"},{"name":"str"}],"output":null}],[11,"take","","",212,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"vec"}}],[11,"get_any","","",212,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"middle","rustc","",null,null],[0,"allocator","rustc::middle","",null,null],[4,"AllocatorKind","rustc::middle::allocator","",null,null],[13,"Global","","",213,null],[13,"DefaultLib","","",213,null],[13,"DefaultExe","","",213,null],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"allocatorkind"}}],[11,"fn_name","","",213,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[0,"borrowck","rustc::middle","",null,null],[3,"BorrowCheckResult","rustc::middle::borrowck","",null,null],[12,"used_mut_nodes","","",214,null],[11,"hash_stable","","",214,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[0,"expr_use_visitor","rustc::middle","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[3,"ExprUseVisitor","rustc::middle::expr_use_visitor","",null,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",215,null],[13,"AddrOf","","",215,null],[13,"AutoRef","","",215,null],[13,"AutoUnsafe","","",215,null],[13,"RefBinding","","",215,null],[13,"OverloadedOperator","","",215,null],[13,"ClosureInvocation","","",215,null],[13,"ForLoop","","",215,null],[13,"MatchDiscriminant","","",215,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",216,null],[13,"Move","","",216,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",217,null],[13,"PatBindingMove","","",217,null],[13,"CaptureMove","","",217,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",218,null],[13,"BorrowingMatch","","",218,null],[13,"CopyingMatch","","",218,null],[13,"MovingMatch","","",218,null],[4,"MutateMode","","",null,null],[13,"Init","","",219,null],[13,"JustWrite","","",219,null],[13,"WriteAndRead","","",219,null],[8,"Delegate","","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",220,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"cmt"},{"name":"consumemode"}],"output":null}],[10,"matched_pat","","",220,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"cmt"},{"name":"matchmode"}],"output":null}],[10,"consume_pat","","",220,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"cmt"},{"name":"consumemode"}],"output":null}],[10,"borrow","","",220,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"cmt"},{"name":"region"},{"name":"borrowkind"},{"name":"loancause"}],"output":null}],[10,"decl_without_init","","",220,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"}],"output":null}],[10,"mutate","","",220,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"cmt"},{"name":"mutatemode"}],"output":null}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",216,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates the ExprUseVisitor, configuring it with the various options provided:",221,{"inputs":[{"name":"delegate"},{"name":"tyctxt"},{"name":"paramenv"},{"name":"scopetree"},{"name":"typecktables"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_infer","","",221,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"paramenv"},{"name":"scopetree"},{"name":"typecktables"}],"output":{"name":"self"}}],[11,"consume_body","","",221,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"consume_expr","","",221,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"walk_expr","","",221,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[0,"const_val","rustc::middle","",null,null],[4,"ConstInt","rustc::middle::const_val","",null,null],[13,"I8","","",222,null],[13,"I16","","",222,null],[13,"I32","","",222,null],[13,"I64","","",222,null],[13,"I128","","",222,null],[13,"Isize","","",222,null],[13,"U8","","",222,null],[13,"U16","","",222,null],[13,"U32","","",222,null],[13,"U64","","",222,null],[13,"U128","","",222,null],[13,"Usize","","",222,null],[3,"ByteArray","","",null,null],[12,"data","","",223,null],[3,"ConstEvalErr","","",null,null],[12,"span","","",224,null],[12,"kind","","",224,null],[4,"ConstVal","","",null,null],[13,"Integral","","",225,null],[13,"Float","","",225,null],[13,"Str","","",225,null],[13,"ByteStr","","",225,null],[13,"Bool","","",225,null],[13,"Char","","",225,null],[13,"Variant","","",225,null],[13,"Function","","",225,null],[13,"Aggregate","","",225,null],[13,"Unevaluated","","",225,null],[4,"ConstAggregate","","",null,null],[13,"Struct","","",226,null],[13,"Tuple","","",226,null],[13,"Array","","",226,null],[13,"Repeat","","",226,null],[4,"ErrKind","","",null,null],[13,"CannotCast","","",227,null],[13,"MissingStructField","","",227,null],[13,"NonConstPath","","",227,null],[13,"UnimplementedConstVal","","",227,null],[13,"ExpectedConstTuple","","",227,null],[13,"ExpectedConstStruct","","",227,null],[13,"IndexedNonVec","","",227,null],[13,"IndexNotUsize","","",227,null],[13,"IndexOutOfBounds","","",227,null],[12,"len","rustc::middle::const_val::ErrKind","",227,null],[12,"index","","",227,null],[13,"MiscBinaryOp","rustc::middle::const_val","",227,null],[13,"MiscCatchAll","","",227,null],[13,"IndexOpFeatureGated","","",227,null],[13,"Math","","",227,null],[13,"LayoutError","","",227,null],[13,"ErroneousReferencedConstant","","",227,null],[13,"TypeckError","","",227,null],[4,"ConstEvalErrDescription","","",null,null],[13,"Simple","","",228,null],[6,"EvalResult","","",null,null],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",225,null],[11,"encode","","",225,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",225,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"bytearray"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",223,null],[11,"encode","","",223,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"bytearray"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"self"},{"name":"bytearray"}],"output":{"name":"bool"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"constaggregate"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",226,null],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"constaggregate"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"self"},{"name":"constaggregate"}],"output":{"name":"bool"}}],[11,"encode","","",226,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",226,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"to_const_int","","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"constevalerr"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"errkind"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",227,{"inputs":[{"name":"constmatherr"}],"output":{"name":"errkind"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"constevalerrdescription"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_oneline","","Return a one-line description of the error, for lints and such",228,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"description","","",224,{"inputs":[{"name":"self"}],"output":{"name":"constevalerrdescription"}}],[11,"struct_error","","",224,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"note","","",224,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"span"},{"name":"str"},{"name":"diagnosticbuilder"}],"output":null}],[11,"report","","",224,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"span"},{"name":"str"}],"output":null}],[0,"cstore","rustc::middle","the rustc crate store interface. This also includes types that are mostly used as a part of that interface, but these should probably get a better home if someone can find one.",null,null],[3,"LinkMeta","rustc::middle::cstore","",null,null],[12,"crate_hash","","",229,null],[3,"CrateSource","","Where a crate came from on the local filesystem. One of these three options must be non-None.",null,null],[12,"dylib","","",230,null],[12,"rlib","","",230,null],[12,"rmeta","","",230,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",231,null],[12,"name","","",231,null],[12,"cfg","","",231,null],[12,"foreign_items","","",231,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",232,null],[12,"span","","span of the extern crate that caused this to be loaded",232,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",232,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",232,null],[3,"EncodedMetadata","","",null,null],[12,"raw_data","","",233,null],[3,"EncodedMetadataHash","","The hash for some metadata that (when saving) will be exported from this crate, or which (when importing) was exported by an upstream crate.",null,null],[12,"def_index","","",234,null],[12,"hash","","",234,null],[3,"EncodedMetadataHashes","","The hash for some metadata that (when saving) will be exported from this crate, or which (when importing) was exported by an upstream crate.",null,null],[12,"hashes","","",235,null],[3,"ExternConstBody","","",null,null],[12,"body","","",236,null],[12,"fingerprint","","",236,null],[3,"ExternBodyNestedBodies","","",null,null],[12,"nested_bodies","","",237,null],[12,"fingerprint","","",237,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",238,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",238,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",238,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",238,null],[4,"LibSource","","",null,null],[13,"Some","","",239,null],[13,"MetadataOnly","","",239,null],[13,"None","","",239,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",240,null],[13,"RequireStatic","","",240,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","native static library (.a archive)",241,null],[13,"NativeStaticNobundle","","native static library, which doesn't get bundled into .rlibs",241,null],[13,"NativeFramework","","macOS-specific",241,null],[13,"NativeUnknown","","default way to specify a dynamic library",241,null],[4,"LoadedMacro","","",null,null],[13,"MacroDef","","",242,null],[13,"ProcMacro","","",242,null],[5,"validate_crate_name","","",null,{"inputs":[{"name":"option"},{"name":"str"},{"name":"option"}],"output":null}],[5,"used_crates","","",null,{"inputs":[{"name":"tyctxt"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[8,"MetadataLoader","","The backend's way to give the crate store access to the metadata in a library. Note that it returns the raw metadata bytes stored in the library file, whether it is compressed, uncompressed, some weird mix, etc. rmeta files are backend independent and not handled here.",null,null],[10,"get_rlib_metadata","","",243,{"inputs":[{"name":"self"},{"name":"target"},{"name":"path"}],"output":{"name":"result"}}],[10,"get_dylib_metadata","","",243,{"inputs":[{"name":"self"},{"name":"target"},{"name":"path"}],"output":{"name":"result"}}],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"crate_data_as_rc_any","","",244,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[10,"metadata_loader","","",244,{"inputs":[{"name":"self"}],"output":{"name":"metadataloader"}}],[10,"def_key","","",244,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",244,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"def_path_hash","","",244,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpathhash"}}],[10,"def_path_table","","",244,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[10,"visibility_untracked","","",244,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"export_macros_untracked","","",244,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":null}],[10,"dep_kind_untracked","","",244,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"crate_name_untracked","","",244,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_disambiguator_untracked","","",244,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash_untracked","","",244,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"struct_field_names_untracked","","",244,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children_untracked","","",244,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"vec"}}],[10,"load_macro_untracked","","",244,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"extern_mod_stmt_cnum_untracked","","",244,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"item_generics_cloned_untracked","","",244,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"associated_item_cloned_untracked","","",244,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[10,"postorder_cnums_untracked","","",244,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"crates_untracked","","",244,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"encode_metadata","","",244,null],[10,"metadata_encoding_version","","",244,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",245,{"inputs":[{"name":"self"},{"name":"item"},{"name":"definitions"}],"output":null}],[10,"postprocess","","",245,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",238,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",238,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"cmp","","",238,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",238,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"macros_only","","",238,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",239,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",239,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","","",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",239,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",240,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"encode","","",240,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",240,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",241,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"cmp","","",241,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"hash","","",241,null],[11,"encode","","",241,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",241,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"hash","","",231,null],[11,"encode","","",231,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",231,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",233,{"inputs":[],"output":{"name":"encodedmetadata"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",234,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",234,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"encodedmetadatahash"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",235,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",235,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"encodedmetadatahashes"}}],[11,"new","","",235,{"inputs":[],"output":{"name":"encodedmetadatahashes"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"externconstbody"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"externbodynestedbodies"}}],[11,"crate_data_as_rc_any","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"visibility_untracked","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"item_generics_cloned_untracked","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"associated_item_cloned_untracked","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"dep_kind_untracked","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros_untracked","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":null}],[11,"crate_name_untracked","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_disambiguator_untracked","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash_untracked","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"def_key","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"def_path_hash","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpathhash"}}],[11,"def_path_table","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"struct_field_names_untracked","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children_untracked","","",246,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"vec"}}],[11,"load_macro_untracked","","",246,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"crates_untracked","","",246,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"extern_mod_stmt_cnum_untracked","","",246,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",246,null],[11,"metadata_encoding_version","","",246,null],[11,"postorder_cnums_untracked","","",246,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_loader","","",246,{"inputs":[{"name":"self"}],"output":{"name":"metadataloader"}}],[0,"dataflow","rustc::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[3,"DataFlowContext","rustc::middle::dataflow","",null,null],[4,"EntryOrExit","","",null,null],[13,"Entry","","",247,null],[13,"Exit","","",247,null],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",248,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",248,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",249,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",250,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"nested","","",251,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",251,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"eq","","",248,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",251,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",251,{"inputs":[{"name":"self"},{"name":"itemlocalid"},{"name":"usize"}],"output":null}],[11,"add_kill","","Indicates that `id` kills `bit`",251,{"inputs":[{"name":"self"},{"name":"killfrom"},{"name":"itemlocalid"},{"name":"usize"}],"output":null}],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",251,{"inputs":[{"name":"self"},{"name":"itemlocalid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",251,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"cfgindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",251,{"inputs":[{"name":"self"},{"name":"itemlocalid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",251,{"inputs":[{"name":"self"},{"name":"cfg"}],"output":null}],[11,"propagate","","Performs the data flow analysis.",251,{"inputs":[{"name":"self"},{"name":"cfg"},{"name":"body"}],"output":null}],[0,"dead","rustc::middle","",null,null],[5,"check_crate","rustc::middle::dead","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"dependency_format","rustc::middle","Resolution of mixing rlibs and dylibs",null,null],[4,"Linkage","rustc::middle::dependency_format","",null,null],[13,"NotLinked","","",252,null],[13,"IncludedFromDylib","","",252,null],[13,"Static","","",252,null],[13,"Dynamic","","",252,null],[5,"calculate","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[6,"DependencyList","","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"eq","","",252,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"entry","rustc::middle","",null,null],[5,"find_entry_point","rustc::middle::entry","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":null}],[0,"exported_symbols","rustc::middle","",null,null],[4,"SymbolExportLevel","rustc::middle::exported_symbols","The SymbolExportLevel of a symbols specifies from which kinds of crates the symbol will be exported. `C` symbols will be exported from any kind of crate, including cdylibs which export very few things. `Rust` will only be exported if the crate produced is a Rust dylib.",null,null],[13,"C","","",253,null],[13,"Rust","","",253,null],[11,"eq","","",253,{"inputs":[{"name":"self"},{"name":"symbolexportlevel"}],"output":{"name":"bool"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"symbolexportlevel"}}],[11,"hash_stable","","",253,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"is_below_threshold","","",253,{"inputs":[{"name":"self"},{"name":"symbolexportlevel"}],"output":{"name":"bool"}}],[0,"free_region","rustc::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"RegionRelations","rustc::middle::free_region","Combines a `region::ScopeTree` (which governs relationships between scopes) and a `FreeRegionMap` (which governs relationships between free regions) to yield a complete relation between concrete regions.",null,null],[12,"tcx","","",254,null],[12,"context","","context used to fetch the region maps",254,null],[12,"region_scope_tree","","region maps for the given context",254,null],[12,"free_regions","","free-region relationships",254,null],[3,"FreeRegionMap","","",null,null],[11,"new","","",254,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"scopetree"},{"name":"freeregionmap"}],"output":{"name":"self"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run after inference and sadly the logic is somewhat duplicated with the code in infer.rs.",254,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",254,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":{"name":"region"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"encode","","",255,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",255,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",255,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",255,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"relate_free_regions_from_predicates","","",255,null],[11,"relate_regions","","",255,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":null}],[11,"lub_free_regions","","",255,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"region"}}],[11,"hash_stable","","",255,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"lift_to_tcx","","",255,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[0,"intrinsicck","rustc::middle","",null,null],[5,"check_crate","rustc::middle::intrinsicck","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"lang_items","rustc::middle","",null,null],[3,"LanguageItems","rustc::middle::lang_items","",null,null],[12,"items","","",256,null],[12,"missing","","",256,null],[4,"LangItem","","",null,null],[13,"CharImplItem","","",257,null],[13,"StrImplItem","","",257,null],[13,"SliceImplItem","","",257,null],[13,"ConstPtrImplItem","","",257,null],[13,"MutPtrImplItem","","",257,null],[13,"I8ImplItem","","",257,null],[13,"I16ImplItem","","",257,null],[13,"I32ImplItem","","",257,null],[13,"I64ImplItem","","",257,null],[13,"I128ImplItem","","",257,null],[13,"IsizeImplItem","","",257,null],[13,"U8ImplItem","","",257,null],[13,"U16ImplItem","","",257,null],[13,"U32ImplItem","","",257,null],[13,"U64ImplItem","","",257,null],[13,"U128ImplItem","","",257,null],[13,"UsizeImplItem","","",257,null],[13,"F32ImplItem","","",257,null],[13,"F64ImplItem","","",257,null],[13,"SendTraitLangItem","","",257,null],[13,"SizedTraitLangItem","","",257,null],[13,"UnsizeTraitLangItem","","",257,null],[13,"CopyTraitLangItem","","",257,null],[13,"CloneTraitLangItem","","",257,null],[13,"SyncTraitLangItem","","",257,null],[13,"FreezeTraitLangItem","","",257,null],[13,"DropTraitLangItem","","",257,null],[13,"CoerceUnsizedTraitLangItem","","",257,null],[13,"AddTraitLangItem","","",257,null],[13,"SubTraitLangItem","","",257,null],[13,"MulTraitLangItem","","",257,null],[13,"DivTraitLangItem","","",257,null],[13,"RemTraitLangItem","","",257,null],[13,"NegTraitLangItem","","",257,null],[13,"NotTraitLangItem","","",257,null],[13,"BitXorTraitLangItem","","",257,null],[13,"BitAndTraitLangItem","","",257,null],[13,"BitOrTraitLangItem","","",257,null],[13,"ShlTraitLangItem","","",257,null],[13,"ShrTraitLangItem","","",257,null],[13,"AddAssignTraitLangItem","","",257,null],[13,"SubAssignTraitLangItem","","",257,null],[13,"MulAssignTraitLangItem","","",257,null],[13,"DivAssignTraitLangItem","","",257,null],[13,"RemAssignTraitLangItem","","",257,null],[13,"BitXorAssignTraitLangItem","","",257,null],[13,"BitAndAssignTraitLangItem","","",257,null],[13,"BitOrAssignTraitLangItem","","",257,null],[13,"ShlAssignTraitLangItem","","",257,null],[13,"ShrAssignTraitLangItem","","",257,null],[13,"IndexTraitLangItem","","",257,null],[13,"IndexMutTraitLangItem","","",257,null],[13,"UnsafeCellTypeLangItem","","",257,null],[13,"DerefTraitLangItem","","",257,null],[13,"DerefMutTraitLangItem","","",257,null],[13,"FnTraitLangItem","","",257,null],[13,"FnMutTraitLangItem","","",257,null],[13,"FnOnceTraitLangItem","","",257,null],[13,"GeneratorStateLangItem","","",257,null],[13,"GeneratorTraitLangItem","","",257,null],[13,"EqTraitLangItem","","",257,null],[13,"OrdTraitLangItem","","",257,null],[13,"PanicFnLangItem","","",257,null],[13,"PanicBoundsCheckFnLangItem","","",257,null],[13,"PanicFmtLangItem","","",257,null],[13,"ExchangeMallocFnLangItem","","",257,null],[13,"BoxFreeFnLangItem","","",257,null],[13,"DropInPlaceFnLangItem","","",257,null],[13,"StartFnLangItem","","",257,null],[13,"EhPersonalityLangItem","","",257,null],[13,"EhUnwindResumeLangItem","","",257,null],[13,"MSVCTryFilterLangItem","","",257,null],[13,"OwnedBoxLangItem","","",257,null],[13,"PhantomDataItem","","",257,null],[13,"NonZeroItem","","",257,null],[13,"DebugTraitLangItem","","",257,null],[5,"extract","","",null,null],[5,"collect","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"languageitems"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"eq","","",257,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"hash","","",257,null],[11,"encode","","",257,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",257,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_u32","","",257,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",256,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",256,null],[11,"require","","",256,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",256,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"freeze_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"gen_state","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"gen_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_in_place_fn","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",256,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"liveness","rustc::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc::middle::liveness","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"mem_categorization","rustc::middle","Categorization",null,null],[3,"Upvar","rustc::middle::mem_categorization","",null,null],[12,"id","","",258,null],[12,"kind","","",258,null],[3,"cmt_","","",null,null],[12,"id","","",259,null],[12,"span","","",259,null],[12,"cat","","",259,null],[12,"mutbl","","",259,null],[12,"ty","","",259,null],[12,"note","","",259,null],[3,"MemCategorizationContext","","",null,null],[12,"tcx","","",260,null],[12,"region_scope_tree","","",260,null],[12,"tables","","",260,null],[4,"Categorization","","",null,null],[13,"Rvalue","","",261,null],[13,"StaticItem","","",261,null],[13,"Upvar","","",261,null],[13,"Local","","",261,null],[13,"Deref","","",261,null],[13,"Interior","","",261,null],[13,"Downcast","","",261,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",262,null],[13,"BorrowedPtr","","`&T`",262,null],[13,"UnsafePtr","","`*T`",262,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",262,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",263,null],[13,"InteriorElement","","",263,null],[4,"FieldName","","",null,null],[13,"NamedField","","",264,null],[13,"PositionalField","","",264,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",265,null],[13,"Pattern","","",265,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",266,null],[13,"McDeclared","","",266,null],[13,"McInherited","","",266,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",267,null],[13,"NoteUpvarRef","","",267,null],[13,"NoteNone","","",267,null],[4,"ImmutabilityBlame","","",null,null],[13,"ImmLocal","","",268,null],[13,"ClosureEnv","","",268,null],[13,"LocalDeref","","",268,null],[13,"AdtFieldDeref","","",268,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",269,null],[13,"NonAliasable","","",269,null],[13,"ImmutableUnique","","",269,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",270,null],[13,"AliasableStatic","","",270,null],[13,"AliasableStaticMut","","",270,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[6,"cmt","","",null,null],[6,"McResult","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",271,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",271,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",261,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"eq","","",258,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",258,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",262,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"hash","","",262,null],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"eq","","",263,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",263,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"hash","","",263,null],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"eq","","",264,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",264,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"hash","","",264,null],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"eq","","",265,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"hash","","",265,null],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"eq","","",266,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"hash","","",266,null],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"eq","","",267,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",267,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"eq","","",259,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",259,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"immutability_blame","","",259,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"id","rustc::hir","",43,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"span","","",43,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"id","","",36,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"span","","",36,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","rustc::middle::mem_categorization","",260,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"from_mutbl","","",266,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",266,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",266,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",266,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",266,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",266,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",260,{"inputs":[{"name":"tyctxt"},{"name":"scopetree"},{"name":"typecktables"},{"name":"option"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_infer","","Creates a `MemCategorizationContext` during type inference. This is used during upvar analysis and a few other places. Because the typeck tables are not yet complete, the results from the analysis must be used with caution:",260,{"inputs":[{"name":"inferctxt"},{"name":"scopetree"},{"name":"typecktables"}],"output":{"name":"memcategorizationcontext"}}],[11,"type_moves_by_default","","",260,{"inputs":[{"name":"self"},{"name":"paramenv"},{"name":"ty"},{"name":"span"}],"output":{"name":"bool"}}],[11,"node_ty","","",260,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"mcresult"}}],[11,"expr_ty","","",260,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"mcresult"}}],[11,"expr_ty_adjusted","","",260,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"mcresult"}}],[11,"cat_expr","","",260,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"mcresult"}}],[11,"cat_expr_adjusted","","",260,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"cmt"},{"name":"adjustment"}],"output":{"name":"mcresult"}}],[11,"cat_expr_unadjusted","","",260,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"mcresult"}}],[11,"cat_def","","",260,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"ty"},{"name":"def"}],"output":{"name":"mcresult"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",260,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"region"}}],[11,"cat_rvalue_node","","",260,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"ty"}],"output":{"name":"cmt"}}],[11,"cat_rvalue","","",260,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"ty"}],"output":{"name":"cmt"}}],[11,"cat_field","","",260,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"name"},{"name":"ty"}],"output":{"name":"cmt"}}],[11,"cat_tup_field","","",260,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"usize"},{"name":"ty"}],"output":{"name":"cmt"}}],[11,"cat_deref","","",260,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"bool"}],"output":{"name":"mcresult"}}],[11,"cat_imm_interior","","",260,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"ty"},{"name":"interiorkind"}],"output":{"name":"cmt"}}],[11,"cat_downcast_if_needed","","",260,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"defid"}],"output":{"name":"cmt"}}],[11,"cat_pattern","","",260,{"inputs":[{"name":"self"},{"name":"cmt"},{"name":"pat"},{"name":"f"}],"output":{"name":"mcresult"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",259,{"inputs":[{"name":"self"}],"output":{"name":"cmt"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",259,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",259,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",259,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"privacy","rustc::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[3,"AccessLevels","rustc::middle::privacy","",null,null],[12,"map","","",272,null],[4,"AccessLevel","","",null,null],[13,"Reachable","","",273,null],[13,"Exported","","",273,null],[13,"Public","","",273,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",273,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"cmp","","",273,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"is_reachable","","",272,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",272,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",272,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"default","","",272,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"reachable","rustc::middle","",null,null],[3,"ReachableSet","rustc::middle::reachable","",null,null],[12,"0","","",274,null],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"reachableset"}}],[0,"region","rustc::middle","This file builds up the `ScopeTree`, which describes the parent links in the region hierarchy.",null,null],[3,"Scope","rustc::middle::region","Scope represents a statically-describable scope that can be used to bound the lifetime/region for values.",null,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",275,null],[12,"first_statement_index","","",275,null],[3,"FirstStatementIndex","","",null,null],[12,"0","","",276,null],[3,"ScopeTree","","The region scope tree encodes information about region relationships.",null,null],[3,"Context","","",null,null],[4,"ScopeData","","",null,null],[13,"Node","","",277,null],[13,"CallSite","","",277,null],[13,"Arguments","","",277,null],[13,"Destruction","","",277,null],[13,"Remainder","","",277,null],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[11,"clone","","",278,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"eq","","",278,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"ne","","",278,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",278,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"option"}}],[11,"lt","","",278,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"le","","",278,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"gt","","",278,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"ge","","",278,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"cmp","","",278,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"ordering"}}],[11,"hash","","",278,null],[11,"encode","","",278,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",278,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",277,{"inputs":[{"name":"self"}],"output":{"name":"scopedata"}}],[11,"eq","","",277,{"inputs":[{"name":"self"},{"name":"scopedata"}],"output":{"name":"bool"}}],[11,"ne","","",277,{"inputs":[{"name":"self"},{"name":"scopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",277,{"inputs":[{"name":"self"},{"name":"scopedata"}],"output":{"name":"option"}}],[11,"lt","","",277,{"inputs":[{"name":"self"},{"name":"scopedata"}],"output":{"name":"bool"}}],[11,"le","","",277,{"inputs":[{"name":"self"},{"name":"scopedata"}],"output":{"name":"bool"}}],[11,"gt","","",277,{"inputs":[{"name":"self"},{"name":"scopedata"}],"output":{"name":"bool"}}],[11,"ge","","",277,{"inputs":[{"name":"self"},{"name":"scopedata"}],"output":{"name":"bool"}}],[11,"cmp","","",277,{"inputs":[{"name":"self"},{"name":"scopedata"}],"output":{"name":"ordering"}}],[11,"hash","","",277,null],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",277,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",277,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"eq","","",275,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",275,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",275,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",275,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",275,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",275,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",275,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"cmp","","",275,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"hash","","",275,null],[11,"encode","","",275,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",275,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"firststatementindex"}}],[11,"eq","","",276,{"inputs":[{"name":"self"},{"name":"firststatementindex"}],"output":{"name":"bool"}}],[11,"ne","","",276,{"inputs":[{"name":"self"},{"name":"firststatementindex"}],"output":{"name":"bool"}}],[11,"hash","","",276,null],[11,"partial_cmp","","",276,{"inputs":[{"name":"self"},{"name":"firststatementindex"}],"output":{"name":"option"}}],[11,"lt","","",276,{"inputs":[{"name":"self"},{"name":"firststatementindex"}],"output":{"name":"bool"}}],[11,"le","","",276,{"inputs":[{"name":"self"},{"name":"firststatementindex"}],"output":{"name":"bool"}}],[11,"gt","","",276,{"inputs":[{"name":"self"},{"name":"firststatementindex"}],"output":{"name":"bool"}}],[11,"ge","","",276,{"inputs":[{"name":"self"},{"name":"firststatementindex"}],"output":{"name":"bool"}}],[11,"cmp","","",276,{"inputs":[{"name":"self"},{"name":"firststatementindex"}],"output":{"name":"ordering"}}],[11,"encode","","",276,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",276,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",276,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",276,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",278,{"inputs":[{"name":"scopedata"}],"output":{"name":"self"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"data","","",278,{"inputs":[{"name":"self"}],"output":{"name":"scopedata"}}],[11,"Node","","",278,{"inputs":[{"name":"itemlocalid"}],"output":{"name":"self"}}],[11,"CallSite","","",278,{"inputs":[{"name":"itemlocalid"}],"output":{"name":"self"}}],[11,"Arguments","","",278,{"inputs":[{"name":"itemlocalid"}],"output":{"name":"self"}}],[11,"Destruction","","",278,{"inputs":[{"name":"itemlocalid"}],"output":{"name":"self"}}],[11,"Remainder","","",278,{"inputs":[{"name":"blockremainder"}],"output":{"name":"self"}}],[11,"item_local_id","","Returns a item-local id associated with this scope.",278,{"inputs":[{"name":"self"}],"output":{"name":"itemlocalid"}}],[11,"node_id","","",278,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"scopetree"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this Scope.  Note that in general the returned span may not correspond to the span of any node id in the AST.",278,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"scopetree"}],"output":{"name":"span"}}],[11,"default","","",279,{"inputs":[],"output":{"name":"scopetree"}}],[11,"fmt","","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",280,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"record_scope_parent","","",279,{"inputs":[{"name":"self"},{"name":"scope"},{"name":"option"}],"output":null}],[11,"each_encl_scope","","",279,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"each_var_scope","","",279,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"opt_destruction_scope","","",279,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"option"}}],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",279,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",279,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"scope"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",279,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"scope"}}],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",279,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",279,{"inputs":[{"name":"self"},{"name":"itemlocalid"}],"output":{"name":"regionkind"}}],[11,"scopes_intersect","","",279,{"inputs":[{"name":"self"},{"name":"scope"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",279,{"inputs":[{"name":"self"},{"name":"scope"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",279,{"inputs":[{"name":"self"},{"name":"scope"},{"name":"scope"}],"output":{"name":"scope"}}],[11,"early_free_scope","","Assuming that the provided region was defined within this `ScopeTree`, returns the outermost `Scope` that the region outlives.",279,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"earlyboundregion"}],"output":{"name":"scope"}}],[11,"free_scope","","Assuming that the provided region was defined within this `ScopeTree`, returns the outermost `Scope` that the region outlives.",279,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"freeregion"}],"output":{"name":"scope"}}],[11,"yield_in_scope","","Checks whether the given scope contains a `yield`. If so, returns `Some((span, expr_count))` with the span of a yield we found and the number of expressions appearing before the `yield` in the body.",279,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"option"}}],[11,"body_expr_count","","Gives the number of expressions visited in a body. Used to sanity check visit_expr call count when calculating generator interiors.",279,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"option"}}],[11,"hash_stable","","",279,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[0,"recursion_limit","rustc::middle","",null,null],[5,"update_limits","rustc::middle::recursion_limit","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"resolve_lifetime","rustc::middle","Name resolution for lifetimes.",null,null],[3,"NamedRegionMap","rustc::middle::resolve_lifetime","",null,null],[12,"defs","","",281,null],[12,"late_bound","","",281,null],[12,"object_lifetime_defaults","","",281,null],[4,"Region","","",null,null],[13,"Static","","",282,null],[13,"EarlyBound","","",282,null],[13,"LateBound","","",282,null],[13,"LateBoundAnon","","",282,null],[13,"Free","","",282,null],[4,"Set1","","A set containing, at most, one known element. If two distinct values are inserted into a set, then it becomes `Many`, which can be used to detect ambiguities.",null,null],[13,"Empty","","",283,null],[13,"One","","",283,null],[13,"Many","","",283,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"cratestore"},{"name":"map"}],"output":{"name":"result"}}],[6,"ObjectLifetimeDefault","","",null,null],[11,"clone","","",282,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"eq","","",282,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"ne","","",282,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"hash","","",282,null],[11,"encode","","",282,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",282,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",283,{"inputs":[{"name":"self"}],"output":{"name":"set1"}}],[11,"eq","","",283,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"ne","","",283,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"encode","","",283,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",283,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"fmt","","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"insert","","",283,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"stability","rustc::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[3,"DeprecationEntry","rustc::middle::stability","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",284,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[4,"StabilityLevel","","",null,null],[13,"Unstable","","",285,null],[13,"Stable","","",285,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[11,"encode","","",285,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",285,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",285,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",285,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"clone","","",285,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",285,null],[11,"from_attr_level","","",285,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"self"}}],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"hash_stable","","",284,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"external","","",284,{"inputs":[{"name":"deprecation"}],"output":{"name":"deprecationentry"}}],[11,"same_origin","","",284,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"hash_stable","","",286,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"new","","",286,{"inputs":[{"name":"tyctxt"}],"output":{"name":"index"}}],[11,"local_stability","","",286,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"option"}}],[11,"local_deprecation_entry","","",286,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"option"}}],[0,"trans","rustc::middle","",null,null],[3,"CodegenUnit","rustc::middle::trans","",null,null],[3,"Stats","","",null,null],[12,"n_glues_created","","",287,null],[12,"n_null_glues","","",287,null],[12,"n_real_glues","","",287,null],[12,"n_fns","","",287,null],[12,"n_inlines","","",287,null],[12,"n_closures","","",287,null],[12,"n_llvm_insns","","",287,null],[12,"llvm_insns","","",287,null],[12,"fn_stats","","",287,null],[4,"TransItem","","",null,null],[13,"Fn","","",288,null],[13,"Static","","",288,null],[13,"GlobalAsm","","",288,null],[4,"Linkage","","",null,null],[13,"External","","",289,null],[13,"AvailableExternally","","",289,null],[13,"LinkOnceAny","","",289,null],[13,"LinkOnceODR","","",289,null],[13,"WeakAny","","",289,null],[13,"WeakODR","","",289,null],[13,"Appending","","",289,null],[13,"Internal","","",289,null],[13,"Private","","",289,null],[13,"ExternalWeak","","",289,null],[13,"Common","","",289,null],[4,"Visibility","","",null,null],[13,"Default","","",290,null],[13,"Hidden","","",290,null],[13,"Protected","","",290,null],[11,"eq","","",288,{"inputs":[{"name":"self"},{"name":"transitem"}],"output":{"name":"bool"}}],[11,"ne","","",288,{"inputs":[{"name":"self"},{"name":"transitem"}],"output":{"name":"bool"}}],[11,"clone","","",288,{"inputs":[{"name":"self"}],"output":{"name":"transitem"}}],[11,"fmt","","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",288,null],[11,"hash_stable","","",288,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"clone","","",289,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"eq","","",289,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"hash","","",289,null],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash_stable","","",289,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"clone","","",290,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",290,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",290,null],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash_stable","","",290,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"new","","",291,{"inputs":[{"name":"internedstring"}],"output":{"name":"codegenunit"}}],[11,"name","","",291,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"set_name","","",291,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":null}],[11,"items","","",291,{"inputs":[{"name":"self"}],"output":{"name":"fxhashmap"}}],[11,"items_mut","","",291,{"inputs":[{"name":"self"}],"output":{"name":"fxhashmap"}}],[11,"hash_stable","","",291,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"stats"}}],[11,"default","","",287,{"inputs":[],"output":{"name":"stats"}}],[11,"hash_stable","","",287,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"extend","","",287,{"inputs":[{"name":"self"},{"name":"stats"}],"output":null}],[0,"weak_lang_items","rustc::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,{"inputs":[{"name":"tyctxt"},{"name":"languageitems"}],"output":null}],[5,"link_name","","",null,null],[0,"mir","rustc","MIR datatypes and passes. See the README for details.",null,null],[3,"Mir","rustc::mir","Lowered representation of a single function.",null,null],[12,"visibility_scopes","","List of visibility (lexical) scopes; these are referenced by statements and used (eventually) for debuginfo. Indexed by a `VisibilityScope`.",292,null],[12,"visibility_scope_info","","Crate-local information for each visibility scope, that can't (and needn't) be tracked across crates.",292,null],[12,"promoted","","Rvalues promoted from this function, such as borrows of constants. Each of them is the Mir of a constant with the fn's type parameters in scope, but a separate set of locals.",292,null],[12,"return_ty","","Return type of the function.",292,null],[12,"yield_ty","","Yield type of the function, if it is a generator.",292,null],[12,"generator_drop","","Generator drop glue",292,null],[12,"generator_layout","","The layout of a generator. Produced by the state transformation.",292,null],[12,"local_decls","","Declarations of locals.",292,null],[12,"arg_count","","Number of arguments this function takes.",292,null],[12,"upvar_decls","","Names and capture modes of all the closure upvars, assuming the first argument is either the closure or a reference to it.",292,null],[12,"spread_arg","","Mark an argument local (which must be a tuple) as getting passed as its individual components at the LLVM level.",292,null],[12,"span","","A span representing this MIR, for error reporting",292,null],[3,"VisibilityScopeInfo","","",null,null],[12,"lint_root","","A NodeId with lint levels equivalent to this scope's lint levels.",293,null],[12,"safety","","The unsafe block that contains this node.",293,null],[3,"SourceInfo","","Grouped information about the source code origin of a MIR entity. Intended to be inspected by diagnostics and debuginfo. Most passes can work with it as a whole, within a single function.",null,null],[12,"span","","Source span for the AST pertaining to this MIR entity.",294,null],[12,"scope","","The lexical visibility scope, i.e. which bindings can be seen.",294,null],[3,"Local","","",null,null],[12,"0","","",295,null],[3,"LocalDecl","","A MIR local.",null,null],[12,"mutability","","`let mut x` vs `let x`.",296,null],[12,"is_user_variable","","True if this corresponds to a user-declared local variable.",296,null],[12,"internal","","True if this is an internal local",296,null],[12,"ty","","Type of this local.",296,null],[12,"name","","Name of the local, used in debuginfo and pretty-printing.",296,null],[12,"source_info","","Source info of the local.",296,null],[12,"lexical_scope","","The lexical visibility scope the local is defined in. If the local was defined in a let-statement, this is within the let-statement, rather than outside of it.",296,null],[3,"UpvarDecl","","A closure capture, with its name and mode.",null,null],[12,"debug_name","","",297,null],[12,"by_ref","","If true, the capture is behind a reference.",297,null],[3,"BasicBlock","","",null,null],[12,"0","","",298,null],[3,"BasicBlockData","","",null,null],[12,"statements","","List of statements in this block.",299,null],[12,"terminator","","Terminator for this block.",299,null],[12,"is_cleanup","","If true, this block lies on an unwind path. This is used during trans where distinct kinds of basic blocks may be generated (particularly for MSVC cleanup). Unwind blocks must only branch to other unwind blocks.",299,null],[3,"Terminator","","",null,null],[12,"source_info","","",300,null],[12,"kind","","",300,null],[3,"Statement","","",null,null],[12,"source_info","","",301,null],[12,"kind","","",301,null],[3,"ValidationOperand","","",null,null],[12,"lval","","",302,null],[12,"ty","","",302,null],[12,"re","","",302,null],[12,"mutbl","","",302,null],[3,"Static","","The def-id of a static, along with its normalized type (which is stored to avoid requiring normalization when reading MIR).",null,null],[12,"def_id","","",303,null],[12,"ty","","",303,null],[3,"Projection","","The `Projection` data structure defines things of the form `B.x` or `*B` or `B[index]`. Note that it is parameterized because it is shared between `Constant` and `Lvalue`. See the aliases `LvalueProjection` etc below.",null,null],[12,"base","","",304,null],[12,"elem","","",304,null],[3,"Field","","",null,null],[12,"0","","",305,null],[3,"VisibilityScope","","",null,null],[12,"0","","",306,null],[3,"VisibilityScopeData","","",null,null],[12,"span","","",307,null],[12,"parent_scope","","",307,null],[3,"Constant","","Constants",null,null],[12,"span","","",308,null],[12,"ty","","",308,null],[12,"literal","","",308,null],[3,"Promoted","","",null,null],[12,"0","","",309,null],[3,"Location","","",null,null],[12,"block","","the location is within this block",310,null],[12,"statement_index","","the location is the start of the this statement; or, if `statement_index` == num-statements, then the start of the terminator.",310,null],[3,"UnsafetyViolation","","",null,null],[12,"source_info","","",311,null],[12,"description","","",311,null],[12,"lint_node_id","","",311,null],[3,"GeneratorLayout","","The layout of generator state",null,null],[12,"fields","","",312,null],[4,"Safety","","",null,null],[13,"Safe","","",313,null],[13,"BuiltinUnsafe","","Unsafe because of a PushUnsafeBlock",313,null],[13,"FnUnsafe","","Unsafe because of an unsafe fn",313,null],[13,"ExplicitUnsafe","","Unsafe because of an `unsafe` block",313,null],[4,"ClearOnDecode","","",null,null],[13,"Clear","","",314,null],[13,"Set","","",314,null],[4,"Mutability","","",null,null],[13,"Mut","","",315,null],[13,"Not","","",315,null],[4,"BorrowKind","","",null,null],[13,"Shared","","Data must be immutable and is aliasable.",316,null],[13,"Unique","","Data must be immutable but not aliasable.  This kind of borrow cannot currently be expressed by the user and is used only in implicit closure bindings. It is needed when you the closure is borrowing or mutating a mutable referent, e.g.:",316,null],[13,"Mut","","Data is mutable and not aliasable.",316,null],[4,"LocalKind","","Classifies locals into categories. See `Mir::local_kind`.",null,null],[13,"Var","","User-declared variable binding",317,null],[13,"Temp","","Compiler-introduced temporary",317,null],[13,"Arg","","Function argument",317,null],[13,"ReturnPointer","","Location of function's return value",317,null],[4,"TerminatorKind","","",null,null],[13,"Goto","","block should have one successor in the graph; we jump there",318,null],[12,"target","rustc::mir::TerminatorKind","",318,null],[13,"SwitchInt","rustc::mir","operand evaluates to an integer; jump depending on its value to one of the targets, and otherwise fallback to `otherwise`",318,null],[12,"discr","rustc::mir::TerminatorKind","discriminant value being tested",318,null],[12,"switch_ty","","type of value being tested",318,null],[12,"values","","Possible values. The locations to branch to in each case are found in the corresponding indices from the `targets` vector.",318,null],[12,"targets","","Possible branch sites. The last element of this vector is used for the otherwise branch, so targets.len() == values.len() + 1 should hold.",318,null],[13,"Resume","rustc::mir","Indicates that the landing pad is finished and unwinding should continue. Emitted by build::scope::diverge_cleanup.",318,null],[13,"Return","","Indicates a normal return. The return pointer lvalue should have been filled in by now. This should occur at most once.",318,null],[13,"Unreachable","","Indicates a terminator that can never be reached.",318,null],[13,"Drop","","Drop the Lvalue",318,null],[12,"location","rustc::mir::TerminatorKind","",318,null],[12,"target","","",318,null],[12,"unwind","","",318,null],[13,"DropAndReplace","rustc::mir","Drop the Lvalue and assign the new value over it",318,null],[12,"location","rustc::mir::TerminatorKind","",318,null],[12,"value","","",318,null],[12,"target","","",318,null],[12,"unwind","","",318,null],[13,"Call","rustc::mir","Block ends with a call of a converging function",318,null],[12,"func","rustc::mir::TerminatorKind","The function that’s being called",318,null],[12,"args","","Arguments the function is called with",318,null],[12,"destination","","Destination for the return value. If some, the call is converging.",318,null],[12,"cleanup","","Cleanups to be done if the call unwinds.",318,null],[13,"Assert","rustc::mir","Jump to the target if the condition has the expected value, otherwise panic with a message and a cleanup target.",318,null],[12,"cond","rustc::mir::TerminatorKind","",318,null],[12,"expected","","",318,null],[12,"msg","","",318,null],[12,"target","","",318,null],[12,"cleanup","","",318,null],[13,"Yield","rustc::mir","A suspend point",318,null],[12,"value","rustc::mir::TerminatorKind","The value to return",318,null],[12,"resume","","Where to resume to",318,null],[12,"drop","","Cleanup to be done if the generator is dropped at this suspend point",318,null],[13,"GeneratorDrop","rustc::mir","Indicates the end of the dropping of a generator",318,null],[4,"AssertMessage","","",null,null],[13,"BoundsCheck","","",319,null],[12,"len","rustc::mir::AssertMessage","",319,null],[12,"index","","",319,null],[13,"Math","rustc::mir","",319,null],[13,"GeneratorResumedAfterReturn","","",319,null],[13,"GeneratorResumedAfterPanic","","",319,null],[4,"StatementKind","","",null,null],[13,"Assign","","Write the RHS Rvalue to the LHS Lvalue.",320,null],[13,"SetDiscriminant","","Write the discriminant for a variant to the enum Lvalue.",320,null],[12,"lvalue","rustc::mir::StatementKind","",320,null],[12,"variant_index","","",320,null],[13,"StorageLive","rustc::mir","Start a live range for the storage of the local.",320,null],[13,"StorageDead","","End the current live range for the storage of the local.",320,null],[13,"InlineAsm","","Execute a piece of inline Assembly.",320,null],[12,"asm","rustc::mir::StatementKind","",320,null],[12,"outputs","","",320,null],[12,"inputs","","",320,null],[13,"Validate","rustc::mir","Assert the given lvalues to be valid inhabitants of their type.  These statements are currently only interpreted by miri and only generated when \"-Z mir-emit-validate\" is passed. See https://internals.rust-lang.org/t/types-as-contracts/5562/73 for more details.",320,null],[13,"EndRegion","","Mark one terminating point of a region scope (i.e. static region). (The starting point(s) arise implicitly from borrows.)",320,null],[13,"Nop","","No-op. Useful for deleting instructions without affecting statement indices.",320,null],[4,"ValidationOp","","The `ValidationOp` describes what happens with each of the operands of a `Validate` statement.",null,null],[13,"Acquire","","Recursively traverse the lvalue following the type and validate that all type invariants are maintained.  Furthermore, acquire exclusive/read-only access to the memory reachable from the lvalue.",321,null],[13,"Release","","Recursive traverse the mutable part of the type and relinquish all exclusive access.",321,null],[13,"Suspend","","Recursive traverse the mutable part of the type and relinquish all exclusive access until the given region ends.  Then, access will be recovered.",321,null],[4,"Lvalue","","A path to a value; something that can be evaluated without changing or disturbing program state.",null,null],[13,"Local","","local variable",322,null],[13,"Static","","static or static mut variable",322,null],[13,"Projection","","projection out of an lvalue (access a field, deref a pointer, etc)",322,null],[4,"ProjectionElem","","",null,null],[13,"Deref","","",323,null],[13,"Field","","",323,null],[13,"Index","","",323,null],[13,"ConstantIndex","","These indices are generated by slice patterns. Easiest to explain by example:",323,null],[12,"offset","rustc::mir::ProjectionElem","index or -index (in Python terms), depending on from_end",323,null],[12,"min_length","","thing being indexed must be at least this long",323,null],[12,"from_end","","counting backwards from end?",323,null],[13,"Subslice","rustc::mir","These indices are generated by slice patterns.",323,null],[12,"from","rustc::mir::ProjectionElem","",323,null],[12,"to","","",323,null],[13,"Downcast","rustc::mir","\"Downcast\" to a variant of an ADT. Currently, we only introduce this for ADTs with more than one variant. It may be better to just introduce it always, or always for enums.",323,null],[4,"Operand","","These are values that can appear inside an rvalue (or an index lvalue). They are intentionally limited to prevent rvalues from being nested in one another.",null,null],[13,"Consume","","",324,null],[13,"Constant","","",324,null],[4,"Rvalue","","Rvalues",null,null],[13,"Use","","x (either a move or copy, depending on type of x)",325,null],[13,"Repeat","","[x; 32]",325,null],[13,"Ref","","&x or &mut x",325,null],[13,"Len","","length of a [X] or [X;n] value",325,null],[13,"Cast","","",325,null],[13,"BinaryOp","","",325,null],[13,"CheckedBinaryOp","","",325,null],[13,"NullaryOp","","",325,null],[13,"UnaryOp","","",325,null],[13,"Discriminant","","Read the discriminant of an ADT.",325,null],[13,"Aggregate","","Create an aggregate value, like a tuple or struct.  This is only needed because we want to distinguish `dest = Foo { x: ..., y: ... }` from `dest.x = ...; dest.y = ...;` in the case that `Foo` has a destructor. These rvalues can be optimized away after type-checking and before lowering.",325,null],[4,"CastKind","","",null,null],[13,"Misc","","",326,null],[13,"ReifyFnPointer","","Convert unique, zero-sized type for a fn to fn()",326,null],[13,"ClosureFnPointer","","Convert non capturing closure to fn()",326,null],[13,"UnsafeFnPointer","","Convert safe fn() to unsafe fn()",326,null],[13,"Unsize","","\"Unsize\" -- convert a thin-or-fat pointer to a fat pointer. trans must figure out the details once full monomorphization is known. For example, this could be used to cast from a `&[i32;N]` to a `&[i32]`, or a `Box<T>` to a `Box<Trait>` (presuming `T: Trait`).",326,null],[4,"AggregateKind","","",null,null],[13,"Array","","The type is of the element",327,null],[13,"Tuple","","",327,null],[13,"Adt","","The second field is variant number (discriminant), it's equal to 0 for struct and union expressions. The fourth field is active field number and is present only for union expressions.",327,null],[13,"Closure","","",327,null],[13,"Generator","","",327,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",328,null],[13,"Sub","","The `-` operator (subtraction)",328,null],[13,"Mul","","The `*` operator (multiplication)",328,null],[13,"Div","","The `/` operator (division)",328,null],[13,"Rem","","The `%` operator (modulus)",328,null],[13,"BitXor","","The `^` operator (bitwise xor)",328,null],[13,"BitAnd","","The `&` operator (bitwise and)",328,null],[13,"BitOr","","The `|` operator (bitwise or)",328,null],[13,"Shl","","The `<<` operator (shift left)",328,null],[13,"Shr","","The `>>` operator (shift right)",328,null],[13,"Eq","","The `==` operator (equality)",328,null],[13,"Lt","","The `<` operator (less than)",328,null],[13,"Le","","The `<=` operator (less than or equal to)",328,null],[13,"Ne","","The `!=` operator (not equal to)",328,null],[13,"Ge","","The `>=` operator (greater than or equal to)",328,null],[13,"Gt","","The `>` operator (greater than)",328,null],[13,"Offset","","The `ptr.offset` operator",328,null],[4,"NullOp","","",null,null],[13,"SizeOf","","Return the size of a value of that type",329,null],[13,"Box","","Create a new uninitialized box for a value of that type",329,null],[4,"UnOp","","",null,null],[13,"Not","","The `!` operator for logical inversion",330,null],[13,"Neg","","The `-` operator for negation",330,null],[4,"Literal","","",null,null],[13,"Value","","",331,null],[12,"value","rustc::mir::Literal","",331,null],[13,"Promoted","rustc::mir","",331,null],[12,"index","rustc::mir::Literal","",331,null],[0,"tcx","rustc::mir","Methods for the various MIR types. These are intended for use after building is complete.",null,null],[4,"LvalueTy","rustc::mir::tcx","",null,null],[13,"Ty","","Normal type.",332,null],[12,"ty","rustc::mir::tcx::LvalueTy","",332,null],[13,"Downcast","rustc::mir::tcx","Downcast to a particular variant of an enum.",332,null],[12,"adt_def","rustc::mir::tcx::LvalueTy","",332,null],[12,"substs","","",332,null],[12,"variant_index","","",332,null],[4,"RvalueInitializationState","rustc::mir::tcx","",null,null],[13,"Shallow","","",333,null],[13,"Deep","","",333,null],[11,"clone","","",332,{"inputs":[{"name":"self"}],"output":{"name":"lvaluety"}}],[11,"fmt","","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ty","","",332,{"inputs":[{"name":"ty"}],"output":{"name":"lvaluety"}}],[11,"to_ty","","",332,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"projection_ty","","",332,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"lvalueelem"}],"output":{"name":"lvaluety"}}],[11,"super_fold_with","","",332,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",332,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"ty","rustc::mir","",322,{"inputs":[{"name":"self"},{"name":"d"},{"name":"tyctxt"}],"output":{"name":"lvaluety"}}],[11,"ty","","",325,{"inputs":[{"name":"self"},{"name":"d"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"initialization_state","","Returns whether this rvalue is deeply initialized (most rvalues) or whether its only shallowly initialized (`Rvalue::Box`).",325,{"inputs":[{"name":"self"}],"output":{"name":"rvalueinitializationstate"}}],[11,"ty","","",324,{"inputs":[{"name":"self"},{"name":"d"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"ty","","",328,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"to_mutbl_lossy","","",316,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"to_hir_binop","","",328,{"inputs":[{"name":"self"}],"output":{"name":"binop_"}}],[0,"visit","","",null,null],[4,"Lookup","rustc::mir::visit","",null,null],[13,"Loc","","",334,null],[13,"Src","","",334,null],[4,"LvalueContext","","",null,null],[13,"Store","","",335,null],[13,"Call","","",335,null],[13,"Drop","","",335,null],[13,"Inspect","","",335,null],[13,"Borrow","","",335,null],[12,"region","rustc::mir::visit::LvalueContext","",335,null],[12,"kind","","",335,null],[13,"Projection","rustc::mir::visit","",335,null],[13,"Consume","","",335,null],[13,"StorageLive","","",335,null],[13,"StorageDead","","",335,null],[13,"Validate","","",335,null],[8,"Visitor","","",null,null],[11,"visit_mir","","",336,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"visit_basic_block_data","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblockdata"}],"output":null}],[11,"visit_visibility_scope_data","","",336,{"inputs":[{"name":"self"},{"name":"visibilityscopedata"}],"output":null}],[11,"visit_statement","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"statement"},{"name":"location"}],"output":null}],[11,"visit_assign","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"visit_terminator","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"visit_terminator_kind","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminatorkind"},{"name":"location"}],"output":null}],[11,"visit_assert_message","","",336,{"inputs":[{"name":"self"},{"name":"assertmessage"},{"name":"location"}],"output":null}],[11,"visit_rvalue","","",336,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"visit_operand","","",336,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"location"}],"output":null}],[11,"visit_lvalue","","",336,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_static","","",336,{"inputs":[{"name":"self"},{"name":"static"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_projection","","",336,{"inputs":[{"name":"self"},{"name":"lvalueprojection"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_projection_elem","","",336,{"inputs":[{"name":"self"},{"name":"lvalueelem"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_branch","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"visit_constant","","",336,{"inputs":[{"name":"self"},{"name":"constant"},{"name":"location"}],"output":null}],[11,"visit_literal","","",336,{"inputs":[{"name":"self"},{"name":"literal"},{"name":"location"}],"output":null}],[11,"visit_def_id","","",336,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"location"}],"output":null}],[11,"visit_span","","",336,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_source_info","","",336,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":null}],[11,"visit_ty","","",336,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"lookup"}],"output":null}],[11,"visit_region","","",336,{"inputs":[{"name":"self"},{"name":"region"},{"name":"location"}],"output":null}],[11,"visit_const","","",336,{"inputs":[{"name":"self"},{"name":"const"},{"name":"location"}],"output":null}],[11,"visit_substs","","",336,{"inputs":[{"name":"self"},{"name":"substs"},{"name":"location"}],"output":null}],[11,"visit_closure_substs","","",336,{"inputs":[{"name":"self"},{"name":"closuresubsts"},{"name":"location"}],"output":null}],[11,"visit_generator_interior","","",336,{"inputs":[{"name":"self"},{"name":"generatorinterior"},{"name":"location"}],"output":null}],[11,"visit_const_int","","",336,{"inputs":[{"name":"self"},{"name":"constint"},{"name":"location"}],"output":null}],[11,"visit_const_usize","","",336,{"inputs":[{"name":"self"},{"name":"constusize"},{"name":"location"}],"output":null}],[11,"visit_local_decl","","",336,{"inputs":[{"name":"self"},{"name":"localdecl"}],"output":null}],[11,"visit_local","","",336,{"inputs":[{"name":"self"},{"name":"local"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_visibility_scope","","",336,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":null}],[11,"super_mir","","",336,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"super_basic_block_data","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblockdata"}],"output":null}],[11,"super_visibility_scope_data","","",336,{"inputs":[{"name":"self"},{"name":"visibilityscopedata"}],"output":null}],[11,"super_statement","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"statement"},{"name":"location"}],"output":null}],[11,"super_assign","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"super_terminator","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"super_terminator_kind","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminatorkind"},{"name":"location"}],"output":null}],[11,"super_assert_message","","",336,{"inputs":[{"name":"self"},{"name":"assertmessage"},{"name":"location"}],"output":null}],[11,"super_rvalue","","",336,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"super_operand","","",336,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"location"}],"output":null}],[11,"super_lvalue","","",336,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_static","","",336,{"inputs":[{"name":"self"},{"name":"static"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_projection","","",336,{"inputs":[{"name":"self"},{"name":"lvalueprojection"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_projection_elem","","",336,{"inputs":[{"name":"self"},{"name":"lvalueelem"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_local_decl","","",336,{"inputs":[{"name":"self"},{"name":"localdecl"}],"output":null}],[11,"super_visibility_scope","","",336,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":null}],[11,"super_branch","","",336,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"super_constant","","",336,{"inputs":[{"name":"self"},{"name":"constant"},{"name":"location"}],"output":null}],[11,"super_literal","","",336,{"inputs":[{"name":"self"},{"name":"literal"},{"name":"location"}],"output":null}],[11,"super_def_id","","",336,{"inputs":[{"name":"self"},{"name":"defid"}],"output":null}],[11,"super_span","","",336,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"super_source_info","","",336,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":null}],[11,"super_ty","","",336,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"super_region","","",336,{"inputs":[{"name":"self"},{"name":"region"}],"output":null}],[11,"super_const","","",336,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"super_substs","","",336,{"inputs":[{"name":"self"},{"name":"substs"}],"output":null}],[11,"super_generator_interior","","",336,{"inputs":[{"name":"self"},{"name":"generatorinterior"}],"output":null}],[11,"super_closure_substs","","",336,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":null}],[11,"super_const_int","","",336,{"inputs":[{"name":"self"},{"name":"constint"}],"output":null}],[11,"super_const_usize","","",336,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":null}],[11,"visit_location","","",336,{"inputs":[{"name":"self"},{"name":"mir"},{"name":"location"}],"output":null}],[8,"MutVisitor","","",null,null],[11,"visit_mir","","",337,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"visit_basic_block_data","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblockdata"}],"output":null}],[11,"visit_visibility_scope_data","","",337,{"inputs":[{"name":"self"},{"name":"visibilityscopedata"}],"output":null}],[11,"visit_statement","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"statement"},{"name":"location"}],"output":null}],[11,"visit_assign","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"visit_terminator","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"visit_terminator_kind","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminatorkind"},{"name":"location"}],"output":null}],[11,"visit_assert_message","","",337,{"inputs":[{"name":"self"},{"name":"assertmessage"},{"name":"location"}],"output":null}],[11,"visit_rvalue","","",337,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"visit_operand","","",337,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"location"}],"output":null}],[11,"visit_lvalue","","",337,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_static","","",337,{"inputs":[{"name":"self"},{"name":"static"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_projection","","",337,{"inputs":[{"name":"self"},{"name":"lvalueprojection"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_projection_elem","","",337,{"inputs":[{"name":"self"},{"name":"lvalueelem"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_branch","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"visit_constant","","",337,{"inputs":[{"name":"self"},{"name":"constant"},{"name":"location"}],"output":null}],[11,"visit_literal","","",337,{"inputs":[{"name":"self"},{"name":"literal"},{"name":"location"}],"output":null}],[11,"visit_def_id","","",337,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"location"}],"output":null}],[11,"visit_span","","",337,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_source_info","","",337,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":null}],[11,"visit_ty","","",337,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"lookup"}],"output":null}],[11,"visit_region","","",337,{"inputs":[{"name":"self"},{"name":"region"},{"name":"location"}],"output":null}],[11,"visit_const","","",337,{"inputs":[{"name":"self"},{"name":"const"},{"name":"location"}],"output":null}],[11,"visit_substs","","",337,{"inputs":[{"name":"self"},{"name":"substs"},{"name":"location"}],"output":null}],[11,"visit_closure_substs","","",337,{"inputs":[{"name":"self"},{"name":"closuresubsts"},{"name":"location"}],"output":null}],[11,"visit_generator_interior","","",337,{"inputs":[{"name":"self"},{"name":"generatorinterior"},{"name":"location"}],"output":null}],[11,"visit_const_int","","",337,{"inputs":[{"name":"self"},{"name":"constint"},{"name":"location"}],"output":null}],[11,"visit_const_usize","","",337,{"inputs":[{"name":"self"},{"name":"constusize"},{"name":"location"}],"output":null}],[11,"visit_local_decl","","",337,{"inputs":[{"name":"self"},{"name":"localdecl"}],"output":null}],[11,"visit_local","","",337,{"inputs":[{"name":"self"},{"name":"local"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_visibility_scope","","",337,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":null}],[11,"super_mir","","",337,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"super_basic_block_data","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblockdata"}],"output":null}],[11,"super_visibility_scope_data","","",337,{"inputs":[{"name":"self"},{"name":"visibilityscopedata"}],"output":null}],[11,"super_statement","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"statement"},{"name":"location"}],"output":null}],[11,"super_assign","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"super_terminator","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"super_terminator_kind","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminatorkind"},{"name":"location"}],"output":null}],[11,"super_assert_message","","",337,{"inputs":[{"name":"self"},{"name":"assertmessage"},{"name":"location"}],"output":null}],[11,"super_rvalue","","",337,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"super_operand","","",337,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"location"}],"output":null}],[11,"super_lvalue","","",337,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_static","","",337,{"inputs":[{"name":"self"},{"name":"static"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_projection","","",337,{"inputs":[{"name":"self"},{"name":"lvalueprojection"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_projection_elem","","",337,{"inputs":[{"name":"self"},{"name":"lvalueelem"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_local_decl","","",337,{"inputs":[{"name":"self"},{"name":"localdecl"}],"output":null}],[11,"super_visibility_scope","","",337,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":null}],[11,"super_branch","","",337,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"super_constant","","",337,{"inputs":[{"name":"self"},{"name":"constant"},{"name":"location"}],"output":null}],[11,"super_literal","","",337,{"inputs":[{"name":"self"},{"name":"literal"},{"name":"location"}],"output":null}],[11,"super_def_id","","",337,{"inputs":[{"name":"self"},{"name":"defid"}],"output":null}],[11,"super_span","","",337,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"super_source_info","","",337,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":null}],[11,"super_ty","","",337,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"super_region","","",337,{"inputs":[{"name":"self"},{"name":"region"}],"output":null}],[11,"super_const","","",337,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"super_substs","","",337,{"inputs":[{"name":"self"},{"name":"substs"}],"output":null}],[11,"super_generator_interior","","",337,{"inputs":[{"name":"self"},{"name":"generatorinterior"}],"output":null}],[11,"super_closure_substs","","",337,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":null}],[11,"super_const_int","","",337,{"inputs":[{"name":"self"},{"name":"constint"}],"output":null}],[11,"super_const_usize","","",337,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":null}],[11,"visit_location","","",337,{"inputs":[{"name":"self"},{"name":"mir"},{"name":"location"}],"output":null}],[11,"clone","","",334,{"inputs":[{"name":"self"}],"output":{"name":"lookup"}}],[11,"fmt","","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",335,{"inputs":[{"name":"self"}],"output":{"name":"lvaluecontext"}}],[11,"fmt","","",335,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",335,{"inputs":[{"name":"self"},{"name":"lvaluecontext"}],"output":{"name":"bool"}}],[11,"ne","","",335,{"inputs":[{"name":"self"},{"name":"lvaluecontext"}],"output":{"name":"bool"}}],[11,"is_drop","","Returns true if this lvalue context represents a drop.",335,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_storage_marker","","Returns true if this lvalue context represents a storage live or storage dead marker.",335,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_storage_live_marker","","Returns true if this lvalue context represents a storage live marker.",335,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_storage_dead_marker","","Returns true if this lvalue context represents a storage dead marker.",335,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mutating_use","","Returns true if this lvalue context represents a use that potentially changes the value.",335,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_nonmutating_use","","Returns true if this lvalue context represents a use that does not change the value.",335,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_use","","",335,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"transform","rustc::mir","See the README for details on writing your own pass.",null,null],[3,"MirSuite","rustc::mir::transform","",null,null],[12,"0","","",338,null],[3,"MirPassIndex","","",null,null],[12,"0","","",339,null],[3,"Passes","","A manager for MIR passes.",null,null],[4,"MirSource","","Where a specific Mir comes from.",null,null],[13,"Fn","","Functions and methods.",340,null],[13,"Const","","Constants and associated constants.",340,null],[13,"Static","","Initializer of a `static` item.",340,null],[13,"Promoted","","Promoted rvalues within a function.",340,null],[13,"GeneratorDrop","","Drop glue for a generator.",340,null],[5,"default_name","","Generates a default name for the pass based on the name of the type `T`.",null,{"inputs":[],"output":{"name":"cow"}}],[6,"PassId","","The full suite of types that identifies a particular application of a pass to a def-id.",null,null],[17,"MIR_SUITES","","The number of \"pass suites\" that we have:",null,null],[17,"MIR_CONST","","Run the passes we need to do constant qualification and evaluation.",null,null],[17,"MIR_VALIDATED","","Run the passes we need to consider the MIR validated and ready for borrowck etc.",null,null],[17,"MIR_OPTIMIZED","","Run the passes we need to consider the MIR optimized.",null,null],[8,"PassHook","","A pass hook is invoked both before and after each pass executes. This is primarily used to dump MIR for debugging.",null,null],[10,"on_mir_pass","","",341,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsuite"},{"name":"mirpassindex"},{"name":"str"},{"name":"mirsource"},{"name":"mir"},{"name":"bool"}],"output":null}],[8,"MirPass","","A streamlined trait that you can implement to create a pass; the pass will be named after the type, and it will consist of a main loop that goes over each available MIR and applies `run_pass`.",null,null],[11,"name","","",342,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[10,"run_pass","","",342,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"fmt","","",340,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",340,{"inputs":[{"name":"self"}],"output":{"name":"mirsource"}}],[11,"from_local_def_id","","",340,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mirsource"}}],[11,"from_node","","",340,{"inputs":[{"name":"tyctxt"},{"name":"nodeid"}],"output":{"name":"mirsource"}}],[11,"item_id","","",340,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"clone","","",338,{"inputs":[{"name":"self"}],"output":{"name":"mirsuite"}}],[11,"fmt","","",338,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",338,{"inputs":[{"name":"self"},{"name":"mirsuite"}],"output":{"name":"bool"}}],[11,"ne","","",338,{"inputs":[{"name":"self"},{"name":"mirsuite"}],"output":{"name":"bool"}}],[11,"hash","","",338,null],[11,"partial_cmp","","",338,{"inputs":[{"name":"self"},{"name":"mirsuite"}],"output":{"name":"option"}}],[11,"lt","","",338,{"inputs":[{"name":"self"},{"name":"mirsuite"}],"output":{"name":"bool"}}],[11,"le","","",338,{"inputs":[{"name":"self"},{"name":"mirsuite"}],"output":{"name":"bool"}}],[11,"gt","","",338,{"inputs":[{"name":"self"},{"name":"mirsuite"}],"output":{"name":"bool"}}],[11,"ge","","",338,{"inputs":[{"name":"self"},{"name":"mirsuite"}],"output":{"name":"bool"}}],[11,"cmp","","",338,{"inputs":[{"name":"self"},{"name":"mirsuite"}],"output":{"name":"ordering"}}],[11,"clone","","",339,{"inputs":[{"name":"self"}],"output":{"name":"mirpassindex"}}],[11,"fmt","","",339,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",339,{"inputs":[{"name":"self"},{"name":"mirpassindex"}],"output":{"name":"bool"}}],[11,"ne","","",339,{"inputs":[{"name":"self"},{"name":"mirpassindex"}],"output":{"name":"bool"}}],[11,"hash","","",339,null],[11,"partial_cmp","","",339,{"inputs":[{"name":"self"},{"name":"mirpassindex"}],"output":{"name":"option"}}],[11,"lt","","",339,{"inputs":[{"name":"self"},{"name":"mirpassindex"}],"output":{"name":"bool"}}],[11,"le","","",339,{"inputs":[{"name":"self"},{"name":"mirpassindex"}],"output":{"name":"bool"}}],[11,"gt","","",339,{"inputs":[{"name":"self"},{"name":"mirpassindex"}],"output":{"name":"bool"}}],[11,"ge","","",339,{"inputs":[{"name":"self"},{"name":"mirpassindex"}],"output":{"name":"bool"}}],[11,"cmp","","",339,{"inputs":[{"name":"self"},{"name":"mirpassindex"}],"output":{"name":"ordering"}}],[11,"clone","","",343,{"inputs":[{"name":"self"}],"output":{"name":"passes"}}],[11,"new","","",343,{"inputs":[],"output":{"name":"passes"}}],[11,"push_pass","","Pushes a built-in pass.",343,{"inputs":[{"name":"self"},{"name":"mirsuite"},{"name":"t"}],"output":null}],[11,"push_hook","","Pushes a pass hook.",343,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"passes","","",343,null],[11,"hooks","","",343,null],[0,"traversal","rustc::mir","",null,null],[3,"Preorder","rustc::mir::traversal","Preorder traversal of a graph.",null,null],[3,"Postorder","","Postorder traversal of a graph.",null,null],[3,"ReversePostorder","","Reverse postorder traversal of a graph",null,null],[5,"preorder","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"preorder"}}],[5,"postorder","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"postorder"}}],[5,"reverse_postorder","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"reversepostorder"}}],[11,"clone","","",344,{"inputs":[{"name":"self"}],"output":{"name":"preorder"}}],[11,"new","","",344,{"inputs":[{"name":"mir"},{"name":"basicblock"}],"output":{"name":"preorder"}}],[11,"next","","",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",345,{"inputs":[{"name":"mir"},{"name":"basicblock"}],"output":{"name":"postorder"}}],[11,"next","","",345,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",346,{"inputs":[{"name":"self"}],"output":{"name":"reversepostorder"}}],[11,"new","","",346,{"inputs":[{"name":"mir"},{"name":"basicblock"}],"output":{"name":"reversepostorder"}}],[11,"reset","","",346,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",346,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"LvalueProjection","rustc::mir","Alias for projections as they appear in lvalues, where the base is an lvalue and the index is a local.",null,null],[6,"LvalueElem","","Alias for projections as they appear in lvalues, where the base is an lvalue and the index is a local.",null,null],[17,"START_BLOCK","","where execution begins",null,null],[17,"RETURN_POINTER","","",null,null],[17,"ARGUMENT_VISIBILITY_SCOPE","","",null,null],[8,"HasLocalDecls","","",null,null],[10,"local_decls","","",347,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"local_decls","","",292,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"clone","","",292,{"inputs":[{"name":"self"}],"output":{"name":"mir"}}],[11,"encode","","",292,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",292,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",292,{"inputs":[{"name":"indexvec"},{"name":"indexvec"},{"name":"clearondecode"},{"name":"indexvec"},{"name":"ty"},{"name":"option"},{"name":"indexvec"},{"name":"usize"},{"name":"vec"},{"name":"span"}],"output":{"name":"self"}}],[11,"basic_blocks","","",292,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"basic_blocks_mut","","",292,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"predecessors","","",292,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"predecessors_for","","",292,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"ref"}}],[11,"dominators","","",292,{"inputs":[{"name":"self"}],"output":{"name":"dominators"}}],[11,"local_kind","","",292,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"localkind"}}],[11,"temps_iter","","Returns an iterator over all temporaries.",292,null],[11,"vars_iter","","Returns an iterator over all user-declared locals.",292,null],[11,"args_iter","","Returns an iterator over all function arguments.",292,null],[11,"vars_and_temps_iter","","Returns an iterator over all user-defined variables and compiler-generated temporaries (all locals that are neither arguments nor the return pointer).",292,null],[11,"make_statement_nop","","Changes a statement to a nop. This is both faster than deleting instructions and avoids invalidating statement indices in `Location`s.",292,{"inputs":[{"name":"self"},{"name":"location"}],"output":null}],[11,"source_info","","Returns the source info associated with `location`.",292,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"sourceinfo"}}],[11,"clone","","",293,{"inputs":[{"name":"self"}],"output":{"name":"visibilityscopeinfo"}}],[11,"fmt","","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",313,{"inputs":[{"name":"self"}],"output":{"name":"safety"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash_stable","","",292,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"index","","",292,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"basicblockdata"}}],[11,"index_mut","","",292,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"basicblockdata"}}],[11,"clone","","",314,{"inputs":[{"name":"self"}],"output":{"name":"clearondecode"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",314,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",314,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",294,{"inputs":[{"name":"self"}],"output":{"name":"sourceinfo"}}],[11,"fmt","","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",294,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":{"name":"bool"}}],[11,"encode","","",294,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",294,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",294,null],[11,"clone","","",315,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",315,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"encode","","",315,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",315,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",316,{"inputs":[{"name":"self"}],"output":{"name":"borrowkind"}}],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",316,{"inputs":[{"name":"self"},{"name":"borrowkind"}],"output":{"name":"bool"}}],[11,"encode","","",316,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",316,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",295,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",295,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",295,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"hash","","",295,null],[11,"partial_cmp","","",295,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"option"}}],[11,"lt","","",295,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"le","","",295,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"gt","","",295,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ge","","",295,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"cmp","","",295,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"ordering"}}],[11,"encode","","",295,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",295,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",295,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",295,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",317,{"inputs":[{"name":"self"},{"name":"localkind"}],"output":{"name":"bool"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",296,{"inputs":[{"name":"self"}],"output":{"name":"localdecl"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",296,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",296,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new_temp","","Create a new `LocalDecl` for a temporary.",296,{"inputs":[{"name":"ty"},{"name":"span"}],"output":{"name":"self"}}],[11,"new_internal","","Create a new `LocalDecl` for a internal temporary.",296,{"inputs":[{"name":"ty"},{"name":"span"}],"output":{"name":"self"}}],[11,"new_return_pointer","","Builds a `LocalDecl` for the return pointer.",296,{"inputs":[{"name":"ty"},{"name":"span"}],"output":{"name":"localdecl"}}],[11,"clone","","",297,{"inputs":[{"name":"self"}],"output":{"name":"upvardecl"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",297,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",297,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",298,{"inputs":[{"name":"self"}],"output":{"name":"basicblock"}}],[11,"eq","","",298,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"hash","","",298,null],[11,"partial_cmp","","",298,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"option"}}],[11,"lt","","",298,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"le","","",298,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"gt","","",298,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"ge","","",298,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"cmp","","",298,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"ordering"}}],[11,"encode","","",298,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",298,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",298,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",298,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"basicblockdata"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",299,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",299,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",300,{"inputs":[{"name":"self"}],"output":{"name":"terminator"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",300,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",300,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",318,{"inputs":[{"name":"self"}],"output":{"name":"terminatorkind"}}],[11,"encode","","",318,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",318,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"successors","","",300,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"successors_mut","","",300,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"if_","","",318,{"inputs":[{"name":"tyctxt"},{"name":"operand"},{"name":"basicblock"},{"name":"basicblock"}],"output":{"name":"terminatorkind"}}],[11,"successors","","",318,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"successors_mut","","",318,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","",299,{"inputs":[{"name":"option"}],"output":{"name":"basicblockdata"}}],[11,"terminator","","Accessor for terminator.",299,{"inputs":[{"name":"self"}],"output":{"name":"terminator"}}],[11,"terminator_mut","","",299,{"inputs":[{"name":"self"}],"output":{"name":"terminator"}}],[11,"retain_statements","","",299,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_head","","Write the \"head\" part of the terminator; that is, its name and the data it uses to pick the successor basic block, if any. The only information not included is the list of possible successors, which may be rendered differently between the text and the graphviz format.",318,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt_successor_labels","","Return the list of labels for the edges to the successor basic blocks.",318,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",319,{"inputs":[{"name":"self"}],"output":{"name":"assertmessage"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",319,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",319,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",301,{"inputs":[{"name":"self"}],"output":{"name":"statement"}}],[11,"encode","","",301,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",301,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"make_nop","","Changes a statement to a nop. This is both faster than deleting instructions and avoids invalidating statement indices in `Location`s.",301,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",320,{"inputs":[{"name":"self"}],"output":{"name":"statementkind"}}],[11,"fmt","","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",320,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",320,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",321,{"inputs":[{"name":"self"}],"output":{"name":"validationop"}}],[11,"encode","","",321,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",321,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",321,{"inputs":[{"name":"self"},{"name":"validationop"}],"output":{"name":"bool"}}],[11,"ne","","",321,{"inputs":[{"name":"self"},{"name":"validationop"}],"output":{"name":"bool"}}],[11,"fmt","","",321,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",302,{"inputs":[{"name":"self"}],"output":{"name":"validationoperand"}}],[11,"encode","","",302,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",302,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",322,{"inputs":[{"name":"self"}],"output":{"name":"lvalue"}}],[11,"eq","","",322,{"inputs":[{"name":"self"},{"name":"lvalue"}],"output":{"name":"bool"}}],[11,"ne","","",322,{"inputs":[{"name":"self"},{"name":"lvalue"}],"output":{"name":"bool"}}],[11,"encode","","",322,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",322,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",303,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"eq","","",303,{"inputs":[{"name":"self"},{"name":"static"}],"output":{"name":"bool"}}],[11,"ne","","",303,{"inputs":[{"name":"self"},{"name":"static"}],"output":{"name":"bool"}}],[11,"encode","","",303,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",303,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash_stable","","",303,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"clone","","",304,{"inputs":[{"name":"self"}],"output":{"name":"projection"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",304,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"ne","","",304,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"hash","","",304,null],[11,"encode","","",304,{"inputs":[{"name":"self"},{"name":"__sbvt"}],"output":{"name":"result"}}],[11,"decode","","",304,{"inputs":[{"name":"__dbvt"}],"output":{"name":"result"}}],[11,"clone","","",323,{"inputs":[{"name":"self"}],"output":{"name":"projectionelem"}}],[11,"fmt","","",323,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",323,{"inputs":[{"name":"self"},{"name":"projectionelem"}],"output":{"name":"bool"}}],[11,"ne","","",323,{"inputs":[{"name":"self"},{"name":"projectionelem"}],"output":{"name":"bool"}}],[11,"hash","","",323,null],[11,"encode","","",323,{"inputs":[{"name":"self"},{"name":"__svt"}],"output":{"name":"result"}}],[11,"decode","","",323,{"inputs":[{"name":"__dvt"}],"output":{"name":"result"}}],[11,"clone","","",305,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",305,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",305,null],[11,"partial_cmp","","",305,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"option"}}],[11,"lt","","",305,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"le","","",305,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"gt","","",305,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ge","","",305,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"cmp","","",305,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"ordering"}}],[11,"encode","","",305,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",305,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",305,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","","",322,{"inputs":[{"name":"self"},{"name":"field"},{"name":"ty"}],"output":{"name":"lvalue"}}],[11,"deref","","",322,{"inputs":[{"name":"self"}],"output":{"name":"lvalue"}}],[11,"downcast","","",322,{"inputs":[{"name":"self"},{"name":"adtdef"},{"name":"usize"}],"output":{"name":"lvalue"}}],[11,"index","","",322,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"lvalue"}}],[11,"elem","","",322,{"inputs":[{"name":"self"},{"name":"lvalueelem"}],"output":{"name":"lvalue"}}],[11,"fmt","","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",306,{"inputs":[{"name":"self"}],"output":{"name":"visibilityscope"}}],[11,"eq","","",306,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"ne","","",306,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"hash","","",306,null],[11,"partial_cmp","","",306,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"option"}}],[11,"lt","","",306,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"le","","",306,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"gt","","",306,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"ge","","",306,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"cmp","","",306,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"ordering"}}],[11,"encode","","",306,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",306,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",306,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",307,{"inputs":[{"name":"self"}],"output":{"name":"visibilityscopedata"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",307,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",307,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",324,{"inputs":[{"name":"self"}],"output":{"name":"operand"}}],[11,"eq","","",324,{"inputs":[{"name":"self"},{"name":"operand"}],"output":{"name":"bool"}}],[11,"ne","","",324,{"inputs":[{"name":"self"},{"name":"operand"}],"output":{"name":"bool"}}],[11,"encode","","",324,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",324,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",324,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"function_handle","","",324,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"substs"},{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",325,{"inputs":[{"name":"self"}],"output":{"name":"rvalue"}}],[11,"encode","","",325,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",325,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",326,{"inputs":[{"name":"self"}],"output":{"name":"castkind"}}],[11,"fmt","","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",326,{"inputs":[{"name":"self"},{"name":"castkind"}],"output":{"name":"bool"}}],[11,"encode","","",326,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",326,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",327,{"inputs":[{"name":"self"}],"output":{"name":"aggregatekind"}}],[11,"fmt","","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",327,{"inputs":[{"name":"self"},{"name":"aggregatekind"}],"output":{"name":"bool"}}],[11,"ne","","",327,{"inputs":[{"name":"self"},{"name":"aggregatekind"}],"output":{"name":"bool"}}],[11,"encode","","",327,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",327,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",328,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"fmt","","",328,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",328,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"encode","","",328,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",328,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"is_checkable","","",328,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",329,{"inputs":[{"name":"self"}],"output":{"name":"nullop"}}],[11,"fmt","","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",329,{"inputs":[{"name":"self"},{"name":"nullop"}],"output":{"name":"bool"}}],[11,"encode","","",329,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",329,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",330,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"fmt","","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",330,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"encode","","",330,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",330,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",325,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",308,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"eq","","",308,{"inputs":[{"name":"self"},{"name":"constant"}],"output":{"name":"bool"}}],[11,"ne","","",308,{"inputs":[{"name":"self"},{"name":"constant"}],"output":{"name":"bool"}}],[11,"hash","","",308,null],[11,"encode","","",308,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",308,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",309,{"inputs":[{"name":"self"}],"output":{"name":"promoted"}}],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"hash","","",309,null],[11,"partial_cmp","","",309,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"option"}}],[11,"lt","","",309,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"le","","",309,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"gt","","",309,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"ge","","",309,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"cmp","","",309,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"ordering"}}],[11,"encode","","",309,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",309,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",309,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",309,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",331,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"eq","","",331,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",331,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"hash","","",331,null],[11,"encode","","",331,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",331,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"num_nodes","","",292,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"start_node","","",292,null],[11,"predecessors","","",292,null],[11,"successors","","",292,null],[11,"clone","","",310,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"eq","","",310,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"hash","","",310,null],[11,"cmp","","",310,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",310,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"option"}}],[11,"lt","","",310,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"le","","",310,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"gt","","",310,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ge","","",310,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dominates","","",310,{"inputs":[{"name":"self"},{"name":"location"},{"name":"dominators"}],"output":{"name":"bool"}}],[11,"clone","","",311,{"inputs":[{"name":"self"}],"output":{"name":"unsafetyviolation"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",311,{"inputs":[{"name":"self"},{"name":"unsafetyviolation"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"self"},{"name":"unsafetyviolation"}],"output":{"name":"bool"}}],[11,"hash","","",311,null],[11,"clone","","",312,{"inputs":[{"name":"self"}],"output":{"name":"generatorlayout"}}],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",312,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",312,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"super_fold_with","","",292,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",292,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",312,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",296,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",296,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",299,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",299,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",302,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",301,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",300,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",300,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",322,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",322,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",325,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",325,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",324,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",304,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",304,{"inputs":[{"name":"self"},{"name":"vs"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",308,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",331,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",331,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[0,"session","rustc","",null,null],[3,"CodeStats","rustc::session","",null,null],[3,"FieldInfo","","",null,null],[12,"name","","",348,null],[12,"offset","","",348,null],[12,"size","","",348,null],[12,"align","","",348,null],[3,"TypeSizeInfo","","",null,null],[12,"kind","","",349,null],[12,"type_description","","",349,null],[12,"align","","",349,null],[12,"overall_size","","",349,null],[12,"opt_discr_size","","",349,null],[12,"variants","","",349,null],[3,"VariantInfo","","",null,null],[12,"name","","",350,null],[12,"kind","","",350,null],[12,"size","","",350,null],[12,"align","","",350,null],[12,"fields","","",350,null],[3,"Session","","Represents the data associated with a compilation session for a single crate.",null,null],[12,"target","","",351,null],[12,"host","","",351,null],[12,"opts","","",351,null],[12,"parse_sess","","",351,null],[12,"entry_fn","","For a library crate, this is always none",351,null],[12,"entry_type","","",351,null],[12,"plugin_registrar_fn","","",351,null],[12,"derive_registrar_fn","","",351,null],[12,"default_sysroot","","",351,null],[12,"local_crate_source_file","","The name of the root source file of the crate, in the local file system. `None` means that there is no source file.",351,null],[12,"working_dir","","The directory the compiler has been executed in plus a flag indicating if the value stored here has been affected by path remapping.",351,null],[12,"lint_store","","",351,null],[12,"buffered_lints","","",351,null],[12,"one_time_diagnostics","","Set of (LintId, Option, message) tuples tracking lint (sub)diagnostics that have been set once, but should not be set again, in order to avoid redundantly verbose output (Issue #24690).",351,null],[12,"plugin_llvm_passes","","",351,null],[12,"plugin_attributes","","",351,null],[12,"crate_types","","",351,null],[12,"dependency_formats","","",351,null],[12,"crate_disambiguator","","The crate_disambiguator is constructed out of all the `-C metadata` arguments passed to the compiler. Its value together with the crate-name forms a unique global identifier for the crate. It is used to allow multiple crates with the same name to coexist. See the trans::back::symbol_names module for more information.",351,null],[12,"features","","",351,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization.",351,null],[12,"type_length_limit","","The maximum length of types during monomorphization.",351,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime dependency if it didn't already find one, and this tracks what was injected.",351,null],[12,"allocator_kind","","",351,null],[12,"injected_panic_runtime","","",351,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of the localized span for the macro body) to the macro name and definition span in the source crate.",351,null],[12,"perf_stats","","Some measurements that are being gathered during compilation.",351,null],[12,"code_stats","","Data about code being compiled, gathered during compilation.",351,null],[12,"print_fuel_crate","","If -zprint-fuel=crate, Some(crate).",351,null],[12,"print_fuel","","Always set to zero and incremented so that we can print fuel expended by a crate.",351,null],[12,"jobserver_from_env","","Loaded up early on in the initialization of this `Session` to avoid false positives about a job server in our environment.",351,null],[12,"has_global_allocator","","Metadata about the allocators for the current crate being compiled",351,null],[3,"PerfStats","","",null,null],[12,"svh_time","","The accumulated time needed for computing the SVH of the crate",352,null],[12,"incr_comp_hashes_time","","The accumulated time spent on computing incr. comp. hashes",352,null],[12,"incr_comp_hashes_count","","The number of incr. comp. hash computations performed",352,null],[12,"incr_comp_bytes_hashed","","The number of bytes hashed when computing ICH values",352,null],[12,"symbol_hash_time","","The accumulated time spent on computing symbol hashes",352,null],[12,"decode_def_path_tables_time","","The accumulated time spent decoding def path tables from metadata",352,null],[4,"DataTypeKind","","",null,null],[13,"Struct","","",353,null],[13,"Union","","",353,null],[13,"Enum","","",353,null],[13,"Closure","","",353,null],[4,"SizeKind","","",null,null],[13,"Exact","","",354,null],[13,"Min","","",354,null],[4,"IncrCompSession","","Holds data on the current incremental compilation session, if there is one.",null,null],[13,"NotInitialized","","This is the state the session will be in until the incr. comp. dir is needed.",355,null],[13,"Active","","This is the state during which the session directory is private and can be modified.",355,null],[12,"session_directory","rustc::session::IncrCompSession","",355,null],[12,"lock_file","","",355,null],[12,"load_dep_graph","","",355,null],[13,"Finalized","rustc::session","This is the state after the session directory has been finalized. In this state, the contents of the directory must not be modified any more.",355,null],[12,"session_directory","rustc::session::IncrCompSession","",355,null],[13,"InvalidBecauseOfErrors","rustc::session","This is an error state that is reached when some compilation error has occurred. It indicates that the contents of the session directory must not be used, since they might be invalid.",355,null],[12,"session_directory","rustc::session::IncrCompSession","",355,null],[4,"CompileIncomplete","rustc::session","",null,null],[13,"Stopped","","",356,null],[13,"Errored","","",356,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"option"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"handler"},{"name":"rc"}],"output":{"name":"session"}}],[5,"early_error","","",null,null],[5,"early_warn","","",null,{"inputs":[{"name":"erroroutputtype"},{"name":"str"}],"output":null}],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"compileresult"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[11,"clone","","",350,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"eq","","",350,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",350,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"hash","","",350,null],[11,"fmt","","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",354,{"inputs":[{"name":"self"}],"output":{"name":"sizekind"}}],[11,"eq","","",354,{"inputs":[{"name":"self"},{"name":"sizekind"}],"output":{"name":"bool"}}],[11,"hash","","",354,null],[11,"fmt","","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",348,{"inputs":[{"name":"self"}],"output":{"name":"fieldinfo"}}],[11,"eq","","",348,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"ne","","",348,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"hash","","",348,null],[11,"fmt","","",348,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",353,{"inputs":[{"name":"adtkind"}],"output":{"name":"self"}}],[11,"clone","","",353,{"inputs":[{"name":"self"}],"output":{"name":"datatypekind"}}],[11,"eq","","",353,{"inputs":[{"name":"self"},{"name":"datatypekind"}],"output":{"name":"bool"}}],[11,"hash","","",353,null],[11,"fmt","","",353,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",349,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",349,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"hash","","",349,null],[11,"fmt","","",349,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",357,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"ne","","",357,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"fmt","","",357,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",357,{"inputs":[],"output":{"name":"self"}}],[11,"record_type_size","","",357,{"inputs":[{"name":"self"},{"name":"datatypekind"},{"name":"s"},{"name":"align"},{"name":"size"},{"name":"option"},{"name":"vec"}],"output":null}],[11,"print_type_sizes","","",357,{"inputs":[{"name":"self"}],"output":null}],[0,"config","","Contains infrastructure for configuring the compiler, including parsing command line options.",null,null],[3,"Config","rustc::session::config","",null,null],[12,"target","","",358,null],[12,"isize_ty","","",358,null],[12,"usize_ty","","",358,null],[3,"OutputTypes","","",null,null],[3,"Externs","","",null,null],[3,"Options","","",null,null],[12,"crate_types","","",359,null],[12,"optimize","","",359,null],[12,"debug_assertions","","",359,null],[12,"debuginfo","","",359,null],[12,"lint_opts","","",359,null],[12,"lint_cap","","",359,null],[12,"describe_lints","","",359,null],[12,"output_types","","",359,null],[12,"search_paths","","",359,null],[12,"libs","","",359,null],[12,"maybe_sysroot","","",359,null],[12,"target_triple","","",359,null],[12,"test","","",359,null],[12,"error_format","","",359,null],[12,"incremental","","",359,null],[12,"debugging_opts","","",359,null],[12,"prints","","",359,null],[12,"cg","","",359,null],[12,"externs","","",359,null],[12,"crate_name","","",359,null],[12,"alt_std_name","","",359,null],[12,"unstable_features","","",359,null],[12,"actually_rustdoc","","",359,null],[12,"cli_forced_codegen_units","","",359,null],[3,"OutputFilenames","","",null,null],[12,"out_directory","","",360,null],[12,"out_filestem","","",360,null],[12,"single_output_file","","",360,null],[12,"extra","","",360,null],[12,"outputs","","",360,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",361,null],[12,"linker","","",361,null],[12,"link_arg","","",361,null],[12,"link_args","","",361,null],[12,"link_dead_code","","",361,null],[12,"lto","","",361,null],[12,"target_cpu","","",361,null],[12,"target_feature","","",361,null],[12,"passes","","",361,null],[12,"llvm_args","","",361,null],[12,"save_temps","","",361,null],[12,"rpath","","",361,null],[12,"overflow_checks","","",361,null],[12,"no_prepopulate_passes","","",361,null],[12,"no_vectorize_loops","","",361,null],[12,"no_vectorize_slp","","",361,null],[12,"soft_float","","",361,null],[12,"prefer_dynamic","","",361,null],[12,"no_integrated_as","","",361,null],[12,"no_redzone","","",361,null],[12,"relocation_model","","",361,null],[12,"code_model","","",361,null],[12,"metadata","","",361,null],[12,"extra_filename","","",361,null],[12,"codegen_units","","",361,null],[12,"remark","","",361,null],[12,"no_stack_check","","",361,null],[12,"debuginfo","","",361,null],[12,"opt_level","","",361,null],[12,"debug_assertions","","",361,null],[12,"inline_threshold","","",361,null],[12,"panic","","",361,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",362,null],[12,"span_free_formats","","",362,null],[12,"identify_regions","","",362,null],[12,"emit_end_regions","","",362,null],[12,"borrowck_mir","","",362,null],[12,"time_passes","","",362,null],[12,"count_llvm_insns","","",362,null],[12,"time_llvm_passes","","",362,null],[12,"input_stats","","",362,null],[12,"trans_stats","","",362,null],[12,"asm_comments","","",362,null],[12,"no_verify","","",362,null],[12,"borrowck_stats","","",362,null],[12,"no_landing_pads","","",362,null],[12,"debug_llvm","","",362,null],[12,"meta_stats","","",362,null],[12,"print_link_args","","",362,null],[12,"print_llvm_passes","","",362,null],[12,"ast_json","","",362,null],[12,"ast_json_noexpand","","",362,null],[12,"ls","","",362,null],[12,"save_analysis","","",362,null],[12,"print_move_fragments","","",362,null],[12,"flowgraph_print_loans","","",362,null],[12,"flowgraph_print_moves","","",362,null],[12,"flowgraph_print_assigns","","",362,null],[12,"flowgraph_print_all","","",362,null],[12,"print_region_graph","","",362,null],[12,"parse_only","","",362,null],[12,"no_trans","","",362,null],[12,"treat_err_as_bug","","",362,null],[12,"continue_parse_after_error","","",362,null],[12,"incremental","","",362,null],[12,"incremental_cc","","",362,null],[12,"incremental_info","","",362,null],[12,"incremental_dump_hash","","",362,null],[12,"dump_dep_graph","","",362,null],[12,"query_dep_graph","","",362,null],[12,"profile_queries","","",362,null],[12,"profile_queries_and_keys","","",362,null],[12,"no_analysis","","",362,null],[12,"extra_plugins","","",362,null],[12,"unstable_options","","",362,null],[12,"force_overflow_checks","","",362,null],[12,"trace_macros","","",362,null],[12,"debug_macros","","",362,null],[12,"enable_nonzeroing_move_hints","","",362,null],[12,"keep_hygiene_data","","",362,null],[12,"keep_ast","","",362,null],[12,"show_span","","",362,null],[12,"print_type_sizes","","",362,null],[12,"print_trans_items","","",362,null],[12,"mir_opt_level","","",362,null],[12,"mutable_noalias","","",362,null],[12,"dump_mir","","",362,null],[12,"dump_mir_dir","","",362,null],[12,"dump_mir_exclude_pass_number","","",362,null],[12,"mir_emit_validate","","",362,null],[12,"perf_stats","","",362,null],[12,"hir_stats","","",362,null],[12,"mir_stats","","",362,null],[12,"always_encode_mir","","",362,null],[12,"osx_rpath_install_name","","",362,null],[12,"sanitizer","","",362,null],[12,"linker_flavor","","",362,null],[12,"fuel","","",362,null],[12,"print_fuel","","",362,null],[12,"remap_path_prefix_from","","",362,null],[12,"remap_path_prefix_to","","",362,null],[12,"force_unstable_if_unmarked","","",362,null],[12,"pre_link_arg","","",362,null],[12,"pre_link_args","","",362,null],[12,"profile","","",362,null],[12,"relro_level","","",362,null],[12,"nll","","",362,null],[12,"trans_time_graph","","",362,null],[12,"thinlto","","",362,null],[12,"inline_in_all_cgus","","",362,null],[3,"RustcOptGroup","","",null,null],[12,"apply","","",363,null],[12,"name","","",363,null],[12,"stability","","",363,null],[4,"Sanitizer","","",null,null],[13,"Address","","",364,null],[13,"Leak","","",364,null],[13,"Memory","","",364,null],[13,"Thread","","",364,null],[4,"OptLevel","","",null,null],[13,"No","","",365,null],[13,"Less","","",365,null],[13,"Default","","",365,null],[13,"Aggressive","","",365,null],[13,"Size","","",365,null],[13,"SizeMin","","",365,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",366,null],[13,"LimitedDebugInfo","","",366,null],[13,"FullDebugInfo","","",366,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",367,null],[13,"Assembly","","",367,null],[13,"LlvmAssembly","","",367,null],[13,"Mir","","",367,null],[13,"Metadata","","",367,null],[13,"Object","","",367,null],[13,"Exe","","",367,null],[13,"DepInfo","","",367,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",368,null],[13,"Json","","",368,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",369,null],[13,"Sysroot","","",369,null],[13,"CrateName","","",369,null],[13,"Cfg","","",369,null],[13,"TargetList","","",369,null],[13,"TargetCPUs","","",369,null],[13,"TargetFeatures","","",369,null],[13,"RelocationModels","","",369,null],[13,"CodeModels","","",369,null],[13,"TargetSpec","","",369,null],[13,"NativeStaticLibs","","",369,null],[4,"Input","","",null,null],[13,"File","","Load source from file",370,null],[13,"Str","","",370,null],[12,"name","rustc::session::config::Input","String that is shown in place of a filename",370,null],[12,"input","","Anonymous source string",370,null],[4,"EntryFnType","rustc::session::config","",null,null],[13,"EntryMain","","",371,null],[13,"EntryStart","","",371,null],[13,"EntryNone","","",371,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",372,null],[13,"CrateTypeDylib","","",372,null],[13,"CrateTypeRlib","","",372,null],[13,"CrateTypeStaticlib","","",372,null],[13,"CrateTypeCdylib","","",372,null],[13,"CrateTypeProcMacro","","",372,null],[4,"Passes","","",null,null],[13,"SomePasses","","",373,null],[13,"AllPasses","","",373,null],[4,"OptionStability","","",null,null],[13,"Stable","","",374,null],[13,"Unstable","","",374,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"crateconfig"}}],[5,"build_configuration","","",null,{"inputs":[{"name":"session"},{"name":"crateconfig"}],"output":{"name":"crateconfig"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"crateconfig"}}],[5,"build_session_options_and_crate_config","","",null,null],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[6,"CodegenSetter","rustc::session::config","",null,null],[6,"DebuggingSetter","","",null,null],[17,"RUST_CGU_EXT","","",null,null],[17,"CG_OPTIONS","","",null,null],[17,"DB_OPTIONS","","",null,null],[11,"clone","","",364,{"inputs":[{"name":"self"}],"output":{"name":"sanitizer"}}],[11,"hash","","",364,null],[11,"fmt","","",364,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",365,{"inputs":[{"name":"self"}],"output":{"name":"optlevel"}}],[11,"eq","","",365,{"inputs":[{"name":"self"},{"name":"optlevel"}],"output":{"name":"bool"}}],[11,"hash","","",365,null],[11,"clone","","",366,{"inputs":[{"name":"self"}],"output":{"name":"debuginfolevel"}}],[11,"eq","","",366,{"inputs":[{"name":"self"},{"name":"debuginfolevel"}],"output":{"name":"bool"}}],[11,"hash","","",366,null],[11,"clone","","",367,{"inputs":[{"name":"self"}],"output":{"name":"outputtype"}}],[11,"eq","","",367,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"hash","","",367,null],[11,"fmt","","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",367,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"cmp","","",367,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"ordering"}}],[11,"encode","","",367,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",367,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash_stable","","",367,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",367,null],[11,"extension","","",367,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",368,{"inputs":[{"name":"self"}],"output":{"name":"erroroutputtype"}}],[11,"fmt","","",368,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",368,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"ne","","",368,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"default","","",368,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"clone","","",375,{"inputs":[{"name":"self"}],"output":{"name":"outputtypes"}}],[11,"hash","","",375,null],[11,"hash_stable","","",375,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"new","","",375,null],[11,"get","","",375,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"contains_key","","",375,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"keys","","",375,{"inputs":[{"name":"self"}],"output":{"name":"btreemapkeysiter"}}],[11,"values","","",375,{"inputs":[{"name":"self"}],"output":{"name":"btreemapvaluesiter"}}],[11,"should_trans","","",375,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",376,{"inputs":[{"name":"self"}],"output":{"name":"externs"}}],[11,"hash","","",376,null],[11,"new","","",376,{"inputs":[{"name":"btreemap"}],"output":{"name":"externs"}}],[11,"get","","",376,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",376,{"inputs":[{"name":"self"}],"output":{"name":"btreemapiter"}}],[11,"clone","","",359,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"dep_tracking_hash","","",359,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",369,{"inputs":[{"name":"self"}],"output":{"name":"printrequest"}}],[11,"eq","","",369,{"inputs":[{"name":"self"},{"name":"printrequest"}],"output":{"name":"bool"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"filestem","","",370,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",360,{"inputs":[{"name":"self"}],"output":{"name":"outputfilenames"}}],[11,"hash_stable","","",360,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"path","","",360,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"pathbuf"}}],[11,"temp_path","","Get the path where a compilation artifact of the given type for the given codegen unit should be placed on disk. If codegen_unit_name is None, a path distinct from those of any codegen unit will be generated.",360,{"inputs":[{"name":"self"},{"name":"outputtype"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"temp_path_ext","","Like temp_path, but also supports things where there is no corresponding OutputType, like no-opt-bitcode or lto-bitcode.",360,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","",360,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"filestem","","",360,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",359,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_dep_node_debug_strs","","",359,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"file_path_mapping","","",359,{"inputs":[{"name":"self"}],"output":{"name":"filepathmapping"}}],[11,"clone","","",371,{"inputs":[{"name":"self"}],"output":{"name":"entryfntype"}}],[11,"eq","","",371,{"inputs":[{"name":"self"},{"name":"entryfntype"}],"output":{"name":"bool"}}],[11,"eq","","",372,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",372,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"option"}}],[11,"clone","","",372,{"inputs":[{"name":"self"}],"output":{"name":"cratetype"}}],[11,"cmp","","",372,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"ordering"}}],[11,"hash","","",372,null],[11,"fmt","","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",373,{"inputs":[{"name":"self"}],"output":{"name":"passes"}}],[11,"hash","","",373,null],[11,"is_empty","","",373,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",361,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptions"}}],[11,"clone","","",362,{"inputs":[{"name":"self"}],"output":{"name":"debuggingoptions"}}],[11,"clone","","",374,{"inputs":[{"name":"self"}],"output":{"name":"optionstability"}}],[11,"eq","","",374,{"inputs":[{"name":"self"},{"name":"optionstability"}],"output":{"name":"bool"}}],[11,"fmt","","",374,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_stable","","",363,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stable","","",363,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",363,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"rustcoptgroup"}}],[11,"fmt","","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"filesearch","rustc::session","",null,null],[3,"FileSearch","rustc::session::filesearch","",null,null],[12,"sysroot","","",377,null],[12,"search_paths","","",377,null],[12,"triple","","",377,null],[12,"kind","","",377,null],[4,"FileMatch","","",null,null],[13,"FileMatches","","",378,null],[13,"FileDoesntMatch","","",378,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"clone","","",378,{"inputs":[{"name":"self"}],"output":{"name":"filematch"}}],[11,"for_each_lib_search_path","","",377,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"get_lib_path","","",377,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"search","","",377,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"new","","",377,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",377,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tools_search_paths","","",377,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"search_paths","rustc::session","",null,null],[3,"SearchPaths","rustc::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",379,null],[13,"Crate","","",379,null],[13,"Dependency","","",379,null],[13,"Framework","","",379,null],[13,"ExternFlag","","",379,null],[13,"All","","",379,null],[11,"clone","","",380,{"inputs":[{"name":"self"}],"output":{"name":"searchpaths"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",379,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"bool"}}],[11,"clone","","",379,{"inputs":[{"name":"self"}],"output":{"name":"pathkind"}}],[11,"fmt","","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",379,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"option"}}],[11,"cmp","","",379,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"ordering"}}],[11,"hash","","",379,null],[11,"new","","",380,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",380,{"inputs":[{"name":"self"},{"name":"str"},{"name":"erroroutputtype"}],"output":null}],[11,"iter","","",380,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"iter"}}],[11,"next","","",381,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"CompileResult","rustc::session","",null,null],[11,"local_crate_disambiguator","","",351,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"struct_span_warn","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",351,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",351,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err_with_code","","",351,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",351,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",351,null],[11,"span_fatal_with_code","","",351,null],[11,"fatal","","",351,null],[11,"span_err_or_warn","","",351,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_err","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_err_with_code","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"err","","",351,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"err_count","","",351,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",351,{"inputs":[{"name":"self"}],"output":null}],[11,"compile_status","","",351,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"track_errors","","",351,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"span_warn","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_warn_with_code","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"warn","","",351,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"opt_span_warn","","",351,{"inputs":[{"name":"self"},{"name":"option"},{"name":"str"}],"output":null}],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"note_without_error","","",351,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"span_note_without_error","","",351,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",351,null],[11,"unimpl","","",351,null],[11,"buffer_lint","","",351,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"s"},{"name":"str"}],"output":null}],[11,"reserve_node_ids","","",351,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"next_node_id","","",351,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"diagnostic","","",351,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"diag_span_note_once","","",351,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"lint"},{"name":"span"},{"name":"str"}],"output":null}],[11,"diag_note_once","","",351,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"lint"},{"name":"str"}],"output":null}],[11,"codemap","","",351,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"verbose","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_passes","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"profile_queries","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"profile_queries_and_keys","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"count_llvm_insns","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_llvm_passes","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trans_stats","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta_stats","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"asm_comments","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"no_verify","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrowck_stats","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_llvm_passes","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"emit_end_regions","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lto","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","Returns the panic strategy for this compile session. If the user explicitly selected one using '-C panic', use that, otherwise use the panic strategy defined by the target.",351,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"linker_flavor","","",351,{"inputs":[{"name":"self"}],"output":{"name":"linkerflavor"}}],[11,"no_landing_pads","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unstable_options","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"nonzeroing_move_hints","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"overflow_checks","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"crt_static","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"crt_static_feature","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"must_not_eliminate_frame_pointers","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate_plugin_registrar_symbol","","Returns the symbol name for the registrar function, given the crate Svh and the function DefIndex.",351,{"inputs":[{"name":"self"},{"name":"symbol"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"generate_derive_registrar_symbol","","",351,{"inputs":[{"name":"self"},{"name":"symbol"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"sysroot","","",351,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"target_filesearch","","",351,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"host_filesearch","","",351,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"set_incr_session_load_dep_graph","","",351,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"incr_session_load_dep_graph","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"init_incr_comp_session","","",351,{"inputs":[{"name":"self"},{"name":"pathbuf"},{"name":"lock"},{"name":"bool"}],"output":null}],[11,"finalize_incr_comp_session","","",351,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":null}],[11,"mark_incr_comp_session_as_invalid","","",351,{"inputs":[{"name":"self"}],"output":null}],[11,"incr_comp_session_dir","","",351,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"incr_comp_session_dir_opt","","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_perf_stats","","",351,{"inputs":[{"name":"self"}],"output":null}],[11,"consider_optimizing","","We want to know if we're allowed to do an optimization for crate foo from -z fuel=foo=n. This expends fuel if applicable, and records fuel if applicable.",351,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"bool"}}],[11,"codegen_units","","Returns the number of codegen units that should be used for this compilation",351,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",355,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",356,{"inputs":[{"name":"self"}],"output":{"name":"compileincomplete"}}],[11,"fmt","","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",356,{"inputs":[{"name":"errorreported"}],"output":{"name":"compileincomplete"}}],[0,"traits","rustc","Trait Resolution. See README.md for an overview of how this works.",null,null],[3,"OverlapResult","rustc::traits","",null,null],[12,"impl_header","","",382,null],[12,"intercrate_ambiguity_causes","","",382,null],[3,"FulfillmentContext","","The fulfillment context is used to drive trait resolution.  It consists of a list of obligations that must be (eventually) satisfied. The job is to track which are satisfied, which yielded errors, and which are still pending. At any point, users can call `select_where_possible`, and the fulfillment context will try to do selection, retaining only those obligations that remain ambiguous. This may be helpful in pushing type inference along. Once all type inference constraints have been generated, the method `select_all_or_error` can be used to report any remaining ambiguous cases as errors.",null,null],[3,"RegionObligation","","",null,null],[12,"sub_region","","",383,null],[12,"sup_type","","",383,null],[12,"cause","","",383,null],[3,"MismatchedProjectionTypes","","",null,null],[12,"err","","",384,null],[3,"Normalized","","",null,null],[12,"value","","",385,null],[12,"obligations","","",385,null],[3,"ProjectionCache","","The projection cache. Unlike the standard caches, this can include infcx-dependent type variables - therefore, we have to roll the cache back each time we roll a snapshot back, to avoid assumptions on yet-unresolved inference variables. Types with skolemized regions also have to be removed when the respective snapshot ends.",null,null],[3,"ProjectionCacheSnapshot","","",null,null],[3,"OnUnimplementedDirective","","",null,null],[12,"condition","","",386,null],[12,"subcommands","","",386,null],[12,"message","","",386,null],[12,"label","","",386,null],[3,"OnUnimplementedNote","","",null,null],[12,"message","","",387,null],[12,"label","","",387,null],[3,"EvaluationCache","","",null,null],[3,"SelectionContext","","",null,null],[3,"SelectionCache","","",null,null],[3,"OverlapError","","Information pertinent to an overlapping impl error.",null,null],[12,"with_impl","","",388,null],[12,"trait_desc","","",388,null],[12,"self_desc","","",388,null],[12,"intercrate_ambiguity_causes","","",388,null],[3,"SpecializesCache","","",null,null],[3,"SupertraitDefIds","","",null,null],[3,"Obligation","","An `Obligation` represents some trait reference (e.g. `int:Eq`) for which the vtable must be found.  The process of finding a vtable is called \"resolving\" the `Obligation`. This process consists of either identifying an `impl` (e.g., `impl Eq for int`) that provides the required vtable, or else finding a bound that is in scope. The eventual result is usually a `Selection` (defined below).",null,null],[12,"cause","","",389,null],[12,"param_env","","",389,null],[12,"recursion_depth","","",389,null],[12,"predicate","","",389,null],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting.",null,null],[12,"span","","",390,null],[12,"body_id","","",390,null],[12,"code","","",390,null],[3,"DerivedObligationCause","","",null,null],[3,"FulfillmentError","","",null,null],[12,"obligation","","",391,null],[12,"code","","",391,null],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of substitutions from the impl's type/lifetime parameters. The `nested` vector corresponds to the nested obligations attached to the impl's type parameters.",null,null],[12,"impl_def_id","","",392,null],[12,"substs","","",392,null],[12,"nested","","",392,null],[3,"VtableGeneratorData","","",null,null],[12,"closure_def_id","","",393,null],[12,"substs","","",393,null],[12,"nested","","Nested obligations. This can be non-empty if the generator signature contains associated types.",393,null],[3,"VtableClosureData","","",null,null],[12,"closure_def_id","","",394,null],[12,"substs","","",394,null],[12,"nested","","Nested obligations. This can be non-empty if the closure signature contains associated types.",394,null],[3,"VtableDefaultImplData","","",null,null],[12,"trait_def_id","","",395,null],[12,"nested","","",395,null],[3,"VtableBuiltinData","","",null,null],[12,"nested","","",396,null],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived for the object type `Foo`.",null,null],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",397,null],[12,"vtable_base","","The vtable is formed by concatenating together the method lists of the base object trait and all supertraits; this is the start of `upcast_trait_ref`'s methods in that vtable.",397,null],[12,"nested","","",397,null],[3,"VtableFnPointerData","","",null,null],[12,"fn_ty","","",398,null],[12,"nested","","",398,null],[4,"OrphanCheckErr","","",null,null],[13,"NoLocalInputType","","",399,null],[13,"UncoveredTy","","",399,null],[4,"Reveal","","Depending on the stage of compilation, we want projection to be more or less conservative.",null,null],[13,"UserFacing","","At type-checking time, we refuse to project any associated type that is marked `default`. Non-`default` (\"final\") types are always projected. This is necessary in general for soundness of specialization. However, we could allow projections in fully-monomorphic cases. We choose not to, because we prefer for `default type` to force the type definition to be treated abstractly by any consumers of the impl. Concretely, that means that the following example will fail to compile:",400,null],[13,"All","","At trans time, all monomorphic projections will succeed. Also, `impl Trait` is normalized to the concrete type, which has to be already collected by type-checking.",400,null],[4,"ObjectSafetyViolation","","",null,null],[13,"SizedSelf","","Self : Sized declared on the trait",401,null],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location (e.g. `trait Foo : Bar<Self>`)",401,null],[13,"Method","","Method has something illegal",401,null],[13,"AssociatedConst","","Associated const",401,null],[4,"MethodViolationCode","","Reasons a method might not be object-safe.",null,null],[13,"StaticMethod","","e.g., `fn foo()`",402,null],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",402,null],[13,"Generic","","e.g., `fn foo<A>()`",402,null],[4,"IntercrateAmbiguityCause","","",null,null],[13,"DownstreamCrate","","",403,null],[12,"trait_desc","rustc::traits::IntercrateAmbiguityCause","",403,null],[12,"self_desc","","",403,null],[13,"UpstreamCrateUpdate","rustc::traits","",403,null],[12,"trait_desc","rustc::traits::IntercrateAmbiguityCause","",403,null],[12,"self_desc","","",403,null],[4,"ObligationCauseCode","rustc::traits","",null,null],[13,"MiscObligation","","Not well classified or should be obvious from span.",404,null],[13,"SliceOrArrayElem","","A slice or array is WF only if `T: Sized`",404,null],[13,"TupleElem","","A tuple is WF only if its middle elements are Sized",404,null],[13,"ProjectionWf","","This is the trait reference from the given projection",404,null],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must also implement all supertraits of X.",404,null],[13,"ReferenceOutlivesReferent","","A type like `&'a T` is WF only if `T: 'a`.",404,null],[13,"ObjectTypeBound","","A type like `Box<Foo<'a> + 'b>` is WF only if `'b: 'a`.",404,null],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",404,null],[13,"AssignmentLhsSized","","L = X implies that L is Sized",404,null],[13,"TupleInitializerSized","","(x1, .., xn) must be Sized",404,null],[13,"StructInitializerSized","","S { ... } must be Sized",404,null],[13,"VariableType","","Type of each variable must be Sized",404,null],[13,"SizedReturnType","","Return type must be Sized",404,null],[13,"RepeatVec","","[T,..n] --> T must be Copy",404,null],[13,"FieldSized","","Types of fields (other than the last) in a struct must be sized.",404,null],[13,"ConstSized","","Constant expressions must be sized.",404,null],[13,"SharedStatic","","static items must have `Sync` type",404,null],[13,"BuiltinDerivedObligation","","",404,null],[13,"ImplDerivedObligation","","",404,null],[13,"CompareImplMethodObligation","","error derived when matching traits/impls; see ObligationCause for more details",404,null],[12,"item_name","rustc::traits::ObligationCauseCode","",404,null],[12,"impl_item_def_id","","",404,null],[12,"trait_item_def_id","","",404,null],[12,"lint_id","","",404,null],[13,"ExprAssignable","rustc::traits","Checking that this expression can be assigned where it needs to be",404,null],[13,"MatchExpressionArm","","Computing common supertype in the arms of a match expression",404,null],[12,"arm_span","rustc::traits::ObligationCauseCode","",404,null],[12,"source","","",404,null],[13,"IfExpression","rustc::traits","Computing common supertype in an if expression",404,null],[13,"IfExpressionWithNoElse","","Computing common supertype of an if expression with no else counter-part",404,null],[13,"EquatePredicate","","`where a == b`",404,null],[13,"MainFunctionType","","`main` has wrong type",404,null],[13,"StartFunctionType","","`start` has wrong type",404,null],[13,"IntrinsicType","","intrinsic has wrong type",404,null],[13,"MethodReceiver","","method receiver",404,null],[13,"ReturnNoExpression","","`return` with no expression",404,null],[13,"ReturnType","","`return` with an expression",404,null],[13,"BlockTailExpression","","Block implicit return",404,null],[4,"SelectionError","","",null,null],[13,"Unimplemented","","",405,null],[13,"OutputTypeParameterMismatch","","",405,null],[13,"TraitNotObjectSafe","","",405,null],[13,"ConstEvalFailure","","",405,null],[4,"FulfillmentErrorCode","","",null,null],[13,"CodeSelectionError","","",406,null],[13,"CodeProjectionError","","",406,null],[13,"CodeSubtypeError","","",406,null],[13,"CodeAmbiguity","","",406,null],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable` indicates where the vtable comes from. Note that while we call this a \"vtable\", it does not necessarily indicate dynamic dispatch at runtime. `Vtable` instances just tell the compiler where to find methods, but in generic code those methods are typically statically dispatched -- only when an object is constructed is a `Vtable` instance reified into an actual vtable.",null,null],[13,"VtableImpl","","Vtable identifying a particular impl.",407,null],[13,"VtableDefaultImpl","","Vtable for default trait implementations This carries the information and nested obligations with regards to a default implementation for a trait `Trait`. The nested obligations ensure the trait implementation holds for all the constituent types.",407,null],[13,"VtableParam","","Successful resolution to an obligation provided by the caller for some type parameter. The `Vec<N>` represents the obligations incurred from normalizing the where-clause (if any).",407,null],[13,"VtableObject","","Virtual calls through an object",407,null],[13,"VtableBuiltin","","Successful resolution for a builtin trait.",407,null],[13,"VtableClosure","","Vtable automatically generated for a closure. The def ID is the ID of the closure expression. This is a `VtableImpl` in spirit, but the impl is generated by the compiler and does not appear in the source.",407,null],[13,"VtableFnPointer","","Same as above, but for a fn pointer type with the given signature.",407,null],[13,"VtableGenerator","","Vtable automatically generated for a generator",407,null],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the def-id of a trait impl. To pass, either the trait must be local, or else two conditions must be satisfied:",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"result"}}],[5,"overlapping_impls","","If there are types that satisfy both impls, returns a suitably-freshened `ImplHeader` with those types substituted",null,{"inputs":[{"name":"inferctxt"},{"name":"defid"},{"name":"defid"}],"output":{"name":"option"}}],[5,"normalize","","Normalizes any associated type projections in `value`, replacing them with a fully resolved type where possible. The return value combines the normalized result and any additional obligations that were incurred as result.",null,{"inputs":[{"name":"selectioncontext"},{"name":"paramenv"},{"name":"obligationcause"},{"name":"t"}],"output":{"name":"normalized"}}],[5,"normalize_projection_type","","The guts of `normalize`: normalize a specific projection like `<T as Trait>::Item`. The result is always a type (and possibly additional obligations). If ambiguity arises, which implies that there are unresolved type variables in the projection, we will substitute a fresh type variable `$X` and generate a new obligation `<T as Trait>::Item == $X` for later.",null,{"inputs":[{"name":"selectioncontext"},{"name":"paramenv"},{"name":"projectionty"},{"name":"obligationcause"},{"name":"usize"}],"output":{"name":"normalized"}}],[5,"translate_substs","","Given a subst for the requested impl, translate it to a subst appropriate for the actual item definition (whether it be in that impl, a parent impl, or the trait).",null,{"inputs":[{"name":"inferctxt"},{"name":"paramenv"},{"name":"defid"},{"name":"substs"},{"name":"node"}],"output":{"name":"substs"}}],[5,"find_associated_item","","Given a selected impl described by `impl_data`, returns the definition and substitutions for the method with the name `name` the kind `kind`, and trait method substitutions `substs`, in that impl, a less specialized impl, or the trait default, whichever applies.",null,null],[5,"elaborate_predicates","","",null,{"inputs":[{"name":"tyctxt"},{"name":"vec"}],"output":{"name":"elaborator"}}],[5,"supertraits","","",null,{"inputs":[{"name":"tyctxt"},{"name":"polytraitref"}],"output":{"name":"supertraits"}}],[5,"supertrait_def_ids","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"supertraitdefids"}}],[5,"transitive_bounds","","",null,null],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds.",null,{"inputs":[{"name":"obligationcause"},{"name":"paramenv"},{"name":"instantiatedpredicates"}],"output":{"name":"predicateobligations"}}],[5,"type_known_to_meet_bound","","Determines whether the type `ty` is known to meet `bound` and returns true if so. Returns false if `ty` either does not meet `bound` or is not known to meet bound (note that this is conservative towards no impl, which is the opposite of the `evaluate` methods).",null,{"inputs":[{"name":"inferctxt"},{"name":"paramenv"},{"name":"ty"},{"name":"defid"},{"name":"span"}],"output":{"name":"bool"}}],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur.",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"paramenv"},{"name":"obligationcause"}],"output":{"name":"paramenv"}}],[5,"fully_normalize","","",null,{"inputs":[{"name":"inferctxt"},{"name":"obligationcause"},{"name":"paramenv"},{"name":"t"}],"output":{"name":"result"}}],[5,"normalize_and_test_predicates","","Normalizes the predicates and checks whether they hold in an empty environment. If this returns false, then either normalize encountered an error or one of the predicates did not hold. Used when creating vtables to check for unsatisfiable methods.",null,{"inputs":[{"name":"tyctxt"},{"name":"vec"}],"output":{"name":"bool"}}],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"provide_extern","","",null,{"inputs":[{"name":"providers"}],"output":null}],[0,"specialization_graph","","",null,null],[3,"Graph","rustc::traits::specialization_graph","A per-trait graph of impls in specialization order. At the moment, this graph forms a tree rooted with the trait itself, with all other nodes representing impls, and parent-child relationships representing specializations.",null,null],[3,"Ancestors","","",null,null],[3,"NodeItem","","",null,null],[12,"node","","",408,null],[12,"item","","",408,null],[4,"Node","","A node in the specialization graph is either an impl or a trait definition; either can serve as a source of item definitions. There is always exactly one trait definition node: the root.",null,null],[13,"Impl","","",409,null],[13,"Trait","","",409,null],[5,"ancestors","","Walk up the specialization ancestors of a given impl, starting with that impl itself.",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"defid"}],"output":{"name":"ancestors"}}],[11,"report_fulfillment_errors","rustc::infer","",160,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"option"}],"output":null}],[11,"report_overflow_error","","Reports that an overflow has occurred and halts compilation. We halt compilation unconditionally because it is important that overflows never be masked -- they basically represent computations whose result could not be truly determined and thus we can't say if the program type checks or not -- and they are unusual occurrences in any case.",160,null],[11,"report_overflow_error_cycle","","Reports that a cycle was detected which led to overflow and halts compilation. This is equivalent to `report_overflow_error` except that we can give a more helpful error message (and, in particular, we do not suggest increasing the overflow limit, which is not going to help).",160,null],[11,"report_extra_impl_obligation","","",160,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"defid"},{"name":"defid"},{"name":"display"},{"name":"option"}],"output":{"name":"diagnosticbuilder"}}],[11,"report_selection_error","","",160,{"inputs":[{"name":"self"},{"name":"predicateobligation"},{"name":"selectionerror"}],"output":null}],[11,"clone","rustc::traits","",383,{"inputs":[{"name":"self"}],"output":{"name":"regionobligation"}}],[11,"new","","Creates a new fulfillment context.",410,{"inputs":[],"output":{"name":"fulfillmentcontext"}}],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by creating a fresh type variable `$0` as well as a projection predicate `<SomeType as SomeTrait>::X == $0`. When the inference engine runs, it will attempt to find an impl of `SomeTrait` or a where clause that lets us unify `$0` with something concrete. If this fails, we'll unify `$0` with `projection_ty` again.",410,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"},{"name":"projectionty"},{"name":"obligationcause"}],"output":{"name":"ty"}}],[11,"register_bound","","Requires that `ty` must implement the trait with `def_id` in the given environment. This trait must not have any type parameters (except for `Self`).",410,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"},{"name":"ty"},{"name":"defid"},{"name":"obligationcause"}],"output":null}],[11,"register_region_obligation","","",410,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"region"},{"name":"obligationcause"}],"output":null}],[11,"register_predicate_obligation","","",410,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"predicateobligation"}],"output":null}],[11,"register_predicate_obligations","","",410,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"vec"}],"output":null}],[11,"region_obligations","","",410,null],[11,"select_all_or_error","","",410,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"select_where_possible","","",410,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"pending_obligations","","",410,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"fmt","","",400,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",400,{"inputs":[{"name":"self"}],"output":{"name":"reveal"}}],[11,"eq","","",400,{"inputs":[{"name":"self"},{"name":"reveal"}],"output":{"name":"bool"}}],[11,"hash","","",400,null],[11,"clone","","",384,{"inputs":[{"name":"self"}],"output":{"name":"mismatchedprojectiontypes"}}],[11,"clone","","",385,{"inputs":[{"name":"self"}],"output":{"name":"normalized"}}],[11,"with","","",385,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"normalized"}}],[11,"new","","",411,{"inputs":[],"output":{"name":"self"}}],[11,"snapshot","","",411,{"inputs":[{"name":"self"}],"output":{"name":"projectioncachesnapshot"}}],[11,"rollback_to","","",411,{"inputs":[{"name":"self"},{"name":"projectioncachesnapshot"}],"output":null}],[11,"rollback_skolemized","","",411,{"inputs":[{"name":"self"},{"name":"projectioncachesnapshot"}],"output":null}],[11,"commit","","",411,{"inputs":[{"name":"self"},{"name":"projectioncachesnapshot"}],"output":null}],[11,"complete","","Mark the relevant projection cache key as having its derived obligations complete, so they won't have to be re-computed (this is OK to do in a snapshot - if the snapshot is rolled back, the obligations will be marked as incomplete again).",411,{"inputs":[{"name":"self"},{"name":"projectioncachekey"}],"output":null}],[11,"clone","","",401,{"inputs":[{"name":"self"}],"output":{"name":"objectsafetyviolation"}}],[11,"fmt","","",401,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",401,{"inputs":[{"name":"self"},{"name":"objectsafetyviolation"}],"output":{"name":"bool"}}],[11,"ne","","",401,{"inputs":[{"name":"self"},{"name":"objectsafetyviolation"}],"output":{"name":"bool"}}],[11,"hash","","",401,null],[11,"error_msg","","",401,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone","","",402,{"inputs":[{"name":"self"}],"output":{"name":"methodviolationcode"}}],[11,"fmt","","",402,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",402,{"inputs":[{"name":"self"},{"name":"methodviolationcode"}],"output":{"name":"bool"}}],[11,"hash","","",402,null],[11,"fmt","","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","",387,{"inputs":[],"output":{"name":"self"}}],[11,"parse","","",386,null],[11,"of_item","","",386,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"defid"}],"output":{"name":"result"}}],[11,"evaluate","","",386,null],[11,"clone","","",403,{"inputs":[{"name":"self"}],"output":{"name":"intercrateambiguitycause"}}],[11,"add_intercrate_ambiguity_hint","","Emits notes when the overlap is caused by complex intercrate ambiguities. See #23980 for details.",403,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"clone","","",412,{"inputs":[{"name":"self"}],"output":{"name":"selectioncache"}}],[11,"clone","","",413,{"inputs":[{"name":"self"}],"output":{"name":"evaluationcache"}}],[11,"new","","",414,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"intercrate","","",414,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"infcx","","",414,{"inputs":[{"name":"self"}],"output":{"name":"inferctxt"}}],[11,"tcx","","",414,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"closure_typer","","",414,{"inputs":[{"name":"self"}],"output":{"name":"inferctxt"}}],[11,"intercrate_ambiguity_causes","","",414,null],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding type environment by performing unification.",414,{"inputs":[{"name":"self"},{"name":"traitobligation"}],"output":{"name":"selectionresult"}}],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",414,{"inputs":[{"name":"self"},{"name":"predicateobligation"}],"output":{"name":"bool"}}],[11,"evaluate_obligation_conservatively","","Evaluates whether the obligation `obligation` can be satisfied, and returns `false` if not certain. However, this is not entirely accurate if inference variables are involved.",414,{"inputs":[{"name":"self"},{"name":"predicateobligation"}],"output":{"name":"bool"}}],[11,"coinductive_match","","For defaulted traits, we use a co-inductive strategy to solve, so that recursion is ok. This routine returns true if the top of the stack (`cycle[0]`): - is a defaulted trait, and - it also appears in the backtrace at some position `X`; and, - all the predicates at positions `X..` between `X` an the top are   also defaulted traits.",414,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"new","","",412,{"inputs":[],"output":{"name":"selectioncache"}}],[11,"new","","",413,{"inputs":[],"output":{"name":"evaluationcache"}}],[11,"new","rustc::traits::specialization_graph","",415,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl conflicts with it (has overlap, but neither specializes the other), information about the area of overlap is returned in the `Err`.",415,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"result"}}],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",415,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"},{"name":"defid"}],"output":null}],[11,"parent","","The parent of a given impl, which is the def id of the trait when the impl is a \"specialization root\".",415,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defid"}}],[11,"fmt","","",409,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",409,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"is_from_trait","","",409,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",409,null],[11,"def_id","","",409,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"next","","",416,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","",408,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"nodeitem"}}],[11,"defs","","Search the items from the given ancestors, returning each definition with the given name and the given kind.",416,null],[11,"hash_stable","","",415,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"new","rustc::traits","",417,{"inputs":[],"output":{"name":"self"}}],[11,"check","","",417,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"defid"}],"output":{"name":"option"}}],[11,"insert","","",417,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"defid"},{"name":"bool"}],"output":null}],[11,"fmt","","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",389,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",407,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",392,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",393,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",394,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",396,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",395,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",397,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",391,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",406,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lift_to_tcx","","",405,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",404,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",418,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",390,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",407,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"super_fold_with","","",389,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",389,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",392,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",392,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",393,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",393,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",394,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",394,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",395,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",395,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",396,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",396,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",397,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",397,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",398,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",398,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",407,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",407,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",385,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",404,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",404,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",418,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",418,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",390,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",390,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[0,"trans","","",null,null],[3,"TransTraitCaches","rustc::traits::trans","Specializes caches used in trans -- in particular, they assume all types are fully monomorphized and that free regions can be erased.",null,null],[3,"TraitSelectionCache","","",null,null],[3,"ProjectionCache","","",null,null],[5,"trans_fulfill_obligation","","Attempts to resolve an obligation to a vtable.. The result is a shallow vtable resolution -- meaning that we do not (necessarily) resolve all nested obligations on the impl. Note that type check should guarantee to us that all nested obligations could be resolved if we wanted to. Assumes that this is run after the entire crate has been successfully type-checked.",null,null],[11,"new","","",419,{"inputs":[{"name":"depgraph"}],"output":{"name":"self"}}],[11,"to_dep_kind","","",420,{"inputs":[],"output":{"name":"depkind"}}],[11,"to_dep_kind","","",421,{"inputs":[],"output":{"name":"depkind"}}],[11,"next","rustc::traits","",422,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Supertraits","","",null,null],[6,"PredicateObligation","","",null,null],[6,"TraitObligation","","",null,null],[6,"Obligations","","",null,null],[6,"PredicateObligations","","",null,null],[6,"TraitObligations","","",null,null],[6,"Selection","","",null,null],[6,"SelectionResult","","When performing resolution, it is typically the case that there can be one of three outcomes:",null,null],[11,"clone","","",389,{"inputs":[{"name":"self"}],"output":{"name":"obligation"}}],[11,"eq","","",389,{"inputs":[{"name":"self"},{"name":"obligation"}],"output":{"name":"bool"}}],[11,"ne","","",389,{"inputs":[{"name":"self"},{"name":"obligation"}],"output":{"name":"bool"}}],[11,"clone","","",390,{"inputs":[{"name":"self"}],"output":{"name":"obligationcause"}}],[11,"fmt","","",390,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",390,{"inputs":[{"name":"self"},{"name":"obligationcause"}],"output":{"name":"bool"}}],[11,"ne","","",390,{"inputs":[{"name":"self"},{"name":"obligationcause"}],"output":{"name":"bool"}}],[11,"clone","","",404,{"inputs":[{"name":"self"}],"output":{"name":"obligationcausecode"}}],[11,"fmt","","",404,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",404,{"inputs":[{"name":"self"},{"name":"obligationcausecode"}],"output":{"name":"bool"}}],[11,"ne","","",404,{"inputs":[{"name":"self"},{"name":"obligationcausecode"}],"output":{"name":"bool"}}],[11,"clone","","",418,{"inputs":[{"name":"self"}],"output":{"name":"derivedobligationcause"}}],[11,"fmt","","",418,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",418,{"inputs":[{"name":"self"},{"name":"derivedobligationcause"}],"output":{"name":"bool"}}],[11,"ne","","",418,{"inputs":[{"name":"self"},{"name":"derivedobligationcause"}],"output":{"name":"bool"}}],[11,"clone","","",405,{"inputs":[{"name":"self"}],"output":{"name":"selectionerror"}}],[11,"fmt","","",405,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",406,{"inputs":[{"name":"self"}],"output":{"name":"fulfillmenterrorcode"}}],[11,"clone","","",407,{"inputs":[{"name":"self"}],"output":{"name":"vtable"}}],[11,"clone","","",392,{"inputs":[{"name":"self"}],"output":{"name":"vtableimpldata"}}],[11,"eq","","",392,{"inputs":[{"name":"self"},{"name":"vtableimpldata"}],"output":{"name":"bool"}}],[11,"ne","","",392,{"inputs":[{"name":"self"},{"name":"vtableimpldata"}],"output":{"name":"bool"}}],[11,"clone","","",393,{"inputs":[{"name":"self"}],"output":{"name":"vtablegeneratordata"}}],[11,"eq","","",393,{"inputs":[{"name":"self"},{"name":"vtablegeneratordata"}],"output":{"name":"bool"}}],[11,"ne","","",393,{"inputs":[{"name":"self"},{"name":"vtablegeneratordata"}],"output":{"name":"bool"}}],[11,"clone","","",394,{"inputs":[{"name":"self"}],"output":{"name":"vtableclosuredata"}}],[11,"eq","","",394,{"inputs":[{"name":"self"},{"name":"vtableclosuredata"}],"output":{"name":"bool"}}],[11,"ne","","",394,{"inputs":[{"name":"self"},{"name":"vtableclosuredata"}],"output":{"name":"bool"}}],[11,"clone","","",395,{"inputs":[{"name":"self"}],"output":{"name":"vtabledefaultimpldata"}}],[11,"clone","","",396,{"inputs":[{"name":"self"}],"output":{"name":"vtablebuiltindata"}}],[11,"eq","","",397,{"inputs":[{"name":"self"},{"name":"vtableobjectdata"}],"output":{"name":"bool"}}],[11,"ne","","",397,{"inputs":[{"name":"self"},{"name":"vtableobjectdata"}],"output":{"name":"bool"}}],[11,"clone","","",397,{"inputs":[{"name":"self"}],"output":{"name":"vtableobjectdata"}}],[11,"clone","","",398,{"inputs":[{"name":"self"}],"output":{"name":"vtablefnpointerdata"}}],[11,"eq","","",398,{"inputs":[{"name":"self"},{"name":"vtablefnpointerdata"}],"output":{"name":"bool"}}],[11,"ne","","",398,{"inputs":[{"name":"self"},{"name":"vtablefnpointerdata"}],"output":{"name":"bool"}}],[11,"new","","",389,{"inputs":[{"name":"obligationcause"},{"name":"paramenv"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"misc","","",389,{"inputs":[{"name":"span"},{"name":"nodeid"},{"name":"paramenv"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"with","","",389,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"obligation"}}],[11,"new","","",390,{"inputs":[{"name":"span"},{"name":"nodeid"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",390,{"inputs":[{"name":"span"},{"name":"nodeid"}],"output":{"name":"obligationcause"}}],[11,"dummy","","",390,{"inputs":[],"output":{"name":"obligationcause"}}],[11,"nested_obligations","","",407,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"map","","",407,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vtable"}}],[0,"ty","rustc","",null,null],[3,"Binder","rustc::ty","Binder is a binder for higher-ranked lifetimes. It is part of the compiler's representation for things like `for<'a> Fn(&'a isize)` (which would be represented by the type `PolyTraitRef == Binder<TraitRef>`). Note that when we skolemize, instantiate, erase, or otherwise \"discharge\" these bound regions, we change the type from `Binder<T>` to just `T` (see e.g. `liberate_late_bound_regions`).",null,null],[12,"0","","",423,null],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing regions (and perhaps later types) in a higher-ranked setting. In particular, imagine a type like this:",null,null],[12,"depth","","We maintain the invariant that this is never 0. So 1 indicates the innermost binder. To ensure this, create with `DebruijnIndex::new`.",424,null],[3,"FnSig","","Signature of a function type, which I have arbitrarily decided to use to refer to the input/output types.",null,null],[12,"inputs_and_output","","",425,null],[12,"variadic","","",425,null],[12,"unsafety","","",425,null],[12,"abi","","",425,null],[3,"GenSig","","",null,null],[12,"yield_ty","","",426,null],[12,"return_ty","","",426,null],[3,"ParamTy","","",null,null],[12,"idx","","",427,null],[12,"name","","",427,null],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS form this would be written `<T as Trait<..>>::N`.",null,null],[12,"substs","","The parameters of the associated item.",428,null],[12,"item_def_id","","The DefId of the TraitItem for the associated type N.",428,null],[3,"ClosureSubsts","","A closure can be modeled as a struct that looks like:",null,null],[12,"substs","","Lifetime and type parameters from the enclosing function, concatenated with the types of the upvars.",429,null],[3,"GeneratorInterior","","This describes the types that can be contained in a generator. It will be a type variable initially and unified in the last stages of typeck of a body. It contains a tuple of all the types that could end up on a generator frame. The state transformation MIR pass may only produce layouts which mention types in this tuple. Upvars are not counted here.",null,null],[12,"witness","","",430,null],[3,"TypeAndMut","","",null,null],[12,"ty","","",431,null],[12,"mutbl","","",431,null],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax, but perhaps the most recognizable form is in a where clause:",null,null],[12,"def_id","","",432,null],[12,"substs","","",432,null],[3,"ExistentialTraitRef","","An existential reference to a trait, where `Self` is erased. For example, the trait object `Trait<'a, 'b, X, Y>` is:",null,null],[12,"def_id","","",433,null],[12,"substs","","",433,null],[3,"ExistentialProjection","","A `ProjectionPredicate` for an `ExistentialTraitRef`.",null,null],[12,"item_def_id","","",434,null],[12,"substs","","",434,null],[12,"ty","","",434,null],[3,"Const","","Typed constant value.",null,null],[12,"ty","","",435,null],[12,"val","","",435,null],[3,"EarlyBoundRegion","","",null,null],[12,"def_id","","",436,null],[12,"index","","",436,null],[12,"name","","",436,null],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region at least as big as the scope `fr.scope`\".",null,null],[12,"scope","","",437,null],[12,"bound_region","","",437,null],[3,"TyVid","","",null,null],[12,"index","","",438,null],[3,"IntVid","","",null,null],[12,"index","","",439,null],[3,"FloatVid","","",null,null],[12,"index","","",440,null],[3,"RegionVid","","",null,null],[12,"index","","",441,null],[3,"SkolemizedRegionVid","","",null,null],[12,"index","","",442,null],[3,"TyCtxt","","The central data structure of the compiler. It stores references to the various arenas and also houses the results of the various compiler queries that have been performed. See the README for more deatils.",null,null],[3,"GlobalArenas","","Internal storage",null,null],[3,"TypeckTables","","",null,null],[12,"local_id_root","","The HirId::owner all ItemLocalIds in this table are relative to.",443,null],[12,"upvar_capture_map","","Borrows",443,null],[12,"used_trait_imports","","Set of trait imports actually used in the method resolution. This is used for warning unused imports.",443,null],[12,"tainted_by_errors","","If any errors occurred while type-checking this body, this field will be set to `true`.",443,null],[12,"free_region_map","","Stores the free-region relationships that were deduced from its where clauses and parameter types. These are then read-again by borrowck.",443,null],[3,"Instance","","",null,null],[12,"def","","",444,null],[12,"substs","","",444,null],[3,"CrateAnalysis","","The complete set of all analyses described in this module. This is produced by the driver and fed to trans and later passes.",null,null],[12,"access_levels","","",445,null],[12,"name","","",445,null],[12,"glob_map","","",445,null],[3,"Resolutions","","",null,null],[12,"freevars","","",446,null],[12,"trait_map","","",446,null],[12,"maybe_unused_trait_imports","","",446,null],[12,"maybe_unused_extern_crates","","",446,null],[12,"export_map","","",446,null],[3,"ImplHeader","","The \"header\" of an impl is everything outside the body: a Self type, a trait ref (in the case of a trait impl), and a set of predicates (from the bounds/where clauses).",null,null],[12,"impl_def_id","","",447,null],[12,"self_ty","","",447,null],[12,"trait_ref","","",447,null],[12,"predicates","","",447,null],[3,"AssociatedItem","","",null,null],[12,"def_id","","",448,null],[12,"name","","",448,null],[12,"kind","","",448,null],[12,"vis","","",448,null],[12,"defaultness","","",448,null],[12,"container","","",448,null],[12,"method_has_self_argument","","Whether this is a method with an explicit self as its first argument, allowing method calls.",448,null],[3,"CrateVariancesMap","","The crate variances map is computed during typeck and contains the variance of every item in the local crate. You should not use it directly, because to do so will make your pass dependent on the HIR of every item in the local crate. Instead, use `tcx.variances_of()` to get the variance for a particular item.",null,null],[12,"dependencies","","This relation tracks the dependencies between the variance of various items. In particular, if `a < b`, then the variance of `a` depends on the sources of `b`.",449,null],[12,"variances","","For each item with generics, maps to a vector of the variance of its generics.  If an item has no generics, it will have no entry.",449,null],[12,"empty_variance","","An empty vector, useful for cloning.",449,null],[3,"CReaderCacheKey","","",null,null],[12,"cnum","","",450,null],[12,"pos","","",450,null],[3,"TypeFlags","","",null,null],[3,"TyS","","",null,null],[12,"sty","","",451,null],[12,"flags","","",451,null],[3,"Slice","","A wrapper for slices with the additional invariant that the slice is interned and no other slice with the same contents can exist in the same context. This means we can use pointer + length for both equality comparisons and hashing.",null,null],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of the original var id (that is, the root variable that is referenced by the upvar) and the id of the closure expression.",null,null],[12,"var_id","","",452,null],[12,"closure_expr_id","","",452,null],[3,"UpvarBorrow","","",null,null],[12,"kind","","The kind of borrow: by-ref upvars have access to shared immutable borrows, which are not part of the normal language syntax.",453,null],[12,"region","","Region of the resulting reference.",453,null],[3,"ClosureUpvar","","",null,null],[12,"def","","",454,null],[12,"span","","",454,null],[12,"ty","","",454,null],[3,"TypeParameterDef","","",null,null],[12,"name","","",455,null],[12,"def_id","","",455,null],[12,"index","","",455,null],[12,"has_default","","",455,null],[12,"object_lifetime_default","","",455,null],[12,"pure_wrt_drop","","`pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute on generic parameter `T`, asserts data behind the parameter `T` won't be accessed during the parent type's `Drop` impl.",455,null],[12,"synthetic","","",455,null],[3,"RegionParameterDef","","",null,null],[12,"name","","",456,null],[12,"def_id","","",456,null],[12,"index","","",456,null],[12,"pure_wrt_drop","","`pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute on generic parameter `'a`, asserts data of lifetime `'a` won't be accessed during the parent type's `Drop` impl.",456,null],[3,"Generics","","Information about the formal type/lifetime parameters associated with an item or method. Analogous to hir::Generics.",null,null],[12,"parent","","",457,null],[12,"parent_regions","","",457,null],[12,"parent_types","","",457,null],[12,"regions","","",457,null],[12,"types","","",457,null],[12,"type_param_to_index","","Reverse map to each `TypeParameterDef`'s `index` field, from `def_id.index` (`def_id.krate` is the same as the item's).",457,null],[12,"has_self","","",457,null],[12,"has_late_bound_regions","","",457,null],[3,"GenericPredicates","","Bounds on generics.",null,null],[12,"parent","","",458,null],[12,"predicates","","",458,null],[3,"TraitPredicate","","",null,null],[12,"trait_ref","","",459,null],[3,"EquatePredicate","","",null,null],[12,"0","","",460,null],[12,"1","","",460,null],[3,"OutlivesPredicate","","",null,null],[12,"0","","",461,null],[12,"1","","",461,null],[3,"SubtypePredicate","","",null,null],[12,"a_is_expected","","",462,null],[12,"a","","",462,null],[12,"b","","",462,null],[3,"ProjectionPredicate","","This kind of predicate has no direct correspondent in the syntax, but it roughly corresponds to the syntactic forms:",null,null],[12,"projection_ty","","",463,null],[12,"ty","","",463,null],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type parameters.  Should eventually be generalized into a flag list of where clauses.  You can obtain a `InstantiatedPredicates` list from a `GenericPredicates` by using the `instantiate` method. Note that this method reflects an important semantic invariant of `InstantiatedPredicates`: while the `GenericPredicates` are expressed in terms of the bound type parameters of the impl/trait/whatever, an `InstantiatedPredicates` instance represented a set of bounds for some particular instantiation, meaning that the generic parameters have been substituted with their values.",null,null],[12,"predicates","","",464,null],[3,"ParamEnv","","When type checking, we use the `ParamEnv` to track details about the set of where-clauses that are in scope at this particular point.",null,null],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically the set of bounds on the in-scope type parameters, translated into Obligations, and elaborated and normalized.",465,null],[12,"reveal","","Typically, this is `Reveal::UserFacing`, but during trans we want `Reveal::All` -- note that this is always paired with an empty environment. To get that, use `ParamEnv::reveal()`.",465,null],[3,"ParamEnvAnd","","",null,null],[12,"param_env","","",466,null],[12,"value","","",466,null],[3,"Destructor","","",null,null],[12,"did","","The def-id of the destructor method",467,null],[3,"AdtFlags","","",null,null],[3,"VariantDef","","",null,null],[12,"did","","The variant's DefId. If this is a tuple-like struct, this is the DefId of the struct's ctor.",468,null],[12,"name","","",468,null],[12,"discr","","",468,null],[12,"fields","","",468,null],[12,"ctor_kind","","",468,null],[3,"FieldDef","","",null,null],[12,"did","","",469,null],[12,"name","","",469,null],[12,"vis","","",469,null],[3,"AdtDef","","The definition of an abstract data type - a struct or enum.",null,null],[12,"did","","",470,null],[12,"variants","","",470,null],[12,"repr","","",470,null],[3,"ReprFlags","","",null,null],[3,"ReprOptions","","Represents the repr options provided by the user,",null,null],[12,"int","","",471,null],[12,"align","","",471,null],[12,"flags","","",471,null],[3,"CrateInherentImpls","","A map for the local crate mapping each type to a vector of its inherent impls. This is not meant to be used outside of coherence; rather, you should request the vector for a specific type via `tcx.inherent_impls(def_id)` so as to minimize your dependencies (constructing this map requires touching the entire crate).",null,null],[12,"inherent_impls","","",472,null],[3,"DtorckConstraint","","A set of constraints that need to be satisfied in order for a type to be valid for destruction.",null,null],[12,"outlives","","Types that are required to be alive in order for this type to be valid for destruction.",473,null],[12,"dtorck_types","","Types that could not be resolved: projections and params.",473,null],[3,"SymbolName","","",null,null],[12,"name","","",474,null],[4,"InferTy","","",null,null],[13,"TyVar","","",475,null],[13,"IntVar","","",475,null],[13,"FloatVar","","",475,null],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an unbound type variable. This is convenient for caching etc. See `infer::freshen` for more details.",475,null],[13,"FreshIntTy","","",475,null],[13,"FreshFloatTy","","",475,null],[4,"ExistentialPredicate","","",null,null],[13,"Trait","","e.g. Iterator",476,null],[13,"Projection","","e.g. Iterator::Item = T",476,null],[13,"AutoTrait","","e.g. Send",476,null],[4,"TypeVariants","","NB: If you change this, you'll probably want to change the corresponding AST structure in libsyntax/ast.rs as well.",null,null],[13,"TyBool","","The primitive boolean type. Written as `bool`.",477,null],[13,"TyChar","","The primitive character type; holds a Unicode scalar value (a non-surrogate code point).  Written as `char`.",477,null],[13,"TyInt","","A primitive signed integer type. For example, `i32`.",477,null],[13,"TyUint","","A primitive unsigned integer type. For example, `u32`.",477,null],[13,"TyFloat","","A primitive floating-point type. For example, `f64`.",477,null],[13,"TyAdt","","Structures, enumerations and unions.",477,null],[13,"TyStr","","The pointee of a string slice. Written as `str`.",477,null],[13,"TyArray","","An array with the given length. Written as `[T; n]`.",477,null],[13,"TySlice","","The pointee of an array slice.  Written as `[T]`.",477,null],[13,"TyRawPtr","","A raw pointer. Written as `*mut T` or `*const T`",477,null],[13,"TyRef","","A reference; a pointer with an associated lifetime. Written as `&'a mut T` or `&'a T`.",477,null],[13,"TyFnDef","","The anonymous type of a function declaration/definition. Each function has a unique type.",477,null],[13,"TyFnPtr","","A pointer to a function.  Written as `fn() -> i32`.",477,null],[13,"TyDynamic","","A trait, defined with `trait`.",477,null],[13,"TyClosure","","The anonymous type of a closure. Used to represent the type of `|a| a`.",477,null],[13,"TyGenerator","","The anonymous type of a generator. Used to represent the type of `|a| yield a`.",477,null],[13,"TyNever","","The never type `!`",477,null],[13,"TyTuple","","A tuple type.  For example, `(i32, bool)`. The bool indicates whether this is a unit tuple and was created by defaulting a diverging type variable with feature(never_type) disabled. It's only purpose is for raising future-compatibility warnings for when diverging type variables start defaulting to ! instead of ().",477,null],[13,"TyProjection","","The projection of an associated type.  For example, `<T as Trait<..>>::N`.",477,null],[13,"TyAnon","","Anonymized (`impl Trait`) type found in a return type. The DefId comes from the `impl Trait` ast::Ty node, and the substitutions are for the generics of the function in question. After typeck, the concrete type can be found in the `types` map.",477,null],[13,"TyParam","","A type parameter; for example, `T` in `fn f(x: T) {}",477,null],[13,"TyInfer","","A type variable used during type-checking.",477,null],[13,"TyError","","A placeholder for a type which could not be computed; this is propagated to avoid useless error messages.",477,null],[4,"BoundRegion","","",null,null],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",478,null],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",478,null],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",478,null],[13,"BrEnv","","Anonymous region for the implicit env pointer parameter to a closure",478,null],[4,"RegionKind","","Representation of regions.",null,null],[13,"ReEarlyBound","","",479,null],[13,"ReLateBound","","",479,null],[13,"ReFree","","When checking a function body, the types of all arguments and so forth that refer to bound region parameters are modified to refer to free region parameters.",479,null],[13,"ReScope","","A concrete region naming some statically determined scope (e.g. an expression or sequence of statements) within the current function.",479,null],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",479,null],[13,"ReVar","","A region variable.  Should not exist after typeck.",479,null],[13,"ReSkolemized","","A skolemized region - basically the higher-ranked version of ReFree. Should not exist after typeck.",479,null],[13,"ReEmpty","","Empty lifetime is for data that is never accessed. Bottom in the region lattice. We treat ReEmpty somewhat specially; at least right now, we do not generate instances of it during the GLB computations, but rather generate an error instead. This is to improve error messages. The only way to get an instance of ReEmpty is to have a region variable with no constraints.",479,null],[13,"ReErased","","Erased region, used by trait selection, in MIR and during trans.",479,null],[4,"InstanceDef","","",null,null],[13,"Item","","",480,null],[13,"Intrinsic","","",480,null],[13,"FnPtrShim","","<fn() as FnTrait>::call_* def-id is FnTrait::call_*",480,null],[13,"Virtual","","::fn",480,null],[13,"ClosureOnceShim","","<[mut closure] as FnOnce>::call_once",480,null],[12,"call_once","rustc::ty::InstanceDef","",480,null],[13,"DropGlue","rustc::ty","drop_in_place::; None for empty drop glue.",480,null],[13,"CloneShim","","`<T as Clone>::clone` shim.",480,null],[4,"AssociatedItemContainer","","",null,null],[13,"TraitContainer","","",481,null],[13,"ImplContainer","","",481,null],[4,"AssociatedKind","","",null,null],[13,"Const","","",482,null],[13,"Method","","",482,null],[13,"Type","","",482,null],[4,"Visibility","","",null,null],[13,"Public","","Visible everywhere (including in other crates).",483,null],[13,"Restricted","","Visible only in the given crate-local module.",483,null],[13,"Invisible","","Not visible anywhere in the local crate. This is the visibility of private external items.",483,null],[4,"Variance","","",null,null],[13,"Covariant","","",484,null],[13,"Invariant","","",484,null],[13,"Contravariant","","",484,null],[13,"Bivariant","","",484,null],[4,"BorrowKind","","",null,null],[13,"ImmBorrow","","Data must be immutable and is aliasable.",485,null],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow cannot currently be expressed by the user and is used only in implicit closure bindings. It is needed when the closure is borrowing or mutating a mutable referent, e.g.:",485,null],[13,"MutBorrow","","Data is mutable and not aliasable.",485,null],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed during `typeck`, specifically by `regionck`.",null,null],[13,"ByValue","","Upvar is captured by value. This is always true when the closure is labeled `move`, but can also be true in other cases depending on inference.",486,null],[13,"ByRef","","Upvar is captured by reference.",486,null],[4,"IntVarValue","","",null,null],[13,"IntType","","",487,null],[13,"UintType","","",487,null],[4,"Predicate","","",null,null],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be the `Self` type of the trait reference and `A`, `B`, and `C` would be the type parameters.",488,null],[13,"Equate","","where `T1 == T2`.",488,null],[13,"RegionOutlives","","where 'a : 'b",488,null],[13,"TypeOutlives","","where T : 'a",488,null],[13,"Projection","","where ::Name == X, approximately. See `ProjectionPredicate` struct for details.",488,null],[13,"WellFormed","","no syntax: T WF",488,null],[13,"ObjectSafe","","trait must be object-safe",488,null],[13,"ClosureKind","","No direct syntax. May be thought of as `where T : FnFoo<...>` for some substitutions `...` and T being a closure type. Satisfied (or refuted) once we know the closure's kind.",488,null],[13,"Subtype","","`T1 <: T2`",488,null],[13,"ConstEvaluatable","","Constant initializer must evaluate successfully.",488,null],[4,"VariantDiscr","","",null,null],[13,"Explicit","","Explicit value for this variant, i.e. `X = 123`. The `DefId` corresponds to the embedded constant.",489,null],[13,"Relative","","The previous variant's discriminant plus one. For efficiency reasons, the distance from the last `Explicit` discriminant is being stored, or `0` for the first variant, if it has none.",489,null],[4,"AdtKind","","",null,null],[13,"Struct","","",490,null],[13,"Union","","",490,null],[13,"Enum","","",490,null],[4,"ClosureKind","","",null,null],[13,"Fn","","",491,null],[13,"FnMut","","",491,null],[13,"FnOnce","","",491,null],[4,"LvaluePreference","","",null,null],[13,"PreferMutLvalue","","",492,null],[13,"NoPreference","","",492,null],[4,"Attributes","","",null,null],[13,"Owned","","",493,null],[13,"Borrowed","","",493,null],[5,"keep_local","","",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"provide_extern","","",null,{"inputs":[{"name":"providers"}],"output":null}],[0,"tls","","",null,null],[5,"enter_global","rustc::ty::tls","",null,{"inputs":[{"name":"globalctxt"},{"name":"f"}],"output":{"name":"r"}}],[5,"enter","","",null,{"inputs":[{"name":"globalctxt"},{"name":"ctxtinterners"},{"name":"f"}],"output":{"name":"r"}}],[5,"with","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"with_opt","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[0,"adjustment","rustc::ty","",null,null],[3,"Adjustment","rustc::ty::adjustment","Represents coercing a value to a different type of value.",null,null],[12,"kind","","",494,null],[12,"target","","",494,null],[3,"OverloadedDeref","","An overloaded autoderef step, representing a `Deref(Mut)::deref(_mut)` call, with the signature `&'a T -> &'a U` or `&'a mut T -> &'a mut U`. The target type is `U` in both cases, with the region and mutability being those shared by both the receiver and the returned reference.",null,null],[12,"region","","",495,null],[12,"mutbl","","",495,null],[3,"CoerceUnsizedInfo","","Information for `CoerceUnsized` impls, storing information we have computed about the coercion.",null,null],[12,"custom_kind","","If this is a \"custom coerce\" impl, then what kind of custom coercion is it? This applies to impls of `CoerceUnsized` for structs, primarily, where we store a bit of info about which fields need to be coerced.",496,null],[4,"Adjust","","",null,null],[13,"NeverToAny","","Go from ! to any type.",497,null],[13,"ReifyFnPointer","","Go from a fn-item type to a fn-pointer type.",497,null],[13,"UnsafeFnPointer","","Go from a safe fn pointer to an unsafe fn pointer.",497,null],[13,"ClosureFnPointer","","Go from a non-capturing closure to an fn pointer.",497,null],[13,"MutToConstPointer","","Go from a mut raw pointer to a const raw pointer.",497,null],[13,"Deref","","Dereference once, producing an lvalue.",497,null],[13,"Borrow","","Take the address and produce either a `&` or `*` pointer.",497,null],[13,"Unsize","","Unsize a pointer/reference value, e.g. `&[T; n]` to `&[T]`. Note that the source could be a thin or fat pointer. This will do things like convert thin pointers to fat pointers, or convert structs containing thin pointers to structs containing fat pointers, or convert between fat pointers.  We don't store the details of how the transform is done (in fact, we don't know that, because it might depend on the precise type parameters). We just store the target type. Trans figures out what has to be done at monomorphization time based on the precise source/target type at hand.",497,null],[4,"AutoBorrow","","",null,null],[13,"Ref","","Convert from T to &T.",498,null],[13,"RawPtr","","Convert from T to *T.",498,null],[4,"CustomCoerceUnsized","","",null,null],[13,"Struct","","Records the index of the field being coerced.",499,null],[11,"clone","","",494,{"inputs":[{"name":"self"}],"output":{"name":"adjustment"}}],[11,"encode","","",494,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",494,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",497,{"inputs":[{"name":"self"}],"output":{"name":"adjust"}}],[11,"fmt","","",497,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",497,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",497,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",495,{"inputs":[{"name":"self"}],"output":{"name":"overloadedderef"}}],[11,"eq","","",495,{"inputs":[{"name":"self"},{"name":"overloadedderef"}],"output":{"name":"bool"}}],[11,"ne","","",495,{"inputs":[{"name":"self"},{"name":"overloadedderef"}],"output":{"name":"bool"}}],[11,"fmt","","",495,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",495,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",495,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"method_call","","",495,null],[11,"clone","","",498,{"inputs":[{"name":"self"}],"output":{"name":"autoborrow"}}],[11,"eq","","",498,{"inputs":[{"name":"self"},{"name":"autoborrow"}],"output":{"name":"bool"}}],[11,"ne","","",498,{"inputs":[{"name":"self"},{"name":"autoborrow"}],"output":{"name":"bool"}}],[11,"fmt","","",498,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",498,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",498,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",496,{"inputs":[{"name":"self"}],"output":{"name":"coerceunsizedinfo"}}],[11,"encode","","",496,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",496,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",496,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",499,{"inputs":[{"name":"self"}],"output":{"name":"customcoerceunsized"}}],[11,"encode","","",499,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",499,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",499,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"binding","rustc::ty","",null,null],[4,"BindingMode","rustc::ty::binding","",null,null],[13,"BindByReference","","",500,null],[13,"BindByValue","","",500,null],[11,"clone","","",500,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",500,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",500,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"encode","","",500,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",500,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",500,null],[11,"fmt","","",500,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"convert","","",500,{"inputs":[{"name":"bindingannotation"}],"output":{"name":"bindingmode"}}],[11,"hash_stable","","",500,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[0,"cast","rustc::ty","",null,null],[4,"IntTy","rustc::ty::cast","Types that are represented as ints.",null,null],[13,"U","","",501,null],[13,"I","","",501,null],[13,"CEnum","","",501,null],[13,"Bool","","",501,null],[13,"Char","","",501,null],[4,"CastTy","","",null,null],[13,"Int","","Various types that are represented as ints and handled mostly in the same way, merged for easier matching.",502,null],[13,"Float","","Floating-Point types",502,null],[13,"FnPtr","","Function Pointers",502,null],[13,"Ptr","","Raw pointers",502,null],[13,"RPtr","","References",502,null],[4,"CastKind","","Cast Kind. See RFC 401 (or librustc_typeck/check/cast.rs)",null,null],[13,"CoercionCast","","",503,null],[13,"PtrPtrCast","","",503,null],[13,"PtrAddrCast","","",503,null],[13,"AddrPtrCast","","",503,null],[13,"NumericCast","","",503,null],[13,"EnumCast","","",503,null],[13,"PrimIntCast","","",503,null],[13,"U8CharCast","","",503,null],[13,"ArrayPtrCast","","",503,null],[13,"FnPtrPtrCast","","",503,null],[13,"FnPtrAddrCast","","",503,null],[11,"clone","","",501,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"fmt","","",501,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",501,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"ne","","",501,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"clone","","",502,{"inputs":[{"name":"self"}],"output":{"name":"castty"}}],[11,"fmt","","",502,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",502,{"inputs":[{"name":"self"},{"name":"castty"}],"output":{"name":"bool"}}],[11,"ne","","",502,{"inputs":[{"name":"self"},{"name":"castty"}],"output":{"name":"bool"}}],[11,"clone","","",503,{"inputs":[{"name":"self"}],"output":{"name":"castkind"}}],[11,"fmt","","",503,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",503,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",503,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_ty","","",502,{"inputs":[{"name":"ty"}],"output":{"name":"option"}}],[0,"error","rustc::ty","",null,null],[3,"ExpectedFound","rustc::ty::error","",null,null],[12,"expected","","",504,null],[12,"found","","",504,null],[4,"TypeError","","",null,null],[13,"Mismatch","","",505,null],[13,"UnsafetyMismatch","","",505,null],[13,"AbiMismatch","","",505,null],[13,"Mutability","","",505,null],[13,"TupleSize","","",505,null],[13,"FixedArraySize","","",505,null],[13,"ArgCount","","",505,null],[13,"RegionsDoesNotOutlive","","",505,null],[13,"RegionsInsufficientlyPolymorphic","","",505,null],[13,"RegionsOverlyPolymorphic","","",505,null],[13,"Sorts","","",505,null],[13,"IntMismatch","","",505,null],[13,"FloatMismatch","","",505,null],[13,"Traits","","",505,null],[13,"VariadicMismatch","","",505,null],[13,"CyclicTy","","",505,null],[13,"ProjectionMismatched","","",505,null],[13,"ProjectionBoundsLength","","",505,null],[13,"TyParamDefaultMismatch","","",505,null],[13,"ExistentialMismatch","","",505,null],[4,"UnconstrainedNumeric","","",null,null],[13,"UnconstrainedFloat","","",506,null],[13,"UnconstrainedInt","","",506,null],[13,"Neither","","",506,null],[11,"clone","","",504,{"inputs":[{"name":"self"}],"output":{"name":"expectedfound"}}],[11,"fmt","","",504,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",505,{"inputs":[{"name":"self"}],"output":{"name":"typeerror"}}],[11,"fmt","","",505,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",506,{"inputs":[{"name":"self"}],"output":{"name":"unconstrainednumeric"}}],[11,"encode","","",506,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",506,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",506,{"inputs":[{"name":"self"},{"name":"unconstrainednumeric"}],"output":{"name":"bool"}}],[11,"hash","","",506,null],[11,"fmt","","",506,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",505,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sort_string","rustc::ty","",451,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"note_and_explain_type_err","","",507,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"typeerror"},{"name":"span"}],"output":null}],[11,"erase_regions","","Returns an equivalent value with all free regions removed (note that late-bound regions remain, because they are important for subtyping, but they are anonymized and normalized as well)..",507,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[0,"fast_reject","","",null,null],[4,"SimplifiedTypeGen","rustc::ty::fast_reject","See `simplify_type`",null,null],[13,"BoolSimplifiedType","","",508,null],[13,"CharSimplifiedType","","",508,null],[13,"IntSimplifiedType","","",508,null],[13,"UintSimplifiedType","","",508,null],[13,"FloatSimplifiedType","","",508,null],[13,"AdtSimplifiedType","","",508,null],[13,"StrSimplifiedType","","",508,null],[13,"ArraySimplifiedType","","",508,null],[13,"PtrSimplifiedType","","",508,null],[13,"NeverSimplifiedType","","",508,null],[13,"TupleSimplifiedType","","",508,null],[13,"TraitSimplifiedType","","",508,null],[13,"ClosureSimplifiedType","","",508,null],[13,"GeneratorSimplifiedType","","",508,null],[13,"AnonSimplifiedType","","",508,null],[13,"FunctionSimplifiedType","","",508,null],[13,"ParameterSimplifiedType","","",508,null],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc. The idea is to get something simple that we can use to quickly decide if two types could unify during method lookup.",null,{"inputs":[{"name":"tyctxt"},{"name":"ty"},{"name":"bool"}],"output":{"name":"option"}}],[6,"SimplifiedType","","",null,null],[11,"clone","","",508,{"inputs":[{"name":"self"}],"output":{"name":"simplifiedtypegen"}}],[11,"fmt","","",508,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",508,{"inputs":[{"name":"self"},{"name":"simplifiedtypegen"}],"output":{"name":"bool"}}],[11,"ne","","",508,{"inputs":[{"name":"self"},{"name":"simplifiedtypegen"}],"output":{"name":"bool"}}],[11,"hash","","",508,null],[11,"partial_cmp","","",508,{"inputs":[{"name":"self"},{"name":"simplifiedtypegen"}],"output":{"name":"option"}}],[11,"lt","","",508,{"inputs":[{"name":"self"},{"name":"simplifiedtypegen"}],"output":{"name":"bool"}}],[11,"le","","",508,{"inputs":[{"name":"self"},{"name":"simplifiedtypegen"}],"output":{"name":"bool"}}],[11,"gt","","",508,{"inputs":[{"name":"self"},{"name":"simplifiedtypegen"}],"output":{"name":"bool"}}],[11,"ge","","",508,{"inputs":[{"name":"self"},{"name":"simplifiedtypegen"}],"output":{"name":"bool"}}],[11,"cmp","","",508,{"inputs":[{"name":"self"},{"name":"simplifiedtypegen"}],"output":{"name":"ordering"}}],[11,"map_def","","",508,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"simplifiedtypegen"}}],[11,"hash_stable","","",508,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[0,"fold","rustc::ty","Generalized type folding mechanism. The setup is a bit convoluted but allows for convenient usage. Let T be an instance of some \"foldable type\" (one which implements `TypeFoldable`) and F be an instance of a \"folder\" (a type which implements `TypeFolder`). Then the setup is intended to be:",null,null],[3,"BottomUpFolder","rustc::ty::fold","",null,null],[12,"tcx","","",509,null],[12,"fldop","","",509,null],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component types and all regions that occur free within it.",null,null],[5,"shift_region","","",null,{"inputs":[{"name":"regionkind"},{"name":"u32"}],"output":{"name":"regionkind"}}],[5,"shift_region_ref","","",null,{"inputs":[{"name":"tyctxt"},{"name":"region"},{"name":"u32"}],"output":{"name":"region"}}],[5,"shift_regions","","",null,{"inputs":[{"name":"tyctxt"},{"name":"u32"},{"name":"t"}],"output":{"name":"t"}}],[8,"TypeFoldable","","The TypeFoldable trait is implemented for every type that can be folded. Basically, every type that has a corresponding method in TypeFolder.",null,null],[10,"super_fold_with","","",510,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",510,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"super_visit_with","","",510,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"visit_with","","",510,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"has_regions_escaping_depth","","",510,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"has_escaping_regions","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_type_flags","","",510,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"has_projections","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"references_error","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_param_types","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_self_ty","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_infer_types","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_infer","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_subst","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_re_skol","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_closure_types","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_erasable_regions","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normalized_for_trans","","",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Indicates whether this value references only 'global' types/lifetimes that are the same regardless of what fn we are in. This is used for caching. Errs on the side of returning false.",510,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"TypeFolder","","The TypeFolder trait defines the actual folding. There is a method defined for every foldable type. Each of these has a default implementation that does an \"identity\" fold. Within each identity fold, it should invoke `foo.fold_with(self)` to fold each sub-item.",null,null],[10,"tcx","","",511,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_binder","","",511,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"binder"}}],[11,"fold_ty","","",511,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"fold_region","","",511,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"region"}}],[11,"fold_const","","",511,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"const"}}],[8,"TypeVisitor","","",null,null],[11,"visit_binder","","",512,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"bool"}}],[11,"visit_ty","","",512,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"visit_region","","",512,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"visit_const","","",512,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"bool"}}],[11,"tcx","","",509,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_ty","","",509,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"collect_regions","rustc::ty","Collects the free and escaping regions in `value` into `region_set`. Returns whether any late-bound regions were skipped",507,{"inputs":[{"name":"self"},{"name":"t"},{"name":"fxhashset"}],"output":{"name":"bool"}}],[11,"fold_regions","","Folds the escaping and free regions in `value` using `f`, and sets `skipped_regions` to true if any late-bound region was found and skipped.",507,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"},{"name":"f"}],"output":{"name":"t"}}],[11,"new","rustc::ty::fold","",513,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"f"}],"output":{"name":"regionfolder"}}],[11,"tcx","","",513,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_binder","","",513,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"binder"}}],[11,"fold_region","","",513,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"region"}}],[11,"replace_late_bound_regions","rustc::ty","",507,null],[11,"flatten_late_bound_regions","","Flattens two binding levels into one. So `for<'a> for<'b> Foo` becomes `for<'a,'b> Foo`.",507,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"binder"}}],[11,"no_late_bound_regions","","",507,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"option"}}],[11,"collect_constrained_late_bound_regions","","Returns a set of all late-bound regions that are constrained by `value`, meaning that if we instantiate those LBR with variables and equate `value` with something else, those variables will also be equated.",507,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"fxhashset"}}],[11,"collect_referenced_late_bound_regions","","Returns a set of all late-bound regions that appear in `value` anywhere.",507,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"fxhashset"}}],[11,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'erased`. Useful in trans but also method lookup and a few other places where precise region relationships are not required.",507,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"t"}}],[11,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are assigned starting at 1 and increasing monotonically in the order traversed by the fold operation.",507,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"binder"}}],[0,"inhabitedness","","",null,null],[3,"DefIdForest","rustc::ty::inhabitedness","Represents a forest of DefIds closed under the ancestor relation. That is, if a DefId representing a module is contained in the forest then all DefIds defined in that module or submodules are also implicitly contained in the forest.",null,null],[11,"clone","","",514,{"inputs":[{"name":"self"}],"output":{"name":"defidforest"}}],[11,"empty","","Create an empty forest.",514,{"inputs":[],"output":{"name":"defidforest"}}],[11,"full","","Create a forest consisting of a single tree representing the entire crate.",514,{"inputs":[{"name":"tyctxt"}],"output":{"name":"defidforest"}}],[11,"from_id","","Create a forest containing a DefId and all its descendants.",514,{"inputs":[{"name":"defid"}],"output":{"name":"defidforest"}}],[11,"is_empty","","Test whether the forest is empty.",514,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Test whether the forest contains a given DefId.",514,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"intersection","","Calculate the intersection of a collection of forests.",514,{"inputs":[{"name":"tyctxt"},{"name":"i"}],"output":{"name":"defidforest"}}],[11,"union","","Calculate the union of a collection of forests.",514,{"inputs":[{"name":"tyctxt"},{"name":"i"}],"output":{"name":"defidforest"}}],[11,"is_ty_uninhabited_from","rustc::ty","Checks whether a type is visibly uninhabited from a particular module. # Example ```rust enum Void {} mod a {     pub mod b {         pub struct SecretlyUninhabited {             _priv: !,         }     } }",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"is_ty_uninhabited_from_all_modules","","",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"is_enum_variant_uninhabited_from","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"variantdef"},{"name":"substs"}],"output":{"name":"bool"}}],[11,"is_variant_uninhabited_from_all_modules","","",507,{"inputs":[{"name":"self"},{"name":"variantdef"},{"name":"substs"}],"output":{"name":"bool"}}],[0,"item_path","","",null,null],[4,"RootMode","rustc::ty::item_path","",null,null],[13,"Local","","Try to make a path relative to the local crate.  In particular, local paths have no prefix, and if the path comes from an extern crate, start with the path to the `extern crate` declaration.",515,null],[13,"Absolute","","Always prepend the crate name to the path, forming an absolute path from within a given set of crates.",515,null],[5,"with_forced_absolute_paths","","Enforces that item_path_str always returns an absolute path and also enables \"type-based\" impl paths. This is used when building symbols that contain types, where we want the crate name to be part of the symbol.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"with_forced_impl_filename_line","","Force us to name impls with just the filename/line number. We normally try to use types. But at some points, notably while printing cycle errors, this can result in extra or suboptimal error output, so this variable disables that check.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"characteristic_def_id_of_type","","As a heuristic, when we see an impl, if we see that the 'self-type' is a type defined in the same module as the impl, we can omit including the path to the impl itself. This function tries to find a \"characteristic def-id\" for a type. It's just a heuristic so it makes some questionable decisions and we may want to adjust it later.",null,{"inputs":[{"name":"ty"}],"output":{"name":"option"}}],[8,"ItemPathBuffer","","Unifying Trait for different kinds of item paths we might construct. The basic interface is that components get pushed: the instance can also customize how we handle the root of a crate.",null,null],[10,"root_mode","","",516,{"inputs":[{"name":"self"}],"output":{"name":"rootmode"}}],[10,"push","","",516,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"item_path_str","rustc::ty","Returns a string identifying this def-id. This string is suitable for user output. It is relative to the current crate root, unless with_forced_absolute_paths was used.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"string"}}],[11,"node_path_str","","Returns a string identifying this local node-id.",507,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"absolute_item_path_str","","Returns a string identifying this def-id. This string is suitable for user output. It always begins with a crate identifier.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"string"}}],[11,"push_krate_path","","Returns the \"path\" to a particular crate. This can proceed in various ways, depending on the `root_mode` of the `buffer`. (See `RootMode` enum for more details.)",507,{"inputs":[{"name":"self"},{"name":"t"},{"name":"cratenum"}],"output":null}],[11,"try_push_visible_item_path","","If possible, this pushes a global path resolving to `external_def_id` that is visible from at least one local module and returns true. If the crate defining `external_def_id` is declared with an `extern crate`, the path is guaranteed to use the `extern crate`.",507,{"inputs":[{"name":"self"},{"name":"t"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"push_item_path","","",507,{"inputs":[{"name":"self"},{"name":"t"},{"name":"defid"}],"output":null}],[11,"parent_def_id","","Returns the def-id of `def_id`'s parent in the def tree. If this returns `None`, then `def_id` represents a crate root or inlined root.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"fmt","rustc::ty::item_path","",515,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"layout","rustc::ty","",null,null],[3,"TargetDataLayout","rustc::ty::layout","Parsed Data layout for a target, which contains everything needed to compute layouts.",null,null],[12,"endian","","",517,null],[12,"i1_align","","",517,null],[12,"i8_align","","",517,null],[12,"i16_align","","",517,null],[12,"i32_align","","",517,null],[12,"i64_align","","",517,null],[12,"i128_align","","",517,null],[12,"f32_align","","",517,null],[12,"f64_align","","",517,null],[12,"pointer_size","","",517,null],[12,"pointer_align","","",517,null],[12,"aggregate_align","","",517,null],[12,"vector_align","","Alignments for vector types.",517,null],[3,"Size","","Size of a type in bytes.",null,null],[3,"Align","","Alignment of a type in bytes, both ABI-mandated and preferred. Each field is a power of two, giving the alignment a maximum value of 2^(2^8 - 1), which is limited by LLVM to a i32, with a maximum capacity of 2^31 - 1 or 2147483647.",null,null],[3,"Struct","","A structure, a product type in ADT terms.",null,null],[12,"align","","Maximum alignment of fields and repr alignment.",518,null],[12,"primitive_align","","Primitive alignment of fields without repr alignment.",518,null],[12,"packed","","If true, no alignment padding is used.",518,null],[12,"sized","","If true, the size is exact, otherwise it's only a lower bound.",518,null],[12,"offsets","","Offsets for the first byte of each field, ordered to match the source definition order. This vector does not go in increasing order. FIXME(eddyb) use small vector optimization for the common case.",518,null],[12,"memory_index","","Maps source order field indices to memory order indices, depending how fields were permuted. FIXME (camlorn) also consider small vector  optimization here.",518,null],[12,"min_size","","",518,null],[3,"Union","","An untagged union.",null,null],[12,"align","","",519,null],[12,"primitive_align","","",519,null],[12,"min_size","","",519,null],[12,"packed","","If true, no alignment padding is used.",519,null],[3,"TyLayout","","A pair of a type and its layout. Implements various type traversal APIs (e.g. recursing into fields).",null,null],[12,"ty","","",520,null],[12,"layout","","",520,null],[12,"variant_index","","",520,null],[3,"LayoutCx","","Combines a tcx with the parameter environment so that you can compute layout operations.",null,null],[4,"Endian","","Endianness of the target, which must match cfg(target-endian).",null,null],[13,"Little","","",521,null],[13,"Big","","",521,null],[4,"Integer","","Integers, also used for enum discriminants.",null,null],[13,"I1","","",522,null],[13,"I8","","",522,null],[13,"I16","","",522,null],[13,"I32","","",522,null],[13,"I64","","",522,null],[13,"I128","","",522,null],[4,"Primitive","","Fundamental unit of memory access and layout.",null,null],[13,"Int","","",523,null],[13,"F32","","",523,null],[13,"F64","","",523,null],[13,"Pointer","","",523,null],[4,"Layout","","Type layout, from which size and alignment can be cheaply computed. For ADTs, it also includes field placement and enum optimizations. NOTE: Because Layout is interned, redundant information should be kept to a minimum, e.g. it includes no sub-component Ty or Layout.",null,null],[13,"Scalar","","TyBool, TyChar, TyInt, TyUint, TyFloat, TyRawPtr, TyRef or TyFnPtr.",524,null],[12,"value","rustc::ty::layout::Layout","",524,null],[12,"non_zero","","",524,null],[13,"Vector","rustc::ty::layout","SIMD vectors, from structs marked with #[repr(simd)].",524,null],[12,"element","rustc::ty::layout::Layout","",524,null],[12,"count","","",524,null],[13,"Array","rustc::ty::layout","TyArray, TySlice or TyStr.",524,null],[12,"sized","rustc::ty::layout::Layout","If true, the size is exact, otherwise it's only a lower bound.",524,null],[12,"align","","",524,null],[12,"primitive_align","","",524,null],[12,"element_size","","",524,null],[12,"count","","",524,null],[13,"FatPointer","rustc::ty::layout","TyRawPtr or TyRef with a !Sized pointee.",524,null],[12,"metadata","rustc::ty::layout::Layout","",524,null],[12,"non_zero","","If true, the pointer cannot be null.",524,null],[13,"CEnum","rustc::ty::layout","C-like enums; basically an integer.",524,null],[12,"discr","rustc::ty::layout::Layout","",524,null],[12,"signed","","",524,null],[12,"non_zero","","",524,null],[12,"min","","Inclusive discriminant range. If min > max, it represents min...u64::MAX followed by 0...max.",524,null],[12,"max","","",524,null],[13,"Univariant","rustc::ty::layout","Single-case enums, and structs/tuples.",524,null],[12,"variant","rustc::ty::layout::Layout","",524,null],[12,"non_zero","","If true, the structure is NonZero.",524,null],[13,"UntaggedUnion","rustc::ty::layout","Untagged unions.",524,null],[12,"variants","rustc::ty::layout::Layout","",524,null],[13,"General","rustc::ty::layout","General-case enums: for each case there is a struct, and they all start with a field for the discriminant.",524,null],[12,"discr","rustc::ty::layout::Layout","",524,null],[12,"variants","","",524,null],[12,"size","","",524,null],[12,"align","","",524,null],[12,"primitive_align","","",524,null],[13,"RawNullablePointer","rustc::ty::layout","Two cases distinguished by a nullable pointer: the case with discriminant `nndiscr` must have single field which is known to be nonnull due to its type. The other case is known to be zero sized. Hence we represent the enum as simply a nullable pointer: if not null it indicates the `nndiscr` variant, otherwise it indicates the other case.",524,null],[12,"nndiscr","rustc::ty::layout::Layout","",524,null],[12,"value","","",524,null],[13,"StructWrappedNullablePointer","rustc::ty::layout","Two cases distinguished by a nullable pointer: the case with discriminant `nndiscr` is represented by the struct `nonnull`, where the `discrfield`th field is known to be nonnull due to its type; if that field is null, then it represents the other case, which is known to be zero sized.",524,null],[12,"nndiscr","rustc::ty::layout::Layout","",524,null],[12,"nonnull","","",524,null],[12,"discrfield","","N.B. There is a 0 at the start, for LLVM GEP through a pointer.",524,null],[12,"discrfield_source","","Like discrfield, but in source order. For debuginfo.",524,null],[4,"LayoutError","rustc::ty::layout","",null,null],[13,"Unknown","","",525,null],[13,"SizeOverflow","","",525,null],[4,"SizeSkeleton","","Type size \"skeleton\", i.e. the only information determining a type's size. While this is conservative, (aside from constant sizes, only pointers, newtypes thereof and null pointer optimized enums are allowed), it is enough to statically check common usecases of transmute.",null,null],[13,"Known","","Any statically computable Layout.",526,null],[13,"Pointer","","A potentially-fat pointer.",526,null],[12,"non_zero","rustc::ty::layout::SizeSkeleton","If true, this pointer is never null.",526,null],[12,"tail","","The type which determines the unsized metadata, if any, of this pointer. Either a type parameter or a projection depending on one, with regions erased.",526,null],[6,"FieldPath","rustc::ty::layout","Path through fields of nested structures.",null,null],[17,"FAT_PTR_ADDR","","The first half of a fat pointer. - For a trait object, this is the address of the box. - For a slice, this is the base address.",null,null],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer. - For a trait object, this is the address of the vtable. - For a slice, this is the length.",null,null],[8,"HasDataLayout","","",null,null],[10,"data_layout","","",527,{"inputs":[{"name":"self"}],"output":{"name":"targetdatalayout"}}],[8,"LayoutTyper","","",null,null],[16,"TyLayout","","",528,null],[10,"tcx","","",528,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[10,"layout_of","","",528,null],[10,"normalize_projections","","",528,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"default","","Creates an instance of `TargetDataLayout`.",517,{"inputs":[],"output":{"name":"targetdatalayout"}}],[11,"parse","","",517,{"inputs":[{"name":"session"}],"output":{"name":"targetdatalayout"}}],[11,"obj_size_bound","","Return exclusive upper bound on object size.",517,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ptr_sized_integer","","",517,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"data_layout","rustc::ty","",507,{"inputs":[{"name":"self"}],"output":{"name":"targetdatalayout"}}],[11,"clone","rustc::ty::layout","",521,{"inputs":[{"name":"self"}],"output":{"name":"endian"}}],[11,"clone","","",529,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"eq","","",529,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ne","","",529,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",529,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"option"}}],[11,"lt","","",529,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"le","","",529,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"gt","","",529,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ge","","",529,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"cmp","","",529,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"ordering"}}],[11,"hash","","",529,null],[11,"fmt","","",529,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bits","","",529,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"from_bytes","","",529,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"bytes","","",529,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"bits","","",529,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"abi_align","","",529,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"size"}}],[11,"checked_add","","",529,{"inputs":[{"name":"self"},{"name":"size"},{"name":"c"}],"output":{"name":"option"}}],[11,"checked_mul","","",529,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"c"}],"output":{"name":"option"}}],[11,"clone","","",530,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"eq","","",530,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"ne","","",530,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"hash","","",530,null],[11,"fmt","","",530,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bits","","",530,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_bytes","","",530,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"abi","","",530,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"pref","","",530,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"min","","",530,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"align"}}],[11,"max","","",530,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"align"}}],[11,"clone","","",522,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"eq","","",522,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",522,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"option"}}],[11,"cmp","","",522,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"ordering"}}],[11,"hash","","",522,null],[11,"fmt","","",522,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size","","",522,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"align","","",522,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"align"}}],[11,"to_ty","","",522,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"bool"}],"output":{"name":"ty"}}],[11,"fit_signed","","Find the smallest Integer type which can represent the signed value.",522,{"inputs":[{"name":"i64"}],"output":{"name":"integer"}}],[11,"fit_unsigned","","Find the smallest Integer type which can represent the unsigned value.",522,{"inputs":[{"name":"u64"}],"output":{"name":"integer"}}],[11,"for_abi_align","","Find the smallest integer with the given alignment.",522,{"inputs":[{"name":"c"},{"name":"align"}],"output":{"name":"option"}}],[11,"from_attr","","Get the Integer type from an attr::IntType.",522,{"inputs":[{"name":"c"},{"name":"inttype"}],"output":{"name":"integer"}}],[11,"clone","","",523,{"inputs":[{"name":"self"}],"output":{"name":"primitive"}}],[11,"eq","","",523,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",523,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"hash","","",523,null],[11,"fmt","","",523,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size","","",523,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"size"}}],[11,"align","","",523,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"align"}}],[11,"eq","","",518,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"ne","","",518,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"hash","","",518,null],[11,"fmt","","",518,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stride","","Get the size with trailing alignment padding.",518,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"field_index_by_increasing_offset","","Get indices of the tys that made this struct by increasing offset.",518,null],[11,"over_align","","",518,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",519,{"inputs":[{"name":"self"},{"name":"union"}],"output":{"name":"bool"}}],[11,"ne","","",519,{"inputs":[{"name":"self"},{"name":"union"}],"output":{"name":"bool"}}],[11,"hash","","",519,null],[11,"fmt","","",519,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stride","","Get the size with trailing alignment padding.",519,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"over_align","","",519,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",524,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",524,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ne","","",524,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"hash","","",524,null],[11,"clone","","",525,{"inputs":[{"name":"self"}],"output":{"name":"layouterror"}}],[11,"fmt","","",525,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",525,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compute_uncached","","",524,{"inputs":[{"name":"tyctxt"},{"name":"paramenv"},{"name":"ty"}],"output":{"name":"result"}}],[11,"is_unsized","","Returns true if the layout corresponds to an unsized type.",524,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"size","","",524,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"size"}}],[11,"align","","",524,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"align"}}],[11,"primitive_align","","Returns alignment before repr alignment is applied",524,{"inputs":[{"name":"self"},{"name":"targetdatalayout"}],"output":{"name":"align"}}],[11,"over_align","","Returns repr alignment if it is greater than the primitive alignment.",524,{"inputs":[{"name":"self"},{"name":"targetdatalayout"}],"output":{"name":"option"}}],[11,"field_offset","","",524,{"inputs":[{"name":"self"},{"name":"c"},{"name":"usize"},{"name":"option"}],"output":{"name":"size"}}],[11,"record_layout_for_printing","","This is invoked by the `layout_raw` query to record the final layout of each type.",524,{"inputs":[{"name":"tyctxt"},{"name":"ty"},{"name":"paramenv"},{"name":"layout"}],"output":null}],[11,"clone","","",526,{"inputs":[{"name":"self"}],"output":{"name":"sizeskeleton"}}],[11,"fmt","","",526,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compute","","",526,{"inputs":[{"name":"ty"},{"name":"tyctxt"},{"name":"paramenv"}],"output":{"name":"result"}}],[11,"same_size","","",526,{"inputs":[{"name":"self"},{"name":"sizeskeleton"}],"output":{"name":"bool"}}],[11,"clone","","",520,{"inputs":[{"name":"self"}],"output":{"name":"tylayout"}}],[11,"fmt","","",520,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",520,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"clone","","",531,{"inputs":[{"name":"self"}],"output":{"name":"layoutcx"}}],[11,"new","","",531,{"inputs":[{"name":"tyctxt"},{"name":"paramenv"}],"output":{"name":"self"}}],[11,"data_layout","","",531,{"inputs":[{"name":"self"}],"output":{"name":"targetdatalayout"}}],[11,"tcx","","",531,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"layout_of","","",531,null],[11,"normalize_projections","","",531,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"for_variant","","",520,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"field_offset","","",520,{"inputs":[{"name":"self"},{"name":"c"},{"name":"usize"}],"output":{"name":"size"}}],[11,"field_count","","",520,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"field_type","","",520,{"inputs":[{"name":"self"},{"name":"c"},{"name":"usize"}],"output":{"name":"ty"}}],[11,"field","","",520,null],[11,"hash_stable","","",524,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",522,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",523,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",530,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",529,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",525,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",518,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",519,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[0,"_match","rustc::ty","",null,null],[3,"Match","rustc::ty::_match","A type \"A\" matches \"B\" if the fresh types in B could be substituted with values so as to make it equal to A. Matching is intended to be used only on freshened types, and it basically indicates if the non-freshened versions of A and B could have been unified.",null,null],[11,"new","","",532,{"inputs":[{"name":"tyctxt"}],"output":{"name":"match"}}],[11,"tag","","",532,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"tcx","","",532,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"a_is_expected","","",532,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"relate_with_variance","","",532,{"inputs":[{"name":"self"},{"name":"variance"},{"name":"t"},{"name":"t"}],"output":{"name":"relateresult"}}],[11,"regions","","",532,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":{"name":"relateresult"}}],[11,"tys","","",532,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[11,"binders","","",532,{"inputs":[{"name":"self"},{"name":"binder"},{"name":"binder"}],"output":{"name":"relateresult"}}],[0,"maps","rustc::ty","",null,null],[3,"Maps","rustc::ty::maps","",null,null],[3,"TyCtxtAt","","",null,null],[12,"tcx","","",533,null],[12,"span","","",533,null],[3,"Providers","","",null,null],[12,"type_of","","",534,null],[12,"generics_of","","",534,null],[12,"predicates_of","","",534,null],[12,"super_predicates_of","","",534,null],[12,"type_param_predicates","","",534,null],[12,"trait_def","","",534,null],[12,"adt_def","","",534,null],[12,"adt_destructor","","",534,null],[12,"adt_sized_constraint","","",534,null],[12,"adt_dtorck_constraint","","",534,null],[12,"is_const_fn","","",534,null],[12,"is_foreign_item","","",534,null],[12,"is_default_impl","","",534,null],[12,"crate_variances","","",534,null],[12,"variances_of","","",534,null],[12,"inferred_outlives_of","","",534,null],[12,"associated_item_def_ids","","",534,null],[12,"associated_item","","",534,null],[12,"impl_trait_ref","","",534,null],[12,"impl_polarity","","",534,null],[12,"inherent_impls","","",534,null],[12,"mir_keys","","",534,null],[12,"mir_const_qualif","","",534,null],[12,"mir_const","","",534,null],[12,"mir_validated","","",534,null],[12,"optimized_mir","","",534,null],[12,"closure_kind","","",534,null],[12,"unsafety_violations","","",534,null],[12,"fn_sig","","",534,null],[12,"generator_sig","","",534,null],[12,"coerce_unsized_info","","",534,null],[12,"typeck_item_bodies","","",534,null],[12,"typeck_tables_of","","",534,null],[12,"has_typeck_tables","","",534,null],[12,"coherent_trait","","",534,null],[12,"borrowck","","",534,null],[12,"mir_borrowck","","",534,null],[12,"crate_inherent_impls","","",534,null],[12,"crate_inherent_impls_overlap_check","","",534,null],[12,"const_eval","","",534,null],[12,"privacy_access_levels","","",534,null],[12,"reachable_set","","",534,null],[12,"region_scope_tree","","",534,null],[12,"mir_shims","","",534,null],[12,"def_symbol_name","","",534,null],[12,"symbol_name","","",534,null],[12,"describe_def","","",534,null],[12,"def_span","","",534,null],[12,"lookup_stability","","",534,null],[12,"lookup_deprecation_entry","","",534,null],[12,"item_attrs","","",534,null],[12,"fn_arg_names","","",534,null],[12,"impl_parent","","",534,null],[12,"trait_of_item","","",534,null],[12,"is_exported_symbol","","",534,null],[12,"item_body_nested_bodies","","",534,null],[12,"const_is_rvalue_promotable_to_static","","",534,null],[12,"rvalue_promotable_map","","",534,null],[12,"is_mir_available","","",534,null],[12,"vtable_methods","","",534,null],[12,"trans_fulfill_obligation","","",534,null],[12,"trait_impls_of","","",534,null],[12,"specialization_graph_of","","",534,null],[12,"is_object_safe","","",534,null],[12,"param_env","","",534,null],[12,"is_copy_raw","","",534,null],[12,"is_sized_raw","","",534,null],[12,"is_freeze_raw","","",534,null],[12,"needs_drop_raw","","",534,null],[12,"layout_raw","","",534,null],[12,"dylib_dependency_formats","","",534,null],[12,"is_panic_runtime","","",534,null],[12,"is_compiler_builtins","","",534,null],[12,"has_global_allocator","","",534,null],[12,"is_sanitizer_runtime","","",534,null],[12,"is_profiler_runtime","","",534,null],[12,"panic_strategy","","",534,null],[12,"is_no_builtins","","",534,null],[12,"extern_crate","","",534,null],[12,"specializes","","",534,null],[12,"in_scope_traits_map","","",534,null],[12,"module_exports","","",534,null],[12,"lint_levels","","",534,null],[12,"impl_defaultness","","",534,null],[12,"exported_symbol_ids","","",534,null],[12,"native_libraries","","",534,null],[12,"plugin_registrar_fn","","",534,null],[12,"derive_registrar_fn","","",534,null],[12,"crate_disambiguator","","",534,null],[12,"crate_hash","","",534,null],[12,"original_crate_name","","",534,null],[12,"implementations_of_trait","","",534,null],[12,"all_trait_implementations","","",534,null],[12,"is_dllimport_foreign_item","","",534,null],[12,"is_statically_included_foreign_item","","",534,null],[12,"native_library_kind","","",534,null],[12,"link_args","","",534,null],[12,"named_region_map","","",534,null],[12,"is_late_bound_map","","",534,null],[12,"object_lifetime_defaults_map","","",534,null],[12,"visibility","","",534,null],[12,"dep_kind","","",534,null],[12,"crate_name","","",534,null],[12,"item_children","","",534,null],[12,"extern_mod_stmt_cnum","","",534,null],[12,"get_lang_items","","",534,null],[12,"defined_lang_items","","",534,null],[12,"missing_lang_items","","",534,null],[12,"extern_const_body","","",534,null],[12,"visible_parent_map","","",534,null],[12,"missing_extern_crate_item","","",534,null],[12,"used_crate_source","","",534,null],[12,"postorder_cnums","","",534,null],[12,"freevars","","",534,null],[12,"maybe_unused_trait_import","","",534,null],[12,"maybe_unused_extern_crates","","",534,null],[12,"stability_index","","",534,null],[12,"all_crate_nums","","",534,null],[12,"exported_symbols","","",534,null],[12,"collect_and_partition_translation_items","","",534,null],[12,"export_name","","",534,null],[12,"contains_extern_indicator","","",534,null],[12,"is_translated_function","","",534,null],[12,"codegen_unit","","",534,null],[12,"compile_codegen_unit","","",534,null],[12,"output_filenames","","",534,null],[12,"has_copy_closures","","",534,null],[12,"has_clone_closures","","",534,null],[12,"erase_regions_ty","","",534,null],[4,"Query","","",null,null],[13,"type_of","","Records the type of every item.",535,null],[13,"generics_of","","Maps from the def-id of an item (trait/struct/enum/fn) to its associated generics and predicates.",535,null],[13,"predicates_of","","",535,null],[13,"super_predicates_of","","Maps from the def-id of a trait to the list of super-predicates. This is a subset of the full list of predicates. We store these in a separate map because we must evaluate them even during type conversion, often before the full predicates are available (note that supertraits have additional acyclicity requirements).",535,null],[13,"type_param_predicates","","To avoid cycles within the predicates of a single item we compute per-type-parameter predicates for resolving `T::AssocTy`.",535,null],[13,"trait_def","","",535,null],[13,"adt_def","","",535,null],[13,"adt_destructor","","",535,null],[13,"adt_sized_constraint","","",535,null],[13,"adt_dtorck_constraint","","",535,null],[13,"is_const_fn","","True if this is a const fn",535,null],[13,"is_foreign_item","","True if this is a foreign item (i.e., linked via `extern { ... }`).",535,null],[13,"is_default_impl","","True if this is a default impl (aka impl Foo for ..)",535,null],[13,"crate_variances","","Get a map with the variance of every item; use `item_variance` instead.",535,null],[13,"variances_of","","Maps from def-id of a type or region parameter to its (inferred) variance.",535,null],[13,"inferred_outlives_of","","Maps from def-id of a type to its (inferred) outlives.",535,null],[13,"associated_item_def_ids","","Maps from an impl/trait def-id to a list of the def-ids of its items",535,null],[13,"associated_item","","Maps from a trait item to the trait item \"descriptor\"",535,null],[13,"impl_trait_ref","","",535,null],[13,"impl_polarity","","",535,null],[13,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls. Contains implementations of methods that are inherent to a type. Methods in these implementations don't need to be exported.",535,null],[13,"mir_keys","","Set of all the def-ids in this crate that have MIR associated with them. This includes all the body owners, but also things like struct constructors.",535,null],[13,"mir_const_qualif","","Maps DefId's that have an associated Mir to the result of the MIR qualify_consts pass. The actual meaning of the value isn't known except to the pass itself.",535,null],[13,"mir_const","","Fetch the MIR for a given def-id up till the point where it is ready for const evaluation.",535,null],[13,"mir_validated","","",535,null],[13,"optimized_mir","","MIR after our optimization passes have run. This is MIR that is ready for trans. This is also the only query that can fetch non-local MIR, at present.",535,null],[13,"closure_kind","","Type of each closure. The def ID is the ID of the expression defining the closure.",535,null],[13,"unsafety_violations","","Unsafety violations for this def ID.",535,null],[13,"fn_sig","","The signature of functions and closures.",535,null],[13,"generator_sig","","Records the signature of each generator. The def ID is the ID of the expression defining the closure.",535,null],[13,"coerce_unsized_info","","Caches CoerceUnsized kinds for impls on custom types.",535,null],[13,"typeck_item_bodies","","",535,null],[13,"typeck_tables_of","","",535,null],[13,"has_typeck_tables","","",535,null],[13,"coherent_trait","","",535,null],[13,"borrowck","","",535,null],[13,"mir_borrowck","","",535,null],[13,"crate_inherent_impls","","Gets a complete map from all types to their inherent impls. Not meant to be used directly outside of coherence. (Defined only for LOCAL_CRATE)",535,null],[13,"crate_inherent_impls_overlap_check","","Checks all types in the krate for overlap in their inherent impls. Reports errors. Not meant to be used directly outside of coherence. (Defined only for LOCAL_CRATE)",535,null],[13,"const_eval","","Results of evaluating const items or constants embedded in other items (such as enum variant explicit discriminants).",535,null],[13,"privacy_access_levels","","Performs the privacy check and computes \"access levels\".",535,null],[13,"reachable_set","","",535,null],[13,"region_scope_tree","","Per-body `region::ScopeTree`. The `DefId` should be the owner-def-id for the body; in the case of closures, this will be redirected to the enclosing function.",535,null],[13,"mir_shims","","",535,null],[13,"def_symbol_name","","",535,null],[13,"symbol_name","","",535,null],[13,"describe_def","","",535,null],[13,"def_span","","",535,null],[13,"lookup_stability","","",535,null],[13,"lookup_deprecation_entry","","",535,null],[13,"item_attrs","","",535,null],[13,"fn_arg_names","","",535,null],[13,"impl_parent","","",535,null],[13,"trait_of_item","","",535,null],[13,"is_exported_symbol","","",535,null],[13,"item_body_nested_bodies","","",535,null],[13,"const_is_rvalue_promotable_to_static","","",535,null],[13,"rvalue_promotable_map","","",535,null],[13,"is_mir_available","","",535,null],[13,"vtable_methods","","",535,null],[13,"trans_fulfill_obligation","","",535,null],[13,"trait_impls_of","","",535,null],[13,"specialization_graph_of","","",535,null],[13,"is_object_safe","","",535,null],[13,"param_env","","",535,null],[13,"is_copy_raw","","",535,null],[13,"is_sized_raw","","",535,null],[13,"is_freeze_raw","","",535,null],[13,"needs_drop_raw","","",535,null],[13,"layout_raw","","",535,null],[13,"dylib_dependency_formats","","",535,null],[13,"is_panic_runtime","","",535,null],[13,"is_compiler_builtins","","",535,null],[13,"has_global_allocator","","",535,null],[13,"is_sanitizer_runtime","","",535,null],[13,"is_profiler_runtime","","",535,null],[13,"panic_strategy","","",535,null],[13,"is_no_builtins","","",535,null],[13,"extern_crate","","",535,null],[13,"specializes","","",535,null],[13,"in_scope_traits_map","","",535,null],[13,"module_exports","","",535,null],[13,"lint_levels","","",535,null],[13,"impl_defaultness","","",535,null],[13,"exported_symbol_ids","","",535,null],[13,"native_libraries","","",535,null],[13,"plugin_registrar_fn","","",535,null],[13,"derive_registrar_fn","","",535,null],[13,"crate_disambiguator","","",535,null],[13,"crate_hash","","",535,null],[13,"original_crate_name","","",535,null],[13,"implementations_of_trait","","",535,null],[13,"all_trait_implementations","","",535,null],[13,"is_dllimport_foreign_item","","",535,null],[13,"is_statically_included_foreign_item","","",535,null],[13,"native_library_kind","","",535,null],[13,"link_args","","",535,null],[13,"named_region_map","","",535,null],[13,"is_late_bound_map","","",535,null],[13,"object_lifetime_defaults_map","","",535,null],[13,"visibility","","",535,null],[13,"dep_kind","","",535,null],[13,"crate_name","","",535,null],[13,"item_children","","",535,null],[13,"extern_mod_stmt_cnum","","",535,null],[13,"get_lang_items","","",535,null],[13,"defined_lang_items","","",535,null],[13,"missing_lang_items","","",535,null],[13,"extern_const_body","","",535,null],[13,"visible_parent_map","","",535,null],[13,"missing_extern_crate_item","","",535,null],[13,"used_crate_source","","",535,null],[13,"postorder_cnums","","",535,null],[13,"freevars","","",535,null],[13,"maybe_unused_trait_import","","",535,null],[13,"maybe_unused_extern_crates","","",535,null],[13,"stability_index","","",535,null],[13,"all_crate_nums","","",535,null],[13,"exported_symbols","","",535,null],[13,"collect_and_partition_translation_items","","",535,null],[13,"export_name","","",535,null],[13,"contains_extern_indicator","","",535,null],[13,"is_translated_function","","",535,null],[13,"codegen_unit","","",535,null],[13,"compile_codegen_unit","","",535,null],[13,"output_filenames","","",535,null],[13,"has_copy_closures","","",535,null],[13,"has_clone_closures","","",535,null],[13,"erase_regions_ty","","",535,null],[4,"QueryMsg","","",null,null],[13,"type_of","","",536,null],[13,"generics_of","","",536,null],[13,"predicates_of","","",536,null],[13,"super_predicates_of","","",536,null],[13,"type_param_predicates","","",536,null],[13,"trait_def","","",536,null],[13,"adt_def","","",536,null],[13,"adt_destructor","","",536,null],[13,"adt_sized_constraint","","",536,null],[13,"adt_dtorck_constraint","","",536,null],[13,"is_const_fn","","",536,null],[13,"is_foreign_item","","",536,null],[13,"is_default_impl","","",536,null],[13,"crate_variances","","",536,null],[13,"variances_of","","",536,null],[13,"inferred_outlives_of","","",536,null],[13,"associated_item_def_ids","","",536,null],[13,"associated_item","","",536,null],[13,"impl_trait_ref","","",536,null],[13,"impl_polarity","","",536,null],[13,"inherent_impls","","",536,null],[13,"mir_keys","","",536,null],[13,"mir_const_qualif","","",536,null],[13,"mir_const","","",536,null],[13,"mir_validated","","",536,null],[13,"optimized_mir","","",536,null],[13,"closure_kind","","",536,null],[13,"unsafety_violations","","",536,null],[13,"fn_sig","","",536,null],[13,"generator_sig","","",536,null],[13,"coerce_unsized_info","","",536,null],[13,"typeck_item_bodies","","",536,null],[13,"typeck_tables_of","","",536,null],[13,"has_typeck_tables","","",536,null],[13,"coherent_trait","","",536,null],[13,"borrowck","","",536,null],[13,"mir_borrowck","","",536,null],[13,"crate_inherent_impls","","",536,null],[13,"crate_inherent_impls_overlap_check","","",536,null],[13,"const_eval","","",536,null],[13,"privacy_access_levels","","",536,null],[13,"reachable_set","","",536,null],[13,"region_scope_tree","","",536,null],[13,"mir_shims","","",536,null],[13,"def_symbol_name","","",536,null],[13,"symbol_name","","",536,null],[13,"describe_def","","",536,null],[13,"def_span","","",536,null],[13,"lookup_stability","","",536,null],[13,"lookup_deprecation_entry","","",536,null],[13,"item_attrs","","",536,null],[13,"fn_arg_names","","",536,null],[13,"impl_parent","","",536,null],[13,"trait_of_item","","",536,null],[13,"is_exported_symbol","","",536,null],[13,"item_body_nested_bodies","","",536,null],[13,"const_is_rvalue_promotable_to_static","","",536,null],[13,"rvalue_promotable_map","","",536,null],[13,"is_mir_available","","",536,null],[13,"vtable_methods","","",536,null],[13,"trans_fulfill_obligation","","",536,null],[13,"trait_impls_of","","",536,null],[13,"specialization_graph_of","","",536,null],[13,"is_object_safe","","",536,null],[13,"param_env","","",536,null],[13,"is_copy_raw","","",536,null],[13,"is_sized_raw","","",536,null],[13,"is_freeze_raw","","",536,null],[13,"needs_drop_raw","","",536,null],[13,"layout_raw","","",536,null],[13,"dylib_dependency_formats","","",536,null],[13,"is_panic_runtime","","",536,null],[13,"is_compiler_builtins","","",536,null],[13,"has_global_allocator","","",536,null],[13,"is_sanitizer_runtime","","",536,null],[13,"is_profiler_runtime","","",536,null],[13,"panic_strategy","","",536,null],[13,"is_no_builtins","","",536,null],[13,"extern_crate","","",536,null],[13,"specializes","","",536,null],[13,"in_scope_traits_map","","",536,null],[13,"module_exports","","",536,null],[13,"lint_levels","","",536,null],[13,"impl_defaultness","","",536,null],[13,"exported_symbol_ids","","",536,null],[13,"native_libraries","","",536,null],[13,"plugin_registrar_fn","","",536,null],[13,"derive_registrar_fn","","",536,null],[13,"crate_disambiguator","","",536,null],[13,"crate_hash","","",536,null],[13,"original_crate_name","","",536,null],[13,"implementations_of_trait","","",536,null],[13,"all_trait_implementations","","",536,null],[13,"is_dllimport_foreign_item","","",536,null],[13,"is_statically_included_foreign_item","","",536,null],[13,"native_library_kind","","",536,null],[13,"link_args","","",536,null],[13,"named_region_map","","",536,null],[13,"is_late_bound_map","","",536,null],[13,"object_lifetime_defaults_map","","",536,null],[13,"visibility","","",536,null],[13,"dep_kind","","",536,null],[13,"crate_name","","",536,null],[13,"item_children","","",536,null],[13,"extern_mod_stmt_cnum","","",536,null],[13,"get_lang_items","","",536,null],[13,"defined_lang_items","","",536,null],[13,"missing_lang_items","","",536,null],[13,"extern_const_body","","",536,null],[13,"visible_parent_map","","",536,null],[13,"missing_extern_crate_item","","",536,null],[13,"used_crate_source","","",536,null],[13,"postorder_cnums","","",536,null],[13,"freevars","","",536,null],[13,"maybe_unused_trait_import","","",536,null],[13,"maybe_unused_extern_crates","","",536,null],[13,"stability_index","","",536,null],[13,"all_crate_nums","","",536,null],[13,"exported_symbols","","",536,null],[13,"collect_and_partition_translation_items","","",536,null],[13,"export_name","","",536,null],[13,"contains_extern_indicator","","",536,null],[13,"is_translated_function","","",536,null],[13,"codegen_unit","","",536,null],[13,"compile_codegen_unit","","",536,null],[13,"output_filenames","","",536,null],[13,"has_copy_closures","","",536,null],[13,"has_clone_closures","","",536,null],[13,"erase_regions_ty","","",536,null],[5,"force_from_dep_node","","The red/green evaluation system will try to mark a specific DepNode in the dependency graph as green by recursively trying to mark the dependencies of that DepNode as green. While doing so, it will sometimes encounter a DepNode where we don't know if it is red or green and we therefore actually have to recompute its value in order to find out. Since the only piece of information that we have at that point is the DepNode we are trying to re-evaluate, we need some way to re-run a query from just that. This is what `force_from_dep_node()` implements.",null,{"inputs":[{"name":"tyctxt"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"map_crate","rustc::ty","",480,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"default_span","","",480,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[11,"map_crate","","",444,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"default_span","","",444,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[11,"map_crate","rustc::hir::def_id","",120,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"default_span","","",120,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[11,"map_crate","","",121,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"default_span","","",121,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[11,"map_crate","","",118,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"default_span","","",118,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[11,"map_crate","rustc::ty","",466,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"default_span","","",466,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[0,"queries","rustc::ty::maps","",null,null],[3,"type_of","rustc::ty::maps::queries","",null,null],[3,"generics_of","","",null,null],[3,"predicates_of","","",null,null],[3,"super_predicates_of","","",null,null],[3,"type_param_predicates","","",null,null],[3,"trait_def","","",null,null],[3,"adt_def","","",null,null],[3,"adt_destructor","","",null,null],[3,"adt_sized_constraint","","",null,null],[3,"adt_dtorck_constraint","","",null,null],[3,"is_const_fn","","",null,null],[3,"is_foreign_item","","",null,null],[3,"is_default_impl","","",null,null],[3,"crate_variances","","",null,null],[3,"variances_of","","",null,null],[3,"inferred_outlives_of","","",null,null],[3,"associated_item_def_ids","","",null,null],[3,"associated_item","","",null,null],[3,"impl_trait_ref","","",null,null],[3,"impl_polarity","","",null,null],[3,"inherent_impls","","",null,null],[3,"mir_keys","","",null,null],[3,"mir_const_qualif","","",null,null],[3,"mir_const","","",null,null],[3,"mir_validated","","",null,null],[3,"optimized_mir","","",null,null],[3,"closure_kind","","",null,null],[3,"unsafety_violations","","",null,null],[3,"fn_sig","","",null,null],[3,"generator_sig","","",null,null],[3,"coerce_unsized_info","","",null,null],[3,"typeck_item_bodies","","",null,null],[3,"typeck_tables_of","","",null,null],[3,"has_typeck_tables","","",null,null],[3,"coherent_trait","","",null,null],[3,"borrowck","","",null,null],[3,"mir_borrowck","","",null,null],[3,"crate_inherent_impls","","",null,null],[3,"crate_inherent_impls_overlap_check","","",null,null],[3,"const_eval","","",null,null],[3,"privacy_access_levels","","",null,null],[3,"reachable_set","","",null,null],[3,"region_scope_tree","","",null,null],[3,"mir_shims","","",null,null],[3,"def_symbol_name","","",null,null],[3,"symbol_name","","",null,null],[3,"describe_def","","",null,null],[3,"def_span","","",null,null],[3,"lookup_stability","","",null,null],[3,"lookup_deprecation_entry","","",null,null],[3,"item_attrs","","",null,null],[3,"fn_arg_names","","",null,null],[3,"impl_parent","","",null,null],[3,"trait_of_item","","",null,null],[3,"is_exported_symbol","","",null,null],[3,"item_body_nested_bodies","","",null,null],[3,"const_is_rvalue_promotable_to_static","","",null,null],[3,"rvalue_promotable_map","","",null,null],[3,"is_mir_available","","",null,null],[3,"vtable_methods","","",null,null],[3,"trans_fulfill_obligation","","",null,null],[3,"trait_impls_of","","",null,null],[3,"specialization_graph_of","","",null,null],[3,"is_object_safe","","",null,null],[3,"param_env","","",null,null],[3,"is_copy_raw","","",null,null],[3,"is_sized_raw","","",null,null],[3,"is_freeze_raw","","",null,null],[3,"needs_drop_raw","","",null,null],[3,"layout_raw","","",null,null],[3,"dylib_dependency_formats","","",null,null],[3,"is_panic_runtime","","",null,null],[3,"is_compiler_builtins","","",null,null],[3,"has_global_allocator","","",null,null],[3,"is_sanitizer_runtime","","",null,null],[3,"is_profiler_runtime","","",null,null],[3,"panic_strategy","","",null,null],[3,"is_no_builtins","","",null,null],[3,"extern_crate","","",null,null],[3,"specializes","","",null,null],[3,"in_scope_traits_map","","",null,null],[3,"module_exports","","",null,null],[3,"lint_levels","","",null,null],[3,"impl_defaultness","","",null,null],[3,"exported_symbol_ids","","",null,null],[3,"native_libraries","","",null,null],[3,"plugin_registrar_fn","","",null,null],[3,"derive_registrar_fn","","",null,null],[3,"crate_disambiguator","","",null,null],[3,"crate_hash","","",null,null],[3,"original_crate_name","","",null,null],[3,"implementations_of_trait","","",null,null],[3,"all_trait_implementations","","",null,null],[3,"is_dllimport_foreign_item","","",null,null],[3,"is_statically_included_foreign_item","","",null,null],[3,"native_library_kind","","",null,null],[3,"link_args","","",null,null],[3,"named_region_map","","",null,null],[3,"is_late_bound_map","","",null,null],[3,"object_lifetime_defaults_map","","",null,null],[3,"visibility","","",null,null],[3,"dep_kind","","",null,null],[3,"crate_name","","",null,null],[3,"item_children","","",null,null],[3,"extern_mod_stmt_cnum","","",null,null],[3,"get_lang_items","","",null,null],[3,"defined_lang_items","","",null,null],[3,"missing_lang_items","","",null,null],[3,"extern_const_body","","",null,null],[3,"visible_parent_map","","",null,null],[3,"missing_extern_crate_item","","",null,null],[3,"used_crate_source","","",null,null],[3,"postorder_cnums","","",null,null],[3,"freevars","","",null,null],[3,"maybe_unused_trait_import","","",null,null],[3,"maybe_unused_extern_crates","","",null,null],[3,"stability_index","","",null,null],[3,"all_crate_nums","","",null,null],[3,"exported_symbols","","",null,null],[3,"collect_and_partition_translation_items","","",null,null],[3,"export_name","","",null,null],[3,"contains_extern_indicator","","",null,null],[3,"is_translated_function","","",null,null],[3,"codegen_unit","","",null,null],[3,"compile_codegen_unit","","",null,null],[3,"output_filenames","","",null,null],[3,"has_copy_closures","","",null,null],[3,"has_clone_closures","","",null,null],[3,"erase_regions_ty","","",null,null],[8,"Key","rustc::ty::maps","The `Key` trait controls what types can legally be used as the key for a query.",null,null],[10,"map_crate","","Given an instance of this key, what crate is it referring to? This is used to find the provider.",537,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[10,"default_span","","In the event that a cycle occurs, if no explicit span has been given for a query with key `self`, what span should we use?",537,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[8,"QueryConfig","","Query configuration and description traits.",null,null],[16,"Key","","",538,null],[16,"Value","","",538,null],[11,"new","","",539,{"inputs":[{"name":"indexvec"}],"output":{"name":"self"}}],[11,"clone","","",535,{"inputs":[{"name":"self"}],"output":{"name":"query"}}],[11,"fmt","","",535,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",535,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"name":"bool"}}],[11,"ne","","",535,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"name":"bool"}}],[11,"clone","","",536,{"inputs":[{"name":"self"}],"output":{"name":"querymsg"}}],[11,"fmt","","",536,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",536,{"inputs":[{"name":"self"},{"name":"querymsg"}],"output":{"name":"bool"}}],[11,"ne","","",536,{"inputs":[{"name":"self"},{"name":"querymsg"}],"output":{"name":"bool"}}],[11,"describe","","",535,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"ensure","rustc::ty::maps::queries","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",540,null],[11,"try_get","","",540,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",541,null],[11,"try_get","","",541,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",542,null],[11,"try_get","","",542,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",543,null],[11,"try_get","","",543,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",544,null],[11,"try_get","","",544,null],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",545,null],[11,"try_get","","",545,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",546,null],[11,"try_get","","",546,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",547,null],[11,"try_get","","",547,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",548,null],[11,"try_get","","",548,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",549,null],[11,"try_get","","",549,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",550,null],[11,"try_get","","",550,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",551,null],[11,"try_get","","",551,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",552,null],[11,"try_get","","",552,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",553,null],[11,"try_get","","",553,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",554,null],[11,"try_get","","",554,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",555,null],[11,"try_get","","",555,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",556,null],[11,"try_get","","",556,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",557,null],[11,"try_get","","",557,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",558,null],[11,"try_get","","",558,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",559,null],[11,"try_get","","",559,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",560,null],[11,"try_get","","",560,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",561,null],[11,"try_get","","",561,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",562,null],[11,"try_get","","",562,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",563,null],[11,"try_get","","",563,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",564,null],[11,"try_get","","",564,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",565,null],[11,"try_get","","",565,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",566,null],[11,"try_get","","",566,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",567,null],[11,"try_get","","",567,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",568,null],[11,"try_get","","",568,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",569,null],[11,"try_get","","",569,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",570,null],[11,"try_get","","",570,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",571,null],[11,"try_get","","",571,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",572,null],[11,"try_get","","",572,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",573,null],[11,"try_get","","",573,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",574,null],[11,"try_get","","",574,null],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",575,null],[11,"try_get","","",575,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",576,null],[11,"try_get","","",576,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",577,null],[11,"try_get","","",577,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",578,null],[11,"try_get","","",578,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",579,null],[11,"try_get","","",579,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"paramenvand"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",580,null],[11,"try_get","","",580,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",581,null],[11,"try_get","","",581,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",582,null],[11,"try_get","","",582,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",583,null],[11,"try_get","","",583,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"instancedef"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",584,null],[11,"try_get","","",584,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",585,null],[11,"try_get","","",585,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"instance"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",586,null],[11,"try_get","","",586,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",587,null],[11,"try_get","","",587,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",588,null],[11,"try_get","","",588,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",589,null],[11,"try_get","","",589,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",590,null],[11,"try_get","","",590,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",591,null],[11,"try_get","","",591,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",592,null],[11,"try_get","","",592,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",593,null],[11,"try_get","","",593,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",594,null],[11,"try_get","","",594,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",595,null],[11,"try_get","","",595,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",596,null],[11,"try_get","","",596,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",597,null],[11,"try_get","","",597,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",598,null],[11,"try_get","","",598,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",599,null],[11,"try_get","","",599,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"polytraitref"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",600,null],[11,"try_get","","",600,null],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",601,null],[11,"try_get","","",601,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",602,null],[11,"try_get","","",602,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",603,null],[11,"try_get","","",603,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",604,null],[11,"try_get","","",604,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",605,null],[11,"try_get","","",605,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"paramenvand"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",606,null],[11,"try_get","","",606,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"paramenvand"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",607,null],[11,"try_get","","",607,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"paramenvand"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",608,null],[11,"try_get","","",608,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"paramenvand"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",609,null],[11,"try_get","","",609,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"paramenvand"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",610,null],[11,"try_get","","",610,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",611,null],[11,"try_get","","",611,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",612,null],[11,"try_get","","",612,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",613,null],[11,"try_get","","",613,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",614,null],[11,"try_get","","",614,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",615,null],[11,"try_get","","",615,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",616,null],[11,"try_get","","",616,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",617,null],[11,"try_get","","",617,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",618,null],[11,"try_get","","",618,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",619,null],[11,"try_get","","",619,null],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",620,null],[11,"try_get","","",620,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defindex"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",621,null],[11,"try_get","","",621,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",622,null],[11,"try_get","","",622,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",623,null],[11,"try_get","","",623,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",624,null],[11,"try_get","","",624,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",625,null],[11,"try_get","","",625,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",626,null],[11,"try_get","","",626,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",627,null],[11,"try_get","","",627,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",628,null],[11,"try_get","","",628,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",629,null],[11,"try_get","","",629,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",630,null],[11,"try_get","","",630,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",631,null],[11,"try_get","","",631,null],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",632,null],[11,"try_get","","",632,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",633,null],[11,"try_get","","",633,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",634,null],[11,"try_get","","",634,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",635,null],[11,"try_get","","",635,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",636,null],[11,"try_get","","",636,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",637,null],[11,"try_get","","",637,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defindex"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",638,null],[11,"try_get","","",638,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defindex"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",639,null],[11,"try_get","","",639,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defindex"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",640,null],[11,"try_get","","",640,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",641,null],[11,"try_get","","",641,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",642,null],[11,"try_get","","",642,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",643,null],[11,"try_get","","",643,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",644,null],[11,"try_get","","",644,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",645,null],[11,"try_get","","",645,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",646,null],[11,"try_get","","",646,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",647,null],[11,"try_get","","",647,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",648,null],[11,"try_get","","",648,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",649,null],[11,"try_get","","",649,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",650,null],[11,"try_get","","",650,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",651,null],[11,"try_get","","",651,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",652,null],[11,"try_get","","",652,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",653,null],[11,"try_get","","",653,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",654,null],[11,"try_get","","",654,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",655,null],[11,"try_get","","",655,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",656,null],[11,"try_get","","",656,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",657,null],[11,"try_get","","",657,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",658,null],[11,"try_get","","",658,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",659,null],[11,"try_get","","",659,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",660,null],[11,"try_get","","",660,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",661,null],[11,"try_get","","",661,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",662,null],[11,"try_get","","",662,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",663,null],[11,"try_get","","",663,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",664,null],[11,"try_get","","",664,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",665,null],[11,"try_get","","",665,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",666,null],[11,"try_get","","",666,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",667,null],[11,"try_get","","",667,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"ensure","","Ensure that either this query has all green inputs or been executed. Executing query::ensure(D) is considered a read of the dep-node D.",668,null],[11,"try_get","","",668,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"ty"}],"output":{"name":"result"}}],[11,"clone","rustc::ty::maps","",533,{"inputs":[{"name":"self"}],"output":{"name":"tyctxtat"}}],[11,"deref","","",533,null],[11,"at","rustc::ty","Return a transparent wrapper for `TyCtxt` which uses `span` as the location of queries performed through it.",507,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tyctxtat"}}],[11,"type_of","","Records the type of every item.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ty"}}],[11,"generics_of","","Maps from the def-id of an item (trait/struct/enum/fn) to its associated generics and predicates.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"predicates_of","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"super_predicates_of","","Maps from the def-id of a trait to the list of super-predicates. This is a subset of the full list of predicates. We store these in a separate map because we must evaluate them even during type conversion, often before the full predicates are available (note that supertraits have additional acyclicity requirements).",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"type_param_predicates","","To avoid cycles within the predicates of a single item we compute per-type-parameter predicates for resolving `T::AssocTy`.",507,null],[11,"trait_def","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"traitdef"}}],[11,"adt_def","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"adtdef"}}],[11,"adt_destructor","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"adt_sized_constraint","","",507,null],[11,"adt_dtorck_constraint","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"dtorckconstraint"}}],[11,"is_const_fn","","True if this is a const fn",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","True if this is a foreign item (i.e., linked via `extern { ... }`).",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","True if this is a default impl (aka impl Foo for ..)",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crate_variances","","Get a map with the variance of every item; use `item_variance` instead.",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"variances_of","","Maps from def-id of a type or region parameter to its (inferred) variance.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"inferred_outlives_of","","Maps from def-id of a type to its (inferred) outlives.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"associated_item_def_ids","","Maps from an impl/trait def-id to a list of the def-ids of its items",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"associated_item","","Maps from a trait item to the trait item \"descriptor\"",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"impl_trait_ref","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_polarity","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls. Contains implementations of methods that are inherent to a type. Methods in these implementations don't need to be exported.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"mir_keys","","Set of all the def-ids in this crate that have MIR associated with them. This includes all the body owners, but also things like struct constructors.",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"mir_const_qualif","","Maps DefId's that have an associated Mir to the result of the MIR qualify_consts pass. The actual meaning of the value isn't known except to the pass itself.",507,null],[11,"mir_const","","Fetch the MIR for a given def-id up till the point where it is ready for const evaluation.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"steal"}}],[11,"mir_validated","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"steal"}}],[11,"optimized_mir","","MIR after our optimization passes have run. This is MIR that is ready for trans. This is also the only query that can fetch non-local MIR, at present.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"mir"}}],[11,"closure_kind","","Type of each closure. The def ID is the ID of the expression defining the closure.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[11,"unsafety_violations","","Unsafety violations for this def ID.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"fn_sig","","The signature of functions and closures.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"polyfnsig"}}],[11,"generator_sig","","Records the signature of each generator. The def ID is the ID of the expression defining the closure.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"coerce_unsized_info","","Caches CoerceUnsized kinds for impls on custom types.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"coerceunsizedinfo"}}],[11,"typeck_item_bodies","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"compileresult"}}],[11,"typeck_tables_of","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"typecktables"}}],[11,"has_typeck_tables","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"coherent_trait","","",507,null],[11,"borrowck","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"mir_borrowck","","",507,null],[11,"crate_inherent_impls","","Gets a complete map from all types to their inherent impls. Not meant to be used directly outside of coherence. (Defined only for LOCAL_CRATE)",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"crateinherentimpls"}}],[11,"crate_inherent_impls_overlap_check","","Checks all types in the krate for overlap in their inherent impls. Reports errors. Not meant to be used directly outside of coherence. (Defined only for LOCAL_CRATE)",507,null],[11,"const_eval","","Results of evaluating const items or constants embedded in other items (such as enum variant explicit discriminants).",507,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"evalresult"}}],[11,"privacy_access_levels","","Performs the privacy check and computes \"access levels\".",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"reachable_set","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"reachableset"}}],[11,"region_scope_tree","","Per-body `region::ScopeTree`. The `DefId` should be the owner-def-id for the body; in the case of closures, this will be redirected to the enclosing function.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"mir_shims","","",507,{"inputs":[{"name":"self"},{"name":"instancedef"}],"output":{"name":"mir"}}],[11,"def_symbol_name","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"symbolname"}}],[11,"symbol_name","","",507,{"inputs":[{"name":"self"},{"name":"instance"}],"output":{"name":"symbolname"}}],[11,"describe_def","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"span"}}],[11,"lookup_stability","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lookup_deprecation_entry","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_attrs","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"fn_arg_names","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"impl_parent","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"is_exported_symbol","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"item_body_nested_bodies","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"externbodynestedbodies"}}],[11,"const_is_rvalue_promotable_to_static","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"rvalue_promotable_map","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"is_mir_available","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"vtable_methods","","",507,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"rc"}}],[11,"trans_fulfill_obligation","","",507,null],[11,"trait_impls_of","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"specialization_graph_of","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"is_object_safe","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"param_env","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"paramenv"}}],[11,"is_copy_raw","","",507,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"is_sized_raw","","",507,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"is_freeze_raw","","",507,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"needs_drop_raw","","",507,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"layout_raw","","",507,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"result"}}],[11,"dylib_dependency_formats","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"is_panic_runtime","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"has_global_allocator","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_profiler_runtime","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"is_no_builtins","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"extern_crate","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"specializes","","",507,null],[11,"in_scope_traits_map","","",507,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"module_exports","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lint_levels","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"impl_defaultness","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defaultness"}}],[11,"exported_symbol_ids","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"native_libraries","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"plugin_registrar_fn","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_disambiguator","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"original_crate_name","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"implementations_of_trait","","",507,null],[11,"all_trait_implementations","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"is_dllimport_foreign_item","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"native_library_kind","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"link_args","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"named_region_map","","",507,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"is_late_bound_map","","",507,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"object_lifetime_defaults_map","","",507,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"visibility","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"dep_kind","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"crate_name","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"item_children","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"extern_mod_stmt_cnum","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"get_lang_items","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"defined_lang_items","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"missing_lang_items","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"extern_const_body","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"externconstbody"}}],[11,"visible_parent_map","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"missing_extern_crate_item","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"used_crate_source","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"postorder_cnums","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"freevars","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"maybe_unused_trait_import","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"maybe_unused_extern_crates","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"stability_index","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"all_crate_nums","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"exported_symbols","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"arc"}}],[11,"collect_and_partition_translation_items","","",507,null],[11,"export_name","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"contains_extern_indicator","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_translated_function","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"codegen_unit","","",507,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"arc"}}],[11,"compile_codegen_unit","","",507,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"stats"}}],[11,"output_filenames","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"arc"}}],[11,"has_copy_closures","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"has_clone_closures","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"erase_regions_ty","","",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"type_of","rustc::ty::maps","Records the type of every item.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ty"}}],[11,"generics_of","","Maps from the def-id of an item (trait/struct/enum/fn) to its associated generics and predicates.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"predicates_of","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"super_predicates_of","","Maps from the def-id of a trait to the list of super-predicates. This is a subset of the full list of predicates. We store these in a separate map because we must evaluate them even during type conversion, often before the full predicates are available (note that supertraits have additional acyclicity requirements).",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"type_param_predicates","","To avoid cycles within the predicates of a single item we compute per-type-parameter predicates for resolving `T::AssocTy`.",533,null],[11,"trait_def","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"traitdef"}}],[11,"adt_def","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"adtdef"}}],[11,"adt_destructor","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"adt_sized_constraint","","",533,null],[11,"adt_dtorck_constraint","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"dtorckconstraint"}}],[11,"is_const_fn","","True if this is a const fn",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","True if this is a foreign item (i.e., linked via `extern { ... }`).",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","True if this is a default impl (aka impl Foo for ..)",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crate_variances","","Get a map with the variance of every item; use `item_variance` instead.",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"variances_of","","Maps from def-id of a type or region parameter to its (inferred) variance.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"inferred_outlives_of","","Maps from def-id of a type to its (inferred) outlives.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"associated_item_def_ids","","Maps from an impl/trait def-id to a list of the def-ids of its items",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"associated_item","","Maps from a trait item to the trait item \"descriptor\"",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"impl_trait_ref","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_polarity","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls. Contains implementations of methods that are inherent to a type. Methods in these implementations don't need to be exported.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"mir_keys","","Set of all the def-ids in this crate that have MIR associated with them. This includes all the body owners, but also things like struct constructors.",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"mir_const_qualif","","Maps DefId's that have an associated Mir to the result of the MIR qualify_consts pass. The actual meaning of the value isn't known except to the pass itself.",533,null],[11,"mir_const","","Fetch the MIR for a given def-id up till the point where it is ready for const evaluation.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"steal"}}],[11,"mir_validated","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"steal"}}],[11,"optimized_mir","","MIR after our optimization passes have run. This is MIR that is ready for trans. This is also the only query that can fetch non-local MIR, at present.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"mir"}}],[11,"closure_kind","","Type of each closure. The def ID is the ID of the expression defining the closure.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[11,"unsafety_violations","","Unsafety violations for this def ID.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"fn_sig","","The signature of functions and closures.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"polyfnsig"}}],[11,"generator_sig","","Records the signature of each generator. The def ID is the ID of the expression defining the closure.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"coerce_unsized_info","","Caches CoerceUnsized kinds for impls on custom types.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"coerceunsizedinfo"}}],[11,"typeck_item_bodies","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"compileresult"}}],[11,"typeck_tables_of","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"typecktables"}}],[11,"has_typeck_tables","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"coherent_trait","","",533,null],[11,"borrowck","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"mir_borrowck","","",533,null],[11,"crate_inherent_impls","","Gets a complete map from all types to their inherent impls. Not meant to be used directly outside of coherence. (Defined only for LOCAL_CRATE)",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"crateinherentimpls"}}],[11,"crate_inherent_impls_overlap_check","","Checks all types in the krate for overlap in their inherent impls. Reports errors. Not meant to be used directly outside of coherence. (Defined only for LOCAL_CRATE)",533,null],[11,"const_eval","","Results of evaluating const items or constants embedded in other items (such as enum variant explicit discriminants).",533,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"evalresult"}}],[11,"privacy_access_levels","","Performs the privacy check and computes \"access levels\".",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"reachable_set","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"reachableset"}}],[11,"region_scope_tree","","Per-body `region::ScopeTree`. The `DefId` should be the owner-def-id for the body; in the case of closures, this will be redirected to the enclosing function.",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"mir_shims","","",533,{"inputs":[{"name":"self"},{"name":"instancedef"}],"output":{"name":"mir"}}],[11,"def_symbol_name","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"symbolname"}}],[11,"symbol_name","","",533,{"inputs":[{"name":"self"},{"name":"instance"}],"output":{"name":"symbolname"}}],[11,"describe_def","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"span"}}],[11,"lookup_stability","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lookup_deprecation_entry","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_attrs","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"fn_arg_names","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"impl_parent","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"is_exported_symbol","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"item_body_nested_bodies","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"externbodynestedbodies"}}],[11,"const_is_rvalue_promotable_to_static","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"rvalue_promotable_map","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"is_mir_available","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"vtable_methods","","",533,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"rc"}}],[11,"trans_fulfill_obligation","","",533,null],[11,"trait_impls_of","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"specialization_graph_of","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"is_object_safe","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"param_env","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"paramenv"}}],[11,"is_copy_raw","","",533,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"is_sized_raw","","",533,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"is_freeze_raw","","",533,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"needs_drop_raw","","",533,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"layout_raw","","",533,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"result"}}],[11,"dylib_dependency_formats","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"is_panic_runtime","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"has_global_allocator","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_profiler_runtime","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"is_no_builtins","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"extern_crate","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"specializes","","",533,null],[11,"in_scope_traits_map","","",533,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"module_exports","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lint_levels","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"impl_defaultness","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defaultness"}}],[11,"exported_symbol_ids","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"native_libraries","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"plugin_registrar_fn","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_disambiguator","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"original_crate_name","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"implementations_of_trait","","",533,null],[11,"all_trait_implementations","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"is_dllimport_foreign_item","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"native_library_kind","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"link_args","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"named_region_map","","",533,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"is_late_bound_map","","",533,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"object_lifetime_defaults_map","","",533,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"visibility","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"dep_kind","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"crate_name","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"item_children","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"extern_mod_stmt_cnum","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"get_lang_items","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"defined_lang_items","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"missing_lang_items","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"extern_const_body","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"externconstbody"}}],[11,"visible_parent_map","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"missing_extern_crate_item","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"used_crate_source","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"postorder_cnums","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"freevars","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"maybe_unused_trait_import","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"maybe_unused_extern_crates","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"stability_index","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"all_crate_nums","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"exported_symbols","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"arc"}}],[11,"collect_and_partition_translation_items","","",533,null],[11,"export_name","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"contains_extern_indicator","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_translated_function","","",533,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"codegen_unit","","",533,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"arc"}}],[11,"compile_codegen_unit","","",533,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"stats"}}],[11,"output_filenames","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"arc"}}],[11,"has_copy_closures","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"has_clone_closures","","",533,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"erase_regions_ty","","",533,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"default","","",534,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",534,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"outlives","rustc::ty","",null,null],[4,"Component","rustc::ty::outlives","",null,null],[13,"Region","","",669,null],[13,"Param","","",669,null],[13,"UnresolvedInferenceVariable","","",669,null],[13,"Projection","","",669,null],[13,"EscapingProjection","","",669,null],[11,"fmt","","",669,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"outlives_components","rustc::ty","Returns all the things that must outlive `'a` for the condition `ty0: 'a` to hold. Note that `ty0` must be a fully resolved type.",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"vec"}}],[0,"relate","","Generalized type relating mechanism. A type relation R relates a pair of values (A, B). A and B are usually types or regions but can be other things. Examples of type relations are subtyping, type equality, etc.",null,null],[4,"Cause","rustc::ty::relate","",null,null],[13,"ExistentialRegionBound","","",670,null],[5,"relate_substs","","",null,{"inputs":[{"name":"r"},{"name":"option"},{"name":"substs"},{"name":"substs"}],"output":{"name":"relateresult"}}],[5,"super_relate_tys","","The main \"type relation\" routine. Note that this does not handle inference artifacts, so you should filter those out before calling it.",null,{"inputs":[{"name":"r"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[5,"expected_found","","",null,{"inputs":[{"name":"r"},{"name":"t"},{"name":"t"}],"output":{"name":"expectedfound"}}],[5,"expected_found_bool","","",null,{"inputs":[{"name":"bool"},{"name":"t"},{"name":"t"}],"output":{"name":"expectedfound"}}],[6,"RelateResult","","",null,null],[8,"TypeRelation","","",null,null],[10,"tcx","","",671,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[10,"tag","","Returns a static string we can use for printouts.",671,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"a_is_expected","","Returns true if the value `a` is the \"expected\" type in the relation. Just affects error messages.",671,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_cause","","",671,{"inputs":[{"name":"self"},{"name":"cause"},{"name":"f"}],"output":{"name":"r"}}],[11,"relate","","Generic relation routine suitable for most anything.",671,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"relateresult"}}],[11,"relate_item_substs","","Relate the two substitutions for the given item. The default is to look up the variance for the item and proceed accordingly.",671,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"substs"},{"name":"substs"}],"output":{"name":"relateresult"}}],[10,"relate_with_variance","","Switch variance for the purpose of relating `a` and `b`.",671,{"inputs":[{"name":"self"},{"name":"variance"},{"name":"t"},{"name":"t"}],"output":{"name":"relateresult"}}],[10,"tys","","",671,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[10,"regions","","",671,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":{"name":"relateresult"}}],[10,"binders","","",671,{"inputs":[{"name":"self"},{"name":"binder"},{"name":"binder"}],"output":{"name":"relateresult"}}],[8,"Relate","","",null,null],[10,"relate","","",672,{"inputs":[{"name":"r"},{"name":"self"},{"name":"self"}],"output":{"name":"relateresult"}}],[11,"clone","","",670,{"inputs":[{"name":"self"}],"output":{"name":"cause"}}],[11,"fmt","","",670,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relate","rustc::ty","",431,{"inputs":[{"name":"r"},{"name":"typeandmut"},{"name":"typeandmut"}],"output":{"name":"relateresult"}}],[11,"relate","","",425,{"inputs":[{"name":"r"},{"name":"fnsig"},{"name":"fnsig"}],"output":{"name":"relateresult"}}],[11,"relate","rustc::hir","",103,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"relateresult"}}],[11,"relate","rustc::ty","",428,{"inputs":[{"name":"r"},{"name":"projectionty"},{"name":"projectionty"}],"output":{"name":"relateresult"}}],[11,"relate","","",434,{"inputs":[{"name":"r"},{"name":"existentialprojection"},{"name":"existentialprojection"}],"output":{"name":"relateresult"}}],[11,"relate","","",432,{"inputs":[{"name":"r"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"relateresult"}}],[11,"relate","","",433,{"inputs":[{"name":"r"},{"name":"existentialtraitref"},{"name":"existentialtraitref"}],"output":{"name":"relateresult"}}],[11,"relate","","",429,{"inputs":[{"name":"r"},{"name":"closuresubsts"},{"name":"closuresubsts"}],"output":{"name":"relateresult"}}],[11,"relate","","",430,{"inputs":[{"name":"r"},{"name":"generatorinterior"},{"name":"generatorinterior"}],"output":{"name":"relateresult"}}],[11,"relate","","",423,{"inputs":[{"name":"r"},{"name":"binder"},{"name":"binder"}],"output":{"name":"relateresult"}}],[0,"steal","","",null,null],[3,"Steal","rustc::ty::steal","The `Steal` struct is intended to used as the value for a query. Specifically, we sometimes have queries (cough MIR cough) where we create a large, complex value that we want to iteratively update (e.g., optimize). We could clone the value for each optimization, but that'd be expensive. And yet we don't just want to mutate it in place, because that would spoil the idea that queries are these pure functions that produce an immutable value (since if you did the query twice, you could observe the mutations). So instead we have the query produce a `&'tcx Steal<Mir<'tcx>>` (to be very specific). Now we can read from this as much as we want (using `borrow()`), but you can also `steal()`. Once you steal, any further attempt to read will panic. Therefore we know that -- assuming no ICE -- nobody is observing the fact that the MIR was updated.",null,null],[11,"new","","",673,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"borrow","","",673,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"steal","","",673,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"subst","rustc::ty","",null,null],[3,"Kind","rustc::ty::subst","An entity in the Rust typesystem, which can be one of several kinds (only types and lifetimes for now). To reduce memory usage, a `Kind` is a interned pointer, with the lowest 2 bits being reserved for a tag to indicate the type (`Ty` or `Region`) it points to.",null,null],[6,"Substs","","A substitution mapping type/region parameters to new values.",null,null],[8,"Subst","","",null,null],[11,"subst","","",674,null],[10,"subst_spanned","","",674,null],[11,"clone","","",675,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"eq","","",675,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",675,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"hash","","",675,null],[11,"from","","",675,{"inputs":[{"name":"ty"}],"output":{"name":"kind"}}],[11,"from","","",675,{"inputs":[{"name":"region"}],"output":{"name":"kind"}}],[11,"as_type","","",675,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_region","","",675,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",675,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"super_fold_with","","",675,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",675,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"encode","","",675,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",675,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"identity_for_item","","Creates a Substs that maps each generic parameter to itself.",676,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"substs"}}],[11,"for_item","","Creates a Substs for generic parameter definitions, by calling closures to obtain each region and type. The closures get to observe the Substs as they're being built, which can be used to correctly substitute defaults of type parameters.",676,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"fr"},{"name":"ft"}],"output":{"name":"substs"}}],[11,"extend_to","","",676,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"},{"name":"fr"},{"name":"ft"}],"output":{"name":"substs"}}],[11,"is_noop","","",676,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"types","","",676,null],[11,"regions","","",676,null],[11,"type_at","","",676,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"ty"}}],[11,"region_at","","",676,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"region"}}],[11,"type_for_def","","",676,{"inputs":[{"name":"self"},{"name":"typeparameterdef"}],"output":{"name":"ty"}}],[11,"region_for_def","","",676,{"inputs":[{"name":"self"},{"name":"regionparameterdef"}],"output":{"name":"region"}}],[11,"rebase_onto","","Transform from substitutions for a child of `source_ancestor` (e.g. a trait or impl) to substitutions for the same child in a different item, with `target_substs` as the base for the target impl/trait, with the source child-specific parameters (e.g. method parameters) on top of that base.",676,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"},{"name":"substs"}],"output":{"name":"substs"}}],[11,"truncate_to","","",676,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"generics"}],"output":{"name":"substs"}}],[11,"from_method","rustc::ty","",432,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"erase_self_ty","","",433,{"inputs":[{"name":"tyctxt"},{"name":"traitref"}],"output":{"name":"existentialtraitref"}}],[0,"trait_def","","",null,null],[3,"TraitDef","rustc::ty::trait_def","A trait's definition with type information.",null,null],[12,"def_id","","",677,null],[12,"unsafety","","",677,null],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]` attribute, indicating that it should be used with `Foo()` sugar. This is a temporary thing -- eventually any trait will be usable with the sugar (or without it).",677,null],[12,"has_default_impl","","",677,null],[12,"def_path_hash","","The ICH of this trait's DefPath, cached here so it doesn't have to be recomputed all the time.",677,null],[3,"TraitImpls","","",null,null],[11,"new","","",677,{"inputs":[{"name":"defid"},{"name":"unsafety"},{"name":"bool"},{"name":"bool"},{"name":"defpathhash"}],"output":{"name":"traitdef"}}],[11,"ancestors","","",677,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"ancestors"}}],[11,"for_each_impl","rustc::ty","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"f"}],"output":null}],[11,"for_each_relevant_impl","","Iterate over every impl that could possibly match the self-type `self_ty`.",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"ty"},{"name":"f"}],"output":null}],[11,"hash_stable","rustc::ty::trait_def","",678,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[0,"walk","rustc::ty","An iterator over the type substructure. WARNING: this does not keep track of the region depth.",null,null],[3,"TypeWalker","rustc::ty::walk","",null,null],[5,"walk_shallow","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"accintoiter"}}],[6,"TypeWalkerArray","","",null,null],[6,"TypeWalkerStack","","",null,null],[11,"new","","",679,{"inputs":[{"name":"ty"}],"output":{"name":"typewalker"}}],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type returned by `next()`.",679,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",679,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"wf","rustc::ty","",null,null],[5,"obligations","rustc::ty::wf","Returns the set of obligations needed to make `ty` well-formed. If `ty` contains unresolved inference variables, this may include further WF obligations. However, if `ty` IS an unresolved inference variable, returns `None`, because we are not able to make any progress at all. This is to prevent \"livelock\" where we say \"$0 is WF if $0 is WF\".",null,{"inputs":[{"name":"inferctxt"},{"name":"paramenv"},{"name":"nodeid"},{"name":"ty"},{"name":"span"}],"output":{"name":"option"}}],[5,"trait_obligations","","Returns the obligations that make this trait reference well-formed.  For example, if there is a trait `Set` defined like `trait Set<K:Eq>`, then the trait reference `Foo: Set<Bar>` is WF if `Bar: Eq`.",null,{"inputs":[{"name":"inferctxt"},{"name":"paramenv"},{"name":"nodeid"},{"name":"traitref"},{"name":"span"}],"output":{"name":"vec"}}],[5,"predicate_obligations","","",null,{"inputs":[{"name":"inferctxt"},{"name":"paramenv"},{"name":"nodeid"},{"name":"predicate"},{"name":"span"}],"output":{"name":"vec"}}],[5,"object_region_bounds","","Given an object type like `SomeTrait+Send`, computes the lifetime bounds that must hold on the elided self type. These are derived from the declarations of `SomeTrait`, `Send`, and friends -- if they declare `trait SomeTrait : 'static`, for example, then `'static` would appear in the list. The hard work is done by `ty::required_region_bounds`, see that for more information.",null,{"inputs":[{"name":"tyctxt"},{"name":"binder"}],"output":{"name":"vec"}}],[0,"util","rustc::ty","misc. type-system utilities too small to deserve their own file",null,null],[3,"TypeIdHasher","rustc::ty::util","",null,null],[4,"CopyImplementationError","","",null,null],[13,"InfrigingField","","",680,null],[13,"NotAnAdt","","",680,null],[13,"HasDestructor","","",680,null],[4,"Representability","","Describes whether a type is representable. For types that are not representable, 'SelfRecursive' and 'ContainsRecursive' are used to distinguish between types that are recursive with themselves and types that contain a different recursive type. These cases can therefore be treated differently when reporting errors.",null,null],[13,"Representable","","",681,null],[13,"ContainsRecursive","","",681,null],[13,"SelfRecursive","","",681,null],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[8,"IntTypeExt","","",null,null],[10,"to_ty","","",682,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[10,"disr_incr","","",682,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"option"}],"output":{"name":"option"}}],[10,"assert_ty_matches","","",682,{"inputs":[{"name":"self"},{"name":"constint"}],"output":null}],[10,"initial_discriminant","","",682,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"constint"}}],[11,"clone","","",680,{"inputs":[{"name":"self"}],"output":{"name":"copyimplementationerror"}}],[11,"clone","","",681,{"inputs":[{"name":"self"}],"output":{"name":"representability"}}],[11,"partial_cmp","","",681,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"option"}}],[11,"lt","","",681,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"bool"}}],[11,"le","","",681,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"bool"}}],[11,"gt","","",681,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"bool"}}],[11,"ge","","",681,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"bool"}}],[11,"cmp","","",681,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"ordering"}}],[11,"eq","","",681,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"bool"}}],[11,"ne","","",681,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"bool"}}],[11,"fmt","","",681,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","rustc::ty","Construct a trait environment suitable for contexts where there are no where clauses in scope.",465,{"inputs":[{"name":"reveal"}],"output":{"name":"self"}}],[11,"new","","Construct a trait environment with the given set of predicates.",465,{"inputs":[{"name":"slice"},{"name":"reveal"}],"output":{"name":"self"}}],[11,"reveal_all","","Returns a new parameter environment with the same clauses, but which \"reveals\" the true results of projections in all cases (even for associated types that are specializable).  This is the desired behavior during trans and certain other special contexts; normally though we want to use `Reveal::UserFacing`, which is the default.",465,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"can_type_implement_copy","","",465,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"},{"name":"span"}],"output":{"name":"result"}}],[11,"type_id_hash","","Creates a hash of the type `Ty` which will be the same no matter what crate context it's calculated within. This is used by the `type_id` intrinsic.",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"u64"}}],[11,"has_error_field","","",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`. For an enum `t`, `variant` is None only if `t` is a univariant enum.",507,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"usize"},{"name":"option"}],"output":{"name":"option"}}],[11,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`. For an enum `t`, `variant` must be some def id.",507,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"name"},{"name":"option"}],"output":{"name":"option"}}],[11,"struct_tail","","Returns the deeply last field of nested structures, or the same type, if not a structure at all. Corresponds to the only possible unsized field, and its type can be used to determine unsizing strategy.",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"struct_lockstep_tails","","Same as applying struct_tail on `source` and `target`, but only keeps going as long as the two types are instances of the same structure definitions. For `(Foo<Foo<T>>, Foo<Trait>)`, the result will be `(Foo<T>, Trait)`, whereas struct_tail produces `T`, and `Trait`, respectively.",507,null],[11,"required_region_bounds","","Given a set of predicates that apply to an object type, returns the region bounds that the (erased) `Self` type must outlive. Precisely because the `Self` type is erased, the parameter `erased_self_ty` must be supplied to indicate what type has been used to represent `Self` in the predicates themselves. This should really be a unique type; `FreshTy(0)` is a popular choice.",507,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"calculate_dtor","","Calculate the destructor of a given type.",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"fnmut"}],"output":{"name":"option"}}],[11,"destructor_constraints","","Return the set of types that are required to be alive in order to run the destructor of `def` (see RFCs 769 and 1238).",507,{"inputs":[{"name":"self"},{"name":"adtdef"}],"output":{"name":"vec"}}],[11,"dtorck_constraint_for_ty","","Return a set of constraints that needs to be satisfied in order for `ty` to be valid for destruction.",507,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"usize"},{"name":"ty"}],"output":{"name":"result"}}],[11,"closure_base_def_id","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defid"}}],[11,"empty_substs_for_def_id","","Given the def-id of some item that has no type parameters, make a suitable \"empty substs\" for it.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"substs"}}],[11,"const_usize","","",507,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"constint"}}],[11,"new","rustc::ty::util","",683,{"inputs":[{"name":"tyctxt"}],"output":{"name":"self"}}],[11,"finish","","",683,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"hash","","",683,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"visit_ty","","",683,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"visit_region","","",683,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"visit_binder","","",683,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"bool"}}],[11,"moves_by_default","rustc::ty","",451,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"paramenv"},{"name":"span"}],"output":{"name":"bool"}}],[11,"is_sized","","",451,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"paramenv"},{"name":"span"}],"output":{"name":"bool"}}],[11,"is_freeze","","",451,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"paramenv"},{"name":"span"}],"output":{"name":"bool"}}],[11,"needs_drop","","If `ty.needs_drop(...)` returns `true`, then `ty` is definitely non-copy and might have a destructor attached; if it returns `false`, then `ty` definitely has no destructor (i.e. no drop glue).",451,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"paramenv"}],"output":{"name":"bool"}}],[11,"layout","","Computes the layout of a type. Note that this implicitly executes in \"reveal all\" mode.",451,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"paramenv"}],"output":{"name":"result"}}],[11,"is_representable","","Check whether a type is representable. This means it cannot contain unboxed structural recursion. This check is needed for structs and enums.",451,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"span"}],"output":{"name":"representability"}}],[11,"new","","",684,{"inputs":[],"output":{"name":"globalarenas"}}],[11,"encode","","",443,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",443,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",443,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","",443,{"inputs":[{"name":"option"}],"output":{"name":"typecktables"}}],[11,"qpath_def","","Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.",443,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"hirid"}],"output":{"name":"def"}}],[11,"type_dependent_defs","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"type_dependent_defs_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"node_types","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"node_types_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"node_id_to_type","","",443,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"ty"}}],[11,"node_id_to_type_opt","","",443,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"option"}}],[11,"node_substs_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"node_substs","","",443,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"substs"}}],[11,"node_substs_opt","","",443,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"option"}}],[11,"pat_ty","","",443,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"ty"}}],[11,"pat_ty_opt","","",443,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"option"}}],[11,"expr_ty","","",443,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"expr_ty_opt","","",443,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"option"}}],[11,"adjustments","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"adjustments_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"expr_adjustments","","",443,null],[11,"expr_ty_adjusted","","Returns the type of `expr`, considering any `Adjustment` entry recorded for that expression.",443,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"expr_ty_adjusted_opt","","",443,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"option"}}],[11,"is_method_call","","",443,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"pat_binding_modes","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"pat_binding_modes_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"pat_adjustments","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"pat_adjustments_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"upvar_capture","","",443,{"inputs":[{"name":"self"},{"name":"upvarid"}],"output":{"name":"upvarcapture"}}],[11,"closure_tys","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"closure_tys_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"closure_kinds","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"closure_kinds_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"liberated_fn_sigs","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"liberated_fn_sigs_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"fru_field_types","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"fru_field_types_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"cast_kinds","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"cast_kinds_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"generator_sigs","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"generator_sigs_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"generator_interiors","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontext"}}],[11,"generator_interiors_mut","","",443,{"inputs":[{"name":"self"}],"output":{"name":"localtableincontextmut"}}],[11,"hash_stable","","",443,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"clone","","",507,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"deref","","",507,null],[11,"alloc_generics","","",507,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"alloc_steal_mir","","",507,{"inputs":[{"name":"self"},{"name":"mir"}],"output":{"name":"steal"}}],[11,"alloc_mir","","",507,{"inputs":[{"name":"self"},{"name":"mir"}],"output":{"name":"mir"}}],[11,"alloc_tables","","",507,{"inputs":[{"name":"self"},{"name":"typecktables"}],"output":{"name":"typecktables"}}],[11,"alloc_trait_def","","",507,{"inputs":[{"name":"self"},{"name":"traitdef"}],"output":{"name":"traitdef"}}],[11,"alloc_adt_def","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"adtkind"},{"name":"vec"},{"name":"reproptions"}],"output":{"name":"adtdef"}}],[11,"alloc_byte_array","","",507,null],[11,"alloc_const_slice","","",507,null],[11,"alloc_name_const_slice","","",507,null],[11,"intern_stability","","",507,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"stability"}}],[11,"intern_layout","","",507,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"layout"}}],[11,"lift","","",507,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"lift_to_global","","Like lift, but only tries in the global tcx.",507,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"create_and_enter","","Create a type context and call the closure with a `TyCtxt` reference to the context. The closure enforces that the type context and any interned value (types, substs, etc.) can only be used while `ty::tls` has a valid reference to the context, to allow formatting values that need it.",507,{"inputs":[{"name":"session"},{"name":"cratestore"},{"name":"providers"},{"name":"providers"},{"name":"rc"},{"name":"globalarenas"},{"name":"droplessarena"},{"name":"resolutions"},{"name":"namedregionmap"},{"name":"map"},{"name":"str"},{"name":"sender"},{"name":"outputfilenames"},{"name":"f"}],"output":{"name":"r"}}],[11,"consider_optimizing","","",507,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"lang_items","","",507,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"stability","","",507,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"crates","","",507,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"def_key","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","Convert a `DefId` into its fully expanded `DefPath` (every `DefId` is really just an interned def-path).",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"def_path_hash","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpathhash"}}],[11,"def_path_debug_str","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"string"}}],[11,"metadata_encoding_version","","",507,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"crate_data_as_rc_any","","",507,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"create_stable_hashing_context","","",507,{"inputs":[{"name":"self"}],"output":{"name":"stablehashingcontext"}}],[11,"allocate_metadata_dep_nodes","","",507,{"inputs":[{"name":"self"}],"output":null}],[11,"precompute_in_scope_traits_hashes","","",507,{"inputs":[{"name":"self"}],"output":null}],[11,"encode_metadata","","",507,null],[11,"print_debug_stats","","",507,{"inputs":[{"name":"self"}],"output":null}],[11,"mk_region","","",507,{"inputs":[{"name":"self"},{"name":"regionkind"}],"output":{"name":"regionkind"}}],[11,"mk_const","","",507,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"const"}}],[11,"_intern_existential_predicates","","",507,null],[11,"_intern_predicates","","",507,null],[11,"_intern_type_list","","",507,null],[11,"_intern_substs","","",507,null],[11,"safe_to_unsafe_fn_ty","","Create an unsafe fn ty based on a safe fn ty.",507,{"inputs":[{"name":"self"},{"name":"polyfnsig"}],"output":{"name":"ty"}}],[11,"mk_ty","","",507,{"inputs":[{"name":"self"},{"name":"typevariants"}],"output":{"name":"ty"}}],[11,"mk_mach_int","","",507,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"ty"}}],[11,"mk_mach_uint","","",507,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"ty"}}],[11,"mk_mach_float","","",507,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"ty"}}],[11,"mk_str","","",507,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_static_str","","",507,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_adt","","",507,{"inputs":[{"name":"self"},{"name":"adtdef"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"mk_box","","",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_ptr","","",507,{"inputs":[{"name":"self"},{"name":"typeandmut"}],"output":{"name":"ty"}}],[11,"mk_ref","","",507,{"inputs":[{"name":"self"},{"name":"region"},{"name":"typeandmut"}],"output":{"name":"ty"}}],[11,"mk_mut_ref","","",507,{"inputs":[{"name":"self"},{"name":"region"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_imm_ref","","",507,{"inputs":[{"name":"self"},{"name":"region"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_mut_ptr","","",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_imm_ptr","","",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_nil_ptr","","",507,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_array","","",507,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"u64"}],"output":{"name":"ty"}}],[11,"mk_array_const_usize","","",507,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"constusize"}],"output":{"name":"ty"}}],[11,"mk_slice","","",507,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"intern_tup","","",507,null],[11,"mk_tup","","",507,null],[11,"mk_nil","","",507,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_diverging_default","","",507,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_bool","","",507,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_fn_def","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"mk_fn_ptr","","",507,{"inputs":[{"name":"self"},{"name":"polyfnsig"}],"output":{"name":"ty"}}],[11,"mk_dynamic","","",507,{"inputs":[{"name":"self"},{"name":"binder"},{"name":"region"}],"output":{"name":"ty"}}],[11,"mk_projection","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"mk_closure","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"mk_closure_from_closure_substs","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"closuresubsts"}],"output":{"name":"ty"}}],[11,"mk_generator","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"closuresubsts"},{"name":"generatorinterior"}],"output":{"name":"ty"}}],[11,"mk_var","","",507,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"ty"}}],[11,"mk_int_var","","",507,{"inputs":[{"name":"self"},{"name":"intvid"}],"output":{"name":"ty"}}],[11,"mk_float_var","","",507,{"inputs":[{"name":"self"},{"name":"floatvid"}],"output":{"name":"ty"}}],[11,"mk_infer","","",507,{"inputs":[{"name":"self"},{"name":"inferty"}],"output":{"name":"ty"}}],[11,"mk_param","","",507,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"name"}],"output":{"name":"ty"}}],[11,"mk_self_type","","",507,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_param_from_def","","",507,{"inputs":[{"name":"self"},{"name":"typeparameterdef"}],"output":{"name":"ty"}}],[11,"mk_anon","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"intern_existential_predicates","","",507,null],[11,"intern_predicates","","",507,null],[11,"intern_type_list","","",507,null],[11,"intern_substs","","",507,null],[11,"mk_fn_sig","","",507,null],[11,"mk_existential_predicates","","",507,null],[11,"mk_predicates","","",507,null],[11,"mk_type_list","","",507,null],[11,"mk_substs","","",507,null],[11,"mk_substs_trait","","",507,null],[11,"lint_node","","",507,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"s"},{"name":"str"}],"output":null}],[11,"lint_node_note","","",507,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lint_level_at_node","","",507,null],[11,"struct_span_lint_node","","",507,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_lint_node","","",507,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"in_scope_traits","","",507,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"option"}}],[11,"named_region","","",507,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"option"}}],[11,"is_late_bound","","",507,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"bool"}}],[11,"object_lifetime_defaults","","",507,{"inputs":[{"name":"self"},{"name":"hirid"}],"output":{"name":"option"}}],[11,"clone","","",444,{"inputs":[{"name":"self"}],"output":{"name":"instance"}}],[11,"eq","","",444,{"inputs":[{"name":"self"},{"name":"instance"}],"output":{"name":"bool"}}],[11,"ne","","",444,{"inputs":[{"name":"self"},{"name":"instance"}],"output":{"name":"bool"}}],[11,"hash","","",444,null],[11,"fmt","","",444,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",480,{"inputs":[{"name":"self"}],"output":{"name":"instancedef"}}],[11,"eq","","",480,{"inputs":[{"name":"self"},{"name":"instancedef"}],"output":{"name":"bool"}}],[11,"ne","","",480,{"inputs":[{"name":"self"},{"name":"instancedef"}],"output":{"name":"bool"}}],[11,"hash","","",480,null],[11,"fmt","","",480,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"def_id","","",480,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"def_ty","","",480,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"attrs","","",480,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"attributes"}}],[11,"fmt","","",444,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",444,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"instance"}}],[11,"mono","","",444,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"instance"}}],[11,"def_id","","",444,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"resolve","","Resolve a (def_id, substs) pair to an (optional) instance -- most commonly, this is used to find the precise code that will run for a trait method invocation, if known.",444,{"inputs":[{"name":"tyctxt"},{"name":"paramenv"},{"name":"defid"},{"name":"substs"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",432,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",433,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",459,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",460,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",462,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",461,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",428,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",463,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",434,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",488,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",423,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",465,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",466,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",429,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",430,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::ty::adjustment","",494,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",497,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",495,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",498,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::ty","",426,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",425,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::ty::error","",504,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::infer::type_variable","",188,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::ty::error","",505,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::middle::const_val","",224,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",227,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::ty::layout","",525,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::hir","",103,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"super_fold_with","","",103,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"unsafety"}}],[11,"super_visit_with","","",103,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"lift_to_tcx","rustc::hir::def_id","",118,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"super_fold_with","","",118,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"defid"}}],[11,"super_visit_with","","",118,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"lift_to_tcx","rustc::mir","",295,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"super_fold_with","","",295,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"local"}}],[11,"super_visit_with","","",295,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::ty","",423,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",423,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",423,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"visit_with","","",423,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",465,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",465,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",476,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",476,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",431,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",431,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",426,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",426,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",425,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",425,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",432,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",432,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",433,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",433,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",447,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",447,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",429,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",429,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",430,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",430,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::ty::adjustment","",494,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",494,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",497,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",497,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",495,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",495,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",498,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",498,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::ty","",458,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",458,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",488,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",488,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",463,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",463,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",434,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",434,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",428,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",428,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",464,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",464,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",460,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",460,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",462,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",462,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",459,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",459,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",461,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",461,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",454,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",454,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::ty::error","",504,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",504,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::infer::type_variable","",188,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",188,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::ty::error","",505,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",505,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::middle::const_val","",225,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",225,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"clone","rustc::ty","",431,{"inputs":[{"name":"self"}],"output":{"name":"typeandmut"}}],[11,"eq","","",431,{"inputs":[{"name":"self"},{"name":"typeandmut"}],"output":{"name":"bool"}}],[11,"ne","","",431,{"inputs":[{"name":"self"},{"name":"typeandmut"}],"output":{"name":"bool"}}],[11,"hash","","",431,null],[11,"fmt","","",431,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",431,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",431,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",437,{"inputs":[{"name":"self"}],"output":{"name":"freeregion"}}],[11,"eq","","",437,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"ne","","",437,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",437,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"option"}}],[11,"lt","","",437,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"le","","",437,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"gt","","",437,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"ge","","",437,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"cmp","","",437,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"ordering"}}],[11,"hash","","",437,null],[11,"encode","","",437,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",437,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",478,{"inputs":[{"name":"self"}],"output":{"name":"boundregion"}}],[11,"eq","","",478,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"ne","","",478,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",478,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"option"}}],[11,"lt","","",478,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"le","","",478,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"gt","","",478,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"ge","","",478,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"cmp","","",478,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"ordering"}}],[11,"hash","","",478,null],[11,"encode","","",478,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",478,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"is_named","","",478,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",477,{"inputs":[{"name":"self"}],"output":{"name":"typevariants"}}],[11,"eq","","",477,{"inputs":[{"name":"self"},{"name":"typevariants"}],"output":{"name":"bool"}}],[11,"ne","","",477,{"inputs":[{"name":"self"},{"name":"typevariants"}],"output":{"name":"bool"}}],[11,"hash","","",477,null],[11,"fmt","","",477,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",477,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",477,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",429,{"inputs":[{"name":"self"}],"output":{"name":"closuresubsts"}}],[11,"eq","","",429,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":{"name":"bool"}}],[11,"ne","","",429,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":{"name":"bool"}}],[11,"hash","","",429,null],[11,"fmt","","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",429,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",429,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"upvar_tys","","",429,null],[11,"state_tys","","This returns the types of the MIR locals which had to be stored across suspension points. It is calculated in rustc_mir::transform::generator::StateTransform. All the types here must be in the tuple in GeneratorInterior.",429,null],[11,"field_tys","","This is the types of all the fields stored in a generator. It includes the upvars, state types and the state discriminant which is u32.",429,null],[11,"clone","","",430,{"inputs":[{"name":"self"}],"output":{"name":"generatorinterior"}}],[11,"eq","","",430,{"inputs":[{"name":"self"},{"name":"generatorinterior"}],"output":{"name":"bool"}}],[11,"ne","","",430,{"inputs":[{"name":"self"},{"name":"generatorinterior"}],"output":{"name":"bool"}}],[11,"hash","","",430,null],[11,"fmt","","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",430,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",430,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",430,{"inputs":[{"name":"ty"}],"output":{"name":"generatorinterior"}}],[11,"as_slice","","",430,{"inputs":[{"name":"self"}],"output":{"name":"slice"}}],[11,"fmt","","",476,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",476,{"inputs":[{"name":"self"}],"output":{"name":"existentialpredicate"}}],[11,"eq","","",476,{"inputs":[{"name":"self"},{"name":"existentialpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",476,{"inputs":[{"name":"self"},{"name":"existentialpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",476,null],[11,"encode","","",476,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",476,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"cmp","","",476,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"with_self_ty","","",423,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"predicate"}}],[11,"principal","","",685,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"projection_bounds","","",685,null],[11,"auto_traits","","",685,null],[11,"principal","","",423,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"projection_bounds","","",423,null],[11,"auto_traits","","",423,null],[11,"iter","","",423,null],[11,"clone","","",432,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"eq","","",432,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",432,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"hash","","",432,null],[11,"encode","","",432,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",432,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",432,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"self_ty","","",432,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"input_types","","",432,null],[11,"clone","","",433,{"inputs":[{"name":"self"}],"output":{"name":"existentialtraitref"}}],[11,"eq","","",433,{"inputs":[{"name":"self"},{"name":"existentialtraitref"}],"output":{"name":"bool"}}],[11,"ne","","",433,{"inputs":[{"name":"self"},{"name":"existentialtraitref"}],"output":{"name":"bool"}}],[11,"hash","","",433,null],[11,"encode","","",433,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",433,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"input_types","","",433,null],[11,"with_self_ty","","Object types don't have a self-type specified. Therefore, when we convert the principal trait-ref into a normal trait-ref, you must give some self-type. A common choice is `mk_err()` or some skolemized type.",433,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"traitref"}}],[11,"clone","","",423,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"eq","","",423,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"bool"}}],[11,"ne","","",423,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"bool"}}],[11,"hash","","",423,null],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",423,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",423,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a risky thing to do because it's easy to get confused about debruijn indices and the like. It is usually better to discharge the binder using `no_late_bound_regions` or `replace_late_bound_regions` or something like that. `skip_binder` is only valid when you are either extracting data that has nothing to do with bound regions, you are doing some sort of test that does not involve bound regions, or you are being very careful about your depth accounting.",423,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",423,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"map_bound_ref","","",423,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"binder"}}],[11,"map_bound","","",423,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"binder"}}],[11,"clone","","",428,{"inputs":[{"name":"self"}],"output":{"name":"projectionty"}}],[11,"eq","","",428,{"inputs":[{"name":"self"},{"name":"projectionty"}],"output":{"name":"bool"}}],[11,"ne","","",428,{"inputs":[{"name":"self"},{"name":"projectionty"}],"output":{"name":"bool"}}],[11,"hash","","",428,null],[11,"fmt","","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",428,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",428,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_ref_and_name","","Construct a ProjectionTy by searching the trait from trait_ref for the associated item named item_name.",428,{"inputs":[{"name":"tyctxt"},{"name":"traitref"},{"name":"name"}],"output":{"name":"projectionty"}}],[11,"trait_ref","","Extracts the underlying trait reference from this projection. For example, if this is a projection of `<T as Iterator>::Item`, then this function would return a `T: Iterator` trait reference.",428,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"traitref"}}],[11,"self_ty","","",428,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"clone","","",426,{"inputs":[{"name":"self"}],"output":{"name":"gensig"}}],[11,"fmt","","",426,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",426,{"inputs":[{"name":"self"},{"name":"gensig"}],"output":{"name":"bool"}}],[11,"ne","","",426,{"inputs":[{"name":"self"},{"name":"gensig"}],"output":{"name":"bool"}}],[11,"hash","","",426,null],[11,"encode","","",426,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",426,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",425,{"inputs":[{"name":"self"}],"output":{"name":"fnsig"}}],[11,"eq","","",425,{"inputs":[{"name":"self"},{"name":"fnsig"}],"output":{"name":"bool"}}],[11,"ne","","",425,{"inputs":[{"name":"self"},{"name":"fnsig"}],"output":{"name":"bool"}}],[11,"hash","","",425,null],[11,"encode","","",425,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",425,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"inputs","","",425,null],[11,"output","","",425,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"clone","","",427,{"inputs":[{"name":"self"}],"output":{"name":"paramty"}}],[11,"eq","","",427,{"inputs":[{"name":"self"},{"name":"paramty"}],"output":{"name":"bool"}}],[11,"ne","","",427,{"inputs":[{"name":"self"},{"name":"paramty"}],"output":{"name":"bool"}}],[11,"hash","","",427,null],[11,"encode","","",427,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",427,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",427,{"inputs":[{"name":"u32"},{"name":"name"}],"output":{"name":"paramty"}}],[11,"for_self","","",427,{"inputs":[],"output":{"name":"paramty"}}],[11,"for_def","","",427,{"inputs":[{"name":"typeparameterdef"}],"output":{"name":"paramty"}}],[11,"to_ty","","",427,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"is_self","","",427,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",424,{"inputs":[{"name":"self"}],"output":{"name":"debruijnindex"}}],[11,"eq","","",424,{"inputs":[{"name":"self"},{"name":"debruijnindex"}],"output":{"name":"bool"}}],[11,"ne","","",424,{"inputs":[{"name":"self"},{"name":"debruijnindex"}],"output":{"name":"bool"}}],[11,"hash","","",424,null],[11,"encode","","",424,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",424,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",424,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",479,{"inputs":[{"name":"self"}],"output":{"name":"regionkind"}}],[11,"eq","","",479,{"inputs":[{"name":"self"},{"name":"regionkind"}],"output":{"name":"bool"}}],[11,"ne","","",479,{"inputs":[{"name":"self"},{"name":"regionkind"}],"output":{"name":"bool"}}],[11,"hash","","",479,null],[11,"encode","","",479,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",479,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",436,{"inputs":[{"name":"self"}],"output":{"name":"earlyboundregion"}}],[11,"eq","","",436,{"inputs":[{"name":"self"},{"name":"earlyboundregion"}],"output":{"name":"bool"}}],[11,"ne","","",436,{"inputs":[{"name":"self"},{"name":"earlyboundregion"}],"output":{"name":"bool"}}],[11,"hash","","",436,null],[11,"encode","","",436,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",436,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",436,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",438,{"inputs":[{"name":"self"}],"output":{"name":"tyvid"}}],[11,"eq","","",438,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"bool"}}],[11,"ne","","",438,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"bool"}}],[11,"hash","","",438,null],[11,"encode","","",438,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",438,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",439,{"inputs":[{"name":"self"}],"output":{"name":"intvid"}}],[11,"eq","","",439,{"inputs":[{"name":"self"},{"name":"intvid"}],"output":{"name":"bool"}}],[11,"ne","","",439,{"inputs":[{"name":"self"},{"name":"intvid"}],"output":{"name":"bool"}}],[11,"hash","","",439,null],[11,"encode","","",439,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",439,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",440,{"inputs":[{"name":"self"}],"output":{"name":"floatvid"}}],[11,"eq","","",440,{"inputs":[{"name":"self"},{"name":"floatvid"}],"output":{"name":"bool"}}],[11,"ne","","",440,{"inputs":[{"name":"self"},{"name":"floatvid"}],"output":{"name":"bool"}}],[11,"hash","","",440,null],[11,"encode","","",440,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",440,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",441,{"inputs":[{"name":"self"}],"output":{"name":"regionvid"}}],[11,"eq","","",441,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"bool"}}],[11,"ne","","",441,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"bool"}}],[11,"encode","","",441,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",441,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",441,null],[11,"clone","","",442,{"inputs":[{"name":"self"}],"output":{"name":"skolemizedregionvid"}}],[11,"eq","","",442,{"inputs":[{"name":"self"},{"name":"skolemizedregionvid"}],"output":{"name":"bool"}}],[11,"ne","","",442,{"inputs":[{"name":"self"},{"name":"skolemizedregionvid"}],"output":{"name":"bool"}}],[11,"hash","","",442,null],[11,"encode","","",442,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",442,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",475,{"inputs":[{"name":"self"}],"output":{"name":"inferty"}}],[11,"eq","","",475,{"inputs":[{"name":"self"},{"name":"inferty"}],"output":{"name":"bool"}}],[11,"ne","","",475,{"inputs":[{"name":"self"},{"name":"inferty"}],"output":{"name":"bool"}}],[11,"hash","","",475,null],[11,"encode","","",475,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",475,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",434,{"inputs":[{"name":"self"}],"output":{"name":"existentialprojection"}}],[11,"eq","","",434,{"inputs":[{"name":"self"},{"name":"existentialprojection"}],"output":{"name":"bool"}}],[11,"ne","","",434,{"inputs":[{"name":"self"},{"name":"existentialprojection"}],"output":{"name":"bool"}}],[11,"hash","","",434,null],[11,"fmt","","",434,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",434,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",434,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"trait_ref","","Extracts the underlying existential trait reference from this projection. For example, if this is a projection of `exists T. <T as Iterator>::Item == X`, then this function would return a `exists T. T: Iterator` existential trait reference.",434,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"existentialtraitref"}}],[11,"with_self_ty","","",434,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"projectionpredicate"}}],[11,"new","","",424,{"inputs":[{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"shifted","","",424,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"is_late_bound","","",479,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_infer","","",479,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"escapes_depth","","",479,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_depth","","Returns the depth of `self` from the (1-based) binding level `depth`",479,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regionkind"}}],[11,"type_flags","","",479,{"inputs":[{"name":"self"}],"output":{"name":"typeflags"}}],[11,"as_opt_param_ty","","",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_nil","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_never","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_defaulted_unit","","Test whether this is a `()` which was produced by defaulting a diverging type variable with feature(never_type) disabled.",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_primitive","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ty_var","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_phantom_data","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bool","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_param","","",451,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_self","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_slice","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_structural","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_simd","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sequence_element_type","","",451,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"simd_type","","",451,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"simd_size","","",451,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"usize"}}],[11,"is_region_ptr","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mutable_pointer","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unsafe_ptr","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_box","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"boxed_ty","","panics if called on any type other than `Box<T>`",451,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"is_scalar","","A scalar type is one that denotes an atomic datum, with no sub-components. (A TyRawPtr is scalar because it represents a non-managed pointer, so its contents are abstract to rustc.)",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_floating_point","","Returns true if this type is a floating point type and false otherwise.",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_trait","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_closure","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_integral","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fresh","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uint","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_char","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fp","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_numeric","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_signed","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_machine","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_concrete_skeleton","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"builtin_deref","","Returns the type and mutability of *ty.",451,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"lvaluepreference"}],"output":{"name":"option"}}],[11,"builtin_index","","Returns the type of ty[i]",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_sig","","",451,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"polyfnsig"}}],[11,"is_fn","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ty_to_def_id","","",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ty_adt_def","","",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"regions","","Returns the regions directly referenced from this type (but not types reachable from this type via `walk_tys`). This ignores late-bound regions binders.",451,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",435,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"fmt","","",435,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",435,null],[11,"encode","","",435,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",435,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",435,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"bool"}}],[11,"ne","","",435,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"bool"}}],[6,"PolyFnSig","","",null,null],[6,"PolyGenSig","","",null,null],[6,"PolyTraitRef","","",null,null],[6,"PolyExistentialTraitRef","","",null,null],[6,"PolyExistentialProjection","","",null,null],[6,"Region","","",null,null],[6,"Ty","","",null,null],[6,"UpvarCaptureMap","","",null,null],[6,"PolyTraitPredicate","","",null,null],[6,"PolyEquatePredicate","","",null,null],[6,"PolyOutlivesPredicate","","",null,null],[6,"PolyRegionOutlivesPredicate","","",null,null],[6,"PolyTypeOutlivesPredicate","","",null,null],[6,"PolySubtypePredicate","","",null,null],[6,"PolyProjectionPredicate","","",null,null],[8,"Lift","","A trait implemented for all X<'a> types which can be safely and efficiently converted to X<'tcx> as long as they are part of the provided TyCtxt<'tcx>. This can be done, for example, for Ty<'tcx> or &'tcx Substs<'tcx> by looking them up in their respective interners.",null,null],[16,"Lifted","","",686,null],[10,"lift_to_tcx","","",686,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[8,"DefIdTree","","",null,null],[10,"parent","","",687,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"is_descendant_of","","",687,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[8,"ToPolyTraitRef","","",null,null],[10,"to_poly_trait_ref","","",688,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[8,"ToPredicate","","",null,null],[10,"to_predicate","","",689,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"clone","","",445,{"inputs":[{"name":"self"}],"output":{"name":"crateanalysis"}}],[11,"clone","","",446,{"inputs":[{"name":"self"}],"output":{"name":"resolutions"}}],[11,"clone","","",481,{"inputs":[{"name":"self"}],"output":{"name":"associateditemcontainer"}}],[11,"eq","","",481,{"inputs":[{"name":"self"},{"name":"associateditemcontainer"}],"output":{"name":"bool"}}],[11,"ne","","",481,{"inputs":[{"name":"self"},{"name":"associateditemcontainer"}],"output":{"name":"bool"}}],[11,"fmt","","",481,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","",481,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"clone","","",447,{"inputs":[{"name":"self"}],"output":{"name":"implheader"}}],[11,"eq","","",447,{"inputs":[{"name":"self"},{"name":"implheader"}],"output":{"name":"bool"}}],[11,"ne","","",447,{"inputs":[{"name":"self"},{"name":"implheader"}],"output":{"name":"bool"}}],[11,"hash","","",447,null],[11,"fmt","","",447,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",448,{"inputs":[{"name":"self"}],"output":{"name":"associateditem"}}],[11,"fmt","","",448,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",448,{"inputs":[{"name":"self"},{"name":"associateditem"}],"output":{"name":"bool"}}],[11,"ne","","",448,{"inputs":[{"name":"self"},{"name":"associateditem"}],"output":{"name":"bool"}}],[11,"clone","","",482,{"inputs":[{"name":"self"}],"output":{"name":"associatedkind"}}],[11,"eq","","",482,{"inputs":[{"name":"self"},{"name":"associatedkind"}],"output":{"name":"bool"}}],[11,"fmt","","",482,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",482,null],[11,"encode","","",482,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",482,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"def","","",448,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"relevant_for_never","","Tests whether the associated item admits a non-trivial implementation for !",448,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"signature","","",448,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"clone","","",483,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"fmt","","",483,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",483,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",483,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"encode","","",483,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",483,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"parent","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"from_hir","","",483,{"inputs":[{"name":"visibility"},{"name":"nodeid"},{"name":"tyctxt"}],"output":{"name":"self"}}],[11,"is_accessible_from","","Returns true if an item with this visibility is accessible from the given block.",483,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"t"}],"output":{"name":"bool"}}],[11,"is_at_least","","Returns true if this visibility is at least as accessible as the given visibility",483,{"inputs":[{"name":"self"},{"name":"visibility"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",484,{"inputs":[{"name":"self"}],"output":{"name":"variance"}}],[11,"eq","","",484,{"inputs":[{"name":"self"},{"name":"variance"}],"output":{"name":"bool"}}],[11,"decode","","",484,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",484,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"xform","","`a.xform(b)` combines the variance of a context with the variance of a type with the following meaning.  If we are in a context with variance `a`, and we encounter a type argument in a position with variance `b`, then `a.xform(b)` is the new variance with which the argument appears.",484,{"inputs":[{"name":"self"},{"name":"variance"}],"output":{"name":"variance"}}],[11,"clone","","",450,{"inputs":[{"name":"self"}],"output":{"name":"creadercachekey"}}],[11,"eq","","",450,{"inputs":[{"name":"self"},{"name":"creadercachekey"}],"output":{"name":"bool"}}],[11,"ne","","",450,{"inputs":[{"name":"self"},{"name":"creadercachekey"}],"output":{"name":"bool"}}],[11,"hash","","",450,null],[11,"eq","","",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"ne","","",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"clone","","",690,{"inputs":[{"name":"self"}],"output":{"name":"typeflags"}}],[11,"partial_cmp","","",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"option"}}],[11,"lt","","",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"le","","",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"gt","","",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"ge","","",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",690,null],[11,"fmt","","",690,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",690,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",690,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",690,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",690,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"HAS_PARAMS","","",690,null],[18,"HAS_SELF","","",690,null],[18,"HAS_TY_INFER","","",690,null],[18,"HAS_RE_INFER","","",690,null],[18,"HAS_RE_SKOL","","",690,null],[18,"HAS_RE_EARLY_BOUND","","",690,null],[18,"HAS_FREE_REGIONS","","",690,null],[18,"HAS_TY_ERR","","",690,null],[18,"HAS_PROJECTION","","",690,null],[18,"HAS_TY_CLOSURE","","",690,null],[18,"HAS_LOCAL_NAMES","","",690,null],[18,"KEEP_IN_LOCAL_TCX","","",690,null],[18,"HAS_NORMALIZABLE_PROJECTION","","",690,null],[18,"NEEDS_SUBST","","",690,null],[18,"NOMINAL_FLAGS","","",690,null],[11,"empty","","Returns an empty set of flags.",690,{"inputs":[],"output":{"name":"typeflags"}}],[11,"all","","Returns the set containing all flags.",690,{"inputs":[],"output":{"name":"typeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",690,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",690,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",690,{"inputs":[{"name":"u32"}],"output":{"name":"typeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",690,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",690,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",690,{"inputs":[{"name":"self"},{"name":"typeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"typeflags"}}],[11,"bitor_assign","","Adds the set of flags.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"typeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"typeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"typeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",690,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",690,{"inputs":[{"name":"self"}],"output":{"name":"typeflags"}}],[11,"extend","","",690,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",690,{"inputs":[{"name":"t"}],"output":{"name":"typeflags"}}],[11,"eq","","",451,{"inputs":[{"name":"self"},{"name":"tys"}],"output":{"name":"bool"}}],[11,"hash","","",451,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"is_primitive_ty","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_suggestable","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash_stable","","",451,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"fmt","","",685,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",685,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"eq","","",685,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"hash","","",685,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"deref","","",685,null],[11,"empty","","",685,{"inputs":[],"output":{"name":"slice"}}],[11,"clone","","",452,{"inputs":[{"name":"self"}],"output":{"name":"upvarid"}}],[11,"eq","","",452,{"inputs":[{"name":"self"},{"name":"upvarid"}],"output":{"name":"bool"}}],[11,"ne","","",452,{"inputs":[{"name":"self"},{"name":"upvarid"}],"output":{"name":"bool"}}],[11,"hash","","",452,null],[11,"encode","","",452,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",452,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",485,{"inputs":[{"name":"self"}],"output":{"name":"borrowkind"}}],[11,"eq","","",485,{"inputs":[{"name":"self"},{"name":"borrowkind"}],"output":{"name":"bool"}}],[11,"hash","","",485,null],[11,"fmt","","",485,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",485,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",485,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",486,{"inputs":[{"name":"self"},{"name":"upvarcapture"}],"output":{"name":"bool"}}],[11,"ne","","",486,{"inputs":[{"name":"self"},{"name":"upvarcapture"}],"output":{"name":"bool"}}],[11,"clone","","",486,{"inputs":[{"name":"self"}],"output":{"name":"upvarcapture"}}],[11,"fmt","","",486,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",486,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",486,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",453,{"inputs":[{"name":"self"},{"name":"upvarborrow"}],"output":{"name":"bool"}}],[11,"ne","","",453,{"inputs":[{"name":"self"},{"name":"upvarborrow"}],"output":{"name":"bool"}}],[11,"clone","","",453,{"inputs":[{"name":"self"}],"output":{"name":"upvarborrow"}}],[11,"encode","","",453,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",453,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",454,{"inputs":[{"name":"self"}],"output":{"name":"closureupvar"}}],[11,"clone","","",487,{"inputs":[{"name":"self"}],"output":{"name":"intvarvalue"}}],[11,"eq","","",487,{"inputs":[{"name":"self"},{"name":"intvarvalue"}],"output":{"name":"bool"}}],[11,"ne","","",487,{"inputs":[{"name":"self"},{"name":"intvarvalue"}],"output":{"name":"bool"}}],[11,"clone","","",455,{"inputs":[{"name":"self"}],"output":{"name":"typeparameterdef"}}],[11,"encode","","",455,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",455,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",456,{"inputs":[{"name":"self"}],"output":{"name":"regionparameterdef"}}],[11,"encode","","",456,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",456,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"to_early_bound_region_data","","",456,{"inputs":[{"name":"self"}],"output":{"name":"earlyboundregion"}}],[11,"to_bound_region","","",456,{"inputs":[{"name":"self"}],"output":{"name":"boundregion"}}],[11,"to_bound_region","","",436,{"inputs":[{"name":"self"}],"output":{"name":"boundregion"}}],[11,"clone","","",457,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"fmt","","",457,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",457,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",457,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"parent_count","","",457,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"own_count","","",457,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"count","","",457,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"region_param","","",457,{"inputs":[{"name":"self"},{"name":"earlyboundregion"},{"name":"tyctxt"}],"output":{"name":"regionparameterdef"}}],[11,"type_param","","Returns the `TypeParameterDef` associated with this `ParamTy`.",457,{"inputs":[{"name":"self"},{"name":"paramty"},{"name":"tyctxt"}],"output":{"name":"typeparameterdef"}}],[11,"clone","","",458,{"inputs":[{"name":"self"}],"output":{"name":"genericpredicates"}}],[11,"default","","",458,{"inputs":[],"output":{"name":"genericpredicates"}}],[11,"instantiate","","",458,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"substs"}],"output":{"name":"instantiatedpredicates"}}],[11,"instantiate_own","","",458,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"substs"}],"output":{"name":"instantiatedpredicates"}}],[11,"instantiate_identity","","",458,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"instantiatedpredicates"}}],[11,"instantiate_supertrait","","",458,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"polytraitref"}],"output":{"name":"instantiatedpredicates"}}],[11,"clone","","",488,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"eq","","",488,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"ne","","",488,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"hash","","",488,null],[11,"encode","","",488,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",488,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"subst_supertrait","","Performs a substitution suitable for going from a poly-trait-ref to supertraits that must hold if that poly-trait-ref holds. This is slightly different from a normal substitution in terms of what happens with bound regions.  See lengthy comment below for details.",488,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"polytraitref"}],"output":{"name":"predicate"}}],[11,"clone","","",459,{"inputs":[{"name":"self"}],"output":{"name":"traitpredicate"}}],[11,"eq","","",459,{"inputs":[{"name":"self"},{"name":"traitpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",459,{"inputs":[{"name":"self"},{"name":"traitpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",459,null],[11,"encode","","",459,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",459,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"def_id","","",459,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"input_types","","",459,null],[11,"self_ty","","",459,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"def_id","","",691,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"clone","","",460,{"inputs":[{"name":"self"}],"output":{"name":"equatepredicate"}}],[11,"eq","","",460,{"inputs":[{"name":"self"},{"name":"equatepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",460,{"inputs":[{"name":"self"},{"name":"equatepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",460,null],[11,"fmt","","",460,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",460,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",460,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",461,{"inputs":[{"name":"self"}],"output":{"name":"outlivespredicate"}}],[11,"eq","","",461,{"inputs":[{"name":"self"},{"name":"outlivespredicate"}],"output":{"name":"bool"}}],[11,"ne","","",461,{"inputs":[{"name":"self"},{"name":"outlivespredicate"}],"output":{"name":"bool"}}],[11,"hash","","",461,null],[11,"fmt","","",461,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",461,{"inputs":[{"name":"self"},{"name":"__sab"}],"output":{"name":"result"}}],[11,"decode","","",461,{"inputs":[{"name":"__dab"}],"output":{"name":"result"}}],[11,"clone","","",462,{"inputs":[{"name":"self"}],"output":{"name":"subtypepredicate"}}],[11,"eq","","",462,{"inputs":[{"name":"self"},{"name":"subtypepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",462,{"inputs":[{"name":"self"},{"name":"subtypepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",462,null],[11,"fmt","","",462,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",462,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",462,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",463,{"inputs":[{"name":"self"}],"output":{"name":"projectionpredicate"}}],[11,"eq","","",463,{"inputs":[{"name":"self"},{"name":"projectionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",463,{"inputs":[{"name":"self"},{"name":"projectionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",463,null],[11,"encode","","",463,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",463,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"to_poly_trait_ref","","",692,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"polytraitref"}}],[11,"ty","","",692,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"to_poly_trait_ref","","",432,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"to_poly_trait_ref","","",691,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"to_predicate","","",432,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",693,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",694,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",695,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",696,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",692,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all cases this is skipping over a binder, so late-bound regions with depth 0 are bound by the predicate.",488,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"to_opt_poly_trait_ref","","",488,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",464,{"inputs":[{"name":"self"}],"output":{"name":"instantiatedpredicates"}}],[11,"empty","","",464,{"inputs":[],"output":{"name":"instantiatedpredicates"}}],[11,"is_empty","","",464,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",465,{"inputs":[{"name":"self"}],"output":{"name":"paramenv"}}],[11,"fmt","","",465,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",465,{"inputs":[{"name":"self"},{"name":"paramenv"}],"output":{"name":"bool"}}],[11,"ne","","",465,{"inputs":[{"name":"self"},{"name":"paramenv"}],"output":{"name":"bool"}}],[11,"hash","","",465,null],[11,"and","","Creates a suitable environment in which to perform trait queries on the given value. This will either be `self` or the empty environment, depending on whether `value` references type parameters that are in scope. (If it doesn't, then any judgements should be completely independent of the context, and hence we can safely use the empty environment so as to enable more sharing across functions.)",465,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"paramenvand"}}],[11,"clone","","",466,{"inputs":[{"name":"self"}],"output":{"name":"paramenvand"}}],[11,"fmt","","",466,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",466,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"ne","","",466,{"inputs":[{"name":"self"},{"name":"paramenvand"}],"output":{"name":"bool"}}],[11,"hash","","",466,null],[11,"into_parts","","",466,null],[11,"hash_stable","","",466,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"clone","","",467,{"inputs":[{"name":"self"}],"output":{"name":"destructor"}}],[11,"fmt","","",467,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"ne","","",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"clone","","",697,{"inputs":[{"name":"self"}],"output":{"name":"adtflags"}}],[11,"partial_cmp","","",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"option"}}],[11,"lt","","",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"le","","",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"gt","","",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"ge","","",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"cmp","","",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"ordering"}}],[11,"hash","","",697,null],[11,"fmt","","",697,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",697,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",697,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",697,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",697,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NO_ADT_FLAGS","","",697,null],[18,"IS_ENUM","","",697,null],[18,"IS_PHANTOM_DATA","","",697,null],[18,"IS_FUNDAMENTAL","","",697,null],[18,"IS_UNION","","",697,null],[18,"IS_BOX","","",697,null],[11,"empty","","Returns an empty set of flags.",697,{"inputs":[],"output":{"name":"adtflags"}}],[11,"all","","Returns the set containing all flags.",697,{"inputs":[],"output":{"name":"adtflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",697,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",697,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",697,{"inputs":[{"name":"u32"}],"output":{"name":"adtflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",697,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",697,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",697,{"inputs":[{"name":"self"},{"name":"adtflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"adtflags"}}],[11,"bitor_assign","","Adds the set of flags.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"adtflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"adtflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"adtflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",697,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",697,{"inputs":[{"name":"self"}],"output":{"name":"adtflags"}}],[11,"extend","","",697,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",697,{"inputs":[{"name":"t"}],"output":{"name":"adtflags"}}],[11,"fmt","","",468,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",489,{"inputs":[{"name":"self"}],"output":{"name":"variantdiscr"}}],[11,"fmt","","",489,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",489,{"inputs":[{"name":"self"},{"name":"variantdiscr"}],"output":{"name":"bool"}}],[11,"ne","","",489,{"inputs":[{"name":"self"},{"name":"variantdiscr"}],"output":{"name":"bool"}}],[11,"encode","","",489,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",489,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",469,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",470,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",470,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash_stable","","",470,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"clone","","",490,{"inputs":[{"name":"self"}],"output":{"name":"adtkind"}}],[11,"fmt","","",490,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",490,{"inputs":[{"name":"self"},{"name":"adtkind"}],"output":{"name":"bool"}}],[11,"eq","","",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"bool"}}],[11,"ne","","",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"bool"}}],[11,"clone","","",698,{"inputs":[{"name":"self"}],"output":{"name":"reprflags"}}],[11,"partial_cmp","","",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"option"}}],[11,"lt","","",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"bool"}}],[11,"le","","",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"bool"}}],[11,"gt","","",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"bool"}}],[11,"ge","","",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"bool"}}],[11,"cmp","","",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"ordering"}}],[11,"hash","","",698,null],[11,"encode","","",698,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",698,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",698,{"inputs":[],"output":{"name":"reprflags"}}],[11,"fmt","","",698,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",698,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",698,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",698,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",698,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IS_C","","",698,null],[18,"IS_PACKED","","",698,null],[18,"IS_SIMD","","",698,null],[18,"IS_LINEAR","","",698,null],[18,"IS_UNOPTIMISABLE","","",698,null],[11,"empty","","Returns an empty set of flags.",698,{"inputs":[],"output":{"name":"reprflags"}}],[11,"all","","Returns the set containing all flags.",698,{"inputs":[],"output":{"name":"reprflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",698,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",698,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",698,{"inputs":[{"name":"u8"}],"output":{"name":"reprflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",698,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",698,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",698,{"inputs":[{"name":"self"},{"name":"reprflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"reprflags"}}],[11,"bitor_assign","","Adds the set of flags.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"reprflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"reprflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":{"name":"reprflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",698,{"inputs":[{"name":"self"},{"name":"reprflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",698,{"inputs":[{"name":"self"}],"output":{"name":"reprflags"}}],[11,"extend","","",698,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",698,{"inputs":[{"name":"t"}],"output":{"name":"reprflags"}}],[11,"hash_stable","","",698,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"clone","","",471,{"inputs":[{"name":"self"}],"output":{"name":"reproptions"}}],[11,"eq","","",471,{"inputs":[{"name":"self"},{"name":"reproptions"}],"output":{"name":"bool"}}],[11,"ne","","",471,{"inputs":[{"name":"self"},{"name":"reproptions"}],"output":{"name":"bool"}}],[11,"encode","","",471,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",471,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",471,{"inputs":[],"output":{"name":"reproptions"}}],[11,"hash_stable","","",471,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"new","","",471,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"reproptions"}}],[11,"simd","","",471,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"c","","",471,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"packed","","",471,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"linear","","",471,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"discr_type","","",471,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"inhibit_enum_layout_opt","","Returns true if this `#[repr()]` should inhabit \"smart enum layout\" optimizations, such as representing `Foo<&T>` as a single pointer.",471,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct","","",470,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_union","","",470,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_enum","","",470,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"adt_kind","","Returns the kind of the ADT - Struct or Enum.",470,{"inputs":[{"name":"self"}],"output":{"name":"adtkind"}}],[11,"descr","","",470,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"variant_descr","","",470,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_fundamental","","Returns whether this type is #[fundamental] for the purposes of coherence checking.",470,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_phantom_data","","Returns true if this is PhantomData.",470,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_box","","Returns true if this is Box.",470,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_dtor","","Returns whether this type has a destructor.",470,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"bool"}}],[11,"struct_variant","","Asserts this is a struct and returns the struct's unique variant.",470,{"inputs":[{"name":"self"}],"output":{"name":"variantdef"}}],[11,"predicates","","",470,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[11,"all_fields","","Returns an iterator over all fields contained by this ADT.",470,null],[11,"is_univariant","","",470,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_payloadfree","","",470,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"variant_with_id","","",470,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"variantdef"}}],[11,"variant_index_with_id","","",470,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"usize"}}],[11,"variant_of_def","","",470,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"variantdef"}}],[11,"discriminants","","",470,null],[11,"discriminant_for_variant","","Compute the discriminant value used by a specific variant. Unlike `discriminants`, this is (amortized) constant-time, only doing at most one query for evaluating an explicit discriminant (the last one before the requested variant), assuming there are no constant-evaluation errors there.",470,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"usize"}],"output":{"name":"constint"}}],[11,"destructor","","",470,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"sized_constraint","","Returns a list of types such that `Self: Sized` if and only if that type is Sized, or `TyErr` if this type is recursive.",470,null],[11,"find_field_named","","",468,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"index_of_field_named","","",468,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"field_named","","",468,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"fielddef"}}],[11,"ty","","",469,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"clone","","",491,{"inputs":[{"name":"self"}],"output":{"name":"closurekind"}}],[11,"partial_cmp","","",491,{"inputs":[{"name":"self"},{"name":"closurekind"}],"output":{"name":"option"}}],[11,"cmp","","",491,{"inputs":[{"name":"self"},{"name":"closurekind"}],"output":{"name":"ordering"}}],[11,"eq","","",491,{"inputs":[{"name":"self"},{"name":"closurekind"}],"output":{"name":"bool"}}],[11,"hash","","",491,null],[11,"fmt","","",491,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",491,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",491,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"trait_did","","",491,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"defid"}}],[11,"extends","","True if this a type that impls this closure kind must also implement `other`.",491,{"inputs":[{"name":"self"},{"name":"closurekind"}],"output":{"name":"bool"}}],[11,"walk","","Iterator that walks `self` and any types reachable from `self`, in depth-first order. Note that just walks the types that appear in `self`, it does not descend into the fields of structs or variants. For example:",451,{"inputs":[{"name":"self"}],"output":{"name":"typewalker"}}],[11,"walk_shallow","","Iterator that walks the immediate children of `self`.  Hence `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]` (but not `i32`, like `walk`).",451,{"inputs":[{"name":"self"}],"output":{"name":"accintoiter"}}],[11,"maybe_walk","","Walks `ty` and any types appearing within `ty`, invoking the callback `f` on each type. If the callback returns false, then the children of the current type are ignored.",451,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"clone","","",492,{"inputs":[{"name":"self"}],"output":{"name":"lvaluepreference"}}],[11,"fmt","","",492,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",492,{"inputs":[{"name":"self"},{"name":"lvaluepreference"}],"output":{"name":"bool"}}],[11,"from_mutbl","","",492,{"inputs":[{"name":"mutability"}],"output":{"name":"self"}}],[11,"from_mutbl","","",485,{"inputs":[{"name":"mutability"}],"output":{"name":"borrowkind"}}],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow kind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a mutability that is stronger than necessary so that it at least would permit the borrow in question.",485,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"to_user_str","","",485,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",493,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",493,{"inputs":[{"name":"self"}],"output":{"name":"attributes"}}],[11,"deref","","",493,null],[11,"body_tables","","",507,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"typecktables"}}],[11,"body_owners","","Returns an iterator of the def-ids for all body-owners in this crate. If you would prefer to iterate over the bodies themselves, you can do `self.hir.krate().body_ids.iter()`.",507,null],[11,"expr_span","","",507,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"span"}}],[11,"expr_is_lval","","",507,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"provided_trait_methods","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"trait_relevant_for_never","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"opt_associated_item","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_items","","",507,null],[11,"impls_are_allowed_to_overlap","","Returns true if the impls are the same polarity and are implementing a trait which contains no items",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"expect_variant_def","","",507,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"variantdef"}}],[11,"adt_def_id_of_variant","","Given a `VariantDef`, returns the def-id of the `AdtDef` of which it is a part.",507,{"inputs":[{"name":"self"},{"name":"variantdef"}],"output":{"name":"defid"}}],[11,"item_name","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"internedstring"}}],[11,"instance_mir","","Return the possibly-auto-generated MIR of a (DefId, Subst) pair.",507,{"inputs":[{"name":"self"},{"name":"instancedef"}],"output":{"name":"mir"}}],[11,"maybe_optimized_mir","","Given the DefId of an item, returns its MIR, borrowed immutably. Returns None if there is no MIR for the DefId",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"get_attrs","","Get the attributes of a definition.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"attributes"}}],[11,"has_attr","","Determine whether an item is annotated with an attribute",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"str"}],"output":{"name":"bool"}}],[11,"trait_has_default_impl","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"generator_layout","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generatorlayout"}}],[11,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements. If it implements no trait, return `None`.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the ID of the impl that the method belongs to. Otherwise, return `None`.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"span_of_impl","","Looks up the span of `impl_did` if the impl is local; otherwise returns `Err` with the name of the crate containing the impl.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"result"}}],[11,"hygienic_eq","","",507,{"inputs":[{"name":"self"},{"name":"name"},{"name":"name"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"adjust","","",507,null],[11,"adjust_ident","","",507,null],[11,"with_freevars","","",507,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"t"}}],[11,"clone","","",472,{"inputs":[{"name":"self"}],"output":{"name":"crateinherentimpls"}}],[11,"fmt","","",472,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",473,{"inputs":[{"name":"self"}],"output":{"name":"dtorckconstraint"}}],[11,"fmt","","",473,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",473,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"clone","","",474,{"inputs":[{"name":"self"}],"output":{"name":"symbolname"}}],[11,"eq","","",474,{"inputs":[{"name":"self"},{"name":"symbolname"}],"output":{"name":"bool"}}],[11,"ne","","",474,{"inputs":[{"name":"self"},{"name":"symbolname"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",474,{"inputs":[{"name":"self"},{"name":"symbolname"}],"output":{"name":"option"}}],[11,"lt","","",474,{"inputs":[{"name":"self"},{"name":"symbolname"}],"output":{"name":"bool"}}],[11,"le","","",474,{"inputs":[{"name":"self"},{"name":"symbolname"}],"output":{"name":"bool"}}],[11,"gt","","",474,{"inputs":[{"name":"self"},{"name":"symbolname"}],"output":{"name":"bool"}}],[11,"ge","","",474,{"inputs":[{"name":"self"},{"name":"symbolname"}],"output":{"name":"bool"}}],[11,"cmp","","",474,{"inputs":[{"name":"self"},{"name":"symbolname"}],"output":{"name":"ordering"}}],[11,"hash_stable","","",474,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"deref","","",474,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",474,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"util","rustc","",null,null],[0,"common","rustc::util","",null,null],[3,"ErrorReported","rustc::util::common","",null,null],[3,"ProfQDumpParams","","Parameters to the `Dump` variant of type `ProfileQueriesMsg`.",null,null],[12,"path","","A base path for the files we will dump",699,null],[12,"ack","","To ensure that the compiler waits for us to finish our dumps",699,null],[12,"dump_profq_msg_log","","toggle dumping a log file with every `ProfileQueriesMsg`",699,null],[3,"Indenter","","",null,null],[4,"ProfileQueriesMsg","","A sequence of these messages induce a trace of query-based incremental compilation. FIXME(matthewhammer): Determine whether we should include cycle detection here or not.",null,null],[13,"TimeBegin","","begin a timed pass",700,null],[13,"TimeEnd","","end a timed pass",700,null],[13,"TaskBegin","","begin a task (see dep_graph::graph::with_task)",700,null],[13,"TaskEnd","","end a task",700,null],[13,"QueryBegin","","begin a new query can't use `Span` because queries are sent to other thread",700,null],[13,"CacheHit","","query is satisfied by using an already-known value for the given key",700,null],[13,"ProviderBegin","","query requires running a provider; providers may nest, permitting queries to nest.",700,null],[13,"ProviderEnd","","query is satisfied by a provider terminating with a value",700,null],[13,"Dump","","dump a record of the queries to the given path",700,null],[13,"Halt","","halt the profiling/monitoring background thread",700,null],[5,"profq_msg","","If enabled, send a message to the profile-queries thread",null,{"inputs":[{"name":"profilequeriesmsg"}],"output":null}],[5,"profq_set_chan","","Set channel for profile queries channel",null,{"inputs":[{"name":"sender"}],"output":{"name":"bool"}}],[5,"time_depth","","Read the current depth of `time()` calls. This is used to encourage indentation across threads.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"set_time_depth","","Set the current depth of `time()` calls. The idea is to call `set_time_depth()` with the result from `time_depth()` in the parent thread.",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"print_time_passes_entry","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"duration"}],"output":null}],[5,"duration_to_secs_str","","",null,{"inputs":[{"name":"duration"}],"output":{"name":"string"}}],[5,"to_readable_str","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"record_time","","",null,{"inputs":[{"name":"cell"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[17,"FN_OUTPUT_NAME","","",null,null],[8,"MemoizationMap","","",null,null],[16,"Key","","",701,null],[16,"Value","","",701,null],[10,"memoize","","If `key` is present in the map, return the value, otherwise invoke `op` and store the value in the map.",701,null],[11,"clone","","",702,{"inputs":[{"name":"self"}],"output":{"name":"errorreported"}}],[11,"fmt","","",702,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",699,{"inputs":[{"name":"self"}],"output":{"name":"profqdumpparams"}}],[11,"fmt","","",699,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",700,{"inputs":[{"name":"self"}],"output":{"name":"profilequeriesmsg"}}],[11,"fmt","","",700,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",703,{"inputs":[{"name":"self"}],"output":null}],[0,"ppaux","rustc::util","",null,null],[3,"PrintContext","rustc::util::ppaux","",null,null],[5,"verbose","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"identify_regions","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"parameterized","","",null,null],[8,"Print","","",null,null],[10,"print","","",704,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"print_to_string","","",704,{"inputs":[{"name":"self"},{"name":"printcontext"}],"output":{"name":"string"}}],[11,"print_display","","",704,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"print_display_to_string","","",704,{"inputs":[{"name":"self"},{"name":"printcontext"}],"output":{"name":"string"}}],[11,"print_debug","","",704,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"print_debug_to_string","","",704,{"inputs":[{"name":"self"},{"name":"printcontext"}],"output":{"name":"string"}}],[11,"fmt","","",705,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc::ty","",455,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",456,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc::ty::trait_def","",677,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc::ty","",470,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",454,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",452,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",453,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",431,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",431,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",433,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",433,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","rustc::ty::adjustment","",494,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",494,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","rustc::ty","",478,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",478,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",478,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",479,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",479,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",479,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",437,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",437,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",484,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",484,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",458,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",458,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",464,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",464,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",425,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",425,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",425,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",438,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",439,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",440,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",441,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",475,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",475,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",475,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",487,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",423,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",423,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",423,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",423,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",423,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",423,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",423,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",423,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",423,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",432,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",432,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",432,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",430,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",477,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",477,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",451,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",451,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",451,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",427,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",427,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",427,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",461,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",461,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",460,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",460,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",462,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",462,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",459,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",459,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",459,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",463,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",463,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",463,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",428,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",491,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",491,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"print","","",488,{"inputs":[{"name":"self"},{"name":"f"},{"name":"printcontext"}],"output":{"name":"result"}}],[11,"fmt","","",488,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",488,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"nodemap","rustc::util","An efficient hash map for node IDs",null,null],[6,"FxHashMap","rustc::util::nodemap","",null,null],[6,"FxHashSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"nodemap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"defidmap"}}],[5,"ItemLocalMap","","",null,{"inputs":[],"output":{"name":"itemlocalmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"nodeset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"defidset"}}],[6,"NodeMap","","",null,null],[6,"DefIdMap","","",null,null],[6,"ItemLocalMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[0,"fs","rustc::util","",null,null],[4,"LinkOrCopy","rustc::util::fs","",null,null],[13,"Link","","",706,null],[13,"Copy","","",706,null],[4,"RenameOrCopyRemove","","",null,null],[13,"Rename","","",707,null],[13,"CopyRemove","","",707,null],[5,"fix_windows_verbatim_for_gcc","","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[5,"link_or_copy","","Copy `p` into `q`, preferring to use hard-linking if possible. If `q` already exists, it is removed first. The result indicates which of the two operations has been performed.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"rename_or_copy_remove","","Rename `p` into `q`, preferring to use `rename` if possible. If `rename` fails (rename may fail for reasons such as crossing filesystem), fallback to copy & remove",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[11,"fmt","","",707,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"DIAGNOSTICS","rustc","",null,null],[14,"bug","","",null,null],[14,"span_bug","","",null,null],[14,"__impl_stable_hash_field","","",null,null],[14,"impl_stable_hash_for","","",null,null],[14,"impl_stable_hash_for_spanned","","",null,null],[14,"lint_initializer","","Build a `Lint` initializer.",null,null],[14,"declare_lint","","Declare a static item of type `&'static Lint`.",null,null],[14,"lint_array","","Declare a static `LintArray` and return it as an expression.",null,null],[11,"to_dep_node","rustc::hir::map::definitions","",142,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"depnode"}}],[11,"to_dep_node","rustc::hir::def_id","",118,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"depkind"}],"output":{"name":"depnode"}}],[11,"print_node","rustc::hir::print","",150,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"result"}}],[11,"create_stable_hashing_context","rustc::ty","",507,null],[11,"hash_stable","rustc::middle::const_val","",222,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::middle::cstore","",238,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",241,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",231,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",240,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",232,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",230,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",237,{"inputs":[{"name":"self"},{"name":"hcx"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",236,{"inputs":[{"name":"self"},{"name":"hcx"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::middle::lang_items","",257,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",256,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::mir","",312,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",294,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",315,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",316,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",317,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",296,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",297,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",299,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",311,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",300,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",314,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",295,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",298,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",305,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",306,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",309,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",318,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",319,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",301,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",320,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",302,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",321,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",322,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",304,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",323,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",307,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",293,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",313,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",324,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",325,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",326,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",327,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",328,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",330,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",329,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",308,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",331,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",310,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::session::search_paths","",379,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty::subst","",675,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",479,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty::adjustment","",498,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",497,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",494,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",495,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",453,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",452,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",485,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",486,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",426,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",425,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",423,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",491,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",483,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",432,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",459,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",460,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",462,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",461,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",463,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",428,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",488,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",697,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",468,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",489,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",469,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::middle::const_val","",225,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",223,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",435,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::middle::const_val","",224,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",227,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",429,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",430,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",458,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",484,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty::adjustment","",499,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",457,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",456,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",455,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::middle::resolve_lifetime","",283,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",282,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",424,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty::cast","",503,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::middle::region","",276,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",278,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_stable_hash_key","","",278,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"}],"output":{"name":"scope"}}],[11,"hash_stable","","",275,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty::adjustment","",496,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",437,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",478,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",477,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",427,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",431,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",476,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",433,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",434,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",444,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",480,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty::trait_def","",677,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",467,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",473,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",449,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",448,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",482,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",481,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty::steal","",673,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",465,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::traits","",400,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::middle::privacy","",273,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",272,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::ty","",472,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::session","",356,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::util::common","",702,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::middle::reachable","",274,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc::traits","",407,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",392,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",395,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",397,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",396,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",394,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",398,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",393,{"inputs":[{"name":"self"},{"name":"stablehashingcontext"},{"name":"stablehasher"}],"output":null}],[11,"to_trace","rustc::ty","",708,{"inputs":[{"name":"obligationcause"},{"name":"bool"},{"name":"self"},{"name":"self"}],"output":{"name":"typetrace"}}],[11,"to_trace","","",432,{"inputs":[{"name":"obligationcause"},{"name":"bool"},{"name":"self"},{"name":"self"}],"output":{"name":"typetrace"}}],[11,"to_trace","","",693,{"inputs":[{"name":"obligationcause"},{"name":"bool"},{"name":"self"},{"name":"self"}],"output":{"name":"typetrace"}}],[11,"note_and_explain_region","","",507,{"inputs":[{"name":"self"},{"name":"scopetree"},{"name":"diagnosticbuilder"},{"name":"str"},{"name":"region"},{"name":"str"}],"output":null}],[11,"index","","",439,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_index","","",439,{"inputs":[{"name":"u32"}],"output":{"name":"intvid"}}],[11,"tag","","",439,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"index","","",441,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_index","","",441,{"inputs":[{"name":"u32"}],"output":{"name":"regionvid"}}],[11,"tag","","",441,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","","",487,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"index","","",440,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_index","","",440,{"inputs":[{"name":"u32"}],"output":{"name":"floatvid"}}],[11,"tag","","",440,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"index","","",438,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_index","","",438,{"inputs":[{"name":"u32"}],"output":{"name":"tyvid"}}],[11,"tag","","",438,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"infer_ctxt","","",507,{"inputs":[{"name":"self"}],"output":{"name":"inferctxtbuilder"}}],[11,"new","rustc::ty::error","",504,{"inputs":[{"name":"bool"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"trans_normalize","rustc::ty","",708,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"}],"output":{"name":"self"}}],[11,"trans_normalize","","",425,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"}],"output":{"name":"self"}}],[11,"trans_normalize","","",709,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"}],"output":{"name":"self"}}],[11,"trans_normalize","","",429,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"}],"output":{"name":"self"}}],[11,"trans_normalize","","",693,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"}],"output":{"name":"self"}}],[11,"trans_normalize","","",433,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"}],"output":{"name":"self"}}],[11,"trans_normalize","rustc::mir::tcx","",332,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"paramenv"}],"output":{"name":"self"}}],[11,"erase_late_bound_regions_and_normalize","rustc::ty","Currently, higher-ranked type bounds inhibit normalization. Therefore, each time we erase them in translation, we need to normalize the contents.",507,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"t"}}],[11,"normalize_associated_type","","Fully normalizes any associated types in `value`, using an empty environment and `Reveal::All` mode (therefore, suitable only for monomorphized code during trans, basically).",507,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"normalize_associated_type_in_env","","Does a best-effort to normalize any associated types in `value`; this includes revealing specializable types, so this should be not be used during type-checking, but only during optimization and code generation.",507,{"inputs":[{"name":"self"},{"name":"t"},{"name":"paramenv"}],"output":{"name":"t"}}],[11,"lookup_and_emit","rustc::lint","",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":null}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":null}],[11,"struct_span_lint","","",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",208,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"str"}],"output":null}],[11,"new_unsigned","rustc::middle::const_val","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",222,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"new_signed","","Creates a new signed ConstInt with matching type while also checking that overflow does not happen.",222,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"option"}}],[11,"new_unsigned_truncating","","Creates a new unsigned ConstInt with matching type.",222,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"constint"}}],[11,"new_signed_truncating","","Creates a new signed ConstInt with matching type.",222,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"constint"}}],[11,"description","","Description of the type, not the value",222,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_u128_unchecked","","Erases the type and returns a u128. This is not the same as `-5i8 as u128` but as `-5i8 as i128 as u128`",222,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u32","","Converts the value to a `u32` if it's in the range 0...std::u32::MAX",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","Converts the value to a `u64` if it's in the range 0...std::u64::MAX",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u128","","Converts the value to a `u128` if it's in the range 0...std::u128::MAX",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_negative","","",222,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",222,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"int_type","","",222,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"add","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"shl","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"rem","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"neg","","",222,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"hash","","",222,null],[11,"decode","","",222,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"mul","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"sub","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"partial_cmp","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"option"}}],[11,"bitand","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"encode","","",222,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"not","","",222,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shr","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"bitxor","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"cmp","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"ordering"}}],[11,"bitor","","",222,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"require_lang_item","rustc::ty","",507,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"defid"}}],[11,"check_stability","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"lookup_deprecation","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"recursive_type_with_infinite_size_error","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"diagnosticbuilder"}}],[11,"report_object_safety_error","","",507,{"inputs":[{"name":"self"},{"name":"span"},{"name":"defid"},{"name":"vec"}],"output":{"name":"diagnosticbuilder"}}],[11,"astconv_object_safety_violations","","Returns the object safety violations that affect astconv - currently, Self in supertraits. This is needed because `object_safety_violations` can't be used during type collection.",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"object_safety_violations","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"is_vtable_safe_method","","We say a method is vtable safe if it can be invoked on a trait object.  Note that object-safe traits can have some non-vtable-safe methods, so long as they require `Self:Sized` or otherwise ensure that they cannot be used when `Self=Trait`.",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"associateditem"}],"output":{"name":"bool"}}],[11,"derived_cause","rustc::traits","Creates a cause for obligations that are derived from `obligation` by a recursive search (e.g., for a builtin bound, or eventually a `impl Foo for ..`). If `obligation` is itself a derived obligation, this is just a clone, but otherwise we create a \"derived obligation\" cause so as to keep track of the original root obligation for error reporting.",710,null],[11,"trans_apply_param_substs","rustc::ty","Monomorphizes a type from the AST by first applying the in-scope substitutions and then normalizing any associated types.",507,{"inputs":[{"name":"self"},{"name":"substs"},{"name":"t"}],"output":{"name":"t"}}],[11,"predicate_for_trait_def","","",507,null],[11,"upcast_choices","","Cast a trait reference into a reference to one of its super traits; returns `None` if `target_trait_def_id` is not a supertrait.",507,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"count_own_vtable_entries","","Given a trait `trait_ref`, returns the number of vtable entries that come from `trait_ref`, excluding its supertraits. Used in computing the vtable base for an upcast trait of a trait object.",507,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"usize"}}],[11,"get_vtable_index_of_object_method","","Given an upcast trait object described by `object`, returns the index of the method `method_def_id` (which should be part of `object.upcast_trait_ref`) within the vtable for `object`.",507,{"inputs":[{"name":"self"},{"name":"vtableobjectdata"},{"name":"defid"}],"output":{"name":"usize"}}],[11,"closure_trait_ref_and_return_type","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"ty"},{"name":"polyfnsig"},{"name":"tupleargumentsflag"}],"output":{"name":"binder"}}],[11,"generator_trait_ref_and_outputs","","",507,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"ty"},{"name":"polygensig"}],"output":{"name":"binder"}}],[11,"impl_is_default","","",507,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"impl_item_is_final","","",507,{"inputs":[{"name":"self"},{"name":"nodeitem"}],"output":{"name":"bool"}}],[11,"map_crate","","",693,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"default_span","","",693,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[11,"map_crate","","",708,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"default_span","","",708,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[11,"relate","","",708,{"inputs":[{"name":"r"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[11,"relate","","",711,{"inputs":[{"name":"r"},{"name":"region"},{"name":"region"}],"output":{"name":"relateresult"}}],[11,"with_self_ty","","Object types don't have a self-type specified. Therefore, when we convert the principal trait-ref into a normal trait-ref, you must give some self-type. A common choice is `mk_err()` or some skolemized type.",712,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"polytraitref"}}],[11,"lift_to_tcx","","",708,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",711,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"super_fold_with","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",708,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",708,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"visit_with","","",708,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",711,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",711,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",711,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"visit_with","","",711,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"self_ty","","",693,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"def_id","","",693,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"substs","","",693,{"inputs":[{"name":"self"}],"output":{"name":"substs"}}],[11,"input_types","","",693,null],[11,"to_poly_trait_predicate","","",693,{"inputs":[{"name":"self"}],"output":{"name":"polytraitpredicate"}}],[11,"def_id","","",712,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"input_types","","",712,null],[11,"yield_ty","","",713,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"return_ty","","",713,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"inputs","","",709,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"input","","",709,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"binder"}}],[11,"output","","",709,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"variadic","","",709,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unsafety","","",709,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"abi","","",709,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"with_self_ty","","",714,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"polyprojectionpredicate"}}]],"paths":[[3,"CFG"],[3,"CFGEdgeData"],[4,"CFGNodeData"],[3,"LabelledCFG"],[3,"DepNode"],[3,"WorkProduct"],[3,"DepGraphQuery"],[3,"AssertDepGraphSafe"],[3,"SerializedDepGraph"],[4,"DepKind"],[4,"DepConstructor"],[4,"DepNodeColor"],[3,"EdgeFilter"],[3,"DepNodeFilter"],[3,"WorkProductId"],[3,"DepTrackingMap"],[3,"DepGraph"],[3,"DepNodeIndex"],[3,"PreviousDepGraph"],[8,"DepTrackingMapConfig"],[3,"HirId"],[3,"ItemLocalId"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"PathParameters"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"BodyId"],[3,"Body"],[3,"Expr"],[3,"Destination"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItemId"],[3,"TraitItem"],[3,"ImplItemId"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"GlobalAsm"],[3,"EnumDef"],[3,"Variant_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"ItemId"],[3,"Item"],[3,"TraitItemRef"],[3,"ImplItemRef"],[3,"ForeignItem"],[3,"Freevar"],[3,"TraitCandidate"],[4,"LifetimeName"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"UnsafeGeneric"],[4,"SyntheticTyParamKind"],[4,"WherePredicate"],[4,"BindingAnnotation"],[4,"RangeEnd"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"Decl_"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[4,"QPath"],[4,"LocalSource"],[4,"MatchSource"],[4,"LoopSource"],[4,"LoopIdError"],[4,"LoopIdResult"],[4,"ScopeTarget"],[4,"CaptureClause"],[4,"TraitMethod"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"PrimTy"],[4,"Ty_"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"UseKind"],[4,"Visibility"],[4,"VariantData"],[4,"Item_"],[4,"AssociatedItemKind"],[4,"ForeignItem_"],[3,"Export"],[4,"CtorKind"],[4,"Def"],[3,"PathResolution"],[3,"DefId"],[4,"DefIndexAddressSpace"],[3,"CrateNum"],[3,"DefIndex"],[3,"IdRange"],[4,"FnKind"],[4,"NestedVisitorMap"],[8,"Visitor"],[3,"IdRangeComputingVisitor"],[8,"ItemLikeVisitor"],[3,"DeepVisitor"],[8,"Resolver"],[3,"LoweringContext"],[3,"DefCollector"],[3,"MacroInvocationData"],[3,"Forest"],[3,"Map"],[4,"Node"],[4,"Code"],[8,"MaybeFnLike"],[3,"FnLikeNode"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefPath"],[3,"DefPathHash"],[4,"DefPathData"],[4,"GlobalMetaDataKind"],[3,"DefPathTable"],[3,"Definitions"],[3,"NodesMatchingSuffix"],[8,"EnumerateAndAdjustIterator"],[3,"EnumerateAndAdjust"],[3,"State"],[4,"AnnNode"],[4,"Nested"],[8,"PpAnn"],[3,"Svh"],[4,"NodeIdHashingMode"],[3,"Fingerprint"],[3,"CachingCodemapView"],[3,"StableHashingContext"],[3,"InferOk"],[3,"InferCtxt"],[4,"ValuePairs"],[4,"SubregionOrigin"],[4,"ParameterOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"FixupError"],[8,"ToTrace"],[3,"At"],[3,"Trace"],[8,"LatticeDir"],[4,"Constraint"],[4,"GenericKind"],[4,"VerifyBound"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"ProcessedErrorOrigin"],[4,"VarValue"],[3,"Verify"],[3,"TwoRegions"],[3,"TaintDirections"],[3,"RegionVarBindings"],[3,"RegionSnapshot"],[3,"OpportunisticTypeResolver"],[3,"OpportunisticTypeAndRegionResolver"],[3,"UnresolvedTypeFinder"],[3,"TypeFreshener"],[3,"Default"],[4,"TypeVariableOrigin"],[3,"TypeVariableTable"],[3,"RegionVidKey"],[8,"ToType"],[8,"TransNormalize"],[3,"TypeTrace"],[3,"InferCtxtBuilder"],[3,"LateContext"],[3,"EarlyContext"],[3,"FutureIncompatibleInfo"],[3,"BufferedEarlyLint"],[3,"Lint"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"LintId"],[3,"LintLevelSets"],[3,"LintLevelMap"],[8,"LintContext"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[3,"LintBuffer"],[4,"AllocatorKind"],[3,"BorrowCheckResult"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[8,"Delegate"],[3,"ExprUseVisitor"],[4,"ConstInt"],[3,"ByteArray"],[3,"ConstEvalErr"],[4,"ConstVal"],[4,"ConstAggregate"],[4,"ErrKind"],[4,"ConstEvalErrDescription"],[3,"LinkMeta"],[3,"CrateSource"],[3,"NativeLibrary"],[3,"ExternCrate"],[3,"EncodedMetadata"],[3,"EncodedMetadataHash"],[3,"EncodedMetadataHashes"],[3,"ExternConstBody"],[3,"ExternBodyNestedBodies"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[4,"LoadedMacro"],[8,"MetadataLoader"],[8,"CrateStore"],[8,"CrateLoader"],[3,"DummyCrateStore"],[4,"EntryOrExit"],[4,"KillFrom"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"DataFlowContext"],[4,"Linkage"],[4,"SymbolExportLevel"],[3,"RegionRelations"],[3,"FreeRegionMap"],[3,"LanguageItems"],[4,"LangItem"],[3,"Upvar"],[3,"cmt_"],[3,"MemCategorizationContext"],[4,"Categorization"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"MutabilityCategory"],[4,"Note"],[4,"ImmutabilityBlame"],[4,"Aliasability"],[4,"AliasableReason"],[8,"ast_node"],[3,"AccessLevels"],[4,"AccessLevel"],[3,"ReachableSet"],[3,"BlockRemainder"],[3,"FirstStatementIndex"],[4,"ScopeData"],[3,"Scope"],[3,"ScopeTree"],[3,"Context"],[3,"NamedRegionMap"],[4,"Region"],[4,"Set1"],[3,"DeprecationEntry"],[4,"StabilityLevel"],[3,"Index"],[3,"Stats"],[4,"TransItem"],[4,"Linkage"],[4,"Visibility"],[3,"CodegenUnit"],[3,"Mir"],[3,"VisibilityScopeInfo"],[3,"SourceInfo"],[3,"Local"],[3,"LocalDecl"],[3,"UpvarDecl"],[3,"BasicBlock"],[3,"BasicBlockData"],[3,"Terminator"],[3,"Statement"],[3,"ValidationOperand"],[3,"Static"],[3,"Projection"],[3,"Field"],[3,"VisibilityScope"],[3,"VisibilityScopeData"],[3,"Constant"],[3,"Promoted"],[3,"Location"],[3,"UnsafetyViolation"],[3,"GeneratorLayout"],[4,"Safety"],[4,"ClearOnDecode"],[4,"Mutability"],[4,"BorrowKind"],[4,"LocalKind"],[4,"TerminatorKind"],[4,"AssertMessage"],[4,"StatementKind"],[4,"ValidationOp"],[4,"Lvalue"],[4,"ProjectionElem"],[4,"Operand"],[4,"Rvalue"],[4,"CastKind"],[4,"AggregateKind"],[4,"BinOp"],[4,"NullOp"],[4,"UnOp"],[4,"Literal"],[4,"LvalueTy"],[4,"RvalueInitializationState"],[4,"Lookup"],[4,"LvalueContext"],[8,"Visitor"],[8,"MutVisitor"],[3,"MirSuite"],[3,"MirPassIndex"],[4,"MirSource"],[8,"PassHook"],[8,"MirPass"],[3,"Passes"],[3,"Preorder"],[3,"Postorder"],[3,"ReversePostorder"],[8,"HasLocalDecls"],[3,"FieldInfo"],[3,"TypeSizeInfo"],[3,"VariantInfo"],[3,"Session"],[3,"PerfStats"],[4,"DataTypeKind"],[4,"SizeKind"],[4,"IncrCompSession"],[4,"CompileIncomplete"],[3,"CodeStats"],[3,"Config"],[3,"Options"],[3,"OutputFilenames"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[3,"RustcOptGroup"],[4,"Sanitizer"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[4,"PrintRequest"],[4,"Input"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"OptionStability"],[3,"OutputTypes"],[3,"Externs"],[3,"FileSearch"],[4,"FileMatch"],[4,"PathKind"],[3,"SearchPaths"],[3,"Iter"],[3,"OverlapResult"],[3,"RegionObligation"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[3,"OnUnimplementedDirective"],[3,"OnUnimplementedNote"],[3,"OverlapError"],[3,"Obligation"],[3,"ObligationCause"],[3,"FulfillmentError"],[3,"VtableImplData"],[3,"VtableGeneratorData"],[3,"VtableClosureData"],[3,"VtableDefaultImplData"],[3,"VtableBuiltinData"],[3,"VtableObjectData"],[3,"VtableFnPointerData"],[4,"OrphanCheckErr"],[4,"Reveal"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[4,"IntercrateAmbiguityCause"],[4,"ObligationCauseCode"],[4,"SelectionError"],[4,"FulfillmentErrorCode"],[4,"Vtable"],[3,"NodeItem"],[4,"Node"],[3,"FulfillmentContext"],[3,"ProjectionCache"],[3,"SelectionCache"],[3,"EvaluationCache"],[3,"SelectionContext"],[3,"Graph"],[3,"Ancestors"],[3,"SpecializesCache"],[3,"DerivedObligationCause"],[3,"TransTraitCaches"],[3,"TraitSelectionCache"],[3,"ProjectionCache"],[3,"SupertraitDefIds"],[3,"Binder"],[3,"DebruijnIndex"],[3,"FnSig"],[3,"GenSig"],[3,"ParamTy"],[3,"ProjectionTy"],[3,"ClosureSubsts"],[3,"GeneratorInterior"],[3,"TypeAndMut"],[3,"TraitRef"],[3,"ExistentialTraitRef"],[3,"ExistentialProjection"],[3,"Const"],[3,"EarlyBoundRegion"],[3,"FreeRegion"],[3,"TyVid"],[3,"IntVid"],[3,"FloatVid"],[3,"RegionVid"],[3,"SkolemizedRegionVid"],[3,"TypeckTables"],[3,"Instance"],[3,"CrateAnalysis"],[3,"Resolutions"],[3,"ImplHeader"],[3,"AssociatedItem"],[3,"CrateVariancesMap"],[3,"CReaderCacheKey"],[3,"TyS"],[3,"UpvarId"],[3,"UpvarBorrow"],[3,"ClosureUpvar"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"SubtypePredicate"],[3,"ProjectionPredicate"],[3,"InstantiatedPredicates"],[3,"ParamEnv"],[3,"ParamEnvAnd"],[3,"Destructor"],[3,"VariantDef"],[3,"FieldDef"],[3,"AdtDef"],[3,"ReprOptions"],[3,"CrateInherentImpls"],[3,"DtorckConstraint"],[3,"SymbolName"],[4,"InferTy"],[4,"ExistentialPredicate"],[4,"TypeVariants"],[4,"BoundRegion"],[4,"RegionKind"],[4,"InstanceDef"],[4,"AssociatedItemContainer"],[4,"AssociatedKind"],[4,"Visibility"],[4,"Variance"],[4,"BorrowKind"],[4,"UpvarCapture"],[4,"IntVarValue"],[4,"Predicate"],[4,"VariantDiscr"],[4,"AdtKind"],[4,"ClosureKind"],[4,"LvaluePreference"],[4,"Attributes"],[3,"Adjustment"],[3,"OverloadedDeref"],[3,"CoerceUnsizedInfo"],[4,"Adjust"],[4,"AutoBorrow"],[4,"CustomCoerceUnsized"],[4,"BindingMode"],[4,"IntTy"],[4,"CastTy"],[4,"CastKind"],[3,"ExpectedFound"],[4,"TypeError"],[4,"UnconstrainedNumeric"],[3,"TyCtxt"],[4,"SimplifiedTypeGen"],[3,"BottomUpFolder"],[8,"TypeFoldable"],[8,"TypeFolder"],[8,"TypeVisitor"],[3,"RegionFolder"],[3,"DefIdForest"],[4,"RootMode"],[8,"ItemPathBuffer"],[3,"TargetDataLayout"],[3,"Struct"],[3,"Union"],[3,"TyLayout"],[4,"Endian"],[4,"Integer"],[4,"Primitive"],[4,"Layout"],[4,"LayoutError"],[4,"SizeSkeleton"],[8,"HasDataLayout"],[8,"LayoutTyper"],[3,"Size"],[3,"Align"],[3,"LayoutCx"],[3,"Match"],[3,"TyCtxtAt"],[3,"Providers"],[4,"Query"],[4,"QueryMsg"],[8,"Key"],[8,"QueryConfig"],[3,"Maps"],[3,"type_of"],[3,"generics_of"],[3,"predicates_of"],[3,"super_predicates_of"],[3,"type_param_predicates"],[3,"trait_def"],[3,"adt_def"],[3,"adt_destructor"],[3,"adt_sized_constraint"],[3,"adt_dtorck_constraint"],[3,"is_const_fn"],[3,"is_foreign_item"],[3,"is_default_impl"],[3,"crate_variances"],[3,"variances_of"],[3,"inferred_outlives_of"],[3,"associated_item_def_ids"],[3,"associated_item"],[3,"impl_trait_ref"],[3,"impl_polarity"],[3,"inherent_impls"],[3,"mir_keys"],[3,"mir_const_qualif"],[3,"mir_const"],[3,"mir_validated"],[3,"optimized_mir"],[3,"closure_kind"],[3,"unsafety_violations"],[3,"fn_sig"],[3,"generator_sig"],[3,"coerce_unsized_info"],[3,"typeck_item_bodies"],[3,"typeck_tables_of"],[3,"has_typeck_tables"],[3,"coherent_trait"],[3,"borrowck"],[3,"mir_borrowck"],[3,"crate_inherent_impls"],[3,"crate_inherent_impls_overlap_check"],[3,"const_eval"],[3,"privacy_access_levels"],[3,"reachable_set"],[3,"region_scope_tree"],[3,"mir_shims"],[3,"def_symbol_name"],[3,"symbol_name"],[3,"describe_def"],[3,"def_span"],[3,"lookup_stability"],[3,"lookup_deprecation_entry"],[3,"item_attrs"],[3,"fn_arg_names"],[3,"impl_parent"],[3,"trait_of_item"],[3,"is_exported_symbol"],[3,"item_body_nested_bodies"],[3,"const_is_rvalue_promotable_to_static"],[3,"rvalue_promotable_map"],[3,"is_mir_available"],[3,"vtable_methods"],[3,"trans_fulfill_obligation"],[3,"trait_impls_of"],[3,"specialization_graph_of"],[3,"is_object_safe"],[3,"param_env"],[3,"is_copy_raw"],[3,"is_sized_raw"],[3,"is_freeze_raw"],[3,"needs_drop_raw"],[3,"layout_raw"],[3,"dylib_dependency_formats"],[3,"is_panic_runtime"],[3,"is_compiler_builtins"],[3,"has_global_allocator"],[3,"is_sanitizer_runtime"],[3,"is_profiler_runtime"],[3,"panic_strategy"],[3,"is_no_builtins"],[3,"extern_crate"],[3,"specializes"],[3,"in_scope_traits_map"],[3,"module_exports"],[3,"lint_levels"],[3,"impl_defaultness"],[3,"exported_symbol_ids"],[3,"native_libraries"],[3,"plugin_registrar_fn"],[3,"derive_registrar_fn"],[3,"crate_disambiguator"],[3,"crate_hash"],[3,"original_crate_name"],[3,"implementations_of_trait"],[3,"all_trait_implementations"],[3,"is_dllimport_foreign_item"],[3,"is_statically_included_foreign_item"],[3,"native_library_kind"],[3,"link_args"],[3,"named_region_map"],[3,"is_late_bound_map"],[3,"object_lifetime_defaults_map"],[3,"visibility"],[3,"dep_kind"],[3,"crate_name"],[3,"item_children"],[3,"extern_mod_stmt_cnum"],[3,"get_lang_items"],[3,"defined_lang_items"],[3,"missing_lang_items"],[3,"extern_const_body"],[3,"visible_parent_map"],[3,"missing_extern_crate_item"],[3,"used_crate_source"],[3,"postorder_cnums"],[3,"freevars"],[3,"maybe_unused_trait_import"],[3,"maybe_unused_extern_crates"],[3,"stability_index"],[3,"all_crate_nums"],[3,"exported_symbols"],[3,"collect_and_partition_translation_items"],[3,"export_name"],[3,"contains_extern_indicator"],[3,"is_translated_function"],[3,"codegen_unit"],[3,"compile_codegen_unit"],[3,"output_filenames"],[3,"has_copy_closures"],[3,"has_clone_closures"],[3,"erase_regions_ty"],[4,"Component"],[4,"Cause"],[8,"TypeRelation"],[8,"Relate"],[3,"Steal"],[8,"Subst"],[3,"Kind"],[6,"Substs"],[3,"TraitDef"],[3,"TraitImpls"],[3,"TypeWalker"],[4,"CopyImplementationError"],[4,"Representability"],[8,"IntTypeExt"],[3,"TypeIdHasher"],[3,"GlobalArenas"],[3,"Slice"],[8,"Lift"],[8,"DefIdTree"],[8,"ToPolyTraitRef"],[8,"ToPredicate"],[3,"TypeFlags"],[6,"PolyTraitPredicate"],[6,"PolyProjectionPredicate"],[6,"PolyTraitRef"],[6,"PolyEquatePredicate"],[6,"PolyRegionOutlivesPredicate"],[6,"PolyTypeOutlivesPredicate"],[3,"AdtFlags"],[3,"ReprFlags"],[3,"ProfQDumpParams"],[4,"ProfileQueriesMsg"],[8,"MemoizationMap"],[3,"ErrorReported"],[3,"Indenter"],[8,"Print"],[3,"PrintContext"],[4,"LinkOrCopy"],[4,"RenameOrCopyRemove"],[6,"Ty"],[6,"PolyFnSig"],[6,"TraitObligation"],[6,"Region"],[6,"PolyExistentialTraitRef"],[6,"PolyGenSig"],[6,"PolyExistentialProjection"]]};
searchIndex["rustc_allocator"] = {"doc":"","items":[[3,"AllocatorMethod","rustc_allocator","",null,null],[12,"name","","",0,null],[12,"inputs","","",0,null],[12,"output","","",0,null],[4,"AllocatorTy","","",null,null],[13,"AllocErr","","",1,null],[13,"Bang","","",1,null],[13,"Layout","","",1,null],[13,"LayoutRef","","",1,null],[13,"Ptr","","",1,null],[13,"ResultExcess","","",1,null],[13,"ResultPtr","","",1,null],[13,"ResultUnit","","",1,null],[13,"Unit","","",1,null],[13,"UsizePair","","",1,null],[0,"expand","","",null,null],[5,"modify","rustc_allocator::expand","",null,{"inputs":[{"name":"parsesess"},{"name":"resolver"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[7,"ALLOCATOR_METHODS","rustc_allocator","",null,null]],"paths":[[3,"AllocatorMethod"],[4,"AllocatorTy"]]};
searchIndex["rustc_apfloat"] = {"doc":"Port of LLVM's APFloat software floating-point implementation from the following C++ sources (please update commit hash when backporting): https://github.com/llvm-mirror/llvm/tree/23efab2bbd424ed13495a420ad8641cb2c6c28f9 * `include/llvm/ADT/APFloat.h` -> `Float` and `FloatConvert` traits * `lib/Support/APFloat.cpp` -> `ieee` and `ppc` modules * `unittests/ADT/APFloatTest.cpp` -> `tests` directory","items":[[3,"Status","rustc_apfloat","IEEE-754R 7: Default exception handling.",null,null],[3,"StatusAnd","","",null,null],[12,"status","","",0,null],[12,"value","","",0,null],[3,"ParseError","","",null,null],[12,"0","","",1,null],[4,"Category","","Category of internally-represented number.",null,null],[13,"Infinity","","",2,null],[13,"NaN","","",2,null],[13,"Normal","","",2,null],[13,"Zero","","",2,null],[4,"Round","","IEEE-754R 4.3: Rounding-direction attributes.",null,null],[13,"NearestTiesToEven","","",3,null],[13,"TowardPositive","","",3,null],[13,"TowardNegative","","",3,null],[13,"TowardZero","","",3,null],[13,"NearestTiesToAway","","",3,null],[0,"ieee","","",null,null],[3,"IeeeFloat","rustc_apfloat::ieee","",null,null],[3,"HalfS","","",null,null],[3,"SingleS","","",null,null],[3,"DoubleS","","",null,null],[3,"QuadS","","",null,null],[3,"X87DoubleExtendedS","","",null,null],[6,"Half","","",null,null],[6,"Single","","",null,null],[6,"Double","","",null,null],[6,"Quad","","",null,null],[6,"X87DoubleExtended","","",null,null],[8,"Semantics","","Represents floating point arithmetic semantics.",null,null],[18,"BITS","","Total number of bits in the in-memory format.",4,null],[18,"PRECISION","","Number of bits in the significand. This includes the integer bit.",4,null],[18,"MAX_EXP","","The largest E such that 2^E is representable; this matches the definition of IEEE 754.",4,null],[18,"MIN_EXP","","The smallest E such that 2^E is a normalized number; this matches the definition of IEEE 754.",4,null],[18,"QNAN_BIT","","The significand bit that marks NaN as quiet.",4,null],[18,"QNAN_SIGNIFICAND","","The significand bitpattern to mark a NaN as quiet. NOTE: for X87DoubleExtended we need to set two bits instead of 2.",4,null],[11,"from_bits","","",4,{"inputs":[{"name":"u128"}],"output":{"name":"ieeefloat"}}],[11,"to_bits","","",4,{"inputs":[{"name":"ieeefloat"}],"output":{"name":"u128"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_bits","","Integer bit is explicit in this format. Intel hardware (387 and later) does not support these bit patterns:  exponent = all 1's, integer bit 0, significand 0 (\"pseudoinfinity\")  exponent = all 1's, integer bit 0, significand nonzero (\"pseudoNaN\")  exponent = 0, integer bit 1 (\"pseudodenormal\")  exponent!=0 nor all 1's, integer bit 0 (\"unnormal\") At the moment, the first two are treated as NaNs, the second two as Normal.",6,{"inputs":[{"name":"u128"}],"output":{"name":"ieeefloat"}}],[11,"to_bits","","",6,{"inputs":[{"name":"ieeefloat"}],"output":{"name":"u128"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"rem","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"neg","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"qnan","","",5,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"snan","","",5,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"largest","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"smallest_normalized","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"add_r","","",5,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"mul_r","","",5,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"mul_add_r","","",5,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"div_r","","",5,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"c_fmod","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"round_to_integral","","",5,{"inputs":[{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"next_up","","",5,{"inputs":[{"name":"self"}],"output":{"name":"statusand"}}],[11,"from_bits","","",5,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"from_u128_r","","",5,{"inputs":[{"name":"u128"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"from_str_r","","",5,{"inputs":[{"name":"str"},{"name":"round"}],"output":{"name":"result"}}],[11,"to_bits","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u128_r","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"round"},{"name":"bool"}],"output":{"name":"statusand"}}],[11,"cmp_abs_normal","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"bitwise_eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_denormal","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_signaling","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"category","","",5,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"get_exact_inverse","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ilogb","","",5,{"inputs":[{"name":"self"}],"output":{"name":"expint"}}],[11,"scalbn_r","","",5,{"inputs":[{"name":"self"},{"name":"expint"},{"name":"round"}],"output":{"name":"self"}}],[11,"frexp_r","","",5,{"inputs":[{"name":"self"},{"name":"expint"},{"name":"round"}],"output":{"name":"self"}}],[11,"convert_r","","",5,{"inputs":[{"name":"self"},{"name":"round"},{"name":"bool"}],"output":{"name":"statusand"}}],[0,"ppc","rustc_apfloat","",null,null],[3,"DoubleFloat","rustc_apfloat::ppc","",null,null],[3,"FallbackS","","",null,null],[3,"FallbackExtendedS","","",null,null],[6,"DoubleDouble","","",null,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"doublefloat"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"doublefloat"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"doublefloat"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"doublefloat"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"doublefloat"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"doublefloat"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"doublefloat"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"doublefloat"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"ieeefloat"}],"output":{"name":"self"}}],[11,"from","rustc_apfloat::ieee","",5,{"inputs":[{"name":"doublefloat"}],"output":{"name":"self"}}],[11,"default","rustc_apfloat::ppc","",7,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"add_assign","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"neg","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"qnan","","",7,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"snan","","",7,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"largest","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"smallest_normalized","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"add_r","","",7,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"mul_r","","",7,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"mul_add_r","","",7,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"div_r","","",7,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"c_fmod","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[11,"round_to_integral","","",7,{"inputs":[{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"next_up","","",7,{"inputs":[{"name":"self"}],"output":{"name":"statusand"}}],[11,"from_bits","","",7,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"from_u128_r","","",7,{"inputs":[{"name":"u128"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"from_str_r","","",7,{"inputs":[{"name":"str"},{"name":"round"}],"output":{"name":"result"}}],[11,"to_bits","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u128_r","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"round"},{"name":"bool"}],"output":{"name":"statusand"}}],[11,"cmp_abs_normal","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"bitwise_eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_denormal","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_signaling","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"category","","",7,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"get_exact_inverse","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ilogb","","",7,{"inputs":[{"name":"self"}],"output":{"name":"expint"}}],[11,"scalbn_r","","",7,{"inputs":[{"name":"self"},{"name":"expint"},{"name":"round"}],"output":{"name":"self"}}],[11,"frexp_r","","",7,{"inputs":[{"name":"self"},{"name":"expint"},{"name":"round"}],"output":{"name":"self"}}],[6,"ExpInt","rustc_apfloat","A signed type to represent a floating point number's unbiased exponent.",null,null],[17,"IEK_INF","","",null,null],[17,"IEK_NAN","","",null,null],[17,"IEK_ZERO","","",null,null],[8,"Float","","A self-contained host- and target-independent arbitrary-precision floating-point software implementation.",null,null],[18,"BITS","","Total number of bits in the in-memory format.",8,null],[18,"PRECISION","","Number of bits in the significand. This includes the integer bit.",8,null],[18,"MAX_EXP","","The largest E such that 2^E is representable; this matches the definition of IEEE 754.",8,null],[18,"MIN_EXP","","The smallest E such that 2^E is a normalized number; this matches the definition of IEEE 754.",8,null],[18,"ZERO","","Positive Zero.",8,null],[18,"INFINITY","","Positive Infinity.",8,null],[18,"NAN","","NaN (Not a Number).",8,null],[10,"qnan","","Factory for QNaN values.",8,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[10,"snan","","Factory for SNaN values.",8,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[10,"largest","","Largest finite number.",8,{"inputs":[],"output":{"name":"self"}}],[18,"SMALLEST","","Smallest (by magnitude) finite number. Might be denormalized, which implies a relative loss of precision.",8,null],[10,"smallest_normalized","","Smallest (by magnitude) normalized finite number.",8,{"inputs":[],"output":{"name":"self"}}],[10,"add_r","","",8,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"sub_r","","",8,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[10,"mul_r","","",8,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[10,"mul_add_r","","",8,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"mul_add","","",8,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[10,"div_r","","",8,{"inputs":[{"name":"self"},{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"ieee_rem","","IEEE remainder.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[10,"c_fmod","","C fmod, or llvm frem.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"statusand"}}],[10,"round_to_integral","","",8,{"inputs":[{"name":"self"},{"name":"round"}],"output":{"name":"statusand"}}],[10,"next_up","","IEEE-754R 2008 5.3.1: nextUp.",8,{"inputs":[{"name":"self"}],"output":{"name":"statusand"}}],[11,"next_down","","IEEE-754R 2008 5.3.1: nextDown.",8,{"inputs":[{"name":"self"}],"output":{"name":"statusand"}}],[11,"abs","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"copy_sign","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_bits","","",8,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"from_i128_r","","",8,{"inputs":[{"name":"i128"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"from_i128","","",8,{"inputs":[{"name":"i128"}],"output":{"name":"statusand"}}],[10,"from_u128_r","","",8,{"inputs":[{"name":"u128"},{"name":"round"}],"output":{"name":"statusand"}}],[11,"from_u128","","",8,{"inputs":[{"name":"u128"}],"output":{"name":"statusand"}}],[10,"from_str_r","","",8,{"inputs":[{"name":"str"},{"name":"round"}],"output":{"name":"result"}}],[10,"to_bits","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_i128_r","","Convert a floating point number to an integer according to the rounding mode. In case of an invalid operation exception, deterministic values are returned, namely zero for NaNs and the minimal or maximal value respectively for underflow or overflow. If the rounded value is in range but the floating point number is not the exact integer, the C standard doesn't require an inexact exception to be raised. IEEE-854 does require it so we do that.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"round"},{"name":"bool"}],"output":{"name":"statusand"}}],[11,"to_i128","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"statusand"}}],[10,"to_u128_r","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"round"},{"name":"bool"}],"output":{"name":"statusand"}}],[11,"to_u128","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"statusand"}}],[10,"cmp_abs_normal","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[10,"bitwise_eq","","Bitwise comparison for equality (QNaNs compare equal, 0!=-0).",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"min","","Implements IEEE minNum semantics. Returns the smaller of the 2 arguments if both are not NaN. If either argument is a NaN, returns the other argument.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","Implements IEEE maxNum semantics. Returns the larger of the 2 arguments if both are not NaN. If either argument is a NaN, returns the other argument.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"is_negative","","IEEE-754R isSignMinus: Returns true if and only if the current value is negative.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","IEEE-754R isNormal: Returns true if and only if the current value is normal.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns true if and only if the current value is zero, subnormal, or normal.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns true if and only if the float is plus or minus zero.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_denormal","","IEEE-754R isSubnormal(): Returns true if and only if the float is a denormal.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","IEEE-754R isInfinite(): Returns true if and only if the float is infinity.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_nan","","Returns true if and only if the float is a quiet or signaling NaN.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_signaling","","Returns true if and only if the float is a signaling NaN.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"category","","",8,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_non_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite_non_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pos_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_neg_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_smallest","","Returns true if and only if the number has the smallest possible non-zero magnitude in the current semantics.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_largest","","Returns true if and only if the number has the largest possible finite magnitude in the current semantics.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_integer","","Returns true if and only if the number is an exact integer.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_exact_inverse","","If this value has an exact multiplicative inverse, return it.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"ilogb","","Returns the exponent of the internal representation of the Float.",8,{"inputs":[{"name":"self"}],"output":{"name":"expint"}}],[10,"scalbn_r","","Returns: self * 2^exp for integral exponents.",8,{"inputs":[{"name":"self"},{"name":"expint"},{"name":"round"}],"output":{"name":"self"}}],[11,"scalbn","","",8,{"inputs":[{"name":"self"},{"name":"expint"}],"output":{"name":"self"}}],[10,"frexp_r","","Equivalent of C standard library function.",8,{"inputs":[{"name":"self"},{"name":"expint"},{"name":"round"}],"output":{"name":"self"}}],[11,"frexp","","",8,{"inputs":[{"name":"self"},{"name":"expint"}],"output":{"name":"self"}}],[8,"FloatConvert","","",null,null],[10,"convert_r","","Convert a value of one floating point type to another. The return value corresponds to the IEEE754 exceptions. *loses_info records whether the transformation lost information, i.e. whether converting the result back to the original type will produce the original value (this is almost the same as return value==Status::OK, but there are edge cases where this is not so).",9,{"inputs":[{"name":"self"},{"name":"round"},{"name":"bool"}],"output":{"name":"statusand"}}],[11,"convert","","",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusand"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"ordering"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"OK","","",10,null],[18,"INVALID_OP","","",10,null],[18,"DIV_BY_ZERO","","",10,null],[18,"OVERFLOW","","",10,null],[18,"UNDERFLOW","","",10,null],[18,"INEXACT","","",10,null],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"status"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"status"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,{"inputs":[{"name":"u8"}],"output":{"name":"status"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",10,{"inputs":[{"name":"self"},{"name":"status"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitor_assign","","Adds the set of flags.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitxor_assign","","Toggles the set of flags.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"status"}}],[11,"sub_assign","","Disables all flags enabled in the set.",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"extend","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"status"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"statusand"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"statusand"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"statusand"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"statusand"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"statusand"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"statusand"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"statusand"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"statusand"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"statusand"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"and","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"statusand"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"round"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"round"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"round"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"unpack","","",null,null]],"paths":[[3,"StatusAnd"],[3,"ParseError"],[4,"Category"],[4,"Round"],[8,"Semantics"],[3,"IeeeFloat"],[3,"X87DoubleExtendedS"],[3,"DoubleFloat"],[8,"Float"],[8,"FloatConvert"],[3,"Status"]]};
searchIndex["rustc_asan"] = {"doc":"","items":[],"paths":[]};
searchIndex["rustc_back"] = {"doc":"Some stuff used by rustc that doesn't have many dependencies","items":[[4,"LinkerFlavor","rustc_back","",null,null],[13,"Em","","",0,null],[13,"Gcc","","",0,null],[13,"Ld","","",0,null],[13,"Msvc","","",0,null],[4,"PanicStrategy","","",null,null],[13,"Unwind","","",1,null],[13,"Abort","","",1,null],[4,"RelroLevel","","",null,null],[13,"Full","","",2,null],[13,"Partial","","",2,null],[13,"Off","","",2,null],[0,"tempdir","","",null,null],[3,"TempDir","rustc_back::tempdir","A wrapper for a path to temporary directory implementing automatic scope-based deletion.",null,null],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory will be automatically deleted once the returned wrapper is destroyed.",3,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix `prefix`. The directory will be automatically deleted once the returned wrapper is destroyed.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper. This discards the wrapper so that the automatic deletion of the temporary directory is prevented.",3,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",3,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[0,"target","rustc_back","Flexible target specification.",null,null],[3,"Target","rustc_back::target","Everything `rustc` knows about how to compile for a specific target.",null,null],[12,"llvm_target","","Target triple to pass to LLVM.",4,null],[12,"target_endian","","String to use as the `target_endian` `cfg` variable.",4,null],[12,"target_pointer_width","","String to use as the `target_pointer_width` `cfg` variable.",4,null],[12,"target_c_int_width","","Width of c_int type",4,null],[12,"target_os","","OS name to use for conditional compilation.",4,null],[12,"target_env","","Environment name to use for conditional compilation.",4,null],[12,"target_vendor","","Vendor name to use for conditional compilation.",4,null],[12,"arch","","Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", and \"powerpc64\".",4,null],[12,"data_layout","","Data layout to pass to LLVM.",4,null],[12,"linker_flavor","","Linker flavor",4,null],[12,"options","","Optional settings with defaults.",4,null],[3,"TargetOptions","","Optional aspects of a target specification.",null,null],[12,"is_builtin","","Whether the target is built-in or loaded from a custom target specification.",5,null],[12,"linker","","Linker to invoke. Defaults to \"cc\".",5,null],[12,"pre_link_args","","Linker arguments that are unconditionally passed before any user-defined libraries.",5,null],[12,"pre_link_objects_exe","","Objects to link before all others, always found within the sysroot folder.",5,null],[12,"pre_link_objects_dll","","",5,null],[12,"late_link_args","","Linker arguments that are unconditionally passed after any user-defined but before post_link_objects.  Standard platform libraries that should be always be linked to, usually go here.",5,null],[12,"post_link_objects","","Objects to link after all others, always found within the sysroot folder.",5,null],[12,"post_link_args","","Linker arguments that are unconditionally passed after any user-defined libraries.",5,null],[12,"link_env","","Environment variables to be set before invoking the linker.",5,null],[12,"asm_args","","Extra arguments to pass to the external assembler (when used)",5,null],[12,"cpu","","Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults to \"generic\".",5,null],[12,"features","","Default target features to pass to LLVM. These features will always be passed, and cannot be disabled even via `-C`. Corresponds to `llc -mattr=$features`.",5,null],[12,"dynamic_linking","","Whether dynamic linking is available on this target. Defaults to false.",5,null],[12,"executables","","Whether executables are available on this target. iOS, for example, only allows static libraries. Defaults to false.",5,null],[12,"relocation_model","","Relocation model to use in object file. Corresponds to `llc -relocation-model=$relocation_model`. Defaults to \"pic\".",5,null],[12,"code_model","","Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to \"default\".",5,null],[12,"disable_redzone","","Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.",5,null],[12,"eliminate_frame_pointer","","Eliminate frame pointers from stack frames if possible. Defaults to true.",5,null],[12,"function_sections","","Emit each function in its own section. Defaults to true.",5,null],[12,"dll_prefix","","String to prepend to the name of every dynamic library. Defaults to \"lib\".",5,null],[12,"dll_suffix","","String to append to the name of every dynamic library. Defaults to \".so\".",5,null],[12,"exe_suffix","","String to append to the name of every executable.",5,null],[12,"staticlib_prefix","","String to prepend to the name of every static library. Defaults to \"lib\".",5,null],[12,"staticlib_suffix","","String to append to the name of every static library. Defaults to \".a\".",5,null],[12,"target_family","","OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".",5,null],[12,"is_like_openbsd","","Whether the target toolchain is like OpenBSD's. Only useful for compiling against OpenBSD, for configuring abi when returning a struct.",5,null],[12,"is_like_osx","","Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS, in particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.",5,null],[12,"is_like_solaris","","Whether the target toolchain is like Solaris's. Only useful for compiling against Illumos/Solaris, as they have a different set of linker flags. Defaults to false.",5,null],[12,"is_like_windows","","Whether the target toolchain is like Windows'. Only useful for compiling against Windows, only really used for figuring out how to find libraries, since Windows uses its own library naming convention. Defaults to false.",5,null],[12,"is_like_msvc","","",5,null],[12,"is_like_android","","Whether the target toolchain is like Android's. Only useful for compiling against Android. Defaults to false.",5,null],[12,"is_like_emscripten","","Whether the target toolchain is like Emscripten's. Only useful for compiling with Emscripten toolchain. Defaults to false.",5,null],[12,"linker_is_gnu","","Whether the linker support GNU-like arguments such as -O. Defaults to false.",5,null],[12,"allows_weak_linkage","","The MinGW toolchain has a known issue that prevents it from correctly handling COFF object files with more than 2^15 sections. Since each weak symbol needs its own COMDAT section, weak linkage implies a large number sections that easily exceeds the given limit for larger codebases. Consequently we want a way to disallow weak linkage on some platforms.",5,null],[12,"has_rpath","","Whether the linker support rpaths or not. Defaults to false.",5,null],[12,"no_default_libraries","","Whether to disable linking to the default libraries, typically corresponds to `-nodefaultlibs`. Defaults to true.",5,null],[12,"position_independent_executables","","Dynamically linked executables can be compiled as position independent if the default relocation model of position independent code is not changed. This is a requirement to take advantage of ASLR, as otherwise the functions in the executable are not randomized and can be used during an exploit of a vulnerability in any code.",5,null],[12,"relro_level","","Either partial, full, or off. Full RELRO makes the dynamic linker resolve all symbols at startup and marks the GOT read-only before starting the program, preventing overwriting the GOT.",5,null],[12,"archive_format","","Format that archives should be emitted in. This affects whether we use LLVM to assemble an archive or fall back to the system linker, and currently only \"gnu\" is used to fall into LLVM. Unknown strings cause the system linker to be used.",5,null],[12,"allow_asm","","Is asm!() allowed? Defaults to true.",5,null],[12,"custom_unwind_resume","","Whether the target uses a custom unwind resumption routine. By default LLVM lowers `resume` instructions into calls to `_Unwind_Resume` defined in libgcc.  If this option is enabled, the target must provide `eh_unwind_resume` lang item.",5,null],[12,"exe_allocation_crate","","If necessary, a different crate to link exe allocators by default",5,null],[12,"has_elf_tls","","Flag indicating whether ELF TLS (e.g. #[thread_local]) is available for this target.",5,null],[12,"obj_is_bitcode","","",5,null],[12,"no_integrated_as","","",5,null],[12,"min_atomic_width","","Don't use this field; instead use the `.min_atomic_width()` method.",5,null],[12,"max_atomic_width","","Don't use this field; instead use the `.max_atomic_width()` method.",5,null],[12,"panic_strategy","","Panic strategy: \"unwind\" or \"abort\"",5,null],[12,"abi_blacklist","","A blacklist of ABIs unsupported by the current target. Note that generic ABIs are considered to be supported on all platforms and cannot be blacklisted.",5,null],[12,"crt_static_allows_dylibs","","Whether or not linking dylibs to a static CRT is allowed.",5,null],[12,"crt_static_default","","Whether or not the CRT is statically linked by default.",5,null],[12,"crt_static_respected","","Whether or not crt-static is respected by the compiler (or is a no-op).",5,null],[12,"stack_probes","","Whether or not stack probes (__rust_probestack) are enabled",5,null],[12,"min_global_align","","The minimum alignment for global symbols.",5,null],[12,"default_codegen_units","","Default number of codegen units to use in debug mode",5,null],[5,"get_targets","","",null,{"inputs":[],"output":{"name":"box"}}],[6,"LinkArgs","","",null,null],[6,"TargetResult","","",null,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"targetoptions"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"targetoptions"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"targetoptions"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for compilation, will certainly not work.",5,{"inputs":[],"output":{"name":"targetoptions"}}],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",4,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"abi"}}],[11,"min_atomic_width","","Minimum integer size in bits that this target can perform atomic operations on.",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"max_atomic_width","","Maximum integer size in bits that this target can perform atomic operations on.",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_abi_supported","","",4,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"from_json","","Load a target descriptor from a JSON object.",4,{"inputs":[{"name":"json"}],"output":{"name":"targetresult"}}],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target triple. Note that it could also just be a bare filename already, so also check for that. If one of the hardcoded targets we know about, just return it directly.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_json","","",4,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[0,"slice","rustc_back","",null,null],[5,"ref_slice","rustc_back::slice","",null,null],[5,"mut_ref_slice","","",null,null],[0,"dynamic_lib","rustc_back","Dynamic library facilities.",null,null],[3,"DynamicLibrary","rustc_back::dynamic_lib","",null,null],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"open","","Lazily open a dynamic library. When passed None it gives a handle to the calling process",6,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"envvar","","Returns the environment variable for this process's dynamic library search path",6,{"inputs":[],"output":{"name":"str"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","rustc_back","",0,{"inputs":[{"name":"self"}],"output":{"name":"linkerflavor"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"linkerflavor"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"linkerflavor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"linkerflavor"}],"output":{"name":"option"}}],[11,"hash","","",0,null],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"one_of","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"desc","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_json","","",0,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"panicstrategy"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"desc","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_json","","",1,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"relrolevel"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"relrolevel"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"desc","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_json","","",2,{"inputs":[{"name":"self"}],"output":{"name":"json"}}]],"paths":[[4,"LinkerFlavor"],[4,"PanicStrategy"],[4,"RelroLevel"],[3,"TempDir"],[3,"Target"],[3,"TargetOptions"],[3,"DynamicLibrary"]]};
searchIndex["rustc_borrowck"] = {"doc":"","items":[[5,"check_crate","rustc_borrowck","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"build_borrowck_dataflow_data_for_fn","","Accessor for introspective clients inspecting `AnalysisData` and the `BorrowckCtxt` itself , e.g. the flowgraph visualizer.",null,null],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[0,"graphviz","","This module provides linkage between rustc::middle::graph and libgraphviz traits, specialized to attaching borrowck analysis data to rendered labels.",null,null],[6,"Node","rustc_borrowck::graphviz","",null,null],[6,"Edge","","",null,null],[3,"DataflowLabeller","","",null,null],[12,"inner","","",0,null],[12,"variants","","",0,null],[12,"borrowck_ctxt","","",0,null],[12,"analysis_data","","",0,null],[4,"Variant","","",null,null],[13,"Loans","","",1,null],[13,"Moves","","",1,null],[13,"Assigns","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"short_name","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"graph_id","","",0,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node_id","","",0,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"id"}}],[11,"node_label","","",0,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"labeltext"}}],[11,"edge_label","","",0,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"labeltext"}}],[11,"nodes","","",0,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"edges","","",0,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[11,"source","","",0,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}],[11,"target","","",0,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}]],"paths":[[3,"DataflowLabeller"],[4,"Variant"]]};
searchIndex["rustc_const_eval"] = {"doc":"constant evaluation on the HIR and code to validate patterns/matches","items":[[3,"ConstContext","rustc_const_eval","",null,null],[5,"lookup_const_by_id","","`DefId``Substs`",null,{"inputs":[{"name":"tyctxt"},{"name":"paramenvand"}],"output":{"name":"option"}}],[5,"compare_const_vals","","",null,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"constval"},{"name":"constval"}],"output":{"name":"result"}}],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[11,"new","","",0,{"inputs":[{"name":"tyctxt"},{"name":"paramenvand"},{"name":"typecktables"}],"output":{"name":"self"}}],[11,"eval","","Evaluate a constant expression in a context where the expression isn't guaranteed to be evaluable.",0,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"evalresult"}}],[11,"compare_lit_exprs","","",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"expr"},{"name":"expr"}],"output":{"name":"result"}}],[0,"check_match","","",null,null],[5,"check_crate","rustc_const_eval::check_match","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"pattern","rustc_const_eval","",null,null],[3,"FieldPattern","rustc_const_eval::pattern","",null,null],[12,"field","","",1,null],[12,"pattern","","",1,null],[3,"Pattern","","",null,null],[12,"ty","","",2,null],[12,"span","","",2,null],[12,"kind","","",2,null],[3,"PatternContext","","",null,null],[12,"tcx","","",3,null],[12,"param_env","","",3,null],[12,"tables","","",3,null],[12,"substs","","",3,null],[12,"errors","","",3,null],[4,"PatternError","","",null,null],[13,"StaticInPattern","","",4,null],[13,"ConstEval","","",4,null],[4,"BindingMode","","",null,null],[13,"ByValue","","",5,null],[13,"ByRef","","",5,null],[4,"PatternKind","","",null,null],[13,"Wild","","",6,null],[13,"Binding","","x, ref x, x @ P, etc",6,null],[12,"mutability","rustc_const_eval::pattern::PatternKind","",6,null],[12,"name","","",6,null],[12,"mode","","",6,null],[12,"var","","",6,null],[12,"ty","","",6,null],[12,"subpattern","","",6,null],[13,"Variant","rustc_const_eval::pattern","Foo(...) or Foo{...} or Foo, where `Foo` is a variant name from an adt with >1 variants",6,null],[12,"adt_def","rustc_const_eval::pattern::PatternKind","",6,null],[12,"substs","","",6,null],[12,"variant_index","","",6,null],[12,"subpatterns","","",6,null],[13,"Leaf","rustc_const_eval::pattern","(...), Foo(...), Foo{...}, or Foo, where `Foo` is a variant name from an adt with 1 variant",6,null],[12,"subpatterns","rustc_const_eval::pattern::PatternKind","",6,null],[13,"Deref","rustc_const_eval::pattern","box P, &P, &mut P, etc",6,null],[12,"subpattern","rustc_const_eval::pattern::PatternKind","",6,null],[13,"Constant","rustc_const_eval::pattern","",6,null],[12,"value","rustc_const_eval::pattern::PatternKind","",6,null],[13,"Range","rustc_const_eval::pattern","",6,null],[12,"lo","rustc_const_eval::pattern::PatternKind","",6,null],[12,"hi","","",6,null],[12,"end","","",6,null],[13,"Slice","rustc_const_eval::pattern","matches against a slice, checking the length and extracting elements",6,null],[12,"prefix","rustc_const_eval::pattern::PatternKind","",6,null],[12,"slice","","",6,null],[12,"suffix","","",6,null],[13,"Array","rustc_const_eval::pattern","fixed match against an array, irrefutable",6,null],[12,"prefix","rustc_const_eval::pattern::PatternKind","",6,null],[12,"slice","","",6,null],[12,"suffix","","",6,null],[8,"PatternFoldable","rustc_const_eval::pattern","",null,null],[11,"fold_with","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"super_fold_with","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[8,"PatternFolder","","",null,null],[11,"fold_pattern","","",8,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"pattern"}}],[11,"fold_pattern_kind","","",8,{"inputs":[{"name":"self"},{"name":"patternkind"}],"output":{"name":"patternkind"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"patternerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fieldpattern"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"patternkind"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_hir","","",2,{"inputs":[{"name":"tyctxt"},{"name":"paramenvand"},{"name":"typecktables"},{"name":"pat"}],"output":{"name":"self"}}],[11,"new","","",3,{"inputs":[{"name":"tyctxt"},{"name":"paramenvand"},{"name":"typecktables"}],"output":{"name":"self"}}],[11,"lower_pattern","","",3,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"pattern"}}],[11,"super_fold_with","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_fold_with","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_fold_with","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_fold_with","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[17,"DIAGNOSTICS","rustc_const_eval","",null,null]],"paths":[[3,"ConstContext"],[3,"FieldPattern"],[3,"Pattern"],[3,"PatternContext"],[4,"PatternError"],[4,"BindingMode"],[4,"PatternKind"],[8,"PatternFoldable"],[8,"PatternFolder"]]};
searchIndex["rustc_const_math"] = {"doc":"Rusty Mathematics","items":[[3,"ConstFloat","rustc_const_math","",null,null],[12,"ty","","",0,null],[12,"bits","","",0,null],[4,"ConstInt","","",null,null],[13,"I8","","",1,null],[13,"I16","","",1,null],[13,"I32","","",1,null],[13,"I64","","",1,null],[13,"I128","","",1,null],[13,"Isize","","",1,null],[13,"U8","","",1,null],[13,"U16","","",1,null],[13,"U32","","",1,null],[13,"U64","","",1,null],[13,"U128","","",1,null],[13,"Usize","","",1,null],[4,"ConstUsize","","Depending on the target only one variant is ever used in a compilation. Anything else is an error. This invariant is checked at several locations",null,null],[13,"Us16","","",2,null],[13,"Us32","","",2,null],[13,"Us64","","",2,null],[4,"ConstIsize","","Depending on the target only one variant is ever used in a compilation. Anything else is an error. This invariant is checked at several locations",null,null],[13,"Is16","","",3,null],[13,"Is32","","",3,null],[13,"Is64","","",3,null],[4,"ConstMathErr","","",null,null],[13,"NotInRange","","",4,null],[13,"CmpBetweenUnequalTypes","","",4,null],[13,"UnequalTypes","","",4,null],[13,"Overflow","","",4,null],[13,"ShiftNegative","","",4,null],[13,"DivisionByZero","","",4,null],[13,"RemainderByZero","","",4,null],[13,"UnsignedNegation","","",4,null],[13,"ULitOutOfRange","","",4,null],[13,"LitOutOfRange","","",4,null],[4,"Op","","",null,null],[13,"Add","","",5,null],[13,"Sub","","",5,null],[13,"Mul","","",5,null],[13,"Div","","",5,null],[13,"Rem","","",5,null],[13,"Shr","","",5,null],[13,"Shl","","",5,null],[13,"Neg","","",5,null],[13,"BitAnd","","",5,null],[13,"BitOr","","",5,null],[13,"BitXor","","",5,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"constfloat"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"constfloat"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"constfloat"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"description","","Description of the type, not the value",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"try_cmp","","Compares the values if they are of the same type",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"from_i128","","",0,{"inputs":[{"name":"i128"},{"name":"floatty"}],"output":{"name":"self"}}],[11,"from_u128","","",0,{"inputs":[{"name":"u128"},{"name":"floatty"}],"output":{"name":"self"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"},{"name":"floatty"}],"output":{"name":"result"}}],[11,"to_i128","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"to_u128","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"convert","","",0,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"new_unsigned","","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",1,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"new_signed","","Creates a new signed ConstInt with matching type while also checking that overflow does not happen.",1,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"option"}}],[11,"new_unsigned_truncating","","Creates a new unsigned ConstInt with matching type.",1,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"constint"}}],[11,"new_signed_truncating","","Creates a new signed ConstInt with matching type.",1,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"constint"}}],[11,"description","","Description of the type, not the value",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_u128_unchecked","","Erases the type and returns a u128. This is not the same as `-5i8 as u128` but as `-5i8 as i128 as u128`",1,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u32","","Converts the value to a `u32` if it's in the range 0...std::u32::MAX",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","Converts the value to a `u64` if it's in the range 0...std::u64::MAX",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u128","","Converts the value to a `u128` if it's in the range 0...std::u128::MAX",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_negative","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"int_type","","",1,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"shl","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"shr","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"not","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"constusize"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","",2,{"inputs":[{"name":"u64"},{"name":"uintty"}],"output":{"name":"result"}}],[11,"new_truncating","","",2,{"inputs":[{"name":"u128"},{"name":"uintty"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"constisize"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"constisize"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"constisize"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_i64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"new","","",3,{"inputs":[{"name":"i64"},{"name":"intty"}],"output":{"name":"result"}}],[11,"new_truncating","","",3,{"inputs":[{"name":"i128"},{"name":"intty"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"constmatherr"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"constmatherr"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"constmatherr"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"ConstFloat"],[4,"ConstInt"],[4,"ConstUsize"],[4,"ConstIsize"],[4,"ConstMathErr"],[4,"Op"]]};
searchIndex["rustc_cratesio_shim"] = {"doc":"","items":[],"paths":[]};
searchIndex["rustc_data_structures"] = {"doc":"Various data structures used by the Rust compiler. The intention is that code in here should be not be specific to rustc, so that it can be easily unit tested and so forth.","items":[[8,"ToHex","rustc_data_structures","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"array_vec","","A stack-allocated vector, allowing storage of N elements on the stack.",null,null],[3,"ArrayVec","rustc_data_structures::array_vec","",null,null],[3,"Iter","","",null,null],[3,"Drain","","",null,null],[8,"Array","","",null,null],[16,"Element","","",1,null],[16,"PartialStorage","","",1,null],[18,"LEN","","",1,null],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_len","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"push","","Panics when the stack vector is full.",2,null],[11,"pop","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drain","","",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",2,null],[0,"accumulate_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"IntoIter","rustc_data_structures::accumulate_vec","",null,null],[4,"AccumulateVec","","",null,null],[13,"Array","","",5,null],[13,"Heap","","",5,null],[4,"Drain","","",null,null],[13,"Array","","",6,null],[13,"Heap","","",6,null],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"accumulatevec"}}],[11,"one","","",5,null],[11,"many","","",5,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pop","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drain","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"accumulatevec"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"into_iter","","",5,null],[11,"from","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"accumulatevec"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"accumulatevec"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"small_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"SmallVec","rustc_data_structures::small_vec","",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"one","","",8,null],[11,"many","","",8,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"expect_one","","",8,null],[11,"push","","Will reallocate onto the heap if needed.",8,null],[11,"reserve","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_len","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"insert","","",8,null],[11,"truncate","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"deref","","",8,null],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"accumulatevec"}}],[11,"from_iter","","",8,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"smallvec"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base_n","rustc_data_structures","",null,null],[5,"push_str","rustc_data_structures::base_n","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"string"}],"output":null}],[5,"encode","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"string"}}],[17,"MAX_BASE","","",null,null],[17,"ALPHANUMERIC_ONLY","","",null,null],[0,"bitslice","rustc_data_structures","",null,null],[3,"Intersect","rustc_data_structures::bitslice","",null,null],[3,"Union","","",null,null],[3,"Subtract","","",null,null],[5,"bits_to_string","","",null,null],[5,"bitwise","","",null,null],[6,"Word","","",null,null],[8,"BitSlice","","`BitSlice` provides helper methods for treating a `[Word]` as a bitvector.",null,null],[10,"clear_bit","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set_bit","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_bit","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"BitwiseOperator","","",null,null],[10,"join","","Applies some bit-operation pointwise to each of the bits in the two inputs.",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"bitvec","rustc_data_structures","",null,null],[3,"BitVector","rustc_data_structures::bitvec","A very simple BitVector type.",null,null],[3,"BitVectorIter","","",null,null],[3,"BitMatrix","","A \"bit matrix\" is basically a matrix of booleans represented as one gigantic bitvector. In other words, it is as if you have `rows` bitvectors, each of length `columns`.",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bitvector"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"new","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"bitvector"}}],[11,"clear","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"count","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"insert","","Returns true if the bit has changed.",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"insert_all","","",14,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"grow","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"iter","","Iterates over indexes of set bits in a sorted order",14,{"inputs":[{"name":"self"}],"output":{"name":"bitvectoriter"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","",14,{"inputs":[{"name":"i"}],"output":{"name":"bitvector"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bitmatrix"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",16,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"bitmatrix"}}],[11,"add","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains","","Do the bits from `source` contain `target`?",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"intersection","","Returns those indices that are reachable from both `a` and `b`. This is an O(n) operation where `n` is the number of elements (somewhat independent from the actual size of the intersection, in particular).",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"merge","","Add the bits from `read` to the bits from `write`, return true if anything changed.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"iter","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bitvectoriter"}}],[0,"blake2b","rustc_data_structures","",null,null],[3,"Blake2bHasher","rustc_data_structures::blake2b","",null,null],[5,"blake2b","","",null,null],[11,"write","","",17,null],[11,"finish","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","",17,null],[11,"finalize","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"graph","rustc_data_structures","A graph module for use in dataflow, region resolution, and elsewhere.",null,null],[3,"Graph","rustc_data_structures::graph","",null,null],[3,"Node","","",null,null],[12,"data","","",18,null],[3,"Edge","","",null,null],[12,"data","","",19,null],[3,"NodeIndex","","",null,null],[12,"0","","",20,null],[3,"EdgeIndex","","",null,null],[12,"0","","",21,null],[3,"Direction","","",null,null],[3,"EnumeratedNodes","","",null,null],[3,"EnumeratedEdges","","",null,null],[3,"AdjacentEdges","","",null,null],[3,"AdjacentTargets","","",null,null],[3,"AdjacentSources","","",null,null],[3,"DepthFirstTraversal","","",null,null],[17,"INVALID_EDGE_INDEX","","",null,null],[17,"OUTGOING","","",null,null],[17,"INCOMING","","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reverse","","",18,null],[11,"reverse","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"graph"}}],[11,"with_capacity","","",23,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"graph"}}],[11,"all_nodes","","",23,null],[11,"len_nodes","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"all_edges","","",23,null],[11,"len_edges","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_node_index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"add_node","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"mut_node_data","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"node_data","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"node","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"node"}}],[11,"next_edge_index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"add_edge","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"edge","","",23,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[11,"enumerated_nodes","","",23,{"inputs":[{"name":"self"}],"output":{"name":"enumeratednodes"}}],[11,"enumerated_edges","","",23,{"inputs":[{"name":"self"}],"output":{"name":"enumeratededges"}}],[11,"each_node","","Iterates over all edges defined in the graph.",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_edge","","Iterates over all edges defined in the graph",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"outgoing_edges","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentedges"}}],[11,"incoming_edges","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentedges"}}],[11,"adjacent_edges","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"adjacentedges"}}],[11,"successor_nodes","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacenttargets"}}],[11,"predecessor_nodes","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentsources"}}],[11,"depth_traverse","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"depthfirsttraversal"}}],[11,"nodes_in_postorder","","",23,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_start_node","","",29,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"source","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"target","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"source_or_target","","",19,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"nodeindex"}}],[0,"indexed_set","rustc_data_structures","",null,null],[3,"IdxSetBuf","rustc_data_structures::indexed_set","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[3,"IdxSet","","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[3,"Elems","","",null,null],[3,"Iter","","",null,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"idxsetbuf"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"idxsetbuf"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_filled","","Creates set holding every element whose index falls in range 0..universe_size.",30,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_empty","","Creates set holding no elements.",30,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"to_owned","","",31,{"inputs":[{"name":"self"}],"output":{"name":"idxsetbuf"}}],[11,"clear","","Removes all elements",31,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Removes `elem` from the set `self`; returns true iff this changed `self`.",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"add","","Adds `elem` to the set `self`; returns true iff this changed `self`.",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"range","","",31,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"range_mut","","",31,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"contains","","Returns true iff set `self` contains `elem`.",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"words","","",31,null],[11,"words_mut","","",31,null],[11,"clone_from","","",31,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":null}],[11,"union","","",31,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[11,"subtract","","",31,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[11,"intersect","","",31,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[11,"iter","","",31,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"each_bit","","Calls `f` on each index value held in this set, up to the bound `max_bits` on the size of universe of indexes.",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":null}],[11,"reset_to_empty","","Removes all elements from this set.",31,{"inputs":[{"name":"self"}],"output":null}],[11,"elems","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"elems"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"indexed_vec","rustc_data_structures","",null,null],[3,"IndexVec","rustc_data_structures::indexed_vec","",null,null],[12,"raw","","",34,null],[3,"IntoIdx","","",null,null],[6,"Enumerated","","",null,null],[8,"Idx","","Represents some newtyped `usize` wrapper.",null,null],[10,"new","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"indexvec"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"indexvec"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",34,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_elem","","",34,{"inputs":[{"name":"t"},{"name":"indexvec"}],"output":{"name":"self"}}],[11,"from_elem_n","","",34,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i"}}],[11,"len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter_enumerated","","",34,{"inputs":[{"name":"self"}],"output":{"name":"enumerated"}}],[11,"iter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_enumerated","","",34,{"inputs":[{"name":"self"}],"output":{"name":"enumerated"}}],[11,"indices","","",34,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"iter_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"iter_enumerated_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"enumerated"}}],[11,"drain","","",34,null],[11,"drain_enumerated","","",34,null],[11,"last","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shrink_to_fit","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"swap","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"truncate","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get","","",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"resize","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"binary_search","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"index","","",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",34,{"inputs":[{"name":"self"},{"name":"j"}],"output":null}],[11,"from_iter","","",34,{"inputs":[{"name":"j"}],"output":{"name":"self"}}],[11,"into_iter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"call_once","","",36,null],[11,"call_mut","","",36,null],[11,"call_once","","",36,null],[11,"call_mut","","",36,null],[0,"obligation_forest","rustc_data_structures","The `ObligationForest` is a utility data structure used in trait matching to track the set of outstanding obligations (those not yet resolved to success or error). It also tracks the \"backtrace\" of each pending obligation (why we are trying to figure this out in the first place). See README.md for a general overview of how to use this class.",null,null],[3,"ObligationForest","rustc_data_structures::obligation_forest","",null,null],[3,"Outcome","","",null,null],[12,"completed","","Obligations that were completely evaluated, including all (transitive) subobligations.",37,null],[12,"errors","","Backtrace of obligations that were found to be in error.",37,null],[12,"stalled","","If true, then we saw no successful obligations, which means there is no point in further iteration. This is based on the assumption that when trait matching returns `Err` or `Ok(None)`, those results do not affect environmental inference state. (Note that if we invoke `process_obligations` with no pending obligations, stalled will be true.)",37,null],[3,"Error","","",null,null],[12,"error","","",38,null],[12,"backtrace","","",38,null],[8,"ForestObligation","","",null,null],[16,"Predicate","","",39,null],[10,"as_predicate","","",39,null],[8,"ObligationProcessor","","",null,null],[16,"Obligation","","",40,null],[16,"Error","","",40,null],[10,"process_obligation","","",40,null],[10,"process_backedge","","As we do the cycle check, we invoke this callback when we encounter an actual cycle. `cycle` is an iterator that starts at the start of the cycle in the stack and walks toward the top.",40,{"inputs":[{"name":"self"},{"name":"i"},{"name":"phantomdata"}],"output":null}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"new","","",41,{"inputs":[],"output":{"name":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not yet been fully resolved.",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"register_obligation","","Registers an obligation",41,{"inputs":[{"name":"self"},{"name":"o"}],"output":null}],[11,"to_errors","","Convert all remaining obligations to the given error.",41,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"vec"}}],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",41,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"process_obligations","","Perform a pass through the obligation list. This must be called in a loop until `outcome.stalled` is false.",41,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"outcome"}}],[0,"sip128","rustc_data_structures","This is a copy of `core::hash::sip` adapted to providing 128 bit hashes.",null,null],[3,"SipHasher128","rustc_data_structures::sip128","",null,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"siphasher128"}}],[11,"new_with_keys","","",42,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher128"}}],[11,"finish128","","",42,null],[11,"write_u8","","",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",42,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",42,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","",42,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","",42,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","",42,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_isize","","",42,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"write","","",42,null],[11,"finish","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"snapshot_map","rustc_data_structures","",null,null],[3,"SnapshotMap","rustc_data_structures::snapshot_map","",null,null],[3,"Snapshot","","",null,null],[11,"new","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",43,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","",43,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"get","","",43,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"snapshot","","",43,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"commit","","",43,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"partial_rollback","","",43,{"inputs":[{"name":"self"},{"name":"snapshot"},{"name":"f"}],"output":null}],[11,"rollback_to","","",43,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"index","","",43,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"v"}}],[0,"snapshot_vec","rustc_data_structures","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either to rollback to the start of the snapshot or commit those changes.",null,null],[3,"SnapshotVec","rustc_data_structures::snapshot_vec","",null,null],[3,"Snapshot","","",null,null],[4,"UndoLog","","",null,null],[13,"OpenSnapshot","","Indicates where a snapshot started.",44,null],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",44,null],[13,"NewElem","","New variable with given index was created.",44,null],[13,"SetElem","","Variable with given index was changed from the given value.",44,null],[13,"Other","","Extensible set of actions",44,null],[8,"SnapshotVecDelegate","","",null,null],[16,"Value","","",45,null],[16,"Undo","","",45,null],[10,"reverse","","",45,null],[11,"new","","",46,{"inputs":[],"output":{"name":"snapshotvec"}}],[11,"with_capacity","","",46,{"inputs":[{"name":"usize"}],"output":{"name":"snapshotvec"}}],[11,"record","","",46,null],[11,"len","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","",46,null],[11,"get","","",46,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone automatically, so you should be sure call `record()` with some sort of suitable undo action.",46,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if a snapshot is active.",46,null],[11,"start_snapshot","","",46,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"actions_since_snapshot","","",46,null],[11,"rollback_to","","",46,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",46,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"extend","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"stable_hasher","rustc_data_structures","",null,null],[3,"StableHasher","rustc_data_structures::stable_hasher","When hashing something that ends up affecting properties like symbol names. We want these symbol names to be calculated independent of other factors like what architecture you're compiling from.",null,null],[3,"StableVec","","A vector container that makes sure that its items are hashed in a stable order.",null,null],[5,"hash_stable_hashmap","","",null,{"inputs":[{"name":"hcx"},{"name":"stablehasher"},{"name":"hashmap"},{"name":"f"}],"output":null}],[8,"StableHasherResult","","",null,null],[10,"finish","","",47,{"inputs":[{"name":"stablehasher"}],"output":{"name":"self"}}],[8,"StableHashingContextProvider","","Something that can provide a stable hashing context.",null,null],[16,"ContextType","","",48,null],[10,"create_stable_hashing_context","","",48,null],[8,"HashStable","","Something that implements `HashStable<CTX>` can be hashed in a way that is stable across multiple compilation sessions.",null,null],[10,"hash_stable","","",49,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[8,"ToStableHashKey","","Implement this for types that can be turned into stable keys like, for example, for DefId that can be converted to a DefPathHash. This is used for bringing maps into a predictable order before hashing them.",null,null],[16,"KeyType","","",50,null],[10,"to_stable_hash_key","","",50,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",51,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"finalize","","",51,null],[11,"bytes_hashed","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"finish","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",51,null],[11,"write_u8","","",51,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",51,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",51,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",51,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_u128","","",51,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"write_usize","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","",51,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","",51,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","",51,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","",51,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_i128","","",51,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"write_isize","","",51,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"hash_stable","rustc_data_structures::indexed_vec","",34,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc_data_structures::indexed_set","",30,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[11,"new","rustc_data_structures::stable_hasher","",52,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"hash_stable","","",52,{"inputs":[{"name":"self"},{"name":"hcx"},{"name":"stablehasher"}],"output":null}],[0,"transitive_relation","rustc_data_structures","",null,null],[3,"TransitiveRelation","rustc_data_structures::transitive_relation","",null,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"transitiverelation"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"transitiverelation"}}],[11,"is_empty","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"maybe_map","","Applies the (partial) function to each edge and returns a new relation.  If `f` returns `None` for any end-point, returns `None`.",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"add","","Indicate that `a < b` (where `<` is this relation)",53,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"contains","","Check whether `a < target` (transitively)",53,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"less_than","","Returns a vector of all things less than `a`.",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"postdom_upper_bound","","Picks what I am referring to as the \"postdominating\" upper-bound for `a` and `b`. This is usually the least upper bound, but in cases where there is no single least upper bound, it is the \"mutual immediate postdominator\", if you imagine a graph where `a < b` means `a -> b`.",53,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",53,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"vec"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash_stable","","",53,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[0,"unify","rustc_data_structures","",null,null],[3,"VarValue","rustc_data_structures::unify","Value of a unification key. We implement Tarjan's union-find algorithm: when two keys are unified, one of them is converted into a \"redirect\" pointing at the other. These redirects form a DAG: the roots of the DAG (nodes that are not redirected) are each associated with a value of type `V` and a rank. The rank is used to keep the DAG relatively balanced, which helps keep the running time of the algorithm under control. For more information, see http://en.wikipedia.org/wiki/Disjoint-set_data_structure.",null,null],[3,"UnificationTable","","Table of unification keys and their values.",null,null],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes made during the snapshot may either be committed or rolled back.",null,null],[8,"UnifyKey","","This trait is implemented by any type that can serve as a type variable. We call such variables unification keys. For example, this trait is implemented by `IntVid`, which represents integral variables.",null,null],[16,"Value","","",54,null],[10,"index","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"from_index","","",54,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"tag","","",54,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[8,"Combine","","This trait is implemented for unify values that can be combined. This relation should be a monoid.",null,null],[10,"combine","","",55,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"varvalue"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"varvalue"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"varvalue"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",57,{"inputs":[],"output":{"name":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either rolled back or committed in a \"LIFO\" (stack) order.",57,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"rollback_to","","Reverses all changes since the last snapshot. Also removes any keys that have been created since then.",57,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",57,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"new_key","","",57,null],[11,"union","","",57,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"k"}}],[11,"find","","",57,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"find_value","","",57,null],[11,"unify_var_var","","",57,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"result"}}],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping relationships, if `a_id` already has a value, it must be the same as `b`.",57,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"has_value","","",57,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"probe","","",57,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"unsolved_variables","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"fx","rustc_data_structures","",null,null],[3,"FxHasher","rustc_data_structures::fx","A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn't quite as speedy as we want. In the compiler we're not really worried about DOS attempts, so we use a fast non-cryptographic hash.",null,null],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"fxhashmap"}}],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"fxhashset"}}],[6,"FxHashMap","","",null,null],[6,"FxHashSet","","",null,null],[11,"default","","",58,{"inputs":[],"output":{"name":"fxhasher"}}],[11,"write","","",58,null],[11,"write_u8","","",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",58,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",58,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",58,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"finish","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"tuple_slice","rustc_data_structures","",null,null],[8,"TupleSlice","rustc_data_structures::tuple_slice","Allows to view uniform tuples as slices",null,null],[10,"as_slice","","",59,null],[10,"as_mut_slice","","",59,null],[0,"veccell","rustc_data_structures","",null,null],[3,"VecCell","rustc_data_structures::veccell","",null,null],[11,"with_capacity","","",60,{"inputs":[{"name":"usize"}],"output":{"name":"veccell"}}],[11,"push","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"usize"}}],[11,"swap","","",60,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"control_flow_graph","rustc_data_structures","",null,null],[0,"dominators","rustc_data_structures::control_flow_graph","Algorithm citation: A Simple, Fast Dominance Algorithm. Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy Rice Computer Science TS-06-33870 https://www.cs.rice.edu/~keith/EMBED/dom.pdf",null,null],[3,"Dominators","rustc_data_structures::control_flow_graph::dominators","",null,null],[3,"Iter","","",null,null],[3,"DominatorTree","","",null,null],[5,"dominators","","",null,{"inputs":[{"name":"g"}],"output":{"name":"dominators"}}],[5,"dominators_given_rpo","","",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"dominators"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_reachable","","",61,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"immediate_dominator","","",61,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"node"}}],[11,"dominators","","",61,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"iter"}}],[11,"is_dominated_by","","",61,{"inputs":[{"name":"self"},{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"children","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"iterate","rustc_data_structures::control_flow_graph","",null,null],[5,"post_order_from","rustc_data_structures::control_flow_graph::iterate","",null,null],[5,"post_order_from_to","","",null,null],[5,"reverse_post_order","","",null,null],[8,"ControlFlowGraph","rustc_data_structures::control_flow_graph","",null,null],[16,"Node","","",64,null],[10,"num_nodes","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"start_node","","",64,null],[10,"predecessors","","",64,null],[10,"successors","","",64,null],[8,"GraphPredecessors","","",null,null],[16,"Item","","",65,null],[16,"Iter","","",65,null],[8,"GraphSuccessors","","",null,null],[16,"Item","","",66,null],[16,"Iter","","",66,null],[0,"flock","rustc_data_structures","Simple file-locking apis for each OS.",null,null],[3,"Lock","rustc_data_structures::flock","",null,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",67,{"inputs":[{"name":"path"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"panicking_new","","",67,{"inputs":[{"name":"path"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"lock"}}],[14,"newtype_index","rustc_data_structures","",null,null]],"paths":[[8,"ToHex"],[8,"Array"],[3,"ArrayVec"],[3,"Iter"],[3,"Drain"],[4,"AccumulateVec"],[4,"Drain"],[3,"IntoIter"],[3,"SmallVec"],[8,"BitSlice"],[8,"BitwiseOperator"],[3,"Intersect"],[3,"Union"],[3,"Subtract"],[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"Blake2bHasher"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"EnumeratedNodes"],[3,"EnumeratedEdges"],[3,"AdjacentEdges"],[3,"AdjacentTargets"],[3,"AdjacentSources"],[3,"DepthFirstTraversal"],[3,"IdxSetBuf"],[3,"IdxSet"],[3,"Elems"],[3,"Iter"],[3,"IndexVec"],[8,"Idx"],[3,"IntoIdx"],[3,"Outcome"],[3,"Error"],[8,"ForestObligation"],[8,"ObligationProcessor"],[3,"ObligationForest"],[3,"SipHasher128"],[3,"SnapshotMap"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[3,"SnapshotVec"],[8,"StableHasherResult"],[8,"StableHashingContextProvider"],[8,"HashStable"],[8,"ToStableHashKey"],[3,"StableHasher"],[3,"StableVec"],[3,"TransitiveRelation"],[8,"UnifyKey"],[8,"Combine"],[3,"VarValue"],[3,"UnificationTable"],[3,"FxHasher"],[8,"TupleSlice"],[3,"VecCell"],[3,"Dominators"],[3,"Iter"],[3,"DominatorTree"],[8,"ControlFlowGraph"],[8,"GraphPredecessors"],[8,"GraphSuccessors"],[3,"Lock"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["rustc_driver"] = {"doc":"The Rust compiler.","items":[[3,"DefaultTransCrate","rustc_driver","",null,null],[3,"RustcDefaultCalls","","",null,null],[4,"Compilation","","",null,null],[13,"Stop","","",0,null],[13,"Continue","","",0,null],[5,"abort_on_err","","",null,{"inputs":[{"name":"result"},{"name":"session"}],"output":{"name":"t"}}],[5,"run","","",null,{"inputs":[{"name":"f"}],"output":{"name":"isize"}}],[5,"run_compiler","","",null,null],[5,"enable_save_analysis","","",null,{"inputs":[{"name":"compilecontroller"}],"output":null}],[5,"version","","Prints version information",null,{"inputs":[{"name":"str"},{"name":"matches"}],"output":null}],[5,"handle_options","","Process command line options. Emits messages as appropriate. If compilation should continue, returns a getopts::Matches object parsed from args, otherwise returns None.",null,null],[5,"in_rustc_thread","","Runs `f` in a suitable thread for running `rustc`; returns a `Result` with either the return value of `f` or -- if a panic occurs -- the panic value.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"monitor","","Run a procedure which will detect panics in the compiler and print nicer error messages rather than just failing the test.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"diagnostics_registry","","",null,{"inputs":[],"output":{"name":"registry"}}],[5,"get_args","","",null,{"inputs":[],"output":{"name":"vec"}}],[5,"main","","",null,{"inputs":[],"output":null}],[0,"profile","","",null,null],[5,"begin","rustc_driver::profile","begin a profile thread, if not already running",null,{"inputs":[],"output":null}],[5,"dump","","dump files with profiling information to the given base path, and wait for this dump to complete.",null,{"inputs":[{"name":"string"}],"output":null}],[0,"trace","","",null,null],[3,"Query","rustc_driver::profile::trace","",null,null],[12,"span","","",1,null],[12,"msg","","",1,null],[3,"Rec","","Recursive trace structure",null,null],[12,"effect","","",2,null],[12,"start","","",2,null],[12,"dur_self","","",2,null],[12,"dur_total","","",2,null],[12,"extent","","",2,null],[3,"QueryMetric","","",null,null],[12,"count","","",3,null],[12,"dur_self","","",3,null],[12,"dur_total","","",3,null],[4,"Effect","","",null,null],[13,"QueryBegin","","",4,null],[13,"TimeBegin","","",4,null],[13,"TaskBegin","","",4,null],[4,"CacheCase","","",null,null],[13,"Hit","","",5,null],[13,"Miss","","",5,null],[5,"cons_of_query_msg","","",null,{"inputs":[{"name":"query"}],"output":{"name":"string"}}],[5,"cons_of_key","","",null,{"inputs":[{"name":"depnode"}],"output":{"name":"string"}}],[5,"html_of_effect","","",null,null],[5,"write_counts","","",null,{"inputs":[{"name":"file"},{"name":"hashmap"}],"output":null}],[5,"write_traces","","",null,{"inputs":[{"name":"file"},{"name":"file"},{"name":"vec"}],"output":null}],[5,"write_style","","",null,{"inputs":[{"name":"file"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"query"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"name":"bool"}}],[0,"driver","rustc_driver","",null,null],[3,"CompileController","rustc_driver::driver","CompileController is used to customize compilation, it allows compilation to be stopped and/or to call arbitrary code at various points in compilation. It also allows for various flags to be set to influence what information gets collected during compilation.",null,null],[12,"after_parse","","",6,null],[12,"after_expand","","",6,null],[12,"after_hir_lowering","","",6,null],[12,"after_analysis","","",6,null],[12,"after_llvm","","",6,null],[12,"compilation_done","","",6,null],[12,"make_glob_map","","",6,null],[12,"keep_ast","","",6,null],[12,"continue_parse_after_error","","",6,null],[3,"PhaseController","","",null,null],[12,"stop","","",7,null],[12,"run_callback_on_error","","",7,null],[12,"callback","","",7,null],[3,"CompileState","","State that is passed to a callback. What state is available depends on when during compilation the callback is made. See the various constructor methods (`state_*`) in the impl to see which data is provided for any given entry point.",null,null],[12,"input","","",8,null],[12,"session","","",8,null],[12,"krate","","",8,null],[12,"registry","","",8,null],[12,"cstore","","",8,null],[12,"crate_name","","",8,null],[12,"output_filenames","","",8,null],[12,"out_dir","","",8,null],[12,"out_file","","",8,null],[12,"arena","","",8,null],[12,"arenas","","",8,null],[12,"expanded_crate","","",8,null],[12,"hir_crate","","",8,null],[12,"hir_map","","",8,null],[12,"resolutions","","",8,null],[12,"analysis","","",8,null],[12,"tcx","","",8,null],[12,"trans","","",8,null],[3,"ExpansionResult","","",null,null],[12,"expanded_crate","","",9,null],[12,"defs","","",9,null],[12,"analysis","","",9,null],[12,"resolutions","","",9,null],[12,"hir_forest","","",9,null],[5,"compile_input","","",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"input"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"compilecontroller"}],"output":{"name":"compileresult"}}],[5,"anon_src","","The name used for source code that doesn't originate in a file (e.g. source from stdin or a string)",null,{"inputs":[],"output":{"name":"string"}}],[5,"source_name","","",null,{"inputs":[{"name":"input"}],"output":{"name":"string"}}],[5,"phase_1_parse_input","","",null,{"inputs":[{"name":"compilecontroller"},{"name":"session"},{"name":"input"}],"output":{"name":"presult"}}],[5,"phase_2_configure_and_expand","","Run the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins (including those from `addl_plugins`), syntax expansion, secondary `cfg` expansion, synthesis of a test harness if one is to be provided, injection of a dependency on the standard library and prelude, and name resolution.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crate"},{"name":"option"},{"name":"str"},{"name":"option"},{"name":"makeglobmap"},{"name":"f"}],"output":{"name":"result"}}],[5,"phase_3_run_analysis_passes","","Run the resolution, typechecking, region checking and other miscellaneous analysis passes on the crate. Return various structures carrying the results of the analysis.",null,{"inputs":[{"name":"session"},{"name":"cratestore"},{"name":"map"},{"name":"crateanalysis"},{"name":"resolutions"},{"name":"droplessarena"},{"name":"globalarenas"},{"name":"str"},{"name":"outputfilenames"},{"name":"f"}],"output":{"name":"result"}}],[5,"phase_4_translate_to_llvm","","Run the translation phase to LLVM, after which the AST and analysis can be discarded.",null,null],[5,"phase_5_run_llvm_passes","","Run LLVM itself, producing a bitcode file, assembly file or object file as a side effect.",null,null],[5,"collect_crate_types","","",null,null],[5,"compute_crate_disambiguator","","",null,{"inputs":[{"name":"session"}],"output":{"name":"string"}}],[5,"build_output_filenames","","",null,null],[11,"basic","","",6,{"inputs":[],"output":{"name":"compilecontroller"}}],[11,"basic","","",7,{"inputs":[],"output":{"name":"phasecontroller"}}],[0,"pretty","rustc_driver","The various pretty print routines.",null,null],[3,"ReplaceBodyWithLoop","rustc_driver::pretty","",null,null],[4,"PpSourceMode","","",null,null],[13,"PpmNormal","","",10,null],[13,"PpmEveryBodyLoops","","",10,null],[13,"PpmExpanded","","",10,null],[13,"PpmIdentified","","",10,null],[13,"PpmExpandedIdentified","","",10,null],[13,"PpmExpandedHygiene","","",10,null],[13,"PpmTyped","","",10,null],[4,"PpFlowGraphMode","","",null,null],[13,"Default","","",11,null],[13,"UnlabelledEdges","","Drops the labels from the edges in the flowgraph output. This is mostly for use in the --unpretty flowgraph run-make tests, since the labels are largely uninteresting in those cases and have become a pain to maintain.",11,null],[4,"PpMode","","",null,null],[13,"PpmSource","","",12,null],[13,"PpmHir","","",12,null],[13,"PpmFlowGraph","","",12,null],[13,"PpmMir","","",12,null],[13,"PpmMirCFG","","",12,null],[4,"UserIdentifiedItem","","",null,null],[13,"ItemViaNode","","",13,null],[13,"ItemViaPath","","",13,null],[5,"parse_pretty","","",null,null],[5,"fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"ppmode"}],"output":{"name":"crate"}}],[5,"print_after_parsing","","",null,{"inputs":[{"name":"session"},{"name":"input"},{"name":"crate"},{"name":"ppmode"},{"name":"option"}],"output":null}],[5,"print_after_hir_lowering","","",null,{"inputs":[{"name":"session"},{"name":"cratestore"},{"name":"map"},{"name":"crateanalysis"},{"name":"resolutions"},{"name":"input"},{"name":"crate"},{"name":"str"},{"name":"ppmode"},{"name":"droplessarena"},{"name":"globalarenas"},{"name":"outputfilenames"},{"name":"option"},{"name":"option"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ppsourcemode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ppsourcemode"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"ppflowgraphmode"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"ppflowgraphmode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"ppmode"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"ppmode"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"ppmode"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"needs_ast_map","","",12,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"needs_analysis","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"useridentifieditem"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"replacebodywithloop"}}],[11,"fold_item_kind","","",14,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_trait_item","","",14,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",14,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_block","","",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",14,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"target_features","rustc_driver","",null,null],[5,"add_configuration","rustc_driver::target_features","Add `target_feature = \"...\"` cfgs for a variety of platform specific features (SSE, NEON etc.).",null,{"inputs":[{"name":"crateconfig"},{"name":"session"}],"output":null}],[8,"CompilerCalls","rustc_driver","",null,null],[11,"early_callback","","",15,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"registry"},{"name":"erroroutputtype"}],"output":{"name":"compilation"}}],[11,"late_callback","","",15,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"session"},{"name":"cratestore"},{"name":"input"},{"name":"option"},{"name":"option"}],"output":{"name":"compilation"}}],[11,"some_input","","",15,null],[11,"no_input","","",15,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"option"},{"name":"option"},{"name":"registry"}],"output":{"name":"option"}}],[10,"build_controller","","",15,{"inputs":[{"name":"self"},{"name":"session"},{"name":"matches"}],"output":{"name":"compilecontroller"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compilation"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compilation"}],"output":{"name":"bool"}}],[11,"and_then","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"compilation"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"rustcdefaultcalls"}}],[11,"early_callback","","",16,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"registry"},{"name":"erroroutputtype"}],"output":{"name":"compilation"}}],[11,"no_input","","",16,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"option"},{"name":"option"},{"name":"registry"}],"output":{"name":"option"}}],[11,"late_callback","","",16,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"session"},{"name":"cratestore"},{"name":"input"},{"name":"option"},{"name":"option"}],"output":{"name":"compilation"}}],[11,"build_controller","","",16,{"inputs":[{"name":"self"},{"name":"session"},{"name":"matches"}],"output":{"name":"compilecontroller"}}],[11,"list_metadata","","",16,{"inputs":[{"name":"session"},{"name":"cratestore"},{"name":"matches"},{"name":"input"}],"output":{"name":"compilation"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"llvmtranscrate"}}],[11,"metadata_loader","","",17,{"inputs":[],"output":{"name":"box"}}],[11,"provide_local","","",17,null],[11,"provide_extern","","",17,null],[11,"trans_crate","","",17,null],[11,"join_trans","","",17,null],[11,"link_binary","","",17,null],[11,"dump_incremental_data","","",17,null]],"paths":[[4,"Compilation"],[3,"Query"],[3,"Rec"],[3,"QueryMetric"],[4,"Effect"],[4,"CacheCase"],[3,"CompileController"],[3,"PhaseController"],[3,"CompileState"],[3,"ExpansionResult"],[4,"PpSourceMode"],[4,"PpFlowGraphMode"],[4,"PpMode"],[4,"UserIdentifiedItem"],[3,"ReplaceBodyWithLoop"],[8,"CompilerCalls"],[3,"RustcDefaultCalls"],[3,"DefaultTransCrate"]]};
searchIndex["rustc_errors"] = {"doc":"","items":[[3,"CodeSuggestion","rustc_errors","",null,null],[12,"substitution_parts","","Each substitute can have multiple variants due to multiple applicable suggestions",0,null],[12,"msg","","",0,null],[12,"show_code_when_inline","","",0,null],[3,"Substitution","","See the docs on `CodeSuggestion::substitutions`",null,null],[12,"span","","",1,null],[12,"substitutions","","",1,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also used as the argument to panic at the moment, but that will eventually not be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug` or `.span_bug` rather than a failed assertion, etc.",null,null],[3,"Diagnostic","","",null,null],[12,"level","","",2,null],[12,"message","","",2,null],[12,"code","","",2,null],[12,"span","","",2,null],[12,"children","","",2,null],[12,"suggestions","","",2,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",3,null],[12,"message","","",3,null],[12,"span","","",3,null],[12,"render_span","","",3,null],[3,"DiagnosticStyledString","","",null,null],[12,"0","","",4,null],[3,"DiagnosticBuilder","","Used for emitting structured error messages and other diagnostic information.",null,null],[3,"Handler","","A handler deals with errors; certain errors (fatal, bug, unimpl) may cause immediate exit, others log errors for later reporting.",null,null],[12,"can_emit_warnings","","",5,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of the source code covered by the span.",6,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of hypothetical source code, where each `String` is spliced into the lines in place of the code covered by each span.",6,null],[4,"Level","","",null,null],[13,"Bug","","",7,null],[13,"Fatal","","",7,null],[13,"PhaseFatal","","",7,null],[13,"Error","","",7,null],[13,"Warning","","",7,null],[13,"Note","","",7,null],[13,"Help","","",7,null],[13,"Cancelled","","",7,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"subdiagnostic"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"diagnosticstyledstring"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"diagnosticstyledstring"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[],"output":{"name":"diagnosticstyledstring"}}],[11,"push_normal","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"push_highlighted","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"normal","","",4,{"inputs":[{"name":"s"}],"output":{"name":"diagnosticstyledstring"}}],[11,"highlighted","","",4,{"inputs":[{"name":"s"}],"output":{"name":"diagnosticstyledstring"}}],[11,"content","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","",2,{"inputs":[{"name":"level"},{"name":"str"}],"output":{"name":"self"}}],[11,"new_with_code","","",2,{"inputs":[{"name":"level"},{"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or canceled or it will panic when dropped). BEWARE: if this DiagnosticBuilder is an error, then creating it will bump the error count on the Handler and canceling it won't undo that. If you want to decrement the error count you should use `Handler::cancel`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"cancelled","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"self"}}],[11,"note_expected_found","","",2,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",2,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_trait_signature","","",2,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"name":"self"}}],[11,"note","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"highlighted_note","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"span_note","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion_short","","Prints out a message with a suggested edit of the code. If the suggestion is presented inline it will only show the text message and not the text.",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestions","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"vec"}],"output":{"name":"self"}}],[11,"set_span","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"message","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"styled_message","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"copy_details_not_message","","Used by a lint. Copies over all details but the \"main message\".",2,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":null}],[11,"message","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"styled_message","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"emit","","Emit the diagnostic.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"sub","","Convenience function for internal use, clients should use one of the span_* methods instead.",8,{"inputs":[{"name":"self"},{"name":"level"},{"name":"str"},{"name":"option"}],"output":{"name":"self"}}],[11,"delay_as_bug","","Delay emission of this diagnostic as a bug.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",8,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"self"}}],[11,"note_expected_found","","",8,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",8,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_note","","",8,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",8,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",8,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion_short","","",8,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestion","","",8,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestions","","",8,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"vec"}],"output":{"name":"self"}}],[11,"set_span","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",8,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"new","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",8,{"inputs":[{"name":"handler"},{"name":"level"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"new_with_code","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",8,{"inputs":[{"name":"handler"},{"name":"level"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"new_diagnostic","","Creates a new `DiagnosticBuilder` with an already constructed diagnostic.",8,{"inputs":[{"name":"handler"},{"name":"diagnostic"}],"output":{"name":"diagnosticbuilder"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[0,"emitter","","",null,null],[3,"EmitterWriter","rustc_errors::emitter","",null,null],[3,"BufferedWriter","","Buffered writer gives us a way on Unix to buffer up an entire error message before we output it.  This helps to prevent interleaving of multiple error messages when multiple compiler processes error simultaneously",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",9,null],[13,"Always","","",9,null],[13,"Never","","",9,null],[4,"Destination","","",null,null],[13,"Terminal","","",10,null],[13,"BufferedTerminal","","",10,null],[13,"Raw","","",10,null],[6,"BufferedStderr","","",null,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[17,"MAX_SUGGESTIONS","","maximum number of suggestions to be shown",null,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",11,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"emit","","",12,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"colorconfig"}],"output":{"name":"bool"}}],[11,"stderr","","",12,{"inputs":[{"name":"colorconfig"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",12,{"inputs":[{"name":"box"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"registry","rustc_errors","",null,null],[3,"Registry","rustc_errors::registry","",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"registry"}}],[11,"new","","",14,null],[11,"find_description","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[8,"CodeMapper","rustc_errors","",null,null],[10,"lookup_char_pos","","",15,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[10,"span_to_lines","","",15,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[10,"span_to_string","","",15,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[10,"span_to_filename","","",15,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[10,"merge_spans","","",15,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"option"}}],[10,"call_span_if_macro","","",15,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[10,"ensure_filemap_source_present","","",15,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"renderspan"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"renderspan"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"renderspan"}],"output":{"name":"bool"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"codesuggestion"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"substitution"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"substitution"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"substitution"}],"output":{"name":"bool"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"splice_lines","","Returns the assembled code suggestions and wether they should be shown with an underline.",0,{"inputs":[{"name":"self"},{"name":"codemapper"}],"output":{"name":"vec"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"with_tty_emitter","","",5,{"inputs":[{"name":"colorconfig"},{"name":"bool"},{"name":"bool"},{"name":"option"}],"output":{"name":"handler"}}],[11,"with_emitter","","",5,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"reset_err_count","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"struct_dummy","","",5,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err_with_code","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"cancel","","",5,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"span_fatal","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"mut_span_err","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_err_with_code","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_warn","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_warn_with_code","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_bug","","",5,null],[11,"delay_span_bug","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_bug_no_panic","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_note_without_error","","",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_note_diag","","",5,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_unimpl","","",5,null],[11,"fatal","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"warn","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"note_without_error","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"bug","","",5,null],[11,"unimpl","","",5,null],[11,"err_count","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"emit","","",5,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"level"}],"output":null}],[11,"emit_with_code","","",5,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"str"},{"name":"level"}],"output":null}],[11,"track_diagnostics","","",5,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_str","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"CodeSuggestion"],[3,"Substitution"],[3,"Diagnostic"],[3,"SubDiagnostic"],[3,"DiagnosticStyledString"],[3,"Handler"],[4,"RenderSpan"],[4,"Level"],[3,"DiagnosticBuilder"],[4,"ColorConfig"],[4,"Destination"],[8,"Emitter"],[3,"EmitterWriter"],[3,"BufferedWriter"],[3,"Registry"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["rustc_incremental"] = {"doc":"Support for serializing the dep-graph and reloading it.","items":[[5,"assert_dep_graph","rustc_incremental","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"load_dep_graph","","",null,{"inputs":[{"name":"session"}],"output":{"name":"previousdepgraph"}}],[5,"dep_graph_tcx_init","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"save_dep_graph","","",null,{"inputs":[{"name":"tyctxt"},{"name":"encodedmetadatahashes"},{"name":"svh"}],"output":null}],[5,"save_trans_partition","","",null,null],[5,"save_work_products","","",null,{"inputs":[{"name":"session"},{"name":"depgraph"}],"output":null}],[5,"in_incr_comp_dir","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"prepare_session_directory","","Allocates the private session directory. The boolean in the Ok() result indicates whether we should try loading a dep graph from the successfully initialized directory, or not. The post-condition of this fn is that we have a valid incremental compilation session directory, if the result is `Ok`. A valid session directory is one that contains a locked lock file. It may or may not contain a dep-graph and work products from a previous session. If the call fails, the fn may leave behind an invalid session directory. The garbage collection will take care of it.",null,{"inputs":[{"name":"session"},{"name":"str"},{"name":"str"}],"output":null}],[5,"finalize_session_directory","","This function finalizes and thus 'publishes' the session directory by renaming it to `s-{timestamp}-{svh}` and releasing the file lock. If there have been compilation errors, however, this function will just delete the presumably invalid session directory.",null,{"inputs":[{"name":"session"},{"name":"svh"}],"output":null}],[5,"delete_workproduct_files","","",null,{"inputs":[{"name":"session"},{"name":"workproduct"}],"output":null}]],"paths":[]};
searchIndex["rustc_lint"] = {"doc":"Lints in the Rust compiler.","items":[[5,"register_builtins","rustc_lint","Tell the `LintStore` about all the built-in lints (the ones defined in this crate and the ones defined in `rustc::lint::builtin`).",null,{"inputs":[{"name":"lintstore"},{"name":"option"}],"output":null}]],"paths":[]};
searchIndex["rustc_llvm"] = {"doc":"","items":[[3,"ThinLTOModule","rustc_llvm","LLVMRustThinLTOModule",null,null],[12,"identifier","","",0,null],[12,"data","","",0,null],[12,"len","","",0,null],[3,"ObjectFile","","",null,null],[12,"llof","","",1,null],[3,"SectionIter","","",null,null],[12,"llsi","","",2,null],[3,"OperandBundleDef","","",null,null],[4,"LLVMRustResult","","",null,null],[13,"Success","","",3,null],[13,"Failure","","",3,null],[4,"CallConv","","LLVM CallingConv::ID. Should we wrap this?",null,null],[13,"CCallConv","","",4,null],[13,"FastCallConv","","",4,null],[13,"ColdCallConv","","",4,null],[13,"X86StdcallCallConv","","",4,null],[13,"X86FastcallCallConv","","",4,null],[13,"ArmAapcsCallConv","","",4,null],[13,"Msp430Intr","","",4,null],[13,"X86_ThisCall","","",4,null],[13,"PtxKernel","","",4,null],[13,"X86_64_SysV","","",4,null],[13,"X86_64_Win64","","",4,null],[13,"X86_VectorCall","","",4,null],[13,"X86_Intr","","",4,null],[4,"Linkage","","LLVMRustLinkage",null,null],[13,"ExternalLinkage","","",5,null],[13,"AvailableExternallyLinkage","","",5,null],[13,"LinkOnceAnyLinkage","","",5,null],[13,"LinkOnceODRLinkage","","",5,null],[13,"WeakAnyLinkage","","",5,null],[13,"WeakODRLinkage","","",5,null],[13,"AppendingLinkage","","",5,null],[13,"InternalLinkage","","",5,null],[13,"PrivateLinkage","","",5,null],[13,"ExternalWeakLinkage","","",5,null],[13,"CommonLinkage","","",5,null],[4,"Visibility","","",null,null],[13,"Default","","",6,null],[13,"Hidden","","",6,null],[13,"Protected","","",6,null],[4,"DiagnosticSeverity","","LLVMDiagnosticSeverity",null,null],[13,"Error","","",7,null],[13,"Warning","","",7,null],[13,"Remark","","",7,null],[13,"Note","","",7,null],[4,"DLLStorageClass","","LLVMDLLStorageClass",null,null],[13,"Default","","",8,null],[13,"DllImport","","",8,null],[13,"DllExport","","",8,null],[4,"Attribute","","Matches LLVMRustAttribute in rustllvm.h Semantically a subset of the C++ enum llvm::Attribute::AttrKind, though it is not ABI compatible (since it's a C++ enum)",null,null],[13,"AlwaysInline","","",9,null],[13,"ByVal","","",9,null],[13,"Cold","","",9,null],[13,"InlineHint","","",9,null],[13,"MinSize","","",9,null],[13,"Naked","","",9,null],[13,"NoAlias","","",9,null],[13,"NoCapture","","",9,null],[13,"NoInline","","",9,null],[13,"NonNull","","",9,null],[13,"NoRedZone","","",9,null],[13,"NoReturn","","",9,null],[13,"NoUnwind","","",9,null],[13,"OptimizeForSize","","",9,null],[13,"ReadOnly","","",9,null],[13,"SExt","","",9,null],[13,"StructRet","","",9,null],[13,"UWTable","","",9,null],[13,"ZExt","","",9,null],[13,"InReg","","",9,null],[13,"SanitizeThread","","",9,null],[13,"SanitizeAddress","","",9,null],[13,"SanitizeMemory","","",9,null],[4,"IntPredicate","","LLVMIntPredicate",null,null],[13,"IntEQ","","",10,null],[13,"IntNE","","",10,null],[13,"IntUGT","","",10,null],[13,"IntUGE","","",10,null],[13,"IntULT","","",10,null],[13,"IntULE","","",10,null],[13,"IntSGT","","",10,null],[13,"IntSGE","","",10,null],[13,"IntSLT","","",10,null],[13,"IntSLE","","",10,null],[4,"RealPredicate","","LLVMRealPredicate",null,null],[13,"RealPredicateFalse","","",11,null],[13,"RealOEQ","","",11,null],[13,"RealOGT","","",11,null],[13,"RealOGE","","",11,null],[13,"RealOLT","","",11,null],[13,"RealOLE","","",11,null],[13,"RealONE","","",11,null],[13,"RealORD","","",11,null],[13,"RealUNO","","",11,null],[13,"RealUEQ","","",11,null],[13,"RealUGT","","",11,null],[13,"RealUGE","","",11,null],[13,"RealULT","","",11,null],[13,"RealULE","","",11,null],[13,"RealUNE","","",11,null],[13,"RealPredicateTrue","","",11,null],[4,"TypeKind","","LLVMTypeKind",null,null],[13,"Void","","",12,null],[13,"Half","","",12,null],[13,"Float","","",12,null],[13,"Double","","",12,null],[13,"X86_FP80","","",12,null],[13,"FP128","","",12,null],[13,"PPC_FP128","","",12,null],[13,"Label","","",12,null],[13,"Integer","","",12,null],[13,"Function","","",12,null],[13,"Struct","","",12,null],[13,"Array","","",12,null],[13,"Pointer","","",12,null],[13,"Vector","","",12,null],[13,"Metadata","","",12,null],[13,"X86_MMX","","",12,null],[13,"Token","","",12,null],[4,"AtomicRmwBinOp","","LLVMAtomicRmwBinOp",null,null],[13,"AtomicXchg","","",13,null],[13,"AtomicAdd","","",13,null],[13,"AtomicSub","","",13,null],[13,"AtomicAnd","","",13,null],[13,"AtomicNand","","",13,null],[13,"AtomicOr","","",13,null],[13,"AtomicXor","","",13,null],[13,"AtomicMax","","",13,null],[13,"AtomicMin","","",13,null],[13,"AtomicUMax","","",13,null],[13,"AtomicUMin","","",13,null],[4,"AtomicOrdering","","LLVMAtomicOrdering",null,null],[13,"NotAtomic","","",14,null],[13,"Unordered","","",14,null],[13,"Monotonic","","",14,null],[13,"Acquire","","",14,null],[13,"Release","","",14,null],[13,"AcquireRelease","","",14,null],[13,"SequentiallyConsistent","","",14,null],[4,"SynchronizationScope","","LLVMRustSynchronizationScope",null,null],[13,"Other","","",15,null],[13,"SingleThread","","",15,null],[13,"CrossThread","","",15,null],[4,"FileType","","LLVMRustFileType",null,null],[13,"Other","","",16,null],[13,"AssemblyFile","","",16,null],[13,"ObjectFile","","",16,null],[4,"MetadataType","","LLVMMetadataType",null,null],[13,"MD_dbg","","",17,null],[13,"MD_tbaa","","",17,null],[13,"MD_prof","","",17,null],[13,"MD_fpmath","","",17,null],[13,"MD_range","","",17,null],[13,"MD_tbaa_struct","","",17,null],[13,"MD_invariant_load","","",17,null],[13,"MD_alias_scope","","",17,null],[13,"MD_noalias","","",17,null],[13,"MD_nontemporal","","",17,null],[13,"MD_mem_parallel_loop_access","","",17,null],[13,"MD_nonnull","","",17,null],[4,"AsmDialect","","LLVMRustAsmDialect",null,null],[13,"Other","","",18,null],[13,"Att","","",18,null],[13,"Intel","","",18,null],[4,"CodeGenOptLevel","","LLVMRustCodeGenOptLevel",null,null],[13,"Other","","",19,null],[13,"None","","",19,null],[13,"Less","","",19,null],[13,"Default","","",19,null],[13,"Aggressive","","",19,null],[4,"RelocMode","","LLVMRelocMode",null,null],[13,"Default","","",20,null],[13,"Static","","",20,null],[13,"PIC","","",20,null],[13,"DynamicNoPic","","",20,null],[13,"ROPI","","",20,null],[13,"RWPI","","",20,null],[13,"ROPI_RWPI","","",20,null],[4,"CodeModel","","LLVMRustCodeModel",null,null],[13,"Other","","",21,null],[13,"Default","","",21,null],[13,"JITDefault","","",21,null],[13,"Small","","",21,null],[13,"Kernel","","",21,null],[13,"Medium","","",21,null],[13,"Large","","",21,null],[4,"DiagnosticKind","","LLVMRustDiagnosticKind",null,null],[13,"Other","","",22,null],[13,"InlineAsm","","",22,null],[13,"StackSize","","",22,null],[13,"DebugMetadataVersion","","",22,null],[13,"SampleProfile","","",22,null],[13,"OptimizationRemark","","",22,null],[13,"OptimizationRemarkMissed","","",22,null],[13,"OptimizationRemarkAnalysis","","",22,null],[13,"OptimizationRemarkAnalysisFPCommute","","",22,null],[13,"OptimizationRemarkAnalysisAliasing","","",22,null],[13,"OptimizationRemarkOther","","",22,null],[13,"OptimizationFailure","","",22,null],[4,"ArchiveKind","","LLVMRustArchiveKind",null,null],[13,"Other","","",23,null],[13,"K_GNU","","",23,null],[13,"K_MIPS64","","",23,null],[13,"K_BSD","","",23,null],[13,"K_COFF","","",23,null],[4,"PassKind","","LLVMRustPassKind",null,null],[13,"Other","","",24,null],[13,"Function","","",24,null],[13,"Module","","",24,null],[4,"ThinLTOData","","LLVMRustThinLTOData",null,null],[4,"ThinLTOBuffer","","LLVMRustThinLTOBuffer",null,null],[4,"Module_opaque","","",null,null],[4,"Context_opaque","","",null,null],[4,"Type_opaque","","",null,null],[4,"Value_opaque","","",null,null],[4,"Metadata_opaque","","",null,null],[4,"BasicBlock_opaque","","",null,null],[4,"Builder_opaque","","",null,null],[4,"ExecutionEngine_opaque","","",null,null],[4,"MemoryBuffer_opaque","","",null,null],[4,"PassManager_opaque","","",null,null],[4,"PassManagerBuilder_opaque","","",null,null],[4,"Use_opaque","","",null,null],[4,"TargetData_opaque","","",null,null],[4,"ObjectFile_opaque","","",null,null],[4,"SectionIterator_opaque","","",null,null],[4,"Pass_opaque","","",null,null],[4,"TargetMachine_opaque","","",null,null],[4,"Archive_opaque","","",null,null],[4,"ArchiveIterator_opaque","","",null,null],[4,"ArchiveChild_opaque","","",null,null],[4,"Twine_opaque","","",null,null],[4,"DiagnosticInfo_opaque","","",null,null],[4,"DebugLoc_opaque","","",null,null],[4,"SMDiagnostic_opaque","","",null,null],[4,"RustArchiveMember_opaque","","",null,null],[4,"OperandBundleDef_opaque","","",null,null],[4,"ModuleBuffer","","",null,null],[4,"AttributePlace","","",null,null],[13,"Argument","","",25,null],[13,"Function","","",25,null],[4,"CodeGenOptSize","","",null,null],[13,"CodeGenOptSizeNone","","",26,null],[13,"CodeGenOptSizeDefault","","",26,null],[13,"CodeGenOptSizeAggressive","","",26,null],[4,"RustString_opaque","","",null,null],[5,"AddFunctionAttrStringValue","","",null,{"inputs":[{"name":"valueref"},{"name":"attributeplace"},{"name":"cstr"},{"name":"cstr"}],"output":null}],[5,"LLVMRustStringWriteImpl","","Appending to a Rust string -- used by RawRustStringOstream.",null,null],[5,"SetInstructionCallConv","","",null,{"inputs":[{"name":"valueref"},{"name":"callconv"}],"output":null}],[5,"SetFunctionCallConv","","",null,{"inputs":[{"name":"valueref"},{"name":"callconv"}],"output":null}],[5,"SetUniqueComdat","","",null,{"inputs":[{"name":"moduleref"},{"name":"valueref"}],"output":null}],[5,"UnsetComdat","","",null,{"inputs":[{"name":"valueref"}],"output":null}],[5,"SetUnnamedAddr","","",null,{"inputs":[{"name":"valueref"},{"name":"bool"}],"output":null}],[5,"set_thread_local","","",null,{"inputs":[{"name":"valueref"},{"name":"bool"}],"output":null}],[5,"mk_section_iter","","",null,{"inputs":[{"name":"objectfileref"}],"output":{"name":"sectioniter"}}],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun.",null,{"inputs":[{"name":"valueref"},{"name":"c_uint"}],"output":{"name":"valueref"}}],[5,"build_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"option"}}],[5,"twine_to_string","","",null,{"inputs":[{"name":"twineref"}],"output":{"name":"string"}}],[5,"debug_loc_to_string","","",null,{"inputs":[{"name":"contextref"},{"name":"debuglocref"}],"output":{"name":"string"}}],[5,"initialize_available_targets","","",null,{"inputs":[],"output":null}],[5,"last_error","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"LLVMContextCreate","","",null,null],[5,"LLVMContextDispose","","",null,null],[5,"LLVMGetMDKindIDInContext","","",null,null],[5,"LLVMModuleCreateWithNameInContext","","",null,null],[5,"LLVMGetModuleContext","","",null,null],[5,"LLVMCloneModule","","",null,null],[5,"LLVMDisposeModule","","",null,null],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout.",null,null],[5,"LLVMSetDataLayout","","",null,null],[5,"LLVMDumpModule","","See Module::dump.",null,null],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm.",null,null],[5,"LLVMRustAppendModuleInlineAsm","","",null,null],[5,"LLVMRustGetTypeKind","","See llvm::LLVMTypeKind::getTypeID.",null,null],[5,"LLVMRustGetValueContext","","See llvm::Value::getContext",null,null],[5,"LLVMInt1TypeInContext","","",null,null],[5,"LLVMInt8TypeInContext","","",null,null],[5,"LLVMInt16TypeInContext","","",null,null],[5,"LLVMInt32TypeInContext","","",null,null],[5,"LLVMInt64TypeInContext","","",null,null],[5,"LLVMIntTypeInContext","","",null,null],[5,"LLVMGetIntTypeWidth","","",null,null],[5,"LLVMFloatTypeInContext","","",null,null],[5,"LLVMDoubleTypeInContext","","",null,null],[5,"LLVMFunctionType","","",null,null],[5,"LLVMGetReturnType","","",null,null],[5,"LLVMCountParamTypes","","",null,null],[5,"LLVMGetParamTypes","","",null,null],[5,"LLVMStructTypeInContext","","",null,null],[5,"LLVMCountStructElementTypes","","",null,null],[5,"LLVMGetStructElementTypes","","",null,null],[5,"LLVMIsPackedStruct","","",null,null],[5,"LLVMRustArrayType","","",null,null],[5,"LLVMPointerType","","",null,null],[5,"LLVMVectorType","","",null,null],[5,"LLVMGetElementType","","",null,null],[5,"LLVMGetArrayLength","","",null,null],[5,"LLVMGetVectorSize","","",null,null],[5,"LLVMVoidTypeInContext","","",null,null],[5,"LLVMRustMetadataTypeInContext","","",null,null],[5,"LLVMTypeOf","","",null,null],[5,"LLVMGetValueName","","",null,null],[5,"LLVMSetValueName","","",null,null],[5,"LLVMReplaceAllUsesWith","","",null,null],[5,"LLVMSetMetadata","","",null,null],[5,"LLVMGetFirstUse","","",null,null],[5,"LLVMGetNextUse","","",null,null],[5,"LLVMGetUser","","",null,null],[5,"LLVMGetOperand","","",null,null],[5,"LLVMConstNull","","",null,null],[5,"LLVMConstICmp","","",null,null],[5,"LLVMConstFCmp","","",null,null],[5,"LLVMGetUndef","","",null,null],[5,"LLVMIsNull","","",null,null],[5,"LLVMIsUndef","","",null,null],[5,"LLVMMDStringInContext","","",null,null],[5,"LLVMMDNodeInContext","","",null,null],[5,"LLVMAddNamedMetadataOperand","","",null,null],[5,"LLVMConstInt","","",null,null],[5,"LLVMConstIntOfArbitraryPrecision","","",null,null],[5,"LLVMConstIntGetZExtValue","","",null,null],[5,"LLVMConstIntGetSExtValue","","",null,null],[5,"LLVMRustConstInt128Get","","",null,null],[5,"LLVMConstStringInContext","","",null,null],[5,"LLVMConstStructInContext","","",null,null],[5,"LLVMConstArray","","",null,null],[5,"LLVMConstVector","","",null,null],[5,"LLVMSizeOf","","",null,null],[5,"LLVMConstNeg","","",null,null],[5,"LLVMConstFNeg","","",null,null],[5,"LLVMConstNot","","",null,null],[5,"LLVMConstAdd","","",null,null],[5,"LLVMConstFAdd","","",null,null],[5,"LLVMConstSub","","",null,null],[5,"LLVMConstFSub","","",null,null],[5,"LLVMConstMul","","",null,null],[5,"LLVMConstFMul","","",null,null],[5,"LLVMConstUDiv","","",null,null],[5,"LLVMConstSDiv","","",null,null],[5,"LLVMConstFDiv","","",null,null],[5,"LLVMConstURem","","",null,null],[5,"LLVMConstSRem","","",null,null],[5,"LLVMConstFRem","","",null,null],[5,"LLVMConstAnd","","",null,null],[5,"LLVMConstOr","","",null,null],[5,"LLVMConstXor","","",null,null],[5,"LLVMConstShl","","",null,null],[5,"LLVMConstLShr","","",null,null],[5,"LLVMConstAShr","","",null,null],[5,"LLVMConstTrunc","","",null,null],[5,"LLVMConstZExt","","",null,null],[5,"LLVMConstUIToFP","","",null,null],[5,"LLVMConstSIToFP","","",null,null],[5,"LLVMConstFPToUI","","",null,null],[5,"LLVMConstFPToSI","","",null,null],[5,"LLVMConstPtrToInt","","",null,null],[5,"LLVMConstIntToPtr","","",null,null],[5,"LLVMConstBitCast","","",null,null],[5,"LLVMConstPointerCast","","",null,null],[5,"LLVMConstIntCast","","",null,null],[5,"LLVMConstFPCast","","",null,null],[5,"LLVMConstExtractValue","","",null,null],[5,"LLVMConstInlineAsm","","",null,null],[5,"LLVMGetGlobalParent","","",null,null],[5,"LLVMIsDeclaration","","",null,null],[5,"LLVMRustGetLinkage","","",null,null],[5,"LLVMRustSetLinkage","","",null,null],[5,"LLVMGetSection","","",null,null],[5,"LLVMSetSection","","",null,null],[5,"LLVMRustGetVisibility","","",null,null],[5,"LLVMRustSetVisibility","","",null,null],[5,"LLVMGetAlignment","","",null,null],[5,"LLVMSetAlignment","","",null,null],[5,"LLVMSetDLLStorageClass","","",null,null],[5,"LLVMIsAGlobalVariable","","",null,null],[5,"LLVMAddGlobal","","",null,null],[5,"LLVMGetNamedGlobal","","",null,null],[5,"LLVMRustGetOrInsertGlobal","","",null,null],[5,"LLVMGetFirstGlobal","","",null,null],[5,"LLVMGetNextGlobal","","",null,null],[5,"LLVMDeleteGlobal","","",null,null],[5,"LLVMGetInitializer","","",null,null],[5,"LLVMSetInitializer","","",null,null],[5,"LLVMSetThreadLocal","","",null,null],[5,"LLVMIsGlobalConstant","","",null,null],[5,"LLVMSetGlobalConstant","","",null,null],[5,"LLVMRustGetNamedValue","","",null,null],[5,"LLVMSetTailCall","","",null,null],[5,"LLVMAddFunction","","",null,null],[5,"LLVMGetNamedFunction","","",null,null],[5,"LLVMGetFirstFunction","","",null,null],[5,"LLVMGetNextFunction","","",null,null],[5,"LLVMRustGetOrInsertFunction","","",null,null],[5,"LLVMSetFunctionCallConv","","",null,null],[5,"LLVMRustAddDereferenceableAttr","","",null,null],[5,"LLVMRustAddFunctionAttribute","","",null,null],[5,"LLVMRustAddFunctionAttrStringValue","","",null,null],[5,"LLVMRustRemoveFunctionAttributes","","",null,null],[5,"LLVMCountParams","","",null,null],[5,"LLVMGetParam","","",null,null],[5,"LLVMBasicBlockAsValue","","",null,null],[5,"LLVMGetBasicBlockParent","","",null,null],[5,"LLVMAppendBasicBlockInContext","","",null,null],[5,"LLVMDeleteBasicBlock","","",null,null],[5,"LLVMGetInstructionParent","","",null,null],[5,"LLVMGetFirstBasicBlock","","",null,null],[5,"LLVMGetFirstInstruction","","",null,null],[5,"LLVMInstructionEraseFromParent","","",null,null],[5,"LLVMSetInstructionCallConv","","",null,null],[5,"LLVMRustAddCallSiteAttribute","","",null,null],[5,"LLVMRustAddDereferenceableCallSiteAttr","","",null,null],[5,"LLVMSetVolatile","","",null,null],[5,"LLVMAddIncoming","","",null,null],[5,"LLVMCreateBuilderInContext","","",null,null],[5,"LLVMPositionBuilder","","",null,null],[5,"LLVMPositionBuilderBefore","","",null,null],[5,"LLVMPositionBuilderAtEnd","","",null,null],[5,"LLVMGetInsertBlock","","",null,null],[5,"LLVMDisposeBuilder","","",null,null],[5,"LLVMSetCurrentDebugLocation","","",null,null],[5,"LLVMGetCurrentDebugLocation","","",null,null],[5,"LLVMSetInstDebugLocation","","",null,null],[5,"LLVMBuildRetVoid","","",null,null],[5,"LLVMBuildRet","","",null,null],[5,"LLVMBuildAggregateRet","","",null,null],[5,"LLVMBuildBr","","",null,null],[5,"LLVMBuildCondBr","","",null,null],[5,"LLVMBuildSwitch","","",null,null],[5,"LLVMBuildIndirectBr","","",null,null],[5,"LLVMRustBuildInvoke","","",null,null],[5,"LLVMRustBuildLandingPad","","",null,null],[5,"LLVMBuildResume","","",null,null],[5,"LLVMBuildUnreachable","","",null,null],[5,"LLVMRustBuildCleanupPad","","",null,null],[5,"LLVMRustBuildCleanupRet","","",null,null],[5,"LLVMRustBuildCatchPad","","",null,null],[5,"LLVMRustBuildCatchRet","","",null,null],[5,"LLVMRustBuildCatchSwitch","","",null,null],[5,"LLVMRustAddHandler","","",null,null],[5,"LLVMSetPersonalityFn","","",null,null],[5,"LLVMAddCase","","",null,null],[5,"LLVMAddClause","","",null,null],[5,"LLVMSetCleanup","","",null,null],[5,"LLVMBuildAdd","","",null,null],[5,"LLVMBuildNSWAdd","","",null,null],[5,"LLVMBuildNUWAdd","","",null,null],[5,"LLVMBuildFAdd","","",null,null],[5,"LLVMBuildSub","","",null,null],[5,"LLVMBuildNSWSub","","",null,null],[5,"LLVMBuildNUWSub","","",null,null],[5,"LLVMBuildFSub","","",null,null],[5,"LLVMBuildMul","","",null,null],[5,"LLVMBuildNSWMul","","",null,null],[5,"LLVMBuildNUWMul","","",null,null],[5,"LLVMBuildFMul","","",null,null],[5,"LLVMBuildUDiv","","",null,null],[5,"LLVMBuildSDiv","","",null,null],[5,"LLVMBuildExactSDiv","","",null,null],[5,"LLVMBuildFDiv","","",null,null],[5,"LLVMBuildURem","","",null,null],[5,"LLVMBuildSRem","","",null,null],[5,"LLVMBuildFRem","","",null,null],[5,"LLVMBuildShl","","",null,null],[5,"LLVMBuildLShr","","",null,null],[5,"LLVMBuildAShr","","",null,null],[5,"LLVMBuildAnd","","",null,null],[5,"LLVMBuildOr","","",null,null],[5,"LLVMBuildXor","","",null,null],[5,"LLVMBuildBinOp","","",null,null],[5,"LLVMBuildNeg","","",null,null],[5,"LLVMBuildNSWNeg","","",null,null],[5,"LLVMBuildNUWNeg","","",null,null],[5,"LLVMBuildFNeg","","",null,null],[5,"LLVMBuildNot","","",null,null],[5,"LLVMRustSetHasUnsafeAlgebra","","",null,null],[5,"LLVMBuildAlloca","","",null,null],[5,"LLVMBuildFree","","",null,null],[5,"LLVMBuildLoad","","",null,null],[5,"LLVMBuildStore","","",null,null],[5,"LLVMBuildGEP","","",null,null],[5,"LLVMBuildInBoundsGEP","","",null,null],[5,"LLVMBuildStructGEP","","",null,null],[5,"LLVMBuildGlobalString","","",null,null],[5,"LLVMBuildGlobalStringPtr","","",null,null],[5,"LLVMBuildTrunc","","",null,null],[5,"LLVMBuildZExt","","",null,null],[5,"LLVMBuildSExt","","",null,null],[5,"LLVMBuildFPToUI","","",null,null],[5,"LLVMBuildFPToSI","","",null,null],[5,"LLVMBuildUIToFP","","",null,null],[5,"LLVMBuildSIToFP","","",null,null],[5,"LLVMBuildFPTrunc","","",null,null],[5,"LLVMBuildFPExt","","",null,null],[5,"LLVMBuildPtrToInt","","",null,null],[5,"LLVMBuildIntToPtr","","",null,null],[5,"LLVMBuildBitCast","","",null,null],[5,"LLVMBuildZExtOrBitCast","","",null,null],[5,"LLVMBuildSExtOrBitCast","","",null,null],[5,"LLVMBuildTruncOrBitCast","","",null,null],[5,"LLVMBuildCast","","",null,null],[5,"LLVMBuildPointerCast","","",null,null],[5,"LLVMRustBuildIntCast","","",null,null],[5,"LLVMBuildFPCast","","",null,null],[5,"LLVMBuildICmp","","",null,null],[5,"LLVMBuildFCmp","","",null,null],[5,"LLVMBuildPhi","","",null,null],[5,"LLVMRustBuildCall","","",null,null],[5,"LLVMBuildSelect","","",null,null],[5,"LLVMBuildVAArg","","",null,null],[5,"LLVMBuildExtractElement","","",null,null],[5,"LLVMBuildInsertElement","","",null,null],[5,"LLVMBuildShuffleVector","","",null,null],[5,"LLVMBuildExtractValue","","",null,null],[5,"LLVMBuildInsertValue","","",null,null],[5,"LLVMBuildIsNull","","",null,null],[5,"LLVMBuildIsNotNull","","",null,null],[5,"LLVMBuildPtrDiff","","",null,null],[5,"LLVMRustBuildAtomicLoad","","",null,null],[5,"LLVMRustBuildAtomicStore","","",null,null],[5,"LLVMRustBuildAtomicCmpXchg","","",null,null],[5,"LLVMBuildAtomicRMW","","",null,null],[5,"LLVMRustBuildAtomicFence","","",null,null],[5,"LLVMIsATerminatorInst","","",null,null],[5,"LLVMIsAStoreInst","","",null,null],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success.",null,null],[5,"LLVMCreateTargetData","","Creates target data from a target layout string.",null,null],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T.",null,null],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding.",null,null],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type.",null,null],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type.",null,null],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a target.",null,null],[5,"LLVMDisposeTargetData","","Disposes target data.",null,null],[5,"LLVMCreatePassManager","","Creates a pass manager.",null,null],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager",null,null],[5,"LLVMDisposePassManager","","Disposes a pass manager.",null,null],[5,"LLVMRunPassManager","","Runs a pass manager on a module.",null,null],[5,"LLVMInitializePasses","","",null,null],[5,"LLVMPassManagerBuilderCreate","","",null,null],[5,"LLVMPassManagerBuilderDispose","","",null,null],[5,"LLVMPassManagerBuilderSetSizeLevel","","",null,null],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","","",null,null],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","","",null,null],[5,"LLVMPassManagerBuilderPopulateModulePassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","","",null,null],[5,"LLVMRustPassManagerBuilderPopulateThinLTOPassManager","","",null,null],[5,"LLVMCreateObjectFile","","Opens an object file.",null,null],[5,"LLVMDisposeObjectFile","","Closes an object file.",null,null],[5,"LLVMGetSections","","Enumerates the sections in an object file.",null,null],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator.",null,null],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section list:",null,null],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section.",null,null],[5,"LLVMGetSectionSize","","Returns the current section size.",null,null],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer.",null,null],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use LLVMDisposeMemoryBuffer() to get rid of it.",null,null],[5,"LLVMStartMultithreaded","","",null,null],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call.",null,null],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up.",null,null],[5,"LLVMStructCreateNamed","","",null,null],[5,"LLVMStructSetBody","","",null,null],[5,"LLVMConstNamedStruct","","",null,null],[5,"LLVMRustSetDebug","","Enables LLVM debug output.",null,null],[5,"LLVMRustInlineAsm","","Prepares inline assembly.",null,null],[5,"LLVMRustDebugMetadataVersion","","",null,null],[5,"LLVMRustVersionMajor","","",null,null],[5,"LLVMRustVersionMinor","","",null,null],[5,"LLVMRustAddModuleFlag","","",null,null],[5,"LLVMRustMetadataAsValue","","",null,null],[5,"LLVMRustDIBuilderCreate","","",null,null],[5,"LLVMRustDIBuilderDispose","","",null,null],[5,"LLVMRustDIBuilderFinalize","","",null,null],[5,"LLVMRustDIBuilderCreateCompileUnit","","",null,null],[5,"LLVMRustDIBuilderCreateFile","","",null,null],[5,"LLVMRustDIBuilderCreateSubroutineType","","",null,null],[5,"LLVMRustDIBuilderCreateFunction","","",null,null],[5,"LLVMRustDIBuilderCreateBasicType","","",null,null],[5,"LLVMRustDIBuilderCreatePointerType","","",null,null],[5,"LLVMRustDIBuilderCreateStructType","","",null,null],[5,"LLVMRustDIBuilderCreateMemberType","","",null,null],[5,"LLVMRustDIBuilderCreateLexicalBlock","","",null,null],[5,"LLVMRustDIBuilderCreateLexicalBlockFile","","",null,null],[5,"LLVMRustDIBuilderCreateStaticVariable","","",null,null],[5,"LLVMRustDIBuilderCreateVariable","","",null,null],[5,"LLVMRustDIBuilderCreateArrayType","","",null,null],[5,"LLVMRustDIBuilderCreateVectorType","","",null,null],[5,"LLVMRustDIBuilderGetOrCreateSubrange","","",null,null],[5,"LLVMRustDIBuilderGetOrCreateArray","","",null,null],[5,"LLVMRustDIBuilderInsertDeclareAtEnd","","",null,null],[5,"LLVMRustDIBuilderCreateEnumerator","","",null,null],[5,"LLVMRustDIBuilderCreateEnumerationType","","",null,null],[5,"LLVMRustDIBuilderCreateUnionType","","",null,null],[5,"LLVMSetUnnamedAddr","","",null,null],[5,"LLVMRustDIBuilderCreateTemplateTypeParameter","","",null,null],[5,"LLVMRustDIBuilderCreateNameSpace","","",null,null],[5,"LLVMRustDICompositeTypeSetTypeArray","","",null,null],[5,"LLVMRustDIBuilderCreateDebugLocation","","",null,null],[5,"LLVMRustDIBuilderCreateOpDeref","","",null,null],[5,"LLVMRustDIBuilderCreateOpPlus","","",null,null],[5,"LLVMRustWriteTypeToString","","",null,null],[5,"LLVMRustWriteValueToString","","",null,null],[5,"LLVMIsAConstantInt","","",null,null],[5,"LLVMRustPassKind","","",null,null],[5,"LLVMRustFindAndCreatePass","","",null,null],[5,"LLVMRustAddPass","","",null,null],[5,"LLVMRustHasFeature","","",null,null],[5,"LLVMRustPrintTargetCPUs","","",null,null],[5,"LLVMRustPrintTargetFeatures","","",null,null],[5,"LLVMRustCreateTargetMachine","","",null,null],[5,"LLVMRustDisposeTargetMachine","","",null,null],[5,"LLVMRustAddAnalysisPasses","","",null,null],[5,"LLVMRustAddBuilderLibraryInfo","","",null,null],[5,"LLVMRustConfigurePassManagerBuilder","","",null,null],[5,"LLVMRustAddLibraryInfo","","",null,null],[5,"LLVMRustRunFunctionPassManager","","",null,null],[5,"LLVMRustWriteOutputFile","","",null,null],[5,"LLVMRustPrintModule","","",null,null],[5,"LLVMRustSetLLVMOptions","","",null,null],[5,"LLVMRustPrintPasses","","",null,null],[5,"LLVMRustSetNormalizedTarget","","",null,null],[5,"LLVMRustAddAlwaysInlinePass","","",null,null],[5,"LLVMRustLinkInExternalBitcode","","",null,null],[5,"LLVMRustLinkInParsedExternalBitcode","","",null,null],[5,"LLVMRustRunRestrictionPass","","",null,null],[5,"LLVMRustMarkAllFunctionsNounwind","","",null,null],[5,"LLVMRustOpenArchive","","",null,null],[5,"LLVMRustArchiveIteratorNew","","",null,null],[5,"LLVMRustArchiveIteratorNext","","",null,null],[5,"LLVMRustArchiveChildName","","",null,null],[5,"LLVMRustArchiveChildData","","",null,null],[5,"LLVMRustArchiveChildFree","","",null,null],[5,"LLVMRustArchiveIteratorFree","","",null,null],[5,"LLVMRustDestroyArchive","","",null,null],[5,"LLVMRustGetSectionName","","",null,null],[5,"LLVMRustWriteTwineToString","","",null,null],[5,"LLVMContextSetDiagnosticHandler","","",null,null],[5,"LLVMRustUnpackOptimizationDiagnostic","","",null,null],[5,"LLVMRustUnpackInlineAsmDiagnostic","","",null,null],[5,"LLVMRustWriteDiagnosticInfoToString","","",null,null],[5,"LLVMRustGetDiagInfoKind","","",null,null],[5,"LLVMRustWriteDebugLocToString","","",null,null],[5,"LLVMRustSetInlineAsmDiagnosticHandler","","",null,null],[5,"LLVMRustWriteSMDiagnosticToString","","",null,null],[5,"LLVMRustWriteArchive","","",null,null],[5,"LLVMRustArchiveMemberNew","","",null,null],[5,"LLVMRustArchiveMemberFree","","",null,null],[5,"LLVMRustSetDataLayoutFromTargetMachine","","",null,null],[5,"LLVMRustGetModuleDataLayout","","",null,null],[5,"LLVMRustBuildOperandBundleDef","","",null,null],[5,"LLVMRustFreeOperandBundleDef","","",null,null],[5,"LLVMRustPositionBuilderAtStart","","",null,null],[5,"LLVMRustSetComdat","","",null,null],[5,"LLVMRustUnsetComdat","","",null,null],[5,"LLVMRustSetModulePIELevel","","",null,null],[5,"LLVMRustModuleBufferCreate","","",null,null],[5,"LLVMRustModuleBufferPtr","","",null,null],[5,"LLVMRustModuleBufferLen","","",null,null],[5,"LLVMRustModuleBufferFree","","",null,null],[5,"LLVMRustModuleCost","","",null,null],[5,"LLVMRustThinLTOAvailable","","",null,null],[5,"LLVMRustWriteThinBitcodeToFile","","",null,null],[5,"LLVMRustThinLTOBufferCreate","","",null,null],[5,"LLVMRustThinLTOBufferFree","","",null,null],[5,"LLVMRustThinLTOBufferPtr","","",null,null],[5,"LLVMRustThinLTOBufferLen","","",null,null],[5,"LLVMRustCreateThinLTOData","","",null,null],[5,"LLVMRustPrepareThinLTORename","","",null,null],[5,"LLVMRustPrepareThinLTOResolveWeak","","",null,null],[5,"LLVMRustPrepareThinLTOInternalize","","",null,null],[5,"LLVMRustPrepareThinLTOImport","","",null,null],[5,"LLVMRustFreeThinLTOData","","",null,null],[5,"LLVMRustParseBitcodeForThinLTO","","",null,null],[5,"LLVMGetModuleIdentifier","","",null,null],[0,"archive_ro","","A wrapper around LLVM's archive (.a) code",null,null],[3,"ArchiveRO","rustc_llvm::archive_ro","",null,null],[3,"Iter","","",null,null],[3,"Child","","",null,null],[11,"open","","Opens a static archive for read-only purposes. This is more optimized than the `open` method because it uses LLVM's internal `Archive` class rather than shelling out to `ar` for everything.",27,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"raw","","",27,{"inputs":[{"name":"self"}],"output":{"name":"archiveref"}}],[11,"iter","","",27,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"drop","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"name","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"data","","",29,null],[11,"raw","","",29,{"inputs":[{"name":"self"}],"output":{"name":"archivechildref"}}],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[0,"diagnostic","rustc_llvm","LLVM diagnostic reports.",null,null],[3,"OptimizationDiagnostic","rustc_llvm::diagnostic","",null,null],[12,"kind","","",30,null],[12,"pass_name","","",30,null],[12,"function","","",30,null],[12,"line","","",30,null],[12,"column","","",30,null],[12,"filename","","",30,null],[12,"message","","",30,null],[3,"InlineAsmDiagnostic","","",null,null],[12,"cookie","","",31,null],[12,"message","","",31,null],[12,"instruction","","",31,null],[4,"OptimizationDiagnosticKind","","",null,null],[13,"OptimizationRemark","","",32,null],[13,"OptimizationMissed","","",32,null],[13,"OptimizationAnalysis","","",32,null],[13,"OptimizationAnalysisFPCommute","","",32,null],[13,"OptimizationAnalysisAliasing","","",32,null],[13,"OptimizationFailure","","",32,null],[13,"OptimizationRemarkOther","","",32,null],[4,"Diagnostic","","",null,null],[13,"Optimization","","",33,null],[13,"InlineAsm","","",33,null],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",33,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"optimizationdiagnostickind"}}],[11,"describe","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmdiagnostic"}}],[11,"unpack","","",33,{"inputs":[{"name":"diagnosticinforef"}],"output":{"name":"diagnostic"}}],[11,"clone","rustc_llvm","",3,{"inputs":[{"name":"self"}],"output":{"name":"llvmrustresult"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"llvmrustresult"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"callconv"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"callconv"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticseverity"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"dllstorageclass"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"intpredicate"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"realpredicate"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typekind"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"atomicrmwbinop"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"atomicordering"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"synchronizationscope"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"metadatatype"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"asmdialect"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptlevel"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"codegenoptlevel"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"relocmode"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"relocmode"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"codemodel"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"diagnostickind"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"archivekind"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"passkind"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"passkind"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"debuginfo","","",null,null],[3,"DIFlags","rustc_llvm::debuginfo","",null,null],[4,"DIBuilder_opaque","","",null,null],[6,"DIBuilderRef","","",null,null],[6,"DIDescriptor","","",null,null],[6,"DIScope","","",null,null],[6,"DILocation","","",null,null],[6,"DIFile","","",null,null],[6,"DILexicalBlock","","",null,null],[6,"DISubprogram","","",null,null],[6,"DINameSpace","","",null,null],[6,"DIType","","",null,null],[6,"DIBasicType","","",null,null],[6,"DIDerivedType","","",null,null],[6,"DICompositeType","","",null,null],[6,"DIVariable","","",null,null],[6,"DIGlobalVariable","","",null,null],[6,"DIArray","","",null,null],[6,"DISubrange","","",null,null],[6,"DIEnumerator","","",null,null],[6,"DITemplateTypeParameter","","",null,null],[6,"Opcode","rustc_llvm","",null,null],[6,"Bool","","",null,null],[6,"ModuleRef","","",null,null],[6,"ContextRef","","",null,null],[6,"TypeRef","","",null,null],[6,"ValueRef","","",null,null],[6,"MetadataRef","","",null,null],[6,"BasicBlockRef","","",null,null],[6,"BuilderRef","","",null,null],[6,"ExecutionEngineRef","","",null,null],[6,"MemoryBufferRef","","",null,null],[6,"PassManagerRef","","",null,null],[6,"PassManagerBuilderRef","","",null,null],[6,"UseRef","","",null,null],[6,"TargetDataRef","","",null,null],[6,"ObjectFileRef","","",null,null],[6,"SectionIteratorRef","","",null,null],[6,"PassRef","","",null,null],[6,"TargetMachineRef","","",null,null],[6,"ArchiveRef","","",null,null],[6,"ArchiveIteratorRef","","",null,null],[6,"ArchiveChildRef","","",null,null],[6,"TwineRef","","",null,null],[6,"DiagnosticInfoRef","","",null,null],[6,"DebugLocRef","","",null,null],[6,"SMDiagnosticRef","","",null,null],[6,"RustArchiveMemberRef","","",null,null],[6,"OperandBundleDefRef","","",null,null],[6,"DiagnosticHandler","","",null,null],[6,"InlineAsmDiagHandler","","",null,null],[17,"True","","",null,null],[17,"False","","",null,null],[11,"into_result","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"attributeplace"}}],[11,"ReturnValue","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"as_uint","","",25,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptsize"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"codegenoptsize"}],"output":{"name":"bool"}}],[11,"from_str","","",23,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"apply_llfn","","",9,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"}],"output":null}],[11,"apply_callsite","","",9,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"}],"output":null}],[11,"unapply_llfn","","",9,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"}],"output":null}],[11,"toggle_llfn","","",9,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"},{"name":"bool"}],"output":null}],[11,"new","","",1,{"inputs":[{"name":"memorybufferref"}],"output":{"name":"option"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",34,null],[11,"raw","","",34,{"inputs":[{"name":"self"}],"output":{"name":"operandbundledefref"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","rustc_llvm::debuginfo","",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"diflags"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"ordering"}}],[11,"hash","","",35,null],[11,"default","","",35,{"inputs":[],"output":{"name":"diflags"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FlagZero","","",35,null],[18,"FlagPrivate","","",35,null],[18,"FlagProtected","","",35,null],[18,"FlagPublic","","",35,null],[18,"FlagFwdDecl","","",35,null],[18,"FlagAppleBlock","","",35,null],[18,"FlagBlockByrefStruct","","",35,null],[18,"FlagVirtual","","",35,null],[18,"FlagArtificial","","",35,null],[18,"FlagExplicit","","",35,null],[18,"FlagPrototyped","","",35,null],[18,"FlagObjcClassComplete","","",35,null],[18,"FlagObjectPointer","","",35,null],[18,"FlagVector","","",35,null],[18,"FlagStaticMember","","",35,null],[18,"FlagLValueReference","","",35,null],[18,"FlagRValueReference","","",35,null],[18,"FlagMainSubprogram","","",35,null],[11,"empty","","Returns an empty set of flags.",35,{"inputs":[],"output":{"name":"diflags"}}],[11,"all","","Returns the set containing all flags.",35,{"inputs":[],"output":{"name":"diflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",35,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",35,{"inputs":[{"name":"uint32_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",35,{"inputs":[{"name":"uint32_t"}],"output":{"name":"diflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",35,{"inputs":[{"name":"self"},{"name":"diflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"bitor_assign","","Adds the set of flags.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",35,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",35,{"inputs":[{"name":"self"}],"output":{"name":"diflags"}}],[11,"extend","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",35,{"inputs":[{"name":"t"}],"output":{"name":"diflags"}}]],"paths":[[3,"ThinLTOModule"],[3,"ObjectFile"],[3,"SectionIter"],[4,"LLVMRustResult"],[4,"CallConv"],[4,"Linkage"],[4,"Visibility"],[4,"DiagnosticSeverity"],[4,"DLLStorageClass"],[4,"Attribute"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"TypeKind"],[4,"AtomicRmwBinOp"],[4,"AtomicOrdering"],[4,"SynchronizationScope"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[4,"CodeModel"],[4,"DiagnosticKind"],[4,"ArchiveKind"],[4,"PassKind"],[4,"AttributePlace"],[4,"CodeGenOptSize"],[3,"ArchiveRO"],[3,"Iter"],[3,"Child"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[3,"OperandBundleDef"],[3,"DIFlags"]]};
searchIndex["rustc_metadata"] = {"doc":"","items":[[0,"creader","rustc_metadata","Validates all used crates and extern libraries and loads their metadata",null,null],[3,"Library","rustc_metadata::creader","",null,null],[12,"dylib","","",0,null],[12,"rlib","","",0,null],[12,"rmeta","","",0,null],[12,"metadata","","",0,null],[3,"CrateLoader","","",null,null],[12,"sess","","",1,null],[11,"new","","",1,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"str"}],"output":{"name":"self"}}],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path, crate SVH and DefIndex of the registrar function.",1,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"option"}}],[11,"postprocess","","",1,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"process_item","","",1,{"inputs":[{"name":"self"},{"name":"item"},{"name":"definitions"}],"output":null}],[0,"cstore","rustc_metadata","",null,null],[3,"NativeLibrary","rustc_metadata::cstore","",null,null],[12,"kind","","",2,null],[12,"name","","",2,null],[12,"cfg","","",2,null],[12,"foreign_items","","",2,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","native static library (.a archive)",3,null],[13,"NativeStaticNobundle","","native static library, which doesn't get bundled into .rlibs",3,null],[13,"NativeFramework","","macOS-specific",3,null],[13,"NativeUnknown","","default way to specify a dynamic library",3,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",4,null],[13,"RequireStatic","","",4,null],[3,"CrateSource","","Where a crate came from on the local filesystem. One of these three options must be non-None.",null,null],[12,"dylib","","",5,null],[12,"rlib","","",5,null],[12,"rmeta","","",5,null],[4,"LibSource","","",null,null],[13,"Some","","",6,null],[13,"MetadataOnly","","",6,null],[13,"None","","",6,null],[3,"MetadataBlob","","",null,null],[12,"0","","",7,null],[3,"ImportedFileMap","","Holds information about a syntax_pos::FileMap imported from another crate. See `imported_filemaps()` for more information.",null,null],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",8,null],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",8,null],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",8,null],[3,"CrateMetadata","","",null,null],[12,"name","","",9,null],[12,"extern_crate","","Information about the extern crate that caused this crate to be loaded. If this is `None`, then the crate was injected (e.g., by the allocator)",9,null],[12,"blob","","",9,null],[12,"cnum_map","","",9,null],[12,"cnum","","",9,null],[12,"codemap_import_info","","",9,null],[12,"attribute_cache","","",9,null],[12,"root","","",9,null],[12,"def_path_table","","For each public item in this crate, we encode a key.  When the crate is loaded, we read all the keys and put them in this hashmap, which gives the reverse mapping.  This allows us to quickly retrace a `DefPath`, which is needed for incremental compilation support.",9,null],[12,"exported_symbols","","",9,null],[12,"trait_impls","","",9,null],[12,"dep_kind","","",9,null],[12,"source","","",9,null],[12,"proc_macros","","",9,null],[12,"dllimport_foreign_items","","",9,null],[3,"CStore","","",null,null],[12,"metadata_loader","","",10,null],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"provide_local","","",null,{"inputs":[{"name":"providers"}],"output":null}],[6,"CrateNumMap","","",null,null],[11,"new","","",10,{"inputs":[{"name":"box"}],"output":{"name":"cstore"}}],[11,"next_crate_num","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"get_crate_data","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"set_crate_data","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"},{"name":"rc"}],"output":null}],[11,"iter_crate_data","","",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"crate_dependencies_in_rpo","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"push_dependencies_in_postorder","","",10,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"cratenum"}],"output":null}],[11,"do_postorder_cnums_untracked","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"add_extern_mod_stmt_cnum","","",10,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"cratenum"}],"output":null}],[11,"do_extern_mod_stmt_cnum","","",10,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"hash","","",9,{"inputs":[{"name":"self"}],"output":{"name":"svh"}}],[11,"disambiguator","","",9,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"needs_allocator","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_global_allocator","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_default_lib_allocator","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_panic_runtime","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_profiler_runtime","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_no_builtins","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_copy_closures","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_clone_closures","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",9,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[0,"locator","rustc_metadata","Finds crate binaries and loads their metadata",null,null],[3,"CrateMismatch","rustc_metadata::locator","",null,null],[3,"Context","","",null,null],[12,"sess","","",11,null],[12,"span","","",11,null],[12,"ident","","",11,null],[12,"crate_name","","",11,null],[12,"hash","","",11,null],[12,"target","","",11,null],[12,"triple","","",11,null],[12,"filesearch","","",11,null],[12,"root","","",11,null],[12,"rejected_via_hash","","",11,null],[12,"rejected_via_triple","","",11,null],[12,"rejected_via_kind","","",11,null],[12,"rejected_via_version","","",11,null],[12,"rejected_via_filename","","",11,null],[12,"should_match_name","","",11,null],[12,"is_proc_macro","","",11,null],[12,"metadata_loader","","",11,null],[3,"CratePaths","","",null,null],[12,"ident","","",12,null],[12,"dylib","","",12,null],[12,"rlib","","",12,null],[12,"rmeta","","",12,null],[5,"note_crate_name","","",null,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":null}],[5,"list_file_metadata","","",null,{"inputs":[{"name":"target"},{"name":"path"},{"name":"metadataloader"},{"name":"write"}],"output":{"name":"result"}}],[11,"maybe_load_library_crate","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"report_errs","","",11,null],[17,"DIAGNOSTICS","rustc_metadata","",null,null],[11,"is_compatible","rustc_metadata::cstore","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_rustc_version","","",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_root","","",7,{"inputs":[{"name":"self"}],"output":{"name":"crateroot"}}],[11,"list_crate_metadata","","",7,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"item_name","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"internedstring"}}],[11,"get_def","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_span","","",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"session"}],"output":{"name":"span"}}],[11,"get_trait_def","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"traitdef"}}],[11,"get_adt_def","","",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"adtdef"}}],[11,"get_predicates","","",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[11,"get_super_predicates","","",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[11,"get_generics","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"generics"}}],[11,"get_type","","",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"get_stability","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_deprecation","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_visibility","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"visibility"}}],[11,"get_parent_impl","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_impl_polarity","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"implpolarity"}}],[11,"get_impl_defaultness","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defaultness"}}],[11,"get_coerce_unsized_info","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_impl_trait","","",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"get_lang_items","","Iterates over the language items in the given crate.",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"each_child_of_item","","Iterates over each child of the given item.",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"f"},{"name":"session"}],"output":null}],[11,"extern_const_body","","",9,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defindex"}],"output":{"name":"externconstbody"}}],[11,"item_body_tables","","",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"typecktables"}}],[11,"item_body_nested_bodies","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"externbodynestedbodies"}}],[11,"const_is_rvalue_promotable_to_static","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_item_mir_available","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"maybe_get_optimized_mir","","",9,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"mir_const_qualif","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"u8"}}],[11,"get_associated_item","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"associateditem"}}],[11,"get_item_variances","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_ctor_kind","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"ctorkind"}}],[11,"get_struct_ctor_def_id","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_item_attrs","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"rc"}}],[11,"get_struct_field_names","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_inherent_implementations_for_type","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_implementations_for_trait","","",9,{"inputs":[{"name":"self"},{"name":"option"},{"name":"vec"}],"output":null}],[11,"get_trait_of_item","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_native_libraries","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_dylib_dependency_formats","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_missing_lang_items","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_fn_arg_names","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_exported_symbols","","",9,{"inputs":[{"name":"self"}],"output":{"name":"defidset"}}],[11,"get_macro","","",9,null],[11,"is_const_fn","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"closure_kind","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"closurekind"}}],[11,"fn_sig","","",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"polyfnsig"}}],[11,"generator_sig","","",9,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"def_key","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_path","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpath"}}],[11,"def_path_hash","","",9,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpathhash"}}],[11,"imported_filemaps","","Imports the codemap from an external crate into the codemap of the crate currently being compiled (the \"local crate\").",9,{"inputs":[{"name":"self"},{"name":"codemap"}],"output":{"name":"ref"}}],[11,"crate_data_as_rc_any","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"metadata_loader","","",10,{"inputs":[{"name":"self"}],"output":{"name":"metadataloader"}}],[11,"visibility_untracked","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"item_generics_cloned_untracked","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"associated_item_cloned_untracked","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"dep_kind_untracked","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros_untracked","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":null}],[11,"crate_name_untracked","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_disambiguator_untracked","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash_untracked","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"def_key","","Returns the `DefKey` for a given `DefId`. This indicates the parent `DefId` as well as some idea of what kind of data the `DefId` refers to.",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"def_path_hash","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpathhash"}}],[11,"def_path_table","","",10,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"struct_field_names_untracked","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children_untracked","","",10,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"vec"}}],[11,"load_macro_untracked","","",10,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"crates_untracked","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"extern_mod_stmt_cnum_untracked","","",10,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"postorder_cnums_untracked","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"encode_metadata","","",10,null],[11,"metadata_encoding_version","","",10,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash_stable","","",2,null],[11,"hash_stable","","",4,null],[11,"hash_stable","","",5,null],[11,"hash_stable","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"hash","","",3,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Library"],[3,"CrateLoader"],[3,"NativeLibrary"],[4,"NativeLibraryKind"],[4,"LinkagePreference"],[3,"CrateSource"],[4,"LibSource"],[3,"MetadataBlob"],[3,"ImportedFileMap"],[3,"CrateMetadata"],[3,"CStore"],[3,"Context"],[3,"CratePaths"]]};
searchIndex["rustc_mir"] = {"doc":"Rust MIR: a lowered representation of Rust. Also: an experiment!","items":[[5,"provide","rustc_mir","",null,{"inputs":[{"name":"providers"}],"output":null}],[0,"transform","","",null,null],[0,"add_validation","rustc_mir::transform","This pass adds validation calls (AcquireValid, ReleaseValid) where appropriate. It has to be run really early, before transformations like inlining, because introducing these calls adds UB -- so, conceptually, this pass is actually part of MIR building, and only after this pass we think of the program has having the normal MIR semantics.",null,null],[3,"AddValidation","rustc_mir::transform::add_validation","",null,null],[11,"run_pass","","",0,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"clean_end_regions","rustc_mir::transform","This module provides one pass, `CleanEndRegions`, that reduces the set of `EndRegion` statements in the MIR.",null,null],[3,"CleanEndRegions","rustc_mir::transform::clean_end_regions","",null,null],[11,"run_pass","","",1,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"check_unsafety","rustc_mir::transform","",null,null],[3,"UnsafetyChecker","rustc_mir::transform::check_unsafety","",null,null],[5,"check_unsafety","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":null}],[11,"visit_terminator","","",2,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"visit_statement","","",2,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"statement"},{"name":"location"}],"output":null}],[11,"visit_rvalue","","",2,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"visit_lvalue","","",2,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[0,"simplify_branches","rustc_mir::transform","A pass that simplifies branches when their condition is known.",null,null],[3,"SimplifyBranches","rustc_mir::transform::simplify_branches","",null,null],[11,"new","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"name","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"run_pass","","",3,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"simplify","rustc_mir::transform","A number of passes which remove various redundancies in the CFG.",null,null],[3,"SimplifyCfg","rustc_mir::transform::simplify","",null,null],[3,"CfgSimplifier","","",null,null],[3,"SimplifyLocals","","",null,null],[5,"simplify_cfg","","",null,{"inputs":[{"name":"mir"}],"output":null}],[5,"remove_dead_blocks","","",null,{"inputs":[{"name":"mir"}],"output":null}],[11,"new","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"run_pass","","",4,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"new","","",5,{"inputs":[{"name":"mir"}],"output":{"name":"self"}}],[11,"simplify","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"run_pass","","",6,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"erase_regions","rustc_mir::transform","This pass erases all early-bound regions from the types occurring in the MIR. We want to do this once just before trans, so trans does not have to take care erasing regions all over the place. NOTE:  We do NOT erase regions of statements that are relevant for \"types-as-contracts\"-validation, namely, AcquireValid, ReleaseValid, and EndRegion.",null,null],[3,"EraseRegions","rustc_mir::transform::erase_regions","",null,null],[11,"run_pass","","",7,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"no_landing_pads","rustc_mir::transform","This pass removes the unwind branch of all the terminators when the no-landing-pads option is specified.",null,null],[3,"NoLandingPads","rustc_mir::transform::no_landing_pads","",null,null],[5,"no_landing_pads","","",null,{"inputs":[{"name":"tyctxt"},{"name":"mir"}],"output":null}],[11,"run_pass","","",8,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"visit_terminator","","",8,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[0,"type_check","rustc_mir::transform","This pass type-checks the MIR to ensure it is not broken.",null,null],[3,"TypeChecker","rustc_mir::transform::type_check","",null,null],[3,"TypeckMir","","",null,null],[11,"register_infer_ok_obligations","","",9,{"inputs":[{"name":"self"},{"name":"inferok"}],"output":{"name":"t"}}],[11,"run_pass","","",10,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"rustc_peek","rustc_mir::transform","",null,null],[3,"SanityCheck","rustc_mir::transform::rustc_peek","",null,null],[5,"sanity_check_via_rustc_peek","","This function scans `mir` for all calls to the intrinsic `rustc_peek` that have the expression form `rustc_peek(&expr)`.",null,null],[11,"run_pass","","",11,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"elaborate_drops","rustc_mir::transform","",null,null],[3,"ElaborateDrops","rustc_mir::transform::elaborate_drops","",null,null],[11,"run_pass","","",12,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"add_call_guards","rustc_mir::transform","",null,null],[4,"AddCallGuards","rustc_mir::transform::add_call_guards","",null,null],[13,"AllCallEdges","","",13,null],[13,"CriticalCallEdges","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"addcallguards"}],"output":{"name":"bool"}}],[11,"run_pass","","",13,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"add_call_guards","","",13,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[0,"promote_consts","rustc_mir::transform","A pass that promotes borrows of constant rvalues.",null,null],[4,"TempState","rustc_mir::transform::promote_consts","State of a temporary during collection and promotion.",null,null],[13,"Undefined","","No references to this temp.",14,null],[13,"Defined","","One direct assignment and any number of direct uses. A borrow of this temp is promotable if the assigned value is qualified as constant.",14,null],[12,"location","rustc_mir::transform::promote_consts::TempState","",14,null],[12,"uses","","",14,null],[13,"Unpromotable","rustc_mir::transform::promote_consts","Any other combination of assignments/uses.",14,null],[13,"PromotedOut","","This temp was part of an rvalue which got extracted during promotion and needs cleanup.",14,null],[4,"Candidate","","A \"root candidate\" for promotion, which will become the returned value in a promoted MIR, unless it's a subset of a larger candidate.",null,null],[13,"Ref","","Borrow of a constant temporary.",15,null],[13,"ShuffleIndices","","Array of indices found in the third argument of a call to one of the simd_shuffleN intrinsics.",15,null],[5,"collect_temps","","",null,{"inputs":[{"name":"mir"},{"name":"reversepostorder"}],"output":{"name":"indexvec"}}],[5,"promote_candidates","","",null,{"inputs":[{"name":"mir"},{"name":"tyctxt"},{"name":"indexvec"},{"name":"vec"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"tempstate"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"tempstate"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"tempstate"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_promotable","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"qualify_consts","rustc_mir::transform","A pass that qualifies constness of temporaries in constants, static initializers and functions and also drives promotion.",null,null],[3,"QualifyAndPromoteConstants","rustc_mir::transform::qualify_consts","",null,null],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[11,"run_pass","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"dump_mir","rustc_mir::transform","This pass just dumps MIR at a specified point.",null,null],[3,"Marker","rustc_mir::transform::dump_mir","",null,null],[12,"0","","",17,null],[3,"Disambiguator","","",null,null],[3,"DumpMir","","",null,null],[5,"emit_mir","","",null,{"inputs":[{"name":"tyctxt"},{"name":"outputfilenames"}],"output":{"name":"result"}}],[11,"name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"run_pass","","",17,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"on_mir_pass","","",19,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsuite"},{"name":"mirpassindex"},{"name":"str"},{"name":"mirsource"},{"name":"mir"},{"name":"bool"}],"output":null}],[0,"deaggregator","rustc_mir::transform","",null,null],[3,"Deaggregator","rustc_mir::transform::deaggregator","",null,null],[11,"run_pass","","",20,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"instcombine","rustc_mir::transform","Performs various peephole optimizations.",null,null],[3,"InstCombine","rustc_mir::transform::instcombine","",null,null],[3,"InstCombineVisitor","","",null,null],[11,"run_pass","","",21,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"visit_rvalue","","",22,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[0,"copy_prop","rustc_mir::transform","Trivial copy propagation pass.",null,null],[3,"CopyPropagation","rustc_mir::transform::copy_prop","",null,null],[11,"run_pass","","",23,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"generator","rustc_mir::transform","This is the implementation of the pass which transforms generators into state machines.",null,null],[3,"StateTransform","rustc_mir::transform::generator","",null,null],[11,"run_pass","","",24,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"inline","rustc_mir::transform","Inlining pass for MIR functions",null,null],[3,"Inline","rustc_mir::transform::inline","",null,null],[11,"run_pass","","",25,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"nll","rustc_mir::transform","",null,null],[3,"NLL","rustc_mir::transform::nll","",null,null],[3,"Region","","",null,null],[3,"RegionIndex","","",null,null],[12,"0","","",26,null],[11,"run_pass","","",27,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"region"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add_point","","",28,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"may_contain","","",28,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"regionindex"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"regionindex"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"regionindex"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"regionindex"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"self"},{"name":"regionindex"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"self"},{"name":"regionindex"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"self"},{"name":"regionindex"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"self"},{"name":"regionindex"}],"output":{"name":"bool"}}],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"regionindex"}],"output":{"name":"ordering"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",26,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"util","rustc_mir","",null,null],[4,"PassWhere","rustc_mir::util","An indication of where we are in the control flow graph. Used for printing extra information in `dump_mir`",null,null],[13,"BeforeCFG","","We have not started dumping the control flow graph, but we are about to.",29,null],[13,"AfterCFG","","We just finished dumping the control flow graph. This is right before EOF",29,null],[13,"BeforeBlock","","We are about to start dumping the given basic block.",29,null],[13,"InCFG","","We are just about to dumpt the given statement or terminator.",29,null],[5,"dump_enabled","","",null,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"mirsource"}],"output":{"name":"bool"}}],[5,"dump_mir","","If the session is properly configured, dumps a human-readable representation of the mir into:",null,{"inputs":[{"name":"tyctxt"},{"name":"option"},{"name":"str"},{"name":"display"},{"name":"mirsource"},{"name":"mir"},{"name":"f"}],"output":null}],[5,"write_mir_pretty","","Write out a human-readable textual representation for the given MIR.",null,{"inputs":[{"name":"tyctxt"},{"name":"option"},{"name":"write"}],"output":{"name":"result"}}],[5,"write_mir_graphviz","","Write a graphviz DOT graph of a list of MIRs.",null,{"inputs":[{"name":"tyctxt"},{"name":"option"},{"name":"w"}],"output":{"name":"result"}}],[5,"write_graphviz_node_label","","Write a graphviz HTML-styled label for the given basic block, with all necessary escaping already performed. (This is suitable for emitting directly, as is done in this module, or for use with the LabelText::HtmlStr from libgraphviz.)",null,{"inputs":[{"name":"basicblock"},{"name":"mir"},{"name":"w"},{"name":"u32"},{"name":"init"},{"name":"fini"}],"output":{"name":"result"}}],[0,"borrowck_errors","","",null,null],[4,"Origin","rustc_mir::util::borrowck_errors","",null,null],[13,"Ast","","",30,null],[13,"Mir","","",30,null],[8,"BorrowckErrors","","",null,null],[10,"struct_span_err_with_code","","",31,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[10,"struct_span_err","","",31,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_move_when_borrowed","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_use_when_mutably_borrowed","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_act_on_uninitialized_variable","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_mutably_borrow_multiply","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_uniquely_borrow_by_two_closures","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"span"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_uniquely_borrow_by_one_closure","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"},{"name":"span"},{"name":"str"},{"name":"str"},{"name":"span"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_reborrow_already_uniquely_borrowed","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_reborrow_already_borrowed","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"span"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"span"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_assign_to_borrowed","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_move_into_closure","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_reassign_immutable","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_assign","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_assign_static","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_move_out_of","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_move_out_of_interior_noncopy","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"bool"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_move_out_of_interior_of_drop","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_act_on_moved_value","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_partially_reinit_an_uninit_struct","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"closure_cannot_assign_to_borrowed","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_borrow_path_as_mutable","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_borrow_across_generator_yield","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"path_does_not_live_long_enough","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"lifetime_too_short_for_reborrow","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_act_on_capture_in_sharable_fn","","",31,null],[11,"cannot_assign_into_immutable_reference","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"cannot_capture_in_long_lived_closure","","",31,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"origin"}],"output":{"name":"diagnosticbuilder"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"elaborate_drops","rustc_mir::util","",null,null],[4,"DropFlagState","rustc_mir::util::elaborate_drops","",null,null],[13,"Present","","",32,null],[13,"Absent","","",32,null],[4,"DropStyle","","",null,null],[13,"Dead","","",33,null],[13,"Static","","",33,null],[13,"Conditional","","",33,null],[13,"Open","","",33,null],[4,"DropFlagMode","","",null,null],[13,"Shallow","","",34,null],[13,"Deep","","",34,null],[4,"Unwind","","",null,null],[13,"To","","",35,null],[13,"InCleanup","","",35,null],[5,"elaborate_drop","","",null,null],[8,"DropElaborator","","",null,null],[16,"Path","","",36,null],[10,"patch","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mirpatch"}}],[10,"mir","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mir"}}],[10,"tcx","","",36,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[10,"param_env","","",36,{"inputs":[{"name":"self"}],"output":{"name":"paramenv"}}],[10,"drop_style","","",36,null],[10,"get_drop_flag","","",36,null],[10,"clear_drop_flag","","",36,null],[10,"field_subpath","","",36,null],[10,"deref_subpath","","",36,null],[10,"downcast_subpath","","",36,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"dropflagstate"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dropflagstate"}}],[11,"value","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unwind"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"def_use","rustc_mir::util","Def-use analysis.",null,null],[3,"DefUseAnalysis","rustc_mir::util::def_use","",null,null],[3,"Info","","",null,null],[12,"defs_and_uses","","",37,null],[3,"Use","","",null,null],[12,"context","","",38,null],[12,"location","","",38,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"new","","",39,{"inputs":[{"name":"mir"}],"output":{"name":"defuseanalysis"}}],[11,"analyze","","",39,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"local_info","","",39,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"info"}}],[11,"replace_all_defs_and_uses_with","","FIXME(pcwalton): This should update the def-use chains.",39,{"inputs":[{"name":"self"},{"name":"local"},{"name":"mir"},{"name":"local"}],"output":null}],[11,"def_count","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"def_count_not_including_drop","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"use_count","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"patch","rustc_mir::util","",null,null],[3,"MirPatch","rustc_mir::util::patch","This struct represents a patch to MIR, which can add new statements and basic blocks and patch over block terminators.",null,null],[11,"new","","",40,{"inputs":[{"name":"mir"}],"output":{"name":"self"}}],[11,"resume_block","","",40,{"inputs":[{"name":"self"}],"output":{"name":"basicblock"}}],[11,"is_patched","","",40,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"terminator_loc","","",40,{"inputs":[{"name":"self"},{"name":"mir"},{"name":"basicblock"}],"output":{"name":"location"}}],[11,"new_temp","","",40,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"}],"output":{"name":"local"}}],[11,"new_internal","","",40,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"}],"output":{"name":"local"}}],[11,"new_block","","",40,{"inputs":[{"name":"self"},{"name":"basicblockdata"}],"output":{"name":"basicblock"}}],[11,"patch_terminator","","",40,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminatorkind"}],"output":null}],[11,"add_statement","","",40,{"inputs":[{"name":"self"},{"name":"location"},{"name":"statementkind"}],"output":null}],[11,"add_assign","","",40,{"inputs":[{"name":"self"},{"name":"location"},{"name":"lvalue"},{"name":"rvalue"}],"output":null}],[11,"apply","","",40,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"source_info_for_index","","",40,{"inputs":[{"name":"basicblockdata"},{"name":"location"}],"output":{"name":"sourceinfo"}}],[11,"source_info_for_location","","",40,{"inputs":[{"name":"self"},{"name":"mir"},{"name":"location"}],"output":{"name":"sourceinfo"}}],[0,"liveness","rustc_mir::util","Liveness analysis which computes liveness of MIR local variables at the boundary of basic blocks",null,null],[3,"LivenessResult","rustc_mir::util::liveness","",null,null],[12,"ins","","",41,null],[12,"outs","","",41,null],[5,"liveness_of_locals","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"livenessresult"}}],[5,"dump_mir","","",null,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"mirsource"},{"name":"mir"},{"name":"livenessresult"}],"output":null}],[5,"write_mir_fn","","",null,{"inputs":[{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"},{"name":"write"},{"name":"livenessresult"}],"output":{"name":"result"}}],[6,"LocalSet","","",null,null],[17,"DIAGNOSTICS","rustc_mir","",null,null]],"paths":[[3,"AddValidation"],[3,"CleanEndRegions"],[3,"UnsafetyChecker"],[3,"SimplifyBranches"],[3,"SimplifyCfg"],[3,"CfgSimplifier"],[3,"SimplifyLocals"],[3,"EraseRegions"],[3,"NoLandingPads"],[3,"TypeChecker"],[3,"TypeckMir"],[3,"SanityCheck"],[3,"ElaborateDrops"],[4,"AddCallGuards"],[4,"TempState"],[4,"Candidate"],[3,"QualifyAndPromoteConstants"],[3,"Marker"],[3,"Disambiguator"],[3,"DumpMir"],[3,"Deaggregator"],[3,"InstCombine"],[3,"InstCombineVisitor"],[3,"CopyPropagation"],[3,"StateTransform"],[3,"Inline"],[3,"RegionIndex"],[3,"NLL"],[3,"Region"],[4,"PassWhere"],[4,"Origin"],[8,"BorrowckErrors"],[4,"DropFlagState"],[4,"DropStyle"],[4,"DropFlagMode"],[4,"Unwind"],[8,"DropElaborator"],[3,"Info"],[3,"Use"],[3,"DefUseAnalysis"],[3,"MirPatch"],[3,"LivenessResult"]]};
searchIndex["rustc_passes"] = {"doc":"Various checks","items":[[5,"provide","rustc_passes","",null,{"inputs":[{"name":"providers"}],"output":null}],[0,"ast_validation","","",null,null],[5,"check_crate","rustc_passes::ast_validation","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"consts","rustc_passes","",null,null],[5,"provide","rustc_passes::consts","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"hir_stats","rustc_passes","",null,null],[5,"print_hir_stats","rustc_passes::hir_stats","",null,{"inputs":[{"name":"crate"}],"output":null}],[5,"print_ast_stats","","",null,{"inputs":[{"name":"crate"},{"name":"str"}],"output":null}],[0,"loops","rustc_passes","",null,null],[5,"check_crate","rustc_passes::loops","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":null}],[0,"no_asm","rustc_passes","",null,null],[5,"check_crate","rustc_passes::no_asm","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"static_recursion","rustc_passes","",null,null],[5,"check_crate","rustc_passes::static_recursion","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[17,"DIAGNOSTICS","rustc_passes","",null,null]],"paths":[]};
searchIndex["rustc_platform_intrinsics"] = {"doc":"","items":[[3,"Intrinsic","rustc_platform_intrinsics","",null,null],[12,"inputs","","",0,null],[12,"output","","",0,null],[12,"definition","","",0,null],[4,"Type","","",null,null],[13,"Void","","",1,null],[13,"Integer","","",1,null],[13,"Float","","",1,null],[13,"Pointer","","",1,null],[13,"Vector","","",1,null],[13,"Aggregate","","",1,null],[4,"IntrinsicDef","","",null,null],[13,"Named","","",2,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"find","","",0,{"inputs":[{"name":"str"}],"output":{"name":"option"}}]],"paths":[[3,"Intrinsic"],[4,"Type"],[4,"IntrinsicDef"]]};
searchIndex["rustc_plugin"] = {"doc":"Infrastructure for compiler plugins.","items":[[0,"registry","rustc_plugin","Used by plugin crates to tell `rustc` about the plugins they provide.",null,null],[3,"Registry","rustc_plugin::registry","Structure used to register plugins.",null,null],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages from the plugin registrar.",0,null],[11,"args","","Get the plugin's arguments, if any.",0,null],[11,"register_syntax_extension","","Register a syntax extension of any kind.",0,{"inputs":[{"name":"self"},{"name":"name"},{"name":"syntaxextension"}],"output":null}],[11,"register_custom_derive","","This can be used in place of `register_syntax_extension` to register legacy custom derives (i.e. attribute syntax extensions whose name begins with `derive_`). Legacy custom derives defined by this function do not trigger deprecation warnings when used.",0,{"inputs":[{"name":"self"},{"name":"name"},{"name":"syntaxextension"}],"output":null}],[11,"take_whitelisted_custom_derives","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_macro","","Register a macro of the usual kind.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"macroexpanderfn"}],"output":null}],[11,"register_early_lint_pass","","Register a compiler lint pass.",0,{"inputs":[{"name":"self"},{"name":"earlylintpassobject"}],"output":null}],[11,"register_late_lint_pass","","Register a compiler lint pass.",0,{"inputs":[{"name":"self"},{"name":"latelintpassobject"}],"output":null}],[11,"register_lint_group","","Register a lint group.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"vec"}],"output":null}],[11,"register_llvm_pass","","Register an LLVM pass.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"register_attribute","","Register an attribute with an attribute type.",0,{"inputs":[{"name":"self"},{"name":"string"},{"name":"attributetype"}],"output":null}],[0,"load","rustc_plugin","Used by `rustc` when loading a plugin.",null,null],[3,"PluginRegistrar","rustc_plugin::load","",null,null],[12,"fun","","",1,null],[12,"args","","",1,null],[5,"load_plugins","","Read plugin metadata and dynamically load registrar functions.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crate"},{"name":"str"},{"name":"option"}],"output":{"name":"vec"}}],[6,"PluginRegistrarFun","","Pointer to a registrar function.",null,null],[0,"build","rustc_plugin","Used by `rustc` when compiling a plugin crate.",null,null],[5,"find_plugin_registrar","rustc_plugin::build","Find the function marked with `#[plugin_registrar]`, if any.",null,{"inputs":[{"name":"handler"},{"name":"map"}],"output":{"name":"option"}}],[17,"DIAGNOSTICS","rustc_plugin","",null,null]],"paths":[[3,"Registry"],[3,"PluginRegistrar"]]};
searchIndex["rustc_privacy"] = {"doc":"","items":[[5,"provide","rustc_privacy","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"rc"}}],[17,"DIAGNOSTICS","","",null,null]],"paths":[]};
searchIndex["rustc_resolve"] = {"doc":"","items":[[3,"PerNS","rustc_resolve","",null,null],[3,"ModuleData","","One node in the tree of modules.",null,null],[3,"NameBinding","","",null,null],[3,"Resolver","","The main resolver class.",null,null],[12,"definitions","","",0,null],[12,"freevars","","",0,null],[12,"export_map","","",0,null],[12,"trait_map","","",0,null],[12,"make_glob_map","","",0,null],[12,"glob_map","","Maps imports to the names of items actually imported (this actually maps all imports, but only glob imports are actually interesting).",0,null],[12,"maybe_unused_trait_imports","","",0,null],[12,"maybe_unused_extern_crates","","",0,null],[12,"whitelisted_legacy_custom_derives","","",0,null],[12,"found_unresolved_macro","","",0,null],[3,"ResolverArenas","","",null,null],[4,"Namespace","","",null,null],[13,"TypeNS","","",1,null],[13,"ValueNS","","",1,null],[13,"MacroNS","","",1,null],[4,"MakeGlobMap","","",null,null],[13,"Yes","","",2,null],[13,"No","","",2,null],[11,"next_node_id","","",0,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"get_module_scope","","",0,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[11,"eliminate_crate_var","","",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"is_whitelisted_legacy_custom_derive","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"visit_expansion","","",0,null],[11,"add_builtin","","",0,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"rc"}],"output":null}],[11,"resolve_imports","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"find_legacy_attr_invoc","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"resolve_invoc","","",0,{"inputs":[{"name":"self"},{"name":"invocation"},{"name":"mark"},{"name":"bool"}],"output":{"name":"result"}}],[11,"resolve_macro","","",0,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"macrokind"},{"name":"bool"}],"output":{"name":"result"}}],[11,"check_unused_macros","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"resolve_lexical_macro_path_segment","","",0,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"namespace"},{"name":"bool"},{"name":"span"}],"output":{"name":"result"}}],[11,"resolve_legacy_scope","","",0,{"inputs":[{"name":"self"},{"name":"cell"},{"name":"ident"},{"name":"bool"}],"output":{"name":"option"}}],[11,"finalize_current_module_macro_resolutions","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"define_macro","","",0,{"inputs":[{"name":"self"},{"name":"item"},{"name":"mark"},{"name":"legacyscope"}],"output":null}],[11,"define","","Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined; otherwise, reports an error.",0,{"inputs":[{"name":"self"},{"name":"moduledata"},{"name":"ident"},{"name":"namespace"},{"name":"t"}],"output":null}],[11,"get_module","","",0,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"moduledata"}}],[11,"macro_def_scope","","",0,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"moduledata"}}],[11,"get_macro","","",0,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"rc"}}],[11,"populate_module_if_necessary","","Ensures that the reduced graph rooted at the given external module is built, building it if it is not.",0,{"inputs":[{"name":"self"},{"name":"moduledata"}],"output":null}],[11,"resolve_ident_in_module_unadjusted","","Attempts to resolve `ident` in namespaces `ns` of `module`. Invariant: if `record_used` is `Some`, import resolution must be complete.",0,{"inputs":[{"name":"self"},{"name":"moduledata"},{"name":"ident"},{"name":"namespace"},{"name":"bool"},{"name":"bool"},{"name":"span"}],"output":{"name":"result"}}],[11,"add_import_directive","","",0,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"importdirectivesubclass"},{"name":"span"},{"name":"nodeid"},{"name":"visibility"},{"name":"mark"}],"output":null}],[11,"import","","",0,{"inputs":[{"name":"self"},{"name":"namebinding"},{"name":"importdirective"}],"output":{"name":"namebinding"}}],[11,"try_define","","",0,{"inputs":[{"name":"self"},{"name":"moduledata"},{"name":"ident"},{"name":"namespace"},{"name":"namebinding"}],"output":{"name":"result"}}],[11,"ambiguity","","",0,{"inputs":[{"name":"self"},{"name":"namebinding"},{"name":"namebinding"}],"output":{"name":"namebinding"}}],[17,"DIAGNOSTICS","","",null,null],[8,"ToNameBinding","","",null,null],[10,"to_name_binding","","",3,{"inputs":[{"name":"self"},{"name":"resolverarenas"}],"output":{"name":"namebinding"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"perns"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"perns"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"t"}}],[11,"index_mut","","",4,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"t"}}],[11,"visit_item","","",0,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_arm","","",0,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_block","","",0,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_expr","","",0,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_local","","",0,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_ty","","",0,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_poly_trait_ref","","",0,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant","","",0,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",0,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_fn","","",0,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_generics","","",0,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"namebinding"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"resolve_hir_path","","",0,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":null}],[11,"get_resolution","","",0,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"definitions","","",0,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"new","","",0,{"inputs":[{"name":"session"},{"name":"cratestore"},{"name":"crate"},{"name":"str"},{"name":"makeglobmap"},{"name":"crateloader"},{"name":"resolverarenas"}],"output":{"name":"resolver"}}],[11,"arenas","","",0,{"inputs":[],"output":{"name":"resolverarenas"}}],[11,"resolve_crate","","Entry point to crate resolution.",0,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"makeglobmap"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"makeglobmap"}}]],"paths":[[3,"Resolver"],[4,"Namespace"],[4,"MakeGlobMap"],[8,"ToNameBinding"],[3,"PerNS"],[3,"ModuleData"],[3,"NameBinding"]]};
searchIndex["rustc_save_analysis"] = {"doc":"","items":[[3,"SaveContext","rustc_save_analysis","",null,null],[3,"DumpHandler","","Dump the save-analysis results to a file.",null,null],[3,"CallbackHandler","","Call a callback with the results of save-analysis.",null,null],[12,"callback","","",0,null],[4,"Data","","",null,null],[13,"RefData","","",1,null],[13,"DefData","","",1,null],[13,"RelationData","","",1,null],[5,"process_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"crate"},{"name":"crateanalysis"},{"name":"str"},{"name":"option"},{"name":"h"}],"output":null}],[8,"SaveHandler","","Defines what to do with the results of saving the analysis.",null,null],[10,"save","","",2,{"inputs":[{"name":"self"},{"name":"savecontext"},{"name":"crate"},{"name":"str"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_external_crates","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_extern_item_data","","",3,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"option"}}],[11,"get_item_data","","",3,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"option"}}],[11,"get_field_data","","",3,{"inputs":[{"name":"self"},{"name":"structfield"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_method_data","","",3,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"name"},{"name":"span"}],"output":{"name":"option"}}],[11,"get_trait_ref_data","","",3,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"option"}}],[11,"get_expr_data","","",3,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"option"}}],[11,"get_path_def","","",3,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"hirdef"}}],[11,"get_path_data","","",3,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"path"}],"output":{"name":"option"}}],[11,"get_field_ref_data","","",3,{"inputs":[{"name":"self"},{"name":"field"},{"name":"variantdef"}],"output":{"name":"option"}}],[11,"get_macro_use_data","","Attempt to return MacroRef for any AST node.",3,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"new","","",4,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"dumphandler"}}],[11,"save","","",4,{"inputs":[{"name":"self"},{"name":"savecontext"},{"name":"crate"},{"name":"str"}],"output":null}],[11,"save","","",0,{"inputs":[{"name":"self"},{"name":"savecontext"},{"name":"crate"},{"name":"str"}],"output":null}]],"paths":[[3,"CallbackHandler"],[4,"Data"],[8,"SaveHandler"],[3,"SaveContext"],[3,"DumpHandler"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rustc_trans"] = {"doc":"The Rust compiler.","items":[[3,"LlvmMetadataLoader","rustc_trans","",null,null],[3,"LlvmTransCrate","","",null,null],[3,"ModuleTranslation","","",null,null],[12,"source","","",0,null],[12,"kind","","",0,null],[3,"CompiledModule","","",null,null],[12,"name","","",1,null],[12,"llmod_id","","",1,null],[12,"object","","",1,null],[12,"kind","","",1,null],[12,"pre_existing","","",1,null],[12,"emit_obj","","",1,null],[12,"emit_bc","","",1,null],[3,"ModuleLlvm","","",null,null],[12,"llmod","","",2,null],[3,"CrateTranslation","","",null,null],[12,"crate_name","","",3,null],[12,"modules","","",3,null],[12,"link","","",3,null],[12,"metadata","","",3,null],[3,"CrateInfo","","",null,null],[4,"ModuleKind","","",null,null],[13,"Regular","","",4,null],[13,"Metadata","","",4,null],[13,"Allocator","","",4,null],[4,"ModuleSource","","",null,null],[13,"Preexisting","","Copy the `.o` files or whatever from the incr. comp. directory.",5,null],[13,"Translated","","Rebuild from this LLVM module.",5,null],[5,"trans_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"receiver"}],"output":{"name":"ongoingcratetranslation"}}],[5,"init","","",null,{"inputs":[{"name":"session"}],"output":null}],[5,"target_features","","",null,{"inputs":[{"name":"session"}],"output":{"name":"vec"}}],[5,"print_version","","",null,{"inputs":[],"output":null}],[5,"print_passes","","",null,{"inputs":[],"output":null}],[5,"print","","",null,{"inputs":[{"name":"printrequest"},{"name":"session"}],"output":null}],[5,"enable_llvm_debug","","",null,{"inputs":[],"output":null}],[5,"provide_local","","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"provide_extern","","",null,{"inputs":[{"name":"providers"}],"output":null}],[0,"back","","",null,null],[0,"link","rustc_trans::back","",null,null],[5,"find_crate_name","rustc_trans::back::link","",null,null],[5,"filename_for_input","","",null,{"inputs":[{"name":"session"},{"name":"cratetype"},{"name":"str"},{"name":"outputfilenames"}],"output":{"name":"pathbuf"}}],[5,"default_output_for_target","","Returns default crate type for target",null,{"inputs":[{"name":"session"}],"output":{"name":"cratetype"}}],[5,"invalid_output_for_target","","Checks if target supports crate_type as output",null,{"inputs":[{"name":"session"},{"name":"cratetype"}],"output":{"name":"bool"}}],[5,"build_link_meta","","",null,{"inputs":[{"name":"fingerprint"}],"output":{"name":"linkmeta"}}],[5,"out_filename","","",null,{"inputs":[{"name":"session"},{"name":"cratetype"},{"name":"outputfilenames"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"check_file_is_writeable","","",null,null],[5,"get_linker","","",null,null],[5,"msvc_link_exe_cmd","","",null,null],[5,"remove","","",null,{"inputs":[{"name":"session"},{"name":"path"}],"output":null}],[5,"link_binary","","Perform the linkage portion of the compilation phase. This will generate all of the requested outputs for this compilation session.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"},{"name":"str"}],"output":{"name":"vec"}}],[5,"each_linked_rlib","","",null,{"inputs":[{"name":"session"},{"name":"crateinfo"},{"name":"fnmut"}],"output":{"name":"result"}}],[5,"ignored_for_lto","","Returns a boolean indicating whether the specified crate should be ignored during LTO.",null,{"inputs":[{"name":"crateinfo"},{"name":"cratenum"}],"output":{"name":"bool"}}],[17,"METADATA_MODULE_NAME","","The LLVM module name containing crate-metadata. This includes a `.` on purpose, so it cannot clash with the name of a user-defined module.",null,null],[17,"ALLOCATOR_MODULE_NAME","","",null,null],[0,"write","rustc_trans::back","",null,null],[3,"ModuleConfig","rustc_trans::back::write","Module-specific configuration for `optimize_and_codegen`.",null,null],[12,"opt_level","","Some(level) to optimize at a certain level, or None to run absolutely no optimizations (used for the metadata module).",6,null],[3,"CodegenContext","","Additional resources used by optimize_and_codegen (not module specific)",null,null],[12,"time_passes","","",7,null],[12,"lto","","",7,null],[12,"thinlto","","",7,null],[12,"no_landing_pads","","",7,null],[12,"save_temps","","",7,null],[12,"exported_symbols","","",7,null],[12,"opts","","",7,null],[12,"crate_types","","",7,null],[12,"each_linked_rlib_for_lto","","",7,null],[12,"tm_factory","","",7,null],[12,"msvc_imps_needed","","",7,null],[12,"target_pointer_width","","",7,null],[12,"total_cgus","","",7,null],[12,"diag_emitter","","",7,null],[12,"plugin_passes","","",7,null],[12,"remark","","",7,null],[12,"worker","","",7,null],[12,"incr_comp_session_dir","","",7,null],[3,"CompiledModules","","",null,null],[12,"modules","","",8,null],[12,"metadata_module","","",8,null],[12,"allocator_module","","",8,null],[3,"SharedEmitter","","",null,null],[3,"SharedEmitterMain","","",null,null],[3,"OngoingCrateTranslation","","",null,null],[5,"llvm_err","","",null,{"inputs":[{"name":"handler"},{"name":"string"}],"output":{"name":"fatalerror"}}],[5,"write_output_file","","",null,{"inputs":[{"name":"handler"},{"name":"targetmachineref"},{"name":"passmanagerref"},{"name":"moduleref"},{"name":"path"},{"name":"filetype"}],"output":{"name":"result"}}],[5,"create_target_machine","","",null,{"inputs":[{"name":"session"}],"output":{"name":"targetmachineref"}}],[5,"target_machine_factory","","",null,{"inputs":[{"name":"session"}],"output":{"name":"arc"}}],[5,"start_async_translation","","",null,{"inputs":[{"name":"tyctxt"},{"name":"option"},{"name":"linkmeta"},{"name":"encodedmetadata"},{"name":"receiver"},{"name":"usize"}],"output":{"name":"ongoingcratetranslation"}}],[5,"dump_incremental_data","","",null,{"inputs":[{"name":"cratetranslation"}],"output":null}],[5,"run_assembler","","",null,{"inputs":[{"name":"session"},{"name":"outputfilenames"}],"output":null}],[5,"with_llvm_pmb","","",null,{"inputs":[{"name":"moduleref"},{"name":"moduleconfig"},{"name":"codegenoptlevel"},{"name":"fnmut"}],"output":null}],[5,"submit_translated_module_to_llvm","","",null,{"inputs":[{"name":"tyctxt"},{"name":"moduletranslation"},{"name":"u64"}],"output":null}],[17,"RELOC_MODEL_ARGS","","",null,null],[17,"CODE_GEN_MODEL_ARGS","","",null,null],[17,"TRANS_WORKER_ID","","",null,null],[17,"TRANS_WORKER_TIMELINE","","",null,null],[17,"TRANS_WORK_PACKAGE_KIND","","",null,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"codegencontext"}}],[11,"create_diag_handler","","",7,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"config","","",7,{"inputs":[{"name":"self"},{"name":"modulekind"}],"output":{"name":"moduleconfig"}}],[11,"save_temp_bitcode","","",7,{"inputs":[{"name":"self"},{"name":"moduletranslation"},{"name":"str"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sharedemitter"}}],[11,"new","","",9,null],[11,"emit","","",9,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"check","","",10,{"inputs":[{"name":"self"},{"name":"session"},{"name":"bool"}],"output":null}],[11,"join","","",11,{"inputs":[{"name":"self"},{"name":"session"},{"name":"depgraph"}],"output":{"name":"cratetranslation"}}],[11,"submit_pre_translated_module_to_llvm","","",11,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"moduletranslation"}],"output":null}],[11,"translation_finished","","",11,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":null}],[11,"check_for_errors","","",11,{"inputs":[{"name":"self"},{"name":"session"}],"output":null}],[11,"wait_for_signal_to_translate_item","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"hash_stable","rustc_trans","",0,{"inputs":[{"name":"self"},{"name":"hcx"},{"name":"stablehasher"}],"output":null}],[11,"new","","",12,{"inputs":[{"name":"tyctxt"}],"output":{"name":"crateinfo"}}],[11,"get_rlib_metadata","","",13,{"inputs":[{"name":"self"},{"name":"target"},{"name":"path"}],"output":{"name":"result"}}],[11,"get_dylib_metadata","","",13,{"inputs":[{"name":"self"},{"name":"target"},{"name":"path"}],"output":{"name":"result"}}],[17,"DIAGNOSTICS","","",null,null],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"metadata_loader","","",14,{"inputs":[],"output":{"name":"box"}}],[11,"provide_local","","",14,{"inputs":[{"name":"providers"}],"output":null}],[11,"provide_extern","","",14,{"inputs":[{"name":"providers"}],"output":null}],[11,"trans_crate","","",14,null],[11,"join_trans","","",14,null],[11,"link_binary","","",14,null],[11,"dump_incremental_data","","",14,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"modulekind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"modulekind"}],"output":{"name":"bool"}}],[11,"llvm","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_compiled_module","","",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"outputfilenames"}],"output":{"name":"compiledmodule"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"ModuleTranslation"],[3,"CompiledModule"],[3,"ModuleLlvm"],[3,"CrateTranslation"],[4,"ModuleKind"],[4,"ModuleSource"],[3,"ModuleConfig"],[3,"CodegenContext"],[3,"CompiledModules"],[3,"SharedEmitter"],[3,"SharedEmitterMain"],[3,"OngoingCrateTranslation"],[3,"CrateInfo"],[3,"LlvmMetadataLoader"],[3,"LlvmTransCrate"]]};
searchIndex["rustc_trans_utils"] = {"doc":"Note","items":[[5,"check_for_rustc_errors_attr","rustc_trans_utils","check for the #[rustc_error] annotation, which forces an error in trans. This is used to write compile-fail tests that actually test that compilation succeeds without reporting an error.",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"find_exported_symbols","","The context provided lists a set of reachable ids as calculated by middle::reachable, but this contains far more ids and symbols than we're actually exposing from the object file. This function will filter the set in the context to the set of ids which correspond to symbols that are exposed from the object file being generated.",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"nodeset"}}],[0,"link","","",null,null],[5,"out_filename","rustc_trans_utils::link","",null,{"inputs":[{"name":"session"},{"name":"cratetype"},{"name":"outputfilenames"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"check_file_is_writeable","","",null,{"inputs":[{"name":"path"},{"name":"session"}],"output":null}],[5,"build_link_meta","","",null,{"inputs":[{"name":"fingerprint"}],"output":{"name":"linkmeta"}}],[5,"find_crate_name","","",null,null],[5,"filename_for_input","","",null,{"inputs":[{"name":"session"},{"name":"cratetype"},{"name":"str"},{"name":"outputfilenames"}],"output":{"name":"pathbuf"}}],[5,"default_output_for_target","","Returns default crate type for target",null,{"inputs":[{"name":"session"}],"output":{"name":"cratetype"}}],[5,"invalid_output_for_target","","Checks if target supports crate_type as output",null,{"inputs":[{"name":"session"},{"name":"cratetype"}],"output":{"name":"bool"}}],[0,"collector","rustc_trans_utils","Translation Item Collection ===========================",null,null],[3,"InliningMap","rustc_trans_utils::collector","Maps every translation item to all translation items it references in its body.",null,null],[4,"TransItemCollectionMode","","",null,null],[13,"Eager","","",0,null],[13,"Lazy","","",0,null],[5,"collect_crate_translation_items","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"transitemcollectionmode"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"transitemcollectionmode"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_inlining_candidates","","",1,{"inputs":[{"name":"self"},{"name":"transitem"},{"name":"f"}],"output":null}],[11,"iter_accesses","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[0,"trans_item","rustc_trans_utils","Walks the crate looking for items/impl-items/trait-items that have either a `rustc_symbol_name` or `rustc_item_path` attribute and generates an error giving, respectively, the symbol name or item-path. This is used for unit testing the code that generates paths etc in all kinds of annoying scenarios.",null,null],[4,"TransItem","rustc_trans_utils::trans_item","",null,null],[13,"Fn","","",2,null],[13,"Static","","",2,null],[13,"GlobalAsm","","",2,null],[3,"DefPathBasedNames","","Same as `unique_type_name()` but with the result pushed onto the given `output` parameter.",null,null],[4,"InstantiationMode","","Describes how a translation item will be instantiated in object files.",null,null],[13,"GloballyShared","","There will be exactly one instance of the given TransItem. It will have external linkage so that it can be linked to from other codegen units.",3,null],[12,"may_conflict","rustc_trans_utils::trans_item::InstantiationMode","In some compilation scenarios we may decide to take functions that are typically `LocalCopy` and instead move them to `GloballyShared` to avoid translating them a bunch of times. In this situation, however, our local copy may conflict with other crates also inlining the same function.",3,null],[13,"LocalCopy","rustc_trans_utils::trans_item","Each codegen unit containing a reference to the given TransItem will have its own private copy of the function (with internal linkage).",3,null],[5,"linkage_by_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[8,"TransItemExt","","",null,null],[10,"as_trans_item","","",4,{"inputs":[{"name":"self"}],"output":{"name":"transitem"}}],[11,"instantiation_mode","","",4,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"instantiationmode"}}],[11,"explicit_linkage","","",4,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"is_instantiable","","Returns whether this instance is instantiable - whether it has no unsatisfied predicates.",4,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"bool"}}],[11,"to_string","","",4,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"instantiationmode"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"instantiationmode"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"instantiationmode"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"as_trans_item","","",2,{"inputs":[{"name":"self"}],"output":{"name":"transitem"}}],[11,"new","","",5,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"push_type_name","","",5,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"string"}],"output":null}],[11,"push_def_path","","",5,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"string"}],"output":null}],[11,"push_instance_as_string","","",5,{"inputs":[{"name":"self"},{"name":"instance"},{"name":"string"}],"output":null}],[0,"monomorphize","rustc_trans_utils","",null,null],[3,"Instance","rustc_trans_utils::monomorphize","",null,null],[12,"def","","",6,null],[12,"substs","","",6,null],[5,"resolve_closure","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"closuresubsts"},{"name":"closurekind"}],"output":{"name":"instance"}}],[5,"resolve_drop_in_place","","",null,{"inputs":[{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"instance"}}],[5,"custom_coerce_unsize_info","","",null,{"inputs":[{"name":"tyctxt"},{"name":"ty"},{"name":"ty"}],"output":{"name":"customcoerceunsized"}}],[5,"field_ty","","Returns the normalized type of a struct field",null,{"inputs":[{"name":"tyctxt"},{"name":"substs"},{"name":"fielddef"}],"output":{"name":"ty"}}],[0,"trans_crate","rustc_trans_utils","The Rust compiler.",null,null],[3,"DummyTransCrate","rustc_trans_utils::trans_crate","",null,null],[3,"DummyMetadataLoader","","",null,null],[3,"NoLlvmMetadataLoader","","",null,null],[3,"MetadataOnlyTransCrate","","",null,null],[3,"OngoingCrateTranslation","","",null,null],[3,"TranslatedCrate","","",null,null],[8,"TransCrate","","",null,null],[16,"MetadataLoader","","",7,null],[16,"OngoingCrateTranslation","","",7,null],[16,"TranslatedCrate","","",7,null],[10,"metadata_loader","","",7,{"inputs":[],"output":{"name":"box"}}],[10,"provide_local","","",7,{"inputs":[{"name":"providers"}],"output":null}],[10,"provide_extern","","",7,{"inputs":[{"name":"providers"}],"output":null}],[10,"trans_crate","","",7,null],[10,"join_trans","","",7,null],[10,"link_binary","","",7,null],[10,"dump_incremental_data","","",7,null],[11,"metadata_loader","","",8,{"inputs":[],"output":{"name":"box"}}],[11,"provide_local","","",8,{"inputs":[{"name":"providers"}],"output":null}],[11,"provide_extern","","",8,{"inputs":[{"name":"providers"}],"output":null}],[11,"trans_crate","","",8,null],[11,"join_trans","","",8,null],[11,"link_binary","","",8,null],[11,"dump_incremental_data","","",8,null],[11,"get_rlib_metadata","","",9,{"inputs":[{"name":"self"},{"name":"target"},{"name":"path"}],"output":{"name":"result"}}],[11,"get_dylib_metadata","","",9,{"inputs":[{"name":"self"},{"name":"target"},{"name":"path"}],"output":{"name":"result"}}],[11,"get_rlib_metadata","","",10,{"inputs":[{"name":"self"},{"name":"target"},{"name":"path"}],"output":{"name":"result"}}],[11,"get_dylib_metadata","","",10,{"inputs":[{"name":"self"},{"name":"target"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"metadata_loader","","",11,{"inputs":[],"output":{"name":"box"}}],[11,"provide_local","","",11,{"inputs":[{"name":"providers"}],"output":null}],[11,"provide_extern","","",11,{"inputs":[{"name":"providers"}],"output":null}],[11,"trans_crate","","",11,null],[11,"join_trans","","",11,null],[11,"link_binary","","",11,null],[11,"dump_incremental_data","","",11,null],[11,"map_crate","rustc_trans_utils::monomorphize","",6,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"default_span","","",6,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"span"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash_stable","rustc_trans_utils::trans_item","",2,null],[11,"hash_stable","rustc_trans_utils::monomorphize","",6,null],[11,"eq","rustc_trans_utils::trans_item","",2,{"inputs":[{"name":"self"},{"name":"transitem"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"transitem"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans_utils::monomorphize","",6,{"inputs":[{"name":"self"},{"name":"instance"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"instance"}],"output":{"name":"bool"}}],[11,"hash","rustc_trans_utils::trans_item","",2,null],[11,"hash","rustc_trans_utils::monomorphize","",6,null],[11,"clone","rustc_trans_utils::trans_item","",2,{"inputs":[{"name":"self"}],"output":{"name":"transitem"}}],[11,"clone","rustc_trans_utils::monomorphize","",6,{"inputs":[{"name":"self"}],"output":{"name":"instance"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans_utils::trans_item","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","rustc_trans_utils::monomorphize","",6,{"inputs":[{"name":"defid"},{"name":"slice"}],"output":{"name":"instance"}}],[11,"mono","","",6,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"instance"}}],[11,"def_id","","",6,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"resolve","","Resolve a (def_id, substs) pair to an (optional) instance -- most commonly, this is used to find the precise code that will run for a trait method invocation, if known.",6,{"inputs":[{"name":"tyctxt"},{"name":"paramenv"},{"name":"defid"},{"name":"slice"}],"output":{"name":"option"}}]],"paths":[[4,"TransItemCollectionMode"],[3,"InliningMap"],[4,"TransItem"],[4,"InstantiationMode"],[8,"TransItemExt"],[3,"DefPathBasedNames"],[3,"Instance"],[8,"TransCrate"],[3,"DummyTransCrate"],[3,"DummyMetadataLoader"],[3,"NoLlvmMetadataLoader"],[3,"MetadataOnlyTransCrate"]]};
searchIndex["rustc_tsan"] = {"doc":"","items":[],"paths":[]};
searchIndex["rustc_typeck"] = {"doc":"typeck.rs, an introduction","items":[[3,"TypeAndSubsts","rustc_typeck","",null,null],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"result"}}],[5,"hir_ty_to_ty","","A quasi-deprecated helper used in rustdoc and save-analysis to get the type from a HIR node.",null,{"inputs":[{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"ty"}}],[17,"DIAGNOSTICS","","",null,null]],"paths":[]};
searchIndex["serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"hex","serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",0,null],[13,"InvalidHexLength","","The input had an invalid length",0,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"json","serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of compact data",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",3,null],[13,"U64","","",3,null],[13,"F64","","",3,null],[13,"String","","",3,null],[13,"Boolean","","",3,null],[13,"Array","","",3,null],[13,"Object","","",3,null],[13,"Null","","",3,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",4,null],[13,"InvalidNumber","","",4,null],[13,"EOFWhileParsingObject","","",4,null],[13,"EOFWhileParsingArray","","",4,null],[13,"EOFWhileParsingValue","","",4,null],[13,"EOFWhileParsingString","","",4,null],[13,"KeyMustBeAString","","",4,null],[13,"ExpectedColon","","",4,null],[13,"TrailingCharacters","","",4,null],[13,"TrailingComma","","",4,null],[13,"InvalidEscape","","",4,null],[13,"InvalidUnicodeCodePoint","","",4,null],[13,"LoneLeadingSurrogateInHexEscape","","",4,null],[13,"UnexpectedEndOfHexEscape","","",4,null],[13,"UnrecognizedHex","","",4,null],[13,"NotFourDigit","","",4,null],[13,"NotUtf8","","",4,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",5,null],[13,"IoError","","",5,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",6,null],[13,"ExpectedError","","",6,null],[13,"MissingFieldError","","",6,null],[13,"UnknownVariantError","","",6,null],[13,"ApplicationError","","",6,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",7,null],[13,"BadHashmapKey","","",7,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",8,null],[13,"ObjectEnd","","",8,null],[13,"ArrayStart","","",8,null],[13,"ArrayEnd","","",8,null],[13,"BooleanValue","","",8,null],[13,"I64Value","","",8,null],[13,"U64Value","","",8,null],[13,"F64Value","","",8,null],[13,"StringValue","","",8,null],[13,"NullValue","","",8,null],[13,"Error","","",8,null],[4,"StackElement","","StackElements compose a Stack. For example, StackElement::Key(\"foo\"), StackElement::Key(\"bar\"), StackElement::Index(3) and StackElement::Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",9,null],[13,"Key","","",9,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[5,"from_reader","","Decodes a json value from an `&mut io::Read`",null,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[5,"from_str","","Decodes a json value from a string",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",10,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"parsererror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"decodererror"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"encodererror"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",7,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new","","Creates a new JSON encoder whose output will be written to the writer specified.",11,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",11,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",11,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",11,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",11,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",11,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",11,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",11,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",11,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",11,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",11,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",11,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",11,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",11,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",11,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"new","","Creates a new encoder whose output will be written to the specified writer",12,{"inputs":[{"name":"write"}],"output":{"name":"prettyencoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"emit_nil","","",12,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",12,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",12,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",12,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",12,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",12,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",12,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",12,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",12,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",12,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",12,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",12,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",12,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",12,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",3,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",3,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"jsonevent"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",13,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",13,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",13,null],[11,"top","","Returns the top-most element (if any).",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",14,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",15,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",16,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u128","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i128","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",16,null],[11,"read_enum_variant_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",16,null],[11,"read_enum_struct_variant_field","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",3,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"opaque","serialize","",null,null],[3,"Encoder","serialize::opaque","",null,null],[12,"cursor","","",20,null],[3,"Decoder","","",null,null],[12,"data","","",21,null],[6,"EncodeResult","","",null,null],[11,"new","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",20,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",20,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",20,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",20,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",20,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",20,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",20,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",20,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",20,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",20,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",21,null],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u128","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i128","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"error","","",21,null],[0,"leb128","serialize","",null,null],[5,"write_unsigned_leb128_to","serialize::leb128","encodes an integer using unsigned leb128 encoding and stores the result using a callback function.",null,{"inputs":[{"name":"u128"},{"name":"w"}],"output":{"name":"usize"}}],[5,"write_unsigned_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"u128"}],"output":{"name":"usize"}}],[5,"read_unsigned_leb128","","",null,null],[5,"write_signed_leb128_to","","encodes an integer using signed leb128 encoding and stores the result using a callback function.",null,{"inputs":[{"name":"i128"},{"name":"w"}],"output":{"name":"usize"}}],[5,"write_signed_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"i128"}],"output":{"name":"usize"}}],[5,"read_signed_leb128","","",null,null],[8,"Decoder","serialize","",null,null],[16,"Error","","",22,null],[10,"read_nil","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u128","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i128","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_enum","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",22,null],[11,"read_enum_variant_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",22,null],[11,"read_enum_struct_variant_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",22,null],[8,"Encoder","","",null,null],[16,"Error","","",23,null],[10,"emit_nil","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u128","","",23,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[10,"emit_u64","","",23,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",23,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",23,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",23,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i128","","",23,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[10,"emit_i64","","",23,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",23,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",23,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",23,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",23,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",23,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",23,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",24,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"SpecializationError","","Implement this trait on your `{Encodable,Decodable}::Error` types to override the default panic behavior for missing specializations.",null,null],[10,"not_found","","Create an error for a missing method specialization. Defaults to panicking with type, trait & method names. `S` is the encoder/decoder state type, `T` is the type being encoded/decoded, and the arguments are the names of the trait and method that should've been overridden.",26,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[8,"SpecializedEncoder","","Implement this trait on encoders, with `T` being the type you want to encode (employing `UseSpecializedEncodable`), using a strategy specific to the encoder.",null,null],[10,"specialized_encode","","Encode the value in a manner specific to this encoder state.",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SpecializedDecoder","","Implement this trait on decoders, with `T` being the type you want to decode (employing `UseSpecializedDecodable`), using a strategy specific to the decoder.",null,null],[10,"specialized_decode","","Decode a value in a manner specific to this decoder state.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"UseSpecializedEncodable","","Implement this trait on your type to get an `Encodable` implementation which goes through `SpecializedEncoder`.",null,null],[11,"default_encode","","Defaults to returning an error (see `SpecializationError`).",29,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[8,"UseSpecializedDecodable","","Implement this trait on your type to get an `Decodable` implementation which goes through `SpecializedDecoder`.",null,null],[11,"default_decode","","Defaults to returning an error (see `SpecializationError`).",30,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"emit_enum","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",22,null],[11,"read_enum_variant_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",22,null],[11,"read_enum_struct_variant_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"default_encode","","Defaults to returning an error (see `SpecializationError`).",29,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"default_decode","","Defaults to returning an error (see `SpecializationError`).",30,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"PrettyEncoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"Encoder"],[3,"Decoder"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"SpecializationError"],[8,"SpecializedEncoder"],[8,"SpecializedDecoder"],[8,"UseSpecializedEncodable"],[8,"UseSpecializedDecodable"]]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["std"] = {"doc":"The Rust Standard Library","items":[[0,"any","std","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",null,null],[8,"Any","std::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"cell","std","Shareable mutable containers.",null,null],[3,"Cell","std::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","std::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",1,null],[0,"cmp","std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","std::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",2,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",2,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",3,null],[13,"Equal","","An ordering where a compared value is equal [to another].",3,null],[13,"Greater","","An ordering where a compared value is greater [than another].",3,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",4,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"convert","std","Traits for conversions between types.",null,null],[4,"Infallible","std::convert","A type used as the error type for implementations of fallible conversion traits in cases where conversions cannot actually fail.",null,null],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",null,null],[10,"as_ref","","Performs the conversion.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Error","","The type returned in the event of a conversion error.",11,null],[10,"try_into","","Performs the conversion.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",12,null],[10,"try_from","","Performs the conversion.",12,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"default","std","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",13,{"inputs":[],"output":{"name":"self"}}],[0,"hash","std","Generic hashing support.",null,null],[8,"Hash","std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",14,null],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",14,null],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",15,null],[11,"write_u8","","Writes a single `u8` into this hasher.",15,null],[11,"write_u16","","Writes a single `u16` into this hasher.",15,null],[11,"write_u32","","Writes a single `u32` into this hasher.",15,null],[11,"write_u64","","Writes a single `u64` into this hasher.",15,null],[11,"write_u128","","Writes a single `u128` into this hasher.",15,null],[11,"write_usize","","Writes a single `usize` into this hasher.",15,null],[11,"write_i8","","Writes a single `i8` into this hasher.",15,null],[11,"write_i16","","Writes a single `i16` into this hasher.",15,null],[11,"write_i32","","Writes a single `i32` into this hasher.",15,null],[11,"write_i64","","Writes a single `i64` into this hasher.",15,null],[11,"write_i128","","Writes a single `i128` into this hasher.",15,null],[11,"write_isize","","Writes a single `isize` into this hasher.",15,null],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",16,null],[10,"build_hasher","","Creates a new hasher.",16,null],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",null,null],[3,"SipHasher13","","An implementation of SipHash 1-3.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[0,"intrinsics","std","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","std::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may not overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",null,null],[5,"align_offset","","Computes the byte offset that needs to be applied to `ptr` in order to make it aligned to `align`. If it is not possible to align `ptr`, the implementation returns `usize::max_value()`.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"iter","std","Composable external iteration.",null,null],[3,"Rev","std::iter","A double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",17,null],[10,"next","","Advances the iterator and returns the next value.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",17,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",17,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",17,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",17,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",17,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",17,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",17,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",17,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",17,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",17,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",17,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",17,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",17,null],[11,"fold","","An iterator method that applies a function, producing a single, final value.",17,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",17,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",17,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",17,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",17,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",17,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",17,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",17,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",17,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",17,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",18,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",18,null],[10,"into_iter","","Creates an iterator from a value.",18,null],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",21,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",22,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",22,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",23,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_usize","","Add an usize, returning None on overflow",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",24,null],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[0,"marker","std","Primitive traits and types representing basic properties of types.",null,null],[8,"Send","std::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[0,"mem","std","Basic functions for dealing with memory.",null,null],[5,"forget","std::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","std","Overloadable operators.",null,null],[8,"RemAssign","std::ops","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",26,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",27,null],[16,"Place","","The place that will negotiate the storage of the data.",27,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",27,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",28,null],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",29,null],[10,"bitand","","Performs the `&` operation.",29,null],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",30,null],[10,"neg","","Performs the unary `-` operation.",30,null],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",31,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[8,"Fn","","The version of the call operator that takes an immutable receiver.",null,null],[10,"call","","Performs the call operation.",32,null],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","Executes the destructor for this type.",33,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",34,null],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",35,null],[10,"bitor","","Performs the `|` operation.",35,null],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",36,null],[12,"end","","The upper bound of the range (exclusive).",36,null],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",37,null],[8,"InPlace","","Specialization of `Place` trait supporting `PLACE <- EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `PLACE <- EXPR`",38,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",38,null],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",39,null],[12,"end","","The upper bound of the range (inclusive).",39,null],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",40,null],[10,"add","","Performs the `+` operation.",40,null],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",41,null],[10,"rem","","Performs the `%` operation.",41,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",42,null],[16,"Error","","The type of this value when viewed as failed.",42,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",42,null],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",42,null],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",43,null],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",44,null],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",45,null],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",46,null],[10,"not","","Performs the unary `!` operation.",46,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",47,null],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",48,null],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",49,null],[13,"Complete","","The generator completed with a return value.",49,null],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",50,null],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",51,null],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",52,null],[10,"div","","Performs the `/` operation.",52,null],[8,"Placer","","Interface to implementations of  `PLACE <- EXPR`.",null,null],[16,"Place","","`Place` is the intermediate agent guarding the uninitialized state for `Data`.",53,null],[10,"make_place","","Creates a fresh place from `self`.",53,null],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",54,null],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",null,null],[10,"deref_mut","","Mutably dereferences the value.",55,null],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",56,null],[10,"sub","","Performs the `-` operation.",56,null],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",57,null],[16,"Return","","The type of value this generator returns.",57,null],[10,"resume","","Resumes the execution of this generator.",57,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",58,null],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",59,null],[10,"mul","","Performs the `*` operation.",59,null],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",null,null],[16,"Output","","The returned type after indexing.",60,null],[10,"index","","Performs the indexing (`container[index]`) operation.",60,null],[8,"Place","","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",61,null],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",62,null],[10,"deref","","Dereferences the value.",62,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",63,{"inputs":[],"output":{"name":"self"}}],[3,"RangeFull","","An unbounded range (`..`).",null,null],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",64,null],[10,"call_once","","Performs the call operation.",64,null],[8,"Shl","","The left shift operator `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",65,null],[10,"shl","","Performs the `<<` operation.",65,null],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","Performs the call operation.",66,null],[8,"Shr","","The right shift operator `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",67,null],[10,"shr","","Performs the `>>` operation.",67,null],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",68,null],[10,"bitxor","","Performs the `^` operation.",68,null],[0,"ptr","std","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"drop_in_place","std::ptr","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"null","","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.",null,null],[5,"swap_nonoverlapping","","Swaps a sequence of values at two mutable locations of the same type.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old value, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",null,null],[5,"eq","","Compare raw pointers for equality.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper owns the referent. Useful for building abstractions like `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`.",null,null],[3,"Shared","","A wrapper around a raw `*mut T` that indicates that the possessor of this wrapper has shared ownership of the referent. Useful for building abstractions like `Rc<T>`, `Arc<T>`, or doubly-linked lists, which internally use aliased raw pointers to manage the memory that they own.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may not overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"TraitObject","std::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",69,null],[12,"vtable","","",69,null],[0,"result","std","Error handling with the `Result` type.",null,null],[4,"Result","std::result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",70,null],[13,"Err","","Contains the error value",70,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[0,"option","std","Optional values.",null,null],[4,"Option","std::option","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",71,null],[13,"Some","","Some value `T`",71,null],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",null,null],[0,"isize","std","The pointer-sized signed integer type.",null,null],[17,"MIN","std::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","std","The 8-bit signed integer type.",null,null],[17,"MIN","std::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","std","The 16-bit signed integer type.",null,null],[17,"MIN","std::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","std","The 32-bit signed integer type.",null,null],[17,"MIN","std::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","std","The 64-bit signed integer type.",null,null],[17,"MIN","std::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i128","std","The 128-bit signed integer type.",null,null],[17,"MIN","std::i128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","std","The pointer-sized unsigned integer type.",null,null],[17,"MIN","std::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","std","The 8-bit unsigned integer type.",null,null],[17,"MIN","std::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","std","The 16-bit unsigned integer type.",null,null],[17,"MIN","std::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","std","The 32-bit unsigned integer type.",null,null],[17,"MIN","std::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","std","The 64-bit unsigned integer type.",null,null],[17,"MIN","std::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"boxed","std","A pointer type for heap allocation.",null,null],[17,"HEAP","std::boxed","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",72,null],[10,"call_box","","",72,null],[0,"rc","std","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Rc","std::rc","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.",null,null],[0,"borrow","std","A module for working with borrowed data.",null,null],[8,"ToOwned","std::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",73,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",73,null],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",73,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",74,null],[13,"Owned","","Owned data.",74,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",75,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",76,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"fmt","std","Utilities for formatting and printing `String`s",null,null],[5,"format","std::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[6,"Result","","The type returned by formatter methods.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",79,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",79,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"slice","std","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","std::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",87,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",87,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",87,null],[10,"connect","","",87,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",88,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",88,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",88,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",88,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",88,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a time).",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[0,"str","std","Unicode string slices.",null,null],[3,"EncodeUtf16","std::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",89,null],[10,"from_str","","Parses a string `s` to return a value of this type.",89,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",90,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",90,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",91,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",91,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",91,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",92,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",93,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"RSplit","std::str","Created with the method [`rsplit`].",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[0,"string","std","A UTF-8 encoded, growable string.",null,null],[3,"String","std::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",94,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","std","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",null,null],[3,"Vec","std::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[0,"char","std","A character type.",null,null],[3,"ToLowercase","std::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[3,"UnicodeVersion","","Represents a Unicode Version.",null,null],[12,"major","","Major version.",95,null],[12,"minor","","Minor version.",95,null],[12,"micro","","Micro (or Update) version.",95,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[0,"u128","std","The 128-bit unsigned integer type.",null,null],[17,"MIN","std::u128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"prelude","std","The Rust Prelude.",null,null],[0,"v1","std::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[0,"f32","std","This module provides constants which are specific to the implementation of the `f32` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module.",null,null],[17,"RADIX","std::f32","The radix or base of the internal representation of `f32`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f32::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[0,"f64","std","This module provides constants which are specific to the implementation of the `f64` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module.",null,null],[17,"RADIX","std::f64","The radix or base of the internal representation of `f64`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f64::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[0,"thread","std","Native threads.",null,null],[3,"LocalKey","std::thread","A thread local storage key which owns its contents.",null,null],[3,"AccessError","","An error returned by `LocalKey::try_with`.",null,null],[3,"Builder","","Thread factory, which can be used in order to configure the properties of a new thread.",null,null],[3,"ThreadId","","A unique identifier for a running thread.",null,null],[3,"Thread","","A handle to a thread.",null,null],[3,"JoinHandle","","An owned permission to join on a thread (block on its termination).",null,null],[4,"LocalKeyState","","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will transition to the `Valid` state once the first call to [`with`] happens and the initialization expression succeeds.",96,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid` state. Keys in the `Valid` state will remain so until the thread exits, at which point the destructor will be run and the key will enter the `Destroyed` state.",96,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if necessary). While a destructor is running, and possibly after a destructor has run, a key is in the `Destroyed` state.",96,null],[5,"spawn","","Spawns a new thread, returning a [`JoinHandle`] for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,{"inputs":[],"output":null}],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,{"inputs":[{"name":"duration"}],"output":null}],[5,"park","","Blocks unless or until the current thread's token is made available.",null,{"inputs":[],"output":null}],[5,"park_timeout_ms","","Use [`park_timeout`].",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"park_timeout","","Blocks unless or until the current thread's token is made available or the specified duration has been reached (may wake spuriously).",null,{"inputs":[{"name":"duration"}],"output":null}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"localkeystate"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with","","Acquires a reference to the value in this TLS key.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",97,{"inputs":[{"name":"self"}],"output":{"name":"localkeystate"}}],[11,"try_with","","Acquires a reference to the value in this TLS key.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[6,"Result","","A specialized [`Result`] type for threads.",null,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Generates the base configuration for spawning a thread, from which configuration methods can be chained.",99,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",99,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack (in bytes) for the new thread.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread by taking ownership of the `Builder`, and returns an [`io::Result`] to its [`JoinHandle`].",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"threadid"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"threadid"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"threadid"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",101,{"inputs":[{"name":"self"}],"output":null}],[11,"id","","Gets the thread's unique identifier.",101,{"inputs":[{"name":"self"}],"output":{"name":"threadid"}}],[11,"name","","Gets the thread's name.",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"thread","","Extracts a handle to the underlying thread.",102,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ascii","std","Operations on ASCII strings and characters.",null,null],[3,"EscapeDefault","std::ascii","An iterator over the escaped version of a byte.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[8,"AsciiExt","","Extension methods for ASCII-subset only operations.",null,null],[16,"Owned","","Container type for copied ASCII characters.",103,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case equivalent.",103,null],[10,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case equivalent.",103,null],[10,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive match.",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",103,{"inputs":[{"name":"self"}],"output":null}],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",103,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character: U+0041 'A' ... U+005A 'Z' or U+0061 'a' ... U+007A 'z'. For strings, true if all characters in the string are ASCII alphabetic.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character: U+0041 'A' ... U+005A 'Z'. For strings, true if all characters in the string are ASCII uppercase.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character: U+0061 'a' ... U+007A 'z'. For strings, true if all characters in the string are ASCII lowercase.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character: U+0041 'A' ... U+005A 'Z', U+0061 'a' ... U+007A 'z', or U+0030 '0' ... U+0039 '9'. For strings, true if all characters in the string are ASCII alphanumeric.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 '0' ... U+0039 '9'. For strings, true if all characters in the string are ASCII digits.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit: U+0030 '0' ... U+0039 '9', U+0041 'A' ... U+0046 'F', or U+0061 'a' ... U+0066 'f'. For strings, true if all characters in the string are ASCII hex digits.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character:",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021 '@' ... U+007E '~'. For strings, true if all characters in the string are ASCII punctuation.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character: U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED, U+000C FORM FEED, or U+000D CARRIAGE RETURN. For strings, true if all characters in the string are ASCII whitespace.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000 NUL ... U+001F UNIT SEPARATOR, or U+007F DELETE. Note that most ASCII whitespace characters are control characters, but SPACE is not.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"collections","std","Collection types.",null,null],[4,"Bound","std::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",105,null],[13,"Excluded","","An exclusive bound.",105,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",105,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring buffer.",null,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"BinaryHeapPlace","","",null,null],[0,"btree_map","std::collections","A map based on a B-Tree.",null,null],[3,"Values","std::collections::btree_map","An iterator over the values of a `BTreeMap`.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant entry.",106,null],[13,"Occupied","","An occupied entry.",106,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[0,"btree_set","std::collections","A set based on a B-Tree.",null,null],[3,"SymmetricDifference","std::collections::btree_set","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `BTreeSet`s.",null,null],[3,"Iter","","An iterator over the items of a `BTreeSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `BTreeSet`s.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[0,"linked_list","std::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","std::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[0,"vec_deque","std::collections","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"VecDeque","std::collections::vec_deque","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `VecDeque`.",null,null],[3,"PlaceFront","","A place for insertion at the front of a `VecDeque`.",null,null],[0,"range","std::collections","Range syntax.",null,null],[8,"RangeArgument","std::collections::range","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound.",107,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound.",107,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[3,"HashMap","std::collections","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty `HashMap`.",108,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",108,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",108,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",108,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",108,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",108,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",108,{"inputs":[{"name":"self"}],"output":null}],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",108,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",108,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",108,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",108,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",108,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",108,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",108,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",108,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",108,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",108,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",108,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",108,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",108,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty `HashSet`.",109,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",109,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",109,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",109,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",109,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",109,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",109,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",109,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",109,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",109,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",109,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",109,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",109,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",109,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",109,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",109,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",109,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",109,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",109,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",109,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[0,"hash_map","","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"HashMap","std::collections::hash_map","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",null,null],[3,"Keys","","An iterator over the keys of a `HashMap`.",null,null],[3,"Values","","An iterator over the values of a `HashMap`.",null,null],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[3,"EntryPlace","","A place for insertion to a `Entry`.",null,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Occupied","","An occupied entry.",110,null],[13,"Vacant","","A vacant entry.",110,null],[0,"hash_set","std::collections","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[3,"HashSet","std::collections::hash_set","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[3,"Iter","","An iterator over the items of a `HashSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[3,"Drain","","A draining iterator over the items of a `HashSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `HashSet`s.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `HashSet`s.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `HashSet`s.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `HashSet`s.",null,null],[0,"env","std","Inspection and manipulation of the process's environment.",null,null],[3,"Vars","std::env","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"SplitPaths","","An iterator that splits an environment variable into paths according to platform-specific conventions.",null,null],[3,"JoinPathsError","","The error type for operations on the `PATH` variable. Possibly returned from the [`env::join_paths`] function.",null,null],[3,"Args","","An iterator over the arguments of a process, yielding a [`String`] value for each argument.",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an [`OsString`] value for each argument.",null,null],[4,"VarError","","The error type for operations interacting with environment variables. Possibly returned from the [`env::var`] function.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current process's environment.",111,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain valid unicode data. The found data is returned as a payload of this variant.",111,null],[5,"current_dir","","Returns the current working directory as a [`PathBuf`].",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning [`None`] if the variable isn't set.",null,{"inputs":[{"name":"k"}],"output":{"name":"option"}}],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running process.",null,{"inputs":[{"name":"k"},{"name":"v"}],"output":null}],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,{"inputs":[{"name":"k"}],"output":null}],[5,"split_paths","","Parses input according to platform conventions for the `PATH` environment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[5,"join_paths","","Joins a collection of [`Path`]s appropriately for the `PATH` environment variable.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"home_dir","","Returns the path of the current user's home directory if known.",null,{"inputs":[],"output":{"name":"option"}}],[5,"temp_dir","","Returns the path of a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path of the current running executable.",null,{"inputs":[],"output":{"name":"result"}}],[5,"args","","Returns the arguments which this program was started with (normally passed via the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed via the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","std::env::consts","A string describing the architecture of the CPU that is currently in use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use. Example value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this platform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this platform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this platform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this platform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries on this platform. Example value is `exe`.",null,null],[11,"next","std::env","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"varerror"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"len","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"len","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","std","Traits for working with Errors.",null,null],[8,"Error","std::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"cow"}],"output":{"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"cow"}],"output":{"name":"box"}}],[11,"description","std::str","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",121,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::string","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",123,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::char","",125,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","std::fmt","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::cell","",127,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::char","",129,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",130,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::convert","",131,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is","std::error","Returns true if the boxed type is the same as `T`",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",118,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",118,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",118,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[0,"ffi","std","Utilities related to FFI bindings.",null,null],[3,"CString","std::ffi","A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the middle.",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"NulError","","An error indicating that an interior nul byte was found.",null,null],[3,"IntoStringError","","An error indicating invalid UTF-8 when converting a [`CString`] into a [`String`].",null,null],[3,"FromBytesWithNulError","","An error indicating that a nul byte was not in the expected position.",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings.",null,null],[3,"OsStr","","Borrowed reference to an OS string (see [`OsString`]).",null,null],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"cmp","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"hash","","",132,null],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"hash","","",133,null],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"nulerror"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"frombyteswithnulerror"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"intostringerror"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",132,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string by consuming a byte vector, without checking for interior 0 bytes.",132,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C via [`into_raw`].",132,null],[11,"into_raw","","Consumes the `CString` and transfers ownership of the string to a C caller.",132,null],[11,"into_string","","Converts the `CString` into a [`String`] if it contains valid UTF-8 data.",132,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_bytes","","Consumes the `CString` and returns the underlying byte buffer.",132,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the [`into_bytes`] function except that the returned vector includes the trailing nul terminator.",132,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",132,null],[11,"as_bytes_with_nul","","Equivalent to the [`as_bytes`] function except that the returned slice includes the trailing nul terminator.",132,null],[11,"as_c_str","","Extracts a [`CStr`] slice containing the entire string.",132,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"into_boxed_c_str","","Converts this `CString` into a boxed [`CStr`].",132,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"drop","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `CString`.",132,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",132,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"cstr"}],"output":{"name":"box"}}],[11,"from","std::ffi","",132,{"inputs":[{"name":"box"}],"output":{"name":"cstring"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"cstring"}],"output":{"name":"box"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"box"}}],[11,"nul_position","std::ffi","Returns the position of the nul byte in the slice that caused [`CString::new`] to fail.",134,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which generated the error in the first place.",134,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"description","","",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",135,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_cstring","","Consumes this error, returning original [`CString`] which generated the error.",136,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",136,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"description","","",136,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ptr","","Wraps a raw C string with a safe C string wrapper.",133,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",133,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",133,null],[11,"as_ptr","","Returns the inner pointer to this C string.",133,null],[11,"to_bytes","","Converts this C string to a byte slice.",133,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",133,null],[11,"to_str","","Yields a [`&str`] slice if the `CStr` contains valid UTF-8.",133,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a [`Cow`]`<`[`str`]`>`.",133,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"into_c_string","","Converts a [`Box`]`<CStr>` into a [`CString`] without copying or allocating.",133,{"inputs":[{"name":"box"}],"output":{"name":"cstring"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",133,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"from","","",132,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",132,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",133,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",138,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an [`OsStr`] slice.",138,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a [`String`] if it contains valid Unicode data.",138,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given [`&OsStr`] slice.",138,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",138,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",138,{"inputs":[{"name":"self"}],"output":null}],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",138,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted in the given `OsString`.",138,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the given `OsString`. Does nothing if the capacity is already sufficient.",138,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the `OsString` to match its length.",138,{"inputs":[{"name":"self"}],"output":null}],[11,"into_boxed_os_str","","Converts this `OsString` into a boxed [`OsStr`].",138,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"from","","",138,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",138,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",138,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"deref","","",138,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"default","","Constructs an empty `OsString`.",138,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",138,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",138,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",138,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",138,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",138,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",138,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Coerces into an `OsStr` slice.",139,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `OsStr` is valid Unicode.",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.",139,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned [`OsString`].",139,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"is_empty","","Checks whether the `OsStr` is empty.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this `OsStr`.",139,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_os_string","","Converts a [`Box`]`<OsStr>` into an [`OsString`] without copying or allocating.",139,{"inputs":[{"name":"box"}],"output":{"name":"osstring"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"osstr"}],"output":{"name":"box"}}],[11,"from","std::ffi","",138,{"inputs":[{"name":"box"}],"output":{"name":"osstring"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"osstring"}],"output":{"name":"box"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"box"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",138,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",138,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"hash","","",139,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",138,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_owned","","",139,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"clone_into","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":null}],[11,"as_ref","","",139,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",138,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","std::string","",140,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[0,"fs","std","Filesystem manipulation operations.",null,null],[3,"File","std::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the [`ReadDir`] iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","A structure representing a type of file with accessors for each file type. It is returned by [`Metadata::file_type`] method.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file, directory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also copy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components normalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they are missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use carefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"metadata"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"hash","","",145,null],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",147,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",147,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",147,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to [`sync_all`], except that it may not synchronize file metadata to the filesystem.",147,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of this file to become `size`.",147,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",147,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",147,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_permissions","","Changes the permissions on the underlying file.",147,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",147,null],[11,"initializer","","",147,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"write","","",147,null],[11,"flush","","",147,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",147,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",143,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",143,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",143,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",143,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",143,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",143,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","Sets the option to always create a new file.",143,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",143,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",141,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",141,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"modified","","Returns the last modification time listed in this metadata.",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accessed","","Returns the last access time of this metadata.",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"created","","Returns the creation time listed in the this metadata.",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readonly","","Returns whether these permissions describe a readonly (unwritable) file.",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions. If the `readonly` argument is `true`, using the resulting `Permission` will update file permissions to forbid writing. Conversely, if it's `false`, using the resulting `Permission` will update file permissions to allow writing.",144,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dir","","Test whether this file type represents a directory.",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",148,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",148,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",148,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other leading path component.",148,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new set of options with default mode/security settings for all platforms and also non-recursive.",146,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicates that directories should be created recursively, creating all parent directories. Parents that do not exist are created with the same security and permissions settings.",146,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"create","","Create the specified directory with the options configured in this builder.",146,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[0,"io","std","Traits, helpers, and type definitions for core I/O functionality.",null,null],[3,"BufReader","std::io","The `BufReader` struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline (`0x0a`, `'\\n'`) is detected.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a [`Seek`] implementation.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"Initializer","","A type used to conditionally initialize buffers passed to `Read` methods.",null,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a particular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",149,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",149,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",149,null],[13,"ConnectionReset","","The connection was reset by the remote server.",149,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",149,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",149,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",149,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",149,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",149,null],[13,"AlreadyExists","","An entity already exists, often a file.",149,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",149,null],[13,"InvalidInput","","A parameter was incorrect.",149,null],[13,"InvalidData","","Data not valid for the operation were encountered.",149,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",149,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",149,null],[13,"Interrupted","","This operation was interrupted.",149,null],[13,"Other","","Any I/O error not part of this list.",149,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",149,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",150,null],[13,"End","","Set the offset to the size of this object plus the specified number of bytes.",150,null],[13,"Current","","Set the offset to the current position plus the specified number of bytes.",150,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars` adapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully but it did not contain valid utf8 data.",151,null],[13,"Other","","Variant representing that an I/O error occurred.",151,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[0,"prelude","","The I/O Prelude",null,null],[11,"new","","Creates a new `BufReader` with a default buffer capacity.",152,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",152,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",152,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",152,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",152,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",152,null],[11,"initializer","","",152,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",152,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",152,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",152,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",154,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",154,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",154,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",154,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",154,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",154,null],[11,"flush","","",154,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",154,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",154,{"inputs":[{"name":"self"}],"output":null}],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",153,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",153,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"from","","",155,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","","",153,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",156,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal buffer.",156,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",156,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",156,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",156,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",156,null],[11,"flush","","",156,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",157,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",157,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",157,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"seek","","",157,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",157,null],[11,"initializer","","",157,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",157,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",157,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",157,null],[11,"flush","","",157,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",157,null],[11,"flush","","",157,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",157,null],[11,"flush","","",157,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",149,null],[11,"cmp","","",149,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",149,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"option"}}],[11,"from","","",155,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",155,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",155,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",155,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",155,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",155,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","std::boxed","",119,null],[11,"initializer","","",119,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",119,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",119,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",119,null],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",119,null],[11,"write_fmt","","",119,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",119,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","",119,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",119,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","std::vec","",137,null],[11,"write_all","","",137,null],[11,"flush","","",137,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","std::io","",158,null],[11,"initializer","","",158,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",158,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",158,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",159,null],[11,"initializer","","",159,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",160,null],[11,"flush","","",160,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard input stream, returning a readable guard.",161,{"inputs":[{"name":"self"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",161,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",161,null],[11,"initializer","","",161,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",161,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",161,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",161,null],[11,"read","","",162,null],[11,"initializer","","",162,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",162,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",162,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard output stream, returning a writable guard.",163,{"inputs":[{"name":"self"}],"output":{"name":"stdoutlock"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",163,null],[11,"flush","","",163,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",163,null],[11,"write_fmt","","",163,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",164,null],[11,"flush","","",164,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable guard.",165,{"inputs":[{"name":"self"}],"output":{"name":"stderrlock"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",165,null],[11,"flush","","",165,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",165,null],[11,"write_fmt","","",165,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",166,null],[11,"flush","","",166,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",167,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",167,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",167,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",167,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",167,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",167,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",167,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",167,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",167,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",167,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",168,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",168,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",168,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",168,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",168,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of bytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",169,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it to perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",170,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer, so they should no longer be returned in calls to `read`.",170,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` or EOF is reached.",170,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append them to the provided buffer.",170,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte `byte`.",170,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",170,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",171,{"inputs":[],"output":{"name":"initializer"}}],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",171,{"inputs":[],"output":{"name":"initializer"}}],[11,"should_initialize","","Indicates if a buffer should be initialized.",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"initialize","","Initializes a buffer if necessary.",171,null],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"seekfrom"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes the `Chain`, returning the wrapped readers.",172,null],[11,"get_ref","","Gets references to the underlying readers in this `Chain`.",172,null],[11,"get_mut","","Gets mutable references to the underlying readers in this `Chain`.",172,null],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",172,null],[11,"initializer","","",172,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",172,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",172,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"limit","","Returns the number of bytes that can be read before this instance will return EOF.",173,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_limit","","Sets the number of bytes that can be read before this instance will return EOF. This is the same as constructing a new `Take` instance, so the amount of bytes read and the previous limit value don't matter when calling this method.",173,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"into_inner","","Consumes the `Take`, returning the wrapped reader.",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying reader.",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","",173,null],[11,"initializer","","",173,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",173,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",173,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",151,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",151,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"net","std","Networking primitives for TCP/UDP communication.",null,null],[3,"Ipv4Addr","std::net","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[3,"SocketAddrV4","","An IPv4 socket address.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[3,"TcpStream","","A TCP stream between a local and a remote socket.",null,null],[3,"TcpListener","","A TCP socket server, listening for connections.",null,null],[3,"Incoming","","An iterator that infinitely [`accept`]s connections on a [`TcpListener`].",null,null],[3,"UdpSocket","","A UDP socket.",null,null],[3,"AddrParseError","","An error which can be returned when parsing an IP address or a socket address.",null,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[4,"IpAddr","","An IP address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 address.",178,null],[13,"V6","","An IPv6 address.",178,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",179,null],[13,"LinkLocal","","",179,null],[13,"RealmLocal","","",179,null],[13,"AdminLocal","","",179,null],[13,"SiteLocal","","",179,null],[13,"OrganizationLocal","","",179,null],[13,"Global","","",179,null],[4,"SocketAddr","","An internet socket address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 socket address.",180,null],[13,"V6","","An IPv6 socket address.",180,null],[4,"Shutdown","","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",181,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",181,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",181,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",178,null],[11,"partial_cmp","","",178,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",178,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",178,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",178,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",178,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"cmp","","",178,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"ipv6multicastscope"}}],[11,"hash","","",179,null],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv4","","Returns [`true`] if this address is an [IPv4 address], and [`false`] otherwise.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if this address is an [IPv6 address], and [`false`] otherwise.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",182,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"localhost","","Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.",182,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"unspecified","","Creates a new IPv4 address representing an unspecified address: 0.0.0.0",182,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",182,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (0.0.0.0).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (127.0.0.0/8).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_private","","Returns [`true`] if this is a private address.",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns [`true`] if the address is link-local (169.254.0.0/16).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (224.0.0.0/4).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address (255.255.255.255).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",182,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",182,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",178,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipaddr"}}],[11,"from","","",178,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",182,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",182,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",178,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",182,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"cmp","","",182,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","It performs the conversion in network order (big-endian).",182,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",182,null],[11,"from","","",178,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",183,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"localhost","","Creates a new IPv6 address representing localhost: `::1`.",183,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"unspecified","","Creates a new IPv6 address representing the unspecified address: `::`",183,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",183,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns [`true`] if this is a unique local address (fc00::/7).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns [`true`] if the address is unicast and link-local (fe80::/10).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this is an address reserved for documentation (2001:db8::/32).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable unicast address.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns [`None`] if this address is neither IPv4-compatible or IPv4-mapped.",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",183,null],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",183,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",183,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",178,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"cmp","","",183,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"from","","",183,{"inputs":[{"name":"u128"}],"output":{"name":"ipv6addr"}}],[11,"from","","",183,null],[11,"from","","",183,null],[11,"from","","",178,null],[11,"from","","",178,null],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"hash","","",180,null],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new socket address from an [IP address] and a port number.",180,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",180,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",180,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",180,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",180,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"is_ipv4","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv4 address], and [`false`] otherwise.",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv6 address], and [`false`] otherwise.",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new socket address from an [IPv4 address] and a port number.",184,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",184,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",184,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",184,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",184,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"new","","Creates a new socket address from an [IPv6 address], a 16-bit port number, and the `flowinfo` and `scope_id` fields.",185,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",185,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",185,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",185,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",185,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"flowinfo","","Returns the flow information associated with this address.",185,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_flowinfo","","Changes the flow information associated with this socket address.",185,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"scope_id","","Returns the scope ID associated with this address.",185,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_scope_id","","Change the scope ID associated with this socket address.",185,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from","","",180,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddr"}}],[11,"from","","",180,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddr"}}],[11,"from","","",180,null],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",184,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",185,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_socket_addrs","","",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",185,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","std::string","",140,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","std::net","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Opens a TCP connection to a remote host.",187,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"connect_timeout","","Opens a TCP connection to a remote host with a timeout.",187,{"inputs":[{"name":"socketaddr"},{"name":"duration"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",187,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",187,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",187,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",187,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",187,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",187,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",187,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"read","","",187,null],[11,"initializer","","",187,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"write","","",187,null],[11,"flush","","",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified address.",188,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",188,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",188,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",188,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this listener.",188,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",188,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",188,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_only_v6","","",188,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",188,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",188,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",188,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"next","","",186,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a UDP socket from the given address.",189,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives a single datagram message on the socket. On success, returns the number of bytes read and the origin.",189,null],[11,"peek_from","","Receives a single datagram message on the socket, without removing it from the queue. On success, returns the number of bytes read and the origin.",189,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",189,null],[11,"local_addr","","Returns the socket address that this socket was created from.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",189,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",189,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",189,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",189,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",189,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",189,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",189,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",189,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",189,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",189,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",189,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",189,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"send","","Sends data on the socket to the remote address to which it is connected.",189,null],[11,"recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",189,null],[11,"peek","","Receives single datagram on the socket from the remote address to which it is connected, without removing the message from input queue. On success, returns the number of bytes peeked.",189,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",189,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",178,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",182,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",183,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",184,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",185,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",180,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"addrparseerror"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",190,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more [`SocketAddr`] values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond to.",191,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",191,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",192,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"num","std","Additional functionality for numerics.",null,null],[4,"FpCategory","std::num","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",193,null],[13,"Infinite","","Positive or negative infinity.",193,null],[13,"Zero","","Positive or negative zero.",193,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",193,null],[13,"Normal","","A regular floating point number.",193,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",194,null],[0,"os","std","OS-specific functionality.",null,null],[0,"unix","std::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","std::os::unix","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","std::os::unix::io","Raw file descriptors.",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying object.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",195,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file descriptor.",null,null],[10,"from_raw_fd","","Constructs a new instance of `Self` from the given raw file descriptor.",196,{"inputs":[{"name":"rawfd"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of its raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",197,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[0,"ffi","std::os::unix","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","std::os::unix::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an [`OsString`] from a byte vector.",198,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this [`OsString`].",198,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","Creates an [`OsStr`] from a byte slice.",199,null],[10,"as_bytes","","Gets the underlying byte view of the [`OsStr`] slice.",199,null],[0,"fs","std::os::unix","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[5,"symlink","std::os::unix::fs","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"FileExt","","Unix-specific extensions to `File`",null,null],[10,"read_at","","Reads a number of bytes starting from a given offset.",200,null],[10,"write_at","","Writes a number of bytes starting from a given offset.",200,null],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `st_mode` bits that contain the standard Unix permissions for this file.",201,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",201,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix permission bits.",201,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",202,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` argument of `open`.",202,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"ino","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"mode","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nlink","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"uid","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"gid","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rdev","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"size","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"atime","","",203,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",203,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime","","",203,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",203,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime","","",203,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",203,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"blksize","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"blocks","","",203,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",205,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"DirBuilderExt","","An extension trait for `fs::DirBuilder` for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to 0o777.",206,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"process","std::os::unix","Unix-specific extensions to primitives in the `std::process` module.",null,null],[8,"CommandExt","std::os::unix::process","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process's user id. This translates to a `setuid` call in the child process. Failure in the `setuid` call will cause the spawn to fail.",207,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has the same semantics as the `uid` field.",207,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is invoked.",207,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling the `execvp` syscall.",207,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32` return value of a process.",208,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[10,"signal","","If the process was terminated by a signal, returns that signal.",208,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"raw","std::os::unix","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","std::os::unix::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"pthread_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[0,"thread","std::os::unix","Unix-specific extensions to primitives in the `std::thread` module.",null,null],[6,"RawPthread","std::os::unix::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",209,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",209,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[0,"net","std::os::unix","Unix-specific networking functionality",null,null],[3,"SocketAddr","std::os::unix::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a [`UnixListener`].",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"prelude","std::os::unix","A prelude for conveniently writing platform-specific code.",null,null],[0,"windows","std::os","Platform-specific extensions to `std` for Windows.",null,null],[0,"ffi","std::os::windows","Windows-specific extensions to the primitives in the `std::ffi` module.",null,null],[3,"EncodeWide","std::os::windows::ffi","Generates a wide character sequence for potentially ill-formed UTF-16.",null,null],[8,"OsStringExt","","Windows-specific extensions to `OsString`.",null,null],[10,"from_wide","","Creates an `OsString` from a potentially ill-formed UTF-16 slice of 16-bit code units.",210,null],[8,"OsStrExt","","Windows-specific extensions to `OsStr`.",null,null],[10,"encode_wide","","Re-encodes an `OsStr` as a wide character sequence, i.e. potentially ill-formed UTF-16.",211,{"inputs":[{"name":"self"}],"output":{"name":"encodewide"}}],[0,"fs","std::os::windows","Windows-specific extensions for the primitives in the `std::fs` module.",null,null],[5,"symlink_file","std::os::windows::fs","Creates a new file symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"symlink_dir","","Creates a new directory symlink on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"FileExt","","Windows-specific extensions to [`File`].",null,null],[10,"seek_read","","Seeks to a given position and reads a number of bytes.",212,null],[10,"seek_write","","Seeks to a given position and writes a number of bytes.",212,null],[8,"OpenOptionsExt","","Windows-specific extensions to [`OpenOptions`].",null,null],[10,"access_mode","","Overrides the `dwDesiredAccess` argument to the call to [`CreateFile`] with the specified value.",213,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"share_mode","","Overrides the `dwShareMode` argument to the call to [`CreateFile`] with the specified value.",213,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Sets extra flags for the `dwFileFlags` argument to the call to [`CreateFile2`] to the specified value (or combines it with `attributes` and `security_qos_flags` to set the `dwFlagsAndAttributes` for [`CreateFile`]).",213,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"attributes","","Sets the `dwFileAttributes` argument to the call to [`CreateFile2`] to the specified value (or combines it with `custom_flags` and `security_qos_flags` to set the `dwFlagsAndAttributes` for [`CreateFile`]).",213,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"security_qos_flags","","Sets the `dwSecurityQosFlags` argument to the call to [`CreateFile2`] to the specified value (or combines it with `custom_flags` and `attributes` to set the `dwFlagsAndAttributes` for [`CreateFile`]).",213,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[8,"MetadataExt","","Extension methods for [`fs::Metadata`] to access the raw fields contained within.",null,null],[10,"file_attributes","","Returns the value of the `dwFileAttributes` field of this metadata.",214,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"creation_time","","Returns the value of the `ftCreationTime` field of this metadata.",214,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"last_access_time","","Returns the value of the `ftLastAccessTime` field of this metadata.",214,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"last_write_time","","Returns the value of the `ftLastWriteTime` field of this metadata.",214,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"file_size","","Returns the value of the `nFileSize{High,Low}` fields of this metadata.",214,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"io","std::os::windows","",null,null],[6,"RawHandle","std::os::windows::io","Raw HANDLEs.",null,null],[6,"RawSocket","","Raw SOCKETs.",null,null],[8,"AsRawHandle","","Extract raw handles.",null,null],[10,"as_raw_handle","","Extracts the raw handle, without taking any ownership.",215,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[8,"FromRawHandle","","Construct I/O objects from raw handles.",null,null],[10,"from_raw_handle","","Constructs a new I/O object from the specified raw handle.",216,{"inputs":[{"name":"rawhandle"}],"output":{"name":"self"}}],[8,"IntoRawHandle","","A trait to express the ability to consume an object and acquire ownership of its raw `HANDLE`.",null,null],[10,"into_raw_handle","","Consumes this object, returning the raw underlying handle.",217,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[8,"AsRawSocket","","Extract raw sockets.",null,null],[10,"as_raw_socket","","Extracts the underlying raw socket from this object.",218,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[8,"FromRawSocket","","Create I/O objects from raw sockets.",null,null],[10,"from_raw_socket","","Creates a new I/O object from the given raw socket.",219,{"inputs":[{"name":"rawsocket"}],"output":{"name":"self"}}],[8,"IntoRawSocket","","A trait to express the ability to consume an object and acquire ownership of its raw `SOCKET`.",null,null],[10,"into_raw_socket","","Consumes this object, returning the raw underlying socket.",220,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[0,"raw","std::os::windows","Windows-specific primitives",null,null],[6,"HANDLE","std::os::windows::raw","",null,null],[6,"SOCKET","","",null,null],[0,"process","std::os::windows","Extensions to `std::process` for Windows.",null,null],[8,"ExitStatusExt","std::os::windows::process","Windows-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `u32` return value of a process.",221,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"CommandExt","","Windows-specific extensions to the `std::process::Command` builder",null,null],[10,"creation_flags","","Sets the [process creation flags][1] to be passed to `CreateProcess`.",222,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[0,"thread","std::os::windows","Extensions to `std::thread` for Windows.",null,null],[0,"prelude","","A prelude for conveniently writing platform-specific code.",null,null],[0,"linux","std::os","Linux-specific definitions",null,null],[0,"raw","std::os::linux","Linux-specific raw type definitions",null,null],[3,"stat","std::os::linux::raw","",null,null],[12,"st_dev","","",223,null],[12,"st_ino","","",223,null],[12,"st_nlink","","",223,null],[12,"st_mode","","",223,null],[12,"st_uid","","",223,null],[12,"st_gid","","",223,null],[12,"__pad0","","",223,null],[12,"st_rdev","","",223,null],[12,"st_size","","",223,null],[12,"st_blksize","","",223,null],[12,"st_blocks","","",223,null],[12,"st_atime","","",223,null],[12,"st_atime_nsec","","",223,null],[12,"st_mtime","","",223,null],[12,"st_mtime_nsec","","",223,null],[12,"st_ctime","","",223,null],[12,"st_ctime_nsec","","",223,null],[12,"__unused","","",223,null],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[6,"dev_t","","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"off_t","","",null,null],[6,"ino_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[0,"fs","std::os::linux","",null,null],[8,"MetadataExt","std::os::linux::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains the raw information returned by the OS.",224,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[10,"st_dev","","Returns the device ID on which this file resides.",224,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_ino","","Returns the inode number.",224,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_mode","","Returns the file type and mode.",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_nlink","","Returns the number of hard links to file.",224,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_uid","","Returns the user ID of the file owner.",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_gid","","Returns the group ID of the file owner.",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_rdev","","Returns the device ID that this file represents. Only relevant for special file.",224,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_size","","Returns the size of the file (if it is a regular file or a symbolic link) in bytes.",224,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_atime","","Returns the last access time.",224,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_atime_nsec","","Returns the last access time, nano seconds part.",224,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_mtime","","Returns the last modification time.",224,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_mtime_nsec","","Returns the last modification time, nano seconds part.",224,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_ctime","","Returns the last status change time.",224,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_ctime_nsec","","Returns the last status change time, nano seconds part.",224,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_blksize","","Returns the \"preferred\" blocksize for efficient filesystem I/O.",224,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_blocks","","Returns the number of blocks allocated to the file, 512-byte units.",224,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_raw_stat","std::fs","",141,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"st_dev","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_ino","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_mode","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_nlink","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_uid","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_gid","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_rdev","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_size","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_atime","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_atime_nsec","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_mtime","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_mtime_nsec","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_ctime","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_ctime_nsec","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_blksize","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_blocks","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"raw","std::os","Raw OS-specific types for the current platform/architecture",null,null],[4,"c_void","std::os::raw","Type used to construct void pointers for use with C.",null,null],[6,"c_char","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"panic","std","Panic support in the standard library",null,null],[3,"PanicInfo","std::panic","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is unwind safe.",null,null],[12,"0","","",226,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"name":"box"}}],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,{"inputs":[{"name":"box"}],"output":null}],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic hook.",null,null],[8,"UnwindSafe","","A marker trait which represents \"panic safe\" types in Rust.",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered unwind safe.",null,null],[11,"deref","","",226,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",226,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"call_once","","",226,null],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"path","std","Cross-platform path manipulation.",null,null],[3,"PrefixComponent","std::path","A structure wrapping a Windows path prefix as well as its unparsed string representation.",null,null],[3,"Components","","An iterator over the [`Component`]s of a [`Path`].",null,null],[3,"Iter","","An iterator over the [`Component`]s of a [`Path`], as [`OsStr`] slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to [`String`]).",null,null],[3,"Path","","A slice of a path (akin to [`str`]).",null,null],[3,"StripPrefixError","","An error returned from [`Path::strip_prefix`][`strip_prefix`] if the prefix was not found.",null,null],[3,"Display","","Helper struct for safely printing paths with [`format!`] and `{}`.",null,null],[4,"Prefix","","Windows path prefixes, e.g. `C:` or `\\\\server\\share`.",null,null],[13,"Verbatim","","Verbatim prefix, e.g. `\\\\?\\cat_pics`.",227,null],[13,"VerbatimUNC","","Verbatim prefix using Windows' Uniform Naming Convention, e.g. `\\\\?\\UNC\\server\\share`.",227,null],[13,"VerbatimDisk","","Verbatim disk prefix, e.g. `\\\\?\\C:\\`.",227,null],[13,"DeviceNS","","Device namespace prefix, e.g. `\\\\.\\COM42`.",227,null],[13,"UNC","","Prefix using Windows' Uniform Naming Convention, e.g. `\\\\server\\share`.",227,null],[13,"Disk","","Prefix `C:` for the given disk drive.",227,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",228,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else.",228,null],[13,"CurDir","","A reference to the current directory, i.e. `.`.",228,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`.",228,null],[13,"Normal","","A normal component, e.g. `a` and `b` in `a/b`.",228,null],[5,"is_separator","","Determines whether the character is one of the permitted path separators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator of path components for the current platform.",null,null],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",227,null],[11,"partial_cmp","","",227,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",227,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",227,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",227,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",227,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",227,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"prefixcomponent"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","Returns the parsed prefix data.",229,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"as_os_str","","Returns the raw [`OsStr`] slice for this prefix.",229,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",229,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",229,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",229,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"component"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",228,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",228,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",228,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",228,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",228,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"cmp","","",228,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"hash","","",228,null],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_os_str","","Extracts the underlying [`OsStr`] slice.",228,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",228,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",230,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",230,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",230,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",231,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",231,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",231,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"next","","",231,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",231,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",230,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",230,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",230,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",230,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",232,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a [`Path`] slice.",232,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",232,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Truncates `self` to [`self.parent`].",232,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates [`self.file_name`] to `file_name`.",232,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"set_extension","","Updates [`self.extension`] to `extension`.",232,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal [`OsString`] storage.",232,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"into_boxed_path","","Converts this `PathBuf` into a [boxed][`Box`] [`Path`].",232,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"path"}],"output":{"name":"box"}}],[11,"from","std::path","",232,{"inputs":[{"name":"box"}],"output":{"name":"pathbuf"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"pathbuf"}],"output":{"name":"box"}}],[11,"from","std::path","",232,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",232,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","std::ffi","",138,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","std::path","",232,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",232,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",232,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",232,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"borrow","","",232,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"default","","",232,{"inputs":[],"output":{"name":"self"}}],[11,"from","std::borrow","",74,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",74,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",233,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"clone_into","","",233,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":null}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",232,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",232,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",232,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",232,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"stripprefixerror"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",234,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"new","","Directly wraps a string slice as a `Path` slice.",233,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying [`OsStr`] slice.",233,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `Path` is valid unicode.",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a [`Cow<str>`].",233,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned [`PathBuf`].",233,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","Returns `true` if the `Path` is absolute, i.e. if it is independent of the current directory.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_relative","","Returns `true` if the `Path` is relative, i.e. not absolute.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_root","","Returns `true` if the `Path` has a root.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parent","","Returns the `Path` without its final component, if there is one.",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"file_name","","Returns the final component of the `Path`, if there is one.",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",233,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",233,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",233,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of [`self.file_name`].",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of [`self.file_name`], if possible.",233,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"join","","Creates an owned [`PathBuf`] with `path` adjoined to `self`.",233,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned [`PathBuf`] like `self` but with the given file name.",233,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned [`PathBuf`] like `self` but with the given extension.",233,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produces an iterator over the [`Component`]s of the path.",233,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"iter","","Produces an iterator over the path's components viewed as [`OsStr`] slices.",233,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements [`Display`] for safely printing paths that may contain non-Unicode data.",233,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"metadata","","Queries the file system to get information about a file, directory, etc.",233,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Queries the metadata about a file without following symlinks.",233,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components normalized and symbolic links resolved.",233,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",233,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_dir","","Returns an iterator over the entries within a directory.",233,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"exists","","Returns whether the path points at an existing entity.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether the path exists on disk and is pointing at a regular file.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_dir","","Returns whether the path exists on disk and is pointing at a directory.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_path_buf","","Converts a [`Box<Path>`][`Box`] into a [`PathBuf`] without copying or allocating.",233,{"inputs":[{"name":"box"}],"output":{"name":"pathbuf"}}],[11,"as_ref","","",233,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",233,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",233,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",233,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",233,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi","",139,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi","",138,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::string","",140,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",232,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",232,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",232,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",233,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",233,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",232,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",232,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",232,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",232,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",232,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",232,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",232,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",138,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",232,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",138,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",233,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",233,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",233,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",233,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",233,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",138,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",233,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",138,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::ffi","",138,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",138,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",138,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","std::path","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",234,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"process","std","A module for working with processes.",null,null],[3,"Child","std::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child's standard input (stdin), if it has been captured.",236,null],[12,"stdout","","The handle for reading from the child's standard output (stdout), if it has been captured.",236,null],[12,"stderr","","The handle for reading from the child's standard error (stderr), if it has been captured.",236,null],[3,"ChildStdin","","A handle to a child process's standard input (stdin).",null,null],[3,"ChildStdout","","A handle to a child process's standard output (stdout).",null,null],[3,"ChildStderr","","A handle to a child process's stderr.",null,null],[3,"Command","","A process builder, providing fine-grained control over how a new process should be spawned.",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",237,null],[12,"stdout","","The data that the process wrote to stdout.",237,null],[12,"stderr","","The data that the process wrote to stderr.",237,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process when passed to the [`stdin`], [`stdout`], and [`stderr`] methods of [`Command`].",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,null],[5,"abort","","Terminates the process in an abnormal fashion.",null,null],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",238,null],[11,"flush","","",238,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",239,null],[11,"initializer","","",239,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",240,null],[11,"initializer","","",240,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Command` for launching the program at path `program`, with the following default configuration:",241,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",241,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",241,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"command"}}],[11,"env","","Inserts or updates an environment variable mapping.",241,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"envs","","Add or update multiple environment variable mappings.",241,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",241,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",241,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",241,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's standard input (stdin) handle.",241,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's standard output (stdout) handle.",241,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's standard error (stderr) handle.",241,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",241,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and collecting all of its output.",241,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and collecting its exit status.",241,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any non-utf8 data is lossily converted using the utf8 replacement character.",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",237,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"output"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",242,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",242,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the stream to `/dev/null`",242,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",242,{"inputs":[{"name":"childstdin"}],"output":{"name":"stdio"}}],[11,"from","","",242,{"inputs":[{"name":"childstdout"}],"output":{"name":"stdio"}}],[11,"from","","",242,{"inputs":[{"name":"childstderr"}],"output":{"name":"stdio"}}],[11,"from","","",242,{"inputs":[{"name":"file"}],"output":{"name":"stdio"}}],[11,"eq","","",243,{"inputs":[{"name":"self"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"self"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"exitstatus"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"success","","Was termination successful? Signal termination is not considered a success, and success is defined as a zero exit status.",243,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",243,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a SIGKILL on unix platforms.",236,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it exited with. This function will continue to have the same return value after it has been called at least once.",236,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_wait","","Attempts to collect the exit status of the child if it has already exited.",236,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining output on the stdout/stderr handles, returning an `Output` instance.",236,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"sync","std","Useful synchronization primitives.",null,null],[3,"Arc","std::sync","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Arc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.",null,null],[0,"atomic","","Atomic types",null,null],[5,"hint_core_should_pause","std::sync::atomic","Save power or switch hyperthreads in a busy-wait spin-loop.",null,null],[3,"AtomicBool","","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",244,null],[13,"Release","","When coupled with a store, all previous writes become visible to the other threads that perform a load with [`Acquire`] ordering on the same value.",244,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data written before a store with [`Release`] ordering on the same value in other threads.",244,null],[13,"AcqRel","","When coupled with a load, uses [`Acquire`] ordering, and with a store [`Release`] ordering.",244,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all sequentially consistent operations in the same order.",244,null],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[5,"compiler_fence","","A compiler memory fence.",null,null],[3,"Barrier","std::sync","A barrier enables multiple threads to synchronize the beginning of some computation.",null,null],[3,"BarrierWaitResult","","A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`] have rendezvoused.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the [`ONCE_INIT`] value.",null,null],[3,"OnceState","","State yielded to the [`call_once_force`] method which can be used to query whether the [`Once`] was previously poisoned or not.",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[4,"TryLockError","","An enumeration of possible errors associated with a [`TryLockResult`] which can occur while trying to aquire a lock, from the [`try_lock`] method on a [`Mutex`] or the [`try_read`] and [`try_write`] methods on an [`RwLock`].",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding the lock.",245,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would otherwise block.",245,null],[0,"mpsc","","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Select","std::sync::mpsc","The \"receiver set\" of the select interface. This structure is used to manage a set of receivers which are being selected over.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of receivers.  This handle is used to keep the receiver in the set as well as interact with the underlying receiver.",null,null],[3,"Receiver","","The receiving half of Rust's [`channel`][] (or [`sync_channel`]) type. This half can only be owned by one thread.",null,null],[3,"Iter","","An iterator over messages on a [`Receiver`], created by [`iter`].",null,null],[3,"TryIter","","An iterator that attempts to yield all pending values for a [`Receiver`], created by [`try_iter`].",null,null],[3,"IntoIter","","An owning iterator over messages on a [`Receiver`], created by Receiver::into_iter.",null,null],[3,"Sender","","The sending-half of Rust's asynchronous [`channel`] type. This half can only be owned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust's synchronous [`sync_channel`] type.",null,null],[3,"SendError","","An error returned from the [`Sender::send`] or [`SyncSender::send`] function on channels.",null,null],[12,"0","","",246,null],[3,"RecvError","","An error returned from the [`recv`] function on a [`Receiver`].",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that [`try_recv`] could not return data when called. This can occur with both a [`channel`] and a [`sync_channel`].",null,null],[13,"Empty","","This channel is currently empty, but the Sender(s) have not yet disconnected, so data may yet become available.",247,null],[13,"Disconnected","","The channel's sending half has become disconnected, and there will never be any more data received on it.",247,null],[4,"RecvTimeoutError","","This enumeration is the list of possible errors that made [`recv_timeout`] unable to return data when called. This can occur with both a [`channel`] and a [`sync_channel`].",null,null],[13,"Timeout","","This channel is currently empty, but the Sender(s) have not yet disconnected, so data may yet become available.",248,null],[13,"Disconnected","","The channel's sending half has become disconnected, and there will never be any more data received on it.",248,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the [`try_send`] method.",null,null],[13,"Full","","The data could not be sent on the [`sync_channel`] because it would require that the callee block to send the data.",249,null],[13,"Disconnected","","This [`sync_channel`]'s receiving half has disconnected, so the data could not be sent. The data is returned back to the callee in this case.",249,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves. All data sent on the [`Sender`] will become available on the [`Receiver`] in the same order as it was sent, and no [`send`] will block the calling thread (this channel has an \"infinite buffer\", unlike [`sync_channel`], which will block after its buffer limit is reached). [`recv`] will block until a message is available.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel. All data sent on the [`SyncSender`] will become available on the [`Receiver`] in the same order as it was sent. Like asynchronous [`channel`]s, the [`Receiver`] will block until a message becomes available. `sync_channel` differs greatly in the semantics of the sender, however.",null,null],[11,"new","","Creates a new selection structure. This set is initially empty.",250,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note that this does not add the receiver to the receiver set, for that you must call the `add` method on the handle itself.",250,{"inputs":[{"name":"self"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is not an index, but rather an id. This id can be queried against any active `Handle` structures (each one has an `id` method). The handle with the matching `id` will have some sort of event available on it. The event could either be that data is available or the corresponding channel has been closed.",250,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",251,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on success or `None` if the channel disconnects. This function has the same semantics as `Receiver.recv`",251,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This method can be called multiple times, but it has no effect if `add` was called previously.",251,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because it has no guarantee that the `Handle` was not moved since `add` was called.",251,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",250,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",251,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",246,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",246,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",255,{"inputs":[{"name":"self"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"recverror"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",247,{"inputs":[{"name":"self"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"tryrecverror"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",248,{"inputs":[{"name":"self"},{"name":"recvtimeouterror"}],"output":{"name":"bool"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"recvtimeouterror"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",249,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",249,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could not be sent.",256,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",256,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value on this synchronous channel.",257,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",257,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"syncsender"}}],[11,"drop","","",257,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking.",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the corresponding channel has hung up.",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning an error if the corresponding channel has hung up, or if it waits more than `timeout`.",258,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never [`panic!`]. It will return [`None`] when the channel has hung up.",258,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"try_iter","","Returns an iterator that will attempt to yield all pending values. It will return `None` if there are no more pending values or if the channel has hung up. The iterator will never [`panic!`] or block the user by waiting for values.",258,{"inputs":[{"name":"self"}],"output":{"name":"tryiter"}}],[11,"next","","",252,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",253,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",254,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",258,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drop","","",258,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",246,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",246,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",249,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",249,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",255,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",255,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",247,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",248,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",248,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","std::sync","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new barrier that can block a given number of threads.",259,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",259,{"inputs":[{"name":"self"}],"output":{"name":"barrierwaitresult"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_leader","","Returns whether this thread from [`wait`] is the \"leader thread\".",260,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",261,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",261,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",262,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",262,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":{"name":"lockresult"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a specified duration.",262,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"lockresult"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a specified duration.",262,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"lockresult"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",262,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",262,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a `Condvar` which is ready to be waited on and notified.",262,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",262,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",263,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",263,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"try_lock","","Attempts to acquire this lock.",263,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the mutex is poisoned.",263,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",263,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",263,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"drop","","",263,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates a `Mutex<T>`, with the `Default` value for T.",263,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",264,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",264,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",264,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Once` value.",266,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",266,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as [`call_once`] except ignores poisoning.",266,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated [`Once`] has been poisoned.",265,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",267,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",267,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",267,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",267,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",267,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",267,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",267,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",267,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"drop","","",267,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a new `RwLock<T>`, with the `Default` value for T.",267,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",268,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",269,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",269,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",268,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",269,{"inputs":[{"name":"self"}],"output":null}],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method.",null,null],[6,"LockResult","","A type alias for the result of a lock method which can be poisoned.",null,null],[17,"ONCE_INIT","","Initialization value for static [`Once`] values.",null,null],[0,"time","std","Temporal quantification.",null,null],[3,"Duration","std::time","A `Duration` type to represent a span of time, typically used for system timeouts.",null,null],[3,"Instant","","A measurement of a monotonically nondecreasing clock. Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to external entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` and `elapsed` methods on `SystemTime`, used to learn how far in the opposite direction a system time lies.",null,null],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",270,null],[11,"default","","",270,{"inputs":[],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of whole seconds and additional nanoseconds.",270,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of whole seconds.",270,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",270,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_micros","","Creates a new `Duration` from the specified number of microseconds.",270,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds contained by this `Duration`.",270,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in nanoseconds.",270,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`, returning [`None`] if overflow occurred.",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`, returning [`None`] if the result would be negative or if underflow occurred.",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self * other`, returning [`None`] if overflow occurred.",270,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_div","","Checked `Duration` division. Computes `self / other`, returning [`None`] if `other == 0`.",270,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"add","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add_assign","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub_assign","","",270,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"mul","","",270,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"mul_assign","","",270,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div","","",270,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div_assign","","",270,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sum","","",270,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[11,"sum","","",270,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.",null,null],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"eq","","",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"cmp","","",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",272,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",272,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",272,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",272,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",272,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"cmp","","",272,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"systemtimeerror"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns an instant corresponding to \"now\".",271,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",271,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"add_assign","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_assign","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",271,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",272,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",272,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",272,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add","","",272,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"add_assign","","",272,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",272,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_assign","","",272,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the second system time was from the first.",273,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"description","","",273,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"heap","std","dox",null,null],[3,"Heap","std::heap","",null,null],[8,"Alloc","","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`.",null,null],[10,"alloc","","Returns a pointer meeting the size and alignment guarantees of `layout`.",274,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",274,null],[11,"oom","","Allocator-specific method for signaling an out-of-memory condition.",274,null],[11,"usable_size","","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`.",274,null],[11,"realloc","","Returns a pointer suitable for holding data described by `new_layout`, meeting its size and alignment guarantees. To accomplish this, this may extend or shrink the allocation referenced by `ptr` to fit `new_layout`.",274,null],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.",274,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",274,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",274,null],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to fit `new_layout`.",274,null],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to fit `new_layout`.",274,null],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",274,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",274,null],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",274,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"realloc_array","","Reallocates a block previously suitable for holding `n_old` instances of `T`, returning a block suitable for holding `n_new` instances of `T`.",274,{"inputs":[{"name":"self"},{"name":"unique"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of `T`.",274,{"inputs":[{"name":"self"},{"name":"unique"},{"name":"usize"}],"output":{"name":"result"}}],[3,"Layout","","Layout of a block of memory.",null,null],[3,"Excess","","Represents the combination of a starting address and a total capacity of the returned block.",null,null],[12,"0","","",275,null],[12,"1","","",275,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout.",null,null],[4,"AllocErr","","The `AllocErr` error specifies whether an allocation failure is specifically due to resource exhaustion or if it is due to something wrong when combining the given input arguments with this allocator.",null,null],[13,"Exhausted","","Error due to hitting some resource limit or otherwise running out of memory. This condition strongly implies that some series of deallocations would allow a subsequent reissuing of the original allocation request to succeed.",276,null],[12,"request","std::heap::AllocErr","",276,null],[13,"Unsupported","std::heap","Error due to allocator being fundamentally incapable of satisfying the original request. This condition implies that such an allocation request will never succeed on the given allocator, regardless of environment, memory pressure, or other contextual conditions.",276,null],[12,"details","std::heap::AllocErr","",276,null],[3,"System","std::heap","",null,null],[11,"fmt","std::sync","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",277,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",277,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the underlying guard to allow access regardless.",277,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a reference to the underlying guard to allow access regardless.",277,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a mutable reference to the underlying guard to allow access regardless.",277,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",245,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",245,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",245,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","std::os::windows::ffi","",278,{"inputs":[{"name":"self"}],"output":{"name":"encodewide"}}],[11,"next","","",278,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"as_raw_fd","std::fs","",147,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",147,{"inputs":[{"name":"rawfd"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",147,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","std::io","",161,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",163,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",165,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_vec","std::ffi","",138,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",138,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_bytes","","",139,null],[11,"as_bytes","","",139,null],[11,"read_at","std::fs","",147,null],[11,"write_at","","",147,null],[11,"mode","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_mode","","",144,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from_mode","","",144,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",143,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"custom_flags","","",143,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"dev","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ino","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"mode","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nlink","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"uid","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"gid","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rdev","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"size","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"atime","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"mtime","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"ctime","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"blksize","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"blocks","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_block_device","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_char_device","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fifo","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_socket","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ino","","",148,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"mode","","",146,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[11,"before_exec","","",241,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"command"}}],[11,"exec","","",241,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"from_raw","","",243,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"signal","","",243,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",242,{"inputs":[{"name":"rawfd"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",238,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",239,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",240,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",238,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",239,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",240,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_pthread_t","std::thread","",102,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[11,"into_pthread_t","","",102,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[11,"clone","std::os::unix::net","",279,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"is_unnamed","","Returns true if and only if the address is unnamed.",279,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",279,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Connects to the socket named by `path`.",280,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",280,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",280,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",280,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",280,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout for the socket.",280,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout for the socket.",280,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",280,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",280,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",280,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",280,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",280,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"read","","",280,null],[11,"initializer","","",280,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"write","","",280,null],[11,"flush","","",280,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",280,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",280,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",280,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","std::net","",187,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",188,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",189,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",187,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",188,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","","",189,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","","",187,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",188,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",189,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","std::os::unix::net","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",281,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",281,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",281,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"as_raw_fd","","",281,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",281,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",281,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",282,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",282,null],[11,"fmt","","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a Unix datagram socket bound to the given path.",283,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",283,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",283,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",283,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",283,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the address of this socket.",283,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the address of this socket's peer.",283,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket.",283,null],[11,"recv","","Receives data from the socket.",283,null],[11,"send_to","","Sends data on the socket to the specified address.",283,null],[11,"send","","Sends data on the socket to the socket's peer.",283,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",283,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout for the socket.",283,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",283,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",283,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",283,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",283,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",283,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",283,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",283,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",283,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_wide","std::ffi","",138,null],[11,"encode_wide","","",139,{"inputs":[{"name":"self"}],"output":{"name":"encodewide"}}],[11,"seek_read","std::fs","",147,null],[11,"seek_write","","",147,null],[11,"access_mode","","",143,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"share_mode","","",143,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"custom_flags","","",143,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"attributes","","",143,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"security_qos_flags","","",143,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"file_attributes","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"creation_time","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"last_access_time","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"last_write_time","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"file_size","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_raw_handle","","",147,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","std::io","",161,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",163,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",165,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"from_raw_handle","std::fs","",147,{"inputs":[{"name":"rawhandle"}],"output":{"name":"file"}}],[11,"into_raw_handle","","",147,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_socket","std::net","",187,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"as_raw_socket","","",188,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"as_raw_socket","","",189,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"from_raw_socket","","",187,{"inputs":[{"name":"rawsocket"}],"output":{"name":"tcpstream"}}],[11,"from_raw_socket","","",188,{"inputs":[{"name":"rawsocket"}],"output":{"name":"tcplistener"}}],[11,"from_raw_socket","","",189,{"inputs":[{"name":"rawsocket"}],"output":{"name":"udpsocket"}}],[11,"into_raw_socket","","",187,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"into_raw_socket","","",188,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"into_raw_socket","","",189,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"from_raw_handle","std::process","",242,{"inputs":[{"name":"rawhandle"}],"output":{"name":"stdio"}}],[11,"as_raw_handle","","",236,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",236,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",238,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",239,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",240,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",238,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",239,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",240,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"from_raw","","",243,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"creation_flags","","",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[11,"as_raw_handle","std::thread","",102,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",102,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"fmt","std::panic","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"payload","","Returns the payload associated with the panic.",284,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated, if available.",284,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"file","","Returns the name of the source file from which the panic originated.",285,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"column","","Returns the column from which the panic originated.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[14,"format","std","Creates a `String` using interpolation of runtime expressions.",null,null],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"write","","Write formatted data into a buffer",null,null],[14,"unimplemented","","A standardized placeholder for marking unfinished code.",null,null],[14,"unreachable","","A utility macro for indicating unreachable code.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other (using [`PartialEq`]).",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other (using [`PartialEq`]).",null,null],[14,"assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"panic","","The entry point for panic of Rust threads.",null,null],[14,"print","","Macro for printing to the standard output.",null,null],[14,"println","","Macro for printing to the standard output, with a newline.",null,null],[14,"eprint","","Macro for printing to the standard error.",null,null],[14,"eprintln","","Macro for printing to the standard error, with a newline.",null,null],[14,"select","","A macro to select an event from a number of receivers.",null,null],[14,"compile_error","","Unconditionally causes compilation to fail with the given error message when encountered.",null,null],[14,"format_args","","The core macro for formatted string creation & output.",null,null],[14,"env","","Inspect an environment variable at compile time.",null,null],[14,"option_env","","Optionally inspect an environment variable at compile time.",null,null],[14,"concat_idents","","Concatenate identifiers into one identifier.",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"line","","A macro which expands to the line number on which it was invoked.",null,null],[14,"column","","A macro which expands to the column number on which it was invoked.",null,null],[14,"file","","A macro which expands to the file name from which it was invoked.",null,null],[14,"stringify","","A macro which stringifies its argument.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"cfg","","Boolean evaluation of configuration flags.",null,null],[14,"include","","Parse a file as an expression or an item according to the context.",null,null],[14,"thread_local","","Declare a new thread local storage key of type [`std::thread::LocalKey`].",null,null],[15,"bool","","The boolean type.",null,null],[15,"char","","A character type.",null,null],[15,"unit","","The `()` type, sometimes called \"unit\" or \"nil\".",null,null],[15,"pointer","","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[15,"array","","A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the non-negative compile-time constant size, `N`.",null,null],[15,"slice","","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[15,"str","","String slices.",null,null],[15,"tuple","","A finite heterogeneous sequence, `(T, U, ..)`.",null,null],[15,"f32","","The 32-bit floating point type.",null,null],[15,"f64","","The 64-bit floating point type.",null,null],[15,"i8","","The 8-bit signed integer type.",null,null],[15,"i16","","The 16-bit signed integer type.",null,null],[15,"i32","","The 32-bit signed integer type.",null,null],[15,"i64","","The 64-bit signed integer type.",null,null],[15,"i128","","The 128-bit signed integer type.",null,null],[15,"u8","","The 8-bit unsigned integer type.",null,null],[15,"u16","","The 16-bit unsigned integer type.",null,null],[15,"u32","","The 32-bit unsigned integer type.",null,null],[15,"u64","","The 64-bit unsigned integer type.",null,null],[15,"u128","","The 128-bit unsigned integer type.",null,null],[15,"isize","","The pointer-sized signed integer type.",null,null],[15,"usize","","The pointer-sized unsigned integer type.",null,null],[15,"reference","","References, both shared and mutable.",null,null],[15,"fn","","Function pointers, like `fn(usize) -> bool`.",null,null],[11,"is","std::any","Returns `true` if the boxed type is the same as `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_sign","std","",286,null],[11,"unsigned","","",286,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_unsigned","","",286,{"inputs":[{"name":"u64"}],"output":{"name":"i64"}}],[11,"from_bool","","",286,{"inputs":[{"name":"bool"}],"output":{"name":"i64"}}],[11,"max_value","","",286,{"inputs":[],"output":{"name":"i64"}}],[11,"min_value","","",286,{"inputs":[],"output":{"name":"i64"}}],[11,"wrapping_add","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_mul","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_sub","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_shl","","",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"aborting_div","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"aborting_rem","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"leading_zeros","","",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"extract_sign","","",287,null],[11,"unsigned","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_unsigned","","",287,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"from_bool","","",287,{"inputs":[{"name":"bool"}],"output":{"name":"u32"}}],[11,"max_value","","",287,{"inputs":[],"output":{"name":"u32"}}],[11,"min_value","","",287,{"inputs":[],"output":{"name":"u32"}}],[11,"wrapping_add","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_mul","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_sub","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_shl","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"aborting_div","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"aborting_rem","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"leading_zeros","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"extract_sign","","",288,null],[11,"unsigned","","",288,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"from_unsigned","","",288,{"inputs":[{"name":"u128"}],"output":{"name":"i128"}}],[11,"from_bool","","",288,{"inputs":[{"name":"bool"}],"output":{"name":"i128"}}],[11,"max_value","","",288,{"inputs":[],"output":{"name":"i128"}}],[11,"min_value","","",288,{"inputs":[],"output":{"name":"i128"}}],[11,"wrapping_add","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_mul","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_sub","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_shl","","",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"aborting_div","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"aborting_rem","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"leading_zeros","","",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"extract_sign","","",289,null],[11,"unsigned","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"from_unsigned","","",289,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"from_bool","","",289,{"inputs":[{"name":"bool"}],"output":{"name":"u128"}}],[11,"max_value","","",289,{"inputs":[],"output":{"name":"u128"}}],[11,"min_value","","",289,{"inputs":[],"output":{"name":"u128"}}],[11,"wrapping_add","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_mul","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_sub","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_shl","","",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"aborting_div","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"aborting_rem","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"leading_zeros","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"extract_sign","","",290,null],[11,"unsigned","","",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_unsigned","","",290,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[11,"from_bool","","",290,{"inputs":[{"name":"bool"}],"output":{"name":"i32"}}],[11,"max_value","","",290,{"inputs":[],"output":{"name":"i32"}}],[11,"min_value","","",290,{"inputs":[],"output":{"name":"i32"}}],[11,"wrapping_add","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_mul","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_sub","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_shl","","",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"aborting_div","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"aborting_rem","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"leading_zeros","","",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"extract_sign","","",291,null],[11,"unsigned","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_unsigned","","",291,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"from_bool","","",291,{"inputs":[{"name":"bool"}],"output":{"name":"u64"}}],[11,"max_value","","",291,{"inputs":[],"output":{"name":"u64"}}],[11,"min_value","","",291,{"inputs":[],"output":{"name":"u64"}}],[11,"wrapping_add","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_mul","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_sub","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_shl","","",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"aborting_div","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"aborting_rem","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"leading_zeros","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"repr","","",292,null],[11,"from_repr","","",292,null],[11,"from_parts","","",292,null],[11,"normalize","","",292,null],[11,"repr","","",293,null],[11,"from_repr","","",293,null],[11,"from_parts","","",293,null],[11,"normalize","","",293,null],[11,"cast","","",291,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"cast","","",289,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"cast","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"cast","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cast","","",290,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"cast","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"cast","","",288,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"cast","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"cast","","",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"cast","","",289,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cast","","",286,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cast","","",287,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cast","","",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"cast","","",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"cast","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"cast","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"cast","","",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"cast","","",290,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"cast","","",289,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"cast","","",290,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"cast","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"cast","","",291,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cast","","",288,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cast","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"cast","","",288,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"cast","","",286,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"cast","","",287,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"cast","","",290,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"cast","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"cast","","",287,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"cast","","",286,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"cast","","",289,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cast","","",291,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"cast","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"cast","","",291,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"cast","","",290,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"cast","","",286,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"cast","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"cast","","",291,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cast","","",287,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"cast","","",289,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"cast","","",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cast","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"cast","","",288,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"cast","","",288,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"cast","","",288,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cast","","",287,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cast","","",290,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"low","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"low_as_high","","",289,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"high","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"high_as_low","","",289,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"from_parts","","",289,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"low","","",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_as_high","","",286,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[11,"high","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"high_as_low","","",286,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"from_parts","","",286,{"inputs":[{"name":"u32"},{"name":"i32"}],"output":{"name":"i64"}}],[11,"low","","",288,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"low_as_high","","",288,{"inputs":[{"name":"u64"}],"output":{"name":"i64"}}],[11,"high","","",288,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"high_as_low","","",288,{"inputs":[{"name":"i64"}],"output":{"name":"u64"}}],[11,"from_parts","","",288,{"inputs":[{"name":"u64"},{"name":"i64"}],"output":{"name":"i128"}}],[11,"low","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_as_high","","",291,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"high","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"high_as_low","","",291,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"from_parts","","",291,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"alloc","std::heap","",294,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"alloc_zeroed","","",294,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"dealloc","","",294,null],[11,"realloc","","",294,null],[11,"oom","","",294,null],[11,"usable_size","","",294,null],[11,"alloc_excess","","",294,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"realloc_excess","","",294,null],[11,"grow_in_place","","",294,null],[11,"shrink_in_place","","",294,null],[11,"fmt","std::char","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_whitespace","std","",296,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"is_whitespace","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trim","","",296,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_left","","",296,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_right","","",296,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cmp","std::char","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"ordering"}}],[11,"next_back","std::str","",295,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","std::char","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"next","","",297,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::str","",295,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::char","",298,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",298,null],[11,"next","","",299,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","std::str","",295,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"clone","std::char","",125,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16error"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unicodeversion"}}],[11,"clone","","",298,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"add","std","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"add","","",289,null],[11,"add","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","std","",300,null],[11,"add","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",194,null],[11,"add","std","",290,null],[11,"add","","",287,null],[11,"add","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","std","",300,null],[11,"add","","",301,null],[11,"add","","",289,null],[11,"add","","",302,null],[11,"add","","",293,null],[11,"add","","",301,null],[11,"add","","",286,null],[11,"add","","",288,null],[11,"add","","",303,null],[11,"add","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","std","",291,null],[11,"add","std::num","",194,null],[11,"add","std","",288,null],[11,"add","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"add","","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"add","","",288,null],[11,"add","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"add","std::num","",194,null],[11,"add","","",194,null],[11,"add","std","",292,null],[11,"add","","",287,null],[11,"add","","",290,null],[11,"add","","",291,null],[11,"add","std::num","",194,null],[11,"add","std","",291,null],[11,"add","","",304,null],[11,"add","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","std","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"add","std::num","",194,null],[11,"add","std","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"add","","",305,null],[11,"add","std::num","",194,null],[11,"add","std","",292,null],[11,"add","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",194,null],[11,"add","std","",303,null],[11,"add","","",303,null],[11,"add","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"add","","",286,null],[11,"add","std::num","",194,null],[11,"add","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","std","",287,null],[11,"add","","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"add","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"add","","",301,null],[11,"add","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"add","","",292,null],[11,"add","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",194,null],[11,"add","std","",290,null],[11,"add","","",302,null],[11,"add","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",194,null],[11,"add","std","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"add","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","std","",302,null],[11,"add","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"add","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"add","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"add","","",305,null],[11,"add","","",305,null],[11,"add","","",304,null],[11,"add","","",293,null],[11,"add","","",300,null],[11,"add","","",286,null],[11,"add","","",289,null],[11,"add","std::num","",194,null],[11,"add","std","",293,null],[11,"add","","",304,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","std::convert","",131,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"bool"}}],[11,"eq","std","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","std::option","",311,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"bool"}}],[11,"eq","std","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"ne","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","std::num","",312,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",296,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::ops","",39,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"eq","std","",308,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","std::option","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","std","",308,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",313,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","std::ops","",28,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","std::mem","",314,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","std::cell","",315,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"eq","std::str","",121,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","std::any","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"ne","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","std","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"eq","std","",308,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","std::num","",193,{"inputs":[{"name":"self"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"eq","std","",308,null],[11,"eq","","",308,null],[11,"eq","","",308,null],[11,"eq","","",308,null],[11,"eq","","",308,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"ne","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",308,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",317,null],[11,"ne","","",317,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"ne","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",308,null],[11,"eq","std::mem","",318,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ne","","",318,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","std::str::pattern","",91,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","std::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","std::ops","",49,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"eq","std","",319,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"ne","","",319,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","std::result","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","std","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","std::ops","",34,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"eq","std","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",308,null],[11,"eq","std::char","",129,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"eq","std","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"ne","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","std::marker","",320,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"eq","std","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","std::ops","",47,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"eq","std","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"ne","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"ne","","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",308,null],[11,"eq","","",321,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ne","","",321,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","std::num","",322,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",322,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",313,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","std::cell","",323,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"eq","std","",307,null],[11,"ne","","",307,null],[11,"eq","std::ops","",36,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","std","",307,null],[11,"ne","","",307,null],[11,"eq","std::ops","",324,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","std::str","",120,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","std","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",308,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",308,null],[11,"fmt","","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","std::hash","",325,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"fmt","std","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div_assign","","",194,null],[11,"div_assign","std","",289,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","std","",302,null],[11,"div_assign","","",303,null],[11,"div_assign","","",291,null],[11,"div_assign","","",303,null],[11,"div_assign","","",287,null],[11,"div_assign","","",300,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","std","",286,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","std","",288,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","std","",292,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","std","",293,null],[11,"div_assign","","",293,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","std","",286,null],[11,"div_assign","","",290,null],[11,"div_assign","","",287,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","std","",304,null],[11,"div_assign","","",302,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","std","",300,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","std","",305,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","std","",292,null],[11,"div_assign","","",301,null],[11,"div_assign","","",288,null],[11,"div_assign","","",290,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","std","",291,null],[11,"div_assign","","",301,null],[11,"div_assign","","",305,null],[11,"div_assign","","",304,null],[11,"div_assign","std::num","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","","",194,null],[11,"div_assign","std","",289,null],[11,"div_assign","std::num","",194,null],[11,"sub_assign","std","",289,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","std","",293,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","std","",292,null],[11,"sub_assign","","",293,null],[11,"sub_assign","","",291,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","std","",290,null],[11,"sub_assign","","",287,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","std","",288,null],[11,"sub_assign","","",305,null],[11,"sub_assign","","",301,null],[11,"sub_assign","","",304,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","std","",292,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","std","",303,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","std","",302,null],[11,"sub_assign","","",290,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","std","",302,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","std","",287,null],[11,"sub_assign","","",303,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","std","",304,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","std","",300,null],[11,"sub_assign","","",289,null],[11,"sub_assign","","",286,null],[11,"sub_assign","","",288,null],[11,"sub_assign","","",291,null],[11,"sub_assign","","",301,null],[11,"sub_assign","","",300,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","","",194,null],[11,"sub_assign","std","",305,null],[11,"sub_assign","","",286,null],[11,"sub_assign","std::num","",194,null],[11,"sub_assign","","",194,null],[11,"write","std::hash","",326,null],[11,"finish","","",326,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"finish","std","",309,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",309,null],[11,"write_u8","","",309,null],[11,"write_u16","","",309,null],[11,"write_u32","","",309,null],[11,"write_u64","","",309,null],[11,"write_u128","","",309,null],[11,"write_usize","","",309,null],[11,"write_i8","","",309,null],[11,"write_i16","","",309,null],[11,"write_i32","","",309,null],[11,"write_i64","","",309,null],[11,"write_i128","","",309,null],[11,"write_isize","","",309,null],[11,"write","std::hash","",327,null],[11,"finish","","",327,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",328,null],[11,"finish","","",328,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"haystack","std::str::pattern","",329,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",329,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",329,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",330,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",330,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",330,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",330,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",331,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",331,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",331,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",331,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",332,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",332,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","std","",296,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",296,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",296,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",306,null],[11,"index","","",296,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",296,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",296,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"into_searcher","","",296,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"strsearcher"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",296,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",296,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"into_searcher","","",321,null],[11,"is_contained_in","","",321,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","",321,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","",321,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"into_searcher","","",306,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"charslicesearcher"}}],[11,"is_contained_in","","",306,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","",306,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","",306,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"split_at","","",306,null],[11,"iter","","",306,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"split","","",306,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"rsplit","","",306,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplit"}}],[11,"splitn","","",306,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[11,"rsplitn","","",306,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[11,"windows","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"chunks","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"get","","",306,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"first","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_unchecked","","",306,null],[11,"as_ptr","","",306,null],[11,"binary_search_by","","",306,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_mut","","",306,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"split_at_mut","","",306,null],[11,"iter_mut","","",306,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"last_mut","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"first_mut","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first_mut","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last_mut","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_mut","","",306,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"rsplit_mut","","",306,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplitmut"}}],[11,"splitn_mut","","",306,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[11,"rsplitn_mut","","",306,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[11,"chunks_mut","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"swap","","",306,null],[11,"reverse","","",306,null],[11,"get_unchecked_mut","","",306,null],[11,"as_mut_ptr","","",306,null],[11,"contains","","",306,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"starts_with","","",306,null],[11,"ends_with","","",306,null],[11,"binary_search","","",306,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"rotate","","",306,null],[11,"clone_from_slice","","",306,null],[11,"copy_from_slice","","",306,null],[11,"swap_with_slice","","",306,null],[11,"binary_search_by_key","","",306,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"sort_unstable","","",306,null],[11,"sort_unstable_by","","",306,null],[11,"sort_unstable_by_key","","",306,null],[11,"bitxor","","",301,null],[11,"bitxor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","std","",290,null],[11,"bitxor","","",305,null],[11,"bitxor","","",300,null],[11,"bitxor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","std","",305,null],[11,"bitxor","","",289,null],[11,"bitxor","","",291,null],[11,"bitxor","std::num","",194,null],[11,"bitxor","std","",302,null],[11,"bitxor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",194,null],[11,"bitxor","","",194,null],[11,"bitxor","","",194,null],[11,"bitxor","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","std","",319,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"bitxor","","",303,null],[11,"bitxor","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"bitxor","","",288,null],[11,"bitxor","std::num","",194,null],[11,"bitxor","std","",319,null],[11,"bitxor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","std","",302,null],[11,"bitxor","std::num","",194,null],[11,"bitxor","std","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"bitxor","std::num","",194,null],[11,"bitxor","std","",286,null],[11,"bitxor","","",288,null],[11,"bitxor","std::num","",194,null],[11,"bitxor","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","std","",304,null],[11,"bitxor","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bitxor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",194,null],[11,"bitxor","std","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"bitxor","","",304,null],[11,"bitxor","","",305,null],[11,"bitxor","","",301,null],[11,"bitxor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","std","",291,null],[11,"bitxor","","",287,null],[11,"bitxor","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"bitxor","","",301,null],[11,"bitxor","","",303,null],[11,"bitxor","std::num","",194,null],[11,"bitxor","std","",291,null],[11,"bitxor","std::num","",194,null],[11,"bitxor","std","",302,null],[11,"bitxor","","",319,null],[11,"bitxor","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"bitxor","","",290,null],[11,"bitxor","std::num","",194,null],[11,"bitxor","std","",288,null],[11,"bitxor","","",319,null],[11,"bitxor","","",300,null],[11,"bitxor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","std","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitxor","","",286,null],[11,"bitxor","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitxor","","",290,null],[11,"bitxor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","std","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"bitxor","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"bitxor","","",303,null],[11,"bitxor","","",289,null],[11,"bitxor","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"bitxor","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"bitxor","","",289,null],[11,"bitxor","","",300,null],[11,"bitxor","","",287,null],[11,"bitxor","","",286,null],[11,"bitxor","","",287,null],[11,"bitxor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","std","",304,null],[11,"not","","",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"not","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"not","","",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"not","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","std","",286,null],[11,"not","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","std","",319,null],[11,"not","","",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"not","","",304,null],[11,"not","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","std","",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"not","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"not","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","std","",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"not","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","std","",301,null],[11,"not","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"not","","",291,null],[11,"not","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","std","",305,null],[11,"not","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","std","",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"not","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","std","",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"not","","",300,null],[11,"not","","",287,null],[11,"not","","",290,null],[11,"not","","",288,null],[11,"not","","",319,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"not","","",289,null],[11,"not","","",303,null],[11,"not","","",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"not","","",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"not","","",302,null],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",70,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",291,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",303,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"product","","",292,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"product","","",301,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"product","","",286,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"product","","",291,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",290,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"product","","",300,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",292,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"product","","",293,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"product","","",305,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",302,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",290,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"product","","",286,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",293,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",289,{"inputs":[{"name":"i"}],"output":{"name":"u128"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",305,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"product","","",304,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"product","","",301,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"product","","",287,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",288,{"inputs":[{"name":"i"}],"output":{"name":"i128"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",300,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"product","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",304,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"product","","",288,{"inputs":[{"name":"i"}],"output":{"name":"i128"}}],[11,"product","","",303,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"product","","",289,{"inputs":[{"name":"i"}],"output":{"name":"u128"}}],[11,"product","","",302,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"product","","",287,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"call","","",309,null],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","std::option","Returns a consuming iterator over the possibly contained value.",71,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","std::result","Returns a consuming iterator over the possibly contained value.",70,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",306,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",306,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",307,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"mul","","",286,null],[11,"mul","","",300,null],[11,"mul","","",305,null],[11,"mul","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","std","",300,null],[11,"mul","","",292,null],[11,"mul","std::num","",194,null],[11,"mul","std","",301,null],[11,"mul","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","std","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"mul","std::num","",194,null],[11,"mul","","",194,null],[11,"mul","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",194,null],[11,"mul","std","",291,null],[11,"mul","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","std","",301,null],[11,"mul","","",289,null],[11,"mul","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",194,null],[11,"mul","std","",290,null],[11,"mul","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"mul","","",288,null],[11,"mul","","",288,null],[11,"mul","","",304,null],[11,"mul","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"mul","","",286,null],[11,"mul","std::num","",194,null],[11,"mul","std","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"mul","","",288,null],[11,"mul","","",289,null],[11,"mul","","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"mul","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","std","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"mul","std::num","",194,null],[11,"mul","std","",293,null],[11,"mul","std::num","",194,null],[11,"mul","std","",302,null],[11,"mul","","",303,null],[11,"mul","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"mul","","",289,null],[11,"mul","std::num","",194,null],[11,"mul","std","",304,null],[11,"mul","std::num","",194,null],[11,"mul","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","std","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"mul","","",291,null],[11,"mul","","",303,null],[11,"mul","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","std","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"mul","","",287,null],[11,"mul","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"mul","","",292,null],[11,"mul","std::num","",194,null],[11,"mul","std","",287,null],[11,"mul","","",305,null],[11,"mul","","",293,null],[11,"mul","","",302,null],[11,"mul","","",292,null],[11,"mul","","",287,null],[11,"mul","","",293,null],[11,"mul","","",302,null],[11,"mul","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"mul","","",300,null],[11,"mul","","",291,null],[11,"mul","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","std","",290,null],[11,"mul","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","std","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"mul","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",194,null],[11,"mul","std","",301,null],[11,"mul","","",305,null],[11,"mul","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"mul","","",304,null],[11,"mul","","",290,null],[11,"mul","","",303,null],[11,"mul","","",286,null],[11,"mul","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"steps_between","","",289,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"add_usize","","",289,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"replace_zero","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"add_one","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"sub_one","","",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"steps_between","","",288,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"option"}}],[11,"add_usize","","",288,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"replace_zero","","",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"add_one","","",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"sub_one","","",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"steps_between","","",304,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"option"}}],[11,"add_usize","","",304,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"replace_zero","","",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"add_one","","",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"sub_one","","",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"steps_between","","",301,{"inputs":[{"name":"i8"},{"name":"i8"}],"output":{"name":"option"}}],[11,"add_usize","","",301,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"replace_zero","","",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"add_one","","",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"sub_one","","",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"steps_between","","",287,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"add_usize","","",287,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"replace_zero","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"add_one","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"sub_one","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"steps_between","","",300,{"inputs":[{"name":"isize"},{"name":"isize"}],"output":{"name":"option"}}],[11,"add_usize","","",300,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"replace_zero","","",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"add_one","","",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"sub_one","","",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"steps_between","","",305,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add_usize","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"replace_zero","","",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_one","","",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"sub_one","","",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steps_between","","",302,{"inputs":[{"name":"i16"},{"name":"i16"}],"output":{"name":"option"}}],[11,"add_usize","","",302,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"replace_zero","","",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"add_one","","",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"sub_one","","",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"steps_between","","",291,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"add_usize","","",291,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"replace_zero","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"add_one","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"sub_one","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"steps_between","","",290,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[11,"add_usize","","",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"replace_zero","","",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"add_one","","",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"sub_one","","",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"steps_between","","",286,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"option"}}],[11,"add_usize","","",286,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"replace_zero","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"add_one","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"sub_one","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"steps_between","","",303,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"option"}}],[11,"add_usize","","",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"replace_one","","",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"replace_zero","","",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"add_one","","",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"sub_one","","",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"try_from","","",305,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",288,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",321,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",290,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",286,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",289,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",288,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",291,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",289,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",302,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",291,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",286,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",286,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",291,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",290,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",287,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",287,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",291,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",289,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",291,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",289,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",289,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",287,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",287,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",302,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",287,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",302,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",287,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",289,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",289,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",290,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",286,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",290,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",302,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",302,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",288,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",286,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",291,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",302,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",302,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",291,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",287,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",290,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",290,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",290,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",301,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",287,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",291,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",302,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",302,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",304,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",287,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ptr","",333,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ptr","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parse a `bool` from a string.",319,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",289,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",291,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",301,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",300,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",286,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",304,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","Converts a string in base 10 to a float. Accepts an optional decimal exponent.",292,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","Converts a string in base 10 to a float. Accepts an optional decimal exponent.",293,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",302,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",321,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",288,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",287,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",303,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",290,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",305,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"get","std::ops","",39,null],[11,"get_mut","","",39,null],[11,"get_unchecked","","",39,null],[11,"get_unchecked_mut","","",39,null],[11,"index","","",39,null],[11,"index_mut","","",39,null],[11,"get","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",39,null],[11,"get_unchecked_mut","","",39,null],[11,"index","","",39,null],[11,"index_mut","","",39,null],[11,"get","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",28,null],[11,"get_unchecked_mut","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"get","","",34,null],[11,"get_mut","","",34,null],[11,"get_unchecked","","",34,null],[11,"get_unchecked_mut","","",34,null],[11,"index","","",34,null],[11,"index_mut","","",34,null],[11,"get","","",36,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",36,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",36,null],[11,"get_unchecked_mut","","",36,null],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"get","","",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",47,null],[11,"get_unchecked_mut","","",47,null],[11,"index","","",47,null],[11,"index_mut","","",47,null],[11,"get","","",324,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",324,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",324,null],[11,"get_unchecked_mut","","",324,null],[11,"index","","",324,null],[11,"index_mut","","",324,null],[11,"get","","",324,null],[11,"get_mut","","",324,null],[11,"get_unchecked","","",324,null],[11,"get_unchecked_mut","","",324,null],[11,"index","","",324,null],[11,"index_mut","","",324,null],[11,"get","","",36,null],[11,"get_mut","","",36,null],[11,"get_unchecked","","",36,null],[11,"get_unchecked_mut","","",36,null],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"get","","",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",34,null],[11,"get_unchecked_mut","","",34,null],[11,"index","","",34,null],[11,"index_mut","","",34,null],[11,"get","std","",305,null],[11,"get_mut","","",305,null],[11,"get_unchecked","","",305,null],[11,"get_unchecked_mut","","",305,null],[11,"index","","",305,null],[11,"index_mut","","",305,null],[11,"get","std::ops","",47,null],[11,"get_mut","","",47,null],[11,"get_unchecked","","",47,null],[11,"get_unchecked_mut","","",47,null],[11,"index","","",47,null],[11,"index_mut","","",47,null],[11,"get","","",28,null],[11,"get_mut","","",28,null],[11,"get_unchecked","","",28,null],[11,"get_unchecked_mut","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str::pattern","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",335,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",336,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::any","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",337,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",338,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",339,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",340,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",323,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::result","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",341,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",342,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",343,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",344,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::convert","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",345,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",346,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",347,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",348,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",349,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",351,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",352,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",353,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::option","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",355,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::option","",357,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",358,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",359,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::any","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",360,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ops","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",361,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ops","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",362,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::hash","",328,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",363,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",364,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",365,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",366,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",321,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::hash","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",368,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::marker","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::result","",370,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",373,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::result","",374,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::option","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ops","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::mem","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ops","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str::pattern","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ops","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::hash","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",389,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::any","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",390,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",391,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",392,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::result","",393,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",394,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cmp","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",395,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str::pattern","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str::pattern","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::hash","",325,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",396,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",397,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",400,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",401,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",402,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::mem","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::option","",403,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ops","",324,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",404,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",405,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::option","",406,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",407,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str::pattern","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",409,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",410,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",411,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ops","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",307,null],[11,"default","","",307,null],[11,"default","","Returns the default value of `0`",300,{"inputs":[],"output":{"name":"isize"}}],[11,"default","","",307,null],[11,"default","","",307,null],[11,"default","","",307,null],[11,"default","","",310,null],[11,"default","std::hash","",325,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"default","std::option","Returns [`None`].",71,{"inputs":[],"output":{"name":"option"}}],[11,"default","std","",310,null],[11,"default","","",307,null],[11,"default","","Returns the default value of `\\x00`",321,{"inputs":[],"output":{"name":"char"}}],[11,"default","","Returns the default value of `0`",303,{"inputs":[],"output":{"name":"u16"}}],[11,"default","","",307,null],[11,"default","","",307,null],[11,"default","","",307,null],[11,"default","","",307,null],[11,"default","std::sync::atomic","Creates an `AtomicBool` initialized to `false`.",381,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","std","",307,null],[11,"default","","Returns the default value of `false`",319,{"inputs":[],"output":{"name":"bool"}}],[11,"default","","",307,null],[11,"default","","Returns the default value of `0.0`",293,{"inputs":[],"output":{"name":"f32"}}],[11,"default","std::hash","",327,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"default","std","",307,null],[11,"default","","Returns the default value of `0`",305,{"inputs":[],"output":{"name":"usize"}}],[11,"default","std::cell","Creates an `UnsafeCell`, with the `Default` value for T.",339,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"default","std","",307,null],[11,"default","","",310,null],[11,"default","","",307,null],[11,"default","","Creates a mutable empty slice.",306,null],[11,"default","","",307,null],[11,"default","","Creates an empty str",296,{"inputs":[],"output":{"name":"str"}}],[11,"default","","",307,null],[11,"default","","Returns the default value of `()`",317,null],[11,"default","","",310,null],[11,"default","","",307,null],[11,"default","std::sync::atomic","",363,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"default","std","",307,null],[11,"default","","",307,null],[11,"default","","Returns the default value of `0`",304,{"inputs":[],"output":{"name":"u8"}}],[11,"default","std::sync::atomic","",335,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","std","",307,null],[11,"default","","",307,null],[11,"default","","Returns the default value of `0`",287,{"inputs":[],"output":{"name":"u32"}}],[11,"default","std::mem","",318,{"inputs":[],"output":{"name":"manuallydrop"}}],[11,"default","std::iter","",410,{"inputs":[],"output":{"name":"empty"}}],[11,"default","std","",307,null],[11,"default","","Creates an empty slice.",306,null],[11,"default","std::sync::atomic","",379,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"default","std","",310,null],[11,"default","std::fmt","",126,{"inputs":[],"output":{"name":"error"}}],[11,"default","std","",307,null],[11,"default","","",310,null],[11,"default","std::cell","Creates a `Cell<T>`, with the `Default` value for T.",315,{"inputs":[],"output":{"name":"cell"}}],[11,"default","std","Returns the default value of `0.0`",292,{"inputs":[],"output":{"name":"f64"}}],[11,"default","std::sync::atomic","",401,{"inputs":[],"output":{"name":"atomici64"}}],[11,"default","","",349,{"inputs":[],"output":{"name":"atomici8"}}],[11,"default","std::marker","",320,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"default","std","Returns the default value of `0`",301,{"inputs":[],"output":{"name":"i8"}}],[11,"default","","",307,null],[11,"default","std::sync::atomic","",392,{"inputs":[],"output":{"name":"atomici16"}}],[11,"default","","",385,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","std","",310,null],[11,"default","","",310,null],[11,"default","","Returns the default value of `0`",302,{"inputs":[],"output":{"name":"i16"}}],[11,"default","","Returns the default value of `0`",286,{"inputs":[],"output":{"name":"i64"}}],[11,"default","std::hash","",326,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"default","std","",307,null],[11,"default","","Returns the default value of `0`",291,{"inputs":[],"output":{"name":"u64"}}],[11,"default","std::sync::atomic","",367,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"default","","Creates a null `AtomicPtr<T>`.",342,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"default","std","",307,null],[11,"default","","",307,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","std::sync::atomic","",368,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"default","std","",307,null],[11,"default","","Returns the default value of `0`",290,{"inputs":[],"output":{"name":"i32"}}],[11,"default","","",307,null],[11,"default","std::num","",194,{"inputs":[],"output":{"name":"wrapping"}}],[11,"default","std","",310,null],[11,"default","","Returns the default value of `0`",288,{"inputs":[],"output":{"name":"i128"}}],[11,"default","std::cell","Creates a `RefCell<T>`, with the `Default` value for T.",323,{"inputs":[],"output":{"name":"refcell"}}],[11,"default","std","Returns the default value of `0`",289,{"inputs":[],"output":{"name":"u128"}}],[11,"default","","",307,null],[11,"default","std::hash","",328,{"inputs":[],"output":{"name":"siphasher"}}],[11,"default","std","",307,null],[11,"default","std::sync::atomic","",395,{"inputs":[],"output":{"name":"atomici32"}}],[11,"default","std","",307,null],[11,"clone","std::iter","",347,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"clone","std::str","",405,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","std::mem","",314,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","std::str","",360,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","std::str::pattern","",329,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","std::sync::atomic","",244,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","std::marker","",320,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"clone","std::iter","",361,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"clone","std::str","",396,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","std::cmp","",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","std::str","",380,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","std::hash","",326,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"clone","std::str::pattern","",331,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","std::num","",193,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"clone","std::iter","",369,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"clone","std::char","",130,{"inputs":[{"name":"self"}],"output":{"name":"parsecharerror"}}],[11,"clone","std::iter","",355,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"clone","std::result","",393,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::char","",129,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"clone","std::ptr","",333,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"clone","std::char","",362,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"clone","std::fmt","",126,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","std::char","",386,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"clone","std::iter","",377,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"clone","std::ops","",47,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"clone","std::hash","",327,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"clone","std::option","",406,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::str","",409,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","std::iter","",353,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","std::mem","",318,{"inputs":[{"name":"self"}],"output":{"name":"manuallydrop"}}],[11,"clone_from","","",318,null],[11,"clone","std::option","",403,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::slice","",345,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","std::iter","",399,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"clone","std::str","",344,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","std::iter","",389,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"clone","","",372,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"clone","std::str","",411,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","std::convert","",131,{"inputs":[{"name":"self"}],"output":{"name":"infallible"}}],[11,"clone","std::hash","",328,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"clone","std::slice","",352,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::str::pattern","",330,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"clone","","",312,{"inputs":[{"name":"self"}],"output":{"name":"parseinterror"}}],[11,"clone","std::iter","",351,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"clone","std::ops","",324,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"clone","std::slice","",350,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","std::str","",397,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","std::ops","",28,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"clone","std::str::pattern","",91,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","std::iter","",348,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"clone","std::str","",400,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","std::ptr","",334,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"clone","std::str","",120,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","std::fmt","",382,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","std::slice","",376,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","std::iter","",346,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"clone","","",398,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"clone","std::ops","",39,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"clone","std::cell","",315,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"clone","std::iter","",338,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"clone","std::str::pattern","",332,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","std::iter","",354,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","","",407,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"clone","std::str","",388,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","std::result","",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","std::iter","",343,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","","",410,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"clone","std::ops","",36,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","std::str","",121,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","std::option","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",311,{"inputs":[{"name":"self"}],"output":{"name":"noneerror"}}],[11,"clone","std::raw","",69,{"inputs":[{"name":"self"}],"output":{"name":"traitobject"}}],[11,"clone","std::iter","",358,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"clone","","",390,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"clone","std::str","",337,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","std::ops","",49,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"clone","std::iter","",359,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"clone","std::num","",383,{"inputs":[{"name":"self"}],"output":{"name":"tryfrominterror"}}],[11,"clone","std::str","",373,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",391,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","std::cell","",323,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"clone","std::char","",375,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",340,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"clone","std::any","",316,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"clone","std::str","",394,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","std::slice","",384,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","std::num","",322,{"inputs":[{"name":"self"}],"output":{"name":"parsefloaterror"}}],[11,"clone","std::iter","",404,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"clone","std::ops","",34,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"clone","std::str","",364,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","std::hash","",325,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","std::result","",374,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"partial_cmp","std","",308,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",313,null],[11,"lt","","",313,null],[11,"le","","",313,null],[11,"gt","","",313,null],[11,"ge","","",313,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",296,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"partial_cmp","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"option"}}],[11,"lt","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"le","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ge","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"gt","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","std::result","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"lt","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"le","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"ge","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"gt","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"option"}}],[11,"lt","","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"le","","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"ge","","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"gt","","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",317,null],[11,"partial_cmp","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"lt","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"le","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"ge","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"gt","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"lt","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"le","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"ge","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"gt","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::cell","",315,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"option"}}],[11,"lt","","",315,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",315,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",315,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",315,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","std::ops","",49,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"lt","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"le","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"ge","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"gt","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",319,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"option"}}],[11,"partial_cmp","std::convert","",131,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"option"}}],[11,"partial_cmp","std","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","std::cell","",323,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"option"}}],[11,"lt","","",323,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",323,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",323,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",323,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",308,null],[11,"partial_cmp","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"lt","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"le","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"ge","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"gt","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"partial_cmp","std","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",313,null],[11,"lt","","",313,null],[11,"le","","",313,null],[11,"gt","","",313,null],[11,"ge","","",313,null],[11,"partial_cmp","std::any","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"option"}}],[11,"lt","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"le","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"gt","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ge","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::mem","",318,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"option"}}],[11,"lt","","",318,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"le","","",318,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"gt","","",318,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ge","","",318,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::option","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","std::marker","",320,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"partial_cmp","std","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"lt","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"le","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"ge","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"gt","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"lt","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"le","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"ge","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gt","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",306,null],[11,"partial_cmp","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"lt","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"le","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"ge","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"gt","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"option"}}],[11,"lt","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"le","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ge","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"gt","","",309,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","std::option","",311,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"option"}}],[11,"partial_cmp","std","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"lt","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"le","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"ge","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gt","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",321,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"option"}}],[11,"lt","","",321,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"le","","",321,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ge","","",321,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"gt","","",321,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"lt","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"le","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"ge","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"gt","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"lt","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"le","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ge","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"gt","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"lt","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"le","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"ge","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"gt","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","std::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"partial_cmp","std","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"option"}}],[11,"lt","","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"le","","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"ge","","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"gt","","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",307,null],[11,"lt","","",307,null],[11,"le","","",307,null],[11,"ge","","",307,null],[11,"gt","","",307,null],[11,"partial_cmp","","",308,null],[11,"partial_cmp","","",308,null],[11,"deref","","",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::cell","",365,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::mem","",318,null],[11,"deref","std","",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::cell","",356,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"bitxor_assign","std","",302,null],[11,"bitxor_assign","","",289,null],[11,"bitxor_assign","","",319,null],[11,"bitxor_assign","","",286,null],[11,"bitxor_assign","","",305,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","std","",291,null],[11,"bitxor_assign","","",305,null],[11,"bitxor_assign","","",303,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","std","",300,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","std","",287,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","std","",304,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","std","",300,null],[11,"bitxor_assign","","",290,null],[11,"bitxor_assign","","",287,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","std","",291,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","std","",301,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","","",194,null],[11,"bitxor_assign","std","",303,null],[11,"bitxor_assign","","",302,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","std","",286,null],[11,"bitxor_assign","","",304,null],[11,"bitxor_assign","std::num","",194,null],[11,"bitxor_assign","std","",301,null],[11,"bitxor_assign","","",290,null],[11,"bitxor_assign","","",288,null],[11,"bitxor_assign","","",319,null],[11,"bitxor_assign","","",289,null],[11,"bitxor_assign","","",288,null],[11,"write_str","std::fmt","",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",412,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",412,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write_str","std","",309,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",309,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",309,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","","",194,null],[11,"bitand_assign","std","",300,null],[11,"bitand_assign","","",319,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",305,null],[11,"bitand_assign","","",300,null],[11,"bitand_assign","","",319,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","","",194,null],[11,"bitand_assign","","",194,null],[11,"bitand_assign","","",194,null],[11,"bitand_assign","","",194,null],[11,"bitand_assign","std","",287,null],[11,"bitand_assign","","",305,null],[11,"bitand_assign","","",303,null],[11,"bitand_assign","","",302,null],[11,"bitand_assign","","",291,null],[11,"bitand_assign","","",290,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",301,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",302,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",290,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","","",194,null],[11,"bitand_assign","std","",286,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",288,null],[11,"bitand_assign","","",304,null],[11,"bitand_assign","","",301,null],[11,"bitand_assign","","",304,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",289,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",287,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",289,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",286,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",288,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","","",194,null],[11,"bitand_assign","","",194,null],[11,"bitand_assign","","",194,null],[11,"bitand_assign","std","",291,null],[11,"bitand_assign","std::num","",194,null],[11,"bitand_assign","std","",303,null],[11,"is_zero","","",287,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",301,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",286,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",305,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",291,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bitor","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"bitor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","std","",303,null],[11,"bitor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","std","",291,null],[11,"bitor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",194,null],[11,"bitor","std","",288,null],[11,"bitor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","std","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"bitor","","",290,null],[11,"bitor","","",305,null],[11,"bitor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","std","",291,null],[11,"bitor","std::num","",194,null],[11,"bitor","std","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitor","","",290,null],[11,"bitor","","",304,null],[11,"bitor","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"bitor","std::num","",194,null],[11,"bitor","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","std","",319,null],[11,"bitor","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"bitor","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bitor","","",289,null],[11,"bitor","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"bitor","","",286,null],[11,"bitor","","",304,null],[11,"bitor","","",286,null],[11,"bitor","","",300,null],[11,"bitor","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitor","","",289,null],[11,"bitor","","",287,null],[11,"bitor","std::num","",194,null],[11,"bitor","std","",303,null],[11,"bitor","","",304,null],[11,"bitor","","",300,null],[11,"bitor","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"bitor","","",286,null],[11,"bitor","","",301,null],[11,"bitor","","",301,null],[11,"bitor","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"bitor","std::num","",194,null],[11,"bitor","std","",290,null],[11,"bitor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",194,null],[11,"bitor","std","",288,null],[11,"bitor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","std","",319,null],[11,"bitor","","",302,null],[11,"bitor","","",319,null],[11,"bitor","std::num","",194,null],[11,"bitor","std","",305,null],[11,"bitor","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"bitor","","",289,null],[11,"bitor","","",301,null],[11,"bitor","std::num","",194,null],[11,"bitor","std","",291,null],[11,"bitor","std::num","",194,null],[11,"bitor","","",194,null],[11,"bitor","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","std","",300,null],[11,"bitor","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"bitor","","",319,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"bitor","","",303,null],[11,"bitor","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","std","",287,null],[11,"bitor","","",287,null],[11,"bitor","","",288,null],[11,"bitor","","",302,null],[11,"bitor","std::num","",194,null],[11,"bitor","","",194,null],[11,"bitor","std","",305,null],[11,"bitor","","",302,null],[11,"into_result","std::result","",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ok","","",70,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_error","","",70,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"into_result","std::option","",71,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ok","","",71,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",71,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"from","std","",290,{"inputs":[{"name":"u8"}],"output":{"name":"i32"}}],[11,"from","std::ptr","",334,{"inputs":[{"name":"unique"}],"output":{"name":"shared"}}],[11,"from","std","",286,{"inputs":[{"name":"u8"}],"output":{"name":"i64"}}],[11,"from","","",288,{"inputs":[{"name":"u8"}],"output":{"name":"i128"}}],[11,"from","","",292,{"inputs":[{"name":"u8"}],"output":{"name":"f64"}}],[11,"from","","",292,{"inputs":[{"name":"u16"}],"output":{"name":"f64"}}],[11,"from","","",288,{"inputs":[{"name":"i64"}],"output":{"name":"i128"}}],[11,"from","","",300,{"inputs":[{"name":"i8"}],"output":{"name":"isize"}}],[11,"from","","",290,{"inputs":[{"name":"u16"}],"output":{"name":"i32"}}],[11,"from","","",288,{"inputs":[{"name":"i8"}],"output":{"name":"i128"}}],[11,"from","","",291,{"inputs":[{"name":"u8"}],"output":{"name":"u64"}}],[11,"from","","",289,{"inputs":[{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","std::cell","",315,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"from","std::ptr","",334,{"inputs":[{"name":"t"}],"output":{"name":"shared"}}],[11,"from","std","",302,{"inputs":[{"name":"u8"}],"output":{"name":"i16"}}],[11,"from","","",292,{"inputs":[{"name":"f32"}],"output":{"name":"f64"}}],[11,"from","","",286,{"inputs":[{"name":"u16"}],"output":{"name":"i64"}}],[11,"from","std::ptr","",333,{"inputs":[{"name":"t"}],"output":{"name":"unique"}}],[11,"from","std::cell","",339,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"from","std","",289,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from","","",287,{"inputs":[{"name":"u8"}],"output":{"name":"u32"}}],[11,"from","","",290,{"inputs":[{"name":"i8"}],"output":{"name":"i32"}}],[11,"from","","",288,{"inputs":[{"name":"i32"}],"output":{"name":"i128"}}],[11,"from","","",289,{"inputs":[{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","","",286,{"inputs":[{"name":"u32"}],"output":{"name":"i64"}}],[11,"from","","",288,{"inputs":[{"name":"u32"}],"output":{"name":"i128"}}],[11,"from","","",286,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[11,"from","","",292,{"inputs":[{"name":"i8"}],"output":{"name":"f64"}}],[11,"from","","",288,{"inputs":[{"name":"u16"}],"output":{"name":"i128"}}],[11,"from","std::ptr","",334,{"inputs":[{"name":"t"}],"output":{"name":"shared"}}],[11,"from","std::option","",71,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","std","",287,{"inputs":[{"name":"char"}],"output":{"name":"u32"}}],[11,"from","","",287,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[11,"from","","",289,{"inputs":[{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","","",288,{"inputs":[{"name":"u64"}],"output":{"name":"i128"}}],[11,"from","std::ptr","",333,{"inputs":[{"name":"t"}],"output":{"name":"unique"}}],[11,"from","std","",321,{"inputs":[{"name":"u8"}],"output":{"name":"char"}}],[11,"from","","",293,{"inputs":[{"name":"u16"}],"output":{"name":"f32"}}],[11,"from","","",292,{"inputs":[{"name":"u32"}],"output":{"name":"f64"}}],[11,"from","","",293,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[11,"from","","",305,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[11,"from","","",291,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[11,"from","","",292,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[11,"from","","",288,{"inputs":[{"name":"i16"}],"output":{"name":"i128"}}],[11,"from","","",290,{"inputs":[{"name":"i16"}],"output":{"name":"i32"}}],[11,"from","","",293,{"inputs":[{"name":"i8"}],"output":{"name":"f32"}}],[11,"from","std::cell","",323,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"from","std","",302,{"inputs":[{"name":"i8"}],"output":{"name":"i16"}}],[11,"from","","",303,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[11,"from","","",292,{"inputs":[{"name":"i16"}],"output":{"name":"f64"}}],[11,"from","","",286,{"inputs":[{"name":"i16"}],"output":{"name":"i64"}}],[11,"from","","",293,{"inputs":[{"name":"i16"}],"output":{"name":"f32"}}],[11,"from","","",291,{"inputs":[{"name":"u16"}],"output":{"name":"u64"}}],[11,"from","","",286,{"inputs":[{"name":"i8"}],"output":{"name":"i64"}}],[11,"from","std::num","",383,{"inputs":[{"name":"infallible"}],"output":{"name":"tryfrominterror"}}],[11,"call_mut","std","",309,null],[11,"call_mut","","",309,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","std::slice","",352,null],[11,"as_ref","std","",307,null],[11,"as_ref","","",306,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",296,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"as_ref","","",309,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"as_ref","","",307,null],[11,"as_ref","","",296,null],[11,"as_ref","","",307,null],[11,"as_ref","","",309,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"as_ref","","",307,null],[11,"as_ref","","",307,null],[11,"rem_assign","","",302,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","std","",305,null],[11,"rem_assign","","",290,null],[11,"rem_assign","","",289,null],[11,"rem_assign","","",287,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","std","",304,null],[11,"rem_assign","","",288,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","std","",302,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","std","",286,null],[11,"rem_assign","","",290,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","","",194,null],[11,"rem_assign","","",194,null],[11,"rem_assign","std","",287,null],[11,"rem_assign","","",300,null],[11,"rem_assign","","",291,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","std","",303,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","std","",286,null],[11,"rem_assign","","",301,null],[11,"rem_assign","","",305,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","","",194,null],[11,"rem_assign","","",194,null],[11,"rem_assign","std","",301,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","","",194,null],[11,"rem_assign","","",194,null],[11,"rem_assign","std","",291,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","std","",288,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","","",194,null],[11,"rem_assign","std","",303,null],[11,"rem_assign","","",292,null],[11,"rem_assign","","",293,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","std","",292,null],[11,"rem_assign","","",293,null],[11,"rem_assign","","",300,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","std","",304,null],[11,"rem_assign","","",289,null],[11,"rem_assign","std::num","",194,null],[11,"rem_assign","","",194,null],[11,"rem_assign","","",194,null],[11,"rem_assign","","",194,null],[11,"mul_assign","std","",288,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","std","",292,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","std","",303,null],[11,"mul_assign","","",287,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",291,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",286,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",289,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",292,null],[11,"mul_assign","","",287,null],[11,"mul_assign","","",289,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",304,null],[11,"mul_assign","","",293,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","std","",288,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",290,null],[11,"mul_assign","","",303,null],[11,"mul_assign","","",293,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","","",194,null],[11,"mul_assign","std","",291,null],[11,"mul_assign","","",305,null],[11,"mul_assign","","",300,null],[11,"mul_assign","","",302,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",302,null],[11,"mul_assign","","",286,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",290,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",301,null],[11,"mul_assign","","",300,null],[11,"mul_assign","","",301,null],[11,"mul_assign","std::num","",194,null],[11,"mul_assign","std","",305,null],[11,"mul_assign","","",304,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","std","",305,null],[11,"add_assign","","",302,null],[11,"add_assign","","",300,null],[11,"add_assign","","",286,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","std","",289,null],[11,"add_assign","","",304,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","std","",286,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","std","",303,null],[11,"add_assign","","",301,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","std","",287,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","std","",287,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","std","",293,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","std","",305,null],[11,"add_assign","","",293,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","std","",291,null],[11,"add_assign","","",288,null],[11,"add_assign","","",303,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","","",194,null],[11,"add_assign","std","",289,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","std","",292,null],[11,"add_assign","","",290,null],[11,"add_assign","","",291,null],[11,"add_assign","","",292,null],[11,"add_assign","","",300,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","std","",301,null],[11,"add_assign","","",302,null],[11,"add_assign","","",304,null],[11,"add_assign","std::num","",194,null],[11,"add_assign","std","",288,null],[11,"add_assign","","",290,null],[11,"neg","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","std","",290,null],[11,"neg","","",302,null],[11,"neg","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","std","",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"neg","","",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"neg","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","std","",288,null],[11,"neg","","",300,null],[11,"neg","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","std","",301,null],[11,"neg","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","std","",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"neg","","",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"neg","","",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"neg","","",293,null],[11,"neg","","",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"neg","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","std","",286,null],[11,"neg","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","std","",292,null],[11,"neg","","",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"neg","","",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"neg","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",194,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"shr_assign","std","",301,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",287,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",303,null],[11,"shr_assign","","",305,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",305,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",305,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",290,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",288,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",303,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",286,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",302,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",287,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",305,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",303,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",287,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",287,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",305,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",289,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",301,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",300,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",300,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",291,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",303,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","","",194,null],[11,"shr_assign","std","",286,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",290,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",290,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",287,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",304,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",301,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",289,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",300,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","","",194,null],[11,"shr_assign","std","",304,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",291,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",303,null],[11,"shr_assign","std::num","",194,null],[11,"shr_assign","std","",290,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",286,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",288,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",289,null],[11,"shr_assign","","",290,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",287,null],[11,"shr_assign","","",304,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",302,null],[11,"shr_assign","","",301,null],[11,"shr_assign","","",301,null],[11,"shr_assign","std::num","",194,null],[11,"hash","std","",288,null],[11,"hash_slice","","",288,null],[11,"hash","std::ops","",28,null],[11,"hash","std","",308,null],[11,"hash","","",302,null],[11,"hash_slice","","",302,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",310,null],[11,"hash","","",308,null],[11,"hash","","",319,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",286,null],[11,"hash_slice","","",286,null],[11,"hash","","",310,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","std::convert","",131,null],[11,"hash","std","",308,null],[11,"hash","","",291,null],[11,"hash_slice","","",291,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","","",307,null],[11,"hash","std::mem","",318,null],[11,"hash","std","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",310,null],[11,"hash","","",308,null],[11,"hash","","",304,null],[11,"hash_slice","","",304,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",313,null],[11,"hash","","",287,null],[11,"hash_slice","","",287,null],[11,"hash","","",308,null],[11,"hash","std::option","",71,null],[11,"hash","std","",308,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",310,null],[11,"hash","std::ops","",47,null],[11,"hash","std","",308,null],[11,"hash","","",307,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","std::ops","",36,null],[11,"hash","std","",308,null],[11,"hash","","",310,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","std::mem","",314,null],[11,"hash","std","",308,null],[11,"hash","","",308,null],[11,"hash","","",301,null],[11,"hash_slice","","",301,null],[11,"hash","std::ops","",39,null],[11,"hash","std","",310,null],[11,"hash","std::num","",194,null],[11,"hash","std","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",289,null],[11,"hash_slice","","",289,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","std::any","",316,null],[11,"hash","std","",308,null],[11,"hash","","",303,null],[11,"hash_slice","","",303,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",317,null],[11,"hash","","",306,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","","",307,null],[11,"hash","std::fmt","",126,null],[11,"hash","std","",309,null],[11,"hash","","",307,null],[11,"hash","","",307,null],[11,"hash","","",310,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",321,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",300,null],[11,"hash_slice","","",300,null],[11,"hash","","",307,null],[11,"hash","","",307,null],[11,"hash","","",310,null],[11,"hash","std::marker","",320,null],[11,"hash","std","",307,null],[11,"hash","std::option","",311,null],[11,"hash","std::ops","",324,null],[11,"hash","std","",310,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","std::cmp","",3,null],[11,"hash","std","",308,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","std::ops","",34,null],[11,"hash","std","",310,null],[11,"hash","","",308,null],[11,"hash","","",290,null],[11,"hash_slice","","",290,null],[11,"hash","","",308,null],[11,"hash","","",296,null],[11,"hash","","",307,null],[11,"hash","std::result","",70,null],[11,"hash","std","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",310,null],[11,"hash","","",307,null],[11,"hash","","",310,null],[11,"hash","","",308,null],[11,"hash","","",305,null],[11,"hash_slice","","",305,null],[11,"hash","","",307,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"hash","std::ops","",49,null],[11,"hash","std","",307,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",313,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",309,null],[11,"hash","","",308,null],[11,"hash","","",308,null],[11,"hash","","",307,null],[11,"borrow","","",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"borrow","","",307,null],[11,"index_mut","","",296,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",296,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",306,null],[11,"index_mut","","",296,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",296,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",296,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",296,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"sub","","",293,null],[11,"sub","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"sub","","",303,null],[11,"sub","","",305,null],[11,"sub","","",288,null],[11,"sub","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","std","",291,null],[11,"sub","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"sub","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"sub","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"sub","std::num","",194,null],[11,"sub","std","",301,null],[11,"sub","","",300,null],[11,"sub","","",289,null],[11,"sub","","",305,null],[11,"sub","","",304,null],[11,"sub","","",293,null],[11,"sub","","",290,null],[11,"sub","","",305,null],[11,"sub","","",289,null],[11,"sub","std::num","",194,null],[11,"sub","std","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"sub","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","std","",302,null],[11,"sub","std::num","",194,null],[11,"sub","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",194,null],[11,"sub","std","",286,null],[11,"sub","std::num","",194,null],[11,"sub","std","",292,null],[11,"sub","","",290,null],[11,"sub","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","std","",303,null],[11,"sub","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","std","",301,null],[11,"sub","","",300,null],[11,"sub","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"sub","","",287,null],[11,"sub","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"sub","","",300,null],[11,"sub","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","std","",304,null],[11,"sub","","",286,null],[11,"sub","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","std","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"sub","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","std","",289,null],[11,"sub","","",288,null],[11,"sub","","",291,null],[11,"sub","","",286,null],[11,"sub","","",287,null],[11,"sub","","",302,null],[11,"sub","std::num","",194,null],[11,"sub","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","std","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sub","","",304,null],[11,"sub","std::num","",194,null],[11,"sub","std","",293,null],[11,"sub","","",292,null],[11,"sub","","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sub","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",194,null],[11,"sub","std","",303,null],[11,"sub","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"sub","","",288,null],[11,"sub","","",287,null],[11,"sub","","",302,null],[11,"sub","","",291,null],[11,"sub","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",194,null],[11,"sub","","",194,null],[11,"sub","","",194,null],[11,"sub","std","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"sub","","",290,null],[11,"sub","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"sub","","",292,null],[11,"sub","std::num","",194,null],[11,"sub","std","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"sub","","",301,null],[11,"shr","","",305,null],[11,"shr","","",301,null],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",288,null],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u128"}}],[11,"shr","","",305,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i32"}}],[11,"shr","","",301,null],[11,"shr","","",304,null],[11,"shr","","",290,null],[11,"shr","","",302,null],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u64"}}],[11,"shr","","",300,null],[11,"shr","","",290,null],[11,"shr","","",287,null],[11,"shr","","",301,null],[11,"shr","","",305,null],[11,"shr","","",300,null],[11,"shr","","",290,null],[11,"shr","","",289,null],[11,"shr","","",300,null],[11,"shr","","",286,null],[11,"shr","","",301,null],[11,"shr","","",286,null],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i16"}}],[11,"shr","","",288,null],[11,"shr","","",300,null],[11,"shr","","",290,null],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"shr","","",289,null],[11,"shr","","",291,null],[11,"shr","","",303,null],[11,"shr","","",288,null],[11,"shr","","",288,null],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u64"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"isize"}}],[11,"shr","","",300,null],[11,"shr","","",303,null],[11,"shr","","",289,null],[11,"shr","","",290,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"usize"}}],[11,"shr","","",287,null],[11,"shr","","",304,null],[11,"shr","","",291,null],[11,"shr","","",290,null],[11,"shr","","",291,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i128"}}],[11,"shr","","",304,null],[11,"shr","","",290,null],[11,"shr","","",300,null],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shr","","",303,null],[11,"shr","","",288,null],[11,"shr","","",289,null],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shr","","",300,null],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u128"}}],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u32"}}],[11,"shr","","",300,null],[11,"shr","","",289,null],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i32"}}],[11,"shr","","",300,null],[11,"shr","","",305,null],[11,"shr","","",305,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"usize"}}],[11,"shr","","",300,null],[11,"shr","","",303,null],[11,"shr","","",302,null],[11,"shr","","",286,null],[11,"shr","","",291,null],[11,"shr","","",302,null],[11,"shr","","",304,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u16"}}],[11,"shr","","",303,null],[11,"shr","","",303,null],[11,"shr","","",286,null],[11,"shr","","",291,null],[11,"shr","","",305,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u16"}}],[11,"shr","","",289,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"shr","","",289,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i64"}}],[11,"shr","","",303,null],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"shr","","",291,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i128"}}],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u16"}}],[11,"shr","","",303,null],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",301,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i8"}}],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"shr","","",301,null],[11,"shr","","",290,null],[11,"shr","","",288,null],[11,"shr","","",291,null],[11,"shr","","",289,null],[11,"shr","","",287,null],[11,"shr","","",290,null],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i16"}}],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i64"}}],[11,"shr","","",303,null],[11,"shr","","",291,null],[11,"shr","","",304,null],[11,"shr","","",288,null],[11,"shr","","",287,null],[11,"shr","","",287,null],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u8"}}],[11,"shr","","",290,null],[11,"shr","","",302,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i128"}}],[11,"shr","","",303,null],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"shr","","",291,null],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u8"}}],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u128"}}],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u32"}}],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"usize"}}],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"usize"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"isize"}}],[11,"shr","","",287,null],[11,"shr","","",287,null],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"shr","","",289,null],[11,"shr","","",303,null],[11,"shr","","",289,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i128"}}],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u32"}}],[11,"shr","","",288,null],[11,"shr","","",300,null],[11,"shr","","",301,null],[11,"shr","","",300,null],[11,"shr","","",305,null],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u8"}}],[11,"shr","","",289,null],[11,"shr","","",291,null],[11,"shr","","",289,null],[11,"shr","","",302,null],[11,"shr","","",305,null],[11,"shr","","",291,null],[11,"shr","","",300,null],[11,"shr","","",286,null],[11,"shr","","",302,null],[11,"shr","","",288,null],[11,"shr","","",291,null],[11,"shr","","",302,null],[11,"shr","","",305,null],[11,"shr","","",303,null],[11,"shr","","",304,null],[11,"shr","","",291,null],[11,"shr","","",288,null],[11,"shr","","",302,null],[11,"shr","","",286,null],[11,"shr","","",288,null],[11,"shr","","",286,null],[11,"shr","","",302,null],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u64"}}],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u16"}}],[11,"shr","","",291,null],[11,"shr","","",303,null],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i16"}}],[11,"shr","","",286,null],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i16"}}],[11,"shr","","",301,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"shr","","",289,null],[11,"shr","","",303,null],[11,"shr","","",288,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"shr","","",305,null],[11,"shr","","",286,null],[11,"shr","","",291,null],[11,"shr","","",305,null],[11,"shr","","",291,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"isize"}}],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u128"}}],[11,"shr","","",287,null],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"shr","","",305,null],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u8"}}],[11,"shr","","",289,null],[11,"shr","","",300,null],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i32"}}],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i16"}}],[11,"shr","","",290,null],[11,"shr","","",291,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u16"}}],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u8"}}],[11,"shr","","",289,null],[11,"shr","","",289,null],[11,"shr","","",288,null],[11,"shr","","",291,null],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u8"}}],[11,"shr","","",301,null],[11,"shr","","",290,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"usize"}}],[11,"shr","","",286,null],[11,"shr","","",287,null],[11,"shr","","",286,null],[11,"shr","","",300,null],[11,"shr","","",287,null],[11,"shr","","",301,null],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i8"}}],[11,"shr","","",300,null],[11,"shr","","",288,null],[11,"shr","","",300,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i64"}}],[11,"shr","","",301,null],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u32"}}],[11,"shr","","",300,null],[11,"shr","","",286,null],[11,"shr","","",287,null],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"shr","","",288,null],[11,"shr","","",286,null],[11,"shr","","",304,null],[11,"shr","","",300,null],[11,"shr","","",287,null],[11,"shr","","",290,null],[11,"shr","","",301,null],[11,"shr","","",303,null],[11,"shr","","",290,null],[11,"shr","","",291,null],[11,"shr","","",302,null],[11,"shr","","",291,null],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i32"}}],[11,"shr","","",303,null],[11,"shr","","",288,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i32"}}],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i128"}}],[11,"shr","","",302,null],[11,"shr","","",301,null],[11,"shr","","",304,null],[11,"shr","","",302,null],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",304,null],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u128"}}],[11,"shr","","",287,null],[11,"shr","","",300,null],[11,"shr","","",290,null],[11,"shr","","",304,null],[11,"shr","","",301,null],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"shr","","",287,null],[11,"shr","","",301,null],[11,"shr","","",287,null],[11,"shr","","",289,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"isize"}}],[11,"shr","","",302,null],[11,"shr","","",300,null],[11,"shr","","",303,null],[11,"shr","","",289,null],[11,"shr","","",287,null],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i8"}}],[11,"shr","","",305,null],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u32"}}],[11,"shr","","",287,null],[11,"shr","","",301,null],[11,"shr","","",291,null],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i32"}}],[11,"shr","","",301,null],[11,"shr","","",303,null],[11,"shr","","",289,null],[11,"shr","","",290,null],[11,"shr","","",303,null],[11,"shr","","",286,null],[11,"shr","","",287,null],[11,"shr","","",288,null],[11,"shr","","",286,null],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i32"}}],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u16"}}],[11,"shr","","",289,null],[11,"shr","","",291,null],[11,"shr","","",290,null],[11,"shr","","",303,null],[11,"shr","","",303,null],[11,"shr","","",304,null],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",305,null],[11,"shr","","",289,null],[11,"shr","","",304,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"usize"}}],[11,"shr","","",304,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"shr","","",300,null],[11,"shr","","",286,null],[11,"shr","","",304,null],[11,"shr","","",286,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i64"}}],[11,"shr","","",288,null],[11,"shr","","",288,null],[11,"shr","","",303,null],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u64"}}],[11,"shr","","",287,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"isize"}}],[11,"shr","","",305,null],[11,"shr","","",302,null],[11,"shr","","",289,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"shr","","",287,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"shr","","",291,null],[11,"shr","","",303,null],[11,"shr","","",300,null],[11,"shr","","",286,null],[11,"shr","","",301,null],[11,"shr","","",304,null],[11,"shr","","",303,null],[11,"shr","","",300,null],[11,"shr","","",304,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"isize"}}],[11,"shr","","",302,null],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i8"}}],[11,"shr","","",290,null],[11,"shr","","",305,null],[11,"shr","","",304,null],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u32"}}],[11,"shr","","",304,null],[11,"shr","","",287,null],[11,"shr","","",287,null],[11,"shr","","",305,null],[11,"shr","","",301,null],[11,"shr","","",289,null],[11,"shr","","",304,null],[11,"shr","","",304,null],[11,"shr","","",300,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i128"}}],[11,"shr","","",286,null],[11,"shr","","",290,null],[11,"shr","","",289,null],[11,"shr","","",300,null],[11,"shr","","",290,null],[11,"shr","","",300,null],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u64"}}],[11,"shr","","",291,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i128"}}],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i8"}}],[11,"shr","","",287,null],[11,"shr","","",291,null],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",302,null],[11,"shr","","",287,null],[11,"shr","","",305,null],[11,"shr","","",288,null],[11,"shr","","",300,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"isize"}}],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",286,null],[11,"shr","","",289,null],[11,"shr","","",302,null],[11,"shr","","",302,null],[11,"shr","","",290,null],[11,"shr","","",290,null],[11,"shr","","",305,null],[11,"shr","","",303,null],[11,"shr","","",301,null],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u128"}}],[11,"shr","","",305,null],[11,"shr","","",286,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"usize"}}],[11,"shr","","",289,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i64"}}],[11,"shr","","",289,null],[11,"shr","","",286,null],[11,"shr","","",303,null],[11,"shr","","",301,null],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i8"}}],[11,"shr","","",302,null],[11,"shr","","",302,null],[11,"shr","","",300,null],[11,"shr","","",301,null],[11,"shr","","",287,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i64"}}],[11,"shr","","",301,null],[11,"shr","","",288,null],[11,"shr","","",302,null],[11,"shr","","",303,null],[11,"shr","","",286,null],[11,"shr","","",301,null],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"shr","","",290,null],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i16"}}],[11,"shr","","",302,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",300,null],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",291,null],[11,"shr","","",304,null],[11,"shr","","",305,null],[11,"shr","","",301,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u16"}}],[11,"shr","","",290,null],[11,"shr","","",305,null],[11,"shr","","",289,null],[11,"shr","","",290,null],[11,"shr","","",291,null],[11,"shr","","",303,null],[11,"shr","","",303,null],[11,"shr","","",289,null],[11,"shr","","",287,null],[11,"shr","","",287,null],[11,"shr","","",305,null],[11,"shr","","",287,null],[11,"shr","","",302,null],[11,"shr","","",301,null],[11,"shr","","",288,null],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",303,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"usize"}}],[11,"shr","","",305,null],[11,"shr","","",301,null],[11,"shr","","",287,null],[11,"shr","","",300,null],[11,"shr","","",305,null],[11,"shr","","",301,null],[11,"shr","","",286,null],[11,"shr","","",303,null],[11,"shr","","",301,null],[11,"shr","","",304,null],[11,"shr","","",286,null],[11,"shr","","",291,null],[11,"shr","","",303,null],[11,"shr","","",291,null],[11,"shr","","",288,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i128"}}],[11,"shr","","",302,null],[11,"shr","","",288,null],[11,"shr","","",302,null],[11,"shr","","",305,null],[11,"shr","","",288,null],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u32"}}],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u64"}}],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i8"}}],[11,"shr","","",304,null],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u32"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"isize"}}],[11,"shr","","",300,null],[11,"shr","","",305,null],[11,"shr","","",301,null],[11,"shr","","",288,null],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i16"}}],[11,"shr","","",287,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"shr","","",300,null],[11,"shr","","",291,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"shr","","",302,null],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u128"}}],[11,"shr","","",301,null],[11,"shr","","",288,null],[11,"shr","","",301,null],[11,"shr","","",305,null],[11,"shr","","",302,null],[11,"shr","","",289,null],[11,"shr","","",305,null],[11,"shr","","",304,null],[11,"shr","","",304,null],[11,"shr","","",289,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u128"}}],[11,"shr","","",303,null],[11,"shr","","",291,null],[11,"shr","","",288,null],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i32"}}],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u8"}}],[11,"shr","","",302,null],[11,"shr","","",305,null],[11,"shr","","",305,null],[11,"shr","","",289,null],[11,"shr","","",305,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u16"}}],[11,"shr","","",304,null],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u64"}}],[11,"shr","","",304,null],[11,"shr","","",301,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i128"}}],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i16"}}],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u64"}}],[11,"shr","","",291,null],[11,"shr","","",287,null],[11,"shr","","",301,null],[11,"shr","","",288,null],[11,"shr","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",286,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i64"}}],[11,"shr","","",304,null],[11,"shr","","",288,null],[11,"shr","","",301,null],[11,"shr","","",290,null],[11,"shr","","",304,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u8"}}],[11,"shr","","",304,null],[11,"shr","","",291,null],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i16"}}],[11,"shr","","",304,null],[11,"shr","","",302,null],[11,"shr","","",305,null],[11,"shr","","",286,null],[11,"shr","","",304,null],[11,"shr","","",287,null],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i8"}}],[11,"shr","","",287,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u16"}}],[11,"shr","","",290,null],[11,"shr","","",290,null],[11,"shr","","",286,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i64"}}],[11,"shr","","",304,null],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i8"}}],[11,"shr","","",305,null],[11,"shr","","",302,null],[11,"shr","","",288,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i128"}}],[11,"shr","","",290,null],[11,"shr","","",300,null],[11,"shr","","",290,null],[11,"shr","","",286,null],[11,"shr","","",288,null],[11,"shr","","",302,null],[11,"shr","","",286,null],[11,"shr","","",300,null],[11,"shr","","",290,null],[11,"shr","","",286,null],[11,"shr","","",304,null],[11,"shr","","",286,null],[11,"shr","","",303,null],[11,"shr","","",304,null],[11,"shr","","",291,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u64"}}],[11,"shr","","",301,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"usize"}}],[11,"shr","","",288,null],[11,"shr","","",290,null],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i32"}}],[11,"shr","","",286,null],[11,"shr","","",301,null],[11,"shr","","",302,null],[11,"shr","","",288,null],[11,"shr","","",291,null],[11,"shr","","",288,null],[11,"shr","","",290,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i32"}}],[11,"shr","","",300,null],[11,"shr","","",305,null],[11,"shr","","",290,null],[11,"shr","","",288,null],[11,"shr","","",287,null],[11,"shr","","",290,null],[11,"shr","","",290,null],[11,"shr","","",286,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u16"}}],[11,"shr","","",287,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"shr","","",291,null],[11,"shr","","",302,null],[11,"shr","","",289,null],[11,"shr","","",291,null],[11,"shr","","",286,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i64"}}],[11,"shr","","",286,null],[11,"shr","","",302,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i16"}}],[11,"shr","","",289,null],[11,"shr","","",289,null],[11,"shr","","",288,null],[11,"shr","","",301,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i8"}}],[11,"shr","","",303,null],[11,"shr","","",286,null],[11,"shr","","",304,null],[11,"shr","","",304,null],[11,"shr","","",289,null],[11,"shr","","",287,null],[11,"shr","","",286,null],[11,"shr","","",302,null],[11,"shr","","",289,null],[11,"shr","","",287,null],[11,"shr","","",305,null],[11,"shr","","",302,null],[11,"shr","","",302,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"isize"}}],[11,"shr","","",290,null],[11,"shr","","",303,null],[11,"resume","","",309,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",321,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",365,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::convert","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",340,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rem","std","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"rem","std::num","",194,null],[11,"rem","std","",302,null],[11,"rem","std::num","",194,null],[11,"rem","std","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"rem","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",291,null],[11,"rem","","",290,null],[11,"rem","","",293,null],[11,"rem","std::num","",194,null],[11,"rem","std","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","","",303,null],[11,"rem","","",288,null],[11,"rem","","",301,null],[11,"rem","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"rem","std::num","",194,null],[11,"rem","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",291,null],[11,"rem","std::num","",194,null],[11,"rem","std","",290,null],[11,"rem","std::num","",194,null],[11,"rem","std","",304,null],[11,"rem","std::num","",194,null],[11,"rem","std","",300,null],[11,"rem","","",300,null],[11,"rem","","",302,null],[11,"rem","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"rem","std::num","",194,null],[11,"rem","std","",289,null],[11,"rem","","",290,null],[11,"rem","","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"rem","","",287,null],[11,"rem","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",287,null],[11,"rem","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",292,null],[11,"rem","","",304,null],[11,"rem","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",305,null],[11,"rem","","",303,null],[11,"rem","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"rem","","",301,null],[11,"rem","","",286,null],[11,"rem","","",293,null],[11,"rem","","",286,null],[11,"rem","","",289,null],[11,"rem","std::num","",194,null],[11,"rem","std","",292,null],[11,"rem","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"rem","","",303,null],[11,"rem","","",304,null],[11,"rem","","",288,null],[11,"rem","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"rem","","",289,null],[11,"rem","std::num","",194,null],[11,"rem","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",305,null],[11,"rem","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"rem","","",292,null],[11,"rem","std::num","",194,null],[11,"rem","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",302,null],[11,"rem","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"rem","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",305,null],[11,"rem","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"rem","","",288,null],[11,"rem","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","std","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"rem","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"rem","","",293,null],[11,"rem","","",301,null],[11,"rem","","",286,null],[11,"rem","","",287,null],[11,"rem","","",291,null],[11,"rem","","",300,null],[11,"rem","std::num","",194,null],[11,"shl","std","",305,null],[11,"shl","","",289,null],[11,"shl","","",300,null],[11,"shl","","",291,null],[11,"shl","","",289,null],[11,"shl","","",287,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"shl","","",289,null],[11,"shl","","",303,null],[11,"shl","","",291,null],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i16"}}],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i8"}}],[11,"shl","","",305,null],[11,"shl","","",290,null],[11,"shl","","",286,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"isize"}}],[11,"shl","","",286,null],[11,"shl","","",302,null],[11,"shl","","",287,null],[11,"shl","","",291,null],[11,"shl","","",287,null],[11,"shl","","",290,null],[11,"shl","","",290,null],[11,"shl","","",300,null],[11,"shl","","",286,null],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u8"}}],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i64"}}],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"usize"}}],[11,"shl","","",305,null],[11,"shl","","",304,null],[11,"shl","","",304,null],[11,"shl","","",304,null],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u64"}}],[11,"shl","","",288,null],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"shl","","",287,null],[11,"shl","","",301,null],[11,"shl","","",302,null],[11,"shl","","",287,null],[11,"shl","","",304,null],[11,"shl","","",286,null],[11,"shl","","",304,null],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u8"}}],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i64"}}],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i16"}}],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i8"}}],[11,"shl","","",289,null],[11,"shl","","",287,null],[11,"shl","","",287,null],[11,"shl","","",286,null],[11,"shl","","",300,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"shl","","",291,null],[11,"shl","","",304,null],[11,"shl","","",289,null],[11,"shl","","",304,null],[11,"shl","","",304,null],[11,"shl","","",300,null],[11,"shl","","",288,null],[11,"shl","","",290,null],[11,"shl","","",289,null],[11,"shl","","",291,null],[11,"shl","","",302,null],[11,"shl","","",286,null],[11,"shl","","",288,null],[11,"shl","","",303,null],[11,"shl","","",289,null],[11,"shl","","",300,null],[11,"shl","","",291,null],[11,"shl","","",288,null],[11,"shl","","",301,null],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shl","","",286,null],[11,"shl","","",300,null],[11,"shl","","",303,null],[11,"shl","","",302,null],[11,"shl","","",286,null],[11,"shl","","",290,null],[11,"shl","","",304,null],[11,"shl","","",286,null],[11,"shl","","",290,null],[11,"shl","","",305,null],[11,"shl","","",288,null],[11,"shl","","",303,null],[11,"shl","","",288,null],[11,"shl","","",301,null],[11,"shl","","",291,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u32"}}],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u32"}}],[11,"shl","","",301,null],[11,"shl","","",287,null],[11,"shl","","",291,null],[11,"shl","","",290,null],[11,"shl","","",303,null],[11,"shl","","",286,null],[11,"shl","","",290,null],[11,"shl","","",288,null],[11,"shl","","",300,null],[11,"shl","","",289,null],[11,"shl","","",303,null],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",304,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"shl","","",291,null],[11,"shl","","",289,null],[11,"shl","","",301,null],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u128"}}],[11,"shl","","",302,null],[11,"shl","","",302,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u16"}}],[11,"shl","","",291,null],[11,"shl","","",302,null],[11,"shl","","",287,null],[11,"shl","","",302,null],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",290,null],[11,"shl","","",305,null],[11,"shl","","",288,null],[11,"shl","","",300,null],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i8"}}],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"isize"}}],[11,"shl","","",304,null],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i8"}}],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u64"}}],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i64"}}],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",290,null],[11,"shl","","",301,null],[11,"shl","","",288,null],[11,"shl","","",286,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u32"}}],[11,"shl","","",302,null],[11,"shl","","",301,null],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"shl","","",301,null],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i32"}}],[11,"shl","","",301,null],[11,"shl","","",287,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u16"}}],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",301,null],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u64"}}],[11,"shl","","",300,null],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i64"}}],[11,"shl","","",289,null],[11,"shl","","",304,null],[11,"shl","","",290,null],[11,"shl","","",291,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"isize"}}],[11,"shl","","",302,null],[11,"shl","","",288,null],[11,"shl","","",301,null],[11,"shl","","",302,null],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",289,null],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"usize"}}],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i128"}}],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"isize"}}],[11,"shl","","",300,null],[11,"shl","","",288,null],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u128"}}],[11,"shl","","",303,null],[11,"shl","","",304,null],[11,"shl","","",302,null],[11,"shl","","",300,null],[11,"shl","","",291,null],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",286,null],[11,"shl","","",301,null],[11,"shl","","",286,null],[11,"shl","","",302,null],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u64"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"shl","","",289,null],[11,"shl","","",304,null],[11,"shl","","",288,null],[11,"shl","","",303,null],[11,"shl","","",288,null],[11,"shl","","",290,null],[11,"shl","","",305,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"isize"}}],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i32"}}],[11,"shl","","",287,null],[11,"shl","","",289,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u32"}}],[11,"shl","","",287,null],[11,"shl","","",290,null],[11,"shl","","",287,null],[11,"shl","","",289,null],[11,"shl","","",289,null],[11,"shl","","",300,null],[11,"shl","","",305,null],[11,"shl","","",304,null],[11,"shl","","",291,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"isize"}}],[11,"shl","","",287,null],[11,"shl","","",303,null],[11,"shl","","",303,null],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i8"}}],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"shl","","",300,null],[11,"shl","","",287,null],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",286,null],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",302,null],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",290,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i32"}}],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i32"}}],[11,"shl","","",291,null],[11,"shl","","",286,null],[11,"shl","","",301,null],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u8"}}],[11,"shl","","",288,null],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i128"}}],[11,"shl","","",290,null],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u64"}}],[11,"shl","","",300,null],[11,"shl","","",303,null],[11,"shl","","",303,null],[11,"shl","","",288,null],[11,"shl","","",290,null],[11,"shl","","",300,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"shl","","",301,null],[11,"shl","","",288,null],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",304,null],[11,"shl","","",305,null],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",287,null],[11,"shl","","",300,null],[11,"shl","","",301,null],[11,"shl","","",289,null],[11,"shl","","",287,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"isize"}}],[11,"shl","","",287,null],[11,"shl","","",301,null],[11,"shl","","",290,null],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i128"}}],[11,"shl","","",286,null],[11,"shl","","",303,null],[11,"shl","","",287,null],[11,"shl","","",303,null],[11,"shl","","",289,null],[11,"shl","","",290,null],[11,"shl","","",289,null],[11,"shl","","",291,null],[11,"shl","","",305,null],[11,"shl","","",288,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u16"}}],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i16"}}],[11,"shl","","",287,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"usize"}}],[11,"shl","","",301,null],[11,"shl","","",287,null],[11,"shl","","",288,null],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i8"}}],[11,"shl","","",288,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u32"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u16"}}],[11,"shl","","",286,null],[11,"shl","","",304,null],[11,"shl","","",291,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"shl","","",286,null],[11,"shl","","",286,null],[11,"shl","","",300,null],[11,"shl","","",290,null],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i16"}}],[11,"shl","","",303,null],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i32"}}],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"shl","","",303,null],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i16"}}],[11,"shl","","",302,null],[11,"shl","","",302,null],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i128"}}],[11,"shl","","",286,null],[11,"shl","","",289,null],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u8"}}],[11,"shl","","",303,null],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i16"}}],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u8"}}],[11,"shl","","",291,null],[11,"shl","","",305,null],[11,"shl","","",303,null],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i64"}}],[11,"shl","","",305,null],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i32"}}],[11,"shl","","",304,null],[11,"shl","","",291,null],[11,"shl","","",290,null],[11,"shl","","",288,null],[11,"shl","","",290,null],[11,"shl","","",305,null],[11,"shl","","",302,null],[11,"shl","","",287,null],[11,"shl","","",303,null],[11,"shl","","",301,null],[11,"shl","","",305,null],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shl","","",301,null],[11,"shl","","",287,null],[11,"shl","","",290,null],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i128"}}],[11,"shl","","",288,null],[11,"shl","","",301,null],[11,"shl","","",301,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u32"}}],[11,"shl","","",303,null],[11,"shl","","",301,null],[11,"shl","","",305,null],[11,"shl","","",289,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"shl","","",286,null],[11,"shl","","",288,null],[11,"shl","","",304,null],[11,"shl","","",287,null],[11,"shl","","",288,null],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"shl","","",305,null],[11,"shl","","",287,null],[11,"shl","","",301,null],[11,"shl","","",287,null],[11,"shl","","",290,null],[11,"shl","","",304,null],[11,"shl","","",301,null],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"shl","","",302,null],[11,"shl","","",301,null],[11,"shl","","",291,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"shl","","",289,null],[11,"shl","","",300,null],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u128"}}],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"usize"}}],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u128"}}],[11,"shl","","",286,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"usize"}}],[11,"shl","","",288,null],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i128"}}],[11,"shl","","",304,null],[11,"shl","","",300,null],[11,"shl","","",300,null],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i32"}}],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i8"}}],[11,"shl","","",300,null],[11,"shl","","",289,null],[11,"shl","","",305,null],[11,"shl","","",286,null],[11,"shl","","",291,null],[11,"shl","","",302,null],[11,"shl","","",286,null],[11,"shl","","",287,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u32"}}],[11,"shl","","",291,null],[11,"shl","","",302,null],[11,"shl","","",300,null],[11,"shl","","",303,null],[11,"shl","","",305,null],[11,"shl","","",300,null],[11,"shl","","",303,null],[11,"shl","","",304,null],[11,"shl","","",302,null],[11,"shl","","",291,null],[11,"shl","","",303,null],[11,"shl","","",287,null],[11,"shl","","",302,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"isize"}}],[11,"shl","","",288,null],[11,"shl","","",303,null],[11,"shl","","",286,null],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"shl","","",291,null],[11,"shl","","",290,null],[11,"shl","","",302,null],[11,"shl","","",300,null],[11,"shl","","",286,null],[11,"shl","","",304,null],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",300,null],[11,"shl","","",290,null],[11,"shl","","",290,null],[11,"shl","","",289,null],[11,"shl","","",289,null],[11,"shl","","",304,null],[11,"shl","","",304,null],[11,"shl","","",291,null],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u128"}}],[11,"shl","","",302,null],[11,"shl","","",302,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"usize"}}],[11,"shl","","",304,null],[11,"shl","","",290,null],[11,"shl","","",287,null],[11,"shl","","",291,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i8"}}],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i8"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u16"}}],[11,"shl","","",300,null],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"shl","","",288,null],[11,"shl","","",288,null],[11,"shl","","",300,null],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i32"}}],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i32"}}],[11,"shl","","",289,null],[11,"shl","","",286,null],[11,"shl","","",288,null],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i64"}}],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u128"}}],[11,"shl","","",290,null],[11,"shl","","",289,null],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u64"}}],[11,"shl","","",290,null],[11,"shl","","",289,null],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i16"}}],[11,"shl","","",290,null],[11,"shl","","",300,null],[11,"shl","","",291,null],[11,"shl","","",290,null],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i128"}}],[11,"shl","","",303,null],[11,"shl","","",286,null],[11,"shl","","",305,null],[11,"shl","","",287,null],[11,"shl","","",288,null],[11,"shl","","",302,null],[11,"shl","","",288,null],[11,"shl","","",301,null],[11,"shl","","",304,null],[11,"shl","","",291,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u16"}}],[11,"shl","","",303,null],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"shl","","",304,null],[11,"shl","","",288,null],[11,"shl","","",289,null],[11,"shl","","",302,null],[11,"shl","","",289,null],[11,"shl","","",302,null],[11,"shl","","",302,null],[11,"shl","","",303,null],[11,"shl","","",301,null],[11,"shl","","",291,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u16"}}],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i128"}}],[11,"shl","","",301,null],[11,"shl","","",291,null],[11,"shl","","",303,null],[11,"shl","","",301,null],[11,"shl","","",305,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"usize"}}],[11,"shl","","",304,null],[11,"shl","","",288,null],[11,"shl","","",302,null],[11,"shl","","",302,null],[11,"shl","","",304,null],[11,"shl","","",305,null],[11,"shl","","",287,null],[11,"shl","","",288,null],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u64"}}],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u64"}}],[11,"shl","","",304,null],[11,"shl","","",301,null],[11,"shl","","",300,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"usize"}}],[11,"shl","","",300,null],[11,"shl","","",302,null],[11,"shl","","",291,null],[11,"shl","","",303,null],[11,"shl","","",287,null],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",287,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u32"}}],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i64"}}],[11,"shl","","",288,null],[11,"shl","","",300,null],[11,"shl","","",303,null],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u8"}}],[11,"shl","","",304,null],[11,"shl","","",301,null],[11,"shl","","",287,null],[11,"shl","","",286,null],[11,"shl","","",291,null],[11,"shl","","",303,null],[11,"shl","","",300,null],[11,"shl","","",286,null],[11,"shl","","",287,null],[11,"shl","","",305,null],[11,"shl","","",289,null],[11,"shl","","",303,null],[11,"shl","","",291,null],[11,"shl","","",302,null],[11,"shl","","",291,null],[11,"shl","","",301,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i8"}}],[11,"shl","","",301,null],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i64"}}],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i128"}}],[11,"shl","","",304,null],[11,"shl","","",290,null],[11,"shl","","",304,null],[11,"shl","","",291,null],[11,"shl","","",301,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"isize"}}],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u8"}}],[11,"shl","","",288,null],[11,"shl","","",286,null],[11,"shl","","",290,null],[11,"shl","","",286,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i64"}}],[11,"shl","","",301,null],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u128"}}],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"usize"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u16"}}],[11,"shl","","",303,null],[11,"shl","","",286,null],[11,"shl","","",305,null],[11,"shl","","",290,null],[11,"shl","","",289,null],[11,"shl","","",291,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u64"}}],[11,"shl","","",300,null],[11,"shl","","",300,null],[11,"shl","","",302,null],[11,"shl","","",301,null],[11,"shl","","",303,null],[11,"shl","","",290,null],[11,"shl","","",301,null],[11,"shl","","",300,null],[11,"shl","","",290,null],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i16"}}],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"shl","","",287,null],[11,"shl","","",304,null],[11,"shl","","",287,null],[11,"shl","","",290,null],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i16"}}],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u16"}}],[11,"shl","","",304,null],[11,"shl","","",289,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u128"}}],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"shl","","",290,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i32"}}],[11,"shl","","",288,null],[11,"shl","","",289,null],[11,"shl","","",303,null],[11,"shl","","",305,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u16"}}],[11,"shl","","",305,null],[11,"shl","","",289,null],[11,"shl","","",288,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i128"}}],[11,"shl","","",286,null],[11,"shl","","",286,null],[11,"shl","","",289,null],[11,"shl","","",289,null],[11,"shl","std::num","",194,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",291,null],[11,"shl","","",300,null],[11,"shl","","",302,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i16"}}],[11,"shl","","",303,null],[11,"shl","","",291,null],[11,"shl","","",286,null],[11,"shl","","",304,null],[11,"shl","","",289,null],[11,"shl","","",304,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u8"}}],[11,"shl","","",302,null],[11,"shl","","",302,null],[11,"shl","","",287,null],[11,"shl","","",286,null],[11,"next","std::option","",406,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",406,null],[11,"next","std::str","",360,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",360,null],[11,"next","std::char","",362,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::str","",364,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::slice","",384,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",384,null],[11,"count","","",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",384,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",338,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",338,null],[11,"fold","","",338,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::slice","",336,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",336,null],[11,"next","std::str","",397,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",397,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",397,null],[11,"last","","",397,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::slice","",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"next","std::iter","Overflow Behavior",358,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",358,null],[11,"nth","","",358,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",358,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",358,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",390,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",390,null],[11,"fold","","",390,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","std::ops","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"nth","","",39,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","std::str","",388,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",388,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",388,null],[11,"last","","",388,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",380,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",400,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"next","std::option","",403,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",403,null],[11,"next","std::char","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",340,null],[11,"count","","",340,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",340,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::slice","",402,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",402,null],[11,"count","","",402,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",402,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",402,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::str","",337,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::slice","",387,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",387,null],[11,"next","std::iter","",389,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",389,null],[11,"next","","",398,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",398,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",398,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",398,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",398,null],[11,"fold","","",398,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::result","",393,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",393,null],[11,"next","std::iter","",359,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",359,null],[11,"fold","","",359,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::slice","",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",376,null],[11,"count","","",376,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",376,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::str","",409,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",361,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",361,null],[11,"next","std::str","",373,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",373,null],[11,"count","","",373,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",373,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",373,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",373,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",373,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",373,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",373,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",373,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next","std::result","",370,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next","std::option","",357,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",357,null],[11,"next","std::iter","",346,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",346,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",346,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",346,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",346,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",346,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"next","std::str","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::slice","",378,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",378,null],[11,"count","","",378,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",378,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",378,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",378,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",378,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",378,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",378,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",378,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",371,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"next","std::iter","",410,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",410,null],[11,"next","std::slice","",366,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",366,null],[11,"next","std::ops","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"nth","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","std::slice","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",341,null],[11,"next","std::result","",374,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",374,null],[11,"next","std::iter","",354,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",354,null],[11,"count","","",354,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",354,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std","",309,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",309,null],[11,"nth","","",309,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","std::char","",375,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",375,null],[11,"count","","",375,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",375,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"fold","","",351,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","","",343,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",343,null],[11,"next","","",377,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",377,null],[11,"fold","","",377,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"find","","",377,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",377,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next","","",369,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",369,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",369,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",369,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"fold","","",369,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::str","",396,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",396,null],[11,"next","","",411,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",347,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"fold","","",347,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",407,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",407,null],[11,"next","","",355,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",355,null],[11,"next","","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",353,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",353,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",353,null],[11,"fold","","",353,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::str","",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::ops","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"nth","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","std::str","",391,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::slice","",345,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",345,null],[11,"next","std::char","",386,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",386,null],[11,"next","std::iter","",399,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",399,null],[11,"next","std::slice","",352,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"count","","",352,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",352,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",352,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",352,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",352,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",352,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",352,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",352,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","std::iter","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",353,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",353,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",353,null],[11,"fold","","",353,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::slice","",408,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",408,null],[11,"next","std::iter","",404,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",404,null],[11,"fold","","",404,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::str","",394,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",348,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",348,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",289,null],[11,"bitand","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"bitand","std::num","",194,null],[11,"bitand","std","",301,null],[11,"bitand","","",289,null],[11,"bitand","std::num","",194,null],[11,"bitand","std","",319,null],[11,"bitand","std::num","",194,null],[11,"bitand","std","",287,null],[11,"bitand","","",301,null],[11,"bitand","","",300,null],[11,"bitand","","",319,null],[11,"bitand","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"bitand","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bitand","","",286,null],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"bitand","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"bitand","","",304,null],[11,"bitand","","",288,null],[11,"bitand","std::num","",194,null],[11,"bitand","","",194,null],[11,"bitand","std","",303,null],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",305,null],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"bitand","","",287,null],[11,"bitand","std::num","",194,null],[11,"bitand","std","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",302,null],[11,"bitand","","",302,null],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitand","std::num","",194,null],[11,"bitand","std","",291,null],[11,"bitand","","",304,null],[11,"bitand","","",305,null],[11,"bitand","","",303,null],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"bitand","std::num","",194,null],[11,"bitand","","",194,null],[11,"bitand","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",289,null],[11,"bitand","","",286,null],[11,"bitand","","",319,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"bitand","","",290,null],[11,"bitand","","",290,null],[11,"bitand","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"bitand","","",305,null],[11,"bitand","","",300,null],[11,"bitand","","",303,null],[11,"bitand","","",304,null],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",302,null],[11,"bitand","","",291,null],[11,"bitand","","",288,null],[11,"bitand","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitand","std::num","",194,null],[11,"bitand","std","",288,null],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",287,null],[11,"bitand","","",300,null],[11,"bitand","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"bitand","","",319,null],[11,"bitand","","",286,null],[11,"bitand","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","std","",301,null],[11,"bitand","","",291,null],[11,"bitand","std::num","",194,null],[11,"bitand","","",194,null],[11,"bitand","std","",290,null],[11,"call_once","","",309,null],[11,"call_once","","",309,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",306,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",309,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"as_mut","","",307,null],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",301,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"sum","","",290,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",289,{"inputs":[{"name":"i"}],"output":{"name":"u128"}}],[11,"sum","","",286,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"sum","","",292,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"sum","","",303,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",287,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"sum","","",303,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",300,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"sum","","",288,{"inputs":[{"name":"i"}],"output":{"name":"i128"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",288,{"inputs":[{"name":"i"}],"output":{"name":"i128"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",300,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",302,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"sum","","",291,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",287,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"sum","","",293,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",70,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",293,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",291,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"sum","","",305,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"sum","","",305,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",301,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",304,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"sum","std::num","",194,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",289,{"inputs":[{"name":"i"}],"output":{"name":"u128"}}],[11,"sum","","",292,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"sum","","",290,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"sum","","",302,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"sum","","",286,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"sum","","",304,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"len","std::iter","",358,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",358,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::slice","",378,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::iter","",407,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::str","",373,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",373,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::iter","",359,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",359,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",390,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",390,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",351,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",353,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",353,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::char","",375,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::iter","",410,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::slice","",352,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::char","",340,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std","",309,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::iter","",377,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",377,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref_mut","std","",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","std::cell","",365,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","std::mem","",318,null],[11,"next_back","std::iter","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",351,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","std::str","",388,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",353,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","std::str","",360,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",387,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",364,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::result","",370,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",346,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",346,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","std::slice","",345,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",384,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",343,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",358,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",358,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",361,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",411,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",402,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",377,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",377,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"rfind","","",377,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","std::str","",394,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",378,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",378,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","std::ops","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",407,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",409,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",373,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",373,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",390,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",390,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",347,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",347,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",369,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std","",309,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",359,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",359,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","std::str","",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::ops","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",397,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",396,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::option","",403,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::result","",374,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",404,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",404,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",354,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",354,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",410,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",353,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","std::result","",393,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",352,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","",352,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","std::option","",406,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",380,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",391,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",400,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::option","",357,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str::pattern","",330,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",330,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",330,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",332,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",329,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",329,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",331,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",331,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",331,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_mut","std","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"borrow_mut","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","std::cell","",315,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"cmp","std","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",319,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"ordering"}}],[11,"cmp","","",308,null],[11,"cmp","","",310,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",296,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ordering"}}],[11,"cmp","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"ordering"}}],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","std::convert","",131,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"ordering"}}],[11,"cmp","std","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"ordering"}}],[11,"cmp","","",313,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"ordering"}}],[11,"cmp","","",308,null],[11,"cmp","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","std","",317,null],[11,"cmp","","",308,null],[11,"cmp","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"ordering"}}],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"cmp","std::cell","",323,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"cmp","std","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"ordering"}}],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",310,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"ordering"}}],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",310,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",307,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","std::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","std","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"ordering"}}],[11,"cmp","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"cmp","std","",309,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"ordering"}}],[11,"cmp","","",310,null],[11,"cmp","","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ordering"}}],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",307,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","std::marker","",320,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"cmp","std::option","",311,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"ordering"}}],[11,"cmp","std","",307,null],[11,"cmp","std::result","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"cmp","std","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"ordering"}}],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","std::option","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","std","",310,null],[11,"cmp","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"cmp","","",310,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","std::ops","",49,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"ordering"}}],[11,"cmp","std","",308,null],[11,"cmp","","",306,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",310,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",309,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"ordering"}}],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","std::any","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"ordering"}}],[11,"cmp","std","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",310,null],[11,"cmp","","",307,null],[11,"cmp","","",307,null],[11,"cmp","std::mem","",318,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"ordering"}}],[11,"cmp","std","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",321,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"ordering"}}],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"ordering"}}],[11,"cmp","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"ordering"}}],[11,"cmp","","",310,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",313,null],[11,"cmp","","",307,null],[11,"cmp","","",307,null],[11,"cmp","","",307,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"cmp","","",310,null],[11,"cmp","","",308,null],[11,"cmp","","",308,null],[11,"shl_assign","","",303,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",289,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",289,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",300,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",301,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","","",194,null],[11,"shl_assign","std","",291,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",302,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","","",194,null],[11,"shl_assign","std","",289,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",290,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",302,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",302,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",303,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",288,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",288,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",291,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",287,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",289,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",290,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",302,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","","",194,null],[11,"shl_assign","std","",288,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",286,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",286,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",303,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",290,null],[11,"shl_assign","","",300,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",289,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",287,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",286,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",305,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","std","",287,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",304,null],[11,"shl_assign","std::num","",194,null],[11,"shl_assign","","",194,null],[11,"shl_assign","std","",302,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",301,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",289,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",291,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",290,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",287,null],[11,"shl_assign","","",288,null],[11,"shl_assign","","",304,null],[11,"shl_assign","","",302,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",286,null],[11,"shl_assign","","",305,null],[11,"from_iter","std::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",70,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"from_iter","std::option","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",71,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"div","std","",305,null],[11,"div","","",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"div","","",289,null],[11,"div","","",302,null],[11,"div","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"div","","",291,null],[11,"div","","",303,null],[11,"div","std::num","",194,null],[11,"div","std","",288,null],[11,"div","","",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"div","std::num","",194,null],[11,"div","std","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"div","","",292,null],[11,"div","","",291,null],[11,"div","","",286,null],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",293,null],[11,"div","","",301,null],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",290,null],[11,"div","std::num","",194,null],[11,"div","std","",289,null],[11,"div","std::num","",194,null],[11,"div","std","",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"div","","",303,null],[11,"div","","",301,null],[11,"div","","",288,null],[11,"div","","",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"div","","",287,null],[11,"div","","",301,null],[11,"div","","",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",194,null],[11,"div","std","",293,null],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",300,null],[11,"div","","",290,null],[11,"div","","",304,null],[11,"div","","",302,null],[11,"div","","",302,null],[11,"div","","",305,null],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"div","","",293,null],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",290,null],[11,"div","std::num","",194,null],[11,"div","std","",287,null],[11,"div","std::num","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"div","std","",300,null],[11,"div","","",287,null],[11,"div","","",304,null],[11,"div","","",288,null],[11,"div","std::num","",194,null],[11,"div","","",194,null],[11,"div","","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",300,null],[11,"div","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"div","","",286,null],[11,"div","","",303,null],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"div","","",286,null],[11,"div","std::num","",194,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","std","",292,null],[11,"div","std::num","",194,null],[11,"div","std","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"div","","",304,null],[11,"div","","",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"div","","",292,null],[11,"div","","",289,null],[11,"div","","",291,null],[11,"div","","",305,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","std","",300,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","std","",305,null],[11,"bitor_assign","","",289,null],[11,"bitor_assign","","",286,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","std","",289,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","std","",287,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","std","",291,null],[11,"bitor_assign","","",301,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","std","",302,null],[11,"bitor_assign","","",302,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","std","",290,null],[11,"bitor_assign","","",288,null],[11,"bitor_assign","","",305,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","std","",319,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","std","",288,null],[11,"bitor_assign","","",303,null],[11,"bitor_assign","","",319,null],[11,"bitor_assign","","",304,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","std","",301,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","std","",304,null],[11,"bitor_assign","","",303,null],[11,"bitor_assign","","",287,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","std","",291,null],[11,"bitor_assign","","",300,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","","",194,null],[11,"bitor_assign","std","",286,null],[11,"bitor_assign","std::num","",194,null],[11,"bitor_assign","std","",290,null],[11,"deref_mut","std::string","",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","std::vec","",137,null],[11,"deref_mut","std::collections::binary_heap","",413,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_empty","std::collections::binary_heap","",414,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::collections::vec_deque","",415,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_map","",416,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",417,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::collections::binary_heap","",418,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_map","",419,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",420,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::vec","",421,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_map","",422,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",423,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::collections::binary_heap","",424,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::vec","",425,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_set","",426,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::collections::vec_deque","",427,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_set","",428,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::collections::vec_deque","",429,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","std::string","",140,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","std::vec","",137,null],[11,"index","std::string","",140,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","std::vec","",137,null],[11,"index","","",137,null],[11,"index","std::string","",140,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",140,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","std::vec","",137,null],[11,"index","","",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",137,null],[11,"index","std::collections::vec_deque","",430,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index","std::collections::btree_map","",431,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","std::string","",140,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","std::vec","",137,null],[11,"index","std::string","",140,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"finalize","std::boxed","",119,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"from_str","std::string","",140,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync","",432,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",433,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","std::collections::btree_set","",434,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","std::collections::vec_deque","",429,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::collections::btree_set","",435,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","std::rc","Makes a clone of the `Rc` pointer.",433,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"clone","std::collections::linked_list","",436,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::str","",437,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","std::string","",124,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","std::sync","Makes a clone of the `Weak` pointer that points to the same value.",438,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","std::collections::vec_deque","",430,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","std::sync","Makes a clone of the `Arc` pointer.",432,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"clone","std::collections::btree_map","",420,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","std::heap","",439,{"inputs":[{"name":"self"}],"output":{"name":"cannotreallocinplace"}}],[11,"clone","std::collections::binary_heap","",440,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",440,null],[11,"clone","std::heap","",441,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"clone","std::collections::binary_heap","",424,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::collections::btree_map","",417,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::collections::linked_list","",442,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::vec","",137,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",137,null],[11,"clone","std::collections::btree_set","",443,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","std::collections::linked_list","",444,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"clone","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone_from","","",74,null],[11,"clone","std::boxed","Returns a new box with a `clone()` of this box's contents.",119,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",119,null],[11,"clone","std::collections::btree_set","",426,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::heap","",276,{"inputs":[{"name":"self"}],"output":{"name":"allocerr"}}],[11,"clone","std::collections::btree_map","",416,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",445,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","std::heap","",446,{"inputs":[{"name":"self"}],"output":{"name":"heap"}}],[11,"clone","std::collections::btree_map","",431,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"clone","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","std::collections::vec_deque","",427,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::collections::btree_set","",447,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","std::string","",140,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",140,null],[11,"clone","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","std::collections::btree_set","",448,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"clone","std::vec","",421,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::rc","Makes a clone of the `Weak` pointer that points to the same value.",449,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","std::boxed","",450,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"clone","std::collections::binary_heap","",418,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::collections::btree_set","",451,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","std::collections","",105,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"default","std::boxed","",119,{"inputs":[],"output":{"name":"box"}}],[11,"default","std::sync","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",438,{"inputs":[],"output":{"name":"weak"}}],[11,"default","std::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",435,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","std::collections::linked_list","Creates an empty `LinkedList<T>`.",444,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"default","std::collections::vec_deque","Creates an empty `VecDeque<T>`.",430,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"default","std::boxed","Creates a `Box<T>`, with the `Default` value for T.",119,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"box"}}],[11,"default","std::borrow","Creates an owned Cow<'a, B> with the default value for the contained owned value.",74,{"inputs":[],"output":{"name":"cow"}}],[11,"default","std::string","Creates an empty `String`.",140,{"inputs":[],"output":{"name":"string"}}],[11,"default","std::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",433,{"inputs":[],"output":{"name":"rc"}}],[11,"default","std::sync","Creates a new `Arc<T>`, with the `Default` value for `T`.",432,{"inputs":[],"output":{"name":"arc"}}],[11,"default","std::collections::binary_heap","Creates an empty `BinaryHeap<T>`.",440,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"default","std::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",431,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","std::rc","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",449,{"inputs":[],"output":{"name":"weak"}}],[11,"default","std::vec","Creates an empty `Vec<T>`.",137,{"inputs":[],"output":{"name":"vec"}}],[11,"default","std::heap","",446,{"inputs":[],"output":{"name":"heap"}}],[11,"from_iter","std::string","",140,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::collections::linked_list","",444,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"from_iter","std::collections::binary_heap","",440,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from_iter","std::collections::vec_deque","",430,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"from_iter","std::borrow","",74,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","std::collections::btree_map","",431,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","std::borrow","",74,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","std::string","",140,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::borrow","",74,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","std::string","",140,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::vec","",137,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","std::borrow","",74,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","std::string","",140,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",140,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::collections::btree_set","",435,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"add","std::borrow","",74,null],[11,"add","std::string","",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"add","std::borrow","",74,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::heap","",439,{"inputs":[{"name":"self"},{"name":"cannotreallocinplace"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std","",296,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::string","",124,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::heap","",276,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"ne","","",276,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","std::borrow","",74,null],[11,"ne","","",74,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::linked_list","",444,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",444,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::collections","",105,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"eq","std","",296,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",74,null],[11,"ne","","",74,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::string","",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::btree_set","",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std","",296,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::string","",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::string","",140,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::heap","",441,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ne","","",441,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::collections::btree_map","",431,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::rc","Equality for two `Rc`s.",433,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",433,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::sync","Equality for two `Arc`s.",432,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc`s.",432,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","std::string","",140,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std","",296,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","","",430,null],[11,"eq","","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",430,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"next_back","std::collections::btree_map","",417,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::vec","",421,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",445,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::vec","",452,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",423,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::binary_heap","",414,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::linked_list","",442,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",453,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::vec_deque","",427,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_set","",428,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::binary_heap","",418,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_set","",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::vec_deque","",429,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",429,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","std::collections::binary_heap","",424,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::vec_deque","",454,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",415,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","std::collections::linked_list","",436,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",422,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",420,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::linked_list","",455,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::string","",456,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",416,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::vec","",425,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_set","",426,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",419,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extend","std::vec","",137,null],[11,"extend","std::collections::binary_heap","",440,null],[11,"extend","std::collections::vec_deque","",430,null],[11,"extend","","",430,null],[11,"extend","std::collections::btree_set","",435,null],[11,"extend","std::string","",140,null],[11,"extend","std::collections::linked_list","",444,null],[11,"extend","std::vec","",137,null],[11,"extend","std::string","",140,null],[11,"extend","","",140,null],[11,"extend","std::collections::btree_map","",431,null],[11,"extend","std::string","",140,null],[11,"extend","std::collections::btree_map","",431,null],[11,"extend","std::string","",140,null],[11,"extend","std::collections::binary_heap","",440,null],[11,"extend","std::collections::linked_list","",444,null],[11,"extend","std::collections::btree_set","",435,null],[11,"pointer","std::vec","",457,null],[11,"pointer","std::collections::linked_list","",458,null],[11,"pointer","std::boxed","",459,null],[11,"pointer","std::collections::vec_deque","",460,null],[11,"pointer","std::collections::linked_list","",461,null],[11,"pointer","std::collections::binary_heap","",462,null],[11,"pointer","std::collections::vec_deque","",463,null],[11,"to_owned","std","",296,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_into","","",296,null],[11,"to_owned","","",306,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_into","","",306,null],[11,"fmt","std::string","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",433,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::heap","",439,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync","",432,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow_mut","std::vec","",137,null],[11,"borrow_mut","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::collections::linked_list","",461,null],[11,"finalize","std::collections::vec_deque","",460,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::boxed","",459,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"finalize","std::collections::binary_heap","",462,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::collections::linked_list","",458,null],[11,"finalize","std::collections::vec_deque","",463,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::vec","",457,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","std::collections::btree_set","",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","std::rc","Comparison for two `Rc`s.",433,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"cmp","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::linked_list","",444,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"cmp","std::vec","",137,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::btree_map","",431,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"cmp","std::string","",140,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"cmp","std::sync","Comparison for two `Arc`s.",432,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::vec_deque","",430,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"call_once","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",119,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"as_mut","std::vec","",137,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","std::vec","",137,null],[11,"next","std::collections::btree_set","",428,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",428,null],[11,"next","","",434,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",434,null],[11,"next","std::collections::btree_map","",417,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",417,null],[11,"next","std::collections::vec_deque","",454,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",454,null],[11,"next","std::collections::btree_set","",443,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",443,null],[11,"next","std::collections::vec_deque","",427,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",427,null],[11,"next","std::str","",437,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",437,null],[11,"next","std::collections::vec_deque","",429,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",429,null],[11,"fold","","",429,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","std::collections::btree_map","",416,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",416,null],[11,"next","std::string","",456,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",456,null],[11,"next","std::collections::btree_map","",422,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",422,null],[11,"next","std::collections::btree_set","",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",426,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",426,null],[11,"next","std::collections::linked_list","",455,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",455,null],[11,"next","std::collections::binary_heap","",418,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",418,null],[11,"next","std::collections::btree_map","",453,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::vec","",421,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",421,null],[11,"count","","",421,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","std::collections::vec_deque","",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",415,null],[11,"fold","","",415,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","std::collections::btree_map","",420,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",420,null],[11,"next","","",423,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",423,null],[11,"next","std::collections::linked_list","",436,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",436,null],[11,"next","std::collections::binary_heap","",424,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",424,null],[11,"next","std::collections::btree_map","",419,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",419,null],[11,"next","","",445,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::vec","",425,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",425,null],[11,"next","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"nth","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","std::collections::btree_set","",447,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",447,null],[11,"next","","",448,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",448,null],[11,"next","std::collections::linked_list","",442,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",442,null],[11,"next","std::vec","",452,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",452,null],[11,"next","std::collections::binary_heap","",414,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",414,null],[11,"next","std::vec","",464,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",464,null],[11,"from","std::rc","",433,{"inputs":[{"name":"vec"}],"output":{"name":"rc"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","std::rc","",433,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[11,"from","","",433,{"inputs":[{"name":"string"}],"output":{"name":"rc"}}],[11,"from","std::sync","",432,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"from","std::sync","",432,{"inputs":[{"name":"str"}],"output":{"name":"arc"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","std::borrow","",74,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","std::string","",140,{"inputs":[{"name":"cow"}],"output":{"name":"string"}}],[11,"from","std::sync","",432,{"inputs":[{"name":"vec"}],"output":{"name":"arc"}}],[11,"from","","",432,{"inputs":[{"name":"box"}],"output":{"name":"arc"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","std::collections::binary_heap","",440,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","std::boxed","",119,null],[11,"from","std::borrow","",74,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from","std::sync","",432,{"inputs":[{"name":"string"}],"output":{"name":"arc"}}],[11,"from","std::rc","",433,{"inputs":[{"name":"box"}],"output":{"name":"rc"}}],[11,"from","std::string","",140,{"inputs":[{"name":"box"}],"output":{"name":"string"}}],[11,"from","std::borrow","",74,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","std::vec","",137,null],[11,"from","std::boxed","",119,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"from","std::string","",140,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","std::borrow","",74,null],[11,"from","std::vec","",137,null],[11,"from","std::boxed","",119,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","std::rc","",433,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"from","std::sync","",432,null],[11,"from","std::rc","",433,null],[11,"from","std::collections::vec_deque","",430,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"write_str","std::string","",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",140,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"finish","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",119,null],[11,"write_u8","","",119,null],[11,"write_u16","","",119,null],[11,"write_u32","","",119,null],[11,"write_u64","","",119,null],[11,"write_u128","","",119,null],[11,"write_usize","","",119,null],[11,"write_i8","","",119,null],[11,"write_i16","","",119,null],[11,"write_i32","","",119,null],[11,"write_i64","","",119,null],[11,"write_i128","","",119,null],[11,"write_isize","","",119,null],[11,"make_place","std::collections::vec_deque","",460,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","std::vec","",457,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","std::collections::linked_list","",461,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"make_place","std::boxed","",450,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"make_place","std::collections::vec_deque","",463,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"make_place","std::collections::linked_list","",458,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"alloc","std::heap","",446,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"oom","","",446,null],[11,"dealloc","","",446,null],[11,"usable_size","","",446,null],[11,"realloc","","",446,null],[11,"alloc_zeroed","","",446,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"alloc_excess","","",446,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"result"}}],[11,"realloc_excess","","",446,null],[11,"grow_in_place","","",446,null],[11,"shrink_in_place","","",446,null],[11,"concat","std","",306,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"join","","",306,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"connect","","",306,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"concat","","",306,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"join","","",306,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"connect","","",306,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"fmt","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::linked_list","",458,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::vec","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",452,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",448,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",465,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",466,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::linked_list","",444,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",451,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::binary_heap","",424,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",413,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",416,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",417,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::vec","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",449,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync","",432,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::vec_deque","",415,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",426,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",431,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",456,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::vec_deque","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",453,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::heap","",439,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::vec_deque","",460,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync","",438,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::vec","",457,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::vec","",425,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::binary_heap","",418,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::linked_list","",436,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::binary_heap","",414,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",435,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::vec_deque","",427,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::binary_heap","",462,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",443,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",422,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",434,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::linked_list","",455,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::vec","",464,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::heap","",441,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",445,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::vec_deque","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",463,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",433,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::linked_list","",461,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::heap","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::linked_list","",442,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::heap","",446,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",447,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::vec_deque","",454,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::binary_heap","",440,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",437,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::heap","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","std::collections::vec_deque","",430,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"partial_cmp","std::sync","Partial comparison for two `Arc`s.",432,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc`s.",432,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",432,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc`s.",432,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",432,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::collections::btree_set","",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::vec","",137,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"partial_cmp","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::collections::btree_map","",431,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","std::collections::linked_list","",444,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"partial_cmp","std::string","",140,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::rc","Partial comparison for two `Rc`s.",433,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",433,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",433,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",433,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",433,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"deref","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"deref","std::rc","",433,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"len","std","Returns the number of elements in the slice.",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the slice has a length of 0.",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"first","","Returns the first element of the slice, or `None` if it is empty.",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"first_mut","","Returns a mutable pointer to the first element of the slice, or `None` if it is empty.",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first","","Returns the first and all the rest of the elements of the slice, or `None` if it is empty.",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first_mut","","Returns the first and all the rest of the elements of the slice, or `None` if it is empty.",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last","","Returns the last and all the rest of the elements of the slice, or `None` if it is empty.",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last_mut","","Returns the last and all the rest of the elements of the slice, or `None` if it is empty.",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","Returns the last element of the slice, or `None` if it is empty.",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last_mut","","Returns a mutable pointer to the last item in the slice.",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a reference to an element or subslice depending on the type of index.",306,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to an element or subslice depending on the type of index (see [`get`]) or `None` if the index is out of bounds.",306,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_unchecked","","Returns a reference to an element or subslice, without doing bounds checking.",306,null],[11,"get_unchecked_mut","","Returns a mutable reference to an element or subslice, without doing bounds checking.",306,null],[11,"as_ptr","","Returns a raw pointer to the slice's buffer.",306,null],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the slice's buffer.",306,null],[11,"swap","","Swaps two elements in the slice.",306,null],[11,"reverse","","Reverses the order of elements in the slice, in place.",306,null],[11,"iter","","Returns an iterator over the slice.",306,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator that allows modifying each value.",306,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"windows","","Returns an iterator over all contiguous windows of length `size`. The windows overlap. If the slice is shorter than `size`, the iterator returns no values.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"chunks","","Returns an iterator over `size` elements of the slice at a time. The chunks are slices and do not overlap. If `size` does not divide the length of the slice, then the last chunk will not have length `size`.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time. The chunks are mutable slices, and do not overlap. If `chunk_size` does not divide the length of the slice, then the last chunk will not have length `chunk_size`.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"split_at","","Divides one slice into two at an index.",306,null],[11,"split_at_mut","","Divides one `&mut` into two at an index.",306,null],[11,"split","","Returns an iterator over subslices separated by elements that match `pred`. The matched element is not contained in the subslices.",306,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"split"}}],[11,"split_mut","","Returns an iterator over mutable subslices separated by elements that match `pred`. The matched element is not contained in the subslices.",306,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"splitmut"}}],[11,"rsplit","","Returns an iterator over subslices separated by elements that match `pred`, starting at the end of the slice and working backwards. The matched element is not contained in the subslices.",306,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rsplit"}}],[11,"rsplit_mut","","Returns an iterator over mutable subslices separated by elements that match `pred`, starting at the end of the slice and working backwards. The matched element is not contained in the subslices.",306,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rsplitmut"}}],[11,"splitn","","Returns an iterator over subslices separated by elements that match `pred`, limited to returning at most `n` items. The matched element is not contained in the subslices.",306,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"splitn"}}],[11,"splitn_mut","","Returns an iterator over subslices separated by elements that match `pred`, limited to returning at most `n` items. The matched element is not contained in the subslices.",306,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"splitnmut"}}],[11,"rsplitn","","Returns an iterator over subslices separated by elements that match `pred` limited to returning at most `n` items. This starts at the end of the slice and works backwards.  The matched element is not contained in the subslices.",306,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"rsplitn"}}],[11,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match `pred` limited to returning at most `n` items. This starts at the end of the slice and works backwards. The matched element is not contained in the subslices.",306,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"rsplitnmut"}}],[11,"contains","","Returns `true` if the slice contains an element with the given value.",306,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"starts_with","","Returns `true` if `needle` is a prefix of the slice.",306,null],[11,"ends_with","","Returns `true` if `needle` is a suffix of the slice.",306,null],[11,"binary_search","","Binary searches this sorted slice for a given element.",306,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"binary_search_by","","Binary searches this sorted slice with a comparator function.",306,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"binary_search_by_key","","Binary searches this sorted slice with a key extraction function.",306,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"sort","","Sorts the slice.",306,null],[11,"sort_by","","Sorts the slice with a comparator function.",306,null],[11,"sort_by_key","","Sorts the slice with a key extraction function.",306,null],[11,"sort_unstable","","Sorts the slice, but may not preserve the order of equal elements.",306,null],[11,"sort_unstable_by","","Sorts the slice with a comparator function, but may not preserve the order of equal elements.",306,null],[11,"sort_unstable_by_key","","Sorts the slice with a key extraction function, but may not preserve the order of equal elements.",306,null],[11,"rotate","","Permutes the slice in-place such that `self[mid..]` moves to the beginning of the slice while `self[..mid]` moves to the end of the slice.  Equivalently, rotates the slice `mid` places to the left or `k = self.len() - mid` places to the right.",306,null],[11,"clone_from_slice","","Copies the elements from `src` into `self`.",306,null],[11,"copy_from_slice","","Copies all elements from `src` into `self`, using a memcpy.",306,null],[11,"swap_with_slice","","Swaps all elements in `self` with those in `src`.",306,null],[11,"to_vec","","Copies `self` into a new `Vec`.",306,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_vec","","Converts `self` into a vector without clones or allocation.",306,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"deref","std::vec","",137,null],[11,"deref","std::collections::binary_heap","",413,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"len","std","Returns the length of `self`.",296,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if `self` has a length of zero bytes.",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_char_boundary","","Checks that `index`-th byte lies at the start and/or end of a UTF-8 code point sequence.",296,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"as_bytes","","Converts a string slice to a byte slice. To convert the byte slice back into a string slice, use the [`str::from_utf8`] function.",296,null],[11,"as_bytes_mut","","Converts a mutable string slice to a mutable byte slice. To convert the mutable byte slice back into a mutable string slice, use the [`str::from_utf8_mut`] function.",296,null],[11,"as_ptr","","Converts a string slice to a raw pointer.",296,null],[11,"get","","Returns a subslice of `str`.",296,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable subslice of `str`.",296,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_unchecked","","Returns a unchecked subslice of `str`.",296,null],[11,"get_unchecked_mut","","Returns a mutable, unchecked subslice of `str`.",296,null],[11,"slice_unchecked","","Creates a string slice from another string slice, bypassing safety checks.",296,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[11,"slice_mut_unchecked","","Creates a string slice from another string slice, bypassing safety checks. This is generally not recommended, use with caution! For a safe alternative see [`str`] and [`IndexMut`].",296,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[11,"split_at","","Divide one string slice into two at an index.",296,null],[11,"split_at_mut","","Divide one mutable string slice into two at an index.",296,null],[11,"chars","","Returns an iterator over the [`char`]s of a string slice.",296,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"char_indices","","Returns an iterator over the [`char`]s of a string slice, and their positions.",296,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"bytes","","An iterator over the bytes of a string slice.",296,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"split_whitespace","","Split a string slice by whitespace.",296,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"lines","","An iterator over the lines of a string, as string slices.",296,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"lines_any","","An iterator over the lines of a string.",296,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"encode_utf16","","Returns an iterator of `u16` over the string encoded as UTF-16.",296,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"contains","","Returns `true` if the given pattern matches a sub-slice of this string slice.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"starts_with","","Returns `true` if the given pattern matches a prefix of this string slice.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Returns `true` if the given pattern matches a suffix of this string slice.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the byte index of the first character of this string slice that matches the pattern.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rfind","","Returns the byte index of the last character of this string slice that matches the pattern.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"split","","An iterator over substrings of this string slice, separated by characters matched by a pattern.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"rsplit","","An iterator over substrings of the given string slice, separated by characters matched by a pattern and yielded in reverse order.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplit"}}],[11,"split_terminator","","An iterator over substrings of the given string slice, separated by characters matched by a pattern.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"rsplit_terminator","","An iterator over substrings of `self`, separated by characters matched by a pattern and yielded in reverse order.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplitterminator"}}],[11,"splitn","","An iterator over substrings of the given string slice, separated by a pattern, restricted to returning at most `n` items.",296,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[11,"rsplitn","","An iterator over substrings of this string slice, separated by a pattern, starting from the end of the string, restricted to returning at most `n` items.",296,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[11,"matches","","An iterator over the disjoint matches of a pattern within the given string slice.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"matches"}}],[11,"rmatches","","An iterator over the disjoint matches of a pattern within this string slice, yielded in reverse order.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rmatches"}}],[11,"match_indices","","An iterator over the disjoint matches of a pattern within this string slice as well as the index that the match starts at.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"matchindices"}}],[11,"rmatch_indices","","An iterator over the disjoint matches of a pattern within `self`, yielded in reverse order along with the index of the match.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rmatchindices"}}],[11,"trim","","Returns a string slice with leading and trailing whitespace removed.",296,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_left","","Returns a string slice with leading whitespace removed.",296,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_right","","Returns a string slice with trailing whitespace removed.",296,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_matches","","Returns a string slice with all prefixes and suffixes that match a pattern repeatedly removed.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"str"}}],[11,"trim_left_matches","","Returns a string slice with all prefixes that match a pattern repeatedly removed.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"str"}}],[11,"trim_right_matches","","Returns a string slice with all suffixes that match a pattern repeatedly removed.",296,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"str"}}],[11,"parse","","Parses this string slice into another type.",296,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_boxed_bytes","","Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.",296,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"replace","","Replaces all matches of a pattern with another string.",296,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":{"name":"string"}}],[11,"replacen","","Replaces first N matches of a pattern with another string.",296,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[11,"to_lowercase","","Returns the lowercase equivalent of this string slice, as a new [`String`].",296,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_uppercase","","Returns the uppercase equivalent of this string slice, as a new [`String`].",296,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"escape_debug","","Escapes each char in `s` with [`char::escape_debug`].",296,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"escape_default","","Escapes each char in `s` with [`char::escape_default`].",296,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"escape_unicode","","Escapes each char in `s` with [`char::escape_unicode`].",296,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"into_string","","Converts a [`Box<str>`] into a [`String`] without copying or allocating.",296,{"inputs":[{"name":"box"}],"output":{"name":"string"}}],[11,"repeat","","Create a [`String`] by repeating a string `n` times.",296,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"deref","std::string","",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","std::sync","",432,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"make_place","std::boxed","",459,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"drop","std::rc","Drops the `Rc`.",433,null],[11,"drop","std::boxed","",119,null],[11,"drop","std::vec","",464,null],[11,"drop","std::collections::binary_heap","",413,null],[11,"drop","std::collections::vec_deque","",454,null],[11,"drop","std::vec","",137,null],[11,"drop","std::sync","Drops the `Weak` pointer.",438,null],[11,"drop","","Drops the `Arc`.",432,null],[11,"drop","std::vec","",421,null],[11,"drop","std::collections::linked_list","",444,null],[11,"drop","std::vec","",425,null],[11,"drop","std::collections::btree_map","",422,null],[11,"drop","std::string","",456,null],[11,"drop","std::rc","Drops the `Weak` pointer.",449,null],[11,"drop","std::collections::btree_map","",431,null],[11,"drop","std::vec","",452,null],[11,"drop","std::collections::vec_deque","",430,null],[11,"drop","std::boxed","",459,null],[11,"index_mut","std::string","",140,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",140,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","std::collections::vec_deque","",430,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","std::string","",140,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","std::vec","",137,null],[11,"index_mut","std::string","",140,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","std::vec","",137,null],[11,"index_mut","std::string","",140,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","std::vec","",137,null],[11,"index_mut","std::string","",140,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","std::vec","",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",137,null],[11,"index_mut","","",137,null],[11,"index_mut","","",137,null],[11,"hash","std::collections::btree_map","",431,null],[11,"hash","std::borrow","",74,null],[11,"hash","std::sync","",432,null],[11,"hash","std::rc","",433,null],[11,"hash","std::boxed","",119,null],[11,"hash","std::collections::linked_list","",444,null],[11,"hash","std::collections","",105,null],[11,"hash","std::collections::vec_deque","",430,null],[11,"hash","std::string","",140,null],[11,"hash","std::vec","",137,null],[11,"hash","std::collections::btree_set","",435,null],[11,"to_string","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","std::string","",140,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","std","",296,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"borrow","std::rc","",433,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","std::string","",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"borrow","std::sync","",432,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","std::vec","",137,null],[11,"into_iter","std::collections::vec_deque","Consumes the list into a front-to-back iterator yielding elements by value.",430,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",440,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",435,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::linked_list","Consumes the list into an iterator yielding elements by value.",444,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::vec","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",137,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::btree_map","",431,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"resume","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"start","std","",310,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",310,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","std::ops","",34,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",324,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",324,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","std","",310,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",310,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","std::ops","",28,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"as_ref","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::vec","",137,null],[11,"as_ref","std::rc","",433,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::string","",140,null],[11,"as_ref","","",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","std::vec","",137,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","std::sync","",432,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"add_assign","std::borrow","",74,null],[11,"add_assign","std::string","",140,null],[11,"add_assign","std::borrow","",74,null],[11,"min_value","std","Returns the smallest value that can be represented by this integer type.",300,{"inputs":[],"output":{"name":"isize"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",300,{"inputs":[],"output":{"name":"isize"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",300,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",300,{"inputs":[{"name":"isize"}],"output":{"name":"isize"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",300,{"inputs":[{"name":"isize"}],"output":{"name":"isize"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",300,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",300,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",300,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",300,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",300,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",300,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",300,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",300,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",300,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",300,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",300,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"abs","","Computes the absolute value of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"signum","","Returns a number representing sign of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",301,{"inputs":[],"output":{"name":"i8"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",301,{"inputs":[],"output":{"name":"i8"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",301,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",301,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",301,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",301,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",301,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",301,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",301,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",301,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",301,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",301,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",301,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",301,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",301,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",301,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",301,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"abs","","Computes the absolute value of `self`.",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"signum","","Returns a number representing sign of `self`.",301,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",301,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",301,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",302,{"inputs":[],"output":{"name":"i16"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",302,{"inputs":[],"output":{"name":"i16"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",302,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",302,{"inputs":[{"name":"i16"}],"output":{"name":"i16"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",302,{"inputs":[{"name":"i16"}],"output":{"name":"i16"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",302,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",302,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",302,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",302,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",302,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",302,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",302,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",302,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",302,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",302,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",302,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",302,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"abs","","Computes the absolute value of `self`.",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"signum","","Returns a number representing sign of `self`.",302,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",290,{"inputs":[],"output":{"name":"i32"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",290,{"inputs":[],"output":{"name":"i32"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",290,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",290,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",290,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",290,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",290,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",290,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",290,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",290,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",290,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",290,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",290,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",290,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",290,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"abs","","Computes the absolute value of `self`.",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"signum","","Returns a number representing sign of `self`.",290,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",286,{"inputs":[],"output":{"name":"i64"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",286,{"inputs":[],"output":{"name":"i64"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",286,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",286,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",286,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",286,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",286,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",286,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",286,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",286,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",286,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",286,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",286,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",286,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",286,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",286,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",286,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"abs","","Computes the absolute value of `self`.",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"signum","","Returns a number representing sign of `self`.",286,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",286,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",286,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",288,{"inputs":[],"output":{"name":"i128"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",288,{"inputs":[],"output":{"name":"i128"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",288,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",288,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",288,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",288,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",288,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",288,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",288,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",288,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",288,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",288,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",288,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",288,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",288,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",288,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",288,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"abs","","Computes the absolute value of `self`.",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"signum","","Returns a number representing sign of `self`.",288,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",305,{"inputs":[],"output":{"name":"usize"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",305,{"inputs":[],"output":{"name":"usize"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",305,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",305,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",305,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",305,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",305,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",305,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",305,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",305,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",305,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",305,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",305,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",305,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",305,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",305,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",304,{"inputs":[],"output":{"name":"u8"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",304,{"inputs":[],"output":{"name":"u8"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",304,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",304,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",304,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",304,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",304,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",304,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",304,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",304,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",304,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",304,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",304,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",304,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",304,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",304,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",304,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",304,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",304,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",303,{"inputs":[],"output":{"name":"u16"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",303,{"inputs":[],"output":{"name":"u16"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",303,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",303,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",303,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",303,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",303,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",303,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",303,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",303,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",303,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",303,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",303,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",287,{"inputs":[],"output":{"name":"u32"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",287,{"inputs":[],"output":{"name":"u32"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",287,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",287,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",287,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",287,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",287,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",287,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",287,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",287,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",287,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",287,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",287,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",287,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",287,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",287,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",291,{"inputs":[],"output":{"name":"u64"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",291,{"inputs":[],"output":{"name":"u64"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",291,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",291,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",291,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",291,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",291,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",291,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",291,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",291,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",291,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",291,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",291,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",291,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",289,{"inputs":[],"output":{"name":"u128"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",289,{"inputs":[],"output":{"name":"u128"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",289,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",289,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",289,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",289,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",289,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",289,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",289,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",289,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",289,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",289,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",289,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",289,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",289,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",289,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",289,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_digit","","Checks if a `char` is a digit in the given radix.",321,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_digit","","Converts a `char` to a digit in the given radix.",321,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character as `char`s.",321,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"escape_debug","","Returns an iterator that yields the literal escape code of a character as `char`s.",321,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"escape_default","","Returns an iterator that yields the literal escape code of a character as `char`s.",321,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"len_utf8","","Returns the number of bytes this `char` would need if encoded in UTF-8.",321,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len_utf16","","Returns the number of 16-bit code units this `char` would need if encoded in UTF-16.",321,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer, and then returns the subslice of the buffer that contains the encoded character.",321,null],[11,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer, and then returns the subslice of the buffer that contains the encoded character.",321,null],[11,"is_alphabetic","","Returns true if this `char` is an alphabetic code point, and false if not.",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_xid_start","","Returns true if this `char` satisfies the 'XID_Start' Unicode property, and false otherwise.",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_xid_continue","","Returns true if this `char` satisfies the 'XID_Continue' Unicode property, and false otherwise.",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lowercase","","Returns true if this `char` is lowercase, and false otherwise.",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uppercase","","Returns true if this `char` is uppercase, and false otherwise.",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_whitespace","","Returns true if this `char` is whitespace, and false otherwise.",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","Returns true if this `char` is alphanumeric, and false otherwise.",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_control","","Returns true if this `char` is a control code point, and false otherwise.",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_numeric","","Returns true if this `char` is numeric, and false otherwise.",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_lowercase","","Returns an iterator that yields the lowercase equivalent of a `char` as one or more `char`s.",321,{"inputs":[{"name":"self"}],"output":{"name":"tolowercase"}}],[11,"to_uppercase","","Returns an iterator that yields the uppercase equivalent of a `char` as one or more `char`s.",321,{"inputs":[{"name":"self"}],"output":{"name":"touppercase"}}],[11,"is_null","","Returns `true` if the pointer is null.",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to the value wrapped in `Some`.",313,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Calculates the offset from a pointer.",313,null],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic.",313,null],[11,"offset_to","","Calculates the distance between two pointers. The returned value is in units of T: the distance in bytes is divided by `mem::size_of::<T>()`.",313,null],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",313,null],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",313,null],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",313,null],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",313,null],[11,"read","","Reads the value from `self` without moving it. This leaves the memory in `self` unchanged.",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_volatile","","Performs a volatile read of the value from `self` without moving it. This leaves the memory in `self` unchanged.",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_unaligned","","Reads the value from `self` without moving it. This leaves the memory in `self` unchanged.",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"copy_to","","Copies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may overlap.",313,null],[11,"copy_to_nonoverlapping","","Copies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may not overlap.",313,null],[11,"align_offset","","Computes the byte offset that needs to be applied in order to make the pointer aligned to `align`. If it is not possible to align the pointer, the implementation returns `usize::max_value()`.",313,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"is_null","","Returns `true` if the pointer is null.",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to the value wrapped in `Some`.",313,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Calculates the offset from a pointer.",313,null],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic. `count` is in units of T; e.g. a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.",313,null],[11,"as_mut","","Returns `None` if the pointer is null, or else returns a mutable reference to the value wrapped in `Some`.",313,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset_to","","Calculates the distance between two pointers. The returned value is in units of T: the distance in bytes is divided by `mem::size_of::<T>()`.",313,null],[11,"align_offset","","Computes the byte offset that needs to be applied in order to make the pointer aligned to `align`. If it is not possible to align the pointer, the implementation returns `usize::max_value()`.",313,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",313,null],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",313,null],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",313,null],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",313,null],[11,"read","","Reads the value from `self` without moving it. This leaves the memory in `self` unchanged.",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_volatile","","Performs a volatile read of the value from `self` without moving it. This leaves the memory in `self` unchanged.",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_unaligned","","Reads the value from `self` without moving it. This leaves the memory in `self` unchanged.",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"copy_to","","Copies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may overlap.",313,null],[11,"copy_to_nonoverlapping","","Copies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may not overlap.",313,null],[11,"copy_from","","Copies `count * size_of<T>` bytes from `src` to `self`. The source and destination may overlap.",313,null],[11,"copy_from_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `self`. The source and destination may not overlap.",313,null],[11,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",313,null],[11,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",313,null],[11,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `self` to `val`.",313,null],[11,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",313,null],[11,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",313,null],[11,"replace","","Replaces the value at `self` with `src`, returning the old value, without dropping either.",313,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.",313,null],[11,"of","std::any","Returns the `TypeId` of the type this generic function has been instantiated with.",316,{"inputs":[],"output":{"name":"typeid"}}],[11,"get","std::cell","Returns a copy of the contained value.",315,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `Cell` containing the given value.",315,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",315,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",315,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",315,null],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",315,null],[11,"replace","","Replaces the contained value, and returns it.",315,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps the value.",315,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",315,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `RefCell` containing `value`.",323,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",323,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",323,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",323,null],[11,"borrow","","Immutably borrows the wrapped value.",323,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",323,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",323,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",323,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",323,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",323,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",356,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",356,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",365,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",339,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",339,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",339,null],[11,"reverse","std::cmp","Reverses the `Ordering`.",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"new","std::hash","Creates a new `SipHasher13` with the two initial keys set to 0.",326,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",326,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",328,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",328,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",327,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",327,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"peek","std::iter","Returns a reference to the next() value without advancing the iterator.",398,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","std::mem","Wrap a value to be manually dropped.",318,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",318,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",318,null],[11,"contains","std::ops","Returns `true` if `item` is contained in the range.",28,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",34,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",36,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",39,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",47,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"empty","std::ptr","Creates a new `Unique` that is dangling, but well-aligned.",333,{"inputs":[],"output":{"name":"unique"}}],[11,"new_unchecked","","Creates a new `Unique`.",333,null],[11,"new","","Creates a new `Unique` if `ptr` is non-null.",333,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",333,null],[11,"as_ref","","Dereferences the content.",333,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",333,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"empty","","Creates a new `Shared` that is dangling, but well-aligned.",334,{"inputs":[],"output":{"name":"shared"}}],[11,"new_unchecked","","Creates a new `Shared`.",334,null],[11,"new","","Creates a new `Shared` if `ptr` is non-null.",334,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",334,null],[11,"as_ref","","Dereferences the content.",334,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",334,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut_ptr","","Acquires the underlying pointer as a `*mut` pointer.",334,null],[11,"is_ok","std::result","Returns `true` if the result is [`Ok`].",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns `true` if the result is [`Err`].",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",70,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",70,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",70,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",70,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",70,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",70,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",70,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",70,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",70,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_some","std::option","Returns `true` if the option is a [`Some`] value.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",71,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",71,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a [`default`][] (if not).",71,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a [`default`][] (if not).",71,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",71,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",71,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",71,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",71,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","std::boxed","Allocates memory on the heap and then places `x` into it.",119,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",119,null],[11,"from_unique","","Constructs a `Box` from a `Unique<T>` pointer.",119,{"inputs":[{"name":"unique"}],"output":{"name":"box"}}],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",119,null],[11,"into_unique","","Consumes the `Box`, returning the wrapped pointer as `Unique<T>`.",119,{"inputs":[{"name":"box"}],"output":{"name":"unique"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","std::rc","Constructs a new `Rc<T>`.",433,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",433,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",433,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",433,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",433,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",433,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",433,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",433,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",433,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",433,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the `Rc<Any>` to a concrete type.",433,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",449,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`], extending the lifetime of the value if successful.",449,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_mut","std::borrow","Acquires a mutable reference to the owned form of the data.",74,null],[11,"into_owned","","Extracts the owned data.",74,null],[11,"field","std::fmt","Adds a new field to the generated tuple struct output.",467,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",467,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",468,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",468,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",468,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",412,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",412,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting",412,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",412,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",412,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",412,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",412,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",412,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",412,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",412,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"field","","Adds a new field to the generated struct output.",469,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",469,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",470,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",470,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",470,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",471,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",471,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",471,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_slice","std::slice","View the underlying data as a subslice of the original data.",352,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",378,null],[11,"valid_up_to","std::str","Returns the index in the given string up to which valid UTF-8 was verified.",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",397,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",388,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","std::string","Creates a new empty `String`.",140,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",140,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",140,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",140,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",140,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",140,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",140,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",140,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",140,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",140,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",140,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",140,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",140,null],[11,"push","","Appends the given [`char`] to the end of this `String`.",140,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",140,null],[11,"truncate","","Shortens this `String` to the specified length.",140,null],[11,"pop","","Removes the last character from the string buffer and returns it.",140,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",140,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",140,null],[11,"insert","","Inserts a character into this `String` at a byte position.",140,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",140,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",140,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",140,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",140,null],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",140,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",140,null],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",140,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"as_bytes","","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",122,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",122,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",122,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"new","std::vec","Constructs a new, empty `Vec<T>`.",137,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",137,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",137,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",137,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",137,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",137,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",137,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",137,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",137,null],[11,"as_slice","","Extracts a slice containing the entire vector.",137,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",137,null],[11,"set_len","","Sets the length of a vector.",137,null],[11,"swap_remove","","Removes an element from the vector and returns it.",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",137,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",137,null],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",137,null],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",137,null],[11,"push","","Appends an element to the back of a collection.",137,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",137,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",137,null],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",137,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",137,null],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",137,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",137,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",137,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",137,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",137,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",137,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",137,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",137,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",421,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",421,null],[11,"unpaired_surrogate","std::char","Returns the unpaired surrogate which caused this error.",125,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"is_nan","std","Returns `true` if this value is `NaN` and false otherwise.",293,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",293,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",293,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",293,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",293,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"trunc","","Returns the integer part of a number.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fract","","Returns the fractional part of a number.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if the number is `NAN`.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"signum","","Returns a number that represents the sign of `self`.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"is_sign_positive","","Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaN`s with positive sign bit and positive infinity.",293,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sign_negative","","Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaN`s with negative sign bit and negative infinity.",293,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",293,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"powi","","Raises a number to an integer power.",293,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f32"}}],[11,"powf","","Raises a number to a floating point power.",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sqrt","","Takes the square root of a number.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"exp","","Returns `e^(self)`, (the exponential function).",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"exp2","","Returns `2^(self)`.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ln","","Returns the natural logarithm of the number.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"log","","Returns the logarithm of the number with respect to an arbitrary base.",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"log2","","Returns the base 2 logarithm of the number.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"log10","","Returns the base 10 logarithm of the number.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_degrees","","Converts radians to degrees.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_radians","","Converts degrees to radians.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"max","","Returns the maximum of the two numbers.",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"min","","Returns the minimum of the two numbers.",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"abs_sub","","The positive difference of two numbers.",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"cbrt","","Takes the cubic root of a number.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sin","","Computes the sine of a number (in radians).",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"cos","","Computes the cosine of a number (in radians).",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"tan","","Computes the tangent of a number (in radians).",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",293,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",293,null],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"sinh","","Hyperbolic sine function.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"cosh","","Hyperbolic cosine function.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"tanh","","Hyperbolic tangent function.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"asinh","","Inverse hyperbolic sine function.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"acosh","","Inverse hyperbolic cosine function.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"atanh","","Inverse hyperbolic tangent function.",293,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_bits","","Raw transmutation to `u32`.",293,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Raw transmutation from `u32`.",293,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",292,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"trunc","","Returns the integer part of a number.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fract","","Returns the fractional part of a number.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if the number is `NAN`.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"signum","","Returns a number that represents the sign of `self`.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_sign_positive","","Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaN`s with positive sign bit and positive infinity.",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_positive","","",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sign_negative","","Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaN`s with negative sign bit and negative infinity.",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",292,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"powi","","Raises a number to an integer power.",292,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f64"}}],[11,"powf","","Raises a number to a floating point power.",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sqrt","","Takes the square root of a number.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"exp","","Returns `e^(self)`, (the exponential function).",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"exp2","","Returns `2^(self)`.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ln","","Returns the natural logarithm of the number.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"log","","Returns the logarithm of the number with respect to an arbitrary base.",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"log2","","Returns the base 2 logarithm of the number.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"log10","","Returns the base 10 logarithm of the number.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_degrees","","Converts radians to degrees.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_radians","","Converts degrees to radians.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"max","","Returns the maximum of the two numbers.",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"min","","Returns the minimum of the two numbers.",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"abs_sub","","The positive difference of two numbers.",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"cbrt","","Takes the cubic root of a number.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sin","","Computes the sine of a number (in radians).",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"cos","","Computes the cosine of a number (in radians).",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"tan","","Computes the tangent of a number (in radians).",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",292,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",292,null],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"sinh","","Hyperbolic sine function.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"cosh","","Hyperbolic cosine function.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"tanh","","Hyperbolic tangent function.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"asinh","","Inverse hyperbolic sine function.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"acosh","","Inverse hyperbolic cosine function.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"atanh","","Inverse hyperbolic tangent function.",292,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_bits","","Raw transmutation to `u64`.",292,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_bits","","Raw transmutation from `u64`.",292,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"is_ascii","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",296,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_ascii_lowercase","","",296,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq_ignore_ascii_case","","",296,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",296,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",296,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",306,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_ascii_lowercase","","",306,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"eq_ignore_ascii_case","","",306,null],[11,"make_ascii_uppercase","","",306,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",306,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_ascii_lowercase","","",304,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"eq_ignore_ascii_case","","",304,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",304,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",304,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",321,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"to_ascii_lowercase","","",321,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"eq_ignore_ascii_case","","",321,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",321,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",321,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","std::collections::binary_heap","Creates an empty `BinaryHeap` as a max-heap.",440,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",440,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",440,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",440,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",440,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",440,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",440,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",440,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",440,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",440,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",440,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",440,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",440,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",440,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",440,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",440,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",440,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",440,null],[11,"new","std::collections::btree_map","Makes a new empty BTreeMap with a reasonable choice for B.",431,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",431,null],[11,"get","","Returns a reference to the value corresponding to the key.",431,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",431,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",431,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",431,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",431,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",431,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",431,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",431,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",431,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",431,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",431,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",431,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",431,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",431,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",431,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",431,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the map contains no elements.",431,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","std::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",435,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",435,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",435,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",435,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no elements.",435,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",435,null],[11,"contains","","Returns `true` if the set contains a value.",435,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",435,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",435,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",435,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",435,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",435,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",435,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",435,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",435,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}],[11,"new","std::collections::linked_list","Creates an empty `LinkedList`.",444,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",444,null],[11,"iter","","Provides a forward iterator.",444,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",444,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",444,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",444,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",444,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",444,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",444,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",444,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",444,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",444,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",444,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",444,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",444,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",444,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",444,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",444,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",444,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"new","std::collections::vec_deque","Creates an empty `VecDeque`.",430,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",430,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",430,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",430,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",430,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",430,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",430,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",430,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",430,null],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",430,null],[11,"iter","","Returns a front-to-back iterator.",430,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",430,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",430,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",430,null],[11,"len","","Returns the number of elements in the `VecDeque`.",430,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",430,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",430,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",430,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",430,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",430,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",430,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",430,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",430,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",430,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Prepends an element to the `VecDeque`.",430,null],[11,"push_back","","Appends an element to the back of the `VecDeque`.",430,null],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",430,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",430,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",430,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",430,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",430,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",430,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",430,null],[11,"retain","","Retains only the elements specified by the predicate.",430,null],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",430,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",430,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements or by appending clones of `value` to the back.",430,null],[11,"pop","std::collections::binary_heap","Removes the peeked value from the heap and returns it.",413,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"key","std::collections::btree_map","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",466,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",466,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",466,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",465,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take ownership of the key and value from the map.",465,null],[11,"get","","Gets a reference to the value in the entry.",465,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",465,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",465,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",465,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",465,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",106,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"entry"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert_next","std::collections::linked_list","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",455,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",455,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash_map","",472,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",472,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",473,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"fmt","","",473,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",474,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"fmt","","",474,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",475,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",476,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",472,null],[11,"len","","",472,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",477,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",477,null],[11,"len","","",477,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",477,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",478,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",478,null],[11,"len","","",478,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",478,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",473,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",473,null],[11,"len","","",473,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",474,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",474,null],[11,"len","","",474,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",479,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",479,null],[11,"len","","",479,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",479,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",480,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",480,null],[11,"len","","",480,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",480,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",481,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",481,{"inputs":[{"name":"self"}],"output":null}],[11,"make_place","","",110,{"inputs":[{"name":"self"}],"output":{"name":"entryplace"}}],[11,"pointer","","",481,null],[11,"finalize","","",481,{"inputs":[{"name":"self"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",110,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",110,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",110,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",110,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",110,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",475,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take the ownership of the key and value from the map.",475,null],[11,"get","","Gets a reference to the value in the entry.",475,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",475,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself.",475,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",475,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it.",475,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"replace","","Replaces the entry, returning the old key and value.",475,null],[11,"key","","Gets a reference to the key that would be used when inserting a value through the `VacantEntry`.",476,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",476,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",476,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"clone","","",482,{"inputs":[{"name":"self"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",482,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",482,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"clone","","",483,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"fmt","","",483,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DefaultHasher`.",483,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"default","","Creates a new `DefaultHasher` using [`new`]. See its documentation for more.",483,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"write","","",483,null],[11,"finish","","",483,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"default","","Constructs a new `RandomState`.",482,{"inputs":[],"output":{"name":"randomstate"}}],[11,"fmt","","",482,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash_set","",484,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",484,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",484,null],[11,"len","","",484,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",484,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",485,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",485,null],[11,"len","","",485,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",485,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",486,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",486,null],[11,"len","","",486,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",486,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",487,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"next","","",487,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",487,null],[11,"fmt","","",487,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",488,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"next","","",488,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",488,null],[11,"fmt","","",488,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",489,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",489,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",489,null],[11,"fmt","","",489,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",490,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"fmt","","",490,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",490,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",490,null],[11,"description","std::heap","",276,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",439,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::num","",312,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",383,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",322,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","std::io","",155,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"eq","std","",296,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",296,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"as_ref","","",296,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"read","","",309,null],[11,"initializer","","",309,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",309,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",309,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",309,null],[11,"write","","",309,null],[11,"flush","","",309,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",309,null],[11,"write_fmt","","",309,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",309,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",309,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",309,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","",309,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",309,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",306,null],[11,"initializer","","",306,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_exact","","",306,null],[11,"read_to_end","","",306,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",306,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",306,null],[11,"write_all","","",306,null],[11,"flush","","",306,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","It performs the conversion in network order (big-endian).",287,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"u32"}}],[11,"from","","",289,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"u128"}}],[11,"to_socket_addrs","","",310,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",310,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",310,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",310,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",296,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",306,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",309,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",296,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"new","std::sync","Constructs a new `Arc<T>`.",432,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Returns the contained value, if the `Arc` has exactly one strong reference.",432,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",432,null],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",432,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",432,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",432,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this value.",432,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"ptr_eq","","Returns true if the two `Arc`s point to the same value (not just values that compare as equal).",432,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",432,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Arc` or [`Weak`][weak] pointers to the same value.",432,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",438,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Arc`], extending the lifetime of the value if successful.",438,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","std::sync::atomic","Creates a new `AtomicBool`.",381,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",381,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",381,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"load","","Loads a value from the bool.",381,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",381,null],[11,"swap","","Stores a value into the bool, returning the previous value.",381,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",381,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",381,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",381,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",381,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",381,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",381,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",381,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",342,null],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",342,null],[11,"into_inner","","Consumes the atomic and returns the contained value.",342,null],[11,"load","","Loads a value from the pointer.",342,null],[11,"store","","Stores a value into the pointer.",342,null],[11,"swap","","Stores a value into the pointer, returning the previous value.",342,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",342,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",342,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",342,null],[11,"new","","Creates a new atomic integer.",349,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",349,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",349,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"load","","Loads a value from the atomic integer.",349,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",349,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",349,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",349,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",349,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",349,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",349,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",349,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",349,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",349,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",349,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"new","","Creates a new atomic integer.",368,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",368,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",368,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"load","","Loads a value from the atomic integer.",368,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",368,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",368,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",368,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",368,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",368,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",368,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",368,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",368,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",368,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",368,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"new","","Creates a new atomic integer.",392,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",392,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",392,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"load","","Loads a value from the atomic integer.",392,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",392,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",392,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",392,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",392,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",392,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",392,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",392,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",392,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",392,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",392,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"new","","Creates a new atomic integer.",363,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",363,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",363,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"load","","Loads a value from the atomic integer.",363,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",363,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",363,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",363,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",363,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",363,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",363,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",363,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",363,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",363,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",363,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"new","","Creates a new atomic integer.",395,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",395,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",395,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"load","","Loads a value from the atomic integer.",395,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",395,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",395,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",395,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",395,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",395,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",395,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",395,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",395,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",395,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",395,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"new","","Creates a new atomic integer.",379,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"load","","Loads a value from the atomic integer.",379,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",379,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",379,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",379,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",379,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",379,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",379,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",379,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",379,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",379,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",379,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"new","","Creates a new atomic integer.",401,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",401,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",401,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"load","","Loads a value from the atomic integer.",401,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",401,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",401,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",401,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",401,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",401,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",401,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",401,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",401,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",401,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",401,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"new","","Creates a new atomic integer.",367,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",367,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",367,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load","","Loads a value from the atomic integer.",367,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",367,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",367,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",367,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",367,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",367,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",367,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",367,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",367,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",367,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",367,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"new","","Creates a new atomic integer.",335,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",335,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",335,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"load","","Loads a value from the atomic integer.",335,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",335,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",335,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",335,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",335,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",335,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",335,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",335,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",335,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",335,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",335,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new atomic integer.",385,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",385,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",385,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"load","","Loads a value from the atomic integer.",385,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",385,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",385,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",385,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",385,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",385,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",385,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",385,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",385,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",385,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",385,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"from_size_align","std::heap","Constructs a `Layout` from a given `size` and `align`, or returns `None` if any of the following conditions are not met:",441,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",441,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"layout"}}],[11,"size","","The minimum size in bytes for a memory block of this layout.",441,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"align","","The minimum byte alignment for a memory block of this layout.",441,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Constructs a `Layout` suitable for holding a value of type `T`.",441,{"inputs":[],"output":{"name":"layout"}}],[11,"for_value","","Produces layout describing a record that could be used to allocate backing structure for `T` (which could be a trait or other unsized type like a slice).",441,{"inputs":[{"name":"t"}],"output":{"name":"layout"}}],[11,"align_to","","Creates a layout describing the record that can hold a value of the same layout as `self`, but that also is aligned to alignment `align` (measured in bytes).",441,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"layout"}}],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self` to ensure that the following address will satisfy `align` (measured in bytes).",441,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"repeat","","Creates a layout describing the record for `n` instances of `self`, with a suitable amount of padding between each to ensure that each instance is given its requested size and alignment. On success, returns `(k, offs)` where `k` is the layout of the array and `offs` is the distance between the start of each element in the array.",441,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"extend","","Creates a layout describing the record for `self` followed by `next`, including any necessary padding to ensure that `next` will be properly aligned. Note that the result layout will satisfy the alignment properties of both `self` and `next`.",441,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"option"}}],[11,"repeat_packed","","Creates a layout describing the record for `n` instances of `self`, with no padding between each instance.",441,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"extend_packed","","Creates a layout describing the record for `self` followed by `next` with no additional padding between the two. Since no padding is inserted, the alignment of `next` is irrelevant, and is not incorporated at all into the resulting layout.",441,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"option"}}],[11,"array","","Creates a layout describing the record for a `[T; n]`.",441,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"description","","",439,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"invalid_input","","",276,{"inputs":[{"name":"str"}],"output":{"name":"allocerr"}}],[11,"is_memory_exhausted","","",276,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_request_unsupported","","",276,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",276,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[8,"Any"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Iterator"],[8,"IntoIterator"],[8,"Sum"],[8,"ExactSizeIterator"],[8,"FromIterator"],[8,"DoubleEndedIterator"],[8,"Step"],[8,"Extend"],[8,"Product"],[8,"RemAssign"],[8,"Boxed"],[3,"RangeFrom"],[8,"BitAnd"],[8,"Neg"],[8,"DivAssign"],[8,"Fn"],[8,"Drop"],[3,"RangeToInclusive"],[8,"BitOr"],[3,"Range"],[8,"MulAssign"],[8,"InPlace"],[3,"RangeInclusive"],[8,"Add"],[8,"Rem"],[8,"Try"],[8,"AddAssign"],[8,"ShrAssign"],[8,"BitXorAssign"],[8,"Not"],[3,"RangeTo"],[8,"BitOrAssign"],[4,"GeneratorState"],[8,"ShlAssign"],[8,"SubAssign"],[8,"Div"],[8,"Placer"],[8,"IndexMut"],[8,"DerefMut"],[8,"Sub"],[8,"Generator"],[8,"BitAndAssign"],[8,"Mul"],[8,"Index"],[8,"Place"],[8,"Deref"],[8,"BoxPlace"],[8,"FnOnce"],[8,"Shl"],[8,"FnMut"],[8,"Shr"],[8,"BitXor"],[3,"TraitObject"],[4,"Result"],[4,"Option"],[8,"FnBox"],[8,"ToOwned"],[4,"Cow"],[8,"BorrowMut"],[8,"Borrow"],[8,"Octal"],[8,"Binary"],[8,"Write"],[8,"Display"],[8,"Pointer"],[8,"UpperExp"],[8,"UpperHex"],[8,"Debug"],[8,"LowerHex"],[8,"LowerExp"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"ToString"],[3,"UnicodeVersion"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"AccessError"],[3,"Builder"],[3,"ThreadId"],[3,"Thread"],[3,"JoinHandle"],[8,"AsciiExt"],[3,"EscapeDefault"],[4,"Bound"],[4,"Entry"],[8,"RangeArgument"],[3,"HashMap"],[3,"HashSet"],[4,"Entry"],[4,"VarError"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[8,"Error"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"Error"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"CharTryFromError"],[3,"ParseCharError"],[4,"Infallible"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Vec"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"ReadDir"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"DirBuilder"],[3,"File"],[3,"DirEntry"],[4,"ErrorKind"],[4,"SeekFrom"],[4,"CharsError"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"Error"],[3,"LineWriter"],[3,"Cursor"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[8,"Read"],[8,"Write"],[8,"Seek"],[8,"BufRead"],[3,"Initializer"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[4,"SocketAddr"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"Incoming"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"AddrParseError"],[8,"ToSocketAddrs"],[3,"LookupHost"],[4,"FpCategory"],[3,"Wrapping"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"AsRawHandle"],[8,"FromRawHandle"],[8,"IntoRawHandle"],[8,"AsRawSocket"],[8,"FromRawSocket"],[8,"IntoRawSocket"],[8,"ExitStatusExt"],[8,"CommandExt"],[3,"stat"],[8,"MetadataExt"],[4,"c_void"],[3,"AssertUnwindSafe"],[4,"Prefix"],[4,"Component"],[3,"PrefixComponent"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Child"],[3,"Output"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Command"],[3,"Stdio"],[3,"ExitStatus"],[4,"Ordering"],[4,"TryLockError"],[3,"SendError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Select"],[3,"Handle"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"RecvError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"OnceState"],[3,"Once"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[8,"Alloc"],[3,"Excess"],[4,"AllocErr"],[3,"PoisonError"],[3,"EncodeWide"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"PanicInfo"],[3,"Location"],[15,"i64"],[15,"u32"],[15,"i128"],[15,"u128"],[15,"i32"],[15,"u64"],[15,"f64"],[15,"f32"],[3,"System"],[3,"SplitWhitespace"],[15,"str"],[3,"ToLowercase"],[3,"DecodeUtf16"],[3,"ToUppercase"],[15,"isize"],[15,"i8"],[15,"i16"],[15,"u16"],[15,"u8"],[15,"usize"],[15,"slice"],[15,"array"],[15,"fn"],[15,"reference"],[15,"tuple"],[3,"NoneError"],[3,"ParseIntError"],[15,"pointer"],[3,"Discriminant"],[3,"Cell"],[3,"TypeId"],[15,"unit"],[19,"ManuallyDrop"],[15,"bool"],[3,"PhantomData"],[15,"char"],[3,"ParseFloatError"],[3,"RefCell"],[3,"RangeFull"],[3,"BuildHasherDefault"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"StrSearcher"],[3,"CharSliceSearcher"],[3,"CharSearcher"],[3,"CharPredicateSearcher"],[3,"Unique"],[3,"Shared"],[3,"AtomicIsize"],[3,"SplitN"],[3,"SplitN"],[3,"SkipWhile"],[3,"UnsafeCell"],[3,"EscapeDefault"],[3,"RSplitMut"],[3,"AtomicPtr"],[3,"Zip"],[3,"SplitTerminator"],[3,"Split"],[3,"Chain"],[3,"FlatMap"],[3,"Take"],[3,"AtomicI8"],[3,"RSplit"],[3,"Map"],[3,"Iter"],[3,"Fuse"],[3,"Filter"],[3,"TakeWhile"],[3,"Ref"],[3,"IterMut"],[3,"Enumerate"],[3,"Inspect"],[3,"Lines"],[3,"Repeat"],[3,"DecodeUtf8"],[3,"AtomicU16"],[3,"RMatchIndices"],[3,"RefMut"],[3,"SplitNMut"],[3,"AtomicU64"],[3,"AtomicU8"],[3,"Skip"],[3,"IterMut"],[3,"RSplitNMut"],[3,"Cycle"],[3,"Bytes"],[3,"IntoIter"],[3,"EscapeUnicode"],[3,"Chunks"],[3,"Rev"],[3,"IterMut"],[3,"AtomicU32"],[3,"MatchIndices"],[3,"AtomicBool"],[3,"Arguments"],[3,"TryFromIntError"],[3,"Windows"],[3,"AtomicUsize"],[3,"EscapeDebug"],[3,"SplitMut"],[3,"Chars"],[3,"StepBy"],[3,"Cloned"],[3,"RMatches"],[3,"AtomicI16"],[3,"Iter"],[3,"Split"],[3,"AtomicI32"],[3,"LinesAny"],[3,"CharIndices"],[3,"Peekable"],[3,"Scan"],[3,"RSplitTerminator"],[3,"AtomicI64"],[3,"ChunksMut"],[3,"IntoIter"],[3,"FilterMap"],[3,"RSplitN"],[3,"Iter"],[3,"Once"],[3,"RSplitN"],[3,"RSplit"],[3,"Empty"],[3,"Matches"],[3,"Formatter"],[3,"PeekMut"],[3,"Drain"],[3,"IterMut"],[3,"Keys"],[3,"Iter"],[3,"Iter"],[3,"IterMut"],[3,"Values"],[3,"IntoIter"],[3,"IntoIter"],[3,"ValuesMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIter"],[3,"Iter"],[3,"VecDeque"],[3,"BTreeMap"],[3,"Arc"],[3,"Rc"],[3,"Difference"],[3,"BTreeSet"],[3,"IntoIter"],[3,"EncodeUtf16"],[3,"Weak"],[3,"CannotReallocInPlace"],[3,"BinaryHeap"],[3,"Layout"],[3,"Iter"],[3,"Intersection"],[3,"LinkedList"],[3,"Range"],[3,"Heap"],[3,"Union"],[3,"SymmetricDifference"],[3,"Weak"],[3,"ExchangeHeapSingleton"],[3,"Range"],[3,"Splice"],[3,"RangeMut"],[3,"Drain"],[3,"IterMut"],[3,"Drain"],[3,"PlaceBack"],[3,"FrontPlace"],[3,"IntermediateBox"],[3,"PlaceBack"],[3,"BackPlace"],[3,"BinaryHeapPlace"],[3,"PlaceFront"],[3,"DrainFilter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"DebugTuple"],[3,"DebugMap"],[3,"DebugStruct"],[3,"DebugSet"],[3,"DebugList"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[3,"EntryPlace"],[3,"RandomState"],[3,"DefaultHasher"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]};
searchIndex["std_unicode"] = {"doc":"The Unicode Library","items":[[0,"char","std_unicode","A character type.",null,null],[17,"MAX","std_unicode::char","The highest valid code point a `char` can have.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[3,"UnicodeVersion","","Represents a Unicode Version.",null,null],[12,"major","","Major version.",0,null],[12,"minor","","Minor version.",0,null],[12,"micro","","Micro (or Update) version.",0,null],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",null,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16error"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",4,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"lossy","std_unicode","",null,null],[3,"Utf8Lossy","std_unicode::lossy","Lossy UTF-8 string.",null,null],[3,"Utf8LossyChunksIter","","Iterator over lossy UTF-8 string",null,null],[3,"Utf8LossyChunk","","",null,null],[12,"valid","","Sequence of valid chars. Can be empty between broken UTF-8 chars.",5,null],[12,"broken","","Single broken char, empty if none. Empty iff iterator item is last.",5,null],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"utf8lossy"}}],[11,"from_bytes","","",6,null],[11,"chunks","","",6,{"inputs":[{"name":"self"}],"output":{"name":"utf8lossychunksiter"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"utf8lossychunk"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"utf8lossychunk"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"str","std_unicode","",null,null],[3,"SplitWhitespace","std_unicode::str","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"Utf16Encoder","","Iterator adaptor for encoding `char`s to UTF-16.",null,null],[8,"UnicodeStr","","Methods for Unicode string slices",null,null],[10,"split_whitespace","","",8,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[10,"is_whitespace","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_alphanumeric","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"trim","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"trim_left","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"trim_right","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"derived_property","std_unicode","",null,null],[5,"Case_Ignorable","std_unicode::derived_property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"Cased","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[0,"property","std_unicode","",null,null],[5,"Pattern_White_Space","std_unicode::property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"clone","std_unicode::char","",0,{"inputs":[{"name":"self"}],"output":{"name":"unicodeversion"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"clone","std_unicode::str","",9,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"utf16encoder"}}],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",10,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","std_unicode::char","",11,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"parsecharerror"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"count","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"count","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"UnicodeVersion"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"Utf8LossyChunk"],[3,"Utf8Lossy"],[3,"Utf8LossyChunksIter"],[8,"UnicodeStr"],[3,"SplitWhitespace"],[3,"Utf16Encoder"],[3,"CharTryFromError"],[3,"EscapeDefault"],[3,"DecodeUtf8"],[3,"ParseCharError"],[3,"EscapeUnicode"],[3,"EscapeDebug"]]};
searchIndex["syntax"] = {"doc":"The Rust parser and macro expander.","items":[[0,"symbol","syntax","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e. given a value, one can easily find the type, and vice versa.",null,null],[3,"Ident","syntax::symbol","",null,null],[12,"name","","",0,null],[12,"ctxt","","",0,null],[3,"Symbol","","A symbol is an interned or gensymed string.",null,null],[3,"Interner","","",null,null],[0,"keywords","","",null,null],[3,"Keyword","syntax::symbol::keywords","",null,null],[17,"Invalid","","",null,null],[17,"CrateRoot","","",null,null],[17,"DollarCrate","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Catch","","",null,null],[17,"Default","","",null,null],[17,"Dyn","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[3,"InternedString","syntax::symbol","Represents a string stored in the thread-local interner. Because the interner lives for the life of the thread, this can be safely treated as an immortal string, as long as it never crosses between threads.",null,null],[0,"diagnostics","syntax","",null,null],[0,"macros","syntax::diagnostics","",null,null],[0,"plugin","","",null,null],[3,"ErrorInfo","syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",1,null],[12,"use_site","","",1,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"metadata","syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",2,null],[12,"use_site","","",2,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",3,null],[12,"line","","",3,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_span","","Create an error location from a span.",3,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"diagnostic_list","syntax","",null,null],[0,"util","","",null,null],[3,"ThinVec","syntax::util","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[3,"RcSlice","","",null,null],[0,"lev_distance","","",null,null],[5,"lev_distance","syntax::util::lev_distance","To find the Levenshtein distance between two strings",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"find_best_match_for_name","","To find the best match for a given string from an iterator of names As a loose rule to avoid the obviously incorrect suggestions, it takes an optional limit for the maximum allowable edit distance, which defaults to one-third of the given word",null,{"inputs":[{"name":"t"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[0,"node_count","syntax::util","",null,null],[3,"NodeCounter","syntax::util::node_count","",null,null],[12,"count","","",4,null],[11,"new","","",4,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",4,null],[11,"visit_foreign_item","","",4,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",4,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",4,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",4,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",4,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",4,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",4,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",4,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",4,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",4,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",4,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",4,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",4,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",4,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",4,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",4,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",4,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",4,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",4,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",4,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",4,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_path","","",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_parameters","","",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",4,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",4,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[0,"parser","syntax::util","",null,null],[4,"AssocOp","syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",5,null],[13,"Subtract","","`-`",5,null],[13,"Multiply","","`*`",5,null],[13,"Divide","","`/`",5,null],[13,"Modulus","","`%`",5,null],[13,"LAnd","","`&&`",5,null],[13,"LOr","","`||`",5,null],[13,"BitXor","","`^`",5,null],[13,"BitAnd","","`&`",5,null],[13,"BitOr","","`|`",5,null],[13,"ShiftLeft","","`<<`",5,null],[13,"ShiftRight","","`>>`",5,null],[13,"Equal","","`==`",5,null],[13,"Less","","`<`",5,null],[13,"LessEqual","","`<=`",5,null],[13,"NotEqual","","`!=`",5,null],[13,"Greater","","`>`",5,null],[13,"GreaterEqual","","`>=`",5,null],[13,"Assign","","`=`",5,null],[13,"Inplace","","`<-`",5,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",5,null],[13,"As","","`as`",5,null],[13,"DotDot","","`..` range",5,null],[13,"DotDotEq","","`..=` range",5,null],[13,"Colon","","`:`",5,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",6,null],[13,"Right","","The operator is right-associative",6,null],[13,"None","","The operator is not associative",6,null],[5,"expr_precedence","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"i8"}}],[5,"contains_exterior_struct_lit","","Expressions that syntactically contain an \"exterior\" struct literal i.e. not surrounded by any parens or other delimiters, e.g. `X { y: 1 }`, `X { y: 1 }.method()`, `foo == X { y: 1 }` and `X { y: 1 } == foo` all do, but `(X { y: 1 }) == foo` does not.",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[17,"PREC_RESET","","",null,null],[17,"PREC_CLOSURE","","",null,null],[17,"PREC_JUMP","","",null,null],[17,"PREC_RANGE","","",null,null],[17,"PREC_PREFIX","","",null,null],[17,"PREC_POSTFIX","","",null,null],[17,"PREC_PAREN","","",null,null],[17,"PREC_FORCE_PAREN","","",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"from_token","","Create a new AssocOP from a token",5,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",5,{"inputs":[{"name":"binopkind"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fixity","","Gets the fixity of this operator",5,{"inputs":[{"name":"self"}],"output":{"name":"fixity"}}],[11,"is_comparison","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_assign_like","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ast_binop","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"small_vector","syntax::util","",null,null],[6,"SmallVector","syntax::util::small_vector","",null,null],[0,"move_map","syntax::util","",null,null],[8,"MoveMap","syntax::util::move_map","",null,null],[11,"move_map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"move_flat_map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"move_flat_map","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"clone","syntax::util","",9,{"inputs":[{"name":"self"}],"output":{"name":"thinvec"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",9,null],[11,"extend","","",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"rcslice"}}],[11,"new","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"sub_slice","","",10,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"deref","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash_stable","","",10,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[0,"json","syntax","A JSON emitter for errors.",null,null],[3,"JsonEmitter","syntax::json","",null,null],[11,"stderr","","",11,{"inputs":[{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"basic","","",11,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"new","","",11,{"inputs":[{"name":"box"},{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",11,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[0,"syntax","syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntax::abi","",null,null],[4,"Abi","","",null,null],[13,"Cdecl","","",12,null],[13,"Stdcall","","",12,null],[13,"Fastcall","","",12,null],[13,"Vectorcall","","",12,null],[13,"Thiscall","","",12,null],[13,"Aapcs","","",12,null],[13,"Win64","","",12,null],[13,"SysV64","","",12,null],[13,"PtxKernel","","",12,null],[13,"Msp430Interrupt","","",12,null],[13,"X86Interrupt","","",12,null],[13,"Rust","","",12,null],[13,"C","","",12,null],[13,"System","","",12,null],[13,"RustIntrinsic","","",12,null],[13,"RustCall","","",12,null],[13,"PlatformIntrinsic","","",12,null],[13,"Unadjusted","","",12,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"name":"vec"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"index","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"data","","",12,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"generic","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ast","syntax","",null,null],[3,"Ident","syntax::ast","",null,null],[12,"name","","",0,null],[12,"ctxt","","",0,null],[3,"Name","","A symbol is an interned or gensymed string.",null,null],[3,"ThinVec","","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[3,"Lifetime","","",null,null],[12,"id","","",14,null],[12,"span","","",14,null],[12,"ident","","",14,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",15,null],[12,"lifetime","","",15,null],[12,"bounds","","",15,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"span","","",16,null],[12,"segments","","The segments in the path: the things separated by `::`. Global paths begin with `keywords::CrateRoot`.",16,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"identifier","","The identifier portion of this path segment.",17,null],[12,"span","","Span of the segment identifier.",17,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. `None` means that no parameter list is supplied (`Path`), `Some` means that parameter list is supplied (`Path<X, Y>`) but it can be empty (`Path<>`). `P` is used as a size optimization for the common case with no parameters.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"span","","Overall span",18,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"span","","Overall span",19,null],[12,"inputs","","`(A,B)`",19,null],[12,"output","","`C`",19,null],[3,"NodeId","","",null,null],[3,"TyParam","","",null,null],[12,"attrs","","",20,null],[12,"ident","","",20,null],[12,"id","","",20,null],[12,"bounds","","",20,null],[12,"default","","",20,null],[12,"span","","",20,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",21,null],[12,"ty_params","","",21,null],[12,"where_clause","","",21,null],[12,"span","","",21,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",22,null],[12,"predicates","","",22,null],[12,"span","","",22,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"span","","",23,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",23,null],[12,"bounded_ty","","The type being bounded",23,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",23,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"span","","",24,null],[12,"lifetime","","",24,null],[12,"bounds","","",24,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"id","","",25,null],[12,"span","","",25,null],[12,"lhs_ty","","",25,null],[12,"rhs_ty","","",25,null],[3,"Crate","","",null,null],[12,"module","","",26,null],[12,"attrs","","",26,null],[12,"span","","",26,null],[3,"MetaItem","","A spanned compile-time attribute item.",null,null],[12,"name","","",27,null],[12,"node","","",27,null],[12,"span","","",27,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",28,null],[12,"id","","",28,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",28,null],[12,"span","","",28,null],[3,"Pat","","",null,null],[12,"id","","",29,null],[12,"node","","",29,null],[12,"span","","",29,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",30,null],[12,"pat","","The pattern the field is destructured to",30,null],[12,"is_shorthand","","",30,null],[12,"attrs","","",30,null],[3,"Stmt","","A statement",null,null],[12,"id","","",31,null],[12,"node","","",31,null],[12,"span","","",31,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",32,null],[12,"ty","","",32,null],[12,"init","","Initializer expression to set the value, if any",32,null],[12,"id","","",32,null],[12,"span","","",32,null],[12,"attrs","","",32,null],[3,"Arm","","An arm of a 'match'.",null,null],[12,"attrs","","",33,null],[12,"pats","","",33,null],[12,"guard","","",33,null],[12,"body","","",33,null],[12,"beginning_vert","","",33,null],[3,"Field","","",null,null],[12,"ident","","",34,null],[12,"expr","","",34,null],[12,"span","","",34,null],[12,"is_shorthand","","",34,null],[12,"attrs","","",34,null],[3,"Expr","","An expression",null,null],[12,"id","","",35,null],[12,"node","","",35,null],[12,"span","","",35,null],[12,"attrs","","",35,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",36,null],[12,"position","","",36,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",37,null],[12,"tts","","",37,null],[3,"MacroDef","","",null,null],[12,"tokens","","",38,null],[12,"legacy","","",38,null],[3,"MutTy","","",null,null],[12,"ty","","",39,null],[12,"mutbl","","",39,null],[3,"MethodSig","","Represents a method's signature in a trait declaration, or in an implementation.",null,null],[12,"unsafety","","",40,null],[12,"constness","","",40,null],[12,"abi","","",40,null],[12,"decl","","",40,null],[12,"generics","","",40,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",41,null],[12,"ident","","",41,null],[12,"attrs","","",41,null],[12,"node","","",41,null],[12,"span","","",41,null],[12,"tokens","","See `Item::tokens` for what this is",41,null],[3,"ImplItem","","",null,null],[12,"id","","",42,null],[12,"ident","","",42,null],[12,"vis","","",42,null],[12,"defaultness","","",42,null],[12,"attrs","","",42,null],[12,"node","","",42,null],[12,"span","","",42,null],[12,"tokens","","See `Item::tokens` for what this is",42,null],[3,"TypeBinding","","",null,null],[12,"id","","",43,null],[12,"ident","","",43,null],[12,"ty","","",43,null],[12,"span","","",43,null],[3,"Ty","","",null,null],[12,"id","","",44,null],[12,"node","","",44,null],[12,"span","","",44,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",45,null],[12,"abi","","",45,null],[12,"lifetimes","","",45,null],[12,"decl","","",45,null],[3,"InlineAsmOutput","","Inline assembly.",null,null],[12,"constraint","","",46,null],[12,"expr","","",46,null],[12,"is_rw","","",46,null],[12,"is_indirect","","",46,null],[3,"InlineAsm","","Inline assembly.",null,null],[12,"asm","","",47,null],[12,"asm_str_style","","",47,null],[12,"outputs","","",47,null],[12,"inputs","","",47,null],[12,"clobbers","","",47,null],[12,"volatile","","",47,null],[12,"alignstack","","",47,null],[12,"dialect","","",47,null],[12,"ctxt","","",47,null],[3,"Arg","","An argument in a function header.",null,null],[12,"ty","","",48,null],[12,"pat","","",48,null],[12,"id","","",48,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",49,null],[12,"output","","",49,null],[12,"variadic","","",49,null],[3,"Mod","","Module declaration.",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`. For `mod foo;`, the inner span ranges from the first token to the last token in the external file.",50,null],[12,"items","","",50,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",51,null],[12,"items","","",51,null],[3,"GlobalAsm","","Global inline assembly",null,null],[12,"asm","","",52,null],[12,"ctxt","","",52,null],[3,"EnumDef","","",null,null],[12,"variants","","",53,null],[3,"Variant_","","",null,null],[12,"name","","",54,null],[12,"attrs","","",54,null],[12,"data","","",54,null],[12,"disr_expr","","Explicit discriminant, e.g. `Foo = 1`",54,null],[3,"PathListItem_","","",null,null],[12,"name","","",55,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",55,null],[12,"id","","",55,null],[3,"AttrId","","",null,null],[12,"0","","",56,null],[3,"Attribute","","Meta-data associated with an item Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",57,null],[12,"style","","",57,null],[12,"path","","",57,null],[12,"tokens","","",57,null],[12,"is_sugared_doc","","",57,null],[12,"span","","",57,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",58,null],[12,"ref_id","","",58,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",59,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",59,null],[12,"span","","",59,null],[3,"StructField","","Field of a struct.",null,null],[12,"span","","",60,null],[12,"ident","","",60,null],[12,"vis","","",60,null],[12,"id","","",60,null],[12,"ty","","",60,null],[12,"attrs","","",60,null],[3,"Item","","An item",null,null],[12,"ident","","",61,null],[12,"attrs","","",61,null],[12,"id","","",61,null],[12,"node","","",61,null],[12,"vis","","",61,null],[12,"span","","",61,null],[12,"tokens","","Original tokens this item was parsed from. This isn't necessarily available for all items, although over time more and more items should have this be `Some`. Right now this is primarily used for procedural macros, notably custom attributes.",61,null],[3,"ForeignItem","","",null,null],[12,"ident","","",62,null],[12,"attrs","","",62,null],[12,"node","","",62,null],[12,"id","","",62,null],[12,"span","","",62,null],[12,"vis","","",62,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`",63,null],[13,"Parenthesized","","The `(A,B)` and `C` in `Foo(A,B) -> C`",63,null],[4,"TyParamBound","","The AST represents all type param bounds as types. typeck::collect::compute_bounds matches these against the \"special\" built-in traits (see middle::lang_items) and detects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",64,null],[13,"RegionTyParamBound","","",64,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",65,null],[13,"Maybe","","",65,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",66,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",66,null],[13,"EqPredicate","","An equality predicate (unsupported)",66,null],[4,"NestedMetaItemKind","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",67,null],[13,"Literal","","A literal.",67,null],[4,"MetaItemKind","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",68,null],[13,"List","","List meta item.",68,null],[13,"NameValue","","Name value meta item.",68,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",69,null],[13,"ByValue","","",69,null],[4,"RangeEnd","","",null,null],[13,"Included","","",70,null],[13,"Excluded","","",70,null],[4,"RangeSyntax","","",null,null],[13,"DotDotDot","","",71,null],[13,"DotDotEq","","",71,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",72,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`), or a unit struct/variant pattern, or a const pattern (in the last two cases the third field must be `None`). Disambiguation cannot be done with parser alone, so it happens during name resolution.",72,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",72,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",72,null],[13,"Path","","A possibly qualified path pattern. Unqualified path patterns `A::B::C` can legally refer to variants, structs, constants or associated constants. Qualified path patterns `<A>::B::C`/`<A as Trait>::B::C` can only legally refer to associated constants.",72,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",72,null],[13,"Box","","A `box` pattern",72,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",72,null],[13,"Lit","","A literal",72,null],[13,"Range","","A range pattern, e.g. `1...2`, `1..=2` or `1..2`",72,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `PatKind::Slice(box [a, b], Some(i), box [y, z])`",72,null],[13,"Mac","","A macro pattern; pre-expansion",72,null],[4,"Mutability","","",null,null],[13,"Mutable","","",73,null],[13,"Immutable","","",73,null],[4,"BinOpKind","","",null,null],[13,"Add","","The `+` operator (addition)",74,null],[13,"Sub","","The `-` operator (subtraction)",74,null],[13,"Mul","","The `*` operator (multiplication)",74,null],[13,"Div","","The `/` operator (division)",74,null],[13,"Rem","","The `%` operator (modulus)",74,null],[13,"And","","The `&&` operator (logical and)",74,null],[13,"Or","","The `||` operator (logical or)",74,null],[13,"BitXor","","The `^` operator (bitwise xor)",74,null],[13,"BitAnd","","The `&` operator (bitwise and)",74,null],[13,"BitOr","","The `|` operator (bitwise or)",74,null],[13,"Shl","","The `<<` operator (shift left)",74,null],[13,"Shr","","The `>>` operator (shift right)",74,null],[13,"Eq","","The `==` operator (equality)",74,null],[13,"Lt","","The `<` operator (less than)",74,null],[13,"Le","","The `<=` operator (less than or equal to)",74,null],[13,"Ne","","The `!=` operator (not equal to)",74,null],[13,"Ge","","The `>=` operator (greater than or equal to)",74,null],[13,"Gt","","The `>` operator (greater than)",74,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",75,null],[13,"Not","","The `!` operator for logical inversion",75,null],[13,"Neg","","The `-` operator for negation",75,null],[4,"StmtKind","","",null,null],[13,"Local","","A local (let) binding.",76,null],[13,"Item","","An item definition.",76,null],[13,"Expr","","Expr without trailing semi-colon.",76,null],[13,"Semi","","Expr with a trailing semi-colon.",76,null],[13,"Mac","","Macro.",76,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };` `foo!(...);`, `foo![...];`",77,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",77,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g. `foo!(...)`. All of these will end up being converted into macro expressions.",77,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",78,null],[13,"Unsafe","","",78,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",79,null],[13,"UserProvided","","",79,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",80,null],[13,"Closed","","Inclusive at the beginning and end",80,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",81,null],[13,"InPlace","","First expr is the place; second expr is the value.",81,null],[13,"Array","","An array (`[a, b, c, d]`)",81,null],[13,"Call","","A function call",81,null],[13,"MethodCall","","A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)",81,null],[13,"Tup","","A tuple (`(a, b, c ,d)`)",81,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",81,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",81,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",81,null],[13,"Cast","","A cast (`foo as f64`)",81,null],[13,"Type","","",81,null],[13,"If","","An `if` block, with an optional else block",81,null],[13,"IfLet","","An `if let` expression with an optional else block",81,null],[13,"While","","A while loop, with an optional label",81,null],[13,"WhileLet","","A while-let loop, with an optional label",81,null],[13,"ForLoop","","A for loop, with an optional label",81,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",81,null],[13,"Match","","A `match` block.",81,null],[13,"Closure","","A closure (for example, `move |a, b, c| a + b + c`)",81,null],[13,"Block","","A block (`{ ... }`)",81,null],[13,"Catch","","A catch block (`catch { ... }`)",81,null],[13,"Assign","","An assignment (`a = foo()`)",81,null],[13,"AssignOp","","An assignment with an operator",81,null],[13,"Field","","Access of a named struct field (`obj.foo`)",81,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",81,null],[13,"Index","","An indexing operation (`foo[2]`)",81,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",81,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",81,null],[13,"AddrOf","","A referencing operation (`&a` or `&mut a`)",81,null],[13,"Break","","A `break`, with an optional label to break, and an optional expression",81,null],[13,"Continue","","A `continue`, with an optional label",81,null],[13,"Ret","","A `return`, with an optional value to be returned",81,null],[13,"InlineAsm","","Output of the `asm!()` macro",81,null],[13,"Mac","","A macro invocation; pre-expansion",81,null],[13,"Struct","","A struct literal expression.",81,null],[13,"Repeat","","An array literal constructed from one repeated element.",81,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",81,null],[13,"Try","","`expr?`",81,null],[13,"Yield","","A `yield`, with an optional value to be yielded",81,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",82,null],[13,"Ref","","",82,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",83,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",83,null],[4,"LitIntType","","",null,null],[13,"Signed","","",84,null],[13,"Unsigned","","",84,null],[13,"Unsuffixed","","",84,null],[4,"LitKind","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",85,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",85,null],[13,"Byte","","A byte char (`b'f'`)",85,null],[13,"Char","","A character literal (`'a'`)",85,null],[13,"Int","","An integer literal (`1`)",85,null],[13,"Float","","A float literal (`1f64` or `1E10f64`)",85,null],[13,"FloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",85,null],[13,"Bool","","A boolean literal",85,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",86,null],[13,"Method","","",86,null],[13,"Type","","",86,null],[13,"Macro","","",86,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",87,null],[13,"Method","","",87,null],[13,"Type","","",87,null],[13,"Macro","","",87,null],[4,"IntTy","","",null,null],[13,"Is","","",88,null],[13,"I8","","",88,null],[13,"I16","","",88,null],[13,"I32","","",88,null],[13,"I64","","",88,null],[13,"I128","","",88,null],[4,"UintTy","","",null,null],[13,"Us","","",89,null],[13,"U8","","",89,null],[13,"U16","","",89,null],[13,"U32","","",89,null],[13,"U64","","",89,null],[13,"U128","","",89,null],[4,"FloatTy","","",null,null],[13,"F32","","",90,null],[13,"F64","","",90,null],[4,"TyKind","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length slice (`[T]`)",91,null],[13,"Array","","A fixed length array (`[T; n]`)",91,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",91,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",91,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",91,null],[13,"Never","","The never type (`!`)",91,null],[13,"Tup","","A tuple (`(A, B, C, D,...)`)",91,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",91,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",91,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",91,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",91,null],[13,"Typeof","","Unused for now",91,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",91,null],[13,"ImplicitSelf","","Inferred type of a `self` or `&self` argument in a method.",91,null],[13,"Mac","","",91,null],[13,"Err","","Placeholder for a kind that has failed to be defined.",91,null],[4,"TraitObjectSyntax","","Syntax used to declare a trait object.",null,null],[13,"Dyn","","",92,null],[13,"None","","",92,null],[4,"AsmDialect","","Inline assembly dialect.",null,null],[13,"Att","","",93,null],[13,"Intel","","",93,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",94,null],[13,"Region","","`&'lt self`, `&'lt mut self`",94,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",94,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",95,null],[13,"Normal","","",95,null],[4,"Constness","","",null,null],[13,"Const","","",96,null],[13,"NotConst","","",96,null],[4,"Defaultness","","",null,null],[13,"Default","","",97,null],[13,"Final","","",97,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",98,null],[13,"Negative","","`impl !Trait for Type`",98,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",99,null],[13,"Ty","","Everything else",99,null],[4,"ViewPath_","","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",100,null],[13,"ViewPathGlob","","`foo::bar::*`",100,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",100,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",101,null],[13,"Inner","","",101,null],[4,"Visibility","","",null,null],[13,"Public","","",102,null],[13,"Crate","","",102,null],[13,"Restricted","","",102,null],[12,"path","syntax::ast::Visibility","",102,null],[12,"id","","",102,null],[13,"Inherited","syntax::ast","",102,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","Struct variant.",103,null],[13,"Tuple","","Tuple variant.",103,null],[13,"Unit","","Unit variant.",103,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An `extern crate` item, with optional original crate name.",104,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",104,null],[13,"Static","","A static item (`static` or `pub static`).",104,null],[13,"Const","","A constant item (`const` or `pub const`).",104,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",104,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",104,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",104,null],[13,"GlobalAsm","","Module-level inline assembly (from `global_asm!()`)",104,null],[13,"Ty","","A type alias (`type` or `pub type`).",104,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",104,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",104,null],[13,"Union","","A union definition (`union` or `pub union`).",104,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",104,null],[13,"DefaultImpl","","Auto trait implementation.",104,null],[13,"Impl","","An implementation.",104,null],[13,"Mac","","A macro invocation.",104,null],[13,"MacroDef","","A macro definition.",104,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",105,null],[13,"Static","","A foreign static item (`static ext: u8`), with optional mutability (the boolean is true when mutable)",105,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate, used to drive conditional compilation",null,null],[6,"NestedMetaItem","","A spanned compile-time attribute list item.",null,null],[6,"BinOp","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST node value. Then later, in the renumber pass, we renumber them to have small, positive ids.",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","","",16,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"default_to_global","","",16,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"is_global","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","","",17,{"inputs":[{"name":"ident"},{"name":"span"}],"output":{"name":"self"}}],[11,"crate_root","","",17,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",63,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"into","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"cmp","","",106,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ordering"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",106,{"inputs":[{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"from_u32","","",106,{"inputs":[{"name":"u32"}],"output":{"name":"nodeid"}}],[11,"as_usize","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"placeholder_from_mark","","",106,{"inputs":[{"name":"mark"}],"output":{"name":"self"}}],[11,"placeholder_to_mark","","",106,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_encode","","",106,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",106,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","",106,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_lt_parameterized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_for_name","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"default","","Creates an instance of `Generics`.",21,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitemkind"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"nestedmetaitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"nestedmetaitemkind"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"metaitemkind"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"metaitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"metaitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"walk","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"rangeend"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"bool"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"rangesyntax"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"rangesyntax"}],"output":{"name":"bool"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"binopkind"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"binopkind"}],"output":{"name":"bool"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"lazy","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shift","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_comparison","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",75,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",75,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"add_trailing_semicolon","","",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_item","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"stmtkind"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"encode","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"macstmtstyle"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"unsafesource"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"returns","","Wether this expression would be valid somewhere that expects a value, for example, an `if` condition.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"captureby"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"bool"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"mac_"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","",37,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"macrodef"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","",38,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"litinttype"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"litkind"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_str","","Returns true if this literal is a string and false otherwise.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unsuffixed","","Returns true if this literal has no suffix. Note: this will return true for literals with prefixes such as raw strings and byte strings.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_suffixed","","Returns true if this literal has a suffix.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"partial_cmp","","",88,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"option"}}],[11,"cmp","","",88,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"ordering"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",88,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"string"}}],[11,"bit_width","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"uintty"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"ordering"}}],[11,"ty_to_string","","",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",89,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"string"}}],[11,"bit_width","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"partial_cmp","","",90,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"option"}}],[11,"cmp","","",90,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"ordering"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"bit_width","","",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"tykind"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"traitobjectsyntax"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"traitobjectsyntax"}],"output":{"name":"bool"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"asmdialect"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmoutput"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"inlineasm"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"selfkind"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_self","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_self","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_self","","",48,{"inputs":[{"name":"explicitself"},{"name":"spannedident"}],"output":{"name":"arg"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_self","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_self","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"encode","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",99,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"globalasm"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"globalasm"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"globalasm"}],"output":{"name":"bool"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"variant_"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"pathlistitem_"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"viewpath_"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","",100,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"attrid"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",59,{"inputs":[{"name":"vec"},{"name":"path"},{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"encode","","",102,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"structfield"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"encode","","",103,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fields","","",103,null],[11,"id","","",103,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"itemkind"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"encode","","",104,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemkind"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"attr","syntax","",null,null],[3,"Stability","syntax::attr","Represents the #[stable], #[unstable], #[rustc_{deprecated,const_unstable}] attributes.",null,null],[12,"level","","",107,null],[12,"feature","","",107,null],[12,"rustc_depr","","",107,null],[12,"rustc_const_unstable","","",107,null],[3,"RustcDeprecation","","",null,null],[12,"since","","",108,null],[12,"reason","","",108,null],[3,"RustcConstUnstable","","",null,null],[12,"feature","","",109,null],[3,"Deprecation","","",null,null],[12,"since","","",110,null],[12,"note","","",110,null],[4,"InlineAttr","","",null,null],[13,"None","","",111,null],[13,"Hint","","",111,null],[13,"Always","","",111,null],[13,"Never","","",111,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",112,null],[12,"reason","syntax::attr::StabilityLevel","",112,null],[12,"issue","","",112,null],[13,"Stable","syntax::attr","",112,null],[12,"since","syntax::attr::StabilityLevel","",112,null],[4,"ReprAttr","syntax::attr","",null,null],[13,"ReprInt","","",113,null],[13,"ReprExtern","","",113,null],[13,"ReprPacked","","",113,null],[13,"ReprSimd","","",113,null],[13,"ReprAlign","","",113,null],[4,"IntType","","",null,null],[13,"SignedInt","","",114,null],[13,"UnsignedInt","","",114,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mark_known","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_known","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"name"},{"name":"symbol"}],"output":{"name":"metaitem"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"name"},{"name":"lit"}],"output":{"name":"metaitem"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[5,"mk_list_word_item","","",null,{"inputs":[{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"name"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_name_value_item","","",null,{"inputs":[{"name":"span"},{"name":"name"},{"name":"lit"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_list_item","","",null,{"inputs":[{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_word_item","","",null,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_inner","","Returns an inner attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_outer","","Returns an outer attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"symbol"},{"name":"span"}],"output":{"name":"attribute"}}],[5,"list_contains_name","","",null,null],[5,"contains_name","","",null,null],[5,"find_by_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"contains_feature_attr","","Check if `attrs` contains an attribute like `#![feature(feature_name)]`. This will not perform any \"sanity checks\" on the form of the attributes.",null,null],[5,"find_crate_name","","",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,{"inputs":[{"name":"metaitem"},{"name":"parsesess"},{"name":"option"}],"output":{"name":"bool"}}],[5,"eval_condition","","Evaluate a cfg-like condition (with `any` and `all`), using `eval` to evaluate individual items.",null,{"inputs":[{"name":"metaitem"},{"name":"parsesess"},{"name":"f"}],"output":{"name":"bool"}}],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"find_deprecation","","Find the deprecation attribute. `None` if none exists.",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"handler"},{"name":"attribute"}],"output":{"name":"vec"}}],[8,"HasAttrs","","",null,null],[10,"attrs","","",115,null],[10,"map_attrs","","",115,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"meta_item","","Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","Returns the Lit if self is a NestedMetaItemKind::Literal.",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the Span for `self`.",116,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"check_name","","Returns true if this list item is a MetaItem with a name of `name`.",116,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","Returns the name of the meta item, e.g. `foo` in `#[foo]`, `#[foo=\"bar\"]` and `#[foo(bar)]`, if self is a MetaItem",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_str","","Gets the string value if self is a MetaItem and the MetaItem is a MetaItemKind::NameValue variant containing a string, otherwise None.",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name_value_literal","","Returns a name and single literal value tuple of the MetaItem.",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"word","","Returns a MetaItem if self is a MetaItem with Kind Word.",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_meta_item","","Returns `true` if the variant is MetaItem.",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_literal","","Returns `true` if the variant is Literal.",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_word","","Returns `true` if self is a MetaItem and the meta item is a word.",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","Returns `true` if self is a MetaItem and the meta item is a ValueString.",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","Returns `true` if self is a MetaItem and the meta item is a list.",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"check_name","syntax::ast","",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_str","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",57,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_meta_item_list","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","Indicates if the attribute is a Value String.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","",27,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"value_str","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",27,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"check_name","","",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_value_str","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta","","Extract the MetaItem from inside this Attribute.",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse","","",57,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_list","","",57,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_meta","","",57,{"inputs":[{"name":"self"},{"name":"parsesess"}],"output":{"name":"presult"}}],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a comment like `///` or `/** */`. (Returns self unchanged for non-sugared doc attributes.)",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"clone","syntax::attr","",111,{"inputs":[{"name":"self"}],"output":{"name":"inlineattr"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"encode","","",107,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"hash","","",107,null],[11,"encode","","",112,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"encode","","",108,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"rustcdeprecation"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"encode","","",109,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"rustcconstunstable"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"rustcconstunstable"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"rustcconstunstable"}],"output":{"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"self"},{"name":"rustcconstunstable"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"self"},{"name":"rustcconstunstable"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"self"},{"name":"rustcconstunstable"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"self"},{"name":"rustcconstunstable"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"rustcconstunstable"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"encode","","",110,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"deprecation"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"is_unstable","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",113,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"reprattr"}}],[11,"hash","","",114,null],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",114,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",114,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"is_signed","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"tokens","syntax::ast","",68,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokenstream"}}],[11,"attrs","syntax::util","",9,null],[11,"map_attrs","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntax::ast","",76,null],[11,"map_attrs","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",31,null],[11,"map_attrs","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",61,null],[11,"map_attrs","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",35,null],[11,"map_attrs","","",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",32,null],[11,"map_attrs","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",62,null],[11,"map_attrs","","",62,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",60,null],[11,"map_attrs","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",42,null],[11,"map_attrs","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",41,null],[11,"map_attrs","","",41,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",33,null],[11,"map_attrs","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",34,null],[11,"map_attrs","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",30,null],[11,"map_attrs","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",54,null],[11,"map_attrs","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"codemap","syntax","The CodeMap tracks all the source code used within a single crate, mapping from integer byte positions to the original source code location. Each bit of source parsed during crate parsing (typically files, in-memory strings, or various bits of macro expansion) cover a continuous range of bytes in the CodeMap and are represented by FileMaps. Byte positions are stored in `spans` and used pervasively in the compiler. They are absolute positions within the CodeMap, which upon request can be converted to line and column information, source code snippets, etc.",null,null],[4,"ExpnFormat","syntax::codemap","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",117,null],[13,"MacroBang","","e.g. `format!()`",117,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",117,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",118,null],[12,"callee","","Information about the expansion.",118,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",119,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",119,null],[12,"allow_internal_unsafe","","Whether the macro is allowed to use `unsafe` internally even if the user crate has `#![forbid(unsafe_code)]`.",119,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",119,null],[3,"Spanned","","",null,null],[12,"node","","",120,null],[12,"span","","",120,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[3,"FilePathMapping","","",null,null],[5,"original_sp","","Return the span itself if it doesn't come from a macro expansion, otherwise return the call site span up to the `enclosing_sp` by following the `expn_info` chain.",null,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",121,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[10,"abs_path","","Return an absolute path to a file, if possible.",121,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[10,"read_file","","Read the contents of an UTF-8 file into memory.",121,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"spanned"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"encode","","",120,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",120,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"file_exists","","",122,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"abs_path","","",122,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"read_file","","",122,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","",123,{"inputs":[{"name":"filepathmapping"}],"output":{"name":"codemap"}}],[11,"with_file_loader","","",123,{"inputs":[{"name":"box"},{"name":"filepathmapping"}],"output":{"name":"codemap"}}],[11,"path_mapping","","",123,{"inputs":[{"name":"self"}],"output":{"name":"filepathmapping"}}],[11,"file_exists","","",123,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",123,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"files","","",123,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't intend to set the line information yourself, you should use new_filemap_and_lines.",123,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"string"}],"output":{"name":"rc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",123,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"rc"}}],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external crate. The source code of such an \"imported filemap\" is not available, but we still know enough to generate accurate debuginfo location information for things inlined from other crates.",123,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"bool"},{"name":"u32"},{"name":"u128"},{"name":"usize"},{"name":"vec"},{"name":"vec"}],"output":{"name":"rc"}}],[11,"mk_substr_filename","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",123,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_char_pos_adj","","",123,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"merge_spans","","Returns `Some(span)`, a union of the lhs and rhs span.  The lhs must precede the rhs. If there are gaps between lhs and rhs, the resulting union will cross these gaps. For this to work, the spans have to be:    * the ctxt of both spans much match    * the lhs span needs to end on the same line the rhs span begins    * the lhs span must start at or before the rhs span",123,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_to_string","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"span_to_unmapped_path","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"pathbuf"}}],[11,"span_to_lines","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_snippet","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"span_until_char","","Given a `Span`, try to get a shorter span ending before the first occurrence of `c` `char`",123,{"inputs":[{"name":"self"},{"name":"span"},{"name":"char"}],"output":{"name":"span"}}],[11,"span_through_char","","Given a `Span`, try to get a shorter span ending just after the first occurrence of `char` `c`.",123,{"inputs":[{"name":"self"},{"name":"span"},{"name":"char"}],"output":{"name":"span"}}],[11,"def_span","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"get_filemap","","",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",123,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",123,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"lookup_filemap_idx","","",123,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"usize"}}],[11,"count_lines","","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lookup_char_pos","","",123,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"span_to_lines","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_string","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"merge_spans","","",123,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"option"}}],[11,"call_span_if_macro","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"ensure_filemap_source_present","","",123,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"filepathmapping"}}],[11,"empty","","",124,{"inputs":[],"output":{"name":"filepathmapping"}}],[11,"new","","",124,{"inputs":[{"name":"vec"}],"output":{"name":"filepathmapping"}}],[11,"map_prefix","","Applies any path prefix substitution as defined by the mapping. The return value is the remapped path and a boolean indicating whether the path was affected by the mapping.",124,null],[0,"config","syntax","",null,null],[3,"StripUnconfigured","syntax::config","A folder that strips out items that do not belong in the current configuration.",null,null],[12,"should_test","","",125,null],[12,"sess","","",125,null],[12,"features","","",125,null],[5,"features","","",null,null],[5,"is_test_or_bench","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[11,"configure","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"process_cfg_attrs","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"in_cfg","","",125,null],[11,"configure_foreign_mod","","",125,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"configure_item_kind","","",125,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"configure_expr_kind","","",125,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"exprkind"}}],[11,"configure_expr","","",125,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"configure_stmt","","",125,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"option"}}],[11,"configure_struct_expr_field","","",125,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"option"}}],[11,"configure_pat","","",125,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_foreign_mod","","",125,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_item_kind","","",125,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_expr","","",125,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",125,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_stmt","","",125,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_item","","",125,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",125,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",125,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_mac","","",125,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_pat","","",125,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[0,"entry","syntax","",null,null],[4,"EntryPointType","syntax::entry","",null,null],[13,"None","","",126,null],[13,"MainNamed","","",126,null],[13,"MainAttr","","",126,null],[13,"Start","","",126,null],[13,"OtherMain","","",126,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntax","Feature gating",null,null],[3,"Features","syntax::feature_gate","A set of features to be used by later passes.",null,null],[12,"declared_stable_lang_features","","#![feature] attrs for stable language features, for error reporting",127,null],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",127,null],[12,"asm","","",127,null],[12,"concat_idents","","",127,null],[12,"link_args","","",127,null],[12,"log_syntax","","",127,null],[12,"non_ascii_idents","","",127,null],[12,"plugin_registrar","","",127,null],[12,"thread_local","","",127,null],[12,"trace_macros","","",127,null],[12,"intrinsics","","",127,null],[12,"lang_items","","",127,null],[12,"link_llvm_intrinsics","","",127,null],[12,"linkage","","",127,null],[12,"quote","","",127,null],[12,"simd","","",127,null],[12,"rustc_diagnostic_macros","","",127,null],[12,"rustc_const_unstable","","",127,null],[12,"advanced_slice_patterns","","",127,null],[12,"box_syntax","","",127,null],[12,"placement_in_syntax","","",127,null],[12,"unboxed_closures","","",127,null],[12,"fundamental","","",127,null],[12,"main","","",127,null],[12,"needs_allocator","","",127,null],[12,"on_unimplemented","","",127,null],[12,"plugin","","",127,null],[12,"simd_ffi","","",127,null],[12,"start","","",127,null],[12,"structural_match","","",127,null],[12,"panic_runtime","","",127,null],[12,"needs_panic_runtime","","",127,null],[12,"optin_builtin_traits","","",127,null],[12,"macro_reexport","","",127,null],[12,"staged_api","","",127,null],[12,"no_core","","",127,null],[12,"box_patterns","","",127,null],[12,"dropck_parametricity","","",127,null],[12,"dropck_eyepatch","","",127,null],[12,"custom_attribute","","",127,null],[12,"custom_derive","","",127,null],[12,"rustc_attrs","","",127,null],[12,"allow_internal_unstable","","",127,null],[12,"allow_internal_unsafe","","",127,null],[12,"slice_patterns","","",127,null],[12,"const_fn","","",127,null],[12,"const_indexing","","",127,null],[12,"prelude_import","","",127,null],[12,"default_type_parameter_fallback","","",127,null],[12,"associated_type_defaults","","",127,null],[12,"repr_simd","","",127,null],[12,"cfg_target_feature","","",127,null],[12,"platform_intrinsics","","",127,null],[12,"unwind_attributes","","",127,null],[12,"naked_functions","","",127,null],[12,"no_debug","","",127,null],[12,"omit_gdb_pretty_printer_section","","",127,null],[12,"cfg_target_vendor","","",127,null],[12,"stmt_expr_attributes","","",127,null],[12,"type_ascription","","",127,null],[12,"cfg_target_thread_local","","",127,null],[12,"abi_vectorcall","","",127,null],[12,"inclusive_range_syntax","","",127,null],[12,"exclusive_range_pattern","","",127,null],[12,"specialization","","",127,null],[12,"cfg_target_has_atomic","","",127,null],[12,"conservative_impl_trait","","",127,null],[12,"never_type","","",127,null],[12,"attr_literals","","",127,null],[12,"abi_sysv64","","",127,null],[12,"untagged_unions","","",127,null],[12,"compiler_builtins","","",127,null],[12,"generic_param_attrs","","",127,null],[12,"link_cfg","","",127,null],[12,"use_extern_macros","","",127,null],[12,"target_feature","","",127,null],[12,"abi_ptx","","",127,null],[12,"i128_type","","",127,null],[12,"repr128","","",127,null],[12,"abi_unadjusted","","",127,null],[12,"proc_macro","","",127,null],[12,"decl_macro","","",127,null],[12,"static_nobundle","","",127,null],[12,"abi_msp430_interrupt","","",127,null],[12,"sanitizer_runtime","","",127,null],[12,"profiler_runtime","","",127,null],[12,"abi_x86_interrupt","","",127,null],[12,"catch_expr","","",127,null],[12,"repr_align","","",127,null],[12,"used","","",127,null],[12,"global_asm","","",127,null],[12,"overlapping_marker_traits","","",127,null],[12,"macro_vis_matcher","","",127,null],[12,"abi_thiscall","","",127,null],[12,"allow_fail","","",127,null],[12,"unsized_tuple_coercion","","",127,null],[12,"generators","","",127,null],[12,"global_allocator","","",127,null],[12,"allocator_internals","","",127,null],[12,"doc_cfg","","",127,null],[12,"doc_masked","","",127,null],[12,"fn_must_use","","",127,null],[12,"match_beginning_vert","","",127,null],[12,"clone_closures","","",127,null],[12,"copy_closures","","",127,null],[12,"underscore_lifetimes","","",127,null],[12,"dotdoteq_in_patterns","","",127,null],[12,"match_default_bindings","","",127,null],[12,"dyn_trait","","",127,null],[3,"GatedCfg","","",null,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed by the compiler before the unused_attribute check",128,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler before the unused_attribute check. These attributes will be ignored by the unused_attribute lint",128,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",128,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate, reason and function to check if enabled",129,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",129,null],[4,"Stability","","",null,null],[13,"Unstable","","",130,null],[13,"Deprecated","","",130,null],[4,"GateIssue","","",null,null],[13,"Language","","",131,null],[13,"Library","","",131,null],[4,"GateStrength","","",null,null],[13,"Hard","","A hard error. (Most feature gates should use this.)",132,null],[13,"Soft","","Only a warning. (Use this only as backwards-compatibility demands.)",132,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on beta/stable channels.",133,null],[13,"Allow","","Allow features to be activated, as on nightly.",133,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time during the build that feature-related lints are set to warn or above because the build turns on warnings-as-errors and uses lots of unstable features. As a result, this is always required for building Rust itself.",133,null],[5,"deprecated_attributes","","",null,{"inputs":[],"output":{"name":"vec"}}],[5,"is_builtin_attr","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"check_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"parsesess"},{"name":"features"}],"output":null}],[5,"find_lang_feature_accepted_version","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[5,"get_features","","",null,null],[5,"check_crate","","",null,null],[17,"BUILTIN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_STMT_ATTR_SYNTAX","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_GLOBAL_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSAFE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DEPR_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DERIVE_UNDERSCORE","","",null,null],[17,"EXPLAIN_VIS_MATCHER","","",null,null],[17,"EXPLAIN_PLACEMENT_IN","","",null,null],[17,"EXPLAIN_UNSIZED_TUPLE_COERCION","","",null,null],[11,"new","","",127,{"inputs":[],"output":{"name":"features"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"attributetype"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"gate","","",134,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"check_and_emit","","",134,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"features"}],"output":null}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"gatestrength"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"gatestrength"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"unstablefeatures"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"unstablefeatures"}],"output":{"name":"bool"}}],[11,"hash","","",133,null],[11,"from_environment","","",133,{"inputs":[],"output":{"name":"unstablefeatures"}}],[11,"is_nightly_build","","",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"fold","syntax","A Folder represents an AST->AST fold; it accepts an AST piece, and returns a piece of the same type. So, for instance, macro expansion is a Folder that walks over an AST and produces another AST.",null,null],[5,"noop_fold_meta_items","syntax::fold","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"fold_thin_attrs","","",null,{"inputs":[{"name":"thinvec"},{"name":"t"}],"output":{"name":"thinvec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_global_asm","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_macro_def","","",null,{"inputs":[{"name":"macrodef"},{"name":"t"}],"output":{"name":"macrodef"}}],[5,"noop_fold_meta_list_item","","",null,{"inputs":[{"name":"nestedmetaitem"},{"name":"t"}],"output":{"name":"nestedmetaitem"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"metaitem"},{"name":"t"}],"output":{"name":"metaitem"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,{"inputs":[{"name":"tokenstream"},{"name":"t"}],"output":{"name":"tokenstream"}}],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_kind","","",null,{"inputs":[{"name":"itemkind"},{"name":"t"}],"output":{"name":"itemkind"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_range_end","","",null,{"inputs":[{"name":"rangeend"},{"name":"t"}],"output":{"name":"rangeend"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_opt_expr","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_exprs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_stmt_kind","","",null,{"inputs":[{"name":"stmtkind"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_vis","","",null,{"inputs":[{"name":"visibility"},{"name":"t"}],"output":{"name":"visibility"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",135,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_meta_items","","",135,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_meta_list_item","","",135,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"nestedmetaitem"}}],[11,"fold_meta_item","","",135,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"metaitem"}}],[11,"fold_view_path","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_foreign_item","","",135,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fold_item","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_item_simple","","",135,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_struct_field","","",135,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"structfield"}}],[11,"fold_item_kind","","",135,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_trait_item","","",135,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",135,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_fn_decl","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_block","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_stmt","","",135,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_arm","","",135,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_pat","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_expr","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_range_end","","",135,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"rangeend"}}],[11,"fold_opt_expr","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_exprs","","",135,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_ty","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty_binding","","",135,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"typebinding"}}],[11,"fold_mod","","",135,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_foreign_mod","","",135,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_global_asm","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_variant","","",135,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"variant"}}],[11,"fold_ident","","",135,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_usize","","",135,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"fold_path","","",135,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_parameters","","",135,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"fold_angle_bracketed_parameter_data","","",135,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fold_parenthesized_parameter_data","","",135,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fold_local","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",135,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_macro_def","","",135,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"macrodef"}}],[11,"fold_lifetime","","",135,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",135,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_attribute","","",135,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"option"}}],[11,"fold_arg","","",135,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"arg"}}],[11,"fold_generics","","",135,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_trait_ref","","",135,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fold_poly_trait_ref","","",135,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fold_variant_data","","",135,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"fold_lifetimes","","",135,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_lifetime_defs","","",135,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_ty_param","","",135,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fold_ty_params","","",135,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_tt","","",135,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"fold_tts","","",135,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"fold_token","","",135,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"token"}}],[11,"fold_interpolated","","",135,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fold_opt_lifetime","","",135,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_opt_bounds","","",135,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_bounds","","",135,{"inputs":[{"name":"self"},{"name":"typarambounds"}],"output":{"name":"typarambounds"}}],[11,"fold_ty_param_bound","","",135,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fold_mt","","",135,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fold_field","","",135,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_where_clause","","",135,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",135,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"fold_vis","","",135,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"new_id","","",135,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"new_span","","",135,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[0,"parse","syntax","The main parser interface",null,null],[3,"ParseSess","syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",136,null],[12,"unstable_features","","",136,null],[12,"config","","",136,null],[12,"missing_fragment_specifiers","","",136,null],[3,"Directory","","",null,null],[12,"path","","",137,null],[12,"ownership","","",137,null],[4,"DirectoryOwnership","","",null,null],[13,"Owned","","",138,null],[13,"UnownedViaBlock","","",138,null],[13,"UnownedViaMod","","",138,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_item_from_source_str","","Parses an item.",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stream_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"},{"name":"option"}],"output":{"name":"tokenstream"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate if the file doesn't exist",null,{"inputs":[{"name":"parsesess"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add the file at the given path to the codemap, and return a parser. On an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"path"},{"name":"directoryownership"},{"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"filemap_to_stream","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"name":"rc"},{"name":"option"}],"output":{"name":"tokenstream"}}],[5,"stream_to_parser","","Given stream and the `ParseSess`, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"tokenstream"}],"output":{"name":"parser"}}],[5,"char_lit","","Parse a string representing a character literal into its final form. Rather than just accepting/rejecting a given literal, unescapes it as well. Can take any slice prefixed by a character escape. Returns the character and the number of characters consumed.",null,null],[5,"escape_default","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"str_lit","","Parse a string representing a string literal into its final form. Does unescaping.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The only operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"lit_token","","",null,null],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[0,"parser","","",null,null],[3,"Restrictions","syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",139,null],[12,"token","","the current token:",139,null],[12,"span","","the span of the current token:",139,null],[12,"meta_var_span","","the span of the previous token:",139,null],[12,"prev_span","","",139,null],[12,"restrictions","","",139,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress extra detail when the same error is seen twice",139,null],[12,"directory","","Used to determine the path to externally loaded source files",139,null],[12,"recurse_into_file_modules","","Whether to parse sub-modules in other files.",139,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the name is not known. This does not change while the parser is descending into modules, and sub-parsers have new values for this name.",139,null],[12,"expected_tokens","","",139,null],[12,"desugar_doc_comments","","",139,null],[12,"cfg_mods","","Whether we should configure out of line modules as we parse.",139,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",140,null],[12,"path_exists","","",140,null],[12,"result","","",140,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",141,null],[12,"directory_ownership","","",141,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",142,null],[12,"help_msg","","",142,null],[4,"PathStyle","","How to parse a path.",null,null],[13,"Expr","","In some contexts, notably in expressions, paths with generic arguments are ambiguous with something else. For example, in expressions `segment < ....` can be interpreted as a comparison and `segment ( ....` can be interpreted as a function call. In all such contexts the non-path interpretation is preferred by default for practical reasons, but the path interpretation can be forced by the disambiguator `::`, e.g. `x<y>` - comparisons, `x::<y>` - unambiguously a path.",143,null],[13,"Type","","In other contexts, notably in types, no ambiguity exists and paths can be written without the disambiguator, e.g. `x<y>` - unambiguously a path. Paths with disambiguators are still accepted, `x::<Y>` - unambiguously a path too.",143,null],[13,"Mod","","A path with generic arguments disallowed, e.g. `foo::bar::Baz`, used in imports, visibilities or attributes. Technically, this variant is unnecessary and e.g. `Expr` can be used instead (paths in \"mod\" contexts have to be checked later for absence of generic arguments anyway, due to macros), but it is used to avoid weird suggestions about expected tokens when something goes wrong.",143,null],[4,"SemiColonMode","","",null,null],[13,"Break","","",144,null],[13,"Ignore","","",144,null],[4,"BlockMode","","",null,null],[13,"Break","","",145,null],[13,"Ignore","","",145,null],[4,"TokenType","","",null,null],[13,"Token","","",146,null],[13,"Keyword","","",146,null],[13,"Operator","","",146,null],[13,"Lifetime","","",146,null],[13,"Ident","","",146,null],[13,"Path","","",146,null],[13,"Type","","",146,null],[4,"Error","","",null,null],[13,"FileNotFoundForModule","","",147,null],[12,"mod_name","syntax::parse::parser::Error","",147,null],[12,"default_path","","",147,null],[12,"secondary_path","","",147,null],[12,"dir_path","","",147,null],[13,"DuplicatePaths","syntax::parse::parser","",147,null],[12,"mod_name","syntax::parse::parser::Error","",147,null],[12,"default_path","","",147,null],[12,"secondary_path","","",147,null],[13,"UselessDocComment","syntax::parse::parser","",147,null],[13,"InclusiveRangeWithNoEnd","","",147,null],[4,"LhsExpr","","",null,null],[13,"NotYetParsed","","",148,null],[13,"AttributesParsed","","",148,null],[13,"AlreadyParsed","","",148,null],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"partial_cmp","","",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"cmp","","",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"ordering"}}],[11,"hash","","",149,null],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"STMT_EXPR","","",149,null],[18,"NO_STRUCT_LITERAL","","",149,null],[11,"empty","","Returns an empty set of flags.",149,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",149,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",149,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",149,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",149,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",149,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitor_assign","","Adds the set of flags.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitxor_assign","","Toggles the set of flags.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"sub_assign","","Disables all flags enabled in the set.",149,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",149,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"extend","","",149,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",149,{"inputs":[{"name":"t"}],"output":{"name":"restrictions"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"pathstyle"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"semicolonmode"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"semicolonmode"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"blockmode"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"blockmode"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"span_err","","",147,{"inputs":[{"name":"self"},{"name":"span"},{"name":"handler"}],"output":{"name":"diagnosticbuilder"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",148,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",148,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"new","","",139,{"inputs":[{"name":"parsesess"},{"name":"tokenstream"},{"name":"option"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"token_to_string","","Convert a token to a string using self's reader",139,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self's reader",139,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"this_token_descr","","",139,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unexpected_last","","",139,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"unexpected","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"expect","","Expect and consume the token t. Signal an error if the next token is not t.",139,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible, then consume it; if inedible, then return without consuming anything.  Signal a fatal error if next token is unexpected.",139,null],[11,"parse_ident","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"check","","Check if the next token is `tok`, and return `true` if so.",139,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given token was present, false otherwise.",139,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"check_keyword","","",139,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword","","If the next token is the given keyword, eat it and return true. Otherwise, return false.",139,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword_noexpect","","",139,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"expect_keyword","","If the given word is not a keyword, signal an error. If the next token is not the given word, signal an error. Otherwise, eat it.",139,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"presult"}}],[11,"expect_no_suffix","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"option"}],"output":null}],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it with a single > and continue. If a GT is not seen, signal an error.",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt_or_return","","",139,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping before the '>'.",139,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt","","",139,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt_or_return","","",139,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees, passes through any errors encountered. Used for error recovery.",139,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",139,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",139,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"vec"}}],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",139,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq","","",139,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"bump","","Advance the parser by one token",139,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when consuming a part of a token. For example a single `<` from `<<`.",139,{"inputs":[{"name":"self"},{"name":"token"},{"name":"span"}],"output":null}],[11,"look_ahead","","",139,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[11,"fatal","","",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal_err","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"error"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal_help","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"bug","","",139,null],[11,"warn","","",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"span_warn","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err_help","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_bug","","",139,null],[11,"abort_if_errors","","",139,{"inputs":[{"name":"self"}],"output":null}],[11,"diagnostic","","",139,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function type?",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",139,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"parse_unsafety","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_trait_item","","Parse the items in a trait declaration",139,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ptr","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"is_named_argument","","",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require identifier names.",139,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_arg","","Parse a single function argument",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"maybe_parse_fixed_length_of_vec","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lit","","Matches lit = true | false | token_lit",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_pat_literal_maybe_minus","","matches '-' lit | lit (cf. ast_validation::AstValidator::check_expr_within_pat)",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segment_ident","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path","","Parses simple paths.",139,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"presult"}}],[11,"parse_path_common","","",139,{"inputs":[{"name":"self"},{"name":"pathstyle"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_path_allowing_meta","","Like `parse_path`, but also supports parsing `Word` meta items into paths for back-compat. This is used when parsing derive macro paths in `#[derive]` attributes.",139,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"presult"}}],[11,"parse_field_name","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_field","","Parse ident (COLON expr)?",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"mk_expr","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"mk_unary","","",139,{"inputs":[{"name":"self"},{"name":"unop"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_binary","","",139,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_call","","",139,{"inputs":[{"name":"self"},{"name":"p"},{"name":"vec"}],"output":{"name":"exprkind"}}],[11,"mk_index","","",139,{"inputs":[{"name":"self"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_range","","",139,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"rangelimits"}],"output":{"name":"presult"}}],[11,"mk_tup_field","","",139,{"inputs":[{"name":"self"},{"name":"p"},{"name":"spanned"}],"output":{"name":"exprkind"}}],[11,"mk_assign_op","","",139,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_mac_expr","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"mac_"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"mk_lit_u32","","",139,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"parse_block_expr","","Parse a block or unsafe block",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"blockcheckmode"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",139,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr_with","","",139,{"inputs":[{"name":"self"},{"name":"p"},{"name":"span"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"process_potential_macro_variable","","",139,{"inputs":[{"name":"self"}],"output":null}],[11,"parse_token_tree","","parse a single token tree from the input.",139,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"parse_all_token_trees","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_tokens","","",139,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",139,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr","","Parse an associative expression",139,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",139,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"lhsexpr"}],"output":{"name":"presult"}}],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",139,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",139,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_lambda_expr","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"captureby"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_else_expr","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",139,{"inputs":[{"name":"self"},{"name":"option"},{"name":"span"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",139,{"inputs":[{"name":"self"},{"name":"option"},{"name":"span"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",139,{"inputs":[{"name":"self"},{"name":"option"},{"name":"span"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_loop_expr","","",139,{"inputs":[{"name":"self"},{"name":"option"},{"name":"span"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_catch_expr","","Parse a `do catch {...}` expression (`do catch` token already eaten)",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_arm","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_expr","","Parse an expression",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"with_res","","Evaluate the closure with restrictions in place.",139,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"f"}],"output":{"name":"t"}}],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",139,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_pat","","Parse a pattern.",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_stmt","","Parse a statement. This stops just before trailing semicolons on everything but items. e.g. a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_block","","Parse a block. No inner attrs are allowed.",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_full_stmt","","Parse a statement, including the trailing semicolon.",139,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_generic_params","","Parses (possibly empty) list of lifetime and type parameters, possibly including trailing comma and erroneous trailing attributes.",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where clauses are not parsed here, and must be added later via `parse_where_clause()`.",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",139,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_fn_front_matter","","parses all the \"front matter\" for a `fn` declaration, up to and including the `fn` keyword:",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_impl_item","","Parse an impl item.",139,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_record_struct_body","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_tuple_struct_body","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_single_struct_field","","Parse a structure field declaration",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"parse_visibility","","Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.  If the following element can't be a tuple (i.e. it's a function definition, it's not a tuple struct field) and the contents within the parens isn't valid, emit a proper diagnostic.",139,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"submod_path_from_attr","","",139,null],[11,"default_submod_path","","Returns either a path to a module, or .",139,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main entry point for the parser.",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_optional_str","","",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"lexer","syntax::parse","",null,null],[3,"TokenAndSpan","syntax::parse::lexer","",null,null],[12,"tok","","",150,null],[12,"sp","","",150,null],[3,"StringReader","","",null,null],[12,"sess","","",151,null],[12,"next_pos","","The absolute offset within the codemap of the next character to read",151,null],[12,"pos","","The absolute offset within the codemap of the current character",151,null],[12,"col","","The column of the next character to read",151,null],[12,"ch","","The current character (which has been read from self.pos)",151,null],[12,"filemap","","",151,null],[12,"terminator","","If Some, stop reading the source at this position (inclusive).",151,null],[12,"save_new_lines_and_multibyte","","Whether to record new-lines and multibyte chars in filemap. This is only necessary the first time a filemap is lexed. If part of a filemap is being re-lexed, this should be set to false.",151,null],[12,"peek_tok","","",151,null],[12,"peek_span","","",151,null],[12,"fatal_errs","","",151,null],[12,"override_span","","",151,null],[5,"is_pattern_whitespace","","",null,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntax::parse::lexer::comments","",null,null],[12,"style","","",152,null],[12,"lines","","",152,null],[12,"pos","","",152,null],[3,"Literal","","",null,null],[12,"lit","","",153,null],[12,"pos","","",153,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",154,null],[13,"Trailing","","Code exists to the left of the comment",154,null],[13,"Mixed","","Code before /* foo */ and after the comment",154,null],[13,"BlankLine","","Just a manual blank line \"\\n\\n\", for layout",154,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"commentstyle"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"parse_all_token_trees","syntax::parse::lexer","",151,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"real_token","","",151,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",151,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_fatal_errors","","",151,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",151,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"new_raw","","For comments.rs, which hackily pokes into next_pos and ch",151,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"self"}}],[11,"new","","",151,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"self"}}],[11,"retokenize","","",151,{"inputs":[{"name":"parsesess"},{"name":"span"}],"output":{"name":"self"}}],[11,"ch_is","","",151,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fatal_span","","Report a fatal lexical error with a given span.",151,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err_span","","Report a lexical error with a given span.",151,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start` up to but excluding `self.pos`, meaning the slice does not include the character `self.ch`.",151,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"f"}],"output":{"name":"t"}}],[11,"name_from","","Create a Name from a given offset to the current offset, each adjusted 1 towards each other (assumes that on either side there is a single-byte delimiter).",151,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"name_from_to","","As name_from, with an explicit endpoint.",151,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"bump","","Advance the StringReader by one character. If a newline is discovered, add it to the FileMap's list of line start offsets.",151,{"inputs":[{"name":"self"}],"output":null}],[11,"nextch","","",151,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nextch_is","","",151,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"nextnextch","","",151,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nextnextch_is","","",151,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[0,"token","syntax::parse","",null,null],[3,"LazyTokenStream","syntax::parse::token","",null,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",155,null],[13,"Minus","","",155,null],[13,"Star","","",155,null],[13,"Slash","","",155,null],[13,"Percent","","",155,null],[13,"Caret","","",155,null],[13,"And","","",155,null],[13,"Or","","",155,null],[13,"Shl","","",155,null],[13,"Shr","","",155,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",156,null],[13,"Bracket","","A square bracket: `[` or `]`",156,null],[13,"Brace","","A curly brace: `{` or `}`",156,null],[13,"NoDelim","","An empty delimiter",156,null],[4,"Lit","","",null,null],[13,"Byte","","",157,null],[13,"Char","","",157,null],[13,"Integer","","",157,null],[13,"Float","","",157,null],[13,"Str_","","",157,null],[13,"StrRaw","","",157,null],[13,"ByteStr","","",157,null],[13,"ByteStrRaw","","",157,null],[4,"Token","","",null,null],[13,"Eq","","",158,null],[13,"Lt","","",158,null],[13,"Le","","",158,null],[13,"EqEq","","",158,null],[13,"Ne","","",158,null],[13,"Ge","","",158,null],[13,"Gt","","",158,null],[13,"AndAnd","","",158,null],[13,"OrOr","","",158,null],[13,"Not","","",158,null],[13,"Tilde","","",158,null],[13,"BinOp","","",158,null],[13,"BinOpEq","","",158,null],[13,"At","","",158,null],[13,"Dot","","",158,null],[13,"DotDot","","",158,null],[13,"DotDotDot","","",158,null],[13,"DotDotEq","","",158,null],[13,"DotEq","","",158,null],[13,"Comma","","",158,null],[13,"Semi","","",158,null],[13,"Colon","","",158,null],[13,"ModSep","","",158,null],[13,"RArrow","","",158,null],[13,"LArrow","","",158,null],[13,"FatArrow","","",158,null],[13,"Pound","","",158,null],[13,"Dollar","","",158,null],[13,"Question","","",158,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",158,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",158,null],[13,"Literal","","",158,null],[13,"Ident","","",158,null],[13,"Underscore","","",158,null],[13,"Lifetime","","",158,null],[13,"Interpolated","","",158,null],[13,"DocComment","","Doc comment",158,null],[13,"Whitespace","","Whitespace",158,null],[13,"Comment","","Comment",158,null],[13,"Shebang","","",158,null],[13,"Eof","","",158,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",159,null],[13,"NtBlock","","",159,null],[13,"NtStmt","","",159,null],[13,"NtPat","","",159,null],[13,"NtExpr","","",159,null],[13,"NtTy","","",159,null],[13,"NtIdent","","",159,null],[13,"NtMeta","","Stuff inside brackets for attributes",159,null],[13,"NtPath","","",159,null],[13,"NtVis","","",159,null],[13,"NtTT","","",159,null],[13,"NtArm","","",159,null],[13,"NtImplItem","","",159,null],[13,"NtTraitItem","","",159,null],[13,"NtGenerics","","",159,null],[13,"NtWhereClause","","",159,null],[13,"NtArg","","",159,null],[5,"is_op","","",null,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"encode","","",155,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",155,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"encode","","",156,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",156,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",156,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"encode","","",157,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",157,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"short_name","","",157,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"encode","","",158,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",158,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",158,null],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"interpolated","","",158,{"inputs":[{"name":"nonterminal"}],"output":{"name":"token"}}],[11,"is_like_gt","","Returns `true` if the token starts with '>'.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_begin_type","","Returns `true` if the token can appear at the start of a type.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_begin_bound","","Returns `true` if the token can appear at the start of a generic bound.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lit","","Returns `true` if the token is any literal",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ident","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_ident","","Returns `true` if the token is an identifier.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_doc_comment","","Returns `true` if the token is a documentation comment.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_interpolated","","Returns `true` if the token is interpolated.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path","","Returns `true` if the token is an interpolated path.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_qpath_start","","",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path_start","","",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",158,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_path_segment_keyword","","",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_special_ident","","",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_used_keyword","","Returns `true` if the token is a keyword used in the language.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unused_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"glue","","",158,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"option"}}],[11,"is_reserved_ident","","Returns `true` if the token is either a special identifier or a keyword.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"interpolated_to_tokenstream","","",158,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"span"}],"output":{"name":"tokenstream"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"nonterminal"}}],[11,"encode","","",159,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",159,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"hash","","",159,null],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"lazytokenstream"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"force","","",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokenstream"}}],[11,"encode","","",160,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",160,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",160,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"attr","syntax::parse","",null,null],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",139,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_path_and_tokens","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should be preceded by an exclamation mark, but we accept and warn about one terminated by a semicolon. matches inner_attrs*",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_meta_item","","Per RFC#1559, matches the following grammar:",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_meta_item_kind","","",139,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"common","syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntax::parse::common","`SeqSep` : a sequence separator (token) and whether a trailing separator is allowed.",null,null],[12,"sep","","",161,null],[12,"trailing_sep_allowed","","",161,null],[11,"trailing_allowed","","",161,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",161,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntax::parse::classify","Does this expression require a semicolon to be treated as a statement? The negation of this: 'can this expression be used as a statement without a semicolon' -- is used as an early-bail-out in the parser so that, for instance,     if true {...} else {...}      |x| 5 isn't parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it. note that in one case (`stmt_semi`), we've already seen the semicolon, and thus don't need another.",null,{"inputs":[{"name":"stmtkind"}],"output":{"name":"bool"}}],[0,"obsolete","syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of these syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",162,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[10,"report","","",162,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"obsoletesyntax"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"hash","","",163,null],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[11,"report","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[6,"PResult","syntax::parse","",null,null],[11,"new","","",136,{"inputs":[{"name":"filepathmapping"}],"output":{"name":"self"}}],[11,"with_span_handler","","",136,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",136,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"directory"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"directoryownership"}}],[0,"ptr","syntax","The AST pointer",null,null],[3,"P","syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P<T>` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"hash","","",164,null],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",164,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"lt","","",164,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"le","","",164,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"gt","","",164,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ge","","",164,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"cmp","","",164,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"ordering"}}],[11,"and_then","","Move out of the pointer. Intended for chaining transformations not covered by `map`.",164,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"unwrap","","Equivalent to and_then(|x| x)",164,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",164,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",164,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",164,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",164,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",164,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",164,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",164,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","Creates an empty `P<[T]>`.",164,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"from","","",164,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",164,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",164,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",164,null],[11,"encode","","",164,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",164,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash_stable","","",164,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[0,"show_span","syntax","Span debugger",null,null],[5,"run","syntax::show_span","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntax","",null,null],[5,"injected_crate_name","syntax::std_inject","",null,{"inputs":[{"name":"crate"}],"output":{"name":"option"}}],[5,"maybe_inject_crates_ref","","",null,{"inputs":[{"name":"crate"},{"name":"option"}],"output":{"name":"crate"}}],[0,"str","syntax","",null,null],[5,"char_at","syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[0,"test","syntax","",null,null],[5,"modify_for_testing","syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"resolver"},{"name":"bool"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"tokenstream","syntax","Token Streams",null,null],[3,"Delimited","syntax::tokenstream","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",165,null],[12,"tts","","The delimited sequence of token trees",165,null],[3,"TokenStream","","Token Streams",null,null],[3,"TokenStreamBuilder","","",null,null],[3,"Cursor","","",null,null],[3,"ThinTokenStream","","The `TokenStream` type is large enough to represent a single `TokenTree` without allocation. `ThinTokenStream` is smaller, but needs to allocate to represent a single `TokenTree`. We must use `ThinTokenStream` in `TokenTree::Delimited` to avoid infinite size due to recursion.",null,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",166,null],[13,"Delimited","","A delimited sequence of token trees",166,null],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"encode","","",165,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",165,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_token","","Returns the opening delimiter as a token.",165,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"close_token","","Returns the closing delimiter as a token.",165,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"open_tt","","Returns the opening delimiter as a token tree.",165,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"close_tt","","Returns the closing delimiter as a token tree.",165,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"stream","","Returns the token trees inside the delimiters.",165,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"encode","","",166,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",166,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",166,null],[11,"parse","","Use this token tree as a matcher to parse given tts.",166,null],[11,"eq_unspanned","","Check if this TokenTree is equal to the other, regardless of span information.",166,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"span","","Retrieve the TokenTree's span.",166,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Modify the `TokenTree`'s span inplace.",166,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"eq_token","","Indicates if the stream is a token that is equal to the provided token.",166,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"joint","","",166,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",167,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from","","",167,{"inputs":[{"name":"token"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",167,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"len","","",167,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"empty","","",167,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"concat","","",167,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"trees","","",167,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"into_trees","","",167,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"eq_unspanned","","Compares two TokenStreams, checking equality without regarding span information.",167,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"as_tree","","Precondition: `self` consists of a single token tree. Returns true if the token tree is a joint operation w.r.t. `proc_macro::TokenNode`.",167,null],[11,"map_enumerated","","",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokenstream"}}],[11,"map","","",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokenstream"}}],[11,"new","","",168,{"inputs":[],"output":{"name":"tokenstreambuilder"}}],[11,"push","","",168,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add","","",168,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",168,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_as_stream","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert","","",169,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"original_stream","","",169,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"look_ahead","","",169,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"thintokenstream"}}],[11,"from","","",170,{"inputs":[{"name":"tokenstream"}],"output":{"name":"thintokenstream"}}],[11,"from","","",167,{"inputs":[{"name":"thintokenstream"}],"output":{"name":"tokenstream"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"thintokenstream"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",167,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",167,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",167,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"encode","","",170,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",170,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",170,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"visit","syntax","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[4,"FnKind","syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",171,null],[13,"Method","","fn foo(&self)",171,null],[13,"Closure","","|x, y| body",171,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_sp_ident","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_global_asm","","",null,{"inputs":[{"name":"v"},{"name":"globalasm"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",172,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_ident","","",172,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",172,null],[11,"visit_foreign_item","","",172,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_global_asm","","",172,{"inputs":[{"name":"self"},{"name":"globalasm"}],"output":null}],[11,"visit_item","","",172,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",172,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",172,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",172,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",172,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",172,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",172,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_post","","",172,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",172,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",172,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_where_predicate","","",172,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[11,"visit_fn","","",172,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",172,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",172,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",172,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",172,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",172,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",172,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",172,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",172,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",172,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",172,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",172,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",172,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_mac_def","","",172,{"inputs":[{"name":"self"},{"name":"macrodef"},{"name":"nodeid"}],"output":null}],[11,"visit_path","","",172,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",172,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_segment","","",172,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",172,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",172,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",172,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_vis","","",172,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_fn_ret_ty","","",172,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[0,"print","syntax","",null,null],[0,"pp","syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton's Mesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","",null,null],[4,"Breaks","","How to break. Described in more detail in the module docs.",null,null],[13,"Consistent","","",173,null],[13,"Inconsistent","","",173,null],[4,"Token","","",null,null],[13,"String","","",174,null],[13,"Break","","",174,null],[13,"Begin","","",174,null],[13,"End","","",174,null],[13,"Eof","","",174,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",175,null],[13,"Broken","","",175,null],[5,"mk_printer","","",null,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"breaks"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"breaktoken"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"begintoken"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"is_eof","","",174,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hardbreak_tok","","",174,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"printstackbreak"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"last_token","","",179,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"replace_last_token","","be very careful with this!",179,{"inputs":[{"name":"self"},{"name":"token"}],"output":null}],[11,"pretty_print","","",179,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_stream","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"scan_push","","",179,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"scan_pop","","",179,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_top","","",179,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_pop_bottom","","",179,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_right","","",179,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_left","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"check_stack","","",179,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"print_newline","","",179,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"indent","","",179,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"get_top","","",179,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"print_str","","",179,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"print","","",179,{"inputs":[{"name":"self"},{"name":"token"},{"name":"isize"}],"output":{"name":"result"}}],[11,"rbox","","\"raw box\"",179,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[11,"ibox","","Inconsistent breaking box",179,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cbox","","Consistent breaking box",179,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"break_offset","","",179,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"end","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eof","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"word","","",179,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"huge_word","","",179,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"zero_word","","",179,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"zerobreak","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"space","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"hardbreak","","",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"hardbreak_tok_offset","","",179,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[11,"hardbreak_tok","","",179,{"inputs":[],"output":{"name":"token"}}],[0,"pprust","syntax::print","",null,null],[3,"NoAnn","syntax::print::pprust","",null,null],[3,"State","","",null,null],[12,"s","","",180,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",181,null],[13,"NodeName","","",181,null],[13,"NodeBlock","","",181,null],[13,"NodeItem","","",181,null],[13,"NodeSubItem","","",181,null],[13,"NodeExpr","","",181,null],[13,"NodePat","","",181,null],[5,"print_crate","","Requires you to pass an input filename and reader so that it can scan the input text for comments and literals to copy forward.",null,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"tokens_to_string","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"string"}}],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"path_segment_to_string","","",null,{"inputs":[{"name":"pathsegment"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"vis_to_string","","",null,{"inputs":[{"name":"visibility"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_list_item_to_string","","",null,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"INDENT_UNIT","","",null,null],[17,"DEFAULT_COLUMNS","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",182,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",182,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[8,"PrintState","","",null,null],[10,"writer","","",183,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[10,"boxes","","",183,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"comments","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"cur_cmnt","","",183,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"cur_lit","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"bump_lit","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"word_space","","",183,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"popen","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pclose","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_begin","","",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_end","","",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bol","","",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hardbreak_if_not_bol","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"rbox","","",183,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[11,"ibox","","",183,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"end","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"commasep","","",183,null],[11,"next_lit","","",183,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"maybe_print_comment","","",183,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"print_comment","","",183,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"result"}}],[11,"next_comment","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_literal","","",183,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"result"}}],[11,"print_string","","",183,{"inputs":[{"name":"self"},{"name":"str"},{"name":"strstyle"}],"output":{"name":"result"}}],[11,"print_inner_attributes","","",183,null],[11,"print_inner_attributes_no_trailing_hardbreak","","",183,null],[11,"print_outer_attributes","","",183,null],[11,"print_inner_attributes_inline","","",183,null],[11,"print_outer_attributes_inline","","",183,null],[11,"print_either_attributes","","",183,null],[11,"print_attribute","","",183,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"result"}}],[11,"print_attribute_inline","","",183,{"inputs":[{"name":"self"},{"name":"attribute"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_meta_list_item","","",183,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"result"}}],[11,"print_meta_item","","",183,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be meaning-preserving. A quick hack that might help would be to look at the spans embedded in the TTs to decide where to put spaces and newlines. But it'd be better to parse these according to the grammar of the appropriate macro, transcribe back into the grammar we just parsed from, and then pretty-print the resulting AST nodes (so, e.g., we print expression arguments as expressions). It can be done! I think.",183,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"result"}}],[11,"print_tts","","",183,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"result"}}],[11,"space_if_not_bol","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"nbsp","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"noann"}}],[11,"new_from_input","","",180,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",180,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",180,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[11,"boxes","","",180,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"comments","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cur_cmnt","","",180,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cur_lit","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bump_lit","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cbox","","",180,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"word_nbsp","","",180,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",180,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bclose_","","",180,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",180,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",180,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"break_offset_if_not_bol","","",180,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",180,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",180,null],[11,"commasep_exprs","","",180,null],[11,"print_mod","","",180,null],[11,"print_foreign_mod","","",180,null],[11,"print_opt_lifetime","","",180,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",180,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",180,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",180,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_enum_def","","",180,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",180,null],[11,"print_visibility","","",180,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_defaultness","","",180,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"result"}}],[11,"print_struct","","",180,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_variant","","",180,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"print_method_sig","","",180,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"methodsig"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_trait_item","","",180,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",180,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",180,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"result"}}],[11,"print_block","","",180,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",180,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_with_attrs","","",180,null],[11,"print_block_unclosed_indent","","",180,{"inputs":[{"name":"self"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",180,null],[11,"print_block_maybe_unclosed","","",180,null],[11,"print_if","","",180,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",180,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_mac","","",180,{"inputs":[{"name":"self"},{"name":"mac"},{"name":"delimtoken"}],"output":{"name":"result"}}],[11,"print_expr_maybe_paren","","",180,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"i8"}],"output":{"name":"result"}}],[11,"print_expr_as_cond","","Print an expr using syntax that's acceptable in a condition position, such as the `cond` in `if cond { ... }`.",180,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",180,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",180,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_ident","","",180,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"result"}}],[11,"print_usize","","",180,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",180,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",180,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_pat","","",180,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",180,{"inputs":[{"name":"self"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"option"},{"name":"generics"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_fn_args_and_ret","","",180,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_fn_block_args","","",180,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_capture_clause","","",180,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"result"}}],[11,"print_bounds","","",180,null],[11,"print_lifetime","","",180,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_bounds","","",180,null],[11,"print_generics","","",180,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",180,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",180,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_view_path","","",180,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"result"}}],[11,"print_mutability","","",180,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",180,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_arg","","",180,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_fn_output","","",180,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",180,{"inputs":[{"name":"self"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",180,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",180,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",180,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",180,{"inputs":[{"name":"self"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",180,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"result"}}],[0,"ext","syntax","",null,null],[0,"hygiene","syntax::ext","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntax::ext::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",185,null],[12,"prev_ctxt","","",185,null],[12,"modern","","",185,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[5,"clear_markings","","",null,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",118,null],[12,"callee","","Information about the expansion.",118,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",119,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",119,null],[12,"allow_internal_unsafe","","Whether the macro is allowed to use `unsafe` internally even if the user crate has `#![forbid(unsafe_code)]`.",119,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",119,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",117,null],[13,"MacroBang","","e.g. `format!()`",117,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",117,null],[4,"CompilerDesugaringKind","","The kind of compiler desugaring.",null,null],[13,"BackArrow","","",186,null],[13,"DotFill","","",186,null],[13,"QuestionMark","","",186,null],[0,"base","syntax::ext","",null,null],[3,"MacEager","syntax::ext::base","`MacResult` implementation for the common case where you've already built each form of AST that you might return.",null,null],[12,"expr","","",187,null],[12,"pat","","",187,null],[12,"items","","",187,null],[12,"impl_items","","",187,null],[12,"trait_items","","",187,null],[12,"stmts","","",187,null],[12,"ty","","",187,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue after hitting errors.",null,null],[3,"DummyResolver","","",null,null],[3,"ModuleData","","",null,null],[12,"mod_path","","",188,null],[12,"directory","","",188,null],[3,"ExpansionData","","",null,null],[12,"mark","","",189,null],[12,"depth","","",189,null],[12,"module","","",189,null],[12,"directory_ownership","","",189,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go; when a macro expansion occurs, the resulting nodes have the `backtrace() -> expn_info` of their expansion context stored into their span.",null,null],[12,"parse_sess","","",190,null],[12,"ecfg","","",190,null],[12,"crate_root","","",190,null],[12,"resolver","","",190,null],[12,"resolve_err_count","","",190,null],[12,"current_expansion","","",190,null],[12,"expansions","","",190,null],[4,"Annotatable","","",null,null],[13,"Item","","",191,null],[13,"TraitItem","","",191,null],[13,"ImplItem","","",191,null],[4,"MacroKind","","Represents different kinds of macro invocations that can be resolved.",null,null],[13,"Bang","","A bang macro - foo!()",192,null],[13,"Attr","","An attribute macro - #[foo]",192,null],[13,"Derive","","A derive attribute macro - #[derive(Foo)]",192,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items based upon it.",193,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it in-place. Also allows decoration, i.e., creating new items.",193,null],[13,"ProcMacro","","A function-like procedural macro. TokenStream -> TokenStream.",193,null],[13,"AttrProcMacro","","An attribute-like procedural macro. TokenStream, TokenStream -> TokenStream. The first TokenSteam is the attribute, the second is the annotated item. Allows modification of the input items and adding new items, similar to MultiModifier, but uses TokenStreams, rather than AST nodes.",193,null],[13,"NormalTT","","A normal, function-like syntax extension.",193,null],[12,"expander","syntax::ext::base::SyntaxExtension","",193,null],[12,"def_info","","",193,null],[12,"allow_internal_unstable","","Whether the contents of the macro can directly use `#[unstable]` things (true == yes).",193,null],[12,"allow_internal_unsafe","","Whether the contents of the macro can use `unsafe` without triggering the `unsafe_code` lint.",193,null],[13,"IdentTT","syntax::ext::base","A function-like syntax extension that has an extra ident before the block.",193,null],[13,"ProcMacroDerive","","An attribute-like procedural macro. TokenStream -> TokenStream. The input is the annotated item. Allows generating code to implement a Trait for a given struct or enum item.",193,null],[13,"BuiltinDerive","","An attribute-like procedural macro that derives a builtin trait.",193,null],[13,"DeclMacro","","A declarative macro, e.g. `macro m() {}`.",193,null],[4,"Determinacy","","",null,null],[13,"Determined","","",194,null],[13,"Undetermined","","",194,null],[5,"expr_to_spanned_string","","Extract a string literal from the macro expanded version of `expr`, emitting `err_msg` if `expr` is not a string literal. This does not stop compilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function returns even when `tts` is non-empty, macros that need to stop compilation should call `cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be done as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this is not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a parsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"BuiltinDeriveFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",195,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[8,"MultiItemModifier","","",null,null],[10,"expand","","",196,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"name":"vec"}}],[8,"ProcMacro","","",null,null],[10,"expand","","",197,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[8,"AttrProcMacro","","",null,null],[10,"expand","","",198,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",199,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"box"}}],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",200,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"box"}}],[8,"MacResult","","The result of a macro expansion. The return values of the various methods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","Create zero or more items.",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","Create zero or more trait items.",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","Create a pattern.",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[8,"Resolver","","",null,null],[10,"next_node_id","","",202,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"get_module_scope","","",202,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[10,"eliminate_crate_var","","",202,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"is_whitelisted_legacy_custom_derive","","",202,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[10,"visit_expansion","","",202,null],[10,"add_builtin","","",202,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"rc"}],"output":null}],[10,"resolve_imports","","",202,{"inputs":[{"name":"self"}],"output":null}],[10,"find_legacy_attr_invoc","","",202,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[10,"resolve_invoc","","",202,{"inputs":[{"name":"self"},{"name":"invocation"},{"name":"mark"},{"name":"bool"}],"output":{"name":"result"}}],[10,"resolve_macro","","",202,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"macrokind"},{"name":"bool"}],"output":{"name":"result"}}],[10,"check_unused_macros","","",202,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"annotatable"}}],[11,"attrs","","",191,null],[11,"map_attrs","","",191,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",191,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"expect_item","","",191,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"map_item_or","","",191,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"annotatable"}}],[11,"expect_trait_item","","",191,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"expect_impl_item","","",191,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"into","","",191,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","",187,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",187,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",187,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",187,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",187,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"trait_items","","",187,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",187,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",187,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",187,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",187,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",187,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",187,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",187,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",187,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",187,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"dummyresult"}}],[11,"any","","Create a default MacResult that can be anything.",203,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",203,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",203,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",203,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",203,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",203,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",203,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",203,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",203,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",203,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",203,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",203,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"macrokind"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"macrokind"}],"output":{"name":"bool"}}],[11,"encode","","",192,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",192,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","Return which kind of macro calls this syntax extension.",193,{"inputs":[{"name":"self"}],"output":{"name":"macrokind"}}],[11,"is_modern","","",193,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"determinacy"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"determinacy"}],"output":{"name":"bool"}}],[11,"next_node_id","","",204,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"get_module_scope","","",204,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[11,"eliminate_crate_var","","",204,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"is_whitelisted_legacy_custom_derive","","",204,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"visit_expansion","","",204,null],[11,"add_builtin","","",204,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"rc"}],"output":null}],[11,"resolve_imports","","",204,{"inputs":[{"name":"self"}],"output":null}],[11,"find_legacy_attr_invoc","","",204,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"resolve_invoc","","",204,{"inputs":[{"name":"self"},{"name":"invocation"},{"name":"mark"},{"name":"bool"}],"output":{"name":"result"}}],[11,"resolve_macro","","",204,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"macrokind"},{"name":"bool"}],"output":{"name":"result"}}],[11,"check_unused_macros","","",204,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"moduledata"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"expansiondata"}}],[11,"new","","",190,{"inputs":[{"name":"parsesess"},{"name":"expansionconfig"},{"name":"resolver"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",190,{"inputs":[{"name":"self"}],"output":{"name":"macroexpander"}}],[11,"monotonic_expander","","Returns a `Folder` that deeply expands all macros and assigns all node ids in an AST node. Once node ids are assigned, the node may not be expanded, removed, or otherwise modified.",190,{"inputs":[{"name":"self"}],"output":{"name":"macroexpander"}}],[11,"new_parser_from_tts","","",190,null],[11,"codemap","","",190,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"parse_sess","","",190,{"inputs":[{"name":"self"}],"output":{"name":"parsesess"}}],[11,"cfg","","",190,{"inputs":[{"name":"self"}],"output":{"name":"crateconfig"}}],[11,"call_site","","",190,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"backtrace","","",190,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"struct_span_warn","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",190,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping compilation.",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"mut_span_err","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_warn","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",190,null],[11,"span_bug","","",190,null],[11,"trace_macros_diag","","",190,{"inputs":[{"name":"self"}],"output":null}],[11,"bug","","",190,null],[11,"trace_macros","","",190,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_trace_macros","","",190,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ident_of","","",190,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ident"}}],[11,"std_path","","",190,null],[11,"name_of","","",190,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"name"}}],[11,"check_unused_macros","","",190,{"inputs":[{"name":"self"}],"output":null}],[0,"build","syntax::ext","",null,null],[8,"AstBuilder","syntax::ext::build","",null,null],[10,"path","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_ident","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[10,"path_global","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_all","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[10,"qpath","","",205,null],[10,"qpath_all","","",205,null],[10,"ty_mt","","",205,{"inputs":[{"name":"self"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[10,"ty","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"name":"p"}}],[10,"ty_path","","",205,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[10,"ty_ident","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"ty_rptr","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_ptr","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_option","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"ty_infer","","",205,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"typaram","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"typarambounds"},{"name":"option"}],"output":{"name":"typaram"}}],[10,"trait_ref","","",205,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[10,"poly_trait_ref","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[10,"typarambound","","",205,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[10,"lifetime","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"lifetime"}}],[10,"lifetime_def","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[10,"stmt_expr","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_semi","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let_typed","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let_type_only","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_item","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"block","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"block_expr","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"name":"p"}}],[10,"expr_path","","",205,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_qpath","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_ident","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_self","","",205,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_binary","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_deref","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_unary","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_addr_of","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_mut_addr_of","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_field_access","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_tup_field_access","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_call","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_ident","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_global","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_method_call","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_block","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_cast","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"field_imm","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[10,"expr_struct","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_struct_ident","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_lit","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"name":"p"}}],[10,"expr_usize","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_isize","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[10,"expr_u8","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[10,"expr_u32","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[10,"expr_bool","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[10,"expr_vec","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_vec_ng","","",205,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_vec_slice","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_str","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[10,"expr_some","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_none","","",205,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_break","","",205,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_tuple","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_fail","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[10,"expr_unreachable","","",205,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_ok","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_err","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_try","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"name":"p"}}],[10,"pat_wild","","",205,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_lit","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_ident","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"pat_ident_binding_mode","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[10,"pat_path","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"p"}}],[10,"pat_tuple_struct","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_struct","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_tuple","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_some","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_none","","",205,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_ok","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_err","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"arm","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[10,"arm_unreachable","","",205,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[10,"expr_match","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_if","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[10,"expr_loop","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda_fn_decl","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"span"}],"output":{"name":"p"}}],[10,"lambda","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda0","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda1","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"lambda_stmts","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_0","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_1","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[10,"item","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"itemkind"}],"output":{"name":"p"}}],[10,"arg","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[10,"fn_decl","","",205,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn_poly","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"variant","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[10,"item_enum_poly","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_enum","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[10,"item_struct_poly","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_struct","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[10,"item_mod","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"item_extern_crate","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"item_static","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_const","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_ty_poly","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_ty","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[10,"attribute","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[10,"meta_word","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[10,"meta_list_item_word","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[10,"meta_list","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[10,"meta_name_value","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"litkind"}],"output":{"name":"metaitem"}}],[10,"item_use","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_use_simple","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_simple_","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_list","","",205,null],[10,"item_use_glob","","",205,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[11,"path","syntax::ext::base","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_ident","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"path_global","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_all","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[11,"qpath","","Constructs a qualified path.",190,null],[11,"qpath_all","","Constructs a qualified path.",190,null],[11,"ty_mt","","",190,{"inputs":[{"name":"self"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[11,"ty","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"name":"p"}}],[11,"ty_path","","",190,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[11,"ty_ident","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"ty_rptr","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_ptr","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_option","","",190,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"ty_infer","","",190,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"typaram","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"typarambounds"},{"name":"option"}],"output":{"name":"typaram"}}],[11,"trait_ref","","",190,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[11,"poly_trait_ref","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[11,"typarambound","","",190,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[11,"lifetime","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"lifetime"}}],[11,"lifetime_def","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[11,"stmt_expr","","",190,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_semi","","",190,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let_typed","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let_type_only","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_item","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"block_expr","","",190,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"block","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"name":"p"}}],[11,"expr_path","","",190,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_qpath","","Constructs a QPath expression.",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_ident","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_self","","",190,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_binary","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_deref","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_unary","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_field_access","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_tup_field_access","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_addr_of","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_mut_addr_of","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_call","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_ident","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_global","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_method_call","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_block","","",190,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"field_imm","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[11,"expr_struct","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_struct_ident","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_lit","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"name":"p"}}],[11,"expr_usize","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_isize","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[11,"expr_u32","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[11,"expr_u8","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[11,"expr_bool","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[11,"expr_vec","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_vec_ng","","",190,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_vec_slice","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_str","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[11,"expr_cast","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_some","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_none","","",190,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_break","","",190,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_tuple","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_fail","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[11,"expr_unreachable","","",190,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_ok","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_err","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_try","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"name":"p"}}],[11,"pat_wild","","",190,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_lit","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_ident","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"pat_ident_binding_mode","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[11,"pat_path","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"p"}}],[11,"pat_tuple_struct","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_struct","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_tuple","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_some","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_none","","",190,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_ok","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_err","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"arm","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[11,"arm_unreachable","","",190,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[11,"expr_match","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_if","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr_loop","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_fn_decl","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"span"}],"output":{"name":"p"}}],[11,"lambda","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda0","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda1","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_stmts","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_0","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_1","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[11,"arg","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[11,"fn_decl","","",190,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"item","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"itemkind"}],"output":{"name":"p"}}],[11,"item_fn_poly","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_fn","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"variant","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[11,"item_enum_poly","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_enum","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[11,"item_struct","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[11,"item_struct_poly","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_mod","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"item_extern_crate","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"item_static","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_const","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_ty_poly","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_ty","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"attribute","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[11,"meta_word","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[11,"meta_list_item_word","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[11,"meta_list","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[11,"meta_name_value","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"litkind"}],"output":{"name":"metaitem"}}],[11,"item_use","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_use_simple","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_simple_","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_list","","",190,null],[11,"item_use_glob","","",190,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[0,"derive","syntax::ext","",null,null],[5,"collect_derives","syntax::ext::derive","",null,{"inputs":[{"name":"extctxt"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"add_derived_markers","","",null,null],[0,"expand","syntax::ext","",null,null],[3,"Invocation","syntax::ext::expand","",null,null],[12,"kind","","",206,null],[12,"expansion_data","","",206,null],[3,"MacroExpander","","",null,null],[12,"cx","","",207,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",208,null],[12,"features","","",208,null],[12,"recursion_limit","","",208,null],[12,"trace_mac","","",208,null],[12,"should_test","","",208,null],[12,"single_step","","",208,null],[12,"keep_macs","","",208,null],[3,"Marker","","",null,null],[12,"0","","",209,null],[4,"ExpansionKind","","",null,null],[13,"OptExpr","","",210,null],[13,"Expr","","",210,null],[13,"Pat","","",210,null],[13,"Ty","","",210,null],[13,"Stmts","","",210,null],[13,"Items","","",210,null],[13,"TraitItems","","",210,null],[13,"ImplItems","","",210,null],[4,"Expansion","","",null,null],[13,"OptExpr","","",211,null],[13,"Expr","","",211,null],[13,"Pat","","",211,null],[13,"Ty","","",211,null],[13,"Stmts","","",211,null],[13,"Items","","",211,null],[13,"TraitItems","","",211,null],[13,"ImplItems","","",211,null],[4,"InvocationKind","","",null,null],[13,"Bang","","",212,null],[12,"mac","syntax::ext::expand::InvocationKind","",212,null],[12,"ident","","",212,null],[12,"span","","",212,null],[13,"Attr","syntax::ext::expand","",212,null],[12,"attr","syntax::ext::expand::InvocationKind","",212,null],[12,"traits","","",212,null],[12,"item","","",212,null],[13,"Derive","syntax::ext::expand","",212,null],[12,"path","syntax::ext::expand::InvocationKind","",212,null],[12,"item","","",212,null],[5,"find_attr_invoc","syntax::ext::expand","",null,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"expansionkind"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"expansionkind"}],"output":{"name":"bool"}}],[11,"name","","",210,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"make_opt_expr","","",211,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"make_expr","","",211,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"make_pat","","",211,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"make_ty","","",211,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"make_stmts","","",211,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"make_items","","",211,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"make_trait_items","","",211,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"make_impl_items","","",211,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"fold_with","","",211,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"visit_with","","",211,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"fold_opt_expr","","",207,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_expr","","",207,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_pat","","",207,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty","","",207,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_stmt","","",207,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_item","","",207,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",207,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",207,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"new","","",207,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"expand_crate","","",207,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"parse_expansion","syntax::parse::parser","",139,{"inputs":[{"name":"self"},{"name":"expansionkind"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"ensure_complete_parse","","",139,{"inputs":[{"name":"self"},{"name":"path"},{"name":"str"},{"name":"span"}],"output":null}],[11,"default","syntax::ext::expand","",208,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_asm","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_global_asm","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_log_syntax","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_concat_idents","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_trace_macros","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_allow_internal_unstable","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_custom_derive","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"proc_macro_enabled","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fold_ident","","",209,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"new_span","","",209,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"fold_mac","","",209,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"placeholders","syntax::ext","",null,null],[3,"PlaceholderExpander","syntax::ext::placeholders","",null,null],[5,"placeholder","","",null,{"inputs":[{"name":"expansionkind"},{"name":"nodeid"}],"output":{"name":"expansion"}}],[11,"new","","",213,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"add","","",213,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"expansion"},{"name":"vec"}],"output":null}],[11,"fold_item","","",213,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",213,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",213,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_expr","","",213,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",213,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_stmt","","",213,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_pat","","",213,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty","","",213,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_block","","",213,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mod","","",213,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_mac","","",213,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"quote","syntax::ext","",null,null],[5,"unflatten","syntax::ext::quote","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"parse_expr_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"metaitem"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathstyle"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[3,"BytePos","syntax::ext::quote::rt","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",214,null],[3,"Span","","A compressed span. Contains either fields of `SpanData` inline if they are small, or index into span interner. The primary goal of `Span` is to be as small as possible and fit into other structures (that's why it uses `packed` as well). Decoding speed is the second priority. See `SpanData` for the info on span fields in decoded representation.",null,null],[17,"DUMMY_SP","","Dummy span, both position and length are zero, syntax context is zero as well. This span is kept inline and encoded with format 0.",null,null],[8,"ToTokens","","",null,null],[10,"to_tokens","","",215,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",216,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_expr","","",216,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_stmt","","",216,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[10,"parse_tts","","",216,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::tokenstream","",166,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",120,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",164,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",42,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",164,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",41,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",164,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",164,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",33,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",164,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",27,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ext::quote::rt","",217,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntax::ext::base","",190,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",190,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[11,"parse_expr","","",190,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",190,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"vec"}}],[0,"source_util","syntax::ext","",null,null],[5,"expand_line","syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_column_gated","","",null,null],[5,"expand_file","","file!(): expands to the current filename */ The filemap (`loc.file`) contains a bunch more information we could spit out if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr This is generally a bad idea because it's going to behave unhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"tt","syntax::ext","",null,null],[0,"transcribe","syntax::ext::tt","",null,null],[5,"transcribe","syntax::ext::tt::transcribe","This can do Macro-By-Example transcription. On the other hand, if `src` contains no `TokenTree::{Sequence, MetaVar, MetaVarDecl}`s, `interp` can (and should) be None.",null,{"inputs":[{"name":"extctxt"},{"name":"option"},{"name":"vec"}],"output":{"name":"tokenstream"}}],[0,"macro_parser","syntax::ext::tt","This is an NFA-based parser, which calls out to the main rust parser for named nonterminals (which it commits to fully when it hits one in a grammar). There's a set of current NFA threads and a set of next ones. Instead of NTs, we have a special case for Kleene star. The big-O, in pathological cases, is worse than traditional use of NFA or Earley parsing, but it's an easier fit for Macro-by-Example-style rules.",null,null],[4,"NamedMatch","syntax::ext::tt::macro_parser","`NamedMatch` is a pattern-match result for a single `token::MATCH_NONTERMINAL`: so it is associated with a single ident in a parse, and all `MatchedNonterminal`s in the `NamedMatch` have the same nonterminal type (expr, item, etc). Each leaf in a single `NamedMatch` corresponds to a single `token::MATCH_NONTERMINAL` in the `TokenTree` that produced it.",null,null],[13,"MatchedSeq","","",218,null],[13,"MatchedNonterminal","","",218,null],[4,"ParseResult","","",null,null],[13,"Success","","",219,null],[13,"Failure","","Arm failed to match. If the second parameter is `token::Eof`, it indicates an unexpected end of macro invocation. Otherwise, it indicates that no rules expected the given token.",219,null],[13,"Error","","Fatal error (malformed macro?). Abort compilation.",219,null],[5,"count_names","","",null,null],[5,"parse_failure_msg","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"parse","","",null,null],[6,"NamedParseResult","","",null,null],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"namedmatch"}}],[0,"macro_rules","syntax::ext::tt","",null,null],[3,"ParserAnyMacro","syntax::ext::tt::macro_rules","",null,null],[5,"compile","","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"parsesess"},{"name":"refcell"},{"name":"item"}],"output":{"name":"syntaxextension"}}],[11,"make","","",220,{"inputs":[{"name":"box"},{"name":"expansionkind"}],"output":{"name":"expansion"}}],[0,"quoted","syntax::ext::tt","",null,null],[3,"Delimited","syntax::ext::tt::quoted","",null,null],[12,"delim","","",221,null],[12,"tts","","",221,null],[3,"SequenceRepetition","","",null,null],[12,"tts","","The sequence of token trees",222,null],[12,"separator","","The optional separator",222,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",222,null],[12,"num_captures","","The number of `Match`s that appear in the sequence (and subsequences)",222,null],[4,"KleeneOp","","A Kleene-style repetition operator for token sequences.",null,null],[13,"ZeroOrMore","","",223,null],[13,"OneOrMore","","",223,null],[4,"TokenTree","","Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, and `$(...)` are \"first-class\" token trees.",null,null],[13,"Token","","",224,null],[13,"Delimited","","",224,null],[13,"Sequence","","A kleene-style repetition sequence",224,null],[13,"MetaVar","","E.g. `$var`",224,null],[13,"MetaVarDecl","","E.g. `$var:expr`. This is only used in the left hand side of MBE macros.",224,null],[5,"parse","","",null,{"inputs":[{"name":"tokenstream"},{"name":"bool"},{"name":"parsesess"}],"output":{"name":"vec"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"encode","","",221,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",221,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",221,null],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_token","","",221,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"close_token","","",221,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"open_tt","","",221,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"close_tt","","",221,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"sequencerepetition"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"encode","","",222,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",222,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",222,null],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"kleeneop"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"encode","","",223,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",223,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",223,null],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"encode","","",224,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",224,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",224,null],[11,"len","","",224,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",224,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_tt","","",224,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"span","","Retrieve the `TokenTree`'s span.",224,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[17,"DIAGNOSTICS","syntax","",null,null],[14,"panictry","","",null,null],[14,"unwrap_or","","",null,null],[14,"register_diagnostic","","",null,null],[14,"span_fatal","","",null,null],[14,"span_err","","",null,null],[14,"span_warn","","",null,null],[14,"struct_err","","",null,null],[14,"span_err_or_warn","","",null,null],[14,"struct_span_fatal","","",null,null],[14,"struct_span_err","","",null,null],[14,"type_error_struct","","",null,null],[14,"struct_span_warn","","",null,null],[14,"struct_span_err_or_warn","","",null,null],[14,"span_note","","",null,null],[14,"span_help","","",null,null],[14,"help","","",null,null],[14,"register_diagnostics","","",null,null],[14,"register_long_diagnostics","","",null,null],[14,"walk_list","","",null,null],[11,"with_empty_ctxt","syntax::ast","",0,{"inputs":[{"name":"symbol"}],"output":{"name":"ident"}}],[11,"from_str","","Maps a string to an identifier with an empty syntax context.",0,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[11,"modern","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"as_ref","syntax::symbol","",225,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"add","syntax::ext::quote::rt","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"eq","syntax::ast","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"eq","syntax::ext::hygiene","",227,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"eq","syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"eq","syntax::ext::quote::rt","",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"eq","syntax::ext::hygiene","",186,{"inputs":[{"name":"self"},{"name":"compilerdesugaringkind"}],"output":{"name":"bool"}}],[11,"eq","syntax::symbol::keywords","",229,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eq","syntax::ext::hygiene","",230,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"eq","syntax::symbol","",225,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","syntax::ast","",226,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"from","","",226,{"inputs":[{"name":"str"}],"output":{"name":"symbol"}}],[11,"from_usize","syntax::ext::quote::rt","",214,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",214,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encode","","",214,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","syntax::symbol","",225,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","syntax::ext::hygiene","",227,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",230,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"encode","syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",226,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"hash","syntax::ext::hygiene","",227,null],[11,"hash","","",230,null],[11,"hash","syntax::ext::quote::rt","",228,null],[11,"hash","syntax::symbol","",225,null],[11,"hash","syntax::ast","",226,null],[11,"hash","syntax::ext::hygiene","",119,null],[11,"hash","","",117,null],[11,"hash","","",186,null],[11,"hash","","",118,null],[11,"hash","syntax::ext::quote::rt","",214,null],[11,"hash","syntax::ast","",0,null],[11,"default_encode","syntax::ext::quote::rt","",228,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"sub","","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"default","","",228,{"inputs":[],"output":{"name":"span"}}],[11,"default","syntax::ext::hygiene","",230,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"default","","",227,{"inputs":[],"output":{"name":"mark"}}],[11,"default","","",185,{"inputs":[],"output":{"name":"syntaxcontextdata"}}],[11,"default","syntax::symbol","",231,{"inputs":[],"output":{"name":"interner"}}],[11,"clone","syntax::ast","",0,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"clone","syntax::ext::quote::rt","",214,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"clone","syntax::ext::hygiene","",185,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"expnformat"}}],[11,"clone","syntax::ast","",226,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"clone","syntax::ext::hygiene","",230,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"clone","syntax::ext::quote::rt","",228,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","syntax::ext::hygiene","",119,{"inputs":[{"name":"self"}],"output":{"name":"nameandspan"}}],[11,"clone","syntax::symbol::keywords","",229,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"clone","syntax::ext::hygiene","",118,{"inputs":[{"name":"self"}],"output":{"name":"expninfo"}}],[11,"clone","syntax::symbol","",225,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"clone","syntax::ext::hygiene","",227,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"compilerdesugaringkind"}}],[11,"partial_cmp","","",230,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"option"}}],[11,"lt","","",230,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"le","","",230,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"gt","","",230,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ge","","",230,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"partial_cmp","syntax::symbol","",225,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"option"}}],[11,"lt","","",225,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",225,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",225,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",225,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","syntax::ext::quote::rt","",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"partial_cmp","","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"partial_cmp","syntax::ast","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"option"}}],[11,"lt","","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"le","","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"gt","","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ge","","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"fmt","syntax::ext::hygiene","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ext::quote::rt","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ext::hygiene","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ast","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ext::hygiene","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ext::quote::rt","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ext::hygiene","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ext::hygiene","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::symbol","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_decode","syntax::ext::quote::rt","",228,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","syntax::symbol","",225,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cmp","syntax::ext::hygiene","",230,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"ordering"}}],[11,"cmp","syntax::ext::quote::rt","",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"cmp","","",214,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"cmp","syntax::ast","",226,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"ordering"}}],[11,"cmp","syntax::symbol","",225,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"decode","syntax::ext::quote::rt","",214,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","syntax::ast","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",226,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","syntax::ext::hygiene","",230,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","syntax::symbol","",225,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","syntax::ext::hygiene","",227,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","syntax::ast","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::symbol","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ast","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","","",226,{"inputs":[{"name":"ident"}],"output":{"name":"symbol"}}],[11,"to_ident","","",226,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"intern","","Maps a string to its interned representation.",226,{"inputs":[{"name":"str"}],"output":{"name":"symbol"}}],[11,"interned","","",226,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"gensym","","gensym's a new usize, using the current interner.",226,{"inputs":[{"name":"str"}],"output":{"name":"symbol"}}],[11,"gensymed","","",226,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"as_str","","",226,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"as_u32","","",226,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","syntax::symbol","",231,{"inputs":[],"output":{"name":"interner"}}],[11,"intern","","",231,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"symbol"}}],[11,"interned","","",231,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"symbol"}}],[11,"get","","",231,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"str"}}],[11,"ident","syntax::symbol::keywords","",229,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"name","","",229,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"move_flat_map","syntax::ptr","",164,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntax::codemap","",120,null],[11,"map_attrs","","",120,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntax::ptr","",164,null],[11,"map_attrs","","",164,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"name","syntax::ext::hygiene","",119,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"empty","","",230,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"apply_mark","","Extend a syntax context with a given mark",230,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"syntaxcontext"}}],[11,"remove_mark","","",230,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"adjust","","Adjust this context for resolution in a scope created by the given expansion. For example, consider the following three resolutions of `f`: `rust mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty. m!(f); macro m($f:ident) { mod bar { pub fn f() {} // `f`'s `SyntaxContext` has a single `Mark` from `m`. pub fn $f() {} // `$f`'s `SyntaxContext` is empty. } foo::f(); // `f`'s `SyntaxContext` has a single `Mark` from `m` //^ Since `mod foo` is outside this expansion, `adjust` removes the mark from `f`, //| and it resolves to `::foo::f`. bar::f(); // `f`'s `SyntaxContext` has a single `Mark` from `m` //^ Since `mod bar` not outside this expansion, `adjust` does not change `f`, //| and it resolves to `::bar::f`. bar::$f(); // `f`'s `SyntaxContext` is empty. //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`, //| and it resolves to `::bar::$f`. }` This returns the expansion whose definition scope we use to privacy check the resolution, or `None` if we privacy check as usual (i.e. not w.r.t. a macro definition scope).",230,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"option"}}],[11,"glob_adjust","","Adjust this context for resolution in a scope created by the given expansion via a glob import with the given `SyntaxContext`. For example, `rust m!(f); macro m($i:ident) { mod foo { pub fn f() {} // `f`'s `SyntaxContext` has a single `Mark` from `m`. pub fn $i() {} // `$i`'s `SyntaxContext` is empty. } n(f); macro n($j:ident) { use foo::*; f(); // `f`'s `SyntaxContext` has a mark from `m` and a mark from `n` //^ `glob_adjust` removes the mark from `n`, so this resolves to `foo::f`. $i(); // `$i`'s `SyntaxContext` has a mark from `n` //^ `glob_adjust` removes the mark from `n`, so this resolves to `foo::$i`. $j(); // `$j`'s `SyntaxContext` has a mark from `m` //^ This cannot be glob-adjusted, so this is a resolution error. } }` This returns `None` if the context cannot be glob-adjusted. Otherwise, it returns the scope to use when privacy checking (see `adjust` for details).",230,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"name":"option"}}],[11,"reverse_glob_adjust","","Undo `glob_adjust` if possible: `rust if let Some(privacy_checking_scope) = self.reverse_glob_adjust(expansion, glob_ctxt) { assert!(self.glob_adjust(expansion, glob_ctxt) == Some(privacy_checking_scope)); }`",230,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"name":"option"}}],[11,"modern","","",230,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"outer","","",230,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"fresh","","",227,{"inputs":[{"name":"mark"}],"output":{"name":"mark"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",227,{"inputs":[],"output":{"name":"mark"}}],[11,"as_u32","","",227,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",227,{"inputs":[{"name":"u32"}],"output":{"name":"mark"}}],[11,"expn_info","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_expn_info","","",227,null],[11,"modern","","",227,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"is_modern","","",227,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_modern","","",227,null],[11,"is_descendant_of","","",227,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"as_symbol","","",186,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"make_expr","syntax::ext::tt::macro_rules","",220,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",220,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",220,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",220,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",220,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",220,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",220,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"new","syntax::ext::quote::rt","",228,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"syntaxcontext"}],"output":{"name":"span"}}],[11,"data","","",228,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[11,"lo","","",228,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"with_lo","","",228,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"hi","","",228,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"with_hi","","",228,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"ctxt","","",228,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"with_ctxt","","",228,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"span"}}],[11,"end_point","","Returns a new span representing just the end-point of this span",228,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"next_point","","Returns a new span representing the next character after the end-point of this span",228,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","Return true if `self` fully encloses `other`.",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",228,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_callee","","Return the source callee.",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",228,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_compiler_desugaring","","Check if this span arises from a compiler desugaring of kind `kind`.",228,{"inputs":[{"name":"self"},{"name":"compilerdesugaringkind"}],"output":{"name":"bool"}}],[11,"compiler_desugaring_kind","","Return the compiler desugaring that created this span, or None if this span is not from a desugaring.",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"allows_unsafe","","Check if a span is \"internal\" to a macro in which `unsafe` can be used without triggering the `unsafe_code` lint",228,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"macro_backtrace","","",228,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to","","Return a `Span` that would enclose both `self` and `end`.",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"between","","Return a `Span` between the end of `self` to the beginning of `end`.",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"until","","Return a `Span` between the beginning of `self` to the beginning of `end`.",228,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}]],"paths":[[3,"Ident"],[3,"ErrorInfo"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[8,"MoveMap"],[6,"SmallVector"],[3,"ThinVec"],[3,"RcSlice"],[3,"JsonEmitter"],[4,"Abi"],[3,"AbiData"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MetaItem"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Stmt"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Mac_"],[3,"MacroDef"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"GlobalAsm"],[3,"EnumDef"],[3,"Variant_"],[3,"PathListItem_"],[3,"AttrId"],[3,"Attribute"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"Item"],[3,"ForeignItem"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"NestedMetaItemKind"],[4,"MetaItemKind"],[4,"BindingMode"],[4,"RangeEnd"],[4,"RangeSyntax"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[4,"StmtKind"],[4,"MacStmtStyle"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"RangeLimits"],[4,"ExprKind"],[4,"CaptureBy"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"TyKind"],[4,"TraitObjectSyntax"],[4,"AsmDialect"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"VariantData"],[4,"ItemKind"],[4,"ForeignItemKind"],[3,"NodeId"],[3,"Stability"],[3,"RustcDeprecation"],[3,"RustcConstUnstable"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"HasAttrs"],[6,"NestedMetaItem"],[4,"ExpnFormat"],[3,"ExpnInfo"],[3,"NameAndSpan"],[3,"Spanned"],[8,"FileLoader"],[3,"RealFileLoader"],[3,"CodeMap"],[3,"FilePathMapping"],[3,"StripUnconfigured"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"Stability"],[4,"GateIssue"],[4,"GateStrength"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"Folder"],[3,"ParseSess"],[3,"Directory"],[4,"DirectoryOwnership"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathStyle"],[4,"SemiColonMode"],[4,"BlockMode"],[4,"TokenType"],[4,"Error"],[4,"LhsExpr"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"LazyTokenStream"],[3,"SeqSep"],[8,"ParserObsoleteMethods"],[4,"ObsoleteSyntax"],[3,"P"],[3,"Delimited"],[4,"TokenTree"],[3,"TokenStream"],[3,"TokenStreamBuilder"],[3,"Cursor"],[3,"ThinTokenStream"],[4,"FnKind"],[8,"Visitor"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"Printer"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"SyntaxContextData"],[4,"CompilerDesugaringKind"],[3,"MacEager"],[3,"ModuleData"],[3,"ExpansionData"],[3,"ExtCtxt"],[4,"Annotatable"],[4,"MacroKind"],[4,"SyntaxExtension"],[4,"Determinacy"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"ProcMacro"],[8,"AttrProcMacro"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[8,"Resolver"],[3,"DummyResult"],[3,"DummyResolver"],[8,"AstBuilder"],[3,"Invocation"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"Marker"],[4,"ExpansionKind"],[4,"Expansion"],[4,"InvocationKind"],[3,"PlaceholderExpander"],[3,"BytePos"],[8,"ToTokens"],[8,"ExtParseUtils"],[6,"Lit"],[4,"NamedMatch"],[4,"ParseResult"],[3,"ParserAnyMacro"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"],[3,"InternedString"],[3,"Name"],[3,"Mark"],[3,"Span"],[3,"Keyword"],[3,"SyntaxContext"],[3,"Interner"]]};
searchIndex["syntax_ext"] = {"doc":"Syntax extensions in the Rust compiler.","items":[[5,"register_builtins","syntax_ext","",null,{"inputs":[{"name":"resolver"},{"name":"vec"},{"name":"bool"}],"output":null}],[0,"proc_macro_registrar","","",null,null],[5,"modify","syntax_ext::proc_macro_registrar","",null,{"inputs":[{"name":"parsesess"},{"name":"resolver"},{"name":"crate"},{"name":"bool"},{"name":"bool"},{"name":"usize"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"deriving","syntax_ext","The compiler code necessary to implement the `#[derive]` extensions.",null,null],[5,"is_builtin_trait","syntax_ext::deriving","",null,{"inputs":[{"name":"name"}],"output":{"name":"bool"}}],[5,"register_builtin_derives","","",null,{"inputs":[{"name":"resolver"}],"output":null}],[0,"bounds","","",null,null],[5,"expand_deriving_unsafe_bound","syntax_ext::deriving::bounds","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_copy","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"clone","syntax_ext::deriving","",null,null],[5,"expand_deriving_clone","syntax_ext::deriving::clone","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"encodable","syntax_ext::deriving","The compiler code necessary to implement the `#[derive(Encodable)]` (and `Decodable`, in decodable.rs) extension.  The idea here is that type-defining items may be tagged with `#[derive(Encodable, Decodable)]`.",null,null],[5,"expand_deriving_rustc_encodable","syntax_ext::deriving::encodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_encodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"decodable","syntax_ext::deriving","The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.",null,null],[5,"expand_deriving_rustc_decodable","syntax_ext::deriving::decodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_decodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"hash","syntax_ext::deriving","",null,null],[5,"expand_deriving_hash","syntax_ext::deriving::hash","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"debug","syntax_ext::deriving","",null,null],[5,"expand_deriving_debug","syntax_ext::deriving::debug","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"default","syntax_ext::deriving","",null,null],[5,"expand_deriving_default","syntax_ext::deriving::default","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"custom","syntax_ext::deriving","",null,null],[3,"ProcMacroDerive","syntax_ext::deriving::custom","",null,null],[11,"new","","",0,null],[11,"expand","","",0,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"name":"vec"}}],[0,"partial_eq","syntax_ext::deriving","",null,null],[5,"expand_deriving_partial_eq","syntax_ext::deriving::partial_eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"eq","syntax_ext::deriving","",null,null],[5,"expand_deriving_eq","syntax_ext::deriving::eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"partial_ord","syntax_ext::deriving","",null,null],[4,"OrderingOp","syntax_ext::deriving::partial_ord","",null,null],[13,"PartialCmpOp","","",1,null],[13,"LtOp","","",1,null],[13,"LeOp","","",1,null],[13,"GtOp","","",1,null],[13,"GeOp","","",1,null],[5,"expand_deriving_partial_ord","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"some_ordering_collapsed","","",null,null],[5,"cs_partial_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"orderingop"}}],[0,"ord","syntax_ext::deriving","",null,null],[5,"expand_deriving_ord","syntax_ext::deriving::ord","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"ordering_collapsed","","",null,null],[5,"cs_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[0,"generic","syntax_ext::deriving","Some code that abstracts away much of the boilerplate of writing `derive` instances for traits. Among other things it manages getting access to the fields of the 4 different sorts of structs and enum variants, as well as creating the method and impl ast instances.",null,null],[3,"TraitDef","syntax_ext::deriving::generic","",null,null],[12,"span","","The span for the current #[derive(Foo)] header.",2,null],[12,"attributes","","",2,null],[12,"path","","Path of the trait, including any type parameters",2,null],[12,"additional_bounds","","Additional bounds required of any type parameters of the type, other than the current trait",2,null],[12,"generics","","Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`",2,null],[12,"is_unsafe","","Is it an `unsafe` trait?",2,null],[12,"supports_unions","","Can this trait be derived for unions?",2,null],[12,"methods","","",2,null],[12,"associated_types","","",2,null],[3,"MethodDef","","",null,null],[12,"name","","name of the method",3,null],[12,"generics","","List of generics, e.g. `R: rand::Rng`",3,null],[12,"explicit_self","","Whether there is a self argument (outer Option) i.e. whether this is a static function, and whether it is a pointer (inner Option)",3,null],[12,"args","","Arguments other than the self argument",3,null],[12,"ret_ty","","Return type",3,null],[12,"attributes","","",3,null],[12,"is_unsafe","","",3,null],[12,"unify_fieldless_variants","","Can we combine fieldless variants for enums into a single match arm?",3,null],[12,"combine_substructure","","",3,null],[3,"Substructure","","All the data about the data structure/method being derived upon.",null,null],[12,"type_ident","","ident of self",4,null],[12,"method_ident","","ident of the method",4,null],[12,"self_args","","dereferenced access to any `Self_` or `Ptr(Self_, _)` arguments",4,null],[12,"nonself_args","","verbatim access to any other arguments",4,null],[12,"fields","","",4,null],[3,"FieldInfo","","Summary of the relevant parts of a struct/enum field.",null,null],[12,"span","","",5,null],[12,"name","","None for tuple structs/normal enum variants, Some for normal structs/struct enum variants.",5,null],[12,"self_","","The expression corresponding to this field of `self` (specifically, a reference to it).",5,null],[12,"other","","The expressions corresponding to references to this field in the other `Self` arguments.",5,null],[12,"attrs","","The attributes on the field",5,null],[4,"StaticFields","","Fields for a static method",null,null],[13,"Unnamed","","Tuple and unit structs/enum variants like this.",6,null],[13,"Named","","Normal structs/struct variants.",6,null],[4,"SubstructureFields","","A summary of the possible sets of fields.",null,null],[13,"Struct","","",7,null],[13,"EnumMatching","","Matching variants of the enum: variant index, variant count, ast::Variant, fields: the field name is only non-`None` in the case of a struct variant.",7,null],[13,"EnumNonMatchingCollapsed","","Non-matching variants of the enum, but with all state hidden from the consequent code.  The first component holds `Ident`s for all of the `Self` arguments; the second component is a slice of all of the variants for the enum itself, and the third component is a list of `Ident`s bound to the variant index values for each of the actual input `Self` arguments.",7,null],[13,"StaticStruct","","A static method where `Self` is a struct.",7,null],[13,"StaticEnum","","A static method where `Self` is an enum.",7,null],[5,"combine_substructure","","",null,{"inputs":[{"name":"combinesubstructurefunc"}],"output":{"name":"refcell"}}],[5,"cs_fold","","Fold the fields. `use_foldl` controls whether this is done left-to-right (`true`) or right-to-left (`false`).",null,{"inputs":[{"name":"bool"},{"name":"f"},{"name":"p"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"cs_same_method","","Call the method that is being derived on all the fields, and then process the collected results. i.e.",null,{"inputs":[{"name":"f"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"is_type_without_fields","","Return true if the type has no value fields (for an enum, no variant has any fields)",null,{"inputs":[{"name":"annotatable"}],"output":{"name":"bool"}}],[0,"ty","","A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use when specifying impls to be derived.",null,null],[3,"Path","syntax_ext::deriving::generic::ty","A path, e.g. `::std::option::Option::<i32>` (global). Has support for type parameters and a lifetime.",null,null],[12,"path","","",8,null],[12,"lifetime","","",8,null],[12,"params","","",8,null],[12,"global","","",8,null],[3,"LifetimeBounds","","Lifetimes and bounds on type parameters",null,null],[12,"lifetimes","","",9,null],[12,"bounds","","",9,null],[4,"PtrTy","","The types of pointers",null,null],[13,"Borrowed","","&'lifetime mut",10,null],[13,"Raw","","*mut",10,null],[4,"Ty","","A type. Supports pointers, Self, and literals",null,null],[13,"Self_","","",11,null],[13,"Ptr","","&/Box/ Ty",11,null],[13,"Literal","","mod::mod::Type<[lifetime], [Params...]>, including a plain type parameter, and things like `i32`",11,null],[13,"Tuple","","includes unit",11,null],[5,"borrowed_ptrty","","",null,{"inputs":[],"output":{"name":"ptrty"}}],[5,"borrowed","","",null,{"inputs":[{"name":"box"}],"output":{"name":"ty"}}],[5,"borrowed_explicit_self","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"borrowed_self","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"nil_ty","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"get_explicit_self","","",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ptrty"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"new","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"path"}}],[11,"new_local","","",8,{"inputs":[{"name":"str"}],"output":{"name":"path"}}],[11,"new_","","",8,{"inputs":[{"name":"vec"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"path"}}],[11,"to_ty","","",8,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",8,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"to_ty","","",11,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",11,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"lifetimebounds"}}],[11,"empty","","",9,{"inputs":[],"output":{"name":"lifetimebounds"}}],[11,"to_generics","","",9,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"generics"}}],[6,"CombineSubstructureFunc","syntax_ext::deriving::generic","Combine the values of all the fields together. The last argument is all the fields of all the structures.",null,null],[6,"EnumNonMatchCollapsedFunc","","Deal with non-matching enum variants.  The tuple is a list of identifiers (one for each `Self` argument, which could be any of the variants since they have been collapsed together) and the identifiers holding the variant index value for each of the `Self` arguments.  The last argument is all the non-`Self` args of the method being derived.",null,null],[11,"expand","","",2,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[11,"expand_ext","","",2,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"},{"name":"bool"}],"output":null}],[0,"proc_macro_impl","syntax_ext","",null,null],[3,"AttrProcMacro","syntax_ext::proc_macro_impl","",null,null],[12,"inner","","",12,null],[3,"BangProcMacro","","",null,null],[12,"inner","","",13,null],[11,"expand","","",12,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"expand","","",13,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[[3,"ProcMacroDerive"],[4,"OrderingOp"],[3,"TraitDef"],[3,"MethodDef"],[3,"Substructure"],[3,"FieldInfo"],[4,"StaticFields"],[4,"SubstructureFields"],[3,"Path"],[3,"LifetimeBounds"],[4,"PtrTy"],[4,"Ty"],[3,"AttrProcMacro"],[3,"BangProcMacro"]]};
searchIndex["syntax_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntax_pos","A compressed span. Contains either fields of `SpanData` inline if they are small, or index into span interner. The primary goal of `Span` is to be as small as possible and fit into other structures (that's why it uses `packed` as well). Decoding speed is the second priority. See `SpanData` for the info on span fields in decoded representation.",null,null],[3,"SpanData","","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[12,"ctxt","","Information about where the macro came from, if this piece of code was created by a macro expansion.",0,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",1,null],[12,"is_primary","","Is this a primary span? This is the \"locus\" of the message, and is indicated with a `^^^^` underline, versus `----`.",1,null],[12,"label","","What label should we attach to this span (if any)?",1,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",2,null],[12,"bytes","","The number of bytes, >=2",2,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't originate from files has names between angle brackets by convention, e.g. `<anon>`",3,null],[12,"name_was_remapped","","True if the `name` field above has been modified by -Zremap-path-prefix",3,null],[12,"unmapped_path","","The unmapped path of the file that the source came from. Set to `None` if the FileMap was imported from an external crate.",3,null],[12,"crate_of_origin","","Indicates which crate this FileMap was imported from.",3,null],[12,"src","","The complete source code",3,null],[12,"src_hash","","The source code's hash",3,null],[12,"external_src","","The external source code (used for external crates, which will have a `None` value as `self.src`.",3,null],[12,"start_pos","","The start position of this source in the CodeMap",3,null],[12,"end_pos","","The end position of this source in the CodeMap",3,null],[12,"lines","","Locations of lines beginnings in the source code",3,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",3,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",4,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset is not equivalent to a character offset. The CodeMap will convert BytePos values to CharPos values as necessary.",null,null],[12,"0","","",5,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",6,null],[12,"line","","The (1-based) line number",6,null],[12,"col","","The (0-based) column offset",6,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",7,null],[12,"line","","",7,null],[12,"col","","",7,null],[12,"file","","",7,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",8,null],[12,"line","","",8,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",9,null],[12,"pos","","",9,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",10,null],[12,"start_col","","Column in line where span begins, starting from 0.",10,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",10,null],[3,"FileLines","","",null,null],[12,"file","","",11,null],[12,"lines","","",11,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",12,null],[12,"macro_decl_name","","name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")",12,null],[12,"def_site_span","","span where macro was defined (if known)",12,null],[3,"DistinctSources","","",null,null],[12,"begin","","",13,null],[12,"end","","",13,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",14,null],[12,"source_len","","",14,null],[12,"begin_pos","","",14,null],[12,"end_pos","","",14,null],[4,"ExternalSource","","The state of the lazy external source loading mechanism of a FileMap.",null,null],[13,"Present","","The external source has been loaded already.",15,null],[13,"AbsentOk","","No attempt has been made to load the external source.",15,null],[13,"AbsentErr","","A failed attempt has been made to load the external source.",15,null],[13,"Unneeded","","No external source has to be loaded, since the FileMap represents a local crate.",15,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",16,null],[13,"DistinctSources","","",16,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",17,null],[13,"DistinctSources","","",17,null],[13,"MalformedForCodemap","","",17,null],[13,"SourceNotAvailable","","",17,null],[12,"filename","syntax_pos::SpanSnippetError","",17,null],[0,"hygiene","syntax_pos","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntax_pos::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",18,null],[12,"prev_ctxt","","",18,null],[12,"modern","","",18,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",19,null],[12,"callee","","Information about the expansion.",19,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",20,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",20,null],[12,"allow_internal_unsafe","","Whether the macro is allowed to use `unsafe` internally even if the user crate has `#![forbid(unsafe_code)]`.",20,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",20,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",21,null],[13,"MacroBang","","e.g. `format!()`",21,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",21,null],[4,"CompilerDesugaringKind","","The kind of compiler desugaring.",null,null],[13,"BackArrow","","",22,null],[13,"DotFill","","",22,null],[13,"QuestionMark","","",22,null],[5,"clear_markings","","",null,{"inputs":[],"output":null}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"ordering"}}],[11,"hash","","",23,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"syntaxcontextdata"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"mark"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fresh","","",24,{"inputs":[{"name":"mark"}],"output":{"name":"self"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",24,{"inputs":[],"output":{"name":"self"}}],[11,"as_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",24,{"inputs":[{"name":"u32"}],"output":{"name":"mark"}}],[11,"expn_info","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_expn_info","","",24,{"inputs":[{"name":"self"},{"name":"expninfo"}],"output":null}],[11,"modern","","",24,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"is_modern","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_modern","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"is_descendant_of","","",24,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"empty","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"apply_mark","","Extend a syntax context with a given mark",23,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"syntaxcontext"}}],[11,"remove_mark","","",23,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"adjust","","Adjust this context for resolution in a scope created by the given expansion. For example, consider the following three resolutions of `f`: `rust mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty. m!(f); macro m($f:ident) { mod bar { pub fn f() {} // `f`'s `SyntaxContext` has a single `Mark` from `m`. pub fn $f() {} // `$f`'s `SyntaxContext` is empty. } foo::f(); // `f`'s `SyntaxContext` has a single `Mark` from `m` //^ Since `mod foo` is outside this expansion, `adjust` removes the mark from `f`, //| and it resolves to `::foo::f`. bar::f(); // `f`'s `SyntaxContext` has a single `Mark` from `m` //^ Since `mod bar` not outside this expansion, `adjust` does not change `f`, //| and it resolves to `::bar::f`. bar::$f(); // `f`'s `SyntaxContext` is empty. //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`, //| and it resolves to `::bar::$f`. }` This returns the expansion whose definition scope we use to privacy check the resolution, or `None` if we privacy check as usual (i.e. not w.r.t. a macro definition scope).",23,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"option"}}],[11,"glob_adjust","","Adjust this context for resolution in a scope created by the given expansion via a glob import with the given `SyntaxContext`. For example, `rust m!(f); macro m($i:ident) { mod foo { pub fn f() {} // `f`'s `SyntaxContext` has a single `Mark` from `m`. pub fn $i() {} // `$i`'s `SyntaxContext` is empty. } n(f); macro n($j:ident) { use foo::*; f(); // `f`'s `SyntaxContext` has a mark from `m` and a mark from `n` //^ `glob_adjust` removes the mark from `n`, so this resolves to `foo::f`. $i(); // `$i`'s `SyntaxContext` has a mark from `n` //^ `glob_adjust` removes the mark from `n`, so this resolves to `foo::$i`. $j(); // `$j`'s `SyntaxContext` has a mark from `m` //^ This cannot be glob-adjusted, so this is a resolution error. } }` This returns `None` if the context cannot be glob-adjusted. Otherwise, it returns the scope to use when privacy checking (see `adjust` for details).",23,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"name":"option"}}],[11,"reverse_glob_adjust","","Undo `glob_adjust` if possible: `rust if let Some(privacy_checking_scope) = self.reverse_glob_adjust(expansion, glob_ctxt) { assert!(self.glob_adjust(expansion, glob_ctxt) == Some(privacy_checking_scope)); }`",23,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"name":"option"}}],[11,"modern","","",23,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"outer","","",23,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"expninfo"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"nameandspan"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"expnformat"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"compilerdesugaringkind"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"compilerdesugaringkind"}],"output":{"name":"bool"}}],[11,"as_symbol","","",22,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","syntax_pos","",25,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"new","","",25,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"syntaxcontext"}],"output":{"name":"self"}}],[11,"data","","",25,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[0,"symbol","","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e. given a value, one can easily find the type, and vice versa.",null,null],[3,"Ident","syntax_pos::symbol","",null,null],[12,"name","","",26,null],[12,"ctxt","","",26,null],[3,"Symbol","","A symbol is an interned or gensymed string.",null,null],[3,"Interner","","",null,null],[3,"InternedString","","Represents a string stored in the thread-local interner. Because the interner lives for the life of the thread, this can be safely treated as an immortal string, as long as it never crosses between threads.",null,null],[0,"keywords","","",null,null],[3,"Keyword","syntax_pos::symbol::keywords","",null,null],[17,"Invalid","","",null,null],[17,"CrateRoot","","",null,null],[17,"DollarCrate","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Catch","","",null,null],[17,"Default","","",null,null],[17,"Dyn","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ident","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"name","","",27,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"clone","syntax_pos::symbol","",26,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"with_empty_ctxt","","",26,{"inputs":[{"name":"symbol"}],"output":{"name":"ident"}}],[11,"from_str","","Maps a string to an identifier with an empty syntax context.",26,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[11,"modern","","",26,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"ordering"}}],[11,"hash","","",28,null],[11,"intern","","Maps a string to its interned representation.",28,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"interned","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"gensym","","gensym's a new usize, using the current interner.",28,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"gensymed","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_str","","",28,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"as_u32","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from","","",28,{"inputs":[{"name":"str"}],"output":{"name":"symbol"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"interner"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"intern","","",29,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"symbol"}}],[11,"interned","","",29,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"symbol"}}],[11,"get","","",29,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"str"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"hash","","",30,null],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[6,"FileName","syntax_pos","",null,null],[6,"FileLinesResult","","",null,null],[17,"DUMMY_SP","","Dummy span, both position and length are zero, syntax context is zero as well. This span is kept inline and encoded with format 0.",null,null],[17,"NO_EXPANSION","","",null,null],[17,"SPAN_DEBUG","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",31,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"multispan"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"lo","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"with_lo","","",25,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"hi","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"with_hi","","",25,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"ctxt","","",25,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"with_ctxt","","",25,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"span"}}],[11,"end_point","","Returns a new span representing just the end-point of this span",25,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"next_point","","Returns a new span representing the next character after the end-point of this span",25,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","Return true if `self` fully encloses `other`.",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",25,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_callee","","Return the source callee.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_compiler_desugaring","","Check if this span arises from a compiler desugaring of kind `kind`.",25,{"inputs":[{"name":"self"},{"name":"compilerdesugaringkind"}],"output":{"name":"bool"}}],[11,"compiler_desugaring_kind","","Return the compiler desugaring that created this span, or None if this span is not from a desugaring.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"allows_unsafe","","Check if a span is \"internal\" to a macro in which `unsafe` can be used without triggering the `unsafe_code` lint",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"macro_backtrace","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to","","Return a `Span` that would enclose both `self` and `end`.",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"between","","Return a `Span` between the end of `self` to the beginning of `end`.",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"until","","Return a `Span` between the beginning of `self` to the beginning of `end`.",25,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"spanlabel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"default_encode","","",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",25,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",32,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",32,{"inputs":[{"name":"self"},{"name":"span"},{"name":"string"}],"output":null}],[11,"primary_span","","Selects the first primary span (if any)",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"primary_spans","","Returns all primary spans.",32,null],[11,"replace","","Replaces all occurrences of one Span with another. Used to move Spans in areas that don't display well (like std macros). Returns true if replacements occurred.",32,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"span_labels","","Returns the strings to highlight. We always ensure that there is an entry for each of the primary spans -- for each primary span P, if there is at least one label with span P, we return those labels (marked as primary). But otherwise we return `SpanLabel` instances with empty labels.",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",32,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"multibytechar"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"externalsource"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"externalsource"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"externalsource"}}],[11,"is_absent","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_source","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"filemap"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"filename"},{"name":"bool"},{"name":"pathbuf"},{"name":"string"},{"name":"bytepos"}],"output":{"name":"filemap"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the table of line-beginnings. UNCHECKED INVARIANT: these offsets must be added in the right order and must be in the right places; there is shared knowledge about what ends a line between this file and parse.rs WARNING: pos param here is the offset relative to start of CodeMap, and CodeMap will append a newline when adding a filemap without a newline at the end, so the safe way to call this is with value calculated as filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",3,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":null}],[11,"add_external_src","","Add externally loaded source. If the hash of the input doesn't match or no input is supplied via None, it is interpreted as an error and the corresponding enum variant is set. The return value signifies whether some kind of source is present.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"get_line","","Get a line from the list of pre-computed line-beginnings. The line number here is 0-based.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"record_multibyte_char","","",3,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"usize"}],"output":null}],[11,"is_real_file","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_imported","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_length","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_lines","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lookup_line","","Find the line containing the given position. The return value is the index into the `lines` array of this FileMap, not the 1-based line number. If the filemap is empty or the position is located before the first line, None is returned.",3,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"line_bounds","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"charpos"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_usize","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"loc"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lineinfo"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"spanlineserror"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"spansnippeterror"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"distinctsources"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"malformedcodemappositions"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","syntax_pos::symbol","",28,{"inputs":[{"name":"ident"}],"output":{"name":"symbol"}}],[11,"to_ident","","",28,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}]],"paths":[[3,"SpanData"],[3,"SpanLabel"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"ExternalSource"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[3,"SyntaxContextData"],[3,"ExpnInfo"],[3,"NameAndSpan"],[4,"ExpnFormat"],[4,"CompilerDesugaringKind"],[3,"SyntaxContext"],[3,"Mark"],[3,"Span"],[3,"Ident"],[3,"Keyword"],[3,"Symbol"],[3,"Interner"],[3,"InternedString"],[8,"Pos"],[3,"MultiSpan"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",1,null],[12,"bools","","Map of capability name to boolean value",1,null],[12,"numbers","","Map of capability name to numeric value",1,null],[12,"strings","","Map of capability name to raw (unexpanded) string",1,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its parsed Terminfo database record.",null,null],[4,"Error","","A terminfo creation error.",null,null],[13,"TermUnset","","TermUnset Indicates that the environment doesn't include enough information to find the terminfo entry.",2,null],[13,"MalformedTerminfo","","MalformedTerminfo indicates that parsing the terminfo entry failed.",2,null],[13,"IoError","","io::Error forwards any io::Errors encountered when finding or reading the terminfo entry.",2,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing. ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",3,null],[13,"Number","","",3,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"new","","Return a new zero-initialized Variables",4,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_env","","Create a TermInfo based on current environment.",1,{"inputs":[],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fg","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",5,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",5,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",5,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",5,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal (foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",6,null],[10,"fg","","Sets the foreground color to the given color.",6,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",6,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)` if the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if there was an I/O error.",6,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",6,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",6,null],[10,"get_mut","","Gets a mutable reference to the stream inside",6,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",6,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}]],"paths":[[4,"Attr"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["test"] = {"doc":"Support code for rustc's built in unit-test and micro-benchmarking framework.","items":[[3,"Bencher","test","Manager of the benchmarking runs.",null,null],[12,"bytes","","",0,null],[3,"TestDesc","","",null,null],[12,"name","","",1,null],[12,"ignore","","",1,null],[12,"should_panic","","",1,null],[12,"allow_fail","","",1,null],[3,"TestPaths","","",null,null],[12,"file","","",2,null],[12,"base","","",2,null],[12,"relative_dir","","",2,null],[3,"TestDescAndFn","","",null,null],[12,"desc","","",3,null],[12,"testfn","","",3,null],[3,"Metric","","",null,null],[3,"MetricMap","","",null,null],[3,"Options","","In case we want to add other options as well, just add them in this struct.",null,null],[3,"TestOpts","","",null,null],[12,"list","","",4,null],[12,"filter","","",4,null],[12,"filter_exact","","",4,null],[12,"run_ignored","","",4,null],[12,"run_tests","","",4,null],[12,"bench_benchmarks","","",4,null],[12,"logfile","","",4,null],[12,"nocapture","","",4,null],[12,"color","","",4,null],[12,"quiet","","",4,null],[12,"test_threads","","",4,null],[12,"skip","","",4,null],[12,"options","","",4,null],[3,"BenchSamples","","",null,null],[4,"TestName","","",null,null],[13,"StaticTestName","","",5,null],[13,"DynTestName","","",5,null],[4,"NamePadding","","",null,null],[13,"PadNone","","",6,null],[13,"PadOnRight","","",6,null],[4,"TestFn","","",null,null],[13,"StaticTestFn","","",7,null],[13,"StaticBenchFn","","",7,null],[13,"StaticMetricFn","","",7,null],[13,"DynTestFn","","",7,null],[13,"DynMetricFn","","",7,null],[13,"DynBenchFn","","",7,null],[4,"BenchMode","","",null,null],[13,"Auto","","",8,null],[13,"Single","","",8,null],[4,"ShouldPanic","","",null,null],[13,"No","","",9,null],[13,"Yes","","",9,null],[13,"YesWithMessage","","",9,null],[4,"ColorConfig","","",null,null],[13,"AutoColor","","",10,null],[13,"AlwaysColor","","",10,null],[13,"NeverColor","","",10,null],[4,"TestResult","","",null,null],[13,"TrOk","","",11,null],[13,"TrFailed","","",11,null],[13,"TrFailedMsg","","",11,null],[13,"TrIgnored","","",11,null],[13,"TrAllowedFail","","",11,null],[13,"TrMetrics","","",11,null],[13,"TrBench","","",11,null],[4,"TestEvent","","",null,null],[13,"TeFiltered","","",12,null],[13,"TeWait","","",12,null],[13,"TeResult","","",12,null],[13,"TeTimeout","","",12,null],[13,"TeFilteredOut","","",12,null],[5,"test_main","","",null,null],[5,"test_main_static","","",null,null],[5,"parse_opts","","",null,null],[5,"fmt_bench_samples","","",null,{"inputs":[{"name":"benchsamples"}],"output":{"name":"string"}}],[5,"list_tests_console","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"result"}}],[5,"run_tests_console","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"result"}}],[5,"run_tests","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"},{"name":"f"}],"output":{"name":"result"}}],[5,"filter_tests","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"convert_benchmarks_to_tests","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"run_test","","",null,{"inputs":[{"name":"testopts"},{"name":"bool"},{"name":"testdescandfn"},{"name":"sender"}],"output":null}],[5,"black_box","","A function that is opaque to the optimizer, to allow benchmarks to pretend to use outputs to assist in avoiding dead-code elimination.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"iter","","",null,{"inputs":[{"name":"f"}],"output":{"name":"summary"}}],[0,"test","","",null,null],[0,"stats","","",null,null],[3,"Summary","test::stats","Extracted collection of all the summary statistics of a sample set.",null,null],[12,"sum","","",13,null],[12,"min","","",13,null],[12,"max","","",13,null],[12,"mean","","",13,null],[12,"median","","",13,null],[12,"var","","",13,null],[12,"std_dev","","",13,null],[12,"std_dev_pct","","",13,null],[12,"median_abs_dev","","",13,null],[12,"median_abs_dev_pct","","",13,null],[12,"quartiles","","",13,null],[12,"iqr","","",13,null],[5,"winsorize","","Winsorize a set of samples, replacing values above the `100-pct` percentile and below the `pct` percentile with those percentiles themselves. This is a way of minimizing the effect of outliers, at the cost of biasing the sample. It differs from trimming in that it does not change the number of samples, just changes the values of those that are outliers.",null,null],[8,"Stats","","Trait that provides simple descriptive statistics on a univariate set of numeric samples.",null,null],[10,"sum","","Sum of the samples.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"min","","Minimum value of the samples.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"max","","Maximum value of the samples.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"mean","","Arithmetic mean (average) of the samples: sum divided by sample-count.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"median","","Median of the samples: value separating the lower half of the samples from the higher half. Equal to `self.percentile(50.0)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"var","","Variance of the samples: bias-corrected mean of the squares of the differences of each sample from the sample mean. Note that this calculates the sample variance rather than the population variance, which is assumed to be unknown. It therefore corrects the `(n-1)/n` bias that would appear if we calculated a population variance, by dividing by `(n-1)` rather than `n`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"std_dev","","Standard deviation: the square root of the sample variance.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"std_dev_pct","","Standard deviation as a percent of the mean value. See `std_dev` and `mean`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"median_abs_dev","","Scaled median of the absolute deviations of each sample from the sample median. This is a robust (distribution-agnostic) estimator of sample variability. Use this in preference to `std_dev` if you cannot assume your sample is normally distributed. Note that this is scaled by the constant `1.4826` to allow its use as a consistent estimator for the standard deviation.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"percentile","","Percentile: the value below which `pct` percent of the values in `self` fall. For example, percentile(95.0) will return the value `v` such that 95% of the samples `s` in `self` satisfy `s <= v`.",14,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[10,"quartiles","","Quartiles of the sample: three values that divide the sample into four equal groups, each with 1/4 of the data. The middle value is the median. See `median` and `percentile`. This function may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but is otherwise equivalent.",14,null],[10,"iqr","","Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th percentile (3rd quartile). See `quartiles`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"summary"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"new","","Construct a new summary of a sample set.",13,null],[0,"bench","test","",null,null],[5,"benchmark","test::bench","",null,{"inputs":[{"name":"f"}],"output":{"name":"benchsamples"}}],[5,"run_once","","",null,{"inputs":[{"name":"f"}],"output":null}],[6,"OptRes","test","Result of parsing the options.",null,null],[6,"MonitorMsg","","",null,null],[8,"TDynBenchFn","","Represents a benchmark function.",null,null],[10,"run","","",15,{"inputs":[{"name":"self"},{"name":"bencher"}],"output":null}],[8,"FnBox","","",null,null],[10,"call_box","","",16,{"inputs":[{"name":"box"},{"name":"t"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"testname"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"testname"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"testname"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"namepadding"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"namepadding"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bencher"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"benchmode"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"benchmode"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"shouldpanic"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"shouldpanic"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"shouldpanic"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"testdesc"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"testdesc"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"testdesc"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"testpaths"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"metric"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"metric"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"metricmap"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"metricmap"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"metricmap"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"options"}}],[11,"display_output","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"options"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"benchsamples"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"benchsamples"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"benchsamples"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"testresult"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"testresult"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"testresult"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"testevent"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"metricmap"}}],[11,"insert_metric","","Insert a named `value` (+/- `noise`) metric into the map. The value must be non-negative. The `noise` indicates the uncertainty of the metric, which doubles as the \"noise range\" of acceptable pairwise-regressions on this named value, when comparing from one metric to the next using `compare_to_old`.",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"fmt_metrics","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"iter","","Callback for benchmark functions to run in their body.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"bench","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}]],"paths":[[3,"Bencher"],[3,"TestDesc"],[3,"TestPaths"],[3,"TestDescAndFn"],[3,"TestOpts"],[4,"TestName"],[4,"NamePadding"],[4,"TestFn"],[4,"BenchMode"],[4,"ShouldPanic"],[4,"ColorConfig"],[4,"TestResult"],[4,"TestEvent"],[3,"Summary"],[8,"Stats"],[8,"TDynBenchFn"],[8,"FnBox"],[3,"Metric"],[3,"MetricMap"],[3,"Options"],[3,"BenchSamples"]]};
searchIndex["unwind"] = {"doc":"","items":[[3,"_Unwind_Exception","unwind","",null,null],[12,"exception_class","","",0,null],[12,"exception_cleanup","","",0,null],[12,"private","","",0,null],[4,"_Unwind_Reason_Code","","",null,null],[13,"_URC_NO_REASON","","",1,null],[13,"_URC_FOREIGN_EXCEPTION_CAUGHT","","",1,null],[13,"_URC_FATAL_PHASE2_ERROR","","",1,null],[13,"_URC_FATAL_PHASE1_ERROR","","",1,null],[13,"_URC_NORMAL_STOP","","",1,null],[13,"_URC_END_OF_STACK","","",1,null],[13,"_URC_HANDLER_FOUND","","",1,null],[13,"_URC_INSTALL_CONTEXT","","",1,null],[13,"_URC_CONTINUE_UNWIND","","",1,null],[13,"_URC_FAILURE","","",1,null],[4,"_Unwind_Context","","",null,null],[4,"_Unwind_Action","","",null,null],[13,"_UA_SEARCH_PHASE","","",2,null],[13,"_UA_CLEANUP_PHASE","","",2,null],[13,"_UA_HANDLER_FRAME","","",2,null],[13,"_UA_FORCE_UNWIND","","",2,null],[13,"_UA_END_OF_STACK","","",2,null],[5,"_Unwind_Resume","","",null,null],[5,"_Unwind_DeleteException","","",null,null],[5,"_Unwind_GetLanguageSpecificData","","",null,null],[5,"_Unwind_GetRegionStart","","",null,null],[5,"_Unwind_GetTextRelBase","","",null,null],[5,"_Unwind_GetDataRelBase","","",null,null],[5,"_Unwind_GetGR","","",null,null],[5,"_Unwind_SetGR","","",null,null],[5,"_Unwind_GetIP","","",null,null],[5,"_Unwind_SetIP","","",null,null],[5,"_Unwind_GetIPInfo","","",null,null],[5,"_Unwind_FindEnclosingFunction","","",null,null],[5,"_Unwind_RaiseException","","",null,null],[5,"_Unwind_Backtrace","","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"_unwind_reason_code"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"_unwind_reason_code"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"_unwind_action"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"_unwind_action"}],"output":{"name":"bool"}}],[6,"_Unwind_Exception_Class","","",null,null],[6,"_Unwind_Word","","",null,null],[6,"_Unwind_Ptr","","",null,null],[6,"_Unwind_Trace_Fn","","",null,null],[6,"_Unwind_Exception_Cleanup_Fn","","",null,null],[17,"unwinder_private_data_size","","",null,null]],"paths":[[3,"_Unwind_Exception"],[4,"_Unwind_Reason_Code"],[4,"_Unwind_Action"]]};
initSearch(searchIndex);
