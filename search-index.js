var searchIndex = {};
searchIndex["arena"] = {"doc":"The arena, a fast but limited type of allocator.","items":[[3,"TypedArena","arena","An arena that can hold objects of only one type.",null,null],[3,"DroplessArena","","",null,null],[11,"new","","Creates a new `TypedArena`.",0,{"inputs":[],"output":{"name":"typedarena"}}],[11,"alloc","","Allocates an object in the `TypedArena`, returning a reference to it.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"alloc_slice","","Allocates a slice of objects that are copy into the `TypedArena`, returning a mutable reference to it. Will panic if passed a zero-sized types.",0,null],[11,"clear","","Clears the arena. Deallocates all but the longest chunk which may be reused.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"droplessarena"}}],[11,"in_arena","","",1,null],[11,"alloc","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"alloc_slice","","Allocates a slice of objects that are copied into the `DroplessArena`, returning a mutable reference to it. Will panic if passed a zero-sized type.",1,null]],"paths":[[3,"TypedArena"],[3,"DroplessArena"]]};
searchIndex["flate"] = {"doc":"Simple [DEFLATE][def]-based compression. This is a wrapper around the [`miniz`][mz] library, which is a one-file pure-C implementation of zlib.","items":[[3,"Error","flate","",null,null],[3,"Bytes","","",null,null],[5,"deflate_bytes","","Compress a buffer without writing any sort of header on the output. Fast compression is used because it is almost twice as fast as default compression and the compression ratio is only marginally worse.",null,null],[5,"inflate_bytes","","Decompress a buffer without parsing any sort of header on the input.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,null],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Error"],[3,"Bytes"]]};
searchIndex["fmt_macros"] = {"doc":"Macro support for format strings","items":[[3,"Argument","fmt_macros","Representation of an argument specification.",null,null],[12,"position","","Where to find this argument",0,null],[12,"format","","How to format the argument",0,null],[3,"FormatSpec","","Specification for the formatting of an argument in the format string.",null,null],[12,"fill","","Optionally specified character to fill alignment with",1,null],[12,"align","","Optionally specified alignment",1,null],[12,"flags","","Packed version of various flags provided",1,null],[12,"precision","","The integer precision to use",1,null],[12,"width","","The string width requested for the resulting format",1,null],[12,"ty","","The descriptor string representing the name of the format desired for this argument, this can be empty or any number of characters, although it is required to be one word.",1,null],[3,"Parser","","The parser structure for interpreting the input format string. This is modeled as an iterator over `Piece` structures to form a stream of tokens being output.",null,null],[12,"errors","","Error messages accumulated during parsing",2,null],[4,"Piece","","A piece is a portion of the format string which represents the next part to emit. These are emitted as a stream by the `Parser` class.",null,null],[13,"String","","A literal string which should directly be emitted",3,null],[13,"NextArgument","","This describes that formatting should process the next argument (as specified inside) for emission.",3,null],[4,"Position","","Enum describing where an argument for a format can be located.",null,null],[13,"ArgumentIs","","The argument is located at a specific index.",4,null],[13,"ArgumentNamed","","The argument has a name.",4,null],[4,"Alignment","","Enum of alignments which are supported.",null,null],[13,"AlignLeft","","The value will be aligned to the left.",5,null],[13,"AlignRight","","The value will be aligned to the right.",5,null],[13,"AlignCenter","","The value will be aligned in the center.",5,null],[13,"AlignUnknown","","The value will take on a default alignment.",5,null],[4,"Flag","","Various flags which can be applied to format strings. The meaning of these flags is defined by the formatters themselves.",null,null],[13,"FlagSignPlus","","A `+` will be used to denote positive numbers.",6,null],[13,"FlagSignMinus","","A `-` will be used to denote negative numbers. This is the default.",6,null],[13,"FlagAlternate","","An alternate form will be used for the value. In the case of numbers, this means that the number will be prefixed with the supplied string.",6,null],[13,"FlagSignAwareZeroPad","","For numbers, this means that the number will be padded with zeroes, and the sign (`+` or `-`) will precede them.",6,null],[4,"Count","","A count is used for the precision and width parameters of an integer, and can reference either an argument or a literal integer.",null,null],[13,"CountIs","","The count is specified explicitly.",7,null],[13,"CountIsName","","The count is specified by the argument with the given name.",7,null],[13,"CountIsParam","","The count is specified by the argument at the given index.",7,null],[13,"CountImplied","","The count is implied and cannot be explicitly specified.",7,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"piece"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"argument"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"formatspec"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"formatspec"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"formatspec"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"count"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"count"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"count"}],"output":{"name":"bool"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new parser for the given format string",2,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}]],"paths":[[3,"Argument"],[3,"FormatSpec"],[3,"Parser"],[4,"Piece"],[4,"Position"],[4,"Alignment"],[4,"Flag"],[4,"Count"]]};
searchIndex["graphviz"] = {"doc":"Generate files suitable for use with Graphviz","items":[[3,"Id","graphviz","`Id` is a Graphviz `ID`.",null,null],[4,"LabelText","","The text for a graphviz label on a node or edge.",null,null],[13,"LabelStr","","This kind of label preserves the text directly as is.",0,null],[13,"EscStr","","This kind of label uses the graphviz label escString type: http://www.graphviz.org/content/attrs#kescString",0,null],[13,"HtmlStr","","This uses a graphviz [HTML string label][html]. The string is printed exactly as given, but between `<` and `>`. **No escaping is performed.**",0,null],[4,"Style","","The style for a node or edge. See http://www.graphviz.org/doc/info/attrs.html#k:style for descriptions. Note that some of these are not valid for edges.",null,null],[13,"None","","",1,null],[13,"Solid","","",1,null],[13,"Dashed","","",1,null],[13,"Dotted","","",1,null],[13,"Bold","","",1,null],[13,"Rounded","","",1,null],[13,"Diagonals","","",1,null],[13,"Filled","","",1,null],[13,"Striped","","",1,null],[13,"Wedged","","",1,null],[4,"RenderOption","","",null,null],[13,"NoEdgeLabels","","",2,null],[13,"NoNodeLabels","","",2,null],[13,"NoEdgeStyles","","",2,null],[13,"NoNodeStyles","","",2,null],[5,"escape_html","","Escape tags in such a way that it is suitable for inclusion in a Graphviz HTML label.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"default_options","","Returns vec holding all the default render options.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"render","","Renders directed graph `g` into the writer `w` in DOT syntax. (Simple wrapper around `render_opts` that passes a default set of options.)",null,{"inputs":[{"name":"g"},{"name":"w"}],"output":{"name":"result"}}],[5,"render_opts","","Renders directed graph `g` into the writer `w` in DOT syntax. (Main entry point for the library.)",null,null],[6,"Nodes","","",null,null],[6,"Edges","","",null,null],[8,"Labeller","","Each instance of a type that implements `Label<C>` maps to a unique identifier with respect to `C`, which is used to identify it in the generated .dot file. They can also provide more elaborate (and non-unique) label text that is used in the graphviz rendered output. The graph instance is responsible for providing the DOT compatible identifiers for the nodes and (optionally) rendered labels for the nodes and edges, as well as an identifier for the graph itself.",null,null],[16,"Node","","",3,null],[16,"Edge","","",3,null],[10,"graph_id","","Must return a DOT compatible identifier naming the graph.",3,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[10,"node_id","","Maps `n` to a unique identifier with respect to `self`. The implementor is responsible for ensuring that the returned name is a valid DOT identifier.",3,null],[11,"node_shape","","Maps `n` to one of the [graphviz `shape` names][1]. If `None` is returned, no `shape` attribute is specified.",3,null],[11,"node_label","","Maps `n` to a label that will be used in the rendered output. The label need not be unique, and may be the empty string; the default is just the output from `node_id`.",3,null],[11,"edge_label","","Maps `e` to a label that will be used in the rendered output. The label need not be unique, and may be the empty string; the default is in fact the empty string.",3,null],[11,"node_style","","Maps `n` to a style that will be used in the rendered output.",3,null],[11,"edge_style","","Maps `e` to a style that will be used in the rendered output.",3,null],[8,"GraphWalk","","GraphWalk is an abstraction over a directed graph = (nodes,edges) made up of node handles `N` and edge handles `E`, where each `E` can be mapped to its source and target nodes.",null,null],[16,"Node","","",4,null],[16,"Edge","","",4,null],[10,"nodes","","Returns all the nodes in this graph.",4,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[10,"edges","","Returns all of the edges in this graph.",4,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[10,"source","","The source node for `edge`.",4,null],[10,"target","","The target node for `edge`.",4,null],[8,"IntoCow","","",null,null],[10,"into_cow","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates an `Id` named `name`.",6,{"inputs":[{"name":"name"}],"output":{"name":"result"}}],[11,"as_slice","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name","","",6,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"label","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"escaped","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"html","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"to_dot_string","","Renders text as string suitable for a label in a .dot file. This includes quotes or suitable delimeters.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"prefix_line","","Puts `prefix` on a line above this label, with a blank line separator.",0,{"inputs":[{"name":"self"},{"name":"labeltext"}],"output":{"name":"labeltext"}}],[11,"suffix_line","","Puts `suffix` on a line below this label, with a blank line separator.",0,{"inputs":[{"name":"self"},{"name":"labeltext"}],"output":{"name":"labeltext"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"renderoption"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"renderoption"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"LabelText"],[4,"Style"],[4,"RenderOption"],[8,"Labeller"],[8,"GraphWalk"],[8,"IntoCow"],[3,"Id"]]};
searchIndex["log"] = {"doc":"Utilities for program-wide and customizable logging","items":[[3,"LogLevel","log","Wraps the log level with fmt implementations.",null,null],[12,"0","","",0,null],[3,"LogRecord","","A LogRecord is created by the logging macros, and passed as the only argument to Loggers.",null,null],[12,"module_path","","The module path of where the LogRecord originated.",1,null],[12,"level","","The LogLevel of this record.",1,null],[12,"args","","The arguments from the log line.",1,null],[12,"file","","The file of where the LogRecord originated.",1,null],[12,"line","","The line number of where the LogRecord originated.",1,null],[5,"set_logger","","Replaces the thread-local logger with the specified logger, returning the old logger.",null,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[0,"macros","","Logging macros",null,null],[17,"MAX_LOG_LEVEL","","Maximum logging level of a module that can be specified. Common logging levels are found in the DEBUG/INFO/WARN/ERROR constants.",null,null],[17,"DEBUG","","Debug log level",null,null],[17,"INFO","","Info log level",null,null],[17,"WARN","","Warn log level",null,null],[17,"ERROR","","Error log level",null,null],[8,"Logger","","A trait used to represent an interface to a thread-local logger. Each thread can have its own custom logger which can respond to logging messages however it likes.",null,null],[10,"log","","Logs a single message described by the `record`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"log","","The standard logging macro",null,null],[14,"error","","A convenience macro for logging at the error log level.",null,null],[14,"warn","","A convenience macro for logging at the warning log level.",null,null],[14,"info","","A convenience macro for logging at the info log level.",null,null],[14,"debug","","A convenience macro for logging at the debug log level. This macro will be omitted at compile time in an optimized build unless `-C debug-assertions` is passed to the compiler.",null,null],[14,"log_enabled","","A macro to test whether a log level is enabled for the current module.",null,null]],"paths":[[3,"LogLevel"],[3,"LogRecord"],[8,"Logger"]]};
searchIndex["proc_macro"] = {"doc":"A support library for macro authors when defining new macros.","items":[[3,"TokenStream","proc_macro","The main type provided by this crate, representing an abstract stream of tokens.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"LexError"],[3,"TokenStream"]]};
searchIndex["proc_macro_plugin"] = {"doc":"Proc_Macro","items":[[5,"plugin_registrar","proc_macro_plugin","",null,{"inputs":[{"name":"registry"}],"output":null}]],"paths":[]};
searchIndex["proc_macro_tokens"] = {"doc":"Proc_Macro","items":[[0,"build","proc_macro_tokens","",null,null],[5,"concat","proc_macro_tokens::build","A wrapper around `TokenStream::concat` to avoid extra namespace specification and provide TokenStream concatenation as a generic operator.",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"ident_eq","","Checks if two identifiers have the same name, disregarding context. This allows us to fake 'reserved' keywords.",null,{"inputs":[{"name":"tokentree"},{"name":"ident"}],"output":{"name":"bool"}}],[5,"str_to_token_ident","","Convert a `&str` into a Token.",null,{"inputs":[{"name":"str"}],"output":{"name":"token"}}],[5,"keyword_to_token_ident","","Converts a keyword (from `syntax::parse::token::keywords`) into a Token that corresponds to it.",null,{"inputs":[{"name":"keyword"}],"output":{"name":"token"}}],[5,"build_delimited","","Generically takes a `ts` and delimiter and returns `ts` delimited by the specified delimiter.",null,{"inputs":[{"name":"tokenstream"},{"name":"delimtoken"}],"output":{"name":"tokenstream"}}],[5,"build_bracket_delimited","","Takes `ts` and returns `[ts]`.",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"build_brace_delimited","","Takes `ts` and returns `{ts}`.",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"build_paren_delimited","","Takes `ts` and returns `(ts)`.",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"build_empty_args","","Constructs `()`.",null,{"inputs":[],"output":{"name":"tokenstream"}}],[0,"parse","proc_macro_tokens","Parsing utilities for writing procedural macros.",null,null],[5,"lex","proc_macro_tokens::parse","Map a string to tts, using a made-up filename. For example, `lex(\"15\")` will return a TokenStream containing the literal 15.",null,{"inputs":[{"name":"str"}],"output":{"name":"tokenstream"}}],[0,"prelude","proc_macro_tokens","",null,null]],"paths":[]};
searchIndex["rustc"] = {"doc":"","items":[],"paths":[]};
searchIndex["rustc_back"] = {"doc":"Some stuff used by rustc that doesn't have many dependencies","items":[[4,"PanicStrategy","rustc_back","",null,null],[13,"Unwind","","",0,null],[13,"Abort","","",0,null],[0,"tempdir","","",null,null],[3,"TempDir","rustc_back::tempdir","A wrapper for a path to temporary directory implementing automatic scope-based deletion.",null,null],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory will be automatically deleted once the returned wrapper is destroyed.",1,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix `prefix`. The directory will be automatically deleted once the returned wrapper is destroyed.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper. This discards the wrapper so that the automatic deletion of the temporary directory is prevented.",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",1,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary directory",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[0,"target","rustc_back","Flexible target specification.",null,null],[3,"Target","rustc_back::target","Everything `rustc` knows about how to compile for a specific target.",null,null],[12,"llvm_target","","Target triple to pass to LLVM.",2,null],[12,"target_endian","","String to use as the `target_endian` `cfg` variable.",2,null],[12,"target_pointer_width","","String to use as the `target_pointer_width` `cfg` variable.",2,null],[12,"target_os","","OS name to use for conditional compilation.",2,null],[12,"target_env","","Environment name to use for conditional compilation.",2,null],[12,"target_vendor","","Vendor name to use for conditional compilation.",2,null],[12,"arch","","Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", and \"powerpc64\".",2,null],[12,"data_layout","","Data layout to pass to LLVM.",2,null],[12,"options","","Optional settings with defaults.",2,null],[3,"TargetOptions","","Optional aspects of a target specification.",null,null],[12,"is_builtin","","Whether the target is built-in or loaded from a custom target specification.",3,null],[12,"linker","","Linker to invoke. Defaults to \"cc\".",3,null],[12,"ar","","Archive utility to use when managing archives. Defaults to \"ar\".",3,null],[12,"pre_link_args","","Linker arguments that are unconditionally passed *before* any user-defined libraries.",3,null],[12,"pre_link_objects_exe","","Objects to link before all others, always found within the sysroot folder.",3,null],[12,"pre_link_objects_dll","","",3,null],[12,"late_link_args","","Linker arguments that are unconditionally passed after any user-defined but before post_link_objects.  Standard platform libraries that should be always be linked to, usually go here.",3,null],[12,"post_link_objects","","Objects to link after all others, always found within the sysroot folder.",3,null],[12,"post_link_args","","Linker arguments that are unconditionally passed *after* any user-defined libraries.",3,null],[12,"asm_args","","Extra arguments to pass to the external assembler (when used)",3,null],[12,"cpu","","Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults to \"generic\".",3,null],[12,"features","","Default target features to pass to LLVM. These features will *always* be passed, and cannot be disabled even via `-C`. Corresponds to `llc -mattr=$features`.",3,null],[12,"dynamic_linking","","Whether dynamic linking is available on this target. Defaults to false.",3,null],[12,"executables","","Whether executables are available on this target. iOS, for example, only allows static libraries. Defaults to false.",3,null],[12,"relocation_model","","Relocation model to use in object file. Corresponds to `llc -relocation-model=$relocation_model`. Defaults to \"pic\".",3,null],[12,"code_model","","Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to \"default\".",3,null],[12,"disable_redzone","","Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.",3,null],[12,"eliminate_frame_pointer","","Eliminate frame pointers from stack frames if possible. Defaults to true.",3,null],[12,"function_sections","","Emit each function in its own section. Defaults to true.",3,null],[12,"dll_prefix","","String to prepend to the name of every dynamic library. Defaults to \"lib\".",3,null],[12,"dll_suffix","","String to append to the name of every dynamic library. Defaults to \".so\".",3,null],[12,"exe_suffix","","String to append to the name of every executable.",3,null],[12,"staticlib_prefix","","String to prepend to the name of every static library. Defaults to \"lib\".",3,null],[12,"staticlib_suffix","","String to append to the name of every static library. Defaults to \".a\".",3,null],[12,"target_family","","OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".",3,null],[12,"is_like_openbsd","","Whether the target toolchain is like OpenBSD's. Only useful for compiling against OpenBSD, for configuring abi when returning a struct.",3,null],[12,"is_like_osx","","Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.",3,null],[12,"is_like_solaris","","Whether the target toolchain is like Solaris's. Only useful for compiling against Illumos/Solaris, as they have a different set of linker flags. Defaults to false.",3,null],[12,"is_like_windows","","Whether the target toolchain is like Windows'. Only useful for compiling against Windows, only really used for figuring out how to find libraries, since Windows uses its own library naming convention. Defaults to false.",3,null],[12,"is_like_msvc","","",3,null],[12,"is_like_android","","Whether the target toolchain is like Android's. Only useful for compiling against Android. Defaults to false.",3,null],[12,"linker_is_gnu","","Whether the linker support GNU-like arguments such as -O. Defaults to false.",3,null],[12,"allows_weak_linkage","","The MinGW toolchain has a known issue that prevents it from correctly handling COFF object files with more than 2^15 sections. Since each weak symbol needs its own COMDAT section, weak linkage implies a large number sections that easily exceeds the given limit for larger codebases. Consequently we want a way to disallow weak linkage on some platforms.",3,null],[12,"has_rpath","","Whether the linker support rpaths or not. Defaults to false.",3,null],[12,"no_default_libraries","","Whether to disable linking to the default libraries, typically corresponds to `-nodefaultlibs`. Defaults to true.",3,null],[12,"position_independent_executables","","Dynamically linked executables can be compiled as position independent if the default relocation model of position independent code is not changed. This is a requirement to take advantage of ASLR, as otherwise the functions in the executable are not randomized and can be used during an exploit of a vulnerability in any code.",3,null],[12,"archive_format","","Format that archives should be emitted in. This affects whether we use LLVM to assemble an archive or fall back to the system linker, and currently only \"gnu\" is used to fall into LLVM. Unknown strings cause the system linker to be used.",3,null],[12,"allow_asm","","Is asm!() allowed? Defaults to true.",3,null],[12,"custom_unwind_resume","","Whether the target uses a custom unwind resumption routine. By default LLVM lowers `resume` instructions into calls to `_Unwind_Resume` defined in libgcc.  If this option is enabled, the target must provide `eh_unwind_resume` lang item.",3,null],[12,"lib_allocation_crate","","Default crate for allocation symbols to link against",3,null],[12,"exe_allocation_crate","","",3,null],[12,"has_elf_tls","","Flag indicating whether ELF TLS (e.g. #[thread_local]) is available for this target.",3,null],[12,"obj_is_bitcode","","",3,null],[12,"no_integrated_as","","",3,null],[12,"min_atomic_width","","Don't use this field; instead use the `.min_atomic_width()` method.",3,null],[12,"max_atomic_width","","Don't use this field; instead use the `.max_atomic_width()` method.",3,null],[12,"panic_strategy","","Panic strategy: \"unwind\" or \"abort\"",3,null],[12,"abi_blacklist","","A blacklist of ABIs unsupported by the current target. Note that generic ABIs are considered to be supported on all platforms and cannot be blacklisted.",3,null],[12,"crt_static_default","","Whether or not the CRT is statically linked by default.",3,null],[5,"get_targets","","",null,{"inputs":[],"output":{"name":"box"}}],[6,"TargetResult","","",null,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"targetoptions"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"targetoptions"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"targetoptions"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for compilation, will certainly not work.",3,{"inputs":[],"output":{"name":"targetoptions"}}],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",2,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"abi"}}],[11,"min_atomic_width","","Minimum integer size in bits that this target can perform atomic operations on.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"max_atomic_width","","Maximum integer size in bits that this target can perform atomic operations on.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_abi_supported","","",2,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"from_json","","Load a target descriptor from a JSON object.",2,{"inputs":[{"name":"json"}],"output":{"name":"targetresult"}}],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target triple. Note that it could also just be a bare filename already, so also check for that. If one of the hardcoded targets we know about, just return it directly.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_json","","",2,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[0,"slice","rustc_back","",null,null],[5,"ref_slice","rustc_back::slice","",null,null],[5,"mut_ref_slice","","",null,null],[0,"dynamic_lib","rustc_back","Dynamic library facilities.",null,null],[3,"DynamicLibrary","rustc_back::dynamic_lib","",null,null],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"open","","Lazily open a dynamic library. When passed None it gives a handle to the calling process",4,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",4,{"inputs":[{"name":"path"}],"output":null}],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an environment variable for this platforms dylib search path.",4,null],[11,"envvar","","Returns the environment variable for this process's dynamic library search path",4,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this process",4,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","rustc_back","",0,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"panicstrategy"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"desc","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_json","","",0,{"inputs":[{"name":"self"}],"output":{"name":"json"}}]],"paths":[[4,"PanicStrategy"],[3,"TempDir"],[3,"Target"],[3,"TargetOptions"],[3,"DynamicLibrary"]]};
searchIndex["rustc_bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","rustc_bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["rustc_borrowck"] = {"doc":"","items":[[3,"AnalysisData","rustc_borrowck","Collection of conclusions determined via borrow checker analyses.",null,null],[12,"all_loans","","",0,null],[12,"loans","","",0,null],[12,"move_data","","",0,null],[3,"BorrowckCtxt","","",null,null],[3,"ElaborateDrops","","",null,null],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"build_borrowck_dataflow_data_for_fn","","Accessor for introspective clients inspecting `AnalysisData` and the `BorrowckCtxt` itself , e.g. the flowgraph visualizer.",null,null],[0,"diagnostics","","",null,null],[11,"run_pass","","",1,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"nested_visit_map","","",2,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_fn","","",2,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"bodyid"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_item","","",2,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_trait_item","","",2,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",2,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"is_subregion_of","","",2,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"report","","",2,{"inputs":[{"name":"self"},{"name":"bckerror"}],"output":null}],[11,"report_use_of_moved_value","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"movedvalueusekind"},{"name":"loanpath"},{"name":"move"},{"name":"loanpath"},{"name":"parameterenvironment"}],"output":null}],[11,"report_partial_reinitialization_of_uninitialized_structure","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"loanpath"}],"output":null}],[11,"report_reassigned_immutable_variable","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"loanpath"},{"name":"assignment"}],"output":null}],[11,"span_err","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"struct_span_err","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_err_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"bckerr_to_string","","",2,{"inputs":[{"name":"self"},{"name":"bckerror"}],"output":{"name":"string"}}],[11,"report_aliasability_violation","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"aliasableviolationkind"},{"name":"aliasablereason"}],"output":null}],[11,"note_and_explain_bckerr","","",2,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"bckerror"},{"name":"span"}],"output":null}],[11,"append_loan_path_to_string","","",2,{"inputs":[{"name":"self"},{"name":"loanpath"},{"name":"string"}],"output":null}],[11,"append_autoderefd_loan_path_to_string","","",2,{"inputs":[{"name":"self"},{"name":"loanpath"},{"name":"string"}],"output":null}],[11,"loan_path_to_string","","",2,{"inputs":[{"name":"self"},{"name":"loanpath"}],"output":{"name":"string"}}],[11,"cmt_to_string","","",2,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"string"}}],[11,"cmt_to_path_or_string","","",2,{"inputs":[{"name":"self"},{"name":"cmt"}],"output":{"name":"string"}}],[0,"graphviz","","This module provides linkage between rustc::middle::graph and libgraphviz traits, specialized to attaching borrowck analysis data to rendered labels.",null,null],[6,"Node","rustc_borrowck::graphviz","",null,null],[6,"Edge","","",null,null],[3,"DataflowLabeller","","",null,null],[12,"inner","","",3,null],[12,"variants","","",3,null],[12,"borrowck_ctxt","","",3,null],[12,"analysis_data","","",3,null],[4,"Variant","","",null,null],[13,"Loans","","",4,null],[13,"Moves","","",4,null],[13,"Assigns","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"short_name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"graph_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node_id","","",3,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"id"}}],[11,"node_label","","",3,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"labeltext"}}],[11,"edge_label","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"labeltext"}}],[11,"nodes","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"edges","","",3,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[11,"source","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}],[11,"target","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}],[17,"DIAGNOSTICS","rustc_borrowck","",null,null]],"paths":[[3,"AnalysisData"],[3,"ElaborateDrops"],[3,"BorrowckCtxt"],[3,"DataflowLabeller"],[4,"Variant"]]};
searchIndex["rustc_const_eval"] = {"doc":"constant evaluation on the HIR and code to validate patterns/matches","items":[[3,"ConstEvalErr","rustc_const_eval","",null,null],[12,"span","","",0,null],[12,"kind","","",0,null],[4,"ErrKind","","",null,null],[13,"CannotCast","","",1,null],[13,"CannotCastTo","","",1,null],[13,"InvalidOpForInts","","",1,null],[13,"InvalidOpForBools","","",1,null],[13,"InvalidOpForFloats","","",1,null],[13,"InvalidOpForIntUint","","",1,null],[13,"InvalidOpForUintInt","","",1,null],[13,"NegateOn","","",1,null],[13,"NotOn","","",1,null],[13,"CallOn","","",1,null],[13,"MissingStructField","","",1,null],[13,"NonConstPath","","",1,null],[13,"UnimplementedConstVal","","",1,null],[13,"UnresolvedPath","","",1,null],[13,"ExpectedConstTuple","","",1,null],[13,"ExpectedConstStruct","","",1,null],[13,"TupleIndexOutOfBounds","","",1,null],[13,"IndexedNonVec","","",1,null],[13,"IndexNegative","","",1,null],[13,"IndexNotInt","","",1,null],[13,"IndexOutOfBounds","","",1,null],[12,"len","rustc_const_eval::ErrKind","",1,null],[12,"index","","",1,null],[13,"RepeatCountNotNatural","rustc_const_eval","",1,null],[13,"RepeatCountNotInt","","",1,null],[13,"MiscBinaryOp","","",1,null],[13,"MiscCatchAll","","",1,null],[13,"IndexOpFeatureGated","","",1,null],[13,"Math","","",1,null],[13,"IntermediateUnsignedNegative","","",1,null],[13,"TypeMismatch","","Expected, Got",1,null],[13,"BadType","","",1,null],[13,"ErroneousReferencedConstant","","",1,null],[13,"CharCast","","",1,null],[4,"ConstEvalErrDescription","","",null,null],[13,"Simple","","",2,null],[4,"EvalHint","","Hint to determine how to evaluate constant expressions which might not be type-checked.",null,null],[13,"ExprTypeChecked","","We have a type-checked expression.",3,null],[13,"UncheckedExprHint","","We have an expression which hasn't been type-checked, but we have an idea of what the type will be because of the context. For example, the length of an array is always `usize`. (This is referred to as a hint because it isn't guaranteed to be consistent with what type-checking would compute.)",3,null],[13,"UncheckedExprNoHint","","We have an expression which has not yet been type-checked, and and we have no clue what the type will be.",3,null],[5,"lookup_const_by_id","","`def_id` is the id of the constant. * `substs` is the monomorphized substitutions for the expression.\n",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"option"}],"output":{"name":"option"}}],[5,"report_const_eval_err","","",null,{"inputs":[{"name":"tyctxt"},{"name":"constevalerr"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[5,"fatal_const_eval_err","","",null,null],[5,"note_const_eval_err","","",null,{"inputs":[{"name":"tyctxt"},{"name":"constevalerr"},{"name":"span"},{"name":"str"},{"name":"diagnosticbuilder"}],"output":null}],[5,"eval_const_expr","","",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"}],"output":{"name":"constval"}}],[5,"eval_const_expr_checked","","",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"}],"output":{"name":"evalresult"}}],[5,"eval_const_expr_partial","","Evaluate a constant expression in a context where the expression isn't guaranteed to be evaluatable. `ty_hint` is usually ExprTypeChecked, but a few places need to evaluate constants during type-checking, like computing the length of an array. (See also the FIXME above EvalHint.)",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"},{"name":"evalhint"},{"name":"fnargmap"}],"output":{"name":"evalresult"}}],[5,"compare_const_vals","","",null,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"constval"},{"name":"constval"}],"output":{"name":"result"}}],[5,"compare_lit_exprs","","",null,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"expr"},{"name":"expr"}],"output":{"name":"result"}}],[5,"eval_length","","Returns the value of the length-valued expression",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"},{"name":"str"}],"output":{"name":"result"}}],[0,"diagnostics","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"constevalerr"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errkind"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"constmatherr"}],"output":{"name":"errkind"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"constevalerrdescription"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_oneline","","Return a one-line description of the error, for lints and such",2,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"constevalerrdescription"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"evalhint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"check_match","","",null,null],[5,"check_crate","rustc_const_eval::check_match","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"pattern","rustc_const_eval","",null,null],[3,"FieldPattern","rustc_const_eval::pattern","",null,null],[12,"field","","",4,null],[12,"pattern","","",4,null],[3,"Pattern","","",null,null],[12,"ty","","",5,null],[12,"span","","",5,null],[12,"kind","","",5,null],[3,"PatternContext","","",null,null],[12,"tcx","","",6,null],[12,"errors","","",6,null],[4,"PatternError","","",null,null],[13,"StaticInPattern","","",7,null],[13,"ConstEval","","",7,null],[4,"BindingMode","","",null,null],[13,"ByValue","","",8,null],[13,"ByRef","","",8,null],[4,"PatternKind","","",null,null],[13,"Wild","","",9,null],[13,"Binding","","x, ref x, x @ P, etc",9,null],[12,"mutability","rustc_const_eval::pattern::PatternKind","",9,null],[12,"name","","",9,null],[12,"mode","","",9,null],[12,"var","","",9,null],[12,"ty","","",9,null],[12,"subpattern","","",9,null],[13,"Variant","rustc_const_eval::pattern","Foo(...) or Foo{...} or Foo, where `Foo` is a variant name from an adt with >1 variants",9,null],[12,"adt_def","rustc_const_eval::pattern::PatternKind","",9,null],[12,"variant_index","","",9,null],[12,"subpatterns","","",9,null],[13,"Leaf","rustc_const_eval::pattern","(...), Foo(...), Foo{...}, or Foo, where `Foo` is a variant name from an adt with 1 variant",9,null],[12,"subpatterns","rustc_const_eval::pattern::PatternKind","",9,null],[13,"Deref","rustc_const_eval::pattern","box P, &P, &mut P, etc",9,null],[12,"subpattern","rustc_const_eval::pattern::PatternKind","",9,null],[13,"Constant","rustc_const_eval::pattern","",9,null],[12,"value","rustc_const_eval::pattern::PatternKind","",9,null],[13,"Range","rustc_const_eval::pattern","",9,null],[12,"lo","rustc_const_eval::pattern::PatternKind","",9,null],[12,"hi","","",9,null],[13,"Slice","rustc_const_eval::pattern","matches against a slice, checking the length and extracting elements",9,null],[12,"prefix","rustc_const_eval::pattern::PatternKind","",9,null],[12,"slice","","",9,null],[12,"suffix","","",9,null],[13,"Array","rustc_const_eval::pattern","fixed match against an array, irrefutable",9,null],[12,"prefix","rustc_const_eval::pattern::PatternKind","",9,null],[12,"slice","","",9,null],[12,"suffix","","",9,null],[8,"PatternFoldable","rustc_const_eval::pattern","",null,null],[11,"fold_with","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"super_fold_with","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[8,"PatternFolder","","",null,null],[11,"fold_pattern","","",11,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"pattern"}}],[11,"fold_pattern_kind","","",11,{"inputs":[{"name":"self"},{"name":"patternkind"}],"output":{"name":"patternkind"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"patternerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldpattern"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"patternkind"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_hir","","",5,{"inputs":[{"name":"tyctxt"},{"name":"pat"}],"output":{"name":"self"}}],[11,"new","","",6,{"inputs":[{"name":"tyctxt"}],"output":{"name":"self"}}],[11,"lower_pattern","","",6,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"pattern"}}],[11,"super_fold_with","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_fold_with","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_fold_with","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_fold_with","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[6,"FnArgMap","rustc_const_eval","",null,null],[6,"EvalResult","","",null,null],[6,"CastResult","","",null,null],[17,"DIAGNOSTICS","","",null,null]],"paths":[[3,"ConstEvalErr"],[4,"ErrKind"],[4,"ConstEvalErrDescription"],[4,"EvalHint"],[3,"FieldPattern"],[3,"Pattern"],[3,"PatternContext"],[4,"PatternError"],[4,"BindingMode"],[4,"PatternKind"],[8,"PatternFoldable"],[8,"PatternFolder"]]};
searchIndex["rustc_const_math"] = {"doc":"Rusty Mathematics","items":[[4,"ConstFloat","rustc_const_math","",null,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[13,"FInfer","","",0,null],[12,"f32","rustc_const_math::ConstFloat","",0,null],[12,"f64","","",0,null],[4,"ConstInt","rustc_const_math","",null,null],[13,"I8","","",1,null],[13,"I16","","",1,null],[13,"I32","","",1,null],[13,"I64","","",1,null],[13,"I128","","",1,null],[13,"Isize","","",1,null],[13,"U8","","",1,null],[13,"U16","","",1,null],[13,"U32","","",1,null],[13,"U64","","",1,null],[13,"U128","","",1,null],[13,"Usize","","",1,null],[13,"Infer","","",1,null],[13,"InferSigned","","",1,null],[4,"ConstUsize","","Depending on the target only one variant is ever used in a compilation. Anything else is an error. This invariant is checked at several locations",null,null],[13,"Us16","","",2,null],[13,"Us32","","",2,null],[13,"Us64","","",2,null],[4,"ConstIsize","","Depending on the target only one variant is ever used in a compilation. Anything else is an error. This invariant is checked at several locations",null,null],[13,"Is16","","",3,null],[13,"Is32","","",3,null],[13,"Is64","","",3,null],[4,"ConstMathErr","","",null,null],[13,"NotInRange","","",4,null],[13,"CmpBetweenUnequalTypes","","",4,null],[13,"UnequalTypes","","",4,null],[13,"Overflow","","",4,null],[13,"ShiftNegative","","",4,null],[13,"DivisionByZero","","",4,null],[13,"RemainderByZero","","",4,null],[13,"UnsignedNegation","","",4,null],[13,"ULitOutOfRange","","",4,null],[13,"LitOutOfRange","","",4,null],[4,"Op","","",null,null],[13,"Add","","",5,null],[13,"Sub","","",5,null],[13,"Mul","","",5,null],[13,"Div","","",5,null],[13,"Rem","","",5,null],[13,"Shr","","",5,null],[13,"Shl","","",5,null],[13,"Neg","","",5,null],[13,"BitAnd","","",5,null],[13,"BitOr","","",5,null],[13,"BitXor","","",5,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"constfloat"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"description","","Description of the type, not the value",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_nan","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"new_unsigned","","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",1,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"new_signed","","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",1,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"option"}}],[11,"infer","","If either value is `Infer` or `InferSigned`, try to turn the value into the type of the other value. If both values have no type, don't do anything",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"erase_type","","Turn this value into an `Infer` or an `InferSigned`",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"description","","Description of the type, not the value",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_u128_unchecked","","Erases the type and returns a u128. This is not the same as `-5i8 as u128` but as `-5i8 as i128 as u128`",1,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u32","","Converts the value to a `u32` if it's in the range 0...std::u32::MAX",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","Converts the value to a `u64` if it's in the range 0...std::u64::MAX",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u128","","Converts the value to a `u128` if it's in the range 0...std::u128::MAX",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_negative","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"int_type","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"shl","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"shr","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"not","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"constusize"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":{"name":"bool"}}],[11,"as_u64","","",2,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"u64"}}],[11,"new","","",2,{"inputs":[{"name":"u64"},{"name":"uintty"}],"output":{"name":"result"}}],[11,"new_truncating","","",2,{"inputs":[{"name":"u128"},{"name":"uintty"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"constisize"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"constisize"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"constisize"}],"output":{"name":"bool"}}],[11,"as_i64","","",3,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"i64"}}],[11,"new","","",3,{"inputs":[{"name":"i64"},{"name":"intty"}],"output":{"name":"result"}}],[11,"new_truncating","","",3,{"inputs":[{"name":"i128"},{"name":"intty"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"constmatherr"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"constmatherr"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"constmatherr"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[4,"ConstFloat"],[4,"ConstInt"],[4,"ConstUsize"],[4,"ConstIsize"],[4,"ConstMathErr"],[4,"Op"]]};
searchIndex["rustc_data_structures"] = {"doc":"Various data structures used by the Rust compiler. The intention is that code in here should be not be *specific* to rustc, so that it can be easily unit tested and so forth.","items":[[8,"ToHex","rustc_data_structures","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"array_vec","","A stack-allocated vector, allowing storage of N elements on the stack.",null,null],[3,"ArrayVec","rustc_data_structures::array_vec","",null,null],[3,"Iter","","",null,null],[19,"ManuallyDrop","","",null,null],[8,"Array","","",null,null],[16,"Element","","",1,null],[16,"PartialStorage","","",1,null],[18,"LEN","","",1,null],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_len","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"push","","Panics when the stack vector is full.",2,null],[11,"pop","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"into_iter","","",2,null],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[0,"accumulate_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"IntoIter","rustc_data_structures::accumulate_vec","",null,null],[4,"AccumulateVec","","",null,null],[13,"Array","","",5,null],[13,"Heap","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"accumulatevec"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"accumulatevec"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"accumulatevec"}}],[11,"one","","",5,null],[11,"many","","",5,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pop","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"accumulatevec"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"into_iter","","",5,null],[11,"from","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"accumulatevec"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"accumulatevec"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"small_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"SmallVec","rustc_data_structures::small_vec","",null,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"one","","",7,null],[11,"many","","",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"expect_one","","",7,null],[11,"push","","Will reallocate onto the heap if needed.",7,null],[11,"reserve","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_len","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"insert","","",7,null],[11,"truncate","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"deref","","",7,null],[11,"deref_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"accumulatevec"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"smallvec"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base_n","rustc_data_structures","",null,null],[5,"push_str","rustc_data_structures::base_n","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"string"}],"output":null}],[5,"encode","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"string"}}],[17,"MAX_BASE","","",null,null],[17,"ALPHANUMERIC_ONLY","","",null,null],[0,"bitslice","rustc_data_structures","",null,null],[3,"Union","rustc_data_structures::bitslice","",null,null],[3,"Subtract","","",null,null],[5,"bits_to_string","","",null,null],[5,"bitwise","","",null,null],[6,"Word","","",null,null],[8,"BitSlice","","`BitSlice` provides helper methods for treating a `[Word]` as a bitvector.",null,null],[10,"clear_bit","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set_bit","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_bit","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"BitwiseOperator","","",null,null],[10,"join","","Applies some bit-operation pointwise to each of the bits in the two inputs.",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"blake2b","rustc_data_structures","",null,null],[3,"Blake2bCtx","rustc_data_structures::blake2b","",null,null],[3,"Blake2bHasher","","",null,null],[5,"blake2b","","",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",13,null],[11,"finish","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","",13,null],[11,"finalize","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bitvec","rustc_data_structures","",null,null],[3,"BitVector","rustc_data_structures::bitvec","A very simple BitVector type.",null,null],[3,"BitVectorIter","","",null,null],[3,"BitMatrix","","A \"bit matrix\" is basically a matrix of booleans represented as one gigantic bitvector. In other words, it is as if you have `rows` bitvectors, each of length `columns`.",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bitvector"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"new","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"bitvector"}}],[11,"clear","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"insert","","Returns true if the bit has changed.",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"insert_all","","",14,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"grow","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"iter","","Iterates over indexes of set bits in a sorted order",14,{"inputs":[{"name":"self"}],"output":{"name":"bitvectoriter"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","",14,{"inputs":[{"name":"i"}],"output":{"name":"bitvector"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bitmatrix"}}],[11,"new","","",16,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"bitmatrix"}}],[11,"add","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains","","Do the bits from `source` contain `target`?",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"intersection","","Returns those indices that are reachable from both `a` and `b`. This is an O(n) operation where `n` is the number of elements (somewhat independent from the actual size of the intersection, in particular).",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"merge","","Add the bits from `read` to the bits from `write`, return true if anything changed.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"iter","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bitvectoriter"}}],[0,"fmt_wrap","rustc_data_structures","",null,null],[3,"FmtWrap","rustc_data_structures::fmt_wrap","",null,null],[12,"0","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"graph","rustc_data_structures","A graph module for use in dataflow, region resolution, and elsewhere.",null,null],[3,"Graph","rustc_data_structures::graph","",null,null],[3,"Node","","",null,null],[12,"data","","",18,null],[3,"Edge","","",null,null],[12,"data","","",19,null],[3,"NodeIndex","","",null,null],[12,"0","","",20,null],[3,"EdgeIndex","","",null,null],[12,"0","","",21,null],[3,"Direction","","",null,null],[3,"EnumeratedNodes","","",null,null],[3,"EnumeratedEdges","","",null,null],[3,"AdjacentEdges","","",null,null],[3,"AdjacentTargets","","",null,null],[3,"AdjacentSources","","",null,null],[3,"DepthFirstTraversal","","",null,null],[5,"each_edge_index","","",null,{"inputs":[{"name":"edgeindex"},{"name":"f"}],"output":null}],[17,"INVALID_EDGE_INDEX","","",null,null],[17,"OUTGOING","","",null,null],[17,"INCOMING","","",null,null],[11,"reverse","","",18,null],[11,"reverse","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"graph"}}],[11,"all_nodes","","",23,null],[11,"len_nodes","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"all_edges","","",23,null],[11,"len_edges","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_node_index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"add_node","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"mut_node_data","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"node_data","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"node","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"node"}}],[11,"next_edge_index","","",23,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"add_edge","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"mut_edge_data","","",23,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"edge_data","","",23,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"edge","","",23,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`. This is useful if you wish to modify the graph while walking the linked list of edges.",23,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"edgeindex"}}],[11,"next_adjacent","","Accesses the next edge in a given direction. This is useful if you wish to modify the graph while walking the linked list of edges.",23,{"inputs":[{"name":"self"},{"name":"edgeindex"},{"name":"direction"}],"output":{"name":"edgeindex"}}],[11,"enumerated_nodes","","",23,{"inputs":[{"name":"self"}],"output":{"name":"enumeratednodes"}}],[11,"enumerated_edges","","",23,{"inputs":[{"name":"self"}],"output":{"name":"enumeratededges"}}],[11,"each_node","","Iterates over all edges defined in the graph.",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_edge","","Iterates over all edges defined in the graph",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"outgoing_edges","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentedges"}}],[11,"incoming_edges","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentedges"}}],[11,"adjacent_edges","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"adjacentedges"}}],[11,"successor_nodes","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacenttargets"}}],[11,"predecessor_nodes","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentsources"}}],[11,"iterate_until_fixed_point","","A common use for graphs in our compiler is to perform fixed-point iteration. In this case, each edge represents a constraint, and the nodes themselves are associated with variables or other bitsets. This method facilitates such a computation.",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"depth_traverse","","",23,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"depthfirsttraversal"}}],[11,"is_node_cyclic","","Whether or not a node can be reached from itself.",23,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",29,{"inputs":[{"name":"graph"},{"name":"direction"}],"output":{"name":"self"}}],[11,"with_start_node","","",29,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"self"}}],[11,"reset","","",29,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":null}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"source","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"target","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"source_or_target","","",19,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"nodeindex"}}],[0,"ivar","rustc_data_structures","",null,null],[3,"Ivar","rustc_data_structures::ivar","A write-once variable. When constructed, it is empty, and can only be set once.",null,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"ivar"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"ivar"}],"output":{"name":"bool"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"ivar"}}],[11,"get","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fulfill","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_fulfilled","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"ivar"}}],[0,"indexed_set","rustc_data_structures","",null,null],[3,"IdxSetBuf","rustc_data_structures::indexed_set","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[3,"IdxSet","","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_filled","","Creates set holding every element whose index falls in range 0..universe_size.",31,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_empty","","Creates set holding no elements.",31,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"to_owned","","",32,{"inputs":[{"name":"self"}],"output":{"name":"idxsetbuf"}}],[11,"remove","","Removes `elem` from the set `self`; returns true iff this changed `self`.",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"add","","Adds `elem` to the set `self`; returns true iff this changed `self`.",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"range","","",32,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"range_mut","","",32,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"contains","","Returns true iff set `self` contains `elem`.",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"words","","",32,null],[11,"words_mut","","",32,null],[11,"clone_from","","",32,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":null}],[11,"union","","",32,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[11,"subtract","","",32,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[0,"indexed_vec","rustc_data_structures","",null,null],[3,"IndexVec","rustc_data_structures::indexed_vec","",null,null],[12,"raw","","",33,null],[3,"IntoIdx","","",null,null],[6,"Enumerated","","",null,null],[8,"Idx","","Represents some newtyped `usize` wrapper.",null,null],[10,"new","","",34,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_elem","","",33,{"inputs":[{"name":"t"},{"name":"indexvec"}],"output":{"name":"self"}}],[11,"from_elem_n","","",33,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i"}}],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","",33,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter_enumerated","","",33,{"inputs":[{"name":"self"}],"output":{"name":"enumerated"}}],[11,"iter","","",33,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_enumerated","","",33,{"inputs":[{"name":"self"}],"output":{"name":"enumerated"}}],[11,"indices","","",33,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"iter_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"iter_enumerated_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"enumerated"}}],[11,"last","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shrink_to_fit","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"swap","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"truncate","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"index","","",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"extend","","",33,{"inputs":[{"name":"self"},{"name":"j"}],"output":null}],[11,"from_iter","","",33,{"inputs":[{"name":"j"}],"output":{"name":"self"}}],[11,"into_iter","","",33,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"call_once","","",35,null],[11,"call_mut","","",35,null],[11,"call_once","","",35,null],[11,"call_mut","","",35,null],[0,"obligation_forest","rustc_data_structures","The `ObligationForest` is a utility data structure used in trait matching to track the set of outstanding obligations (those not yet resolved to success or error). It also tracks the \"backtrace\" of each pending obligation (why we are trying to figure this out in the first place). See README.md for a general overview of how to use this class.",null,null],[3,"ObligationForest","rustc_data_structures::obligation_forest","",null,null],[3,"Snapshot","","",null,null],[3,"Outcome","","",null,null],[12,"completed","","Obligations that were completely evaluated, including all (transitive) subobligations.",36,null],[12,"errors","","Backtrace of obligations that were found to be in error.",36,null],[12,"stalled","","If true, then we saw no successful obligations, which means there is no point in further iteration. This is based on the assumption that when trait matching returns `Err` or `Ok(None)`, those results do not affect environmental inference state. (Note that if we invoke `process_obligations` with no pending obligations, stalled will be true.)",36,null],[3,"Error","","",null,null],[12,"error","","",37,null],[12,"backtrace","","",37,null],[8,"ForestObligation","","",null,null],[16,"Predicate","","",38,null],[10,"as_predicate","","",38,null],[8,"ObligationProcessor","","",null,null],[16,"Obligation","","",39,null],[16,"Error","","",39,null],[10,"process_obligation","","",39,null],[10,"process_backedge","","",39,{"inputs":[{"name":"self"},{"name":"i"},{"name":"phantomdata"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"new","","",40,{"inputs":[],"output":{"name":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not yet been fully resolved.",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"start_snapshot","","",40,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"commit_snapshot","","",40,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"rollback_snapshot","","",40,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"in_snapshot","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"register_obligation","","Registers an obligation",40,{"inputs":[{"name":"self"},{"name":"o"}],"output":null}],[11,"to_errors","","Convert all remaining obligations to the given error.",40,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"vec"}}],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"process_obligations","","Perform a pass through the obligation list. This must be called in a loop until `outcome.stalled` is false.",40,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"outcome"}}],[0,"snapshot_map","rustc_data_structures","",null,null],[3,"SnapshotMap","rustc_data_structures::snapshot_map","",null,null],[3,"Snapshot","","",null,null],[11,"new","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",41,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","",41,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"get","","",41,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"snapshot","","",41,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"commit","","",41,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"partial_rollback","","",41,{"inputs":[{"name":"self"},{"name":"snapshot"},{"name":"f"}],"output":null}],[11,"rollback_to","","",41,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"index","","",41,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"v"}}],[0,"snapshot_vec","rustc_data_structures","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either to rollback to the start of the snapshot or commit those changes.",null,null],[3,"SnapshotVec","rustc_data_structures::snapshot_vec","",null,null],[3,"Snapshot","","",null,null],[4,"UndoLog","","",null,null],[13,"OpenSnapshot","","Indicates where a snapshot started.",42,null],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",42,null],[13,"NewElem","","New variable with given index was created.",42,null],[13,"SetElem","","Variable with given index was changed *from* the given value.",42,null],[13,"Other","","Extensible set of actions",42,null],[8,"SnapshotVecDelegate","","",null,null],[16,"Value","","",43,null],[16,"Undo","","",43,null],[10,"reverse","","",43,null],[11,"new","","",44,{"inputs":[],"output":{"name":"snapshotvec"}}],[11,"record","","",44,null],[11,"len","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","",44,null],[11,"get","","",44,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone automatically, so you should be sure call `record()` with some sort of suitable undo action.",44,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if a snapshot is active.",44,null],[11,"start_snapshot","","",44,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"actions_since_snapshot","","",44,null],[11,"rollback_to","","",44,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",44,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"deref","","",44,null],[11,"deref_mut","","",44,null],[11,"index","","",44,null],[11,"index_mut","","",44,null],[11,"extend","","",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"stable_hasher","rustc_data_structures","",null,null],[3,"StableHasher","rustc_data_structures::stable_hasher","When hashing something that ends up affecting properties like symbol names. We want these symbol names to be calculated independent of other factors like what architecture you're compiling *from*.",null,null],[8,"StableHasherResult","","",null,null],[10,"finish","","",45,{"inputs":[{"name":"stablehasher"}],"output":{"name":"self"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",46,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"finalize","","",46,null],[11,"bytes_hashed","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"finish","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",46,null],[11,"write_u8","","",46,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",46,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",46,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",46,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","",46,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","",46,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","",46,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_isize","","",46,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[0,"transitive_relation","rustc_data_structures","",null,null],[3,"TransitiveRelation","rustc_data_structures::transitive_relation","",null,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"transitiverelation"}}],[11,"new","","",47,{"inputs":[],"output":{"name":"transitiverelation"}}],[11,"add","","Indicate that `a < b` (where `<` is this relation)",47,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"contains","","Check whether `a < target` (transitively)",47,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"postdom_upper_bound","","Picks what I am referring to as the \"postdominating\" upper-bound for `a` and `b`. This is usually the least upper bound, but in cases where there is no single least upper bound, it is the \"mutual immediate postdominator\", if you imagine a graph where `a < b` means `a -> b`.",47,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",47,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"vec"}}],[0,"unify","rustc_data_structures","",null,null],[3,"VarValue","rustc_data_structures::unify","Value of a unification key. We implement Tarjan's union-find algorithm: when two keys are unified, one of them is converted into a \"redirect\" pointing at the other. These redirects form a DAG: the roots of the DAG (nodes that are not redirected) are each associated with a value of type `V` and a rank. The rank is used to keep the DAG relatively balanced, which helps keep the running time of the algorithm under control. For more information, see <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.",null,null],[3,"UnificationTable","","Table of unification keys and their values.",null,null],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes made during the snapshot may either be *committed* or *rolled back*.",null,null],[8,"UnifyKey","","This trait is implemented by any type that can serve as a type variable. We call such variables *unification keys*. For example, this trait is implemented by `IntVid`, which represents integral variables.",null,null],[16,"Value","","",48,null],[10,"index","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"from_index","","",48,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"tag","","",48,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[8,"Combine","","This trait is implemented for unify values that can be combined. This relation should be a monoid.",null,null],[10,"combine","","",49,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"varvalue"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"varvalue"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"varvalue"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",51,{"inputs":[],"output":{"name":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either rolled back or committed in a \"LIFO\" (stack) order.",51,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"rollback_to","","Reverses all changes since the last snapshot. Also removes any keys that have been created since then.",51,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",51,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"new_key","","",51,null],[11,"union","","",51,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"k"}}],[11,"find","","",51,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"find_value","","",51,null],[11,"unioned","","",51,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"bool"}}],[11,"unify_var_var","","",51,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"result"}}],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping relationships, if `a_id` already has a value, it must be the same as `b`.",51,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"has_value","","",51,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"probe","","",51,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"unsolved_variables","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"fnv","rustc_data_structures","",null,null],[3,"FnvHasher","rustc_data_structures::fnv","A speedy hash algorithm for node ids and def ids. The hashmap in libcollections by default uses SipHash which isn't quite as speedy as we want. In the compiler we're not really worried about DOS attempts, so we just default to a non-cryptographic hash.",null,null],[5,"FnvHashMap","","",null,{"inputs":[],"output":{"name":"fnvhashmap"}}],[5,"FnvHashSet","","",null,{"inputs":[],"output":{"name":"fnvhashset"}}],[5,"hash","","",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[6,"FnvHashMap","","",null,null],[6,"FnvHashSet","","",null,null],[11,"default","","Creates a `FnvHasher`, with a 64-bit hex initial value.",52,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"write","","",52,null],[11,"finish","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"fx","rustc_data_structures","",null,null],[3,"FxHasher","rustc_data_structures::fx","A speedy hash algorithm for use within rustc. The hashmap in libcollections by default uses SipHash which isn't quite as speedy as we want. In the compiler we're not really worried about DOS attempts, so we use a fast non-cryptographic hash.",null,null],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"fxhashmap"}}],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"fxhashset"}}],[5,"hash","","",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[6,"FxHashMap","","",null,null],[6,"FxHashSet","","",null,null],[11,"default","","",53,{"inputs":[],"output":{"name":"fxhasher"}}],[11,"write","","",53,null],[11,"write_u8","","",53,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",53,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",53,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",53,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"finish","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"tuple_slice","rustc_data_structures","",null,null],[8,"TupleSlice","rustc_data_structures::tuple_slice","Allows to view uniform tuples as slices",null,null],[10,"as_slice","","",54,null],[10,"as_mut_slice","","",54,null],[0,"veccell","rustc_data_structures","",null,null],[3,"VecCell","rustc_data_structures::veccell","",null,null],[11,"with_capacity","","",55,{"inputs":[{"name":"usize"}],"output":{"name":"veccell"}}],[11,"push","","",55,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"usize"}}],[11,"swap","","",55,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"control_flow_graph","rustc_data_structures","",null,null],[3,"Iter","rustc_data_structures::control_flow_graph","Immutable slice iterator",null,null],[0,"dominators","","Algorithm citation: A Simple, Fast Dominance Algorithm. Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy Rice Computer Science TS-06-33870 https://www.cs.rice.edu/~keith/EMBED/dom.pdf",null,null],[3,"Dominators","rustc_data_structures::control_flow_graph::dominators","",null,null],[3,"Iter","","",null,null],[3,"DominatorTree","","",null,null],[3,"IterChildrenOf","","",null,null],[5,"dominators","","",null,{"inputs":[{"name":"g"}],"output":{"name":"dominators"}}],[5,"dominators_given_rpo","","",null,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"dominators"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_reachable","","",56,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"immediate_dominator","","",56,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"node"}}],[11,"dominators","","",56,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"iter"}}],[11,"is_dominated_by","","",56,{"inputs":[{"name":"self"},{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"mutual_dominator_node","","",56,{"inputs":[{"name":"self"},{"name":"node"},{"name":"node"}],"output":{"name":"node"}}],[11,"mutual_dominator","","",56,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"all_immediate_dominators","","",56,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"dominator_tree","","",56,{"inputs":[{"name":"self"}],"output":{"name":"dominatortree"}}],[11,"next","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"root","","",58,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"children","","",58,null],[11,"iter_children_of","","",58,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"iterchildrenof"}}],[11,"next","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"iterate","rustc_data_structures::control_flow_graph","",null,null],[5,"post_order_from","rustc_data_structures::control_flow_graph::iterate","",null,null],[5,"post_order_from_to","","",null,null],[5,"pre_order_walk","","",null,null],[5,"reverse_post_order","","",null,null],[0,"reachable","rustc_data_structures::control_flow_graph","Compute reachability using a simple dataflow propagation. Store end-result in a big NxN bit matrix.",null,null],[3,"Reachability","rustc_data_structures::control_flow_graph::reachable","",null,null],[5,"reachable","","",null,{"inputs":[{"name":"g"}],"output":{"name":"reachability"}}],[5,"reachable_given_rpo","","",null,null],[11,"can_reach","","",60,{"inputs":[{"name":"self"},{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[0,"transpose","rustc_data_structures::control_flow_graph","",null,null],[3,"TransposedGraph","rustc_data_structures::control_flow_graph::transpose","",null,null],[11,"new","","",61,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"with_start","","",61,null],[11,"num_nodes","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"start_node","","",61,null],[11,"predecessors","","",61,null],[11,"successors","","",61,null],[8,"ControlFlowGraph","rustc_data_structures::control_flow_graph","",null,null],[16,"Node","","",62,null],[10,"num_nodes","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"start_node","","",62,null],[10,"predecessors","","",62,null],[10,"successors","","",62,null],[8,"GraphPredecessors","","",null,null],[16,"Item","","",63,null],[16,"Iter","","",63,null],[8,"GraphSuccessors","","",null,null],[16,"Item","","",64,null],[16,"Iter","","",64,null],[0,"flock","rustc_data_structures","Simple file-locking apis for each OS.",null,null],[3,"Lock","rustc_data_structures::flock","",null,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",65,{"inputs":[{"name":"path"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"panicking_new","","",65,{"inputs":[{"name":"path"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"lock"}}],[11,"fmt","rustc_data_structures::control_flow_graph","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"count","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next_back","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",66,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",66,null]],"paths":[[8,"ToHex"],[8,"Array"],[3,"ArrayVec"],[3,"Iter"],[19,"ManuallyDrop"],[4,"AccumulateVec"],[3,"IntoIter"],[3,"SmallVec"],[8,"BitSlice"],[8,"BitwiseOperator"],[3,"Union"],[3,"Subtract"],[3,"Blake2bCtx"],[3,"Blake2bHasher"],[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"FmtWrap"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"EnumeratedNodes"],[3,"EnumeratedEdges"],[3,"AdjacentEdges"],[3,"AdjacentTargets"],[3,"AdjacentSources"],[3,"DepthFirstTraversal"],[3,"Ivar"],[3,"IdxSetBuf"],[3,"IdxSet"],[3,"IndexVec"],[8,"Idx"],[3,"IntoIdx"],[3,"Outcome"],[3,"Error"],[8,"ForestObligation"],[8,"ObligationProcessor"],[3,"ObligationForest"],[3,"SnapshotMap"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[3,"SnapshotVec"],[8,"StableHasherResult"],[3,"StableHasher"],[3,"TransitiveRelation"],[8,"UnifyKey"],[8,"Combine"],[3,"VarValue"],[3,"UnificationTable"],[3,"FnvHasher"],[3,"FxHasher"],[8,"TupleSlice"],[3,"VecCell"],[3,"Dominators"],[3,"Iter"],[3,"DominatorTree"],[3,"IterChildrenOf"],[3,"Reachability"],[3,"TransposedGraph"],[8,"ControlFlowGraph"],[8,"GraphPredecessors"],[8,"GraphSuccessors"],[3,"Lock"],[3,"Iter"]]};
searchIndex["rustc_driver"] = {"doc":"The Rust compiler.","items":[[3,"RustcDefaultCalls","rustc_driver","",null,null],[4,"Compilation","","",null,null],[13,"Stop","","",0,null],[13,"Continue","","",0,null],[5,"abort_on_err","","",null,{"inputs":[{"name":"result"},{"name":"session"}],"output":{"name":"t"}}],[5,"run","","",null,{"inputs":[{"name":"f"}],"output":{"name":"isize"}}],[5,"run_compiler","","",null,null],[5,"release_str","","Returns a version string such as \"0.12.0-dev\".",null,{"inputs":[],"output":{"name":"option"}}],[5,"commit_hash_str","","Returns the full SHA1 hash of HEAD of the Git repo from which rustc was built.",null,{"inputs":[],"output":{"name":"option"}}],[5,"commit_date_str","","Returns the \"commit date\" of HEAD of the Git repo from which rustc was built as a static string.",null,{"inputs":[],"output":{"name":"option"}}],[5,"version","","Prints version information",null,{"inputs":[{"name":"str"},{"name":"matches"}],"output":null}],[5,"handle_options","","Process command line options. Emits messages as appropriate. If compilation should continue, returns a getopts::Matches object parsed from args, otherwise returns None.",null,null],[5,"monitor","","Run a procedure which will detect panics in the compiler and print nicer error messages rather than just failing the test.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"diagnostics_registry","","",null,{"inputs":[],"output":{"name":"registry"}}],[5,"main","","",null,{"inputs":[],"output":null}],[0,"driver","","",null,null],[3,"CompileController","rustc_driver::driver","CompileController is used to customise compilation, it allows compilation to be stopped and/or to call arbitrary code at various points in compilation. It also allows for various flags to be set to influence what information gets collected during compilation.",null,null],[12,"after_parse","","",1,null],[12,"after_expand","","",1,null],[12,"after_hir_lowering","","",1,null],[12,"after_analysis","","",1,null],[12,"after_llvm","","",1,null],[12,"compilation_done","","",1,null],[12,"make_glob_map","","",1,null],[3,"PhaseController","","",null,null],[12,"stop","","",2,null],[12,"run_callback_on_error","","",2,null],[12,"callback","","",2,null],[3,"CompileState","","State that is passed to a callback. What state is available depends on when during compilation the callback is made. See the various constructor methods (`state_*`) in the impl to see which data is provided for any given entry point.",null,null],[12,"input","","",3,null],[12,"session","","",3,null],[12,"krate","","",3,null],[12,"registry","","",3,null],[12,"cstore","","",3,null],[12,"crate_name","","",3,null],[12,"output_filenames","","",3,null],[12,"out_dir","","",3,null],[12,"out_file","","",3,null],[12,"arena","","",3,null],[12,"arenas","","",3,null],[12,"expanded_crate","","",3,null],[12,"hir_crate","","",3,null],[12,"ast_map","","",3,null],[12,"resolutions","","",3,null],[12,"analysis","","",3,null],[12,"tcx","","",3,null],[12,"trans","","",3,null],[3,"ExpansionResult","","",null,null],[12,"expanded_crate","","",4,null],[12,"defs","","",4,null],[12,"analysis","","",4,null],[12,"resolutions","","",4,null],[12,"hir_forest","","",4,null],[5,"compile_input","","",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"input"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"compilecontroller"}],"output":{"name":"compileresult"}}],[5,"anon_src","","The name used for source code that doesn't originate in a file (e.g. source from stdin or a string)",null,{"inputs":[],"output":{"name":"string"}}],[5,"source_name","","",null,{"inputs":[{"name":"input"}],"output":{"name":"string"}}],[5,"phase_1_parse_input","","",null,{"inputs":[{"name":"session"},{"name":"input"}],"output":{"name":"presult"}}],[5,"phase_2_configure_and_expand","","Run the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins (including those from `addl_plugins`), syntax expansion, secondary `cfg` expansion, synthesis of a test harness if one is to be provided, injection of a dependency on the standard library and prelude, and name resolution.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crate"},{"name":"option"},{"name":"str"},{"name":"option"},{"name":"makeglobmap"},{"name":"f"}],"output":{"name":"result"}}],[5,"phase_3_run_analysis_passes","","Run the resolution, typechecking, region checking and other miscellaneous analysis passes on the crate. Return various structures carrying the results of the analysis.",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"crateanalysis"},{"name":"resolutions"},{"name":"droplessarena"},{"name":"globalarenas"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[5,"phase_4_translate_to_llvm","","Run the translation phase to LLVM, after which the AST and analysis can",null,{"inputs":[{"name":"tyctxt"},{"name":"crateanalysis"},{"name":"incrementalhashesmap"}],"output":{"name":"cratetranslation"}}],[5,"phase_5_run_llvm_passes","","Run LLVM itself, producing a bitcode file, assembly file or object file as a side effect.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"}],"output":{"name":"compileresult"}}],[5,"phase_6_link_output","","Run the linker on any artifacts that resulted from the LLVM run. This should produce either a finished executable or library.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"}],"output":null}],[5,"collect_crate_types","","",null,null],[5,"compute_crate_disambiguator","","",null,{"inputs":[{"name":"session"}],"output":{"name":"string"}}],[5,"build_output_filenames","","",null,null],[11,"basic","","",1,{"inputs":[],"output":{"name":"compilecontroller"}}],[11,"basic","","",2,{"inputs":[],"output":{"name":"phasecontroller"}}],[0,"pretty","rustc_driver","The various pretty print routines.",null,null],[4,"PpSourceMode","rustc_driver::pretty","",null,null],[13,"PpmNormal","","",5,null],[13,"PpmEveryBodyLoops","","",5,null],[13,"PpmExpanded","","",5,null],[13,"PpmIdentified","","",5,null],[13,"PpmExpandedIdentified","","",5,null],[13,"PpmExpandedHygiene","","",5,null],[13,"PpmTyped","","",5,null],[4,"PpFlowGraphMode","","",null,null],[13,"Default","","",6,null],[13,"UnlabelledEdges","","Drops the labels from the edges in the flowgraph output. This is mostly for use in the --unpretty flowgraph run-make tests, since the labels are largely uninteresting in those cases and have become a pain to maintain.",6,null],[4,"PpMode","","",null,null],[13,"PpmSource","","",7,null],[13,"PpmHir","","",7,null],[13,"PpmFlowGraph","","",7,null],[13,"PpmMir","","",7,null],[13,"PpmMirCFG","","",7,null],[4,"UserIdentifiedItem","","",null,null],[13,"ItemViaNode","","",8,null],[13,"ItemViaPath","","",8,null],[5,"parse_pretty","","",null,null],[5,"fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"ppmode"}],"output":{"name":"crate"}}],[5,"print_after_parsing","","",null,{"inputs":[{"name":"session"},{"name":"input"},{"name":"crate"},{"name":"ppmode"},{"name":"option"}],"output":null}],[5,"print_after_hir_lowering","","",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"crateanalysis"},{"name":"resolutions"},{"name":"input"},{"name":"crate"},{"name":"str"},{"name":"ppmode"},{"name":"droplessarena"},{"name":"globalarenas"},{"name":"option"},{"name":"option"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"ppsourcemode"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"ppsourcemode"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ppflowgraphmode"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ppflowgraphmode"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"ppmode"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"ppmode"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"ppmode"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"needs_ast_map","","",7,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"needs_analysis","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"useridentifieditem"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"target_features","rustc_driver","",null,null],[5,"add_configuration","rustc_driver::target_features","Add `target_feature = \"...\"` cfgs for a variety of platform specific features (SSE, NEON etc.).",null,{"inputs":[{"name":"crateconfig"},{"name":"session"}],"output":null}],[8,"CompilerCalls","rustc_driver","",null,null],[11,"early_callback","","",9,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"registry"},{"name":"erroroutputtype"}],"output":{"name":"compilation"}}],[11,"late_callback","","",9,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"session"},{"name":"input"},{"name":"option"},{"name":"option"}],"output":{"name":"compilation"}}],[11,"some_input","","",9,null],[11,"no_input","","",9,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"option"},{"name":"option"},{"name":"registry"}],"output":{"name":"option"}}],[10,"build_controller","","",9,{"inputs":[{"name":"self"},{"name":"session"},{"name":"matches"}],"output":{"name":"compilecontroller"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compilation"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compilation"}],"output":{"name":"bool"}}],[11,"and_then","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"compilation"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"rustcdefaultcalls"}}],[11,"early_callback","","",10,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"registry"},{"name":"erroroutputtype"}],"output":{"name":"compilation"}}],[11,"no_input","","",10,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"option"},{"name":"option"},{"name":"registry"}],"output":{"name":"option"}}],[11,"late_callback","","",10,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"session"},{"name":"input"},{"name":"option"},{"name":"option"}],"output":{"name":"compilation"}}],[11,"build_controller","","",10,{"inputs":[{"name":"self"},{"name":"session"},{"name":"matches"}],"output":{"name":"compilecontroller"}}],[11,"list_metadata","","",10,{"inputs":[{"name":"session"},{"name":"matches"},{"name":"input"}],"output":{"name":"compilation"}}]],"paths":[[4,"Compilation"],[3,"CompileController"],[3,"PhaseController"],[3,"CompileState"],[3,"ExpansionResult"],[4,"PpSourceMode"],[4,"PpFlowGraphMode"],[4,"PpMode"],[4,"UserIdentifiedItem"],[8,"CompilerCalls"],[3,"RustcDefaultCalls"]]};
searchIndex["rustc_errors"] = {"doc":"","items":[[3,"CodeSuggestion","rustc_errors","",null,null],[12,"msp","","",0,null],[12,"substitutes","","",0,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also used as the argument to panic at the moment, but that will eventually not be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug` or `.span_bug` rather than a failed assertion, etc.",null,null],[3,"Handler","","A handler deals with errors; certain errors (fatal, bug, unimpl) may cause immediate exit, others log errors for later reporting.",null,null],[12,"can_emit_warnings","","",1,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of the source code covered by the span.",2,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of hypothetical source code, where each `String` is spliced into the lines in place of the code covered by each span.",2,null],[4,"Level","","",null,null],[13,"Bug","","",3,null],[13,"Fatal","","",3,null],[13,"PhaseFatal","","",3,null],[13,"Error","","",3,null],[13,"Warning","","",3,null],[13,"Note","","",3,null],[13,"Help","","",3,null],[13,"Cancelled","","",3,null],[5,"expect","","",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"m"}],"output":{"name":"t"}}],[0,"diagnostic","","",null,null],[3,"Diagnostic","rustc_errors::diagnostic","",null,null],[12,"level","","",4,null],[12,"message","","",4,null],[12,"code","","",4,null],[12,"span","","",4,null],[12,"children","","",4,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",5,null],[12,"message","","",5,null],[12,"span","","",5,null],[12,"render_span","","",5,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"subdiagnostic"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"level"},{"name":"str"}],"output":{"name":"self"}}],[11,"new_with_code","","",4,{"inputs":[{"name":"level"},{"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or cancelled or it will panic when dropped). BEWARE: if this DiagnosticBuilder is an error, then creating it will bump the error count on the Handler and cancelling it won't undo that. If you want to decrement the error count you should use `Handler::cancel`.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"cancelled","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fatal","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_expected_found","","",4,{"inputs":[{"name":"self"},{"name":"display"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",4,{"inputs":[{"name":"self"},{"name":"display"},{"name":"display"},{"name":"display"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_note","","",4,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",4,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",4,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",4,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"set_span","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"message","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","",4,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"copy_details_not_message","","Used by a lint. Copies over all details *but* the \"main message\".",4,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":null}],[0,"diagnostic_builder","rustc_errors","",null,null],[3,"DiagnosticBuilder","rustc_errors::diagnostic_builder","Used for emitting structured error messages and other diagnostic information.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"emit","","Emit the diagnostic.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"span_label","","",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_expected_found","","",6,{"inputs":[{"name":"self"},{"name":"display"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",6,{"inputs":[{"name":"self"},{"name":"display"},{"name":"display"},{"name":"display"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_note","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"set_span","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",6,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"new","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",6,{"inputs":[{"name":"handler"},{"name":"level"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"new_with_code","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",6,{"inputs":[{"name":"handler"},{"name":"level"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"into_diagnostic","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[0,"emitter","rustc_errors","",null,null],[3,"EmitterWriter","rustc_errors::emitter","",null,null],[3,"BufferedWriter","","Buffered writer gives us a way on Unix to buffer up an entire error message before we output it.  This helps to prevent interleaving of multiple error messages when multiple compiler processes error simultaneously",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",7,null],[13,"Always","","",7,null],[13,"Never","","",7,null],[4,"Destination","","",null,null],[13,"Terminal","","",8,null],[13,"BufferedTerminal","","",8,null],[13,"Raw","","",8,null],[6,"BufferedStderr","","",null,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",9,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"emit","","",10,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"colorconfig"}],"output":{"name":"bool"}}],[11,"stderr","","",10,{"inputs":[{"name":"colorconfig"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",10,{"inputs":[{"name":"box"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"write","","",11,null],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"snippet","rustc_errors","",null,null],[3,"SnippetData","rustc_errors::snippet","",null,null],[3,"FileInfo","","",null,null],[3,"Line","","",null,null],[12,"line_index","","",12,null],[12,"annotations","","",12,null],[3,"MultilineAnnotation","","",null,null],[12,"depth","","",13,null],[12,"line_start","","",13,null],[12,"line_end","","",13,null],[12,"start_col","","",13,null],[12,"end_col","","",13,null],[12,"is_primary","","",13,null],[12,"label","","",13,null],[3,"Annotation","","",null,null],[12,"start_col","","Start column, 0-based indexing -- counting *characters*, not utf-8 bytes. Note that it is important that this field goes first, so that when we sort, we sort orderings by start column.",14,null],[12,"end_col","","End column within the line (exclusive)",14,null],[12,"is_primary","","Is this annotation derived from primary span",14,null],[12,"label","","Optional label to display adjacent to the annotation.",14,null],[12,"annotation_type","","Is this a single line, multiline or multiline span minimized down to a smaller span.",14,null],[3,"StyledString","","",null,null],[12,"text","","",15,null],[12,"style","","",15,null],[4,"AnnotationType","","",null,null],[13,"Singleline","","Annotation under a single line of code",16,null],[13,"Minimized","","Annotation under the first character of a multiline span",16,null],[13,"Multiline","","Annotation enclosing the first and last character of a multiline span",16,null],[13,"MultilineStart","","Annotation marking the first character of a fully shown multiline span",16,null],[13,"MultilineEnd","","Annotation marking the last character of a fully shown multiline span",16,null],[13,"MultilineLine","","Line at the left enclosing the lines of a fully shown multiline span",16,null],[4,"Style","","",null,null],[13,"HeaderMsg","","",17,null],[13,"FileNameStyle","","",17,null],[13,"LineAndColumn","","",17,null],[13,"LineNumber","","",17,null],[13,"Quotation","","",17,null],[13,"UnderlinePrimary","","",17,null],[13,"UnderlineSecondary","","",17,null],[13,"LabelPrimary","","",17,null],[13,"LabelSecondary","","",17,null],[13,"OldSchoolNoteText","","",17,null],[13,"OldSchoolNote","","",17,null],[13,"NoStyle","","",17,null],[13,"ErrorCode","","",17,null],[13,"Level","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"snippetdata"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"fileinfo"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"ordering"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"multilineannotation"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"ordering"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"increase_depth","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"as_start","","",13,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"as_end","","",13,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"as_line","","",13,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"annotationtype"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"ordering"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"ordering"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"is_minimized","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multiline","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[0,"registry","rustc_errors","",null,null],[3,"Registry","rustc_errors::registry","",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"registry"}}],[11,"new","","",20,null],[11,"find_description","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[0,"styled_buffer","rustc_errors","",null,null],[3,"StyledBuffer","rustc_errors::styled_buffer","",null,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"styledbuffer"}}],[11,"copy_tabs","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"render","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"putc","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"char"},{"name":"style"}],"output":null}],[11,"puts","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"set_style","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"style"}],"output":null}],[11,"prepend","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"append","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"num_lines","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"CodeMapper","rustc_errors","",null,null],[10,"lookup_char_pos","","",22,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[10,"span_to_lines","","",22,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[10,"span_to_string","","",22,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[10,"span_to_filename","","",22,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[10,"macro_backtrace","","",22,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"vec"}}],[10,"merge_spans","","",22,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"renderspan"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"renderspan"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"renderspan"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"codesuggestion"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"splice_lines","","Returns the assembled code suggestion.",0,{"inputs":[{"name":"self"},{"name":"codemapper"}],"output":{"name":"string"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"with_tty_emitter","","",1,{"inputs":[{"name":"colorconfig"},{"name":"bool"},{"name":"bool"},{"name":"option"}],"output":{"name":"handler"}}],[11,"with_emitter","","",1,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"struct_dummy","","",1,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"cancel","","",1,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"span_fatal","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"mut_span_err","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_err_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_warn","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_warn_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_bug","","",1,null],[11,"delay_span_bug","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_bug_no_panic","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_note_without_error","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",1,null],[11,"fatal","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"warn","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"note_without_error","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"bug","","",1,null],[11,"unimpl","","",1,null],[11,"bump_err_count","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"err_count","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"emit","","",1,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"level"}],"output":null}],[11,"emit_with_code","","",1,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"str"},{"name":"level"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"color","","",3,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"to_str","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"CodeSuggestion"],[3,"Handler"],[4,"RenderSpan"],[4,"Level"],[3,"Diagnostic"],[3,"SubDiagnostic"],[3,"DiagnosticBuilder"],[4,"ColorConfig"],[4,"Destination"],[8,"Emitter"],[3,"EmitterWriter"],[3,"BufferedWriter"],[3,"Line"],[3,"MultilineAnnotation"],[3,"Annotation"],[3,"StyledString"],[4,"AnnotationType"],[4,"Style"],[3,"SnippetData"],[3,"FileInfo"],[3,"Registry"],[3,"StyledBuffer"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["rustc_i128"] = {"doc":"","items":[[6,"i128","rustc_i128","",null,null],[6,"u128","","",null,null]],"paths":[]};
searchIndex["rustc_incremental"] = {"doc":"Support for serializing the dep-graph and reloading it.","items":[[3,"IncrementalHashesMap","rustc_incremental","",null,null],[12,"prev_metadata_hashes","","",0,null],[5,"assert_dep_graph","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"compute_incremental_hashes_map","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"incrementalhashesmap"}}],[5,"load_dep_graph","","If we are in incremental mode, and a previous dep-graph exists, then load up those nodes/edges that are still valid into the dep-graph for this session. (This is assumed to be running very early in compilation, before we've really done any work, but actually it doesn't matter all that much.) See `README.md` for more general overview.",null,{"inputs":[{"name":"tyctxt"},{"name":"incrementalhashesmap"}],"output":null}],[5,"save_dep_graph","","",null,{"inputs":[{"name":"tyctxt"},{"name":"incrementalhashesmap"},{"name":"svh"}],"output":null}],[5,"save_trans_partition","","",null,null],[5,"save_work_products","","",null,{"inputs":[{"name":"session"}],"output":null}],[5,"in_incr_comp_dir","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"finalize_session_directory","","This function finalizes and thus 'publishes' the session directory by renaming it to `s-{timestamp}-{svh}` and releasing the file lock. If there have been compilation errors, however, this function will just delete the presumably invalid session directory.",null,{"inputs":[{"name":"session"},{"name":"svh"}],"output":null}],[11,"new","","",0,{"inputs":[],"output":{"name":"incrementalhashesmap"}}],[11,"insert","","",0,{"inputs":[{"name":"self"},{"name":"depnode"},{"name":"fingerprint"}],"output":{"name":"option"}}],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"fingerprint"}}],[0,"ich","","",null,null],[3,"Fingerprint","rustc_incremental::ich","",null,null],[12,"0","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fingerprint"}}],[11,"zero","","",1,{"inputs":[],"output":{"name":"fingerprint"}}],[11,"from_smaller_hash","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"fingerprint"}}],[11,"to_smaller_hash","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_hex","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"finish","","",1,{"inputs":[{"name":"stablehasher"}],"output":{"name":"self"}}],[6,"IchHasher","rustc_incremental","",null,null]],"paths":[[3,"IncrementalHashesMap"],[3,"Fingerprint"]]};
searchIndex["rustc_lint"] = {"doc":"Lints in the Rust compiler.","items":[[0,"lint","rustc_lint","Lints, aka compiler warnings.",null,null],[3,"Lint","rustc_lint::lint","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",0,null],[12,"default_level","","Default level for the lint.",0,null],[12,"desc","","Description of the lint or the issue it detects.",0,null],[6,"LintArray","","",null,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",1,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_name","","",2,null],[11,"check_crate","","",2,null],[11,"check_crate_post","","",2,null],[11,"check_mod","","",2,null],[11,"check_mod_post","","",2,null],[11,"check_foreign_item","","",2,null],[11,"check_foreign_item_post","","",2,null],[11,"check_item","","",2,null],[11,"check_item_post","","",2,null],[11,"check_local","","",2,null],[11,"check_block","","",2,null],[11,"check_block_post","","",2,null],[11,"check_stmt","","",2,null],[11,"check_arm","","",2,null],[11,"check_pat","","",2,null],[11,"check_decl","","",2,null],[11,"check_expr","","",2,null],[11,"check_expr_post","","",2,null],[11,"check_ty","","",2,null],[11,"check_generics","","",2,null],[11,"check_fn","","",2,null],[11,"check_fn_post","","",2,null],[11,"check_trait_item","","",2,null],[11,"check_trait_item_post","","",2,null],[11,"check_impl_item","","",2,null],[11,"check_impl_item_post","","",2,null],[11,"check_struct_def","","",2,null],[11,"check_struct_def_post","","",2,null],[11,"check_struct_field","","",2,null],[11,"check_variant","","",2,null],[11,"check_variant_post","","",2,null],[11,"check_lifetime","","",2,null],[11,"check_lifetime_def","","",2,null],[11,"check_path","","",2,null],[11,"check_attribute","","",2,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",2,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",2,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",3,null],[11,"check_crate","","",3,null],[11,"check_crate_post","","",3,null],[11,"check_mod","","",3,null],[11,"check_mod_post","","",3,null],[11,"check_foreign_item","","",3,null],[11,"check_foreign_item_post","","",3,null],[11,"check_item","","",3,null],[11,"check_item_post","","",3,null],[11,"check_local","","",3,null],[11,"check_block","","",3,null],[11,"check_block_post","","",3,null],[11,"check_stmt","","",3,null],[11,"check_arm","","",3,null],[11,"check_pat","","",3,null],[11,"check_expr","","",3,null],[11,"check_expr_post","","",3,null],[11,"check_ty","","",3,null],[11,"check_generics","","",3,null],[11,"check_fn","","",3,null],[11,"check_fn_post","","",3,null],[11,"check_trait_item","","",3,null],[11,"check_trait_item_post","","",3,null],[11,"check_impl_item","","",3,null],[11,"check_impl_item_post","","",3,null],[11,"check_struct_def","","",3,null],[11,"check_struct_def_post","","",3,null],[11,"check_struct_field","","",3,null],[11,"check_variant","","",3,null],[11,"check_variant_post","","",3,null],[11,"check_lifetime","","",3,null],[11,"check_lifetime_def","","",3,null],[11,"check_path","","",3,null],[11,"check_path_list_item","","",3,null],[11,"check_attribute","","",3,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",3,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",3,null],[6,"EarlyLintPassObject","","A lint pass boxed up as a trait object.",null,null],[6,"LateLintPassObject","","",null,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",4,null],[13,"Warn","","",4,null],[13,"Deny","","",4,null],[13,"Forbid","","",4,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared in rustc or a plugin.",5,null],[13,"Node","","Lint level was set by an attribute.",5,null],[13,"CommandLine","","Lint level was set by a command-line flag.",5,null],[6,"LevelSource","","",null,null],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[7,"CONST_ERR","rustc_lint::lint::builtin","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"TRANSMUTE_FROM_FN_ITEM_TYPES","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"LIFETIME_UNDERSCORE","","",null,null],[7,"SAFE_EXTERN_STATICS","","",null,null],[7,"PATTERNS_IN_FNS_WITHOUT_BODY","","",null,null],[7,"EXTRA_REQUIREMENT_IN_IMPL","","",null,null],[7,"LEGACY_DIRECTORY_OWNERSHIP","","",null,null],[7,"LEGACY_IMPORTS","","",null,null],[7,"DEPRECATED","","",null,null],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s which are used by other parts of the compiler.",null,null],[3,"FutureIncompatibleInfo","rustc_lint::lint","Extra information for a future incompatibility lint. See the call to `register_future_incompatible` in `librustc_lint/lib.rs` for guidelines.",null,null],[12,"id","","",6,null],[12,"reference","","",6,null],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all) according to `level`.",null,null],[3,"LateContext","","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we're checking in.",7,null],[12,"krate","","The crate being checked.",7,null],[12,"access_levels","","Items accessible from the crate being checked.",7,null],[5,"raw_struct_lint","","",null,null],[5,"check_crate","","Perform lint checking on a crate.",null,null],[3,"LintStore","","Information about the registered lints.",null,null],[8,"IntoEarlyLint","","",null,null],[10,"into_early_lint","","",8,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"earlylint"}}],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint attributes. Writing this as an iterator is an enormous mess.",null,null],[5,"check_ast_crate","","",null,null],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to HIR.",null,null],[12,"sess","","Type context we're checking in.",9,null],[12,"krate","","The crate being checked.",9,null],[8,"LintContext","","",null,null],[10,"sess","","",10,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[10,"lints","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"mut_lints","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"level_stack","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"enter_attrs","","",10,null],[10,"exit_attrs","","",10,null],[11,"current_level","","Get the level of `lint` at the current position of the lint traversal.",10,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"level"}}],[11,"level_src","","",10,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"option"}}],[11,"lookup_and_emit","","",10,null],[11,"lookup","","",10,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",10,null],[11,"early_lint","","",10,null],[11,"struct_span_lint","","",10,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",10,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",10,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",10,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the current lint context, call the provided function, then reset the lints in effect to their previous state.",10,null],[3,"EarlyLint","","When you call `add_lint` on the session, you wind up storing one of these, which records a \"potential lint\" at a particular point.",null,null],[12,"id","","what lint is this? (e.g., `dead_code`)",11,null],[12,"diagnostic","","the main message",11,null],[0,"middle","rustc_lint","",null,null],[0,"astconv_util","rustc_lint::middle","This module contains a simple utility routine used by both `typeck` and `const_eval`. Almost certainly this could (and should) be refactored out of existence.",null,null],[0,"expr_use_visitor","","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_lint::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",12,null],[10,"matched_pat","","",12,null],[10,"consume_pat","","",12,null],[10,"borrow","","",12,null],[10,"decl_without_init","","",12,null],[10,"mutate","","",12,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",13,null],[13,"AddrOf","","",13,null],[13,"AutoRef","","",13,null],[13,"AutoUnsafe","","",13,null],[13,"RefBinding","","",13,null],[13,"OverloadedOperator","","",13,null],[13,"ClosureInvocation","","",13,null],[13,"ForLoop","","",13,null],[13,"MatchDiscriminant","","",13,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",14,null],[13,"Move","","",14,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",15,null],[13,"PatBindingMove","","",15,null],[13,"CaptureMove","","",15,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",16,null],[13,"BorrowingMatch","","",16,null],[13,"CopyingMatch","","",16,null],[13,"MovingMatch","","",16,null],[4,"MutateMode","","",null,null],[13,"Init","","",17,null],[13,"JustWrite","","",17,null],[13,"WriteAndRead","","",17,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_lint::middle","",null,null],[4,"ConstVal","rustc_lint::middle::const_val","",null,null],[13,"Float","","",18,null],[13,"Integral","","",18,null],[13,"Str","","",18,null],[13,"ByteStr","","",18,null],[13,"Bool","","",18,null],[13,"Struct","","",18,null],[13,"Tuple","","",18,null],[13,"Function","","",18,null],[13,"Array","","",18,null],[13,"Repeat","","",18,null],[13,"Char","","",18,null],[13,"Dummy","","A value that only occurs in case `eval_const_expr` reported an error. You should never handle this case. Its sole purpose is to allow more errors to be reported instead of causing a fatal error.",18,null],[0,"cstore","rustc_lint::middle","",null,null],[3,"LinkMeta","rustc_lint::middle::cstore","",null,null],[12,"crate_name","","",19,null],[12,"crate_hash","","",19,null],[3,"CrateSource","","",null,null],[12,"dylib","","",20,null],[12,"rlib","","",20,null],[12,"rmeta","","",20,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",21,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",21,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",21,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",21,null],[4,"LibSource","","",null,null],[13,"Some","","",22,null],[13,"MetadataOnly","","",22,null],[13,"None","","",22,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",23,null],[13,"RequireStatic","","",23,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",24,null],[13,"NativeFramework","","",24,null],[13,"NativeUnknown","","",24,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",25,null],[12,"name","","",25,null],[12,"cfg","","",25,null],[12,"foreign_items","","",25,null],[4,"LoadedMacro","","",null,null],[13,"MacroRules","","",26,null],[13,"ProcMacro","","",26,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",27,null],[12,"span","","span of the extern crate that caused this to be loaded",27,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",27,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",27,null],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"describe_def","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"def_span","","",28,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[10,"stability","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"deprecation","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"visibility","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"closure_kind","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[10,"closure_ty","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"closurety"}}],[10,"item_variances","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_type","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"tys"}}],[10,"visible_parent_map","","",28,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[10,"item_predicates","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[10,"item_super_predicates","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[10,"item_generics","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"item_attrs","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"trait_def","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"traitdef"}}],[10,"adt_def","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"adtdef"}}],[10,"fn_arg_names","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"inherent_implementations_for_type","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"implementations_of_trait","","",28,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[10,"associated_item_def_ids","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"impl_trait_ref","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"impl_polarity","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[10,"custom_coerce_unsized_kind","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"impl_parent","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"trait_of_item","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"associated_item","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"is_const_fn","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_defaulted_trait","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_default_impl","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_foreign_item","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_dllimport_foreign_item","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_statically_included_foreign_item","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"dylib_dependency_formats","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"dep_kind","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"export_macros","","",28,null],[10,"lang_items","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"missing_lang_items","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_staged_api","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_allocator","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_panic_runtime","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_compiler_builtins","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"panic_strategy","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[10,"extern_crate","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"crate_name","","The name of the crate as it is referred to in source code of the current crate.",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"original_crate_name","","The name of the crate as it is stored in the crate's metadata.",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"crate_disambiguator","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"plugin_registrar_fn","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"derive_registrar_fn","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"native_libraries","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"exported_symbols","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_no_builtins","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"retrace_path","","",28,null],[10,"def_key","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"struct_field_names","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"load_macro","","",28,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"maybe_get_item_body","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"item_body_nested_bodies","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[10,"const_is_rvalue_promotable_to_static","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"get_item_mir","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mir"}}],[10,"is_item_mir_available","","",28,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"can_have_local_instance","","Take a look if we need to inline or monomorphize this. If so, we will emit code for this item in the local crate, and thus create a translation item for it.",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"crates","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_libraries","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_link_args","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"metadata_filename","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"metadata_section_name","","",28,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[10,"used_crates","","",28,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[10,"used_crate_source","","",28,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[10,"extern_mod_stmt_cnum","","",28,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"encode_metadata","","",28,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[10,"metadata_encoding_version","","",28,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",29,null],[10,"postprocess","","",29,null],[0,"dataflow","rustc_lint::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_lint::middle::dataflow","",null,null],[13,"Entry","","",30,null],[13,"Exit","","",30,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",33,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",33,null],[0,"dead","rustc_lint::middle","",null,null],[5,"check_crate","rustc_lint::middle::dead","",null,null],[0,"dependency_format","rustc_lint::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_lint::middle::dependency_format","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",34,null],[13,"IncludedFromDylib","","",34,null],[13,"Static","","",34,null],[13,"Dynamic","","",34,null],[5,"calculate","","",null,null],[0,"effect","rustc_lint::middle","Enforces the Rust effect system. Currently there is just one effect, `unsafe`.",null,null],[5,"check_crate","rustc_lint::middle::effect","",null,null],[0,"entry","rustc_lint::middle","",null,null],[5,"find_entry_point","rustc_lint::middle::entry","",null,null],[0,"free_region","rustc_lint::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_lint::middle::free_region","",null,null],[0,"intrinsicck","rustc_lint::middle","",null,null],[5,"check_crate","rustc_lint::middle::intrinsicck","",null,null],[0,"lang_items","rustc_lint::middle","",null,null],[4,"LangItem","rustc_lint::middle::lang_items","",null,null],[13,"CharImplItem","","",35,null],[13,"StrImplItem","","",35,null],[13,"SliceImplItem","","",35,null],[13,"ConstPtrImplItem","","",35,null],[13,"MutPtrImplItem","","",35,null],[13,"I8ImplItem","","",35,null],[13,"I16ImplItem","","",35,null],[13,"I32ImplItem","","",35,null],[13,"I64ImplItem","","",35,null],[13,"I128ImplItem","","",35,null],[13,"IsizeImplItem","","",35,null],[13,"U8ImplItem","","",35,null],[13,"U16ImplItem","","",35,null],[13,"U32ImplItem","","",35,null],[13,"U64ImplItem","","",35,null],[13,"U128ImplItem","","",35,null],[13,"UsizeImplItem","","",35,null],[13,"F32ImplItem","","",35,null],[13,"F64ImplItem","","",35,null],[13,"SendTraitLangItem","","",35,null],[13,"SizedTraitLangItem","","",35,null],[13,"UnsizeTraitLangItem","","",35,null],[13,"CopyTraitLangItem","","",35,null],[13,"SyncTraitLangItem","","",35,null],[13,"DropTraitLangItem","","",35,null],[13,"CoerceUnsizedTraitLangItem","","",35,null],[13,"AddTraitLangItem","","",35,null],[13,"SubTraitLangItem","","",35,null],[13,"MulTraitLangItem","","",35,null],[13,"DivTraitLangItem","","",35,null],[13,"RemTraitLangItem","","",35,null],[13,"NegTraitLangItem","","",35,null],[13,"NotTraitLangItem","","",35,null],[13,"BitXorTraitLangItem","","",35,null],[13,"BitAndTraitLangItem","","",35,null],[13,"BitOrTraitLangItem","","",35,null],[13,"ShlTraitLangItem","","",35,null],[13,"ShrTraitLangItem","","",35,null],[13,"AddAssignTraitLangItem","","",35,null],[13,"SubAssignTraitLangItem","","",35,null],[13,"MulAssignTraitLangItem","","",35,null],[13,"DivAssignTraitLangItem","","",35,null],[13,"RemAssignTraitLangItem","","",35,null],[13,"BitXorAssignTraitLangItem","","",35,null],[13,"BitAndAssignTraitLangItem","","",35,null],[13,"BitOrAssignTraitLangItem","","",35,null],[13,"ShlAssignTraitLangItem","","",35,null],[13,"ShrAssignTraitLangItem","","",35,null],[13,"IndexTraitLangItem","","",35,null],[13,"IndexMutTraitLangItem","","",35,null],[13,"UnsafeCellTypeLangItem","","",35,null],[13,"DerefTraitLangItem","","",35,null],[13,"DerefMutTraitLangItem","","",35,null],[13,"FnTraitLangItem","","",35,null],[13,"FnMutTraitLangItem","","",35,null],[13,"FnOnceTraitLangItem","","",35,null],[13,"EqTraitLangItem","","",35,null],[13,"OrdTraitLangItem","","",35,null],[13,"StrEqFnLangItem","","",35,null],[13,"PanicFnLangItem","","",35,null],[13,"PanicBoundsCheckFnLangItem","","",35,null],[13,"PanicFmtLangItem","","",35,null],[13,"ExchangeMallocFnLangItem","","",35,null],[13,"BoxFreeFnLangItem","","",35,null],[13,"StrDupUniqFnLangItem","","",35,null],[13,"StartFnLangItem","","",35,null],[13,"EhPersonalityLangItem","","",35,null],[13,"EhUnwindResumeLangItem","","",35,null],[13,"MSVCTryFilterLangItem","","",35,null],[13,"OwnedBoxLangItem","","",35,null],[13,"PhantomDataItem","","",35,null],[13,"CovariantTypeItem","","",35,null],[13,"ContravariantTypeItem","","",35,null],[13,"InvariantTypeItem","","",35,null],[13,"CovariantLifetimeItem","","",35,null],[13,"ContravariantLifetimeItem","","",35,null],[13,"InvariantLifetimeItem","","",35,null],[13,"NoCopyItem","","",35,null],[13,"NonZeroItem","","",35,null],[13,"DebugTraitLangItem","","",35,null],[3,"LanguageItems","","",null,null],[12,"items","","",36,null],[12,"missing","","",36,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_lint::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc_lint::middle::liveness","",null,null],[0,"mem_categorization","rustc_lint::middle","Categorization",null,null],[4,"Categorization","rustc_lint::middle::mem_categorization","",null,null],[13,"Rvalue","","",37,null],[13,"StaticItem","","",37,null],[13,"Upvar","","",37,null],[13,"Local","","",37,null],[13,"Deref","","",37,null],[13,"Interior","","",37,null],[13,"Downcast","","",37,null],[3,"Upvar","","",null,null],[12,"id","","",38,null],[12,"kind","","",38,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",39,null],[13,"BorrowedPtr","","`&T`",39,null],[13,"UnsafePtr","","`*T`",39,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",39,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",40,null],[13,"InteriorElement","","",40,null],[4,"FieldName","","",null,null],[13,"NamedField","","",41,null],[13,"PositionalField","","",41,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",42,null],[13,"Pattern","","",42,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",43,null],[13,"OtherElement","","",43,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",44,null],[13,"McDeclared","","",44,null],[13,"McInherited","","",44,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",45,null],[13,"NoteUpvarRef","","",45,null],[13,"NoteNone","","",45,null],[3,"cmt_","","",null,null],[12,"id","","",46,null],[12,"span","","",46,null],[12,"cat","","",46,null],[12,"mutbl","","",46,null],[12,"ty","","",46,null],[12,"note","","",46,null],[6,"cmt","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",47,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",47,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",48,null],[3,"MemCategorizationOptions","","",null,null],[12,"during_closure_kind_inference","","",49,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",50,null],[13,"NonAliasable","","",50,null],[13,"ImmutableUnique","","",50,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",51,null],[13,"AliasableClosure","","",51,null],[13,"AliasableOther","","",51,null],[13,"UnaliasableImmutable","","",51,null],[13,"AliasableStatic","","",51,null],[13,"AliasableStaticMut","","",51,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_lint::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_lint::middle::privacy","",null,null],[13,"Reachable","","",52,null],[13,"Exported","","",52,null],[13,"Public","","",52,null],[3,"AccessLevels","","",null,null],[12,"map","","",53,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[0,"reachable","rustc_lint::middle","",null,null],[5,"find_reachable","rustc_lint::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_lint::middle","This file actually contains two passes related to regions.  The first pass builds up the `scope_map`, which describes the parent links in the region hierarchy.  The second pass infers which types must be region parameterized.",null,null],[3,"CodeExtent","rustc_lint::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling instead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be used to bound the lifetime/region for values.",null,null],[13,"Misc","","",54,null],[13,"CallSiteScope","","",54,null],[12,"fn_id","rustc_lint::middle::region::CodeExtentData","",54,null],[12,"body_id","","",54,null],[13,"ParameterScope","rustc_lint::middle::region","",54,null],[12,"fn_id","rustc_lint::middle::region::CodeExtentData","",54,null],[12,"body_id","","",54,null],[13,"DestructionScope","rustc_lint::middle::region","",54,null],[13,"Remainder","","",54,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",55,null],[12,"body_id","","",55,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",56,null],[12,"first_statement_index","","",56,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[0,"recursion_limit","rustc_lint::middle","",null,null],[5,"update_limits","rustc_lint::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_lint::middle","Name resolution for lifetimes.",null,null],[4,"DefRegion","rustc_lint::middle::resolve_lifetime","",null,null],[13,"DefStaticRegion","","",57,null],[13,"DefEarlyBoundRegion","","",57,null],[13,"DefLateBoundRegion","","",57,null],[13,"DefFreeRegion","","",57,null],[3,"NamedRegionMap","","",null,null],[12,"defs","","",58,null],[12,"late_bound","","",58,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[0,"stability","rustc_lint::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_lint::middle::stability","",null,null],[13,"Unstable","","",59,null],[13,"Stable","","",59,null],[3,"DeprecationEntry","","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",60,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,null],[0,"weak_lang_items","rustc_lint::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_lint::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"session","rustc_lint","",null,null],[0,"config","rustc_lint::session","Contains infrastructure for configuring the compiler, including parsing command line options.",null,null],[3,"Config","rustc_lint::session::config","",null,null],[12,"target","","",61,null],[12,"int_type","","",61,null],[12,"uint_type","","",61,null],[4,"OptLevel","","",null,null],[13,"No","","",62,null],[13,"Less","","",62,null],[13,"Default","","",62,null],[13,"Aggressive","","",62,null],[13,"Size","","",62,null],[13,"SizeMin","","",62,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",63,null],[13,"LimitedDebugInfo","","",63,null],[13,"FullDebugInfo","","",63,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",64,null],[13,"Assembly","","",64,null],[13,"LlvmAssembly","","",64,null],[13,"Metadata","","",64,null],[13,"Object","","",64,null],[13,"Exe","","",64,null],[13,"DepInfo","","",64,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",65,null],[13,"Json","","",65,null],[3,"OutputTypes","","",null,null],[3,"Externs","","",null,null],[3,"Options","","",null,null],[12,"crate_types","","",66,null],[12,"optimize","","",66,null],[12,"debug_assertions","","",66,null],[12,"debuginfo","","",66,null],[12,"lint_opts","","",66,null],[12,"lint_cap","","",66,null],[12,"describe_lints","","",66,null],[12,"output_types","","",66,null],[12,"search_paths","","",66,null],[12,"libs","","",66,null],[12,"maybe_sysroot","","",66,null],[12,"target_triple","","",66,null],[12,"test","","",66,null],[12,"error_format","","",66,null],[12,"incremental","","",66,null],[12,"debugging_opts","","",66,null],[12,"prints","","",66,null],[12,"cg","","",66,null],[12,"externs","","",66,null],[12,"crate_name","","",66,null],[12,"alt_std_name","","",66,null],[12,"unstable_features","","",66,null],[12,"actually_rustdoc","","",66,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",67,null],[13,"Sysroot","","",67,null],[13,"CrateName","","",67,null],[13,"Cfg","","",67,null],[13,"TargetList","","",67,null],[13,"TargetCPUs","","",67,null],[13,"TargetFeatures","","",67,null],[13,"RelocationModels","","",67,null],[13,"CodeModels","","",67,null],[13,"TargetSpec","","",67,null],[4,"Input","","",null,null],[13,"File","","Load source from file",68,null],[13,"Str","","",68,null],[12,"name","rustc_lint::session::config::Input","String that is shown in place of a filename",68,null],[12,"input","","Anonymous source string",68,null],[3,"OutputFilenames","rustc_lint::session::config","",null,null],[12,"out_directory","","",69,null],[12,"out_filestem","","",69,null],[12,"single_output_file","","",69,null],[12,"extra","","",69,null],[12,"outputs","","",69,null],[17,"NUMBERED_CODEGEN_UNIT_MARKER","","Codegen unit names generated by the numbered naming scheme will contain this marker right before the index of the codegen unit.",null,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[4,"EntryFnType","","",null,null],[13,"EntryMain","","",70,null],[13,"EntryStart","","",70,null],[13,"EntryNone","","",70,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",71,null],[13,"CrateTypeDylib","","",71,null],[13,"CrateTypeRlib","","",71,null],[13,"CrateTypeStaticlib","","",71,null],[13,"CrateTypeCdylib","","",71,null],[13,"CrateTypeProcMacro","","",71,null],[4,"Passes","","",null,null],[13,"SomePasses","","",72,null],[13,"AllPasses","","",72,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",73,null],[12,"linker","","",73,null],[12,"link_arg","","",73,null],[12,"link_args","","",73,null],[12,"link_dead_code","","",73,null],[12,"lto","","",73,null],[12,"target_cpu","","",73,null],[12,"target_feature","","",73,null],[12,"passes","","",73,null],[12,"llvm_args","","",73,null],[12,"save_temps","","",73,null],[12,"rpath","","",73,null],[12,"no_prepopulate_passes","","",73,null],[12,"no_vectorize_loops","","",73,null],[12,"no_vectorize_slp","","",73,null],[12,"soft_float","","",73,null],[12,"prefer_dynamic","","",73,null],[12,"no_integrated_as","","",73,null],[12,"no_redzone","","",73,null],[12,"relocation_model","","",73,null],[12,"code_model","","",73,null],[12,"metadata","","",73,null],[12,"extra_filename","","",73,null],[12,"codegen_units","","",73,null],[12,"remark","","",73,null],[12,"no_stack_check","","",73,null],[12,"debuginfo","","",73,null],[12,"opt_level","","",73,null],[12,"debug_assertions","","",73,null],[12,"inline_threshold","","",73,null],[12,"panic","","",73,null],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[6,"CodegenSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",74,null],[12,"time_passes","","",74,null],[12,"count_llvm_insns","","",74,null],[12,"time_llvm_passes","","",74,null],[12,"input_stats","","",74,null],[12,"trans_stats","","",74,null],[12,"asm_comments","","",74,null],[12,"no_verify","","",74,null],[12,"borrowck_stats","","",74,null],[12,"no_landing_pads","","",74,null],[12,"debug_llvm","","",74,null],[12,"meta_stats","","",74,null],[12,"print_link_args","","",74,null],[12,"print_llvm_passes","","",74,null],[12,"ast_json","","",74,null],[12,"ast_json_noexpand","","",74,null],[12,"ls","","",74,null],[12,"save_analysis","","",74,null],[12,"save_analysis_csv","","",74,null],[12,"save_analysis_api","","",74,null],[12,"print_move_fragments","","",74,null],[12,"flowgraph_print_loans","","",74,null],[12,"flowgraph_print_moves","","",74,null],[12,"flowgraph_print_assigns","","",74,null],[12,"flowgraph_print_all","","",74,null],[12,"print_region_graph","","",74,null],[12,"parse_only","","",74,null],[12,"no_trans","","",74,null],[12,"treat_err_as_bug","","",74,null],[12,"continue_parse_after_error","","",74,null],[12,"incremental","","",74,null],[12,"incremental_info","","",74,null],[12,"incremental_dump_hash","","",74,null],[12,"dump_dep_graph","","",74,null],[12,"query_dep_graph","","",74,null],[12,"no_analysis","","",74,null],[12,"extra_plugins","","",74,null],[12,"unstable_options","","",74,null],[12,"force_overflow_checks","","",74,null],[12,"trace_macros","","",74,null],[12,"debug_macros","","",74,null],[12,"enable_nonzeroing_move_hints","","",74,null],[12,"keep_hygiene_data","","",74,null],[12,"keep_ast","","",74,null],[12,"show_span","","",74,null],[12,"print_type_sizes","","",74,null],[12,"print_trans_items","","",74,null],[12,"mir_opt_level","","",74,null],[12,"dump_mir","","",74,null],[12,"dump_mir_dir","","",74,null],[12,"perf_stats","","",74,null],[12,"hir_stats","","",74,null],[12,"mir_stats","","",74,null],[12,"always_encode_mir","","",74,null],[12,"osx_rpath_install_name","","",74,null],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[6,"DebuggingSetter","","",null,null],[17,"DB_OPTIONS","","",null,null],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"hashset"}}],[5,"build_configuration","","",null,{"inputs":[{"name":"session"},{"name":"hashset"}],"output":{"name":"hashset"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[4,"OptionStability","","",null,null],[13,"Stable","","",75,null],[13,"UnstableButNotReally","","",75,null],[13,"Unstable","","",75,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",76,null],[12,"stability","","",76,null],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"hashset"}}],[5,"build_session_options_and_crate_config","","",null,null],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc_lint::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[0,"filesearch","rustc_lint::session","",null,null],[4,"FileMatch","rustc_lint::session::filesearch","",null,null],[13,"FileMatches","","",77,null],[13,"FileDoesntMatch","","",77,null],[3,"FileSearch","","",null,null],[12,"sysroot","","",78,null],[12,"search_paths","","",78,null],[12,"triple","","",78,null],[12,"kind","","",78,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[0,"search_paths","rustc_lint::session","",null,null],[3,"SearchPaths","rustc_lint::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",79,null],[13,"Crate","","",79,null],[13,"Dependency","","",79,null],[13,"Framework","","",79,null],[13,"ExternFlag","","",79,null],[13,"All","","",79,null],[3,"Session","rustc_lint::session","",null,null],[12,"dep_graph","","",80,null],[12,"target","","",80,null],[12,"host","","",80,null],[12,"opts","","",80,null],[12,"cstore","","",80,null],[12,"parse_sess","","",80,null],[12,"entry_fn","","",80,null],[12,"entry_type","","",80,null],[12,"plugin_registrar_fn","","",80,null],[12,"derive_registrar_fn","","",80,null],[12,"default_sysroot","","",80,null],[12,"local_crate_source_file","","",80,null],[12,"working_dir","","",80,null],[12,"lint_store","","",80,null],[12,"lints","","",80,null],[12,"one_time_diagnostics","","Set of (LintId, span, message) tuples tracking lint (sub)diagnostics that have been set once, but should not be set again, in order to avoid redundantly verbose output (Issue #24690).",80,null],[12,"plugin_llvm_passes","","",80,null],[12,"mir_passes","","",80,null],[12,"plugin_attributes","","",80,null],[12,"crate_types","","",80,null],[12,"dependency_formats","","",80,null],[12,"crate_disambiguator","","",80,null],[12,"features","","",80,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization.",80,null],[12,"type_length_limit","","The maximum length of types during monomorphization.",80,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime dependency if it didn't already find one, and this tracks what was injected.",80,null],[12,"injected_panic_runtime","","",80,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of the localized span for the macro body) to the macro name and defintion span in the source crate.",80,null],[12,"perf_stats","","Some measurements that are being gathered during compilation.",80,null],[12,"code_stats","","Data about code being compiled, gathered during compilation.",80,null],[3,"PerfStats","","",null,null],[12,"svh_time","","",81,null],[12,"incr_comp_hashes_time","","",81,null],[12,"incr_comp_hashes_count","","",81,null],[12,"incr_comp_bytes_hashed","","",81,null],[12,"symbol_hash_time","","",81,null],[12,"decode_def_path_tables_time","","",81,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"},{"name":"option"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[4,"IncrCompSession","","Holds data on the current incremental compilation session, if there is one.",null,null],[13,"NotInitialized","","",82,null],[13,"Active","","",82,null],[12,"session_directory","rustc_lint::session::IncrCompSession","",82,null],[12,"lock_file","","",82,null],[13,"Finalized","rustc_lint::session","",82,null],[12,"session_directory","rustc_lint::session::IncrCompSession","",82,null],[13,"InvalidBecauseOfErrors","rustc_lint::session","",82,null],[12,"session_directory","rustc_lint::session::IncrCompSession","",82,null],[5,"early_error","rustc_lint::session","",null,null],[5,"early_warn","","",null,null],[6,"CompileResult","","",null,null],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[3,"FieldInfo","","",null,null],[12,"name","","",83,null],[12,"offset","","",83,null],[12,"size","","",83,null],[12,"align","","",83,null],[4,"SizeKind","","",null,null],[13,"Exact","","",84,null],[13,"Min","","",84,null],[3,"VariantInfo","","",null,null],[12,"name","","",85,null],[12,"kind","","",85,null],[12,"size","","",85,null],[12,"align","","",85,null],[12,"fields","","",85,null],[4,"DataTypeKind","","",null,null],[13,"Struct","","",86,null],[13,"Union","","",86,null],[13,"Enum","","",86,null],[13,"Closure","","",86,null],[3,"CodeStats","","",null,null],[3,"TypeSizeInfo","","",null,null],[12,"kind","","",87,null],[12,"type_description","","",87,null],[12,"align","","",87,null],[12,"overall_size","","",87,null],[12,"opt_discr_size","","",87,null],[12,"variants","","",87,null],[0,"util","rustc_lint","",null,null],[0,"common","rustc_lint::util","",null,null],[17,"FN_OUTPUT_NAME","rustc_lint::util::common","",null,null],[3,"ErrorReported","","",null,null],[5,"time_depth","","Read the current depth of `time()` calls. This is used to encourage indentation across threads.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"set_time_depth","","Set the current depth of `time()` calls. The idea is to call `set_time_depth()` with the result from `time_depth()` in the parent thread.",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"duration_to_secs_str","","",null,{"inputs":[{"name":"duration"}],"output":{"name":"string"}}],[5,"to_readable_str","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"record_time","","",null,{"inputs":[{"name":"cell"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[3,"Indenter","","",null,null],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[8,"MemoizationMap","","",null,null],[16,"Key","","",88,null],[16,"Value","","",88,null],[10,"memoize","","If `key` is present in the map, return the valuee, otherwise invoke `op` and store the value in the map.",88,null],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[0,"ppaux","rustc_lint::util","",null,null],[5,"verbose","rustc_lint::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"parameterized","","",null,null],[0,"nodemap","rustc_lint::util","An efficient hash map for node IDs",null,null],[6,"NodeMap","rustc_lint::util::nodemap","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[6,"FxHashSet","","",null,null],[6,"FxHashMap","","",null,null],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[0,"num","rustc_lint::util","",null,null],[8,"ToPrimitive","rustc_lint::util::num","",null,null],[10,"to_i8","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i16","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i32","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u8","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u16","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u32","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"fs","rustc_lint::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc_lint::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[4,"LinkOrCopy","","",null,null],[13,"Link","","",90,null],[13,"Copy","","",90,null],[5,"link_or_copy","","Copy `p` into `q`, preferring to use hard-linking if possible. If `q` already exists, it is removed first. The result indicates which of the two operations has been performed.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"create_dir_racy","","",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"register_builtins","rustc_lint","Tell the `LintStore` about all the built-in lints (the ones defined in this crate and the ones defined in `rustc::lint::builtin`).",null,{"inputs":[{"name":"lintstore"},{"name":"option"}],"output":null}],[11,"name_lower","rustc_lint::lint","Get the lint's name, with ASCII letters converted to lowercase.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"super_fold_with","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"constval"}}],[11,"sess","rustc_lint::lint","Get the overall compiler `Session` object.",7,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",7,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",7,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",7,null],[11,"exit_attrs","","",7,null],[11,"sess","","Get the overall compiler `Session` object.",9,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",9,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",9,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",9,null],[11,"exit_attrs","","",9,null],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::middle::cstore","",21,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::middle::privacy","",52,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::middle::region","",91,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_lint::middle::stability","",59,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::session::config","",64,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::session::search_paths","",79,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"option"}}],[11,"fmt","rustc_lint::middle::mem_categorization","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session::config","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::cstore","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::lang_items","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::region","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::resolve_lifetime","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::stability","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::session::config","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"drop","rustc_lint::util::common","",92,null],[11,"from","rustc_lint::session","",86,{"inputs":[{"name":"adtkind"}],"output":{"name":"datatypekind"}}],[11,"visit_item","rustc_lint::lint","",9,null],[11,"visit_foreign_item","","",9,null],[11,"visit_pat","","",9,null],[11,"visit_expr","","",9,null],[11,"visit_stmt","","",9,null],[11,"visit_fn","","",9,null],[11,"visit_variant_data","","",9,null],[11,"visit_struct_field","","",9,null],[11,"visit_variant","","",9,null],[11,"visit_ty","","",9,null],[11,"visit_ident","","",9,null],[11,"visit_mod","","",9,null],[11,"visit_local","","",9,null],[11,"visit_block","","",9,null],[11,"visit_arm","","",9,null],[11,"visit_expr_post","","",9,null],[11,"visit_generics","","",9,null],[11,"visit_trait_item","","",9,null],[11,"visit_impl_item","","",9,null],[11,"visit_lifetime","","",9,null],[11,"visit_lifetime_def","","",9,null],[11,"visit_path","","",9,null],[11,"visit_path_list_item","","",9,null],[11,"visit_attribute","","",9,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::mem_categorization","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::privacy","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::region","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::lint","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::expr_use_visitor","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::cstore","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::dataflow","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::dependency_format","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::mem_categorization","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::privacy","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::region","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::resolve_lifetime","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::stability","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session::config","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session::search_paths","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::util::common","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"describe_def","rustc_lint::middle::cstore","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",98,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"closure_kind","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[11,"closure_ty","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"closurety"}}],[11,"item_variances","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_type","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"tys"}}],[11,"visible_parent_map","","",98,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"item_predicates","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_super_predicates","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_generics","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"trait_def","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"traitdef"}}],[11,"adt_def","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"adtdef"}}],[11,"fn_arg_names","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",98,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"associated_item_def_ids","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"impl_trait_ref","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_polarity","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"custom_coerce_unsized_kind","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_parent","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"is_const_fn","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_defaulted_trait","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"lang_items","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"dep_kind","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",98,null],[11,"is_allocator","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"extern_crate","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_name","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",98,null],[11,"def_key","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",98,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"get_item_mir","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mir"}}],[11,"is_item_mir_available","","",98,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"can_have_local_instance","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",98,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",98,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",98,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",98,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",98,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",98,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",98,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",98,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",98,null],[11,"eq","rustc_lint::lint","",93,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::expr_use_visitor","",13,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::cstore","",20,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::dataflow","",33,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::dependency_format","",34,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::lang_items","",35,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::mem_categorization","",37,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"elementkind"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::privacy","",52,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::region","",91,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::resolve_lifetime","",57,{"inputs":[{"name":"self"},{"name":"defregion"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"defregion"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::stability","",59,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::session","",85,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"sizekind"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"datatypekind"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::session::config","",62,{"inputs":[{"name":"self"},{"name":"optlevel"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"debuginfolevel"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"printrequest"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"entryfntype"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"optionstability"}],"output":{"name":"bool"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::session::search_paths","",79,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"bool"}}],[11,"default","rustc_lint::middle::privacy","",53,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"default","rustc_lint::session::config","",65,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"default","rustc_lint::middle::mem_categorization","",49,{"inputs":[],"output":{"name":"memcategorizationoptions"}}],[11,"cmp","rustc_lint::lint","",4,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::middle::cstore","",21,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::middle::privacy","",52,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::middle::region","",91,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"ordering"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"ordering"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"ordering"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::session::config","",64,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"ordering"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::session::search_paths","",79,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"ordering"}}],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_lints","rustc_lint::lint::builtin","",100,null],[11,"nested","rustc_lint::middle::dataflow","",101,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",101,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"nested_visit_map","rustc_lint::lint","Because lints are scoped lexically, we want to walk nested items in the context of the outer item, so enable deep-walking.",7,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_item","","",7,null],[11,"visit_foreign_item","","",7,null],[11,"visit_pat","","",7,null],[11,"visit_expr","","",7,null],[11,"visit_stmt","","",7,null],[11,"visit_fn","","",7,null],[11,"visit_variant_data","","",7,null],[11,"visit_struct_field","","",7,null],[11,"visit_variant","","",7,null],[11,"visit_ty","","",7,null],[11,"visit_name","","",7,null],[11,"visit_mod","","",7,null],[11,"visit_local","","",7,null],[11,"visit_block","","",7,null],[11,"visit_arm","","",7,null],[11,"visit_decl","","",7,null],[11,"visit_generics","","",7,null],[11,"visit_trait_item","","",7,null],[11,"visit_impl_item","","",7,null],[11,"visit_lifetime","","",7,null],[11,"visit_lifetime_def","","",7,null],[11,"visit_path","","",7,null],[11,"visit_attribute","","",7,null],[11,"hash","","",93,null],[11,"hash","","",4,null],[11,"hash","rustc_lint::middle::const_val","",18,null],[11,"hash","rustc_lint::middle::cstore","",24,null],[11,"hash","","",25,null],[11,"hash","rustc_lint::middle::lang_items","",35,null],[11,"hash","rustc_lint::middle::mem_categorization","",39,null],[11,"hash","","",40,null],[11,"hash","","",41,null],[11,"hash","","",42,null],[11,"hash","","",43,null],[11,"hash","","",44,null],[11,"hash","rustc_lint::middle::region","",91,null],[11,"hash","","",54,null],[11,"hash","","",55,null],[11,"hash","","",56,null],[11,"hash","rustc_lint::middle::resolve_lifetime","",57,null],[11,"hash","rustc_lint::middle::stability","",59,null],[11,"hash","rustc_lint::session","",85,null],[11,"hash","","",84,null],[11,"hash","","",83,null],[11,"hash","","",86,null],[11,"hash","","",87,null],[11,"hash","rustc_lint::session::config","",62,null],[11,"hash","","",63,null],[11,"hash","","",64,null],[11,"hash","","",102,null],[11,"hash","","",103,null],[11,"hash","","",71,null],[11,"hash","","",72,null],[11,"hash","rustc_lint::session::search_paths","",79,null],[11,"encode","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::cstore","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::lang_items","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::region","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::resolve_lifetime","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::stability","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::session::config","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","rustc_lint::lint","",0,{"inputs":[{"name":"self"}],"output":{"name":"lint"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"lintid"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lintsource"}}],[11,"clone","rustc_lint::lint::builtin","",100,{"inputs":[{"name":"self"}],"output":{"name":"hardwiredlints"}}],[11,"clone","rustc_lint::middle::expr_use_visitor","",13,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"clone","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"clone","rustc_lint::middle::cstore","",19,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"clone","rustc_lint::middle::dataflow","",30,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"clone","rustc_lint::middle::dependency_format","",34,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"clone","rustc_lint::middle::free_region","",104,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"clone","rustc_lint::middle::lang_items","",35,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"clone","rustc_lint::middle::mem_categorization","",37,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"elementkind"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationoptions"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"clone","rustc_lint::middle::privacy","",52,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"clone","rustc_lint::middle::region","",91,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"codeextentdata"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"callsitescopedata"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","rustc_lint::middle::resolve_lifetime","",57,{"inputs":[{"name":"self"}],"output":{"name":"defregion"}}],[11,"clone","rustc_lint::middle::stability","",59,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"clone","rustc_lint::session","",85,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"sizekind"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"fieldinfo"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"datatypekind"}}],[11,"clone","rustc_lint::session::config","",62,{"inputs":[{"name":"self"}],"output":{"name":"optlevel"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"debuginfolevel"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"outputtype"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"erroroutputtype"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"outputtypes"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"externs"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"printrequest"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"outputfilenames"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"entryfntype"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"cratetype"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"passes"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptions"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"debuggingoptions"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"optionstability"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"rustcoptgroup"}}],[11,"clone","rustc_lint::session::filesearch","",77,{"inputs":[{"name":"self"}],"output":{"name":"filematch"}}],[11,"clone","rustc_lint::session::search_paths","",96,{"inputs":[{"name":"self"}],"output":{"name":"searchpaths"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"pathkind"}}],[11,"clone","rustc_lint::util::common","",97,{"inputs":[{"name":"self"}],"output":{"name":"errorreported"}}],[11,"of","rustc_lint::lint","Get the `LintId` for a `Lint`.",93,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"to_string","","Get the name of the lint.",93,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_str","","Convert a level to a lower-case string.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","Convert a lower-case string to a level.",4,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",105,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",105,null],[11,"get_lint_groups","","",105,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_early_pass","","",105,null],[11,"register_late_pass","","",105,null],[11,"register_future_incompatible","","",105,null],[11,"future_incompatible","","",105,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"option"}}],[11,"register_group","","",105,null],[11,"register_renamed","","",105,null],[11,"register_removed","","",105,null],[11,"process_command_line","","",105,null],[11,"new","rustc_lint::middle::expr_use_visitor","",106,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"with_options","","",106,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"exprusevisitor"}}],[11,"consume_body","","",106,null],[11,"consume_expr","","",106,null],[11,"walk_expr","","",106,null],[11,"description","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"macros_only","rustc_lint::middle::cstore","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_some","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rustc_lint::middle::dataflow","",101,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",101,null],[11,"add_kill","","Indicates that `id` kills `bit`",101,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",101,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",101,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",101,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",101,null],[11,"propagate","","Performs the data flow analysis.",101,null],[11,"new","rustc_lint::middle::free_region","",104,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",104,null],[11,"relate_free_regions_from_predicates","","",104,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship by walking the graph encoded in `map`.  Note that it is possible that `sub != sup` and `sub <= sup` and `sup <= sub` (that is, the user can give two different names to the same lifetime).",104,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",104,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"region"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after inference* and sadly the logic is somewhat duplicated with the code in infer.rs.",104,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"is_static","","Determines whether this free-region is required to be 'static",104,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"from_u32","rustc_lint::middle::lang_items","",35,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",36,null],[11,"item_name","","",36,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",36,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"require_owned_box","","",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",36,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_eq_fn","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strdup_uniq_fn","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_lifetime","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_lifetime","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_lifetime","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_copy_bound","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_mutbl","rustc_lint::middle::mem_categorization","",44,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",44,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",44,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",46,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",46,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",46,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"new","","",48,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_options","","",48,{"inputs":[{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",48,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_expr_autoderefd","","",48,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cat_expr_unadjusted","","",48,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_def","","",48,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"},{"name":"def"}],"output":{"name":"result"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",48,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"cat_rvalue_node","","",48,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_rvalue","","",48,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_field","","",48,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"symbol"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_tup_field","","",48,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"usize"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",48,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"interioroffsetkind"}],"output":{"name":"result"}}],[11,"cat_imm_interior","","",48,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"interiorkind"}],"output":{"name":"rc"}}],[11,"cat_downcast","","",48,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"cat_pattern","","",48,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"pat"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_reachable","rustc_lint::middle::privacy","",53,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",53,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",53,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"node_id","rustc_lint::middle::region","",91,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this CodeExtent.  Note that in general the returned span may not correspond to the span of any node id in the AST.",91,{"inputs":[{"name":"self"},{"name":"regionmaps"},{"name":"map"}],"output":{"name":"option"}}],[11,"node_id","","Returns a node id associated with this scope.",54,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"to_code_extent","","",55,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"codeextent"}}],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody really cares about the contents of these.",107,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"lookup_code_extent","","",107,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"node_extent","","",107,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"item_extent","","",107,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"call_site_extent","","",107,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"opt_destruction_extent","","",107,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"intern_code_extent","","",107,{"inputs":[{"name":"self"},{"name":"codeextentdata"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"intern_node","","",107,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"code_extent_data","","",107,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextentdata"}}],[11,"each_encl_scope","","",107,null],[11,"each_var_scope","","",107,null],[11,"each_rvalue_scope","","",107,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",107,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",107,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",107,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",107,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",107,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"scopes_intersect","","",107,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",107,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",107,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"from_attr_level","rustc_lint::middle::stability","",59,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"same_origin","","",60,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"build","","Construct the stability index for a crate being compiled.",108,null],[11,"new","","",108,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"extension","rustc_lint::session::config","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",102,null],[11,"get","","",102,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"contains_key","","",102,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"keys","","",102,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","",102,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"should_trans","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",103,{"inputs":[{"name":"btreemap"}],"output":{"name":"externs"}}],[11,"get","","",103,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",103,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"single_codegen_unit","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dep_tracking_hash","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"filestem","","",68,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"path","","",69,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"pathbuf"}}],[11,"temp_path","","Get the path where a compilation artifact of the given type for the given codegen unit should be placed on disk. If codegen_unit_name is None, a path distinct from those of any codegen unit will be generated.",69,{"inputs":[{"name":"self"},{"name":"outputtype"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"temp_path_ext","","Like temp_path, but also supports things where there is no corresponding OutputType, like no-opt-bitcode or lto-bitcode.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"filestem","","",69,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_empty","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stable","","",76,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",76,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"for_each_lib_search_path","rustc_lint::session::filesearch","",78,null],[11,"get_lib_path","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"search","","",78,null],[11,"new","","",78,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",78,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tools_search_paths","","",78,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","rustc_lint::session::search_paths","",96,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",96,null],[11,"iter","","",96,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"iter"}}],[11,"local_crate_disambiguator","rustc_lint::session","",80,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"struct_span_warn","","",80,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",80,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",80,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",80,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",80,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",80,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",80,null],[11,"span_fatal_with_code","","",80,null],[11,"fatal","","",80,null],[11,"span_err_or_warn","","",80,null],[11,"span_err","","",80,null],[11,"span_err_with_code","","",80,null],[11,"err","","",80,null],[11,"err_count","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",80,null],[11,"track_errors","","",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"span_warn","","",80,null],[11,"span_warn_with_code","","",80,null],[11,"warn","","",80,null],[11,"opt_span_warn","","",80,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",80,null],[11,"note_without_error","","",80,null],[11,"span_note_without_error","","",80,null],[11,"span_unimpl","","",80,null],[11,"unimpl","","",80,null],[11,"add_lint","","",80,null],[11,"add_lint_diagnostic","","",80,null],[11,"reserve_node_ids","","",80,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"next_node_id","","",80,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"diagnostic","","",80,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"diag_span_note_once","","Analogous to calling `.span_note` on the given DiagnosticBuilder, but deduplicates on lint ID, span, and message for this `Session` if we're not outputting in JSON mode.",80,null],[11,"codemap","","",80,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"verbose","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_passes","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"count_llvm_insns","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_llvm_passes","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trans_stats","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta_stats","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"asm_comments","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"no_verify","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrowck_stats","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_llvm_passes","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lto","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","Returns the panic strategy for this compile session. If the user explicitly selected one using '-C panic', use that, otherwise use the panic strategy defined by the target.",80,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"no_landing_pads","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unstable_options","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"nonzeroing_move_hints","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"must_not_eliminate_frame_pointers","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate_plugin_registrar_symbol","","Returns the symbol name for the registrar function, given the crate Svh and the function DefIndex.",80,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"generate_derive_registrar_symbol","","",80,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"sysroot","","",80,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"target_filesearch","","",80,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"host_filesearch","","",80,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"init_incr_comp_session","","",80,null],[11,"finalize_incr_comp_session","","",80,null],[11,"mark_incr_comp_session_as_invalid","","",80,null],[11,"incr_comp_session_dir","","",80,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"incr_comp_session_dir_opt","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_perf_stats","","",80,null],[11,"new","","",95,{"inputs":[],"output":{"name":"codestats"}}],[11,"record_type_size","","",95,null],[11,"print_type_sizes","","",95,null]],"paths":[[3,"Lint"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[4,"Level"],[4,"LintSource"],[3,"FutureIncompatibleInfo"],[3,"LateContext"],[8,"IntoEarlyLint"],[3,"EarlyContext"],[8,"LintContext"],[3,"EarlyLint"],[8,"Delegate"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[4,"ConstVal"],[3,"LinkMeta"],[3,"CrateSource"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"NativeLibrary"],[4,"LoadedMacro"],[3,"ExternCrate"],[8,"CrateStore"],[8,"CrateLoader"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[4,"KillFrom"],[4,"Linkage"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[8,"ast_node"],[3,"MemCategorizationContext"],[3,"MemCategorizationOptions"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"DefRegion"],[3,"NamedRegionMap"],[4,"StabilityLevel"],[3,"DeprecationEntry"],[3,"Config"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[4,"PathKind"],[3,"Session"],[3,"PerfStats"],[4,"IncrCompSession"],[3,"FieldInfo"],[4,"SizeKind"],[3,"VariantInfo"],[4,"DataTypeKind"],[3,"TypeSizeInfo"],[8,"MemoizationMap"],[8,"ToPrimitive"],[4,"LinkOrCopy"],[3,"CodeExtent"],[3,"Indenter"],[3,"LintId"],[3,"Context"],[3,"CodeStats"],[3,"SearchPaths"],[3,"ErrorReported"],[3,"DummyCrateStore"],[3,"Iter"],[3,"HardwiredLints"],[3,"DataFlowContext"],[3,"OutputTypes"],[3,"Externs"],[3,"FreeRegionMap"],[3,"LintStore"],[3,"ExprUseVisitor"],[3,"RegionMaps"],[3,"Index"]]};
searchIndex["rustc_llvm"] = {"doc":"","items":[[3,"TargetData","rustc_llvm","",null,null],[12,"lltd","","",0,null],[3,"ObjectFile","","",null,null],[12,"llof","","",1,null],[3,"SectionIter","","",null,null],[12,"llsi","","",2,null],[3,"OperandBundleDef","","",null,null],[4,"AttributePlace","","",null,null],[13,"Argument","","",3,null],[13,"Function","","",3,null],[4,"CodeGenOptSize","","",null,null],[13,"CodeGenOptSizeNone","","",4,null],[13,"CodeGenOptSizeDefault","","",4,null],[13,"CodeGenOptSizeAggressive","","",4,null],[4,"RustString_opaque","","",null,null],[5,"AddFunctionAttrStringValue","","",null,{"inputs":[{"name":"valueref"},{"name":"attributeplace"},{"name":"cstr"},{"name":"cstr"}],"output":null}],[5,"LLVMRustStringWriteImpl","","Appending to a Rust string -- used by RawRustStringOstream.",null,null],[5,"SetInstructionCallConv","","",null,{"inputs":[{"name":"valueref"},{"name":"callconv"}],"output":null}],[5,"SetFunctionCallConv","","",null,{"inputs":[{"name":"valueref"},{"name":"callconv"}],"output":null}],[5,"SetUniqueComdat","","",null,{"inputs":[{"name":"moduleref"},{"name":"valueref"}],"output":null}],[5,"UnsetComdat","","",null,{"inputs":[{"name":"valueref"}],"output":null}],[5,"SetUnnamedAddr","","",null,{"inputs":[{"name":"valueref"},{"name":"bool"}],"output":null}],[5,"set_thread_local","","",null,{"inputs":[{"name":"valueref"},{"name":"bool"}],"output":null}],[5,"mk_target_data","","",null,{"inputs":[{"name":"str"}],"output":{"name":"targetdata"}}],[5,"mk_section_iter","","",null,{"inputs":[{"name":"objectfileref"}],"output":{"name":"sectioniter"}}],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun.",null,{"inputs":[{"name":"valueref"},{"name":"c_uint"}],"output":{"name":"valueref"}}],[5,"get_params","","",null,{"inputs":[{"name":"valueref"}],"output":{"name":"vec"}}],[5,"build_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"option"}}],[5,"twine_to_string","","",null,{"inputs":[{"name":"twineref"}],"output":{"name":"string"}}],[5,"debug_loc_to_string","","",null,{"inputs":[{"name":"contextref"},{"name":"debuglocref"}],"output":{"name":"string"}}],[5,"initialize_available_targets","","",null,{"inputs":[],"output":null}],[5,"last_error","","",null,{"inputs":[],"output":{"name":"option"}}],[0,"archive_ro","","A wrapper around LLVM's archive (.a) code",null,null],[3,"ArchiveRO","rustc_llvm::archive_ro","",null,null],[3,"Iter","","",null,null],[3,"Child","","",null,null],[11,"open","","Opens a static archive for read-only purposes. This is more optimized than the `open` method because it uses LLVM's internal `Archive` class rather than shelling out to `ar` for everything.",5,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"raw","","",5,{"inputs":[{"name":"self"}],"output":{"name":"archiveref"}}],[11,"iter","","",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"data","","",7,null],[11,"raw","","",7,{"inputs":[{"name":"self"}],"output":{"name":"archivechildref"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[0,"diagnostic","rustc_llvm","LLVM diagnostic reports.",null,null],[3,"OptimizationDiagnostic","rustc_llvm::diagnostic","",null,null],[12,"kind","","",8,null],[12,"pass_name","","",8,null],[12,"function","","",8,null],[12,"debug_loc","","",8,null],[12,"message","","",8,null],[3,"InlineAsmDiagnostic","","",null,null],[12,"cookie","","",9,null],[12,"message","","",9,null],[12,"instruction","","",9,null],[4,"OptimizationDiagnosticKind","","",null,null],[13,"OptimizationRemark","","",10,null],[13,"OptimizationMissed","","",10,null],[13,"OptimizationAnalysis","","",10,null],[13,"OptimizationAnalysisFPCommute","","",10,null],[13,"OptimizationAnalysisAliasing","","",10,null],[13,"OptimizationFailure","","",10,null],[13,"OptimizationRemarkOther","","",10,null],[4,"Diagnostic","","",null,null],[13,"Optimization","","",11,null],[13,"InlineAsm","","",11,null],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",11,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"optimizationdiagnostickind"}}],[11,"describe","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmdiagnostic"}}],[11,"unpack","","",11,{"inputs":[{"name":"diagnosticinforef"}],"output":{"name":"diagnostic"}}],[0,"ffi","rustc_llvm","",null,null],[4,"LLVMRustResult","rustc_llvm::ffi","",null,null],[13,"Success","","",12,null],[13,"Failure","","",12,null],[4,"CallConv","","LLVM CallingConv::ID. Should we wrap this?",null,null],[13,"CCallConv","","",13,null],[13,"FastCallConv","","",13,null],[13,"ColdCallConv","","",13,null],[13,"X86StdcallCallConv","","",13,null],[13,"X86FastcallCallConv","","",13,null],[13,"ArmAapcsCallConv","","",13,null],[13,"PtxKernel","","",13,null],[13,"X86_64_SysV","","",13,null],[13,"X86_64_Win64","","",13,null],[13,"X86_VectorCall","","",13,null],[4,"Linkage","","LLVMRustLinkage",null,null],[13,"ExternalLinkage","","",14,null],[13,"AvailableExternallyLinkage","","",14,null],[13,"LinkOnceAnyLinkage","","",14,null],[13,"LinkOnceODRLinkage","","",14,null],[13,"WeakAnyLinkage","","",14,null],[13,"WeakODRLinkage","","",14,null],[13,"AppendingLinkage","","",14,null],[13,"InternalLinkage","","",14,null],[13,"PrivateLinkage","","",14,null],[13,"ExternalWeakLinkage","","",14,null],[13,"CommonLinkage","","",14,null],[4,"Visibility","","",null,null],[13,"Default","","",15,null],[13,"Hidden","","",15,null],[13,"Protected","","",15,null],[4,"DiagnosticSeverity","","LLVMDiagnosticSeverity",null,null],[13,"Error","","",16,null],[13,"Warning","","",16,null],[13,"Remark","","",16,null],[13,"Note","","",16,null],[4,"DLLStorageClass","","LLVMDLLStorageClass",null,null],[13,"Default","","",17,null],[13,"DllImport","","",17,null],[13,"DllExport","","",17,null],[4,"Attribute","","Matches LLVMRustAttribute in rustllvm.h Semantically a subset of the C++ enum llvm::Attribute::AttrKind, though it is not ABI compatible (since it's a C++ enum)",null,null],[13,"AlwaysInline","","",18,null],[13,"ByVal","","",18,null],[13,"Cold","","",18,null],[13,"InlineHint","","",18,null],[13,"MinSize","","",18,null],[13,"Naked","","",18,null],[13,"NoAlias","","",18,null],[13,"NoCapture","","",18,null],[13,"NoInline","","",18,null],[13,"NonNull","","",18,null],[13,"NoRedZone","","",18,null],[13,"NoReturn","","",18,null],[13,"NoUnwind","","",18,null],[13,"OptimizeForSize","","",18,null],[13,"ReadOnly","","",18,null],[13,"SExt","","",18,null],[13,"StructRet","","",18,null],[13,"UWTable","","",18,null],[13,"ZExt","","",18,null],[13,"InReg","","",18,null],[4,"IntPredicate","","LLVMIntPredicate",null,null],[13,"IntEQ","","",19,null],[13,"IntNE","","",19,null],[13,"IntUGT","","",19,null],[13,"IntUGE","","",19,null],[13,"IntULT","","",19,null],[13,"IntULE","","",19,null],[13,"IntSGT","","",19,null],[13,"IntSGE","","",19,null],[13,"IntSLT","","",19,null],[13,"IntSLE","","",19,null],[4,"RealPredicate","","LLVMRealPredicate",null,null],[13,"RealPredicateFalse","","",20,null],[13,"RealOEQ","","",20,null],[13,"RealOGT","","",20,null],[13,"RealOGE","","",20,null],[13,"RealOLT","","",20,null],[13,"RealOLE","","",20,null],[13,"RealONE","","",20,null],[13,"RealORD","","",20,null],[13,"RealUNO","","",20,null],[13,"RealUEQ","","",20,null],[13,"RealUGT","","",20,null],[13,"RealUGE","","",20,null],[13,"RealULT","","",20,null],[13,"RealULE","","",20,null],[13,"RealUNE","","",20,null],[13,"RealPredicateTrue","","",20,null],[4,"TypeKind","","LLVMTypeKind",null,null],[13,"Void","","",21,null],[13,"Half","","",21,null],[13,"Float","","",21,null],[13,"Double","","",21,null],[13,"X86_FP80","","",21,null],[13,"FP128","","",21,null],[13,"PPC_FP128","","",21,null],[13,"Label","","",21,null],[13,"Integer","","",21,null],[13,"Function","","",21,null],[13,"Struct","","",21,null],[13,"Array","","",21,null],[13,"Pointer","","",21,null],[13,"Vector","","",21,null],[13,"Metadata","","",21,null],[13,"X86_MMX","","",21,null],[13,"Token","","",21,null],[4,"AtomicRmwBinOp","","LLVMAtomicRmwBinOp",null,null],[13,"AtomicXchg","","",22,null],[13,"AtomicAdd","","",22,null],[13,"AtomicSub","","",22,null],[13,"AtomicAnd","","",22,null],[13,"AtomicNand","","",22,null],[13,"AtomicOr","","",22,null],[13,"AtomicXor","","",22,null],[13,"AtomicMax","","",22,null],[13,"AtomicMin","","",22,null],[13,"AtomicUMax","","",22,null],[13,"AtomicUMin","","",22,null],[4,"AtomicOrdering","","LLVMAtomicOrdering",null,null],[13,"NotAtomic","","",23,null],[13,"Unordered","","",23,null],[13,"Monotonic","","",23,null],[13,"Acquire","","",23,null],[13,"Release","","",23,null],[13,"AcquireRelease","","",23,null],[13,"SequentiallyConsistent","","",23,null],[4,"SynchronizationScope","","LLVMRustSynchronizationScope",null,null],[13,"Other","","",24,null],[13,"SingleThread","","",24,null],[13,"CrossThread","","",24,null],[4,"FileType","","LLVMRustFileType",null,null],[13,"Other","","",25,null],[13,"AssemblyFile","","",25,null],[13,"ObjectFile","","",25,null],[4,"MetadataType","","LLVMMetadataType",null,null],[13,"MD_dbg","","",26,null],[13,"MD_tbaa","","",26,null],[13,"MD_prof","","",26,null],[13,"MD_fpmath","","",26,null],[13,"MD_range","","",26,null],[13,"MD_tbaa_struct","","",26,null],[13,"MD_invariant_load","","",26,null],[13,"MD_alias_scope","","",26,null],[13,"MD_noalias","","",26,null],[13,"MD_nontemporal","","",26,null],[13,"MD_mem_parallel_loop_access","","",26,null],[13,"MD_nonnull","","",26,null],[4,"AsmDialect","","LLVMRustAsmDialect",null,null],[13,"Other","","",27,null],[13,"Att","","",27,null],[13,"Intel","","",27,null],[4,"CodeGenOptLevel","","LLVMRustCodeGenOptLevel",null,null],[13,"Other","","",28,null],[13,"None","","",28,null],[13,"Less","","",28,null],[13,"Default","","",28,null],[13,"Aggressive","","",28,null],[4,"RelocMode","","LLVMRelocMode",null,null],[13,"Default","","",29,null],[13,"Static","","",29,null],[13,"PIC","","",29,null],[13,"DynamicNoPic","","",29,null],[4,"CodeModel","","LLVMRustCodeModel",null,null],[13,"Other","","",30,null],[13,"Default","","",30,null],[13,"JITDefault","","",30,null],[13,"Small","","",30,null],[13,"Kernel","","",30,null],[13,"Medium","","",30,null],[13,"Large","","",30,null],[4,"DiagnosticKind","","LLVMRustDiagnosticKind",null,null],[13,"Other","","",31,null],[13,"InlineAsm","","",31,null],[13,"StackSize","","",31,null],[13,"DebugMetadataVersion","","",31,null],[13,"SampleProfile","","",31,null],[13,"OptimizationRemark","","",31,null],[13,"OptimizationRemarkMissed","","",31,null],[13,"OptimizationRemarkAnalysis","","",31,null],[13,"OptimizationRemarkAnalysisFPCommute","","",31,null],[13,"OptimizationRemarkAnalysisAliasing","","",31,null],[13,"OptimizationRemarkOther","","",31,null],[13,"OptimizationFailure","","",31,null],[4,"ArchiveKind","","LLVMRustArchiveKind",null,null],[13,"Other","","",32,null],[13,"K_GNU","","",32,null],[13,"K_MIPS64","","",32,null],[13,"K_BSD","","",32,null],[13,"K_COFF","","",32,null],[4,"PassKind","","LLVMRustPassKind",null,null],[13,"Other","","",33,null],[13,"Function","","",33,null],[13,"Module","","",33,null],[4,"Module_opaque","","",null,null],[4,"Context_opaque","","",null,null],[4,"Type_opaque","","",null,null],[4,"Value_opaque","","",null,null],[4,"Metadata_opaque","","",null,null],[4,"BasicBlock_opaque","","",null,null],[4,"Builder_opaque","","",null,null],[4,"ExecutionEngine_opaque","","",null,null],[4,"MemoryBuffer_opaque","","",null,null],[4,"PassManager_opaque","","",null,null],[4,"PassManagerBuilder_opaque","","",null,null],[4,"Use_opaque","","",null,null],[4,"TargetData_opaque","","",null,null],[4,"ObjectFile_opaque","","",null,null],[4,"SectionIterator_opaque","","",null,null],[4,"Pass_opaque","","",null,null],[4,"TargetMachine_opaque","","",null,null],[4,"Archive_opaque","","",null,null],[4,"ArchiveIterator_opaque","","",null,null],[4,"ArchiveChild_opaque","","",null,null],[4,"Twine_opaque","","",null,null],[4,"DiagnosticInfo_opaque","","",null,null],[4,"DebugLoc_opaque","","",null,null],[4,"SMDiagnostic_opaque","","",null,null],[4,"RustArchiveMember_opaque","","",null,null],[4,"OperandBundleDef_opaque","","",null,null],[5,"LLVMContextCreate","","",null,null],[5,"LLVMContextDispose","","",null,null],[5,"LLVMGetMDKindIDInContext","","",null,null],[5,"LLVMModuleCreateWithNameInContext","","",null,null],[5,"LLVMGetModuleContext","","",null,null],[5,"LLVMCloneModule","","",null,null],[5,"LLVMDisposeModule","","",null,null],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout.",null,null],[5,"LLVMSetDataLayout","","",null,null],[5,"LLVMDumpModule","","See Module::dump.",null,null],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm.",null,null],[5,"LLVMRustGetTypeKind","","See llvm::LLVMTypeKind::getTypeID.",null,null],[5,"LLVMRustGetValueContext","","See llvm::Value::getContext",null,null],[5,"LLVMInt1TypeInContext","","",null,null],[5,"LLVMInt8TypeInContext","","",null,null],[5,"LLVMInt16TypeInContext","","",null,null],[5,"LLVMInt32TypeInContext","","",null,null],[5,"LLVMInt64TypeInContext","","",null,null],[5,"LLVMIntTypeInContext","","",null,null],[5,"LLVMGetIntTypeWidth","","",null,null],[5,"LLVMFloatTypeInContext","","",null,null],[5,"LLVMDoubleTypeInContext","","",null,null],[5,"LLVMFunctionType","","",null,null],[5,"LLVMGetReturnType","","",null,null],[5,"LLVMCountParamTypes","","",null,null],[5,"LLVMGetParamTypes","","",null,null],[5,"LLVMStructTypeInContext","","",null,null],[5,"LLVMCountStructElementTypes","","",null,null],[5,"LLVMGetStructElementTypes","","",null,null],[5,"LLVMIsPackedStruct","","",null,null],[5,"LLVMRustArrayType","","",null,null],[5,"LLVMPointerType","","",null,null],[5,"LLVMVectorType","","",null,null],[5,"LLVMGetElementType","","",null,null],[5,"LLVMGetArrayLength","","",null,null],[5,"LLVMGetVectorSize","","",null,null],[5,"LLVMVoidTypeInContext","","",null,null],[5,"LLVMRustMetadataTypeInContext","","",null,null],[5,"LLVMTypeOf","","",null,null],[5,"LLVMGetValueName","","",null,null],[5,"LLVMSetValueName","","",null,null],[5,"LLVMReplaceAllUsesWith","","",null,null],[5,"LLVMSetMetadata","","",null,null],[5,"LLVMGetFirstUse","","",null,null],[5,"LLVMGetNextUse","","",null,null],[5,"LLVMGetUser","","",null,null],[5,"LLVMGetOperand","","",null,null],[5,"LLVMConstNull","","",null,null],[5,"LLVMConstICmp","","",null,null],[5,"LLVMConstFCmp","","",null,null],[5,"LLVMGetUndef","","",null,null],[5,"LLVMIsNull","","",null,null],[5,"LLVMIsUndef","","",null,null],[5,"LLVMMDNodeInContext","","",null,null],[5,"LLVMConstInt","","",null,null],[5,"LLVMConstIntOfArbitraryPrecision","","",null,null],[5,"LLVMConstReal","","",null,null],[5,"LLVMConstIntGetZExtValue","","",null,null],[5,"LLVMConstIntGetSExtValue","","",null,null],[5,"LLVMRustConstInt128Get","","",null,null],[5,"LLVMConstStringInContext","","",null,null],[5,"LLVMConstStructInContext","","",null,null],[5,"LLVMConstArray","","",null,null],[5,"LLVMConstVector","","",null,null],[5,"LLVMSizeOf","","",null,null],[5,"LLVMConstNeg","","",null,null],[5,"LLVMConstFNeg","","",null,null],[5,"LLVMConstNot","","",null,null],[5,"LLVMConstAdd","","",null,null],[5,"LLVMConstFAdd","","",null,null],[5,"LLVMConstSub","","",null,null],[5,"LLVMConstFSub","","",null,null],[5,"LLVMConstMul","","",null,null],[5,"LLVMConstFMul","","",null,null],[5,"LLVMConstUDiv","","",null,null],[5,"LLVMConstSDiv","","",null,null],[5,"LLVMConstFDiv","","",null,null],[5,"LLVMConstURem","","",null,null],[5,"LLVMConstSRem","","",null,null],[5,"LLVMConstFRem","","",null,null],[5,"LLVMConstAnd","","",null,null],[5,"LLVMConstOr","","",null,null],[5,"LLVMConstXor","","",null,null],[5,"LLVMConstShl","","",null,null],[5,"LLVMConstLShr","","",null,null],[5,"LLVMConstAShr","","",null,null],[5,"LLVMConstTrunc","","",null,null],[5,"LLVMConstZExt","","",null,null],[5,"LLVMConstUIToFP","","",null,null],[5,"LLVMConstSIToFP","","",null,null],[5,"LLVMConstFPToUI","","",null,null],[5,"LLVMConstFPToSI","","",null,null],[5,"LLVMConstPtrToInt","","",null,null],[5,"LLVMConstIntToPtr","","",null,null],[5,"LLVMConstBitCast","","",null,null],[5,"LLVMConstPointerCast","","",null,null],[5,"LLVMConstIntCast","","",null,null],[5,"LLVMConstFPCast","","",null,null],[5,"LLVMConstExtractValue","","",null,null],[5,"LLVMConstInlineAsm","","",null,null],[5,"LLVMGetGlobalParent","","",null,null],[5,"LLVMIsDeclaration","","",null,null],[5,"LLVMRustGetLinkage","","",null,null],[5,"LLVMRustSetLinkage","","",null,null],[5,"LLVMGetSection","","",null,null],[5,"LLVMSetSection","","",null,null],[5,"LLVMRustGetVisibility","","",null,null],[5,"LLVMRustSetVisibility","","",null,null],[5,"LLVMGetAlignment","","",null,null],[5,"LLVMSetAlignment","","",null,null],[5,"LLVMSetDLLStorageClass","","",null,null],[5,"LLVMIsAGlobalVariable","","",null,null],[5,"LLVMAddGlobal","","",null,null],[5,"LLVMGetNamedGlobal","","",null,null],[5,"LLVMRustGetOrInsertGlobal","","",null,null],[5,"LLVMGetFirstGlobal","","",null,null],[5,"LLVMGetNextGlobal","","",null,null],[5,"LLVMDeleteGlobal","","",null,null],[5,"LLVMGetInitializer","","",null,null],[5,"LLVMSetInitializer","","",null,null],[5,"LLVMSetThreadLocal","","",null,null],[5,"LLVMIsGlobalConstant","","",null,null],[5,"LLVMSetGlobalConstant","","",null,null],[5,"LLVMRustGetNamedValue","","",null,null],[5,"LLVMAddFunction","","",null,null],[5,"LLVMGetNamedFunction","","",null,null],[5,"LLVMGetFirstFunction","","",null,null],[5,"LLVMGetNextFunction","","",null,null],[5,"LLVMRustGetOrInsertFunction","","",null,null],[5,"LLVMSetFunctionCallConv","","",null,null],[5,"LLVMRustAddDereferenceableAttr","","",null,null],[5,"LLVMRustAddFunctionAttribute","","",null,null],[5,"LLVMRustAddFunctionAttrStringValue","","",null,null],[5,"LLVMRustRemoveFunctionAttributes","","",null,null],[5,"LLVMCountParams","","",null,null],[5,"LLVMGetParam","","",null,null],[5,"LLVMBasicBlockAsValue","","",null,null],[5,"LLVMGetBasicBlockParent","","",null,null],[5,"LLVMAppendBasicBlockInContext","","",null,null],[5,"LLVMDeleteBasicBlock","","",null,null],[5,"LLVMGetInstructionParent","","",null,null],[5,"LLVMGetFirstBasicBlock","","",null,null],[5,"LLVMGetFirstInstruction","","",null,null],[5,"LLVMInstructionEraseFromParent","","",null,null],[5,"LLVMSetInstructionCallConv","","",null,null],[5,"LLVMRustAddCallSiteAttribute","","",null,null],[5,"LLVMRustAddDereferenceableCallSiteAttr","","",null,null],[5,"LLVMSetVolatile","","",null,null],[5,"LLVMAddIncoming","","",null,null],[5,"LLVMCreateBuilderInContext","","",null,null],[5,"LLVMPositionBuilder","","",null,null],[5,"LLVMPositionBuilderBefore","","",null,null],[5,"LLVMPositionBuilderAtEnd","","",null,null],[5,"LLVMGetInsertBlock","","",null,null],[5,"LLVMDisposeBuilder","","",null,null],[5,"LLVMSetCurrentDebugLocation","","",null,null],[5,"LLVMGetCurrentDebugLocation","","",null,null],[5,"LLVMSetInstDebugLocation","","",null,null],[5,"LLVMBuildRetVoid","","",null,null],[5,"LLVMBuildRet","","",null,null],[5,"LLVMBuildAggregateRet","","",null,null],[5,"LLVMBuildBr","","",null,null],[5,"LLVMBuildCondBr","","",null,null],[5,"LLVMBuildSwitch","","",null,null],[5,"LLVMBuildIndirectBr","","",null,null],[5,"LLVMRustBuildInvoke","","",null,null],[5,"LLVMRustBuildLandingPad","","",null,null],[5,"LLVMBuildResume","","",null,null],[5,"LLVMBuildUnreachable","","",null,null],[5,"LLVMRustBuildCleanupPad","","",null,null],[5,"LLVMRustBuildCleanupRet","","",null,null],[5,"LLVMRustBuildCatchPad","","",null,null],[5,"LLVMRustBuildCatchRet","","",null,null],[5,"LLVMRustBuildCatchSwitch","","",null,null],[5,"LLVMRustAddHandler","","",null,null],[5,"LLVMRustSetPersonalityFn","","",null,null],[5,"LLVMAddCase","","",null,null],[5,"LLVMAddClause","","",null,null],[5,"LLVMSetCleanup","","",null,null],[5,"LLVMBuildAdd","","",null,null],[5,"LLVMBuildNSWAdd","","",null,null],[5,"LLVMBuildNUWAdd","","",null,null],[5,"LLVMBuildFAdd","","",null,null],[5,"LLVMBuildSub","","",null,null],[5,"LLVMBuildNSWSub","","",null,null],[5,"LLVMBuildNUWSub","","",null,null],[5,"LLVMBuildFSub","","",null,null],[5,"LLVMBuildMul","","",null,null],[5,"LLVMBuildNSWMul","","",null,null],[5,"LLVMBuildNUWMul","","",null,null],[5,"LLVMBuildFMul","","",null,null],[5,"LLVMBuildUDiv","","",null,null],[5,"LLVMBuildSDiv","","",null,null],[5,"LLVMBuildExactSDiv","","",null,null],[5,"LLVMBuildFDiv","","",null,null],[5,"LLVMBuildURem","","",null,null],[5,"LLVMBuildSRem","","",null,null],[5,"LLVMBuildFRem","","",null,null],[5,"LLVMBuildShl","","",null,null],[5,"LLVMBuildLShr","","",null,null],[5,"LLVMBuildAShr","","",null,null],[5,"LLVMBuildAnd","","",null,null],[5,"LLVMBuildOr","","",null,null],[5,"LLVMBuildXor","","",null,null],[5,"LLVMBuildBinOp","","",null,null],[5,"LLVMBuildNeg","","",null,null],[5,"LLVMBuildNSWNeg","","",null,null],[5,"LLVMBuildNUWNeg","","",null,null],[5,"LLVMBuildFNeg","","",null,null],[5,"LLVMBuildNot","","",null,null],[5,"LLVMRustSetHasUnsafeAlgebra","","",null,null],[5,"LLVMBuildAlloca","","",null,null],[5,"LLVMBuildFree","","",null,null],[5,"LLVMBuildLoad","","",null,null],[5,"LLVMBuildStore","","",null,null],[5,"LLVMBuildGEP","","",null,null],[5,"LLVMBuildInBoundsGEP","","",null,null],[5,"LLVMBuildStructGEP","","",null,null],[5,"LLVMBuildGlobalString","","",null,null],[5,"LLVMBuildGlobalStringPtr","","",null,null],[5,"LLVMBuildTrunc","","",null,null],[5,"LLVMBuildZExt","","",null,null],[5,"LLVMBuildSExt","","",null,null],[5,"LLVMBuildFPToUI","","",null,null],[5,"LLVMBuildFPToSI","","",null,null],[5,"LLVMBuildUIToFP","","",null,null],[5,"LLVMBuildSIToFP","","",null,null],[5,"LLVMBuildFPTrunc","","",null,null],[5,"LLVMBuildFPExt","","",null,null],[5,"LLVMBuildPtrToInt","","",null,null],[5,"LLVMBuildIntToPtr","","",null,null],[5,"LLVMBuildBitCast","","",null,null],[5,"LLVMBuildZExtOrBitCast","","",null,null],[5,"LLVMBuildSExtOrBitCast","","",null,null],[5,"LLVMBuildTruncOrBitCast","","",null,null],[5,"LLVMBuildCast","","",null,null],[5,"LLVMBuildPointerCast","","",null,null],[5,"LLVMBuildIntCast","","",null,null],[5,"LLVMBuildFPCast","","",null,null],[5,"LLVMBuildICmp","","",null,null],[5,"LLVMBuildFCmp","","",null,null],[5,"LLVMBuildPhi","","",null,null],[5,"LLVMRustBuildCall","","",null,null],[5,"LLVMBuildSelect","","",null,null],[5,"LLVMBuildVAArg","","",null,null],[5,"LLVMBuildExtractElement","","",null,null],[5,"LLVMBuildInsertElement","","",null,null],[5,"LLVMBuildShuffleVector","","",null,null],[5,"LLVMBuildExtractValue","","",null,null],[5,"LLVMBuildInsertValue","","",null,null],[5,"LLVMBuildIsNull","","",null,null],[5,"LLVMBuildIsNotNull","","",null,null],[5,"LLVMBuildPtrDiff","","",null,null],[5,"LLVMRustBuildAtomicLoad","","",null,null],[5,"LLVMRustBuildAtomicStore","","",null,null],[5,"LLVMRustBuildAtomicCmpXchg","","",null,null],[5,"LLVMBuildAtomicRMW","","",null,null],[5,"LLVMRustBuildAtomicFence","","",null,null],[5,"LLVMIsATerminatorInst","","",null,null],[5,"LLVMIsAStoreInst","","",null,null],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success.",null,null],[5,"LLVMCreateTargetData","","Creates target data from a target layout string.",null,null],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T.",null,null],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding.",null,null],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type.",null,null],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type.",null,null],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a target.",null,null],[5,"LLVMDisposeTargetData","","Disposes target data.",null,null],[5,"LLVMCreatePassManager","","Creates a pass manager.",null,null],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager",null,null],[5,"LLVMDisposePassManager","","Disposes a pass manager.",null,null],[5,"LLVMRunPassManager","","Runs a pass manager on a module.",null,null],[5,"LLVMInitializePasses","","",null,null],[5,"LLVMPassManagerBuilderCreate","","",null,null],[5,"LLVMPassManagerBuilderDispose","","",null,null],[5,"LLVMPassManagerBuilderSetSizeLevel","","",null,null],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","","",null,null],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","","",null,null],[5,"LLVMPassManagerBuilderPopulateModulePassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","","",null,null],[5,"LLVMCreateObjectFile","","Opens an object file.",null,null],[5,"LLVMDisposeObjectFile","","Closes an object file.",null,null],[5,"LLVMGetSections","","Enumerates the sections in an object file.",null,null],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator.",null,null],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section list:",null,null],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section.",null,null],[5,"LLVMGetSectionSize","","Returns the current section size.",null,null],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer.",null,null],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use LLVMDisposeMemoryBuffer() to get rid of it.",null,null],[5,"LLVMStartMultithreaded","","",null,null],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call.",null,null],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up.",null,null],[5,"LLVMStructCreateNamed","","",null,null],[5,"LLVMStructSetBody","","",null,null],[5,"LLVMConstNamedStruct","","",null,null],[5,"LLVMRustSetDebug","","Enables LLVM debug output.",null,null],[5,"LLVMRustInlineAsm","","Prepares inline assembly.",null,null],[5,"LLVMRustDebugMetadataVersion","","",null,null],[5,"LLVMRustVersionMajor","","",null,null],[5,"LLVMRustVersionMinor","","",null,null],[5,"LLVMRustAddModuleFlag","","",null,null],[5,"LLVMRustDIBuilderCreate","","",null,null],[5,"LLVMRustDIBuilderDispose","","",null,null],[5,"LLVMRustDIBuilderFinalize","","",null,null],[5,"LLVMRustDIBuilderCreateCompileUnit","","",null,null],[5,"LLVMRustDIBuilderCreateFile","","",null,null],[5,"LLVMRustDIBuilderCreateSubroutineType","","",null,null],[5,"LLVMRustDIBuilderCreateFunction","","",null,null],[5,"LLVMRustDIBuilderCreateBasicType","","",null,null],[5,"LLVMRustDIBuilderCreatePointerType","","",null,null],[5,"LLVMRustDIBuilderCreateStructType","","",null,null],[5,"LLVMRustDIBuilderCreateMemberType","","",null,null],[5,"LLVMRustDIBuilderCreateLexicalBlock","","",null,null],[5,"LLVMRustDIBuilderCreateLexicalBlockFile","","",null,null],[5,"LLVMRustDIBuilderCreateStaticVariable","","",null,null],[5,"LLVMRustDIBuilderCreateVariable","","",null,null],[5,"LLVMRustDIBuilderCreateArrayType","","",null,null],[5,"LLVMRustDIBuilderCreateVectorType","","",null,null],[5,"LLVMRustDIBuilderGetOrCreateSubrange","","",null,null],[5,"LLVMRustDIBuilderGetOrCreateArray","","",null,null],[5,"LLVMRustDIBuilderInsertDeclareAtEnd","","",null,null],[5,"LLVMRustDIBuilderCreateEnumerator","","",null,null],[5,"LLVMRustDIBuilderCreateEnumerationType","","",null,null],[5,"LLVMRustDIBuilderCreateUnionType","","",null,null],[5,"LLVMSetUnnamedAddr","","",null,null],[5,"LLVMRustDIBuilderCreateTemplateTypeParameter","","",null,null],[5,"LLVMRustDIBuilderCreateNameSpace","","",null,null],[5,"LLVMRustDICompositeTypeSetTypeArray","","",null,null],[5,"LLVMRustDIBuilderCreateDebugLocation","","",null,null],[5,"LLVMRustDIBuilderCreateOpDeref","","",null,null],[5,"LLVMRustDIBuilderCreateOpPlus","","",null,null],[5,"LLVMRustWriteTypeToString","","",null,null],[5,"LLVMRustWriteValueToString","","",null,null],[5,"LLVMIsAConstantInt","","",null,null],[5,"LLVMRustPassKind","","",null,null],[5,"LLVMRustFindAndCreatePass","","",null,null],[5,"LLVMRustAddPass","","",null,null],[5,"LLVMRustHasFeature","","",null,null],[5,"LLVMRustPrintTargetCPUs","","",null,null],[5,"LLVMRustPrintTargetFeatures","","",null,null],[5,"LLVMRustCreateTargetMachine","","",null,null],[5,"LLVMRustDisposeTargetMachine","","",null,null],[5,"LLVMRustAddAnalysisPasses","","",null,null],[5,"LLVMRustAddBuilderLibraryInfo","","",null,null],[5,"LLVMRustConfigurePassManagerBuilder","","",null,null],[5,"LLVMRustAddLibraryInfo","","",null,null],[5,"LLVMRustRunFunctionPassManager","","",null,null],[5,"LLVMRustWriteOutputFile","","",null,null],[5,"LLVMRustPrintModule","","",null,null],[5,"LLVMRustSetLLVMOptions","","",null,null],[5,"LLVMRustPrintPasses","","",null,null],[5,"LLVMRustSetNormalizedTarget","","",null,null],[5,"LLVMRustAddAlwaysInlinePass","","",null,null],[5,"LLVMRustLinkInExternalBitcode","","",null,null],[5,"LLVMRustRunRestrictionPass","","",null,null],[5,"LLVMRustMarkAllFunctionsNounwind","","",null,null],[5,"LLVMRustOpenArchive","","",null,null],[5,"LLVMRustArchiveIteratorNew","","",null,null],[5,"LLVMRustArchiveIteratorNext","","",null,null],[5,"LLVMRustArchiveChildName","","",null,null],[5,"LLVMRustArchiveChildData","","",null,null],[5,"LLVMRustArchiveChildFree","","",null,null],[5,"LLVMRustArchiveIteratorFree","","",null,null],[5,"LLVMRustDestroyArchive","","",null,null],[5,"LLVMRustGetSectionName","","",null,null],[5,"LLVMRustWriteTwineToString","","",null,null],[5,"LLVMContextSetDiagnosticHandler","","",null,null],[5,"LLVMRustUnpackOptimizationDiagnostic","","",null,null],[5,"LLVMRustUnpackInlineAsmDiagnostic","","",null,null],[5,"LLVMRustWriteDiagnosticInfoToString","","",null,null],[5,"LLVMRustGetDiagInfoKind","","",null,null],[5,"LLVMRustWriteDebugLocToString","","",null,null],[5,"LLVMRustSetInlineAsmDiagnosticHandler","","",null,null],[5,"LLVMRustWriteSMDiagnosticToString","","",null,null],[5,"LLVMRustWriteArchive","","",null,null],[5,"LLVMRustArchiveMemberNew","","",null,null],[5,"LLVMRustArchiveMemberFree","","",null,null],[5,"LLVMRustSetDataLayoutFromTargetMachine","","",null,null],[5,"LLVMRustGetModuleDataLayout","","",null,null],[5,"LLVMRustBuildOperandBundleDef","","",null,null],[5,"LLVMRustFreeOperandBundleDef","","",null,null],[5,"LLVMRustPositionBuilderAtStart","","",null,null],[5,"LLVMRustSetComdat","","",null,null],[5,"LLVMRustUnsetComdat","","",null,null],[5,"LLVMRustSetModulePIELevel","","",null,null],[0,"debuginfo","","",null,null],[3,"DIFlags","rustc_llvm::ffi::debuginfo","",null,null],[4,"DIBuilder_opaque","","",null,null],[6,"DIBuilderRef","","",null,null],[6,"DIDescriptor","","",null,null],[6,"DIScope","","",null,null],[6,"DILocation","","",null,null],[6,"DIFile","","",null,null],[6,"DILexicalBlock","","",null,null],[6,"DISubprogram","","",null,null],[6,"DINameSpace","","",null,null],[6,"DIType","","",null,null],[6,"DIBasicType","","",null,null],[6,"DIDerivedType","","",null,null],[6,"DICompositeType","","",null,null],[6,"DIVariable","","",null,null],[6,"DIGlobalVariable","","",null,null],[6,"DIArray","","",null,null],[6,"DISubrange","","",null,null],[6,"DIEnumerator","","",null,null],[6,"DITemplateTypeParameter","","",null,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"diflags"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"ordering"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"diflags"}}],[18,"FlagZero","","",34,null],[18,"FlagPrivate","","",34,null],[18,"FlagProtected","","",34,null],[18,"FlagPublic","","",34,null],[18,"FlagFwdDecl","","",34,null],[18,"FlagAppleBlock","","",34,null],[18,"FlagBlockByrefStruct","","",34,null],[18,"FlagVirtual","","",34,null],[18,"FlagArtificial","","",34,null],[18,"FlagExplicit","","",34,null],[18,"FlagPrototyped","","",34,null],[18,"FlagObjcClassComplete","","",34,null],[18,"FlagObjectPointer","","",34,null],[18,"FlagVector","","",34,null],[18,"FlagStaticMember","","",34,null],[18,"FlagLValueReference","","",34,null],[18,"FlagRValueReference","","",34,null],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[],"output":{"name":"diflags"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[],"output":{"name":"diflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"uint32_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",34,{"inputs":[{"name":"uint32_t"}],"output":{"name":"diflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if all of the flags in `other` are contained within `self`.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"not","","Returns the complement of this set of flags.",34,{"inputs":[{"name":"self"}],"output":{"name":"diflags"}}],[6,"Opcode","rustc_llvm::ffi","",null,null],[6,"Bool","","",null,null],[6,"ModuleRef","","",null,null],[6,"ContextRef","","",null,null],[6,"TypeRef","","",null,null],[6,"ValueRef","","",null,null],[6,"MetadataRef","","",null,null],[6,"BasicBlockRef","","",null,null],[6,"BuilderRef","","",null,null],[6,"ExecutionEngineRef","","",null,null],[6,"MemoryBufferRef","","",null,null],[6,"PassManagerRef","","",null,null],[6,"PassManagerBuilderRef","","",null,null],[6,"UseRef","","",null,null],[6,"TargetDataRef","","",null,null],[6,"ObjectFileRef","","",null,null],[6,"SectionIteratorRef","","",null,null],[6,"PassRef","","",null,null],[6,"TargetMachineRef","","",null,null],[6,"ArchiveRef","","",null,null],[6,"ArchiveIteratorRef","","",null,null],[6,"ArchiveChildRef","","",null,null],[6,"TwineRef","","",null,null],[6,"DiagnosticInfoRef","","",null,null],[6,"DebugLocRef","","",null,null],[6,"SMDiagnosticRef","","",null,null],[6,"RustArchiveMemberRef","","",null,null],[6,"OperandBundleDefRef","","",null,null],[6,"DiagnosticHandler","","",null,null],[6,"InlineAsmDiagHandler","","",null,null],[17,"True","","",null,null],[17,"False","","",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"llvmrustresult"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"llvmrustresult"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"callconv"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"callconv"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticseverity"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"dllstorageclass"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"intpredicate"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"realpredicate"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"typekind"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"atomicrmwbinop"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"atomicordering"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"synchronizationscope"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"metadatatype"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"asmdialect"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptlevel"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"codegenoptlevel"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"relocmode"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"relocmode"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"codemodel"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"diagnostickind"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"archivekind"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"passkind"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"passkind"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"RustStringRef","rustc_llvm","",null,null],[11,"into_result","rustc_llvm::ffi","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","rustc_llvm","",3,{"inputs":[{"name":"self"}],"output":{"name":"attributeplace"}}],[11,"ReturnValue","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"as_uint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptsize"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"codegenoptsize"}],"output":{"name":"bool"}}],[11,"from_str","rustc_llvm::ffi","",32,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"apply_llfn","","",18,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"}],"output":null}],[11,"apply_callsite","","",18,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"}],"output":null}],[11,"unapply_llfn","","",18,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"}],"output":null}],[11,"toggle_llfn","","",18,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"},{"name":"bool"}],"output":null}],[11,"drop","rustc_llvm","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[{"name":"memorybufferref"}],"output":{"name":"option"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",35,null],[11,"raw","","",35,{"inputs":[{"name":"self"}],"output":{"name":"operandbundledefref"}}],[11,"drop","","",35,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[4,"AttributePlace"],[4,"CodeGenOptSize"],[3,"ArchiveRO"],[3,"Iter"],[3,"Child"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"LLVMRustResult"],[4,"CallConv"],[4,"Linkage"],[4,"Visibility"],[4,"DiagnosticSeverity"],[4,"DLLStorageClass"],[4,"Attribute"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"TypeKind"],[4,"AtomicRmwBinOp"],[4,"AtomicOrdering"],[4,"SynchronizationScope"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[4,"CodeModel"],[4,"DiagnosticKind"],[4,"ArchiveKind"],[4,"PassKind"],[3,"DIFlags"],[3,"OperandBundleDef"]]};
searchIndex["rustc_metadata"] = {"doc":"","items":[[0,"middle","rustc_metadata","",null,null],[0,"astconv_util","rustc_metadata::middle","This module contains a simple utility routine used by both `typeck` and `const_eval`. Almost certainly this could (and should) be refactored out of existence.",null,null],[0,"expr_use_visitor","","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_metadata::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",0,null],[10,"matched_pat","","",0,null],[10,"consume_pat","","",0,null],[10,"borrow","","",0,null],[10,"decl_without_init","","",0,null],[10,"mutate","","",0,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",1,null],[13,"AddrOf","","",1,null],[13,"AutoRef","","",1,null],[13,"AutoUnsafe","","",1,null],[13,"RefBinding","","",1,null],[13,"OverloadedOperator","","",1,null],[13,"ClosureInvocation","","",1,null],[13,"ForLoop","","",1,null],[13,"MatchDiscriminant","","",1,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",2,null],[13,"Move","","",2,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",3,null],[13,"PatBindingMove","","",3,null],[13,"CaptureMove","","",3,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",4,null],[13,"BorrowingMatch","","",4,null],[13,"CopyingMatch","","",4,null],[13,"MovingMatch","","",4,null],[4,"MutateMode","","",null,null],[13,"Init","","",5,null],[13,"JustWrite","","",5,null],[13,"WriteAndRead","","",5,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_metadata::middle","",null,null],[4,"ConstVal","rustc_metadata::middle::const_val","",null,null],[13,"Float","","",6,null],[13,"Integral","","",6,null],[13,"Str","","",6,null],[13,"ByteStr","","",6,null],[13,"Bool","","",6,null],[13,"Struct","","",6,null],[13,"Tuple","","",6,null],[13,"Function","","",6,null],[13,"Array","","",6,null],[13,"Repeat","","",6,null],[13,"Char","","",6,null],[13,"Dummy","","A value that only occurs in case `eval_const_expr` reported an error. You should never handle this case. Its sole purpose is to allow more errors to be reported instead of causing a fatal error.",6,null],[0,"cstore","rustc_metadata::middle","",null,null],[3,"LinkMeta","rustc_metadata::middle::cstore","",null,null],[12,"crate_name","","",7,null],[12,"crate_hash","","",7,null],[3,"CrateSource","","",null,null],[12,"dylib","","",8,null],[12,"rlib","","",8,null],[12,"rmeta","","",8,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",9,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",9,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",9,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",9,null],[4,"LibSource","","",null,null],[13,"Some","","",10,null],[13,"MetadataOnly","","",10,null],[13,"None","","",10,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",11,null],[13,"RequireStatic","","",11,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",12,null],[13,"NativeFramework","","",12,null],[13,"NativeUnknown","","",12,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",13,null],[12,"name","","",13,null],[12,"cfg","","",13,null],[12,"foreign_items","","",13,null],[4,"LoadedMacro","","",null,null],[13,"MacroRules","","",14,null],[13,"ProcMacro","","",14,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",15,null],[12,"span","","span of the extern crate that caused this to be loaded",15,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",15,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",15,null],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"describe_def","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"def_span","","",16,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[10,"stability","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"deprecation","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"visibility","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"closure_kind","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[10,"closure_ty","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"closurety"}}],[10,"item_variances","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_type","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"tys"}}],[10,"visible_parent_map","","",16,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[10,"item_predicates","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[10,"item_super_predicates","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[10,"item_generics","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"item_attrs","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"trait_def","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"traitdef"}}],[10,"adt_def","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"adtdef"}}],[10,"fn_arg_names","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"inherent_implementations_for_type","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"implementations_of_trait","","",16,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[10,"associated_item_def_ids","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"impl_trait_ref","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"impl_polarity","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[10,"custom_coerce_unsized_kind","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"impl_parent","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"trait_of_item","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"associated_item","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"is_const_fn","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_defaulted_trait","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_default_impl","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_foreign_item","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_dllimport_foreign_item","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_statically_included_foreign_item","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"dylib_dependency_formats","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"dep_kind","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"export_macros","","",16,null],[10,"lang_items","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"missing_lang_items","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_staged_api","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_allocator","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_panic_runtime","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_compiler_builtins","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"panic_strategy","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[10,"extern_crate","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"crate_name","","The name of the crate as it is referred to in source code of the current crate.",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"original_crate_name","","The name of the crate as it is stored in the crate's metadata.",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"crate_disambiguator","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"plugin_registrar_fn","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"derive_registrar_fn","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"native_libraries","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"exported_symbols","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_no_builtins","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"retrace_path","","",16,null],[10,"def_key","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"struct_field_names","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"load_macro","","",16,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"maybe_get_item_body","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"item_body_nested_bodies","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[10,"const_is_rvalue_promotable_to_static","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"get_item_mir","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mir"}}],[10,"is_item_mir_available","","",16,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"can_have_local_instance","","Take a look if we need to inline or monomorphize this. If so, we will emit code for this item in the local crate, and thus create a translation item for it.",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"crates","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_libraries","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_link_args","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"metadata_filename","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"metadata_section_name","","",16,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[10,"used_crates","","",16,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[10,"used_crate_source","","",16,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[10,"extern_mod_stmt_cnum","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"encode_metadata","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[10,"metadata_encoding_version","","",16,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",17,null],[10,"postprocess","","",17,null],[0,"dataflow","rustc_metadata::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_metadata::middle::dataflow","",null,null],[13,"Entry","","",18,null],[13,"Exit","","",18,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",21,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",21,null],[0,"dead","rustc_metadata::middle","",null,null],[5,"check_crate","rustc_metadata::middle::dead","",null,null],[0,"dependency_format","rustc_metadata::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_metadata::middle::dependency_format","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",22,null],[13,"IncludedFromDylib","","",22,null],[13,"Static","","",22,null],[13,"Dynamic","","",22,null],[5,"calculate","","",null,null],[0,"effect","rustc_metadata::middle","Enforces the Rust effect system. Currently there is just one effect, `unsafe`.",null,null],[5,"check_crate","rustc_metadata::middle::effect","",null,null],[0,"entry","rustc_metadata::middle","",null,null],[5,"find_entry_point","rustc_metadata::middle::entry","",null,null],[0,"free_region","rustc_metadata::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_metadata::middle::free_region","",null,null],[0,"intrinsicck","rustc_metadata::middle","",null,null],[5,"check_crate","rustc_metadata::middle::intrinsicck","",null,null],[0,"lang_items","rustc_metadata::middle","",null,null],[4,"LangItem","rustc_metadata::middle::lang_items","",null,null],[13,"CharImplItem","","",23,null],[13,"StrImplItem","","",23,null],[13,"SliceImplItem","","",23,null],[13,"ConstPtrImplItem","","",23,null],[13,"MutPtrImplItem","","",23,null],[13,"I8ImplItem","","",23,null],[13,"I16ImplItem","","",23,null],[13,"I32ImplItem","","",23,null],[13,"I64ImplItem","","",23,null],[13,"I128ImplItem","","",23,null],[13,"IsizeImplItem","","",23,null],[13,"U8ImplItem","","",23,null],[13,"U16ImplItem","","",23,null],[13,"U32ImplItem","","",23,null],[13,"U64ImplItem","","",23,null],[13,"U128ImplItem","","",23,null],[13,"UsizeImplItem","","",23,null],[13,"F32ImplItem","","",23,null],[13,"F64ImplItem","","",23,null],[13,"SendTraitLangItem","","",23,null],[13,"SizedTraitLangItem","","",23,null],[13,"UnsizeTraitLangItem","","",23,null],[13,"CopyTraitLangItem","","",23,null],[13,"SyncTraitLangItem","","",23,null],[13,"DropTraitLangItem","","",23,null],[13,"CoerceUnsizedTraitLangItem","","",23,null],[13,"AddTraitLangItem","","",23,null],[13,"SubTraitLangItem","","",23,null],[13,"MulTraitLangItem","","",23,null],[13,"DivTraitLangItem","","",23,null],[13,"RemTraitLangItem","","",23,null],[13,"NegTraitLangItem","","",23,null],[13,"NotTraitLangItem","","",23,null],[13,"BitXorTraitLangItem","","",23,null],[13,"BitAndTraitLangItem","","",23,null],[13,"BitOrTraitLangItem","","",23,null],[13,"ShlTraitLangItem","","",23,null],[13,"ShrTraitLangItem","","",23,null],[13,"AddAssignTraitLangItem","","",23,null],[13,"SubAssignTraitLangItem","","",23,null],[13,"MulAssignTraitLangItem","","",23,null],[13,"DivAssignTraitLangItem","","",23,null],[13,"RemAssignTraitLangItem","","",23,null],[13,"BitXorAssignTraitLangItem","","",23,null],[13,"BitAndAssignTraitLangItem","","",23,null],[13,"BitOrAssignTraitLangItem","","",23,null],[13,"ShlAssignTraitLangItem","","",23,null],[13,"ShrAssignTraitLangItem","","",23,null],[13,"IndexTraitLangItem","","",23,null],[13,"IndexMutTraitLangItem","","",23,null],[13,"UnsafeCellTypeLangItem","","",23,null],[13,"DerefTraitLangItem","","",23,null],[13,"DerefMutTraitLangItem","","",23,null],[13,"FnTraitLangItem","","",23,null],[13,"FnMutTraitLangItem","","",23,null],[13,"FnOnceTraitLangItem","","",23,null],[13,"EqTraitLangItem","","",23,null],[13,"OrdTraitLangItem","","",23,null],[13,"StrEqFnLangItem","","",23,null],[13,"PanicFnLangItem","","",23,null],[13,"PanicBoundsCheckFnLangItem","","",23,null],[13,"PanicFmtLangItem","","",23,null],[13,"ExchangeMallocFnLangItem","","",23,null],[13,"BoxFreeFnLangItem","","",23,null],[13,"StrDupUniqFnLangItem","","",23,null],[13,"StartFnLangItem","","",23,null],[13,"EhPersonalityLangItem","","",23,null],[13,"EhUnwindResumeLangItem","","",23,null],[13,"MSVCTryFilterLangItem","","",23,null],[13,"OwnedBoxLangItem","","",23,null],[13,"PhantomDataItem","","",23,null],[13,"CovariantTypeItem","","",23,null],[13,"ContravariantTypeItem","","",23,null],[13,"InvariantTypeItem","","",23,null],[13,"CovariantLifetimeItem","","",23,null],[13,"ContravariantLifetimeItem","","",23,null],[13,"InvariantLifetimeItem","","",23,null],[13,"NoCopyItem","","",23,null],[13,"NonZeroItem","","",23,null],[13,"DebugTraitLangItem","","",23,null],[3,"LanguageItems","","",null,null],[12,"items","","",24,null],[12,"missing","","",24,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_metadata::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc_metadata::middle::liveness","",null,null],[0,"mem_categorization","rustc_metadata::middle","Categorization",null,null],[4,"Categorization","rustc_metadata::middle::mem_categorization","",null,null],[13,"Rvalue","","",25,null],[13,"StaticItem","","",25,null],[13,"Upvar","","",25,null],[13,"Local","","",25,null],[13,"Deref","","",25,null],[13,"Interior","","",25,null],[13,"Downcast","","",25,null],[3,"Upvar","","",null,null],[12,"id","","",26,null],[12,"kind","","",26,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",27,null],[13,"BorrowedPtr","","`&T`",27,null],[13,"UnsafePtr","","`*T`",27,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",27,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",28,null],[13,"InteriorElement","","",28,null],[4,"FieldName","","",null,null],[13,"NamedField","","",29,null],[13,"PositionalField","","",29,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",30,null],[13,"Pattern","","",30,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",31,null],[13,"OtherElement","","",31,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",32,null],[13,"McDeclared","","",32,null],[13,"McInherited","","",32,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",33,null],[13,"NoteUpvarRef","","",33,null],[13,"NoteNone","","",33,null],[3,"cmt_","","",null,null],[12,"id","","",34,null],[12,"span","","",34,null],[12,"cat","","",34,null],[12,"mutbl","","",34,null],[12,"ty","","",34,null],[12,"note","","",34,null],[6,"cmt","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",35,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",35,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",36,null],[3,"MemCategorizationOptions","","",null,null],[12,"during_closure_kind_inference","","",37,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",38,null],[13,"NonAliasable","","",38,null],[13,"ImmutableUnique","","",38,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",39,null],[13,"AliasableClosure","","",39,null],[13,"AliasableOther","","",39,null],[13,"UnaliasableImmutable","","",39,null],[13,"AliasableStatic","","",39,null],[13,"AliasableStaticMut","","",39,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_metadata::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_metadata::middle::privacy","",null,null],[13,"Reachable","","",40,null],[13,"Exported","","",40,null],[13,"Public","","",40,null],[3,"AccessLevels","","",null,null],[12,"map","","",41,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[0,"reachable","rustc_metadata::middle","",null,null],[5,"find_reachable","rustc_metadata::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_metadata::middle","This file actually contains two passes related to regions.  The first pass builds up the `scope_map`, which describes the parent links in the region hierarchy.  The second pass infers which types must be region parameterized.",null,null],[3,"CodeExtent","rustc_metadata::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling instead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be used to bound the lifetime/region for values.",null,null],[13,"Misc","","",42,null],[13,"CallSiteScope","","",42,null],[12,"fn_id","rustc_metadata::middle::region::CodeExtentData","",42,null],[12,"body_id","","",42,null],[13,"ParameterScope","rustc_metadata::middle::region","",42,null],[12,"fn_id","rustc_metadata::middle::region::CodeExtentData","",42,null],[12,"body_id","","",42,null],[13,"DestructionScope","rustc_metadata::middle::region","",42,null],[13,"Remainder","","",42,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",43,null],[12,"body_id","","",43,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",44,null],[12,"first_statement_index","","",44,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[0,"recursion_limit","rustc_metadata::middle","",null,null],[5,"update_limits","rustc_metadata::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_metadata::middle","Name resolution for lifetimes.",null,null],[4,"DefRegion","rustc_metadata::middle::resolve_lifetime","",null,null],[13,"DefStaticRegion","","",45,null],[13,"DefEarlyBoundRegion","","",45,null],[13,"DefLateBoundRegion","","",45,null],[13,"DefFreeRegion","","",45,null],[3,"NamedRegionMap","","",null,null],[12,"defs","","",46,null],[12,"late_bound","","",46,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[0,"stability","rustc_metadata::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_metadata::middle::stability","",null,null],[13,"Unstable","","",47,null],[13,"Stable","","",47,null],[3,"DeprecationEntry","","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",48,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,null],[0,"weak_lang_items","rustc_metadata::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_metadata::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"creader","rustc_metadata","Validates all used crates and extern libraries and loads their metadata",null,null],[3,"Library","rustc_metadata::creader","",null,null],[12,"dylib","","",49,null],[12,"rlib","","",49,null],[12,"rmeta","","",49,null],[12,"metadata","","",49,null],[3,"CrateLoader","","",null,null],[12,"sess","","",50,null],[11,"new","","",50,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"str"}],"output":{"name":"self"}}],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path, crate SVH and DefIndex of the registrar function.",50,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"option"}}],[11,"preprocess","","",50,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"postprocess","","",50,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"process_item","","",50,{"inputs":[{"name":"self"},{"name":"item"},{"name":"definitions"}],"output":null}],[0,"cstore","rustc_metadata","",null,null],[3,"NativeLibrary","rustc_metadata::cstore","",null,null],[12,"kind","","",13,null],[12,"name","","",13,null],[12,"cfg","","",13,null],[12,"foreign_items","","",13,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",12,null],[13,"NativeFramework","","",12,null],[13,"NativeUnknown","","",12,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",11,null],[13,"RequireStatic","","",11,null],[3,"CrateSource","","",null,null],[12,"dylib","","",8,null],[12,"rlib","","",8,null],[12,"rmeta","","",8,null],[3,"LinkMeta","","",null,null],[12,"crate_name","","",7,null],[12,"crate_hash","","",7,null],[4,"LibSource","","",null,null],[13,"Some","","",10,null],[13,"MetadataOnly","","",10,null],[13,"None","","",10,null],[3,"ImportedFileMap","","Holds information about a syntax_pos::FileMap imported from another crate. See `imported_filemaps()` for more information.",null,null],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",51,null],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",51,null],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",51,null],[3,"CrateMetadata","","",null,null],[12,"name","","",52,null],[12,"extern_crate","","Information about the extern crate that caused this crate to be loaded. If this is `None`, then the crate was injected (e.g., by the allocator)",52,null],[12,"blob","","",52,null],[12,"cnum_map","","",52,null],[12,"cnum","","",52,null],[12,"codemap_import_info","","",52,null],[12,"root","","",52,null],[12,"def_path_table","","For each public item in this crate, we encode a key.  When the crate is loaded, we read all the keys and put them in this hashmap, which gives the reverse mapping.  This allows us to quickly retrace a `DefPath`, which is needed for incremental compilation support.",52,null],[12,"dep_kind","","",52,null],[12,"source","","",52,null],[12,"proc_macros","","",52,null],[12,"dllimport_foreign_items","","",52,null],[3,"CStore","","",null,null],[12,"dep_graph","","",53,null],[12,"dllimport_foreign_items","","",53,null],[12,"inlined_item_cache","","",53,null],[12,"visible_parent_map","","",53,null],[4,"MetadataBlob","","",null,null],[13,"Inflated","","",54,null],[13,"Archive","","",54,null],[13,"Raw","","",54,null],[6,"CrateNumMap","","",null,null],[11,"new","","",53,{"inputs":[{"name":"depgraph"}],"output":{"name":"cstore"}}],[11,"next_crate_num","","",53,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"get_crate_data","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"get_crate_hash","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"set_crate_data","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"},{"name":"rc"}],"output":null}],[11,"iter_crate_data","","",53,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"reset","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"crate_dependencies_in_rpo","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"push_dependencies_in_postorder","","",53,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"cratenum"}],"output":null}],[11,"do_get_used_crates","","",53,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"add_used_library","","",53,{"inputs":[{"name":"self"},{"name":"nativelibrary"}],"output":null}],[11,"get_used_libraries","","",53,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"add_used_link_args","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_used_link_args","","",53,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"add_extern_mod_stmt_cnum","","",53,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"cratenum"}],"output":null}],[11,"add_statically_included_foreign_item","","",53,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":null}],[11,"do_is_statically_included_foreign_item","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"do_extern_mod_stmt_cnum","","",53,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"name","","",52,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"hash","","",52,{"inputs":[{"name":"self"}],"output":{"name":"svh"}}],[11,"disambiguator","","",52,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"is_staged_api","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_allocator","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_allocator","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_panic_runtime","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_no_builtins","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",52,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[0,"locator","rustc_metadata","Finds crate binaries and loads their metadata",null,null],[3,"CrateMismatch","rustc_metadata::locator","",null,null],[3,"Context","","",null,null],[12,"sess","","",55,null],[12,"span","","",55,null],[12,"ident","","",55,null],[12,"crate_name","","",55,null],[12,"hash","","",55,null],[12,"target","","",55,null],[12,"triple","","",55,null],[12,"filesearch","","",55,null],[12,"root","","",55,null],[12,"rejected_via_hash","","",55,null],[12,"rejected_via_triple","","",55,null],[12,"rejected_via_kind","","",55,null],[12,"rejected_via_version","","",55,null],[12,"rejected_via_filename","","",55,null],[12,"should_match_name","","",55,null],[12,"is_proc_macro","","",55,null],[3,"ArchiveMetadata","","",null,null],[3,"CratePaths","","",null,null],[12,"ident","","",56,null],[12,"dylib","","",56,null],[12,"rlib","","",56,null],[12,"rmeta","","",56,null],[5,"note_crate_name","","",null,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":null}],[5,"meta_section_name","","",null,{"inputs":[{"name":"target"}],"output":{"name":"str"}}],[5,"read_meta_section_name","","",null,{"inputs":[{"name":"target"}],"output":{"name":"str"}}],[5,"list_file_metadata","","",null,{"inputs":[{"name":"target"},{"name":"path"},{"name":"write"}],"output":{"name":"result"}}],[17,"METADATA_FILENAME","","",null,null],[11,"maybe_load_library_crate","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"load_library_crate","","",55,{"inputs":[{"name":"self"}],"output":{"name":"library"}}],[11,"report_errs","","",55,null],[11,"as_slice","","",57,null],[17,"DIAGNOSTICS","rustc_metadata","",null,null],[11,"partial_cmp","rustc_metadata::middle::cstore","",9,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_metadata::cstore","",12,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_metadata::middle::privacy","",40,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_metadata::middle::region","",58,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_metadata::middle::stability","",47,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"fmt","rustc_metadata::middle::mem_categorization","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::cstore","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::cstore","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::lang_items","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::region","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::resolve_lifetime","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::stability","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::mem_categorization","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::privacy","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::region","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::expr_use_visitor","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::cstore","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::cstore","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::cstore","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::cstore","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::dataflow","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::dependency_format","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::mem_categorization","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::privacy","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::region","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::resolve_lifetime","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::stability","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"describe_def","rustc_metadata::middle::cstore","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",60,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"closure_kind","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[11,"closure_ty","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"closurety"}}],[11,"item_variances","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_type","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"tys"}}],[11,"visible_parent_map","","",60,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"item_predicates","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_super_predicates","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_generics","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"trait_def","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"traitdef"}}],[11,"adt_def","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"adtdef"}}],[11,"fn_arg_names","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",60,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"associated_item_def_ids","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"impl_trait_ref","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_polarity","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"custom_coerce_unsized_kind","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_parent","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"is_const_fn","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_defaulted_trait","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"lang_items","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"dep_kind","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",60,null],[11,"is_allocator","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"extern_crate","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_name","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",60,null],[11,"def_key","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",60,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"get_item_mir","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mir"}}],[11,"is_item_mir_available","","",60,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"can_have_local_instance","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",60,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",60,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",60,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",60,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",60,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",60,null],[11,"eq","rustc_metadata::middle::expr_use_visitor","",1,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::cstore","",8,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::cstore","",9,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::cstore","",10,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::dataflow","",21,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::dependency_format","",22,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::lang_items","",23,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::mem_categorization","",25,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"elementkind"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::privacy","",40,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::region","",58,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::resolve_lifetime","",45,{"inputs":[{"name":"self"},{"name":"defregion"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"defregion"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::stability","",47,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"default","rustc_metadata::middle::privacy","",41,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"default","rustc_metadata::middle::mem_categorization","",37,{"inputs":[],"output":{"name":"memcategorizationoptions"}}],[11,"cmp","rustc_metadata::middle::cstore","",9,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_metadata::cstore","",12,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_metadata::middle::privacy","",40,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_metadata::middle::region","",58,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"ordering"}}],[11,"cmp","","",42,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"ordering"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"ordering"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"nested","rustc_metadata::middle::dataflow","",61,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",61,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"hash","rustc_metadata::middle::const_val","",6,null],[11,"hash","rustc_metadata::cstore","",12,null],[11,"hash","","",13,null],[11,"hash","rustc_metadata::middle::lang_items","",23,null],[11,"hash","rustc_metadata::middle::mem_categorization","",27,null],[11,"hash","","",28,null],[11,"hash","","",29,null],[11,"hash","","",30,null],[11,"hash","","",31,null],[11,"hash","","",32,null],[11,"hash","rustc_metadata::middle::region","",58,null],[11,"hash","","",42,null],[11,"hash","","",43,null],[11,"hash","","",44,null],[11,"hash","rustc_metadata::middle::resolve_lifetime","",45,null],[11,"hash","rustc_metadata::middle::stability","",47,null],[11,"encode","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::cstore","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::cstore","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::lang_items","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::region","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::resolve_lifetime","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::stability","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","rustc_metadata::middle::expr_use_visitor","",1,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"clone","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"clone","rustc_metadata::cstore","",7,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"clone","rustc_metadata::middle::cstore","",9,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"clone","rustc_metadata::cstore","",10,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"clone","rustc_metadata::middle::cstore","",15,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"clone","rustc_metadata::middle::dataflow","",18,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"clone","rustc_metadata::middle::dependency_format","",22,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"clone","rustc_metadata::middle::free_region","",62,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"clone","rustc_metadata::middle::lang_items","",23,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"clone","rustc_metadata::middle::mem_categorization","",25,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"elementkind"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationoptions"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"clone","rustc_metadata::middle::privacy","",40,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"clone","rustc_metadata::middle::region","",58,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"codeextentdata"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"callsitescopedata"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","rustc_metadata::middle::resolve_lifetime","",45,{"inputs":[{"name":"self"}],"output":{"name":"defregion"}}],[11,"clone","rustc_metadata::middle::stability","",47,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"new","rustc_metadata::middle::expr_use_visitor","",63,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"with_options","","",63,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"exprusevisitor"}}],[11,"consume_body","","",63,null],[11,"consume_expr","","",63,null],[11,"walk_expr","","",63,null],[11,"description","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"macros_only","rustc_metadata::middle::cstore","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_some","rustc_metadata::cstore","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rustc_metadata::middle::dataflow","",61,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",61,null],[11,"add_kill","","Indicates that `id` kills `bit`",61,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",61,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",61,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",61,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",61,null],[11,"propagate","","Performs the data flow analysis.",61,null],[11,"new","rustc_metadata::middle::free_region","",62,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",62,null],[11,"relate_free_regions_from_predicates","","",62,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship by walking the graph encoded in `map`.  Note that it is possible that `sub != sup` and `sub <= sup` and `sup <= sub` (that is, the user can give two different names to the same lifetime).",62,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",62,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"region"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after inference* and sadly the logic is somewhat duplicated with the code in infer.rs.",62,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"is_static","","Determines whether this free-region is required to be 'static",62,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"from_u32","rustc_metadata::middle::lang_items","",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",24,null],[11,"item_name","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",24,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"require_owned_box","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",24,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_eq_fn","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strdup_uniq_fn","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_type","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_type","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_type","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_lifetime","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_lifetime","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_lifetime","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_copy_bound","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_mutbl","rustc_metadata::middle::mem_categorization","",32,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",32,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",32,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",34,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",34,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",34,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"new","","",36,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_options","","",36,{"inputs":[{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",36,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_expr_autoderefd","","",36,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cat_expr_unadjusted","","",36,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_def","","",36,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"},{"name":"def"}],"output":{"name":"result"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",36,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"cat_rvalue_node","","",36,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_rvalue","","",36,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_field","","",36,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"symbol"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_tup_field","","",36,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"usize"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",36,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"interioroffsetkind"}],"output":{"name":"result"}}],[11,"cat_imm_interior","","",36,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"interiorkind"}],"output":{"name":"rc"}}],[11,"cat_downcast","","",36,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"cat_pattern","","",36,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"pat"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_reachable","rustc_metadata::middle::privacy","",41,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",41,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",41,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"node_id","rustc_metadata::middle::region","",58,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this CodeExtent.  Note that in general the returned span may not correspond to the span of any node id in the AST.",58,{"inputs":[{"name":"self"},{"name":"regionmaps"},{"name":"map"}],"output":{"name":"option"}}],[11,"node_id","","Returns a node id associated with this scope.",42,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"to_code_extent","","",43,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"codeextent"}}],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody really cares about the contents of these.",64,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"lookup_code_extent","","",64,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"node_extent","","",64,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"item_extent","","",64,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"call_site_extent","","",64,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"opt_destruction_extent","","",64,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"intern_code_extent","","",64,{"inputs":[{"name":"self"},{"name":"codeextentdata"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"intern_node","","",64,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"code_extent_data","","",64,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextentdata"}}],[11,"each_encl_scope","","",64,null],[11,"each_var_scope","","",64,null],[11,"each_rvalue_scope","","",64,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",64,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",64,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",64,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",64,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",64,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"scopes_intersect","","",64,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",64,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",64,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"from_attr_level","rustc_metadata::middle::stability","",47,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"same_origin","","",48,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"build","","Construct the stability index for a crate being compiled.",65,null],[11,"new","","",65,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"is_compatible","rustc_metadata::cstore","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_rustc_version","","",54,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_root","","",54,{"inputs":[{"name":"self"}],"output":{"name":"crateroot"}}],[11,"list_crate_metadata","","",54,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"get_def","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_span","","",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"session"}],"output":{"name":"span"}}],[11,"get_trait_def","","",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"traitdef"}}],[11,"get_adt_def","","",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"adtdef"}}],[11,"get_predicates","","",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[11,"get_super_predicates","","",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[11,"get_generics","","",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"generics"}}],[11,"get_type","","",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"get_stability","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_deprecation","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_visibility","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"visibility"}}],[11,"get_parent_impl","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_impl_polarity","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"implpolarity"}}],[11,"get_custom_coerce_unsized_kind","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_impl_trait","","",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"get_lang_items","","Iterates over the language items in the given crate.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"each_child_of_item","","Iterates over each child of the given item.",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"f"}],"output":null}],[11,"maybe_get_item_body","","",52,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_item_mir_available","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"can_have_local_instance","","",52,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"maybe_get_item_mir","","",52,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_associated_item","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_item_variances","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_ctor_kind","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"ctorkind"}}],[11,"get_struct_ctor_def_id","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_item_attrs","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_struct_field_names","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_inherent_implementations_for_type","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_implementations_for_trait","","",52,{"inputs":[{"name":"self"},{"name":"option"},{"name":"vec"}],"output":null}],[11,"get_trait_of_item","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_native_libraries","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_dylib_dependency_formats","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_missing_lang_items","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_fn_arg_names","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_exported_symbols","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_macro","","",52,null],[11,"is_const_fn","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_defaulted_trait","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"closure_kind","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"closurekind"}}],[11,"closure_ty","","",52,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"closurety"}}],[11,"def_key","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_path","","",52,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpath"}}],[11,"imported_filemaps","","Imports the codemap from an external crate into the codemap of the crate currently being compiled (the \"local crate\").",52,{"inputs":[{"name":"self"},{"name":"codemap"}],"output":{"name":"ref"}}],[11,"describe_def","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",53,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"closure_kind","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[11,"closure_ty","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"closurety"}}],[11,"item_variances","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_type","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"ty"}}],[11,"item_predicates","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_super_predicates","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_generics","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"trait_def","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"traitdef"}}],[11,"adt_def","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"adtdef"}}],[11,"fn_arg_names","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",53,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"associated_item_def_ids","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"impl_polarity","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"impl_trait_ref","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"custom_coerce_unsized_kind","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_parent","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"is_const_fn","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_defaulted_trait","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"dep_kind","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":null}],[11,"lang_items","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_allocator","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"crate_name","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"extern_crate","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_hash","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",53,null],[11,"def_key","","Returns the `DefKey` for a given `DefId`. This indicates the parent `DefId` as well as some idea of what kind of data the `DefId` refers to.",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",53,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"get_item_mir","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mir"}}],[11,"is_item_mir_available","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"can_have_local_instance","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",53,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",53,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",53,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",53,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",53,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"exportmap"},{"name":"linkmeta"},{"name":"nodeset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",53,null],[11,"visible_parent_map","","Returns a map from a sufficiently visible external item (i.e. an external item that is visible from at least one local module) to a sufficiently visible parent (considering modules that re-export the external item to be parents).",53,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}]],"paths":[[8,"Delegate"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[4,"ConstVal"],[3,"LinkMeta"],[3,"CrateSource"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"NativeLibrary"],[4,"LoadedMacro"],[3,"ExternCrate"],[8,"CrateStore"],[8,"CrateLoader"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[4,"KillFrom"],[4,"Linkage"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[8,"ast_node"],[3,"MemCategorizationContext"],[3,"MemCategorizationOptions"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"DefRegion"],[3,"NamedRegionMap"],[4,"StabilityLevel"],[3,"DeprecationEntry"],[3,"Library"],[3,"CrateLoader"],[3,"ImportedFileMap"],[3,"CrateMetadata"],[3,"CStore"],[4,"MetadataBlob"],[3,"Context"],[3,"CratePaths"],[3,"ArchiveMetadata"],[3,"CodeExtent"],[3,"Context"],[3,"DummyCrateStore"],[3,"DataFlowContext"],[3,"FreeRegionMap"],[3,"ExprUseVisitor"],[3,"RegionMaps"],[3,"Index"]]};
searchIndex["rustc_mir"] = {"doc":"Rust MIR: a lowered representation of Rust. Also: an experiment!","items":[[0,"diagnostics","rustc_mir","",null,null],[0,"build","","",null,null],[3,"Builder","rustc_mir::build","",null,null],[3,"ScopeId","","",null,null],[3,"BlockAnd","","The `BlockAnd` \"monad\" packages up the new basic block along with a produced value (sometimes just unit, of course). The `unpack!` macro (and methods below) makes working with `BlockAnd` much more convenient.",null,null],[5,"construct_fn","","the main entry point for building MIR for a function",null,{"inputs":[{"name":"cx"},{"name":"nodeid"},{"name":"a"},{"name":"abi"},{"name":"ty"},{"name":"body"}],"output":{"name":"mir"}}],[5,"construct_const","","",null,{"inputs":[{"name":"cx"},{"name":"nodeid"},{"name":"bodyid"}],"output":{"name":"mir"}}],[11,"ast_block","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"bool"},{"name":"basicblock"},{"name":"block"}],"output":{"name":"blockand"}}],[11,"as_constant","","Compile `expr`, yielding a compile-time constant. Assumes that `expr` is a valid compile-time constant!",0,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"constant"}}],[11,"as_lvalue","","Compile `expr`, yielding an lvalue that we can move from etc.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"as_rvalue","","Compile `expr`, yielding an rvalue.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"build_binary_op","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"binop"},{"name":"span"},{"name":"ty"},{"name":"operand"},{"name":"operand"}],"output":{"name":"blockand"}}],[11,"as_operand","","Compile `expr` into a value that can be used as an operand. If `expr` is an lvalue like `x`, this will introduce a temporary `tmp = x`, so that we capture the value of `x` at this time.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"as_temp","","Compile `expr` into a fresh temporary. This is used when building up rvalues so as to freeze the value that will be consumed.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"into_expr","","Compile `expr`, storing the result into `destination`, which is assumed to be uninitialized.",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"basicblock"},{"name":"expr"}],"output":{"name":"blockand"}}],[11,"stmt_expr","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"expr"}],"output":{"name":"blockand"}}],[11,"into","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"basicblock"},{"name":"e"}],"output":{"name":"blockand"}}],[11,"simplify_candidate","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"candidate"}],"output":{"name":"blockand"}}],[11,"test","","Identifies what test is needed to decide if `match_pair` is applicable.",0,{"inputs":[{"name":"self"},{"name":"matchpair"}],"output":{"name":"test"}}],[11,"add_cases_to_switch","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"candidate"},{"name":"ty"},{"name":"vec"},{"name":"fxhashmap"}],"output":{"name":"bool"}}],[11,"add_variants_to_switch","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"candidate"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"perform_test","","Generates the code to perform a test.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"test"}],"output":{"name":"vec"}}],[11,"sort_candidate","","Given that we are performing `test` against `test_lvalue`, this job sorts out what the status of `candidate` will be after the test. The `resulting_candidates` vector stores, for each possible outcome of `test`, a vector of the candidates that will result. This fn should add a (possibly modified) clone of candidate into `resulting_candidates` wherever appropriate.",0,null],[11,"field_match_pairs","","",0,null],[11,"prefix_slice_suffix","","",0,null],[11,"match_expr","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"span"},{"name":"basicblock"},{"name":"exprref"},{"name":"vec"}],"output":{"name":"blockand"}}],[11,"expr_into_pattern","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"pattern"},{"name":"exprref"}],"output":{"name":"blockand"}}],[11,"lvalue_into_pattern","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"pattern"},{"name":"lvalue"}],"output":{"name":"blockand"}}],[11,"declare_bindings","","Declares the bindings of the given pattern and returns the visibility scope for the bindings in this patterns, if such a scope had to be created. NOTE: Declaring the bindings should always be done in their drop scope.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"span"},{"name":"pattern"}],"output":{"name":"option"}}],[11,"storage_live_for_bindings","","Emit `StorageLive` for every binding in the pattern.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"pattern"}],"output":null}],[11,"temp","","Add a new temporary value of type `ty` storing the result of evaluating `expr`.",0,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"lvalue"}}],[11,"literal_operand","","",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"literal"}],"output":{"name":"operand"}}],[11,"unit_rvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rvalue"}}],[11,"zero_literal","","",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"}],"output":{"name":"operand"}}],[11,"push_usize","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"sourceinfo"},{"name":"u64"}],"output":{"name":"lvalue"}}],[11,"in_loop_scope","","Start a loop scope, which tracks where `continue` and `break` should branch to. See module comment for more details.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"},{"name":"lvalue"},{"name":"f"}],"output":null}],[11,"in_scope","","Convenience wrapper that pushes a scope and then executes `f` to build its contents, popping the scope afterwards.",0,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"basicblock"},{"name":"f"}],"output":{"name":"blockand"}}],[11,"push_scope","","Push a scope onto the stack. You can then build code in this scope and call `pop_scope` afterwards. Note that these two calls must be paired; using `in_scope` as a convenience wrapper maybe preferable.",0,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":null}],[11,"pop_scope","","Pops a scope, which should have extent `extent`, adding any drops onto the end of `block` that are needed.  This must match 1-to-1 with `push_scope`.",0,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"basicblock"}],"output":{"name":"blockand"}}],[11,"exit_scope","","Branch out of `block` to `target`, exiting all scopes up to and including `extent`.  This will insert whatever drops are needed, as well as tracking this exit for the SEME region. See module comment for details.",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"codeextent"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"new_visibility_scope","","Creates a new visibility scope, nested in the current one.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"visibilityscope"}}],[11,"find_loop_scope","","Finds the loop scope for a given label. This is used for resolving `break` and `continue`.",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"loopscope"}}],[11,"source_info","","Given a span and the current visibility scope, make a SourceInfo.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"sourceinfo"}}],[11,"extent_of_return_scope","","Returns the extent of the scope which should be exited by a return.",0,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"schedule_drop","","Indicates that `lvalue` should be dropped on exit from `extent`.",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"codeextent"},{"name":"lvalue"},{"name":"ty"}],"output":null}],[11,"schedule_box_free","","Schedule dropping of a not-yet-fully-initialised box.",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"codeextent"},{"name":"lvalue"},{"name":"ty"}],"output":null}],[11,"diverge_cleanup","","Creates a path that performs all required cleanup for unwinding.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"build_drop","","Utility function for *non*-scope code to build their own drops",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"span"},{"name":"lvalue"},{"name":"ty"}],"output":{"name":"blockand"}}],[11,"build_drop_and_replace","","Utility function for *non*-scope code to build their own drops",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"span"},{"name":"lvalue"},{"name":"operand"}],"output":{"name":"blockand"}}],[11,"assert","","Create an Assert terminator and return the success block. If the boolean condition operand is not the expected value, a runtime panic will be caused with the given message.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"operand"},{"name":"bool"},{"name":"assertmessage"},{"name":"span"}],"output":{"name":"basicblock"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"scopeid"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"scopeid"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"scopeid"}],"output":{"name":"bool"}}],[11,"new","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"scopeid"}}],[11,"index","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"def_use","rustc_mir","Def-use analysis.",null,null],[3,"DefUseAnalysis","rustc_mir::def_use","",null,null],[3,"Info","","",null,null],[12,"defs_and_uses","","",2,null],[3,"Use","","",null,null],[12,"context","","",3,null],[12,"location","","",3,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"new","","",4,{"inputs":[{"name":"mir"}],"output":{"name":"defuseanalysis"}}],[11,"analyze","","",4,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"local_info","","",4,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"info"}}],[11,"local_info_mut","","",4,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"info"}}],[11,"replace_all_defs_and_uses_with","","FIXME(pcwalton): This should update the def-use chains.",4,{"inputs":[{"name":"self"},{"name":"local"},{"name":"mir"},{"name":"lvalue"}],"output":null}],[11,"def_count","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"def_count_not_including_drop","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"use_count","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"graphviz","rustc_mir","",null,null],[5,"write_mir_graphviz","rustc_mir::graphviz","Write a graphviz DOT graph of a list of MIRs.",null,{"inputs":[{"name":"tyctxt"},{"name":"i"},{"name":"w"}],"output":{"name":"result"}}],[5,"write_node_label","","Write a graphviz HTML-styled label for the given basic block, with all necessary escaping already performed. (This is suitable for emitting directly, as is done in this module, or for use with the LabelText::HtmlStr from libgraphviz.)",null,{"inputs":[{"name":"basicblock"},{"name":"mir"},{"name":"w"},{"name":"u32"},{"name":"init"},{"name":"fini"}],"output":{"name":"result"}}],[0,"mir_map","rustc_mir","An experimental pass that scources for `#[rustc_mir]` attributes, builds the resulting MIR, and dumps it out into a file for inspection.",null,null],[5,"build_mir_for_crate","rustc_mir::mir_map","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"pretty","rustc_mir","",null,null],[5,"dump_mir","rustc_mir::pretty","If the session is properly configured, dumps a human-readable representation of the mir into:",null,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"display"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[5,"write_mir_pretty","","Write out a human-readable textual representation for the given MIR.",null,{"inputs":[{"name":"tyctxt"},{"name":"i"},{"name":"write"}],"output":{"name":"result"}}],[5,"write_mir_fn","","",null,{"inputs":[{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"},{"name":"write"}],"output":{"name":"result"}}],[0,"transform","rustc_mir","",null,null],[0,"simplify_branches","rustc_mir::transform","A pass that simplifies branches when their condition is known.",null,null],[3,"SimplifyBranches","rustc_mir::transform::simplify_branches","",null,null],[11,"new","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"run_pass","","",5,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"disambiguator","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[0,"simplify","rustc_mir::transform","A number of passes which remove various redundancies in the CFG.",null,null],[3,"SimplifyCfg","rustc_mir::transform::simplify","",null,null],[3,"CfgSimplifier","","",null,null],[3,"SimplifyLocals","","",null,null],[11,"new","","",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"run_pass","","",6,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"disambiguator","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name","","",6,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"run_pass","","",7,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"erase_regions","rustc_mir::transform","This pass erases all early-bound regions from the types occuring in the MIR. We want to do this once just before trans, so trans does not have to take care erasing regions all over the place.",null,null],[3,"EraseRegions","rustc_mir::transform::erase_regions","",null,null],[11,"run_pass","","",8,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"no_landing_pads","rustc_mir::transform","This pass removes the unwind branch of all the terminators when the no-landing-pads option is specified.",null,null],[3,"NoLandingPads","rustc_mir::transform::no_landing_pads","",null,null],[11,"visit_terminator","","",9,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"run_pass","","",9,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"type_check","rustc_mir::transform","This pass type-checks the MIR to ensure it is not broken.",null,null],[3,"TypeChecker","rustc_mir::transform::type_check","",null,null],[3,"TypeckMir","","",null,null],[11,"register_infer_ok_obligations","","",10,{"inputs":[{"name":"self"},{"name":"inferok"}],"output":{"name":"t"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"run_pass","","",11,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"add_call_guards","rustc_mir::transform","",null,null],[3,"AddCallGuards","rustc_mir::transform::add_call_guards","",null,null],[11,"run_pass","","",12,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"promote_consts","rustc_mir::transform","A pass that promotes borrows of constant rvalues.",null,null],[4,"TempState","rustc_mir::transform::promote_consts","State of a temporary during collection and promotion.",null,null],[13,"Undefined","","No references to this temp.",13,null],[13,"Defined","","One direct assignment and any number of direct uses. A borrow of this temp is promotable if the assigned value is qualified as constant.",13,null],[12,"location","rustc_mir::transform::promote_consts::TempState","",13,null],[12,"uses","","",13,null],[13,"Unpromotable","rustc_mir::transform::promote_consts","Any other combination of assignments/uses.",13,null],[13,"PromotedOut","","This temp was part of an rvalue which got extracted during promotion and needs cleanup.",13,null],[4,"Candidate","","A \"root candidate\" for promotion, which will become the returned value in a promoted MIR, unless it's a subset of a larger candidate.",null,null],[13,"Ref","","Borrow of a constant temporary.",14,null],[13,"ShuffleIndices","","Array of indices found in the third argument of a call to one of the simd_shuffleN intrinsics.",14,null],[5,"collect_temps","","",null,{"inputs":[{"name":"mir"},{"name":"reversepostorder"}],"output":{"name":"indexvec"}}],[5,"promote_candidates","","",null,{"inputs":[{"name":"mir"},{"name":"tyctxt"},{"name":"indexvec"},{"name":"vec"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tempstate"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"tempstate"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"tempstate"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_promotable","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"qualify_consts","rustc_mir::transform","A pass that qualifies constness of temporaries in constants, static initializers and functions and also drives promotion.",null,null],[3,"Qualif","rustc_mir::transform::qualify_consts","",null,null],[3,"QualifyAndPromoteConstants","","",null,null],[5,"is_const_fn","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"qualif"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"ordering"}}],[11,"hash","","",15,null],[18,"RECURSIVE","","",15,null],[18,"MUTABLE_INTERIOR","","",15,null],[18,"NEEDS_DROP","","",15,null],[18,"FN_ARGUMENT","","",15,null],[18,"STATIC","","",15,null],[18,"STATIC_REF","","",15,null],[18,"NOT_CONST","","",15,null],[18,"NOT_PROMOTABLE","","",15,null],[18,"NEVER_PROMOTE","","",15,null],[18,"CONST_ERROR","","",15,null],[11,"empty","","Returns an empty set of flags.",15,{"inputs":[],"output":{"name":"qualif"}}],[11,"all","","Returns the set containing all flags.",15,{"inputs":[],"output":{"name":"qualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",15,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",15,{"inputs":[{"name":"u8"}],"output":{"name":"qualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if all of the flags in `other` are contained within `self`.",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"qualif"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"qualif"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"qualif"}}],[11,"sub","","Returns the set difference of the two sets of flags.",15,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"qualif"}}],[11,"not","","Returns the complement of this set of flags.",15,{"inputs":[{"name":"self"}],"output":{"name":"qualif"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"qualifyandpromoteconstants"}}],[11,"run_pass","","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"dump_mir","rustc_mir::transform","This pass just dumps MIR at a specified point.",null,null],[3,"Marker","rustc_mir::transform::dump_mir","",null,null],[12,"0","","",17,null],[3,"Disambiguator","","",null,null],[3,"DumpMir","","",null,null],[11,"run_pass","","",17,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"on_mir_pass","","",19,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"},{"name":"pass"},{"name":"bool"}],"output":null}],[0,"deaggregator","rustc_mir::transform","",null,null],[3,"Deaggregator","rustc_mir::transform::deaggregator","",null,null],[11,"run_pass","","",20,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"instcombine","rustc_mir::transform","Performs various peephole optimizations.",null,null],[3,"InstCombine","rustc_mir::transform::instcombine","",null,null],[11,"new","","",21,{"inputs":[],"output":{"name":"instcombine"}}],[11,"run_pass","","",21,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"visit_rvalue","","",21,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[0,"copy_prop","rustc_mir::transform","Trivial copy propagation pass.",null,null],[3,"CopyPropagation","rustc_mir::transform::copy_prop","",null,null],[11,"run_pass","","",22,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}]],"paths":[[3,"Builder"],[3,"ScopeId"],[3,"Info"],[3,"Use"],[3,"DefUseAnalysis"],[3,"SimplifyBranches"],[3,"SimplifyCfg"],[3,"SimplifyLocals"],[3,"EraseRegions"],[3,"NoLandingPads"],[3,"TypeChecker"],[3,"TypeckMir"],[3,"AddCallGuards"],[4,"TempState"],[4,"Candidate"],[3,"Qualif"],[3,"QualifyAndPromoteConstants"],[3,"Marker"],[3,"Disambiguator"],[3,"DumpMir"],[3,"Deaggregator"],[3,"InstCombine"],[3,"CopyPropagation"]]};
searchIndex["rustc_passes"] = {"doc":"Various checks","items":[[0,"diagnostics","rustc_passes","",null,null],[0,"ast_validation","","",null,null],[5,"check_crate","rustc_passes::ast_validation","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"consts","rustc_passes","",null,null],[5,"check_crate","rustc_passes::consts","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"hir_stats","rustc_passes","",null,null],[5,"print_hir_stats","rustc_passes::hir_stats","",null,{"inputs":[{"name":"crate"}],"output":null}],[5,"print_ast_stats","","",null,{"inputs":[{"name":"crate"},{"name":"str"}],"output":null}],[0,"loops","rustc_passes","",null,null],[5,"check_crate","rustc_passes::loops","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":null}],[0,"mir_stats","rustc_passes","",null,null],[5,"print_mir_stats","rustc_passes::mir_stats","",null,{"inputs":[{"name":"tyctxt"},{"name":"str"}],"output":null}],[0,"no_asm","rustc_passes","",null,null],[5,"check_crate","rustc_passes::no_asm","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"rvalues","rustc_passes","",null,null],[5,"check_crate","rustc_passes::rvalues","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"static_recursion","rustc_passes","",null,null],[5,"check_crate","rustc_passes::static_recursion","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"compileresult"}}]],"paths":[]};
searchIndex["rustc_platform_intrinsics"] = {"doc":"","items":[[3,"Intrinsic","rustc_platform_intrinsics","",null,null],[12,"inputs","","",0,null],[12,"output","","",0,null],[12,"definition","","",0,null],[4,"Type","","",null,null],[13,"Void","","",1,null],[13,"Integer","","",1,null],[13,"Float","","",1,null],[13,"Pointer","","",1,null],[13,"Vector","","",1,null],[13,"Aggregate","","",1,null],[4,"IntrinsicDef","","",null,null],[13,"Named","","",2,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"find","","",0,{"inputs":[{"name":"str"}],"output":{"name":"option"}}]],"paths":[[3,"Intrinsic"],[4,"Type"],[4,"IntrinsicDef"]]};
searchIndex["rustc_plugin"] = {"doc":"Infrastructure for compiler plugins.","items":[[0,"diagnostics","rustc_plugin","",null,null],[0,"registry","","Used by plugin crates to tell `rustc` about the plugins they provide.",null,null],[3,"Registry","rustc_plugin::registry","Structure used to register plugins.",null,null],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages from the plugin registrar.",0,null],[11,"args","","Get the plugin's arguments, if any.",0,null],[11,"register_syntax_extension","","Register a syntax extension of any kind.",0,{"inputs":[{"name":"self"},{"name":"name"},{"name":"syntaxextension"}],"output":null}],[11,"register_custom_derive","","This can be used in place of `register_syntax_extension` to register legacy custom derives (i.e. attribute syntax extensions whose name begins with `derive_`). Legacy custom derives defined by this function do not trigger deprecation warnings when used.",0,{"inputs":[{"name":"self"},{"name":"name"},{"name":"syntaxextension"}],"output":null}],[11,"take_whitelisted_custom_derives","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_macro","","Register a macro of the usual kind.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"macroexpanderfn"}],"output":null}],[11,"register_early_lint_pass","","Register a compiler lint pass.",0,{"inputs":[{"name":"self"},{"name":"earlylintpassobject"}],"output":null}],[11,"register_late_lint_pass","","Register a compiler lint pass.",0,{"inputs":[{"name":"self"},{"name":"latelintpassobject"}],"output":null}],[11,"register_lint_group","","Register a lint group.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"vec"}],"output":null}],[11,"register_mir_pass","","Register a MIR pass",0,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"register_llvm_pass","","Register an LLVM pass.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"register_attribute","","Register an attribute with an attribute type.",0,{"inputs":[{"name":"self"},{"name":"string"},{"name":"attributetype"}],"output":null}],[0,"load","rustc_plugin","Used by `rustc` when loading a plugin.",null,null],[3,"PluginRegistrar","rustc_plugin::load","",null,null],[12,"fun","","",1,null],[12,"args","","",1,null],[5,"load_plugins","","Read plugin metadata and dynamically load registrar functions.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crate"},{"name":"str"},{"name":"option"}],"output":{"name":"vec"}}],[6,"PluginRegistrarFun","","Pointer to a registrar function.",null,null],[0,"build","rustc_plugin","Used by `rustc` when compiling a plugin crate.",null,null],[5,"find_plugin_registrar","rustc_plugin::build","Find the function marked with `#[plugin_registrar]`, if any.",null,{"inputs":[{"name":"handler"},{"name":"map"}],"output":{"name":"option"}}]],"paths":[[3,"Registry"],[3,"PluginRegistrar"]]};
searchIndex["rustc_privacy"] = {"doc":"","items":[[5,"check_crate","rustc_privacy","",null,{"inputs":[{"name":"tyctxt"},{"name":"exportmap"}],"output":{"name":"accesslevels"}}],[0,"diagnostics","","",null,null],[17,"DIAGNOSTICS","","",null,null]],"paths":[]};
searchIndex["rustc_resolve"] = {"doc":"","items":[[3,"PerNS","rustc_resolve","",null,null],[3,"ModuleData","","One node in the tree of modules.",null,null],[3,"NameBinding","","",null,null],[3,"Resolver","","The main resolver class.",null,null],[12,"definitions","","",0,null],[12,"freevars","","",0,null],[12,"export_map","","",0,null],[12,"trait_map","","",0,null],[12,"make_glob_map","","",0,null],[12,"glob_map","","",0,null],[12,"maybe_unused_trait_imports","","",0,null],[12,"exported_macros","","",0,null],[12,"whitelisted_legacy_custom_derives","","",0,null],[3,"ResolverArenas","","",null,null],[4,"Namespace","","",null,null],[13,"TypeNS","","",1,null],[13,"ValueNS","","",1,null],[13,"MacroNS","","",1,null],[4,"MakeGlobMap","","",null,null],[13,"Yes","","",2,null],[13,"No","","",2,null],[11,"next_node_id","","",0,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"get_module_scope","","",0,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[11,"eliminate_crate_var","","",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"is_whitelisted_legacy_custom_derive","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"visit_expansion","","",0,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"expansion"}],"output":null}],[11,"add_ext","","",0,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"rc"}],"output":null}],[11,"add_expansions_at_stmt","","",0,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"vec"}],"output":null}],[11,"resolve_imports","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"find_attr_invoc","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"resolve_macro","","",0,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"bool"}],"output":{"name":"result"}}],[11,"resolve_lexical_macro_path_segment","","",0,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"namespace"},{"name":"option"}],"output":{"name":"result"}}],[11,"resolve_legacy_scope","","",0,{"inputs":[{"name":"self"},{"name":"cell"},{"name":"name"},{"name":"bool"}],"output":{"name":"option"}}],[11,"finalize_current_module_macro_resolutions","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"define_macro","","",0,{"inputs":[{"name":"self"},{"name":"item"},{"name":"legacyscope"}],"output":null}],[11,"get_macro","","",0,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"rc"}}],[11,"populate_module_if_necessary","","Ensures that the reduced graph rooted at the given external module is built, building it if it is not.",0,{"inputs":[{"name":"self"},{"name":"module"}],"output":null}],[11,"resolve_ident_in_module","","Attempts to resolve `ident` in namespaces `ns` of `module`. Invariant: if `record_used` is `Some`, import resolution must be complete.",0,{"inputs":[{"name":"self"},{"name":"module"},{"name":"ident"},{"name":"namespace"},{"name":"bool"},{"name":"option"}],"output":{"name":"result"}}],[11,"add_import_directive","","",0,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"importdirectivesubclass"},{"name":"span"},{"name":"nodeid"},{"name":"visibility"},{"name":"mark"}],"output":null}],[11,"import","","",0,{"inputs":[{"name":"self"},{"name":"namebinding"},{"name":"importdirective"}],"output":{"name":"namebinding"}}],[11,"try_define","","",0,{"inputs":[{"name":"self"},{"name":"module"},{"name":"ident"},{"name":"namespace"},{"name":"namebinding"}],"output":{"name":"result"}}],[11,"ambiguity","","",0,{"inputs":[{"name":"self"},{"name":"namebinding"},{"name":"namebinding"}],"output":{"name":"namebinding"}}],[6,"ErrorMessage","","",null,null],[6,"Module","","",null,null],[17,"DIAGNOSTICS","","",null,null],[8,"ToNameBinding","","",null,null],[10,"to_name_binding","","",3,{"inputs":[{"name":"self"},{"name":"resolverarenas"}],"output":{"name":"namebinding"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"perns"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"perns"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"t"}}],[11,"index_mut","","",4,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"t"}}],[11,"visit_item","","",0,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_arm","","",0,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_block","","",0,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_expr","","",0,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_local","","",0,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_ty","","",0,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_poly_trait_ref","","",0,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant","","",0,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",0,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_fn","","",0,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"namebinding"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"resolve_hir_path","","",0,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":null}],[11,"get_resolution","","",0,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"definitions","","",0,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"new","","",0,{"inputs":[{"name":"session"},{"name":"crate"},{"name":"makeglobmap"},{"name":"crateloader"},{"name":"resolverarenas"}],"output":{"name":"resolver"}}],[11,"arenas","","",0,{"inputs":[],"output":{"name":"resolverarenas"}}],[11,"resolve_crate","","Entry point to crate resolution.",0,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"with_module_lexical_scope","","",0,{"inputs":[{"name":"self"},{"name":"module"},{"name":"f"}],"output":{"name":"t"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"makeglobmap"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"makeglobmap"}}]],"paths":[[3,"Resolver"],[4,"Namespace"],[4,"MakeGlobMap"],[8,"ToNameBinding"],[3,"PerNS"],[3,"ModuleData"],[3,"NameBinding"]]};
searchIndex["rustc_save_analysis"] = {"doc":"","items":[[3,"CsvDumper","rustc_save_analysis","",null,null],[3,"JsonApiDumper","","",null,null],[3,"JsonDumper","","",null,null],[3,"CrateData","","",null,null],[12,"name","","",0,null],[12,"number","","",0,null],[12,"span","","",0,null],[3,"CratePreludeData","","Data for the prelude of a crate.",null,null],[12,"crate_name","","",1,null],[12,"crate_root","","",1,null],[12,"external_crates","","",1,null],[12,"span","","",1,null],[3,"ExternalCrateData","","Data for external crates in the prelude of a crate.",null,null],[12,"name","","",2,null],[12,"num","","",2,null],[12,"file_name","","",2,null],[3,"EnumData","","Data for enum declarations.",null,null],[12,"id","","",3,null],[12,"name","","",3,null],[12,"value","","",3,null],[12,"qualname","","",3,null],[12,"span","","",3,null],[12,"scope","","",3,null],[12,"variants","","",3,null],[12,"visibility","","",3,null],[12,"docs","","",3,null],[12,"sig","","",3,null],[3,"ExternCrateData","","Data for extern crates.",null,null],[12,"id","","",4,null],[12,"name","","",4,null],[12,"crate_num","","",4,null],[12,"location","","",4,null],[12,"span","","",4,null],[12,"scope","","",4,null],[3,"FunctionCallData","","Data about a function call.",null,null],[12,"span","","",5,null],[12,"scope","","",5,null],[12,"ref_id","","",5,null],[3,"FunctionData","","Data for all kinds of functions and methods.",null,null],[12,"id","","",6,null],[12,"name","","",6,null],[12,"qualname","","",6,null],[12,"declaration","","",6,null],[12,"span","","",6,null],[12,"scope","","",6,null],[12,"value","","",6,null],[12,"visibility","","",6,null],[12,"parent","","",6,null],[12,"docs","","",6,null],[12,"sig","","",6,null],[3,"FunctionRefData","","Data about a function call.",null,null],[12,"span","","",7,null],[12,"scope","","",7,null],[12,"ref_id","","",7,null],[3,"ImplData","","",null,null],[12,"id","","",8,null],[12,"span","","",8,null],[12,"scope","","",8,null],[12,"trait_ref","","",8,null],[12,"self_ref","","",8,null],[3,"ImplData2","","",null,null],[12,"id","","",9,null],[12,"span","","",9,null],[12,"scope","","",9,null],[12,"trait_ref","","",9,null],[12,"self_ref","","",9,null],[3,"InheritanceData","","",null,null],[12,"span","","",10,null],[12,"base_id","","",10,null],[12,"deriv_id","","",10,null],[3,"MacroData","","Data about a macro declaration.",null,null],[12,"span","","",11,null],[12,"name","","",11,null],[12,"qualname","","",11,null],[12,"docs","","",11,null],[3,"MacroUseData","","Data about a macro use.",null,null],[12,"span","","",12,null],[12,"name","","",12,null],[12,"qualname","","",12,null],[12,"callee_span","","",12,null],[12,"scope","","",12,null],[12,"imported","","",12,null],[3,"MethodCallData","","Data about a method call.",null,null],[12,"span","","",13,null],[12,"scope","","",13,null],[12,"ref_id","","",13,null],[12,"decl_id","","",13,null],[3,"MethodData","","Data for method declarations (methods with a body are treated as functions).",null,null],[12,"id","","",14,null],[12,"name","","",14,null],[12,"qualname","","",14,null],[12,"span","","",14,null],[12,"scope","","",14,null],[12,"value","","",14,null],[12,"decl_id","","",14,null],[12,"parent","","",14,null],[12,"visibility","","",14,null],[12,"docs","","",14,null],[12,"sig","","",14,null],[3,"ModData","","Data for modules.",null,null],[12,"id","","",15,null],[12,"name","","",15,null],[12,"qualname","","",15,null],[12,"span","","",15,null],[12,"scope","","",15,null],[12,"filename","","",15,null],[12,"items","","",15,null],[12,"visibility","","",15,null],[12,"docs","","",15,null],[12,"sig","","",15,null],[3,"ModRefData","","Data for a reference to a module.",null,null],[12,"span","","",16,null],[12,"scope","","",16,null],[12,"ref_id","","",16,null],[12,"qualname","","",16,null],[3,"StructData","","",null,null],[12,"span","","",17,null],[12,"name","","",17,null],[12,"id","","",17,null],[12,"ctor_id","","",17,null],[12,"qualname","","",17,null],[12,"scope","","",17,null],[12,"value","","",17,null],[12,"fields","","",17,null],[12,"visibility","","",17,null],[12,"docs","","",17,null],[12,"sig","","",17,null],[3,"StructVariantData","","",null,null],[12,"span","","",18,null],[12,"name","","",18,null],[12,"id","","",18,null],[12,"qualname","","",18,null],[12,"type_value","","",18,null],[12,"value","","",18,null],[12,"scope","","",18,null],[12,"parent","","",18,null],[12,"docs","","",18,null],[12,"sig","","",18,null],[3,"TraitData","","",null,null],[12,"span","","",19,null],[12,"id","","",19,null],[12,"name","","",19,null],[12,"qualname","","",19,null],[12,"scope","","",19,null],[12,"value","","",19,null],[12,"items","","",19,null],[12,"visibility","","",19,null],[12,"docs","","",19,null],[12,"sig","","",19,null],[3,"TupleVariantData","","",null,null],[12,"span","","",20,null],[12,"id","","",20,null],[12,"name","","",20,null],[12,"qualname","","",20,null],[12,"type_value","","",20,null],[12,"value","","",20,null],[12,"scope","","",20,null],[12,"parent","","",20,null],[12,"docs","","",20,null],[12,"sig","","",20,null],[3,"TypeDefData","","Data for a typedef.",null,null],[12,"id","","",21,null],[12,"name","","",21,null],[12,"span","","",21,null],[12,"qualname","","",21,null],[12,"value","","",21,null],[12,"visibility","","",21,null],[12,"parent","","",21,null],[12,"docs","","",21,null],[12,"sig","","",21,null],[3,"TypeRefData","","Data for a reference to a type or trait.",null,null],[12,"span","","",22,null],[12,"scope","","",22,null],[12,"ref_id","","",22,null],[12,"qualname","","",22,null],[3,"UseData","","",null,null],[12,"id","","",23,null],[12,"span","","",23,null],[12,"name","","",23,null],[12,"mod_id","","",23,null],[12,"scope","","",23,null],[12,"visibility","","",23,null],[3,"UseGlobData","","",null,null],[12,"id","","",24,null],[12,"span","","",24,null],[12,"names","","",24,null],[12,"scope","","",24,null],[12,"visibility","","",24,null],[3,"VariableData","","Data for local and global variables (consts and statics).",null,null],[12,"id","","",25,null],[12,"kind","","",25,null],[12,"name","","",25,null],[12,"qualname","","",25,null],[12,"span","","",25,null],[12,"scope","","",25,null],[12,"parent","","",25,null],[12,"value","","",25,null],[12,"type_value","","",25,null],[12,"visibility","","",25,null],[12,"docs","","",25,null],[12,"sig","","",25,null],[3,"VariableRefData","","Data for the use of some item (e.g., the use of a local variable, which will refer to that variables declaration (by ref_id)).",null,null],[12,"name","","",26,null],[12,"span","","",26,null],[12,"scope","","",26,null],[12,"ref_id","","",26,null],[3,"Signature","","Encodes information about the signature of a definition. This should have enough information to create a nice display about a definition without access to the source code.",null,null],[12,"span","","",27,null],[12,"text","","",27,null],[12,"ident_start","","",27,null],[12,"ident_end","","",27,null],[12,"defs","","",27,null],[12,"refs","","",27,null],[3,"SigElement","","An element of a signature. `start` and `end` are byte offsets into the `text` of the parent `Signature`.",null,null],[12,"id","","",28,null],[12,"start","","",28,null],[12,"end","","",28,null],[3,"DumpVisitor","","",null,null],[3,"SaveContext","","",null,null],[4,"Data","","Data for any entity in the Rust language. The actual data contained varies with the kind of entity being queried. See the nested structs for details.",null,null],[13,"EnumData","","Data for Enums.",29,null],[13,"ExternCrateData","","Data for extern crates.",29,null],[13,"FunctionCallData","","Data about a function call.",29,null],[13,"FunctionData","","Data for all kinds of functions and methods.",29,null],[13,"FunctionRefData","","Data about a function ref.",29,null],[13,"ImplData","","Data for impls.",29,null],[13,"InheritanceData","","Data for trait inheritance.",29,null],[13,"MacroData","","Data about a macro declaration.",29,null],[13,"MacroUseData","","Data about a macro use.",29,null],[13,"MethodCallData","","Data about a method call.",29,null],[13,"MethodData","","Data for method declarations (methods with a body are treated as functions).",29,null],[13,"ModData","","Data for modules.",29,null],[13,"ModRefData","","Data for a reference to a module.",29,null],[13,"StructData","","Data for a struct declaration.",29,null],[13,"StructVariantDat","","Data for a struct variant.",29,null],[13,"TraitData","","Data for a trait declaration.",29,null],[13,"TupleVariantData","","Data for a tuple variant.",29,null],[13,"TypeDefData","","Data for a typedef.",29,null],[13,"TypeRefData","","Data for a reference to a type or trait.",29,null],[13,"UseData","","Data for a use statement.",29,null],[13,"UseGlobData","","Data for a global use statement.",29,null],[13,"VariableData","","Data for local and global variables (consts and statics), and fields.",29,null],[13,"VariableRefData","","Data for the use of some variable (e.g., the use of a local variable, which will refere to that variables declaration).",29,null],[4,"Visibility","","",null,null],[13,"Public","","",30,null],[13,"Restricted","","",30,null],[13,"Inherited","","",30,null],[4,"VariableKind","","",null,null],[13,"Static","","",31,null],[13,"Const","","",31,null],[13,"Local","","",31,null],[13,"Field","","",31,null],[4,"Format","","",null,null],[13,"Csv","","",32,null],[13,"Json","","",32,null],[13,"JsonApi","","",32,null],[5,"process_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"crate"},{"name":"crateanalysis"},{"name":"str"},{"name":"option"},{"name":"format"}],"output":null}],[5,"generated_code","","",null,{"inputs":[{"name":"span"}],"output":{"name":"bool"}}],[11,"new","","",33,{"inputs":[{"name":"w"}],"output":{"name":"csvdumper"}}],[11,"crate_prelude","","",33,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"enum_data","","",33,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"extern_crate","","",33,{"inputs":[{"name":"self"},{"name":"externcratedata"}],"output":null}],[11,"impl_data","","",33,{"inputs":[{"name":"self"},{"name":"impldata"}],"output":null}],[11,"inheritance","","",33,{"inputs":[{"name":"self"},{"name":"inheritancedata"}],"output":null}],[11,"function","","",33,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"function_ref","","",33,{"inputs":[{"name":"self"},{"name":"functionrefdata"}],"output":null}],[11,"function_call","","",33,{"inputs":[{"name":"self"},{"name":"functioncalldata"}],"output":null}],[11,"method","","",33,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"method_call","","",33,{"inputs":[{"name":"self"},{"name":"methodcalldata"}],"output":null}],[11,"macro_data","","",33,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"macro_use","","",33,{"inputs":[{"name":"self"},{"name":"macrousedata"}],"output":null}],[11,"mod_data","","",33,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"mod_ref","","",33,{"inputs":[{"name":"self"},{"name":"modrefdata"}],"output":null}],[11,"struct_data","","",33,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"struct_variant","","",33,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"trait_data","","",33,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"tuple_variant","","",33,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"type_ref","","",33,{"inputs":[{"name":"self"},{"name":"typerefdata"}],"output":null}],[11,"typedef","","",33,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"use_data","","",33,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",33,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"variable","","",33,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"variable_ref","","",33,{"inputs":[{"name":"self"},{"name":"variablerefdata"}],"output":null}],[11,"new","","",34,{"inputs":[{"name":"w"}],"output":{"name":"jsonapidumper"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"crate_prelude","","",34,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"use_data","","",34,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",34,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"enum_data","","",34,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"tuple_variant","","",34,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"struct_variant","","",34,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"struct_data","","",34,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"trait_data","","",34,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"function","","",34,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"method","","",34,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"macro_data","","",34,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"mod_data","","",34,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"typedef","","",34,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"variable","","",34,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"new","","",35,{"inputs":[{"name":"w"}],"output":{"name":"jsondumper"}}],[11,"drop","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"crate_prelude","","",35,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"extern_crate","","",35,{"inputs":[{"name":"self"},{"name":"externcratedata"}],"output":null}],[11,"use_data","","",35,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",35,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"enum_data","","",35,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"tuple_variant","","",35,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"struct_variant","","",35,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"struct_data","","",35,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"trait_data","","",35,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"function","","",35,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"method","","",35,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"macro_data","","",35,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"typedef","","",35,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"variable","","",35,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"function_ref","","",35,{"inputs":[{"name":"self"},{"name":"functionrefdata"}],"output":null}],[11,"function_call","","",35,{"inputs":[{"name":"self"},{"name":"functioncalldata"}],"output":null}],[11,"method_call","","",35,{"inputs":[{"name":"self"},{"name":"methodcalldata"}],"output":null}],[11,"mod_ref","","",35,{"inputs":[{"name":"self"},{"name":"modrefdata"}],"output":null}],[11,"type_ref","","",35,{"inputs":[{"name":"self"},{"name":"typerefdata"}],"output":null}],[11,"variable_ref","","",35,{"inputs":[{"name":"self"},{"name":"variablerefdata"}],"output":null}],[11,"macro_use","","",35,{"inputs":[{"name":"self"},{"name":"macrousedata"}],"output":null}],[11,"mod_data","","",35,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"impl_data","","",35,{"inputs":[{"name":"self"},{"name":"impldata"}],"output":null}],[11,"inheritance","","",35,{"inputs":[{"name":"self"},{"name":"inheritancedata"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"from","","",30,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"enumdata"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"functiondata"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"methoddata"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"typerefdata"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"sigelement"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","",36,{"inputs":[{"name":"savecontext"},{"name":"d"}],"output":{"name":"dumpvisitor"}}],[11,"dump_crate_info","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"crate"}],"output":null}],[11,"visit_item","","",36,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_generics","","",36,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty","","",36,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_expr","","",36,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_mac","","",36,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_pat","","",36,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_arm","","",36,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_stmt","","",36,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_local","","",36,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[0,"external_data","","",null,null],[3,"SpanData","rustc_save_analysis::external_data","",null,null],[12,"file_name","","",37,null],[12,"byte_start","","",37,null],[12,"byte_end","","",37,null],[12,"line_start","","1-based.",37,null],[12,"line_end","","",37,null],[12,"column_start","","1-based, character offset.",37,null],[12,"column_end","","",37,null],[3,"CratePreludeData","","",null,null],[12,"crate_name","","",38,null],[12,"crate_root","","",38,null],[12,"external_crates","","",38,null],[12,"span","","",38,null],[3,"EnumData","","Data for enum declarations.",null,null],[12,"id","","",39,null],[12,"value","","",39,null],[12,"name","","",39,null],[12,"qualname","","",39,null],[12,"span","","",39,null],[12,"scope","","",39,null],[12,"variants","","",39,null],[12,"visibility","","",39,null],[12,"docs","","",39,null],[12,"sig","","",39,null],[3,"ExternCrateData","","Data for extern crates.",null,null],[12,"id","","",40,null],[12,"name","","",40,null],[12,"crate_num","","",40,null],[12,"location","","",40,null],[12,"span","","",40,null],[12,"scope","","",40,null],[3,"FunctionCallData","","Data about a function call.",null,null],[12,"span","","",41,null],[12,"scope","","",41,null],[12,"ref_id","","",41,null],[3,"FunctionData","","Data for all kinds of functions and methods.",null,null],[12,"id","","",42,null],[12,"name","","",42,null],[12,"qualname","","",42,null],[12,"declaration","","",42,null],[12,"span","","",42,null],[12,"scope","","",42,null],[12,"value","","",42,null],[12,"visibility","","",42,null],[12,"parent","","",42,null],[12,"docs","","",42,null],[12,"sig","","",42,null],[3,"FunctionRefData","","Data about a function call.",null,null],[12,"span","","",43,null],[12,"scope","","",43,null],[12,"ref_id","","",43,null],[3,"ImplData","","",null,null],[12,"id","","",44,null],[12,"span","","",44,null],[12,"scope","","",44,null],[12,"trait_ref","","",44,null],[12,"self_ref","","",44,null],[3,"InheritanceData","","",null,null],[12,"span","","",45,null],[12,"base_id","","",45,null],[12,"deriv_id","","",45,null],[3,"MacroData","","Data about a macro declaration.",null,null],[12,"span","","",46,null],[12,"name","","",46,null],[12,"qualname","","",46,null],[12,"docs","","",46,null],[3,"MacroUseData","","Data about a macro use.",null,null],[12,"span","","",47,null],[12,"name","","",47,null],[12,"qualname","","",47,null],[12,"callee_span","","",47,null],[12,"scope","","",47,null],[3,"MethodCallData","","Data about a method call.",null,null],[12,"span","","",48,null],[12,"scope","","",48,null],[12,"ref_id","","",48,null],[12,"decl_id","","",48,null],[3,"MethodData","","Data for method declarations (methods with a body are treated as functions).",null,null],[12,"id","","",49,null],[12,"name","","",49,null],[12,"qualname","","",49,null],[12,"span","","",49,null],[12,"scope","","",49,null],[12,"value","","",49,null],[12,"decl_id","","",49,null],[12,"visibility","","",49,null],[12,"parent","","",49,null],[12,"docs","","",49,null],[12,"sig","","",49,null],[3,"ModData","","Data for modules.",null,null],[12,"id","","",50,null],[12,"name","","",50,null],[12,"qualname","","",50,null],[12,"span","","",50,null],[12,"scope","","",50,null],[12,"filename","","",50,null],[12,"items","","",50,null],[12,"visibility","","",50,null],[12,"docs","","",50,null],[12,"sig","","",50,null],[3,"ModRefData","","Data for a reference to a module.",null,null],[12,"span","","",51,null],[12,"scope","","",51,null],[12,"ref_id","","",51,null],[12,"qualname","","",51,null],[3,"StructData","","",null,null],[12,"span","","",52,null],[12,"name","","",52,null],[12,"id","","",52,null],[12,"ctor_id","","",52,null],[12,"qualname","","",52,null],[12,"scope","","",52,null],[12,"value","","",52,null],[12,"fields","","",52,null],[12,"visibility","","",52,null],[12,"docs","","",52,null],[12,"sig","","",52,null],[3,"StructVariantData","","",null,null],[12,"span","","",53,null],[12,"name","","",53,null],[12,"id","","",53,null],[12,"qualname","","",53,null],[12,"type_value","","",53,null],[12,"value","","",53,null],[12,"scope","","",53,null],[12,"parent","","",53,null],[12,"docs","","",53,null],[12,"sig","","",53,null],[3,"TraitData","","",null,null],[12,"span","","",54,null],[12,"name","","",54,null],[12,"id","","",54,null],[12,"qualname","","",54,null],[12,"scope","","",54,null],[12,"value","","",54,null],[12,"items","","",54,null],[12,"visibility","","",54,null],[12,"docs","","",54,null],[12,"sig","","",54,null],[3,"TupleVariantData","","",null,null],[12,"span","","",55,null],[12,"id","","",55,null],[12,"name","","",55,null],[12,"qualname","","",55,null],[12,"type_value","","",55,null],[12,"value","","",55,null],[12,"scope","","",55,null],[12,"parent","","",55,null],[12,"docs","","",55,null],[12,"sig","","",55,null],[3,"TypeDefData","","Data for a typedef.",null,null],[12,"id","","",56,null],[12,"name","","",56,null],[12,"span","","",56,null],[12,"qualname","","",56,null],[12,"value","","",56,null],[12,"visibility","","",56,null],[12,"parent","","",56,null],[12,"docs","","",56,null],[12,"sig","","",56,null],[3,"TypeRefData","","Data for a reference to a type or trait.",null,null],[12,"span","","",57,null],[12,"scope","","",57,null],[12,"ref_id","","",57,null],[12,"qualname","","",57,null],[3,"UseData","","",null,null],[12,"id","","",58,null],[12,"span","","",58,null],[12,"name","","",58,null],[12,"mod_id","","",58,null],[12,"scope","","",58,null],[12,"visibility","","",58,null],[3,"UseGlobData","","",null,null],[12,"id","","",59,null],[12,"span","","",59,null],[12,"names","","",59,null],[12,"scope","","",59,null],[12,"visibility","","",59,null],[3,"VariableData","","Data for local and global variables (consts and statics).",null,null],[12,"id","","",60,null],[12,"name","","",60,null],[12,"kind","","",60,null],[12,"qualname","","",60,null],[12,"span","","",60,null],[12,"scope","","",60,null],[12,"value","","",60,null],[12,"type_value","","",60,null],[12,"parent","","",60,null],[12,"visibility","","",60,null],[12,"docs","","",60,null],[12,"sig","","",60,null],[3,"VariableRefData","","Data for the use of some item (e.g., the use of a local variable, which will refer to that variables declaration (by ref_id)).",null,null],[12,"name","","",61,null],[12,"span","","",61,null],[12,"scope","","",61,null],[12,"ref_id","","",61,null],[3,"Signature","","",null,null],[12,"span","","",62,null],[12,"text","","",62,null],[12,"ident_start","","",62,null],[12,"ident_end","","",62,null],[12,"defs","","",62,null],[12,"refs","","",62,null],[5,"make_def_id","","",null,{"inputs":[{"name":"nodeid"},{"name":"map"}],"output":{"name":"defid"}}],[5,"null_def_id","","",null,{"inputs":[],"output":{"name":"defid"}}],[8,"Lower","","",null,null],[16,"Target","","",63,null],[10,"lower","","",63,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_span","","",37,{"inputs":[{"name":"span"},{"name":"codemap"}],"output":{"name":"spandata"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",1,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"cratepreludedata"}}],[11,"clone","rustc_save_analysis::external_data","",39,{"inputs":[{"name":"self"}],"output":{"name":"enumdata"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",3,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"enumdata"}}],[11,"fmt","rustc_save_analysis::external_data","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",4,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"externcratedata"}}],[11,"fmt","rustc_save_analysis::external_data","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",5,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"functioncalldata"}}],[11,"clone","rustc_save_analysis::external_data","",42,{"inputs":[{"name":"self"}],"output":{"name":"functiondata"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",6,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"functiondata"}}],[11,"fmt","rustc_save_analysis::external_data","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",7,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"functionrefdata"}}],[11,"fmt","rustc_save_analysis::external_data","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",8,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"impldata"}}],[11,"fmt","rustc_save_analysis::external_data","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",10,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"inheritancedata"}}],[11,"fmt","rustc_save_analysis::external_data","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",11,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"macrodata"}}],[11,"fmt","rustc_save_analysis::external_data","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",12,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"macrousedata"}}],[11,"fmt","rustc_save_analysis::external_data","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",13,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"methodcalldata"}}],[11,"clone","rustc_save_analysis::external_data","",49,{"inputs":[{"name":"self"}],"output":{"name":"methoddata"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",14,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"methoddata"}}],[11,"fmt","rustc_save_analysis::external_data","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",15,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"moddata"}}],[11,"fmt","rustc_save_analysis::external_data","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"modrefdata"}}],[11,"fmt","rustc_save_analysis::external_data","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",17,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"structdata"}}],[11,"fmt","rustc_save_analysis::external_data","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",18,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"structvariantdata"}}],[11,"fmt","rustc_save_analysis::external_data","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",19,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"traitdata"}}],[11,"fmt","rustc_save_analysis::external_data","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",20,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"tuplevariantdata"}}],[11,"fmt","rustc_save_analysis::external_data","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",21,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"typedefdata"}}],[11,"clone","rustc_save_analysis::external_data","",57,{"inputs":[{"name":"self"}],"output":{"name":"typerefdata"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",22,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"typerefdata"}}],[11,"fmt","rustc_save_analysis::external_data","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",23,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"usedata"}}],[11,"fmt","rustc_save_analysis::external_data","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",24,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"useglobdata"}}],[11,"fmt","rustc_save_analysis::external_data","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",25,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"variabledata"}}],[11,"fmt","rustc_save_analysis::external_data","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",26,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"variablerefdata"}}],[11,"clone","rustc_save_analysis::external_data","",62,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",27,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"signature"}}],[0,"span_utils","","",null,null],[3,"SpanUtils","rustc_save_analysis::span_utils","",null,null],[12,"sess","","",64,null],[12,"err_count","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"spanutils"}}],[11,"new","","",64,{"inputs":[{"name":"session"}],"output":{"name":"spanutils"}}],[11,"make_path_string","","",64,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"make_sub_span","","",64,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"option"}}],[11,"snippet","","",64,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"retokenise_span","","",64,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"stringreader"}}],[11,"span_for_last_ident","","",64,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_for_first_ident","","",64,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"sub_span_for_meth_name","","",64,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"sub_span_for_type_name","","",64,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"spans_with_brackets","","",64,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"},{"name":"isize"}],"output":{"name":"vec"}}],[11,"signature_string_for_span","","`span` must be the span for an item such as a function or struct. This function returns the program text from the start of the span until the end of the 'signature' part, that is up to, but not including an opening brace or semicolon.",64,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"sub_span_before_token","","",64,{"inputs":[{"name":"self"},{"name":"span"},{"name":"token"}],"output":{"name":"option"}}],[11,"sub_span_of_token","","",64,{"inputs":[{"name":"self"},{"name":"span"},{"name":"token"}],"output":{"name":"option"}}],[11,"sub_span_after_keyword","","",64,{"inputs":[{"name":"self"},{"name":"span"},{"name":"keyword"}],"output":{"name":"option"}}],[11,"sub_span_after_token","","",64,{"inputs":[{"name":"self"},{"name":"span"},{"name":"token"}],"output":{"name":"option"}}],[11,"spans_for_path_segments","","",64,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"vec"}}],[11,"spans_for_ty_params","","",64,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"vec"}}],[11,"report_span_err","","",64,{"inputs":[{"name":"self"},{"name":"str"},{"name":"span"}],"output":null}],[11,"span_for_macro_def_name","","",64,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_for_macro_use_name","","",64,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"filter_generated","","Return true if the span is generated code, and it is not a subspan of the root callsite.",64,{"inputs":[{"name":"self"},{"name":"option"},{"name":"span"}],"output":{"name":"bool"}}],[0,"recorder","rustc_save_analysis","",null,null],[4,"Row","rustc_save_analysis::recorder","",null,null],[13,"TypeRef","","",65,null],[13,"ModRef","","",65,null],[13,"VarRef","","",65,null],[13,"FnRef","","",65,null],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[8,"Dump","rustc_save_analysis","",null,null],[11,"crate_prelude","","",66,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"enum_data","","",66,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"extern_crate","","",66,{"inputs":[{"name":"self"},{"name":"externcratedata"}],"output":null}],[11,"impl_data","","",66,{"inputs":[{"name":"self"},{"name":"impldata"}],"output":null}],[11,"inheritance","","",66,{"inputs":[{"name":"self"},{"name":"inheritancedata"}],"output":null}],[11,"function","","",66,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"function_ref","","",66,{"inputs":[{"name":"self"},{"name":"functionrefdata"}],"output":null}],[11,"function_call","","",66,{"inputs":[{"name":"self"},{"name":"functioncalldata"}],"output":null}],[11,"method","","",66,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"method_call","","",66,{"inputs":[{"name":"self"},{"name":"methodcalldata"}],"output":null}],[11,"macro_data","","",66,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"macro_use","","",66,{"inputs":[{"name":"self"},{"name":"macrousedata"}],"output":null}],[11,"mod_data","","",66,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"mod_ref","","",66,{"inputs":[{"name":"self"},{"name":"modrefdata"}],"output":null}],[11,"struct_data","","",66,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"struct_variant","","",66,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"trait_data","","",66,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"tuple_variant","","",66,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"type_ref","","",66,{"inputs":[{"name":"self"},{"name":"typerefdata"}],"output":null}],[11,"typedef","","",66,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"use_data","","",66,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",66,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"variable","","",66,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"variable_ref","","",66,{"inputs":[{"name":"self"},{"name":"variablerefdata"}],"output":null}],[11,"new","","",67,{"inputs":[{"name":"tyctxt"},{"name":"crateanalysis"}],"output":{"name":"savecontext"}}],[11,"from_span_utils","","",67,{"inputs":[{"name":"tyctxt"},{"name":"crateanalysis"},{"name":"spanutils"}],"output":{"name":"savecontext"}}],[11,"get_external_crates","","",67,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_item_data","","",67,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"option"}}],[11,"get_field_data","","",67,{"inputs":[{"name":"self"},{"name":"structfield"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_method_data","","",67,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"name"},{"name":"span"}],"output":{"name":"option"}}],[11,"get_trait_ref_data","","",67,{"inputs":[{"name":"self"},{"name":"traitref"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_expr_data","","",67,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"option"}}],[11,"get_path_def","","",67,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"def"}}],[11,"get_path_data","","",67,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"path"}],"output":{"name":"option"}}],[11,"get_field_ref_data","","",67,{"inputs":[{"name":"self"},{"name":"field"},{"name":"variantdef"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_macro_use_data","","Attempt to return MacroUseData for any AST node.",67,{"inputs":[{"name":"self"},{"name":"span"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_data_for_id","","",67,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"data"}}],[11,"enclosing_scope","","",67,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"crate_prelude","","",66,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"enum_data","","",66,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"extern_crate","","",66,{"inputs":[{"name":"self"},{"name":"externcratedata"}],"output":null}],[11,"impl_data","","",66,{"inputs":[{"name":"self"},{"name":"impldata"}],"output":null}],[11,"inheritance","","",66,{"inputs":[{"name":"self"},{"name":"inheritancedata"}],"output":null}],[11,"function","","",66,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"function_ref","","",66,{"inputs":[{"name":"self"},{"name":"functionrefdata"}],"output":null}],[11,"function_call","","",66,{"inputs":[{"name":"self"},{"name":"functioncalldata"}],"output":null}],[11,"method","","",66,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"method_call","","",66,{"inputs":[{"name":"self"},{"name":"methodcalldata"}],"output":null}],[11,"macro_data","","",66,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"macro_use","","",66,{"inputs":[{"name":"self"},{"name":"macrousedata"}],"output":null}],[11,"mod_data","","",66,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"mod_ref","","",66,{"inputs":[{"name":"self"},{"name":"modrefdata"}],"output":null}],[11,"struct_data","","",66,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"struct_variant","","",66,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"trait_data","","",66,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"tuple_variant","","",66,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"type_ref","","",66,{"inputs":[{"name":"self"},{"name":"typerefdata"}],"output":null}],[11,"typedef","","",66,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"use_data","","",66,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",66,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"variable","","",66,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"variable_ref","","",66,{"inputs":[{"name":"self"},{"name":"variablerefdata"}],"output":null}]],"paths":[[3,"CrateData"],[3,"CratePreludeData"],[3,"ExternalCrateData"],[3,"EnumData"],[3,"ExternCrateData"],[3,"FunctionCallData"],[3,"FunctionData"],[3,"FunctionRefData"],[3,"ImplData"],[3,"ImplData2"],[3,"InheritanceData"],[3,"MacroData"],[3,"MacroUseData"],[3,"MethodCallData"],[3,"MethodData"],[3,"ModData"],[3,"ModRefData"],[3,"StructData"],[3,"StructVariantData"],[3,"TraitData"],[3,"TupleVariantData"],[3,"TypeDefData"],[3,"TypeRefData"],[3,"UseData"],[3,"UseGlobData"],[3,"VariableData"],[3,"VariableRefData"],[3,"Signature"],[3,"SigElement"],[4,"Data"],[4,"Visibility"],[4,"VariableKind"],[4,"Format"],[3,"CsvDumper"],[3,"JsonApiDumper"],[3,"JsonDumper"],[3,"DumpVisitor"],[3,"SpanData"],[3,"CratePreludeData"],[3,"EnumData"],[3,"ExternCrateData"],[3,"FunctionCallData"],[3,"FunctionData"],[3,"FunctionRefData"],[3,"ImplData"],[3,"InheritanceData"],[3,"MacroData"],[3,"MacroUseData"],[3,"MethodCallData"],[3,"MethodData"],[3,"ModData"],[3,"ModRefData"],[3,"StructData"],[3,"StructVariantData"],[3,"TraitData"],[3,"TupleVariantData"],[3,"TypeDefData"],[3,"TypeRefData"],[3,"UseData"],[3,"UseGlobData"],[3,"VariableData"],[3,"VariableRefData"],[3,"Signature"],[8,"Lower"],[3,"SpanUtils"],[4,"Row"],[8,"Dump"],[3,"SaveContext"]]};
searchIndex["rustc_trans"] = {"doc":"The Rust compiler.","items":[[0,"session","rustc_trans","",null,null],[0,"config","rustc_trans::session","Contains infrastructure for configuring the compiler, including parsing command line options.",null,null],[3,"Config","rustc_trans::session::config","",null,null],[12,"target","","",0,null],[12,"int_type","","",0,null],[12,"uint_type","","",0,null],[4,"OptLevel","","",null,null],[13,"No","","",1,null],[13,"Less","","",1,null],[13,"Default","","",1,null],[13,"Aggressive","","",1,null],[13,"Size","","",1,null],[13,"SizeMin","","",1,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",2,null],[13,"LimitedDebugInfo","","",2,null],[13,"FullDebugInfo","","",2,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",3,null],[13,"Assembly","","",3,null],[13,"LlvmAssembly","","",3,null],[13,"Metadata","","",3,null],[13,"Object","","",3,null],[13,"Exe","","",3,null],[13,"DepInfo","","",3,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",4,null],[13,"Json","","",4,null],[3,"OutputTypes","","",null,null],[3,"Externs","","",null,null],[3,"Options","","",null,null],[12,"crate_types","","",5,null],[12,"optimize","","",5,null],[12,"debug_assertions","","",5,null],[12,"debuginfo","","",5,null],[12,"lint_opts","","",5,null],[12,"lint_cap","","",5,null],[12,"describe_lints","","",5,null],[12,"output_types","","",5,null],[12,"search_paths","","",5,null],[12,"libs","","",5,null],[12,"maybe_sysroot","","",5,null],[12,"target_triple","","",5,null],[12,"test","","",5,null],[12,"error_format","","",5,null],[12,"incremental","","",5,null],[12,"debugging_opts","","",5,null],[12,"prints","","",5,null],[12,"cg","","",5,null],[12,"externs","","",5,null],[12,"crate_name","","",5,null],[12,"alt_std_name","","",5,null],[12,"unstable_features","","",5,null],[12,"actually_rustdoc","","",5,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",6,null],[13,"Sysroot","","",6,null],[13,"CrateName","","",6,null],[13,"Cfg","","",6,null],[13,"TargetList","","",6,null],[13,"TargetCPUs","","",6,null],[13,"TargetFeatures","","",6,null],[13,"RelocationModels","","",6,null],[13,"CodeModels","","",6,null],[13,"TargetSpec","","",6,null],[4,"Input","","",null,null],[13,"File","","Load source from file",7,null],[13,"Str","","",7,null],[12,"name","rustc_trans::session::config::Input","String that is shown in place of a filename",7,null],[12,"input","","Anonymous source string",7,null],[3,"OutputFilenames","rustc_trans::session::config","",null,null],[12,"out_directory","","",8,null],[12,"out_filestem","","",8,null],[12,"single_output_file","","",8,null],[12,"extra","","",8,null],[12,"outputs","","",8,null],[17,"NUMBERED_CODEGEN_UNIT_MARKER","","Codegen unit names generated by the numbered naming scheme will contain this marker right before the index of the codegen unit.",null,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[4,"EntryFnType","","",null,null],[13,"EntryMain","","",9,null],[13,"EntryStart","","",9,null],[13,"EntryNone","","",9,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",10,null],[13,"CrateTypeDylib","","",10,null],[13,"CrateTypeRlib","","",10,null],[13,"CrateTypeStaticlib","","",10,null],[13,"CrateTypeCdylib","","",10,null],[13,"CrateTypeProcMacro","","",10,null],[4,"Passes","","",null,null],[13,"SomePasses","","",11,null],[13,"AllPasses","","",11,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",12,null],[12,"linker","","",12,null],[12,"link_arg","","",12,null],[12,"link_args","","",12,null],[12,"link_dead_code","","",12,null],[12,"lto","","",12,null],[12,"target_cpu","","",12,null],[12,"target_feature","","",12,null],[12,"passes","","",12,null],[12,"llvm_args","","",12,null],[12,"save_temps","","",12,null],[12,"rpath","","",12,null],[12,"no_prepopulate_passes","","",12,null],[12,"no_vectorize_loops","","",12,null],[12,"no_vectorize_slp","","",12,null],[12,"soft_float","","",12,null],[12,"prefer_dynamic","","",12,null],[12,"no_integrated_as","","",12,null],[12,"no_redzone","","",12,null],[12,"relocation_model","","",12,null],[12,"code_model","","",12,null],[12,"metadata","","",12,null],[12,"extra_filename","","",12,null],[12,"codegen_units","","",12,null],[12,"remark","","",12,null],[12,"no_stack_check","","",12,null],[12,"debuginfo","","",12,null],[12,"opt_level","","",12,null],[12,"debug_assertions","","",12,null],[12,"inline_threshold","","",12,null],[12,"panic","","",12,null],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[6,"CodegenSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",13,null],[12,"time_passes","","",13,null],[12,"count_llvm_insns","","",13,null],[12,"time_llvm_passes","","",13,null],[12,"input_stats","","",13,null],[12,"trans_stats","","",13,null],[12,"asm_comments","","",13,null],[12,"no_verify","","",13,null],[12,"borrowck_stats","","",13,null],[12,"no_landing_pads","","",13,null],[12,"debug_llvm","","",13,null],[12,"meta_stats","","",13,null],[12,"print_link_args","","",13,null],[12,"print_llvm_passes","","",13,null],[12,"ast_json","","",13,null],[12,"ast_json_noexpand","","",13,null],[12,"ls","","",13,null],[12,"save_analysis","","",13,null],[12,"save_analysis_csv","","",13,null],[12,"save_analysis_api","","",13,null],[12,"print_move_fragments","","",13,null],[12,"flowgraph_print_loans","","",13,null],[12,"flowgraph_print_moves","","",13,null],[12,"flowgraph_print_assigns","","",13,null],[12,"flowgraph_print_all","","",13,null],[12,"print_region_graph","","",13,null],[12,"parse_only","","",13,null],[12,"no_trans","","",13,null],[12,"treat_err_as_bug","","",13,null],[12,"continue_parse_after_error","","",13,null],[12,"incremental","","",13,null],[12,"incremental_info","","",13,null],[12,"incremental_dump_hash","","",13,null],[12,"dump_dep_graph","","",13,null],[12,"query_dep_graph","","",13,null],[12,"no_analysis","","",13,null],[12,"extra_plugins","","",13,null],[12,"unstable_options","","",13,null],[12,"force_overflow_checks","","",13,null],[12,"trace_macros","","",13,null],[12,"debug_macros","","",13,null],[12,"enable_nonzeroing_move_hints","","",13,null],[12,"keep_hygiene_data","","",13,null],[12,"keep_ast","","",13,null],[12,"show_span","","",13,null],[12,"print_type_sizes","","",13,null],[12,"print_trans_items","","",13,null],[12,"mir_opt_level","","",13,null],[12,"dump_mir","","",13,null],[12,"dump_mir_dir","","",13,null],[12,"perf_stats","","",13,null],[12,"hir_stats","","",13,null],[12,"mir_stats","","",13,null],[12,"always_encode_mir","","",13,null],[12,"osx_rpath_install_name","","",13,null],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[6,"DebuggingSetter","","",null,null],[17,"DB_OPTIONS","","",null,null],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"hashset"}}],[5,"build_configuration","","",null,{"inputs":[{"name":"session"},{"name":"hashset"}],"output":{"name":"hashset"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[4,"OptionStability","","",null,null],[13,"Stable","","",14,null],[13,"UnstableButNotReally","","",14,null],[13,"Unstable","","",14,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",15,null],[12,"stability","","",15,null],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"hashset"}}],[5,"build_session_options_and_crate_config","","",null,null],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc_trans::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[0,"filesearch","rustc_trans::session","",null,null],[4,"FileMatch","rustc_trans::session::filesearch","",null,null],[13,"FileMatches","","",16,null],[13,"FileDoesntMatch","","",16,null],[3,"FileSearch","","",null,null],[12,"sysroot","","",17,null],[12,"search_paths","","",17,null],[12,"triple","","",17,null],[12,"kind","","",17,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[0,"search_paths","rustc_trans::session","",null,null],[3,"SearchPaths","rustc_trans::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",18,null],[13,"Crate","","",18,null],[13,"Dependency","","",18,null],[13,"Framework","","",18,null],[13,"ExternFlag","","",18,null],[13,"All","","",18,null],[3,"Session","rustc_trans::session","",null,null],[12,"dep_graph","","",19,null],[12,"target","","",19,null],[12,"host","","",19,null],[12,"opts","","",19,null],[12,"cstore","","",19,null],[12,"parse_sess","","",19,null],[12,"entry_fn","","",19,null],[12,"entry_type","","",19,null],[12,"plugin_registrar_fn","","",19,null],[12,"derive_registrar_fn","","",19,null],[12,"default_sysroot","","",19,null],[12,"local_crate_source_file","","",19,null],[12,"working_dir","","",19,null],[12,"lint_store","","",19,null],[12,"lints","","",19,null],[12,"one_time_diagnostics","","Set of (LintId, span, message) tuples tracking lint (sub)diagnostics that have been set once, but should not be set again, in order to avoid redundantly verbose output (Issue #24690).",19,null],[12,"plugin_llvm_passes","","",19,null],[12,"mir_passes","","",19,null],[12,"plugin_attributes","","",19,null],[12,"crate_types","","",19,null],[12,"dependency_formats","","",19,null],[12,"crate_disambiguator","","",19,null],[12,"features","","",19,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization.",19,null],[12,"type_length_limit","","The maximum length of types during monomorphization.",19,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime dependency if it didn't already find one, and this tracks what was injected.",19,null],[12,"injected_panic_runtime","","",19,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of the localized span for the macro body) to the macro name and defintion span in the source crate.",19,null],[12,"perf_stats","","Some measurements that are being gathered during compilation.",19,null],[12,"code_stats","","Data about code being compiled, gathered during compilation.",19,null],[3,"PerfStats","","",null,null],[12,"svh_time","","",20,null],[12,"incr_comp_hashes_time","","",20,null],[12,"incr_comp_hashes_count","","",20,null],[12,"incr_comp_bytes_hashed","","",20,null],[12,"symbol_hash_time","","",20,null],[12,"decode_def_path_tables_time","","",20,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"},{"name":"option"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[4,"IncrCompSession","","Holds data on the current incremental compilation session, if there is one.",null,null],[13,"NotInitialized","","",21,null],[13,"Active","","",21,null],[12,"session_directory","rustc_trans::session::IncrCompSession","",21,null],[12,"lock_file","","",21,null],[13,"Finalized","rustc_trans::session","",21,null],[12,"session_directory","rustc_trans::session::IncrCompSession","",21,null],[13,"InvalidBecauseOfErrors","rustc_trans::session","",21,null],[12,"session_directory","rustc_trans::session::IncrCompSession","",21,null],[5,"early_error","rustc_trans::session","",null,null],[5,"early_warn","","",null,null],[6,"CompileResult","","",null,null],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[3,"FieldInfo","","",null,null],[12,"name","","",22,null],[12,"offset","","",22,null],[12,"size","","",22,null],[12,"align","","",22,null],[4,"SizeKind","","",null,null],[13,"Exact","","",23,null],[13,"Min","","",23,null],[3,"VariantInfo","","",null,null],[12,"name","","",24,null],[12,"kind","","",24,null],[12,"size","","",24,null],[12,"align","","",24,null],[12,"fields","","",24,null],[4,"DataTypeKind","","",null,null],[13,"Struct","","",25,null],[13,"Union","","",25,null],[13,"Enum","","",25,null],[13,"Closure","","",25,null],[3,"CodeStats","","",null,null],[3,"TypeSizeInfo","","",null,null],[12,"kind","","",26,null],[12,"type_description","","",26,null],[12,"align","","",26,null],[12,"overall_size","","",26,null],[12,"opt_discr_size","","",26,null],[12,"variants","","",26,null],[0,"middle","rustc_trans","",null,null],[0,"astconv_util","rustc_trans::middle","This module contains a simple utility routine used by both `typeck` and `const_eval`. Almost certainly this could (and should) be refactored out of existence.",null,null],[0,"expr_use_visitor","","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_trans::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",27,null],[10,"matched_pat","","",27,null],[10,"consume_pat","","",27,null],[10,"borrow","","",27,null],[10,"decl_without_init","","",27,null],[10,"mutate","","",27,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",28,null],[13,"AddrOf","","",28,null],[13,"AutoRef","","",28,null],[13,"AutoUnsafe","","",28,null],[13,"RefBinding","","",28,null],[13,"OverloadedOperator","","",28,null],[13,"ClosureInvocation","","",28,null],[13,"ForLoop","","",28,null],[13,"MatchDiscriminant","","",28,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",29,null],[13,"Move","","",29,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",30,null],[13,"PatBindingMove","","",30,null],[13,"CaptureMove","","",30,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",31,null],[13,"BorrowingMatch","","",31,null],[13,"CopyingMatch","","",31,null],[13,"MovingMatch","","",31,null],[4,"MutateMode","","",null,null],[13,"Init","","",32,null],[13,"JustWrite","","",32,null],[13,"WriteAndRead","","",32,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_trans::middle","",null,null],[4,"ConstVal","rustc_trans::middle::const_val","",null,null],[13,"Float","","",33,null],[13,"Integral","","",33,null],[13,"Str","","",33,null],[13,"ByteStr","","",33,null],[13,"Bool","","",33,null],[13,"Struct","","",33,null],[13,"Tuple","","",33,null],[13,"Function","","",33,null],[13,"Array","","",33,null],[13,"Repeat","","",33,null],[13,"Char","","",33,null],[13,"Dummy","","A value that only occurs in case `eval_const_expr` reported an error. You should never handle this case. Its sole purpose is to allow more errors to be reported instead of causing a fatal error.",33,null],[0,"cstore","rustc_trans::middle","",null,null],[3,"LinkMeta","rustc_trans::middle::cstore","",null,null],[12,"crate_name","","",34,null],[12,"crate_hash","","",34,null],[3,"CrateSource","","",null,null],[12,"dylib","","",35,null],[12,"rlib","","",35,null],[12,"rmeta","","",35,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",36,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",36,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",36,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",36,null],[4,"LibSource","","",null,null],[13,"Some","","",37,null],[13,"MetadataOnly","","",37,null],[13,"None","","",37,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",38,null],[13,"RequireStatic","","",38,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",39,null],[13,"NativeFramework","","",39,null],[13,"NativeUnknown","","",39,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",40,null],[12,"name","","",40,null],[12,"cfg","","",40,null],[12,"foreign_items","","",40,null],[4,"LoadedMacro","","",null,null],[13,"MacroRules","","",41,null],[13,"ProcMacro","","",41,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",42,null],[12,"span","","span of the extern crate that caused this to be loaded",42,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",42,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",42,null],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"describe_def","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"def_span","","",43,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[10,"stability","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"deprecation","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"visibility","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"closure_kind","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[10,"closure_ty","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"closurety"}}],[10,"item_variances","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_type","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"tys"}}],[10,"visible_parent_map","","",43,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[10,"item_predicates","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[10,"item_super_predicates","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[10,"item_generics","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"item_attrs","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"trait_def","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"traitdef"}}],[10,"adt_def","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"adtdef"}}],[10,"fn_arg_names","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"inherent_implementations_for_type","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"implementations_of_trait","","",43,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[10,"associated_item_def_ids","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"impl_trait_ref","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"impl_polarity","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[10,"custom_coerce_unsized_kind","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"impl_parent","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"trait_of_item","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"associated_item","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"is_const_fn","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_defaulted_trait","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_default_impl","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_foreign_item","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_dllimport_foreign_item","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_statically_included_foreign_item","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"dylib_dependency_formats","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"dep_kind","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"export_macros","","",43,null],[10,"lang_items","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"missing_lang_items","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_staged_api","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_allocator","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_panic_runtime","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_compiler_builtins","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"panic_strategy","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[10,"extern_crate","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"crate_name","","The name of the crate as it is referred to in source code of the current crate.",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"original_crate_name","","The name of the crate as it is stored in the crate's metadata.",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"crate_disambiguator","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"plugin_registrar_fn","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"derive_registrar_fn","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"native_libraries","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"exported_symbols","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_no_builtins","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"retrace_path","","",43,null],[10,"def_key","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"struct_field_names","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"load_macro","","",43,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"maybe_get_item_body","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"item_body_nested_bodies","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[10,"const_is_rvalue_promotable_to_static","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"get_item_mir","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mir"}}],[10,"is_item_mir_available","","",43,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"can_have_local_instance","","Take a look if we need to inline or monomorphize this. If so, we will emit code for this item in the local crate, and thus create a translation item for it.",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"crates","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_libraries","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_link_args","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"metadata_filename","","",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"metadata_section_name","","",43,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[10,"used_crates","","",43,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[10,"used_crate_source","","",43,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[10,"extern_mod_stmt_cnum","","",43,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"encode_metadata","","",43,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[10,"metadata_encoding_version","","",43,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",44,null],[10,"postprocess","","",44,null],[0,"dataflow","rustc_trans::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_trans::middle::dataflow","",null,null],[13,"Entry","","",45,null],[13,"Exit","","",45,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",48,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",48,null],[0,"dead","rustc_trans::middle","",null,null],[5,"check_crate","rustc_trans::middle::dead","",null,null],[0,"dependency_format","rustc_trans::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_trans::middle::dependency_format","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",49,null],[13,"IncludedFromDylib","","",49,null],[13,"Static","","",49,null],[13,"Dynamic","","",49,null],[5,"calculate","","",null,null],[0,"effect","rustc_trans::middle","Enforces the Rust effect system. Currently there is just one effect, `unsafe`.",null,null],[5,"check_crate","rustc_trans::middle::effect","",null,null],[0,"entry","rustc_trans::middle","",null,null],[5,"find_entry_point","rustc_trans::middle::entry","",null,null],[0,"free_region","rustc_trans::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_trans::middle::free_region","",null,null],[0,"intrinsicck","rustc_trans::middle","",null,null],[5,"check_crate","rustc_trans::middle::intrinsicck","",null,null],[0,"lang_items","rustc_trans::middle","",null,null],[4,"LangItem","rustc_trans::middle::lang_items","",null,null],[13,"CharImplItem","","",50,null],[13,"StrImplItem","","",50,null],[13,"SliceImplItem","","",50,null],[13,"ConstPtrImplItem","","",50,null],[13,"MutPtrImplItem","","",50,null],[13,"I8ImplItem","","",50,null],[13,"I16ImplItem","","",50,null],[13,"I32ImplItem","","",50,null],[13,"I64ImplItem","","",50,null],[13,"I128ImplItem","","",50,null],[13,"IsizeImplItem","","",50,null],[13,"U8ImplItem","","",50,null],[13,"U16ImplItem","","",50,null],[13,"U32ImplItem","","",50,null],[13,"U64ImplItem","","",50,null],[13,"U128ImplItem","","",50,null],[13,"UsizeImplItem","","",50,null],[13,"F32ImplItem","","",50,null],[13,"F64ImplItem","","",50,null],[13,"SendTraitLangItem","","",50,null],[13,"SizedTraitLangItem","","",50,null],[13,"UnsizeTraitLangItem","","",50,null],[13,"CopyTraitLangItem","","",50,null],[13,"SyncTraitLangItem","","",50,null],[13,"DropTraitLangItem","","",50,null],[13,"CoerceUnsizedTraitLangItem","","",50,null],[13,"AddTraitLangItem","","",50,null],[13,"SubTraitLangItem","","",50,null],[13,"MulTraitLangItem","","",50,null],[13,"DivTraitLangItem","","",50,null],[13,"RemTraitLangItem","","",50,null],[13,"NegTraitLangItem","","",50,null],[13,"NotTraitLangItem","","",50,null],[13,"BitXorTraitLangItem","","",50,null],[13,"BitAndTraitLangItem","","",50,null],[13,"BitOrTraitLangItem","","",50,null],[13,"ShlTraitLangItem","","",50,null],[13,"ShrTraitLangItem","","",50,null],[13,"AddAssignTraitLangItem","","",50,null],[13,"SubAssignTraitLangItem","","",50,null],[13,"MulAssignTraitLangItem","","",50,null],[13,"DivAssignTraitLangItem","","",50,null],[13,"RemAssignTraitLangItem","","",50,null],[13,"BitXorAssignTraitLangItem","","",50,null],[13,"BitAndAssignTraitLangItem","","",50,null],[13,"BitOrAssignTraitLangItem","","",50,null],[13,"ShlAssignTraitLangItem","","",50,null],[13,"ShrAssignTraitLangItem","","",50,null],[13,"IndexTraitLangItem","","",50,null],[13,"IndexMutTraitLangItem","","",50,null],[13,"UnsafeCellTypeLangItem","","",50,null],[13,"DerefTraitLangItem","","",50,null],[13,"DerefMutTraitLangItem","","",50,null],[13,"FnTraitLangItem","","",50,null],[13,"FnMutTraitLangItem","","",50,null],[13,"FnOnceTraitLangItem","","",50,null],[13,"EqTraitLangItem","","",50,null],[13,"OrdTraitLangItem","","",50,null],[13,"StrEqFnLangItem","","",50,null],[13,"PanicFnLangItem","","",50,null],[13,"PanicBoundsCheckFnLangItem","","",50,null],[13,"PanicFmtLangItem","","",50,null],[13,"ExchangeMallocFnLangItem","","",50,null],[13,"BoxFreeFnLangItem","","",50,null],[13,"StrDupUniqFnLangItem","","",50,null],[13,"StartFnLangItem","","",50,null],[13,"EhPersonalityLangItem","","",50,null],[13,"EhUnwindResumeLangItem","","",50,null],[13,"MSVCTryFilterLangItem","","",50,null],[13,"OwnedBoxLangItem","","",50,null],[13,"PhantomDataItem","","",50,null],[13,"CovariantTypeItem","","",50,null],[13,"ContravariantTypeItem","","",50,null],[13,"InvariantTypeItem","","",50,null],[13,"CovariantLifetimeItem","","",50,null],[13,"ContravariantLifetimeItem","","",50,null],[13,"InvariantLifetimeItem","","",50,null],[13,"NoCopyItem","","",50,null],[13,"NonZeroItem","","",50,null],[13,"DebugTraitLangItem","","",50,null],[3,"LanguageItems","","",null,null],[12,"items","","",51,null],[12,"missing","","",51,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_trans::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc_trans::middle::liveness","",null,null],[0,"mem_categorization","rustc_trans::middle","Categorization",null,null],[4,"Categorization","rustc_trans::middle::mem_categorization","",null,null],[13,"Rvalue","","",52,null],[13,"StaticItem","","",52,null],[13,"Upvar","","",52,null],[13,"Local","","",52,null],[13,"Deref","","",52,null],[13,"Interior","","",52,null],[13,"Downcast","","",52,null],[3,"Upvar","","",null,null],[12,"id","","",53,null],[12,"kind","","",53,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",54,null],[13,"BorrowedPtr","","`&T`",54,null],[13,"UnsafePtr","","`*T`",54,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",54,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",55,null],[13,"InteriorElement","","",55,null],[4,"FieldName","","",null,null],[13,"NamedField","","",56,null],[13,"PositionalField","","",56,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",57,null],[13,"Pattern","","",57,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",58,null],[13,"OtherElement","","",58,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",59,null],[13,"McDeclared","","",59,null],[13,"McInherited","","",59,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",60,null],[13,"NoteUpvarRef","","",60,null],[13,"NoteNone","","",60,null],[3,"cmt_","","",null,null],[12,"id","","",61,null],[12,"span","","",61,null],[12,"cat","","",61,null],[12,"mutbl","","",61,null],[12,"ty","","",61,null],[12,"note","","",61,null],[6,"cmt","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",62,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",62,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",63,null],[3,"MemCategorizationOptions","","",null,null],[12,"during_closure_kind_inference","","",64,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",65,null],[13,"NonAliasable","","",65,null],[13,"ImmutableUnique","","",65,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",66,null],[13,"AliasableClosure","","",66,null],[13,"AliasableOther","","",66,null],[13,"UnaliasableImmutable","","",66,null],[13,"AliasableStatic","","",66,null],[13,"AliasableStaticMut","","",66,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_trans::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_trans::middle::privacy","",null,null],[13,"Reachable","","",67,null],[13,"Exported","","",67,null],[13,"Public","","",67,null],[3,"AccessLevels","","",null,null],[12,"map","","",68,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[0,"reachable","rustc_trans::middle","",null,null],[5,"find_reachable","rustc_trans::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_trans::middle","This file actually contains two passes related to regions.  The first pass builds up the `scope_map`, which describes the parent links in the region hierarchy.  The second pass infers which types must be region parameterized.",null,null],[3,"CodeExtent","rustc_trans::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling instead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be used to bound the lifetime/region for values.",null,null],[13,"Misc","","",69,null],[13,"CallSiteScope","","",69,null],[12,"fn_id","rustc_trans::middle::region::CodeExtentData","",69,null],[12,"body_id","","",69,null],[13,"ParameterScope","rustc_trans::middle::region","",69,null],[12,"fn_id","rustc_trans::middle::region::CodeExtentData","",69,null],[12,"body_id","","",69,null],[13,"DestructionScope","rustc_trans::middle::region","",69,null],[13,"Remainder","","",69,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",70,null],[12,"body_id","","",70,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",71,null],[12,"first_statement_index","","",71,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[0,"recursion_limit","rustc_trans::middle","",null,null],[5,"update_limits","rustc_trans::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_trans::middle","Name resolution for lifetimes.",null,null],[4,"DefRegion","rustc_trans::middle::resolve_lifetime","",null,null],[13,"DefStaticRegion","","",72,null],[13,"DefEarlyBoundRegion","","",72,null],[13,"DefLateBoundRegion","","",72,null],[13,"DefFreeRegion","","",72,null],[3,"NamedRegionMap","","",null,null],[12,"defs","","",73,null],[12,"late_bound","","",73,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[0,"stability","rustc_trans::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_trans::middle::stability","",null,null],[13,"Unstable","","",74,null],[13,"Stable","","",74,null],[3,"DeprecationEntry","","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",75,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,null],[0,"weak_lang_items","rustc_trans::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_trans::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"lint","rustc_trans","Lints, aka compiler warnings.",null,null],[3,"Lint","rustc_trans::lint","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",76,null],[12,"default_level","","Default level for the lint.",76,null],[12,"desc","","Description of the lint or the issue it detects.",76,null],[6,"LintArray","","",null,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",77,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_name","","",78,null],[11,"check_crate","","",78,null],[11,"check_crate_post","","",78,null],[11,"check_mod","","",78,null],[11,"check_mod_post","","",78,null],[11,"check_foreign_item","","",78,null],[11,"check_foreign_item_post","","",78,null],[11,"check_item","","",78,null],[11,"check_item_post","","",78,null],[11,"check_local","","",78,null],[11,"check_block","","",78,null],[11,"check_block_post","","",78,null],[11,"check_stmt","","",78,null],[11,"check_arm","","",78,null],[11,"check_pat","","",78,null],[11,"check_decl","","",78,null],[11,"check_expr","","",78,null],[11,"check_expr_post","","",78,null],[11,"check_ty","","",78,null],[11,"check_generics","","",78,null],[11,"check_fn","","",78,null],[11,"check_fn_post","","",78,null],[11,"check_trait_item","","",78,null],[11,"check_trait_item_post","","",78,null],[11,"check_impl_item","","",78,null],[11,"check_impl_item_post","","",78,null],[11,"check_struct_def","","",78,null],[11,"check_struct_def_post","","",78,null],[11,"check_struct_field","","",78,null],[11,"check_variant","","",78,null],[11,"check_variant_post","","",78,null],[11,"check_lifetime","","",78,null],[11,"check_lifetime_def","","",78,null],[11,"check_path","","",78,null],[11,"check_attribute","","",78,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",78,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",78,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",79,null],[11,"check_crate","","",79,null],[11,"check_crate_post","","",79,null],[11,"check_mod","","",79,null],[11,"check_mod_post","","",79,null],[11,"check_foreign_item","","",79,null],[11,"check_foreign_item_post","","",79,null],[11,"check_item","","",79,null],[11,"check_item_post","","",79,null],[11,"check_local","","",79,null],[11,"check_block","","",79,null],[11,"check_block_post","","",79,null],[11,"check_stmt","","",79,null],[11,"check_arm","","",79,null],[11,"check_pat","","",79,null],[11,"check_expr","","",79,null],[11,"check_expr_post","","",79,null],[11,"check_ty","","",79,null],[11,"check_generics","","",79,null],[11,"check_fn","","",79,null],[11,"check_fn_post","","",79,null],[11,"check_trait_item","","",79,null],[11,"check_trait_item_post","","",79,null],[11,"check_impl_item","","",79,null],[11,"check_impl_item_post","","",79,null],[11,"check_struct_def","","",79,null],[11,"check_struct_def_post","","",79,null],[11,"check_struct_field","","",79,null],[11,"check_variant","","",79,null],[11,"check_variant_post","","",79,null],[11,"check_lifetime","","",79,null],[11,"check_lifetime_def","","",79,null],[11,"check_path","","",79,null],[11,"check_path_list_item","","",79,null],[11,"check_attribute","","",79,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",79,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",79,null],[6,"EarlyLintPassObject","","A lint pass boxed up as a trait object.",null,null],[6,"LateLintPassObject","","",null,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",80,null],[13,"Warn","","",80,null],[13,"Deny","","",80,null],[13,"Forbid","","",80,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared in rustc or a plugin.",81,null],[13,"Node","","Lint level was set by an attribute.",81,null],[13,"CommandLine","","Lint level was set by a command-line flag.",81,null],[6,"LevelSource","","",null,null],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[7,"CONST_ERR","rustc_trans::lint::builtin","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"TRANSMUTE_FROM_FN_ITEM_TYPES","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"LIFETIME_UNDERSCORE","","",null,null],[7,"SAFE_EXTERN_STATICS","","",null,null],[7,"PATTERNS_IN_FNS_WITHOUT_BODY","","",null,null],[7,"EXTRA_REQUIREMENT_IN_IMPL","","",null,null],[7,"LEGACY_DIRECTORY_OWNERSHIP","","",null,null],[7,"LEGACY_IMPORTS","","",null,null],[7,"DEPRECATED","","",null,null],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s which are used by other parts of the compiler.",null,null],[3,"FutureIncompatibleInfo","rustc_trans::lint","Extra information for a future incompatibility lint. See the call to `register_future_incompatible` in `librustc_lint/lib.rs` for guidelines.",null,null],[12,"id","","",82,null],[12,"reference","","",82,null],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all) according to `level`.",null,null],[3,"LateContext","","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we're checking in.",83,null],[12,"krate","","The crate being checked.",83,null],[12,"access_levels","","Items accessible from the crate being checked.",83,null],[5,"raw_struct_lint","","",null,null],[5,"check_crate","","Perform lint checking on a crate.",null,null],[3,"LintStore","","Information about the registered lints.",null,null],[8,"IntoEarlyLint","","",null,null],[10,"into_early_lint","","",84,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"earlylint"}}],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint attributes. Writing this as an iterator is an enormous mess.",null,null],[5,"check_ast_crate","","",null,null],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to HIR.",null,null],[12,"sess","","Type context we're checking in.",85,null],[12,"krate","","The crate being checked.",85,null],[8,"LintContext","","",null,null],[10,"sess","","",86,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[10,"lints","","",86,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"mut_lints","","",86,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"level_stack","","",86,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"enter_attrs","","",86,null],[10,"exit_attrs","","",86,null],[11,"current_level","","Get the level of `lint` at the current position of the lint traversal.",86,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"level"}}],[11,"level_src","","",86,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"option"}}],[11,"lookup_and_emit","","",86,null],[11,"lookup","","",86,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",86,null],[11,"early_lint","","",86,null],[11,"struct_span_lint","","",86,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",86,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",86,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",86,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the current lint context, call the provided function, then reset the lints in effect to their previous state.",86,null],[3,"EarlyLint","","When you call `add_lint` on the session, you wind up storing one of these, which records a \"potential lint\" at a particular point.",null,null],[12,"id","","what lint is this? (e.g., `dead_code`)",87,null],[12,"diagnostic","","the main message",87,null],[0,"util","rustc_trans","",null,null],[0,"common","rustc_trans::util","",null,null],[17,"FN_OUTPUT_NAME","rustc_trans::util::common","",null,null],[3,"ErrorReported","","",null,null],[5,"time_depth","","Read the current depth of `time()` calls. This is used to encourage indentation across threads.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"set_time_depth","","Set the current depth of `time()` calls. The idea is to call `set_time_depth()` with the result from `time_depth()` in the parent thread.",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"duration_to_secs_str","","",null,{"inputs":[{"name":"duration"}],"output":{"name":"string"}}],[5,"to_readable_str","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"record_time","","",null,{"inputs":[{"name":"cell"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[3,"Indenter","","",null,null],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[8,"MemoizationMap","","",null,null],[16,"Key","","",88,null],[16,"Value","","",88,null],[10,"memoize","","If `key` is present in the map, return the valuee, otherwise invoke `op` and store the value in the map.",88,null],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[0,"ppaux","rustc_trans::util","",null,null],[5,"verbose","rustc_trans::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"parameterized","","",null,null],[0,"nodemap","rustc_trans::util","An efficient hash map for node IDs",null,null],[6,"NodeMap","rustc_trans::util::nodemap","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[6,"FxHashSet","","",null,null],[6,"FxHashMap","","",null,null],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[0,"num","rustc_trans::util","",null,null],[8,"ToPrimitive","rustc_trans::util::num","",null,null],[10,"to_i8","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i16","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i32","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u8","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u16","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u32","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"fs","rustc_trans::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc_trans::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[4,"LinkOrCopy","","",null,null],[13,"Link","","",90,null],[13,"Copy","","",90,null],[5,"link_or_copy","","Copy `p` into `q`, preferring to use hard-linking if possible. If `q` already exists, it is removed first. The result indicates which of the two operations has been performed.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"create_dir_racy","","",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[3,"Disr","rustc_trans","",null,null],[12,"0","","",91,null],[3,"ModuleTranslation","","",null,null],[12,"name","","The name of the module. When the crate may be saved between compilations, incremental compilation requires that name be unique amongst **all** crates.  Therefore, it should contain something unique to this crate (e.g., a module path) as well as the crate name and disambiguator.",92,null],[12,"symbol_name_hash","","",92,null],[12,"source","","",92,null],[3,"ModuleLlvm","","",null,null],[12,"llcx","","",93,null],[12,"llmod","","",93,null],[3,"CrateTranslation","","",null,null],[12,"modules","","",94,null],[12,"metadata_module","","",94,null],[12,"link","","",94,null],[12,"metadata","","",94,null],[12,"exported_symbols","","",94,null],[12,"no_builtins","","",94,null],[12,"windows_subsystem","","",94,null],[12,"linker_info","","",94,null],[4,"ModuleSource","","",null,null],[13,"Preexisting","","Copy the `.o` files or whatever from the incr. comp. directory.",95,null],[13,"Translated","","Rebuild from this LLVM module.",95,null],[5,"trans_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"crateanalysis"},{"name":"incrementalhashesmap"}],"output":{"name":"cratetranslation"}}],[0,"back","","",null,null],[0,"svh","rustc_trans::back","Calculation and management of a Strict Version Hash for crates",null,null],[3,"Svh","rustc_trans::back::svh","",null,null],[0,"archive","rustc_trans::back","A helper class for dealing with static archives",null,null],[3,"ArchiveConfig","rustc_trans::back::archive","",null,null],[12,"sess","","",96,null],[12,"dst","","",96,null],[12,"src","","",96,null],[12,"lib_search_paths","","",96,null],[12,"ar_prog","","",96,null],[12,"command_path","","",96,null],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of `ar`.",null,null],[5,"find_library","","",null,null],[11,"new","","Create a new static archive, ready for modifying the archive specified by `config`.",97,{"inputs":[{"name":"archiveconfig"}],"output":{"name":"archivebuilder"}}],[11,"remove_file","","Removes a file from this archive",97,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"src_files","","Lists all files in an archive",97,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will search in the relevant locations for a library named `name`.",97,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this archive.",97,{"inputs":[{"name":"self"},{"name":"path"},{"name":"str"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"add_file","","Adds an arbitrary file to this archive",97,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in the archive (run 'ar s' over it).",97,{"inputs":[{"name":"self"}],"output":null}],[11,"build","","Combine the provided files, rlibs, and native libraries into a single `Archive`.",97,{"inputs":[{"name":"self"}],"output":null}],[0,"linker","rustc_trans::back","",null,null],[3,"LinkerInfo","rustc_trans::back::linker","For all the linkers we support, and information they might need out of the shared crate context before we get rid of it.",null,null],[3,"GnuLinker","","",null,null],[3,"MsvcLinker","","",null,null],[8,"Linker","","Linker abstraction used by back::link to build up the command to invoke a linker.",null,null],[10,"link_dylib","","",98,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"link_rust_dylib","","",98,{"inputs":[{"name":"self"},{"name":"str"},{"name":"path"}],"output":null}],[10,"link_framework","","",98,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"link_staticlib","","",98,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"link_rlib","","",98,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"link_whole_rlib","","",98,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"link_whole_staticlib","","",98,null],[10,"include_path","","",98,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"framework_path","","",98,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"output_filename","","",98,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"add_object","","",98,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"gc_sections","","",98,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"position_independent_executable","","",98,{"inputs":[{"name":"self"}],"output":null}],[10,"optimize","","",98,{"inputs":[{"name":"self"}],"output":null}],[10,"debuginfo","","",98,{"inputs":[{"name":"self"}],"output":null}],[10,"no_default_libraries","","",98,{"inputs":[{"name":"self"}],"output":null}],[10,"build_dylib","","",98,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"args","","",98,null],[10,"hint_static","","",98,{"inputs":[{"name":"self"}],"output":null}],[10,"hint_dynamic","","",98,{"inputs":[{"name":"self"}],"output":null}],[10,"whole_archives","","",98,{"inputs":[{"name":"self"}],"output":null}],[10,"no_whole_archives","","",98,{"inputs":[{"name":"self"}],"output":null}],[10,"export_symbols","","",98,{"inputs":[{"name":"self"},{"name":"path"},{"name":"cratetype"}],"output":null}],[10,"subsystem","","",98,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"new","","",99,{"inputs":[{"name":"sharedcratecontext"},{"name":"exportedsymbols"}],"output":{"name":"linkerinfo"}}],[11,"to_linker","","",99,{"inputs":[{"name":"self"},{"name":"command"},{"name":"session"}],"output":{"name":"box"}}],[11,"link_dylib","","",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_staticlib","","",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_rlib","","",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"include_path","","",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"framework_path","","",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"output_filename","","",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"add_object","","",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"position_independent_executable","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"args","","",100,null],[11,"link_rust_dylib","","",100,{"inputs":[{"name":"self"},{"name":"str"},{"name":"path"}],"output":null}],[11,"link_framework","","",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_whole_staticlib","","",100,null],[11,"link_whole_rlib","","",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"gc_sections","","",100,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"optimize","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"debuginfo","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"no_default_libraries","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"build_dylib","","",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"whole_archives","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"no_whole_archives","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_static","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_dynamic","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"export_symbols","","",100,{"inputs":[{"name":"self"},{"name":"path"},{"name":"cratetype"}],"output":null}],[11,"subsystem","","",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_rlib","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"add_object","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"args","","",101,null],[11,"build_dylib","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"gc_sections","","",101,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"link_dylib","","",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_rust_dylib","","",101,{"inputs":[{"name":"self"},{"name":"str"},{"name":"path"}],"output":null}],[11,"link_staticlib","","",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"position_independent_executable","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"no_default_libraries","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"include_path","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"output_filename","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"framework_path","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"link_framework","","",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_whole_staticlib","","",101,null],[11,"link_whole_rlib","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"optimize","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"debuginfo","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"whole_archives","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"no_whole_archives","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_static","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_dynamic","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"export_symbols","","",101,{"inputs":[{"name":"self"},{"name":"path"},{"name":"cratetype"}],"output":null}],[11,"subsystem","","",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[0,"link","rustc_trans::back","",null,null],[5,"find_crate_name","rustc_trans::back::link","",null,null],[5,"build_link_meta","","",null,{"inputs":[{"name":"incrementalhashesmap"},{"name":"str"}],"output":{"name":"linkmeta"}}],[5,"get_linker","","",null,null],[5,"get_ar_prog","","",null,{"inputs":[{"name":"session"}],"output":{"name":"string"}}],[5,"remove","","",null,{"inputs":[{"name":"session"},{"name":"path"}],"output":null}],[5,"link_binary","","Perform the linkage portion of the compilation phase. This will generate all of the requested outputs for this compilation session.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"},{"name":"str"}],"output":{"name":"vec"}}],[5,"default_output_for_target","","Returns default crate type for target",null,{"inputs":[{"name":"session"}],"output":{"name":"cratetype"}}],[5,"invalid_output_for_target","","Checks if target supports crate_type as output",null,{"inputs":[{"name":"session"},{"name":"cratetype"}],"output":{"name":"bool"}}],[5,"filename_for_input","","",null,{"inputs":[{"name":"session"},{"name":"cratetype"},{"name":"str"},{"name":"outputfilenames"}],"output":{"name":"pathbuf"}}],[5,"each_linked_rlib","","",null,{"inputs":[{"name":"session"},{"name":"fnmut"}],"output":null}],[17,"RLIB_BYTECODE_OBJECT_MAGIC","","",null,null],[17,"RLIB_BYTECODE_OBJECT_VERSION","","",null,null],[17,"RLIB_BYTECODE_OBJECT_VERSION_OFFSET","","",null,null],[17,"RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET","","",null,null],[17,"RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET","","",null,null],[0,"lto","rustc_trans::back","",null,null],[5,"crate_type_allows_lto","rustc_trans::back::lto","",null,{"inputs":[{"name":"cratetype"}],"output":{"name":"bool"}}],[5,"run","","",null,{"inputs":[{"name":"session"},{"name":"moduleref"},{"name":"targetmachineref"},{"name":"exportedsymbols"},{"name":"moduleconfig"},{"name":"path"}],"output":null}],[0,"symbol_export","rustc_trans::back","",null,null],[3,"ExportedSymbols","rustc_trans::back::symbol_export","The set of symbols exported from each crate in the crate graph.",null,null],[4,"SymbolExportLevel","","The SymbolExportLevel of a symbols specifies from which kinds of crates the symbol will be exported. `C` symbols will be exported from any kind of crate, including cdylibs which export very few things. `Rust` will only be exported if the crate produced is a Rust dylib.",null,null],[13,"C","","",102,null],[13,"Rust","","",102,null],[5,"crate_export_threshold","","",null,{"inputs":[{"name":"cratetype"}],"output":{"name":"symbolexportlevel"}}],[5,"crates_export_threshold","","",null,null],[5,"is_below_threshold","","",null,{"inputs":[{"name":"symbolexportlevel"},{"name":"symbolexportlevel"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"symbolexportlevel"}],"output":{"name":"bool"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"symbolexportlevel"}}],[11,"empty","","",103,{"inputs":[],"output":{"name":"exportedsymbols"}}],[11,"compute_from","","",103,{"inputs":[{"name":"sharedcratecontext"},{"name":"symbolmap"}],"output":{"name":"exportedsymbols"}}],[11,"exported_symbols","","",103,null],[11,"for_each_exported_symbol","","",103,{"inputs":[{"name":"self"},{"name":"cratenum"},{"name":"symbolexportlevel"},{"name":"f"}],"output":null}],[0,"symbol_names","rustc_trans::back","The Rust Linkage Model and Symbol Names =======================================",null,null],[5,"exported_name_from_type_and_prefix","rustc_trans::back::symbol_names","",null,{"inputs":[{"name":"sharedcratecontext"},{"name":"ty"},{"name":"str"}],"output":{"name":"string"}}],[5,"sanitize","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"write","rustc_trans::back","",null,null],[3,"ModuleConfig","rustc_trans::back::write","Module-specific configuration for `optimize_and_codegen`.",null,null],[5,"llvm_err","","",null,null],[5,"write_output_file","","",null,{"inputs":[{"name":"handler"},{"name":"targetmachineref"},{"name":"passmanagerref"},{"name":"moduleref"},{"name":"path"},{"name":"filetype"}],"output":null}],[5,"create_target_machine","","",null,{"inputs":[{"name":"session"}],"output":{"name":"targetmachineref"}}],[5,"cleanup_llvm","","",null,{"inputs":[{"name":"cratetranslation"}],"output":null}],[5,"run_passes","","",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputtypes"},{"name":"outputfilenames"}],"output":null}],[5,"run_assembler","","",null,{"inputs":[{"name":"session"},{"name":"outputfilenames"}],"output":null}],[5,"with_llvm_pmb","","",null,{"inputs":[{"name":"moduleref"},{"name":"moduleconfig"},{"name":"fnmut"}],"output":null}],[17,"RELOC_MODEL_ARGS","","",null,null],[17,"CODE_GEN_MODEL_ARGS","","",null,null],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"moduleconfig"}}],[0,"msvc","rustc_trans::back","MSVC-specific logic for linkers and such.",null,null],[5,"link_exe_cmd","rustc_trans::back::msvc","",null,null],[0,"rpath","rustc_trans::back","",null,null],[3,"RPathConfig","rustc_trans::back::rpath","",null,null],[12,"used_crates","","",105,null],[12,"out_filename","","",105,null],[12,"is_like_osx","","",105,null],[12,"has_rpath","","",105,null],[12,"linker_is_gnu","","",105,null],[12,"get_install_prefix_lib_path","","",105,null],[5,"get_rpath_flags","","",null,{"inputs":[{"name":"rpathconfig"}],"output":{"name":"vec"}}],[0,"diagnostics","rustc_trans","",null,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"disr"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"disr"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"disr"}}],[11,"wrapping_add","","",91,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",91,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",91,{"inputs":[{"name":"disr"}],"output":{"name":"disr"}}],[11,"from","","",91,{"inputs":[{"name":"usize"}],"output":{"name":"disr"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"disr"}],"output":{"name":"option"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"disr"}],"output":{"name":"ordering"}}],[17,"DIAGNOSTICS","","",null,null],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"moduletranslation"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"modulesource"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"modulellvm"}}],[11,"super_fold_with","rustc_trans::middle::const_val","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"constval"}}],[11,"sess","rustc_trans::lint","Get the overall compiler `Session` object.",83,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",83,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",83,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",83,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",83,null],[11,"exit_attrs","","",83,null],[11,"sess","","Get the overall compiler `Session` object.",85,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",85,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",85,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",85,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",85,null],[11,"exit_attrs","","",85,null],[11,"partial_cmp","","",80,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::middle::cstore","",36,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::middle::privacy","",67,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::middle::region","",106,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_trans::middle::stability","",74,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::session::config","",3,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::session::search_paths","",18,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"option"}}],[11,"fmt","rustc_trans::back::svh","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::mem_categorization","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session::config","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::back::svh","",107,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::const_val","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::cstore","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::lang_items","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::region","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::resolve_lifetime","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::stability","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::session::config","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"drop","rustc_trans::util::common","",108,null],[11,"from","rustc_trans::session","",25,{"inputs":[{"name":"adtkind"}],"output":{"name":"datatypekind"}}],[11,"visit_item","rustc_trans::lint","",85,null],[11,"visit_foreign_item","","",85,null],[11,"visit_pat","","",85,null],[11,"visit_expr","","",85,null],[11,"visit_stmt","","",85,null],[11,"visit_fn","","",85,null],[11,"visit_variant_data","","",85,null],[11,"visit_struct_field","","",85,null],[11,"visit_variant","","",85,null],[11,"visit_ty","","",85,null],[11,"visit_ident","","",85,null],[11,"visit_mod","","",85,null],[11,"visit_local","","",85,null],[11,"visit_block","","",85,null],[11,"visit_arm","","",85,null],[11,"visit_expr_post","","",85,null],[11,"visit_generics","","",85,null],[11,"visit_trait_item","","",85,null],[11,"visit_impl_item","","",85,null],[11,"visit_lifetime","","",85,null],[11,"visit_lifetime_def","","",85,null],[11,"visit_path","","",85,null],[11,"visit_path_list_item","","",85,null],[11,"visit_attribute","","",85,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::mem_categorization","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::privacy","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::region","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::back::svh","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::lint","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::expr_use_visitor","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::const_val","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::cstore","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::dataflow","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::dependency_format","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::mem_categorization","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::privacy","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::region","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::resolve_lifetime","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::stability","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session::config","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session::search_paths","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::util::common","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"describe_def","rustc_trans::middle::cstore","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",114,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"closure_kind","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[11,"closure_ty","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"closurety"}}],[11,"item_variances","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_type","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"tys"}}],[11,"visible_parent_map","","",114,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"item_predicates","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_super_predicates","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_generics","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"trait_def","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"traitdef"}}],[11,"adt_def","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"adtdef"}}],[11,"fn_arg_names","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",114,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"associated_item_def_ids","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"impl_trait_ref","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_polarity","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"custom_coerce_unsized_kind","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_parent","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"is_const_fn","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_defaulted_trait","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"lang_items","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"dep_kind","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",114,null],[11,"is_allocator","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"extern_crate","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_name","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",114,null],[11,"def_key","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",114,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"get_item_mir","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mir"}}],[11,"is_item_mir_available","","",114,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"can_have_local_instance","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",114,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",114,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",114,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",114,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",114,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",114,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",114,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",114,null],[11,"eq","rustc_trans::lint","",109,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::back::svh","",107,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::lint","",80,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::expr_use_visitor","",28,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::const_val","",33,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::cstore","",35,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::dataflow","",48,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::dependency_format","",49,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::lang_items","",50,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::mem_categorization","",52,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"elementkind"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::privacy","",67,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::region","",106,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::resolve_lifetime","",72,{"inputs":[{"name":"self"},{"name":"defregion"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"defregion"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::stability","",74,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::session","",24,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"sizekind"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"datatypekind"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::session::config","",1,{"inputs":[{"name":"self"},{"name":"optlevel"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"debuginfolevel"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"printrequest"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"entryfntype"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"optionstability"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::session::search_paths","",18,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"bool"}}],[11,"default","rustc_trans::middle::privacy","",68,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"default","rustc_trans::session::config","",4,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"default","rustc_trans::middle::mem_categorization","",64,{"inputs":[],"output":{"name":"memcategorizationoptions"}}],[11,"cmp","rustc_trans::lint","",80,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::middle::cstore","",36,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::middle::privacy","",67,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::middle::region","",106,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"ordering"}}],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"ordering"}}],[11,"cmp","","",70,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"ordering"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::session::config","",3,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::session::search_paths","",18,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"ordering"}}],[11,"next","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_lints","rustc_trans::lint::builtin","",116,null],[11,"nested","rustc_trans::middle::dataflow","",117,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",117,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"nested_visit_map","rustc_trans::lint","Because lints are scoped lexically, we want to walk nested items in the context of the outer item, so enable deep-walking.",83,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_item","","",83,null],[11,"visit_foreign_item","","",83,null],[11,"visit_pat","","",83,null],[11,"visit_expr","","",83,null],[11,"visit_stmt","","",83,null],[11,"visit_fn","","",83,null],[11,"visit_variant_data","","",83,null],[11,"visit_struct_field","","",83,null],[11,"visit_variant","","",83,null],[11,"visit_ty","","",83,null],[11,"visit_name","","",83,null],[11,"visit_mod","","",83,null],[11,"visit_local","","",83,null],[11,"visit_block","","",83,null],[11,"visit_arm","","",83,null],[11,"visit_decl","","",83,null],[11,"visit_generics","","",83,null],[11,"visit_trait_item","","",83,null],[11,"visit_impl_item","","",83,null],[11,"visit_lifetime","","",83,null],[11,"visit_lifetime_def","","",83,null],[11,"visit_path","","",83,null],[11,"visit_attribute","","",83,null],[11,"hash","rustc_trans::back::svh","",107,null],[11,"hash","rustc_trans::lint","",109,null],[11,"hash","","",80,null],[11,"hash","rustc_trans::middle::const_val","",33,null],[11,"hash","rustc_trans::middle::cstore","",39,null],[11,"hash","","",40,null],[11,"hash","rustc_trans::middle::lang_items","",50,null],[11,"hash","rustc_trans::middle::mem_categorization","",54,null],[11,"hash","","",55,null],[11,"hash","","",56,null],[11,"hash","","",57,null],[11,"hash","","",58,null],[11,"hash","","",59,null],[11,"hash","rustc_trans::middle::region","",106,null],[11,"hash","","",69,null],[11,"hash","","",70,null],[11,"hash","","",71,null],[11,"hash","rustc_trans::middle::resolve_lifetime","",72,null],[11,"hash","rustc_trans::middle::stability","",74,null],[11,"hash","rustc_trans::session","",24,null],[11,"hash","","",23,null],[11,"hash","","",22,null],[11,"hash","","",25,null],[11,"hash","","",26,null],[11,"hash","rustc_trans::session::config","",1,null],[11,"hash","","",2,null],[11,"hash","","",3,null],[11,"hash","","",118,null],[11,"hash","","",119,null],[11,"hash","","",10,null],[11,"hash","","",11,null],[11,"hash","rustc_trans::session::search_paths","",18,null],[11,"encode","rustc_trans::back::svh","",107,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::const_val","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::cstore","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::lang_items","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::region","",106,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::resolve_lifetime","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::stability","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::session::config","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","rustc_trans::back::svh","",107,{"inputs":[{"name":"self"}],"output":{"name":"svh"}}],[11,"clone","rustc_trans::lint","",76,{"inputs":[{"name":"self"}],"output":{"name":"lint"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"lintid"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"lintsource"}}],[11,"clone","rustc_trans::lint::builtin","",116,{"inputs":[{"name":"self"}],"output":{"name":"hardwiredlints"}}],[11,"clone","rustc_trans::middle::expr_use_visitor","",28,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"clone","rustc_trans::middle::const_val","",33,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"clone","rustc_trans::middle::cstore","",34,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"clone","rustc_trans::middle::dataflow","",45,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"clone","rustc_trans::middle::dependency_format","",49,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"clone","rustc_trans::middle::free_region","",120,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"clone","rustc_trans::middle::lang_items","",50,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"clone","rustc_trans::middle::mem_categorization","",52,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"elementkind"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationoptions"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"clone","rustc_trans::middle::privacy","",67,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"clone","rustc_trans::middle::region","",106,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"codeextentdata"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"callsitescopedata"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","rustc_trans::middle::resolve_lifetime","",72,{"inputs":[{"name":"self"}],"output":{"name":"defregion"}}],[11,"clone","rustc_trans::middle::stability","",74,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"clone","rustc_trans::session","",24,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sizekind"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldinfo"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"datatypekind"}}],[11,"clone","rustc_trans::session::config","",1,{"inputs":[{"name":"self"}],"output":{"name":"optlevel"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"debuginfolevel"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"outputtype"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"erroroutputtype"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"outputtypes"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"externs"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"printrequest"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"outputfilenames"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"entryfntype"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cratetype"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"passes"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptions"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"debuggingoptions"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"optionstability"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rustcoptgroup"}}],[11,"clone","rustc_trans::session::filesearch","",16,{"inputs":[{"name":"self"}],"output":{"name":"filematch"}}],[11,"clone","rustc_trans::session::search_paths","",112,{"inputs":[{"name":"self"}],"output":{"name":"searchpaths"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"pathkind"}}],[11,"clone","rustc_trans::util::common","",113,{"inputs":[{"name":"self"}],"output":{"name":"errorreported"}}],[11,"extension","rustc_trans::session::config","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",118,null],[11,"get","","",118,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"contains_key","","",118,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"keys","","",118,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","",118,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"should_trans","","",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",119,{"inputs":[{"name":"btreemap"}],"output":{"name":"externs"}}],[11,"get","","",119,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",119,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"single_codegen_unit","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dep_tracking_hash","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"filestem","","",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"path","","",8,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"pathbuf"}}],[11,"temp_path","","Get the path where a compilation artifact of the given type for the given codegen unit should be placed on disk. If codegen_unit_name is None, a path distinct from those of any codegen unit will be generated.",8,{"inputs":[{"name":"self"},{"name":"outputtype"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"temp_path_ext","","Like temp_path, but also supports things where there is no corresponding OutputType, like no-opt-bitcode or lto-bitcode.",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"filestem","","",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_empty","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stable","","",15,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",15,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"for_each_lib_search_path","rustc_trans::session::filesearch","",17,null],[11,"get_lib_path","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"search","","",17,null],[11,"new","","",17,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tools_search_paths","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","rustc_trans::session::search_paths","",112,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",112,null],[11,"iter","","",112,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"iter"}}],[11,"local_crate_disambiguator","rustc_trans::session","",19,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"struct_span_warn","","",19,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",19,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",19,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",19,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",19,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",19,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",19,null],[11,"span_fatal_with_code","","",19,null],[11,"fatal","","",19,null],[11,"span_err_or_warn","","",19,null],[11,"span_err","","",19,null],[11,"span_err_with_code","","",19,null],[11,"err","","",19,null],[11,"err_count","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",19,null],[11,"track_errors","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"span_warn","","",19,null],[11,"span_warn_with_code","","",19,null],[11,"warn","","",19,null],[11,"opt_span_warn","","",19,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",19,null],[11,"note_without_error","","",19,null],[11,"span_note_without_error","","",19,null],[11,"span_unimpl","","",19,null],[11,"unimpl","","",19,null],[11,"add_lint","","",19,null],[11,"add_lint_diagnostic","","",19,null],[11,"reserve_node_ids","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"next_node_id","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"diagnostic","","",19,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"diag_span_note_once","","Analogous to calling `.span_note` on the given DiagnosticBuilder, but deduplicates on lint ID, span, and message for this `Session` if we're not outputting in JSON mode.",19,null],[11,"codemap","","",19,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"verbose","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_passes","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"count_llvm_insns","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_llvm_passes","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trans_stats","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta_stats","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"asm_comments","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"no_verify","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrowck_stats","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_llvm_passes","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lto","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","Returns the panic strategy for this compile session. If the user explicitly selected one using '-C panic', use that, otherwise use the panic strategy defined by the target.",19,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"no_landing_pads","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unstable_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"nonzeroing_move_hints","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"must_not_eliminate_frame_pointers","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate_plugin_registrar_symbol","","Returns the symbol name for the registrar function, given the crate Svh and the function DefIndex.",19,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"generate_derive_registrar_symbol","","",19,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"sysroot","","",19,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"target_filesearch","","",19,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"host_filesearch","","",19,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"init_incr_comp_session","","",19,null],[11,"finalize_incr_comp_session","","",19,null],[11,"mark_incr_comp_session_as_invalid","","",19,null],[11,"incr_comp_session_dir","","",19,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"incr_comp_session_dir_opt","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_perf_stats","","",19,null],[11,"new","","",111,{"inputs":[],"output":{"name":"codestats"}}],[11,"record_type_size","","",111,null],[11,"print_type_sizes","","",111,null],[11,"new","rustc_trans::middle::expr_use_visitor","",121,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"with_options","","",121,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"exprusevisitor"}}],[11,"consume_body","","",121,null],[11,"consume_expr","","",121,null],[11,"walk_expr","","",121,null],[11,"description","rustc_trans::middle::const_val","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"macros_only","rustc_trans::middle::cstore","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_some","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rustc_trans::middle::dataflow","",117,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",117,null],[11,"add_kill","","Indicates that `id` kills `bit`",117,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",117,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",117,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",117,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",117,null],[11,"propagate","","Performs the data flow analysis.",117,null],[11,"new","rustc_trans::middle::free_region","",120,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",120,null],[11,"relate_free_regions_from_predicates","","",120,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship by walking the graph encoded in `map`.  Note that it is possible that `sub != sup` and `sub <= sup` and `sup <= sub` (that is, the user can give two different names to the same lifetime).",120,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",120,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"region"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after inference* and sadly the logic is somewhat duplicated with the code in infer.rs.",120,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"is_static","","Determines whether this free-region is required to be 'static",120,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"from_u32","rustc_trans::middle::lang_items","",50,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",51,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",51,null],[11,"item_name","","",51,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",51,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"require_owned_box","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",51,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_eq_fn","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strdup_uniq_fn","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_type","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_type","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_type","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_lifetime","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_lifetime","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_lifetime","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_copy_bound","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_mutbl","rustc_trans::middle::mem_categorization","",59,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",59,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",59,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",59,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",61,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",61,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",61,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"new","","",63,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_options","","",63,{"inputs":[{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",63,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_expr_autoderefd","","",63,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cat_expr_unadjusted","","",63,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_def","","",63,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"},{"name":"def"}],"output":{"name":"result"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",63,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"cat_rvalue_node","","",63,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_rvalue","","",63,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_field","","",63,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"symbol"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_tup_field","","",63,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"usize"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",63,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"interioroffsetkind"}],"output":{"name":"result"}}],[11,"cat_imm_interior","","",63,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"interiorkind"}],"output":{"name":"rc"}}],[11,"cat_downcast","","",63,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"cat_pattern","","",63,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"pat"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_reachable","rustc_trans::middle::privacy","",68,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",68,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",68,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"node_id","rustc_trans::middle::region","",106,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this CodeExtent.  Note that in general the returned span may not correspond to the span of any node id in the AST.",106,{"inputs":[{"name":"self"},{"name":"regionmaps"},{"name":"map"}],"output":{"name":"option"}}],[11,"node_id","","Returns a node id associated with this scope.",69,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"to_code_extent","","",70,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"codeextent"}}],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody really cares about the contents of these.",122,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"lookup_code_extent","","",122,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"node_extent","","",122,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"item_extent","","",122,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"call_site_extent","","",122,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"opt_destruction_extent","","",122,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"intern_code_extent","","",122,{"inputs":[{"name":"self"},{"name":"codeextentdata"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"intern_node","","",122,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"code_extent_data","","",122,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextentdata"}}],[11,"each_encl_scope","","",122,null],[11,"each_var_scope","","",122,null],[11,"each_rvalue_scope","","",122,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",122,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",122,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",122,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",122,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",122,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"scopes_intersect","","",122,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",122,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",122,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"from_attr_level","rustc_trans::middle::stability","",74,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"same_origin","","",75,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"build","","Construct the stability index for a crate being compiled.",123,null],[11,"new","","",123,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"name_lower","rustc_trans::lint","Get the lint's name, with ASCII letters converted to lowercase.",76,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"of","","Get the `LintId` for a `Lint`.",109,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"to_string","","Get the name of the lint.",109,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_str","","Convert a level to a lower-case string.",80,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","Convert a lower-case string to a level.",80,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",124,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",124,null],[11,"get_lint_groups","","",124,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_early_pass","","",124,null],[11,"register_late_pass","","",124,null],[11,"register_future_incompatible","","",124,null],[11,"future_incompatible","","",124,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"option"}}],[11,"register_group","","",124,null],[11,"register_renamed","","",124,null],[11,"register_removed","","",124,null],[11,"process_command_line","","",124,null],[11,"new","rustc_trans::back::svh","Create a new `Svh` given the hash. If you actually want to compute the SVH from some HIR, you want the `calculate_svh` function found in `librustc_incremental`.",107,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_u64","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_string","","",107,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"Config"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[4,"PathKind"],[3,"Session"],[3,"PerfStats"],[4,"IncrCompSession"],[3,"FieldInfo"],[4,"SizeKind"],[3,"VariantInfo"],[4,"DataTypeKind"],[3,"TypeSizeInfo"],[8,"Delegate"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[4,"ConstVal"],[3,"LinkMeta"],[3,"CrateSource"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"NativeLibrary"],[4,"LoadedMacro"],[3,"ExternCrate"],[8,"CrateStore"],[8,"CrateLoader"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[4,"KillFrom"],[4,"Linkage"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[8,"ast_node"],[3,"MemCategorizationContext"],[3,"MemCategorizationOptions"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"DefRegion"],[3,"NamedRegionMap"],[4,"StabilityLevel"],[3,"DeprecationEntry"],[3,"Lint"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[4,"Level"],[4,"LintSource"],[3,"FutureIncompatibleInfo"],[3,"LateContext"],[8,"IntoEarlyLint"],[3,"EarlyContext"],[8,"LintContext"],[3,"EarlyLint"],[8,"MemoizationMap"],[8,"ToPrimitive"],[4,"LinkOrCopy"],[3,"Disr"],[3,"ModuleTranslation"],[3,"ModuleLlvm"],[3,"CrateTranslation"],[4,"ModuleSource"],[3,"ArchiveConfig"],[3,"ArchiveBuilder"],[8,"Linker"],[3,"LinkerInfo"],[3,"GnuLinker"],[3,"MsvcLinker"],[4,"SymbolExportLevel"],[3,"ExportedSymbols"],[3,"ModuleConfig"],[3,"RPathConfig"],[3,"CodeExtent"],[3,"Svh"],[3,"Indenter"],[3,"LintId"],[3,"Context"],[3,"CodeStats"],[3,"SearchPaths"],[3,"ErrorReported"],[3,"DummyCrateStore"],[3,"Iter"],[3,"HardwiredLints"],[3,"DataFlowContext"],[3,"OutputTypes"],[3,"Externs"],[3,"FreeRegionMap"],[3,"ExprUseVisitor"],[3,"RegionMaps"],[3,"Index"],[3,"LintStore"]]};
searchIndex["rustc_typeck"] = {"doc":"typeck.rs, an introduction","items":[[0,"dep_graph","rustc_typeck","",null,null],[0,"debug","rustc_typeck::dep_graph","Code for debugging the dep-graph.",null,null],[3,"DepNodeFilter","rustc_typeck::dep_graph::debug","A dep-node filter goes from a user-defined string to a query over nodes. Right now the format is like this:",null,null],[3,"EdgeFilter","","A filter like `F -> G` where `F` and `G` are valid dep-node filters. This can be used to test the source/target independently.",null,null],[12,"source","","",0,null],[12,"target","","",0,null],[3,"DepGraph","rustc_typeck::dep_graph","",null,null],[3,"DepGraphQuery","","",null,null],[12,"graph","","",1,null],[12,"indices","","",1,null],[4,"DepNode","","",null,null],[13,"Krate","","",2,null],[13,"Hir","","",2,null],[13,"HirBody","","",2,null],[13,"MetaData","","",2,null],[13,"WorkProduct","","",2,null],[13,"CollectLanguageItems","","",2,null],[13,"CheckStaticRecursion","","",2,null],[13,"ResolveLifetimes","","",2,null],[13,"RegionResolveCrate","","",2,null],[13,"CheckLoops","","",2,null],[13,"PluginRegistrar","","",2,null],[13,"StabilityIndex","","",2,null],[13,"CollectItem","","",2,null],[13,"CollectItemSig","","",2,null],[13,"Coherence","","",2,null],[13,"EffectCheck","","",2,null],[13,"Liveness","","",2,null],[13,"Resolve","","",2,null],[13,"EntryPoint","","",2,null],[13,"CheckEntryFn","","",2,null],[13,"CoherenceCheckImpl","","",2,null],[13,"CoherenceOverlapCheck","","",2,null],[13,"CoherenceOverlapCheckSpecial","","",2,null],[13,"CoherenceOverlapInherentCheck","","",2,null],[13,"CoherenceOrphanCheck","","",2,null],[13,"Variance","","",2,null],[13,"WfCheck","","",2,null],[13,"TypeckItemType","","",2,null],[13,"TypeckItemBody","","",2,null],[13,"Dropck","","",2,null],[13,"DropckImpl","","",2,null],[13,"UnusedTraitCheck","","",2,null],[13,"CheckConst","","",2,null],[13,"Privacy","","",2,null],[13,"IntrinsicCheck","","",2,null],[13,"MatchCheck","","",2,null],[13,"Mir","","",2,null],[13,"BorrowCheck","","",2,null],[13,"RvalueCheck","","",2,null],[13,"Reachability","","",2,null],[13,"DeadCheck","","",2,null],[13,"StabilityCheck","","",2,null],[13,"LateLintCheck","","",2,null],[13,"TransCrate","","",2,null],[13,"TransCrateItem","","",2,null],[13,"TransInlinedItem","","",2,null],[13,"TransWriteMetadata","","",2,null],[13,"LinkBinary","","",2,null],[13,"AssociatedItems","","",2,null],[13,"ItemSignature","","",2,null],[13,"SizedConstraint","","",2,null],[13,"AssociatedItemDefIds","","",2,null],[13,"InherentImpls","","",2,null],[13,"TraitImpls","","",2,null],[13,"TraitItems","","",2,null],[13,"ReprHints","","",2,null],[13,"TraitSelect","","",2,null],[3,"DepTask","","",null,null],[5,"visit_all_item_likes_in_krate","","Visit all the items in the krate in some order. When visiting a particular item, first create a dep-node by calling `dep_node_fn` and push that onto the dep-graph stack of tasks, and also create a read edge from the corresponding AST node. This is used in compiler passes to automatically record the item that they are working on.",null,null],[3,"WorkProductId","","A \"work product\" corresponds to a `.o` (or other) file that we save in between runs. These ids do not have a DefId but rather some independent path or string that persists between runs without the need to be mapped or unmapped. (This ensures we can serialize them even in the absence of a tcx.)",null,null],[12,"0","","",3,null],[8,"DepTrackingMapConfig","","",null,null],[16,"Key","","",4,null],[16,"Value","","",4,null],[10,"to_dep_node","","",4,null],[3,"WorkProduct","","A \"work product\" is an intermediate result that we save into the incremental directory for later re-use. The primary example are the object files that we save for each partition at code generation time.",null,null],[12,"input_hash","","Extra hash used to decide if work-product is still suitable; note that this is *not* a hash of the work-product itself. See documentation on `WorkProduct` type for an example.",5,null],[12,"saved_files","","Saved files associated with this CGU",5,null],[3,"DepTrackingMap","","A DepTrackingMap offers a subset of the `Map` API and ensures that we make calls to `read` and `write` as appropriate. We key the maps with a unique type for brevity.",null,null],[0,"hir","rustc_typeck","",null,null],[6,"HirVec","rustc_typeck::hir","HIR doesn't commit to a concrete storage type and have its own alias for a vector. It can be `Vec`, `P<[T]>` or potentially `Box<[T]>`, or some other container with similar behavior. Unlike AST, HIR is mostly a static structure, so we can use an owned slice instead of `Vec` to avoid keeping extra capacity.",null,null],[0,"check_attr","","",null,null],[5,"check_crate","rustc_typeck::hir::check_attr","",null,null],[0,"def","rustc_typeck::hir","",null,null],[4,"CtorKind","rustc_typeck::hir::def","",null,null],[13,"Fn","","",6,null],[13,"Const","","",6,null],[13,"Fictive","","",6,null],[4,"Def","","",null,null],[13,"Mod","","",7,null],[13,"Struct","","",7,null],[13,"Union","","",7,null],[13,"Enum","","",7,null],[13,"Variant","","",7,null],[13,"Trait","","",7,null],[13,"TyAlias","","",7,null],[13,"AssociatedTy","","",7,null],[13,"PrimTy","","",7,null],[13,"TyParam","","",7,null],[13,"SelfTy","","",7,null],[13,"Fn","","",7,null],[13,"Const","","",7,null],[13,"Static","","",7,null],[13,"StructCtor","","",7,null],[13,"VariantCtor","","",7,null],[13,"Method","","",7,null],[13,"AssociatedConst","","",7,null],[13,"Local","","",7,null],[13,"Upvar","","",7,null],[13,"Label","","",7,null],[13,"Macro","","",7,null],[13,"Err","","",7,null],[3,"PathResolution","","The result of resolving a path. Before type checking completes, `depth` represents the number of trailing segments which are yet unresolved. Afterwards, if there were no errors, all paths should be fully resolved, with `depth` set to `0` and `base_def` representing the final resolution.",null,null],[12,"base_def","","",8,null],[12,"depth","","",8,null],[6,"DefMap","","",null,null],[6,"ExportMap","","",null,null],[3,"Export","","",null,null],[12,"name","","",9,null],[12,"def","","",9,null],[0,"def_id","rustc_typeck::hir","",null,null],[3,"CrateNum","rustc_typeck::hir::def_id","",null,null],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum LOCAL_CRATE in their DefId.",null,null],[17,"BUILTIN_MACROS_CRATE","","Virtual crate for builtin macros",null,null],[3,"DefIndex","","A DefIndex is an index into the hir-map for a crate, identifying a particular definition. It should really be considered an interned shorthand for a particular DefPath.",null,null],[17,"CRATE_DEF_INDEX","","The crate root is always assigned index 0 by the AST Map code, thanks to `NodeCollector::new`.",null,null],[3,"DefId","","A DefId identifies a particular *definition*, by combining a crate index and a def index.",null,null],[12,"krate","","",10,null],[12,"index","","",10,null],[0,"intravisit","rustc_typeck::hir","HIR walker for walking the contents of nodes.",null,null],[4,"FnKind","rustc_typeck::hir::intravisit","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",11,null],[13,"Method","","fn foo(&self)",11,null],[13,"Closure","","|x, y| {}",11,null],[4,"NestedVisitorMap","","Specifies what nested things a visitor wants to visit. The most common choice is `OnlyBodies`, which will cause the visitor to visit fn bodies for fns that it encounters, but skip over nested item-like things.",null,null],[13,"None","","Do not visit any nested things. When you add a new \"non-nested\" thing, you will want to audit such uses to see if they remain valid.",12,null],[13,"OnlyBodies","","Do not visit nested item-like things, but visit nested things that are inside of an item-like.",12,null],[13,"All","","Visit all nested things, including item-likes.",12,null],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `intravisit::walk_mod`.",null,null],[10,"nested_visit_map","","The default versions of the `visit_nested_XXX` routines invoke this method to get a map to use. By selecting an enum variant, you control which kinds of nested HIR are visited; see `NestedVisitorMap` for details. By \"nested HIR\", we are referring to bits of HIR that are not directly embedded within one another but rather indirectly, through a table in the crate. This is done to control dependencies during incremental compilation: the non-inline bits of HIR can be tracked and hashed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_nested_item","","Invoked when a nested item is encountered. By default does nothing unless you override `nested_visit_map` to return `Some(_)`, in which case it will walk the item. **You probably don't want to override this method** -- instead, override `nested_visit_map` or use the \"shallow\" or \"deep\" visit patterns described on `itemlikevisit::ItemLikeVisitor`. The only reason to override this method is if you want a nested pattern but cannot supply a `Map`; see `nested_visit_map` for advice.",13,null],[11,"visit_nested_trait_item","","Like `visit_nested_item()`, but for trait items. See `visit_nested_item()` for advice on when to override this method.",13,null],[11,"visit_nested_impl_item","","Like `visit_nested_item()`, but for impl items. See `visit_nested_item()` for advice on when to override this method.",13,null],[11,"visit_nested_body","","Invoked to visit the body of a function, method or closure. Like visit_nested_item, does nothing by default unless you override `nested_visit_map` to return `Some(_)`, in which case it will walk the body.",13,null],[11,"visit_item","","Visit the top-level item and (optionally) nested items / impl items. See `visit_nested_item` for details.",13,null],[11,"visit_body","","",13,null],[11,"as_deep_visitor","","When invoking `visit_all_item_likes()`, you need to supply an item-like visitor.  This method converts a \"intra-visit\" visitor into an item-like visitor that walks the entire tree. If you use this, you probably don't want to process the contents of nested item-like things, since the outer loop will visit them as well.",13,{"inputs":[{"name":"self"}],"output":{"name":"deepvisitor"}}],[11,"visit_id","","",13,null],[11,"visit_def_mention","","",13,null],[11,"visit_name","","",13,null],[11,"visit_mod","","",13,null],[11,"visit_foreign_item","","",13,null],[11,"visit_local","","",13,null],[11,"visit_block","","",13,null],[11,"visit_stmt","","",13,null],[11,"visit_arm","","",13,null],[11,"visit_pat","","",13,null],[11,"visit_decl","","",13,null],[11,"visit_expr","","",13,null],[11,"visit_ty","","",13,null],[11,"visit_generics","","",13,null],[11,"visit_where_predicate","","",13,null],[11,"visit_fn_decl","","",13,null],[11,"visit_fn","","",13,null],[11,"visit_trait_item","","",13,null],[11,"visit_trait_item_ref","","",13,null],[11,"visit_impl_item","","",13,null],[11,"visit_impl_item_ref","","",13,null],[11,"visit_trait_ref","","",13,null],[11,"visit_ty_param_bound","","",13,null],[11,"visit_poly_trait_ref","","",13,null],[11,"visit_variant_data","","",13,null],[11,"visit_struct_field","","",13,null],[11,"visit_enum_def","","",13,null],[11,"visit_variant","","",13,null],[11,"visit_lifetime","","",13,null],[11,"visit_lifetime_def","","",13,null],[11,"visit_qpath","","",13,null],[11,"visit_path","","",13,null],[11,"visit_path_segment","","",13,null],[11,"visit_path_parameters","","",13,null],[11,"visit_assoc_type_binding","","",13,null],[11,"visit_attribute","","",13,null],[11,"visit_macro_def","","",13,null],[11,"visit_vis","","",13,null],[11,"visit_associated_item_kind","","",13,null],[11,"visit_defaultness","","",13,null],[5,"walk_opt_name","","",null,null],[5,"walk_opt_sp_name","","",null,null],[5,"walk_crate","","Walks the contents of a crate. See also `Crate::visit_all_items`.",null,null],[5,"walk_macro_def","","",null,null],[5,"walk_mod","","",null,null],[5,"walk_body","","",null,null],[5,"walk_local","","",null,null],[5,"walk_lifetime","","",null,null],[5,"walk_lifetime_def","","",null,null],[5,"walk_poly_trait_ref","","",null,null],[5,"walk_trait_ref","","",null,null],[5,"walk_item","","",null,null],[5,"walk_enum_def","","",null,null],[5,"walk_variant","","",null,null],[5,"walk_ty","","",null,null],[5,"walk_qpath","","",null,null],[5,"walk_path","","",null,null],[5,"walk_path_segment","","",null,null],[5,"walk_path_parameters","","",null,null],[5,"walk_assoc_type_binding","","",null,null],[5,"walk_pat","","",null,null],[5,"walk_foreign_item","","",null,null],[5,"walk_ty_param_bound","","",null,null],[5,"walk_generics","","",null,null],[5,"walk_where_predicate","","",null,null],[5,"walk_fn_ret_ty","","",null,null],[5,"walk_fn_decl","","",null,null],[5,"walk_fn_kind","","",null,null],[5,"walk_fn","","",null,null],[5,"walk_trait_item","","",null,null],[5,"walk_trait_item_ref","","",null,null],[5,"walk_impl_item","","",null,null],[5,"walk_impl_item_ref","","",null,null],[5,"walk_struct_def","","",null,null],[5,"walk_struct_field","","",null,null],[5,"walk_block","","",null,null],[5,"walk_stmt","","",null,null],[5,"walk_decl","","",null,null],[5,"walk_expr","","",null,null],[5,"walk_arm","","",null,null],[5,"walk_vis","","",null,null],[5,"walk_associated_item_kind","","",null,null],[5,"walk_defaultness","","",null,null],[3,"IdRange","","",null,null],[12,"min","","",14,null],[12,"max","","",14,null],[3,"IdRangeComputingVisitor","","",null,null],[0,"itemlikevisit","rustc_typeck::hir","",null,null],[8,"ItemLikeVisitor","rustc_typeck::hir::itemlikevisit","The \"item-like visitor\" visitor defines only the top-level methods that can be invoked by `Crate::visit_all_item_likes()`. Whether this trait is the right one to implement will depend on the overall pattern you need. Here are the three available patterns, in roughly the order of desirability:",null,null],[10,"visit_item","","",15,null],[10,"visit_trait_item","","",15,null],[10,"visit_impl_item","","",15,null],[3,"DeepVisitor","","",null,null],[0,"lowering","rustc_typeck::hir","",null,null],[3,"LoweringContext","rustc_typeck::hir::lowering","",null,null],[8,"Resolver","","",null,null],[10,"resolve_hir_path","","",16,null],[10,"get_resolution","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"definitions","","",16,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[5,"lower_crate","","",null,{"inputs":[{"name":"session"},{"name":"crate"},{"name":"resolver"}],"output":{"name":"crate"}}],[0,"map","rustc_typeck::hir","",null,null],[0,"blocks","rustc_typeck::hir::map","This module provides a simplified abstraction for working with code blocks identified by their integer node-id.  In particular, it captures a common set of attributes that all \"function-like things\" (represented by `FnLike` instances) share.  For example, all `FnLike` instances have a type signature (be it explicit or inferred).  And all `FnLike` instances have a body, i.e. the code that is run when the function-like thing it represents is invoked.",null,null],[3,"FnLikeNode","rustc_typeck::hir::map::blocks","An FnLikeNode is a Node that is like a fn, in that it has a decl and a body (as well as a NodeId, a span, etc).",null,null],[8,"MaybeFnLike","","MaybeFnLike wraps a method that indicates if an object corresponds to some FnLikeNode.",null,null],[10,"is_fn_like","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[3,"FnParts","","Components shared by fn-like things (fn items, methods, closures).",null,null],[12,"decl","","",18,null],[12,"body","","",18,null],[12,"kind","","",18,null],[12,"span","","",18,null],[12,"id","","",18,null],[4,"Code","","Carries either an FnLikeNode or a Expr, as these are the two constructs that correspond to \"code\" (as in, something from which we can construct a control-flow graph).",null,null],[13,"FnLike","","",19,null],[13,"Expr","","",19,null],[0,"definitions","rustc_typeck::hir::map","For each definition, we track the following data.  A definition here is defined somewhat circularly as \"something with a def-id\", but it generally corresponds to things like structs, enums, etc. There are also some rather random cases (like const initializer expressions) that are mostly just leftovers.",null,null],[3,"DefPathTable","rustc_typeck::hir::map::definitions","The DefPathTable maps DefIndexes to DefKeys and vice versa. Internally the DefPathTable holds a tree of DefKeys, where each DefKey stores the DefIndex of its parent. There is one DefPathTable for each crate.",null,null],[3,"Definitions","","The definition table containing node definitions. It holds the DefPathTable for local DefIds/DefPaths and it also stores a mapping from NodeIds to local DefIds.",null,null],[3,"DefKey","","A unique identifier that we can use to lookup a definition precisely. It combines the index of the definition's parent (if any) with a `DisambiguatedDefPathData`.",null,null],[12,"parent","","Parent path.",20,null],[12,"disambiguated_data","","Identifier of this node.",20,null],[3,"DisambiguatedDefPathData","","Pair of `DefPathData` and an integer disambiguator. The integer is normally 0, but in the event that there are multiple defs with the same `parent` and `data`, we use this field to disambiguate between them. This introduces some artificial ordering dependency but means that if you have (e.g.) two impls for the same type in the same module, they do get distinct def-ids.",null,null],[12,"data","","",21,null],[12,"disambiguator","","",21,null],[3,"DefPath","","",null,null],[12,"data","","the path leading from the crate root to the item",22,null],[12,"krate","","what krate root is this path relative to?",22,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","The crate root (marker)",23,null],[13,"Misc","","",23,null],[13,"Impl","","An impl",23,null],[13,"TypeNs","","Something in the type NS",23,null],[13,"ValueNs","","Something in the value NS",23,null],[13,"Module","","A module declaration",23,null],[13,"MacroDef","","A macro rule",23,null],[13,"ClosureExpr","","A closure expression",23,null],[13,"TypeParam","","A type parameter (generic parameter)",23,null],[13,"LifetimeDef","","A lifetime definition",23,null],[13,"EnumVariant","","A variant of a enum",23,null],[13,"Field","","A struct field",23,null],[13,"StructCtor","","Implicit ctor for a tuple-like struct",23,null],[13,"Initializer","","Initializer for a const",23,null],[13,"Binding","","Pattern binding",23,null],[13,"ImplTrait","","An `impl Trait` type node.",23,null],[4,"Node","rustc_typeck::hir::map","",null,null],[13,"NodeItem","","",24,null],[13,"NodeForeignItem","","",24,null],[13,"NodeTraitItem","","",24,null],[13,"NodeImplItem","","",24,null],[13,"NodeVariant","","",24,null],[13,"NodeField","","",24,null],[13,"NodeExpr","","",24,null],[13,"NodeStmt","","",24,null],[13,"NodeTy","","",24,null],[13,"NodeTraitRef","","",24,null],[13,"NodeLocal","","",24,null],[13,"NodePat","","",24,null],[13,"NodeBlock","","",24,null],[13,"NodeStructCtor","","NodeStructCtor represents a tuple struct.",24,null],[13,"NodeLifetime","","",24,null],[13,"NodeTyParam","","",24,null],[13,"NodeVisibility","","",24,null],[3,"Forest","","Stores a crate and any number of inlined items from other crates.",null,null],[12,"dep_graph","","",25,null],[3,"Map","","Represents a mapping from Node IDs to AST elements and their parent Node IDs",null,null],[12,"forest","","The backing storage for all the AST nodes.",26,null],[12,"dep_graph","","Same as the dep_graph in forest, just available with one fewer deref. This is a gratuitious micro-optimization.",26,null],[3,"NodesMatchingSuffix","","",null,null],[5,"map_crate","","",null,{"inputs":[{"name":"forest"},{"name":"definitions"}],"output":{"name":"map"}}],[5,"map_decoded_body","","Used for bodies loaded from external crate that are being inlined into this crate.",null,{"inputs":[{"name":"map"},{"name":"defid"},{"name":"body"},{"name":"nodeid"}],"output":{"name":"body"}}],[3,"DisambiguatedDefPathData","","Pair of `DefPathData` and an integer disambiguator. The integer is normally 0, but in the event that there are multiple defs with the same `parent` and `data`, we use this field to disambiguate between them. This introduces some artificial ordering dependency but means that if you have (e.g.) two impls for the same type in the same module, they do get distinct def-ids.",null,null],[12,"data","","",21,null],[12,"disambiguator","","",21,null],[3,"Definitions","","The definition table containing node definitions. It holds the DefPathTable for local DefIds/DefPaths and it also stores a mapping from NodeIds to local DefIds.",null,null],[3,"DefCollector","","Creates def ids for nodes in the AST.",null,null],[12,"visit_macro_invoc","","",27,null],[3,"DefPath","","",null,null],[12,"data","","the path leading from the crate root to the item",22,null],[12,"krate","","what krate root is this path relative to?",22,null],[3,"MacroInvocationData","","",null,null],[12,"mark","","",28,null],[12,"def_index","","",28,null],[12,"const_integer","","",28,null],[3,"DefKey","","A unique identifier that we can use to lookup a definition precisely. It combines the index of the definition's parent (if any) with a `DisambiguatedDefPathData`.",null,null],[12,"parent","","Parent path.",20,null],[12,"disambiguated_data","","Identifier of this node.",20,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","The crate root (marker)",23,null],[13,"Misc","","",23,null],[13,"Impl","","An impl",23,null],[13,"TypeNs","","Something in the type NS",23,null],[13,"ValueNs","","Something in the value NS",23,null],[13,"Module","","A module declaration",23,null],[13,"MacroDef","","A macro rule",23,null],[13,"ClosureExpr","","A closure expression",23,null],[13,"TypeParam","","A type parameter (generic parameter)",23,null],[13,"LifetimeDef","","A lifetime definition",23,null],[13,"EnumVariant","","A variant of a enum",23,null],[13,"Field","","A struct field",23,null],[13,"StructCtor","","Implicit ctor for a tuple-like struct",23,null],[13,"Initializer","","Initializer for a const",23,null],[13,"Binding","","Pattern binding",23,null],[13,"ImplTrait","","An `impl Trait` type node.",23,null],[0,"pat_util","rustc_typeck::hir","",null,null],[3,"EnumerateAndAdjust","rustc_typeck::hir::pat_util","",null,null],[8,"EnumerateAndAdjustIterator","","",null,null],[10,"enumerate_and_adjust","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"option"}],"output":{"name":"enumerateandadjust"}}],[0,"print","rustc_typeck::hir","",null,null],[4,"AnnNode","rustc_typeck::hir::print","",null,null],[13,"NodeName","","",30,null],[13,"NodeBlock","","",30,null],[13,"NodeItem","","",30,null],[13,"NodeSubItem","","",30,null],[13,"NodeExpr","","",30,null],[13,"NodePat","","",30,null],[4,"Nested","","",null,null],[13,"Item","","",31,null],[13,"TraitItem","","",31,null],[13,"ImplItem","","",31,null],[13,"Body","","",31,null],[13,"BodyArgPat","","",31,null],[8,"PpAnn","","",null,null],[11,"nested","","",32,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",32,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",32,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[3,"NoAnn","","",null,null],[17,"NO_ANN","","",null,null],[3,"State","","",null,null],[12,"s","","",33,null],[17,"indent_unit","","",null,null],[17,"default_columns","","",null,null],[5,"print_crate","","Requires you to pass an input filename and reader so that it can scan the input text for comments and literals to copy forward.",null,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"ppann"},{"name":"f"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[0,"svh","rustc_typeck::hir","Calculation and management of a Strict Version Hash for crates",null,null],[3,"Svh","rustc_typeck::hir::svh","",null,null],[3,"Lifetime","rustc_typeck::hir","",null,null],[12,"id","","",34,null],[12,"span","","",34,null],[12,"name","","",34,null],[3,"LifetimeDef","","A lifetime definition, eg `'a: 'b+'c+'d`",null,null],[12,"lifetime","","",35,null],[12,"bounds","","",35,null],[12,"pure_wrt_drop","","",35,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name; for instance: std::cmp::PartialEq  .  It's represented as a sequence of identifiers, along with a bunch of supporting information.",null,null],[12,"span","","",36,null],[12,"def","","The definition that the path resolved to.",36,null],[12,"segments","","The segments in the path: the things separated by `::`.",36,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"name","","The identifier portion of this path segment.",37,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",37,null],[4,"PathParameters","","",null,null],[13,"AngleBracketedParameters","","The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`",38,null],[13,"ParenthesizedParameters","","The `(A,B)` and `C` in `Foo(A,B) -> C`",38,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",39,null],[12,"types","","The type parameters for this path segment, if present.",39,null],[12,"infer_types","","Whether to infer remaining type parameters, if any. This only applies to expression and pattern paths, and out of those only the segments with no type parameters to begin with, e.g. `Vec::new` is `<Vec<..>>::new::<..>`.",39,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present. E.g., `Foo<A=Bar>`.",39,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"span","","Overall span",40,null],[12,"inputs","","`(A,B)`",40,null],[12,"output","","`C`",40,null],[4,"TyParamBound","","The AST represents all type param bounds as types. typeck::collect::compute_bounds matches these against the \"special\" built-in traits (see middle::lang_items) and detects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",41,null],[13,"RegionTyParamBound","","",41,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",42,null],[13,"Maybe","","",42,null],[6,"TyParamBounds","","",null,null],[3,"TyParam","","",null,null],[12,"name","","",43,null],[12,"id","","",43,null],[12,"bounds","","",43,null],[12,"default","","",43,null],[12,"span","","",43,null],[12,"pure_wrt_drop","","",43,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",44,null],[12,"ty_params","","",44,null],[12,"where_clause","","",44,null],[12,"span","","",44,null],[4,"UnsafeGeneric","","",null,null],[13,"Region","","",45,null],[13,"Type","","",45,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",46,null],[12,"predicates","","",46,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, eg `for<'c> Foo: Send+Clone+'c`",47,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",47,null],[13,"EqPredicate","","An equality predicate (unsupported)",47,null],[3,"WhereBoundPredicate","","A type bound, eg `for<'c> Foo: Send+Clone+'c`",null,null],[12,"span","","",48,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",48,null],[12,"bounded_ty","","The type being bounded",48,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",48,null],[3,"WhereRegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",null,null],[12,"span","","",49,null],[12,"lifetime","","",49,null],[12,"bounds","","",49,null],[3,"WhereEqPredicate","","An equality predicate (unsupported), e.g. `T=int`",null,null],[12,"id","","",50,null],[12,"span","","",50,null],[12,"path","","",50,null],[12,"ty","","",50,null],[6,"CrateConfig","","",null,null],[3,"Crate","","",null,null],[12,"module","","",51,null],[12,"attrs","","",51,null],[12,"span","","",51,null],[12,"exported_macros","","",51,null],[12,"items","","",51,null],[12,"trait_items","","",51,null],[12,"impl_items","","",51,null],[12,"bodies","","",51,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"name","","",52,null],[12,"attrs","","",52,null],[12,"id","","",52,null],[12,"span","","",52,null],[12,"body","","",52,null],[3,"Block","","",null,null],[12,"stmts","","Statements in a block",53,null],[12,"expr","","An expression at the end of the block without a semicolon, if any",53,null],[12,"id","","",53,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",53,null],[12,"span","","",53,null],[3,"Pat","","",null,null],[12,"id","","",54,null],[12,"node","","",54,null],[12,"span","","",54,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"name","","The identifier for the field",55,null],[12,"pat","","The pattern the field is destructured to",55,null],[12,"is_shorthand","","",55,null],[4,"BindingMode","","",null,null],[13,"BindByRef","","",56,null],[13,"BindByValue","","",56,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",57,null],[13,"Binding","","A fresh binding `ref mut binding @ OPT_SUBPATTERN`. The `DefId` is for the definition of the variable being bound.",57,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",57,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",57,null],[13,"Path","","A path pattern for an unit struct/variant or a (maybe-associated) constant.",57,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",57,null],[13,"Box","","A `box` pattern",57,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",57,null],[13,"Lit","","A literal",57,null],[13,"Range","","A range pattern, e.g. `1...2`",57,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `PatKind::Slice(box [a, b], Some(i), box [y, z])`",57,null],[4,"Mutability","","",null,null],[13,"MutMutable","","",58,null],[13,"MutImmutable","","",58,null],[4,"BinOp_","","",null,null],[13,"BiAdd","","The `+` operator (addition)",59,null],[13,"BiSub","","The `-` operator (subtraction)",59,null],[13,"BiMul","","The `*` operator (multiplication)",59,null],[13,"BiDiv","","The `/` operator (division)",59,null],[13,"BiRem","","The `%` operator (modulus)",59,null],[13,"BiAnd","","The `&&` operator (logical and)",59,null],[13,"BiOr","","The `||` operator (logical or)",59,null],[13,"BiBitXor","","The `^` operator (bitwise xor)",59,null],[13,"BiBitAnd","","The `&` operator (bitwise and)",59,null],[13,"BiBitOr","","The `|` operator (bitwise or)",59,null],[13,"BiShl","","The `<<` operator (shift left)",59,null],[13,"BiShr","","The `>>` operator (shift right)",59,null],[13,"BiEq","","The `==` operator (equality)",59,null],[13,"BiLt","","The `<` operator (less than)",59,null],[13,"BiLe","","The `<=` operator (less than or equal to)",59,null],[13,"BiNe","","The `!=` operator (not equal to)",59,null],[13,"BiGe","","The `>=` operator (greater than or equal to)",59,null],[13,"BiGt","","The `>` operator (greater than)",59,null],[6,"BinOp","","",null,null],[4,"UnOp","","",null,null],[13,"UnDeref","","The `*` operator for dereferencing",60,null],[13,"UnNot","","The `!` operator for logical inversion",60,null],[13,"UnNeg","","The `-` operator for negation",60,null],[6,"Stmt","","A statement",null,null],[4,"Stmt_","","",null,null],[13,"StmtDecl","","Could be an item or a local (let) binding:",61,null],[13,"StmtExpr","","Expr without trailing semi-colon (must have unit type):",61,null],[13,"StmtSemi","","Expr with trailing semi-colon (may have any type):",61,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",62,null],[12,"ty","","",62,null],[12,"init","","Initializer expression to set the value, if any",62,null],[12,"id","","",62,null],[12,"span","","",62,null],[12,"attrs","","",62,null],[6,"Decl","","",null,null],[4,"Decl_","","",null,null],[13,"DeclLocal","","A local (let) binding:",63,null],[13,"DeclItem","","An item binding:",63,null],[3,"Arm","","represents one arm of a 'match'",null,null],[12,"attrs","","",64,null],[12,"pats","","",64,null],[12,"guard","","",64,null],[12,"body","","",64,null],[3,"Field","","",null,null],[12,"name","","",65,null],[12,"expr","","",65,null],[12,"span","","",65,null],[12,"is_shorthand","","",65,null],[4,"BlockCheckMode","","",null,null],[13,"DefaultBlock","","",66,null],[13,"UnsafeBlock","","",66,null],[13,"PushUnsafeBlock","","",66,null],[13,"PopUnsafeBlock","","",66,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",67,null],[13,"UserProvided","","",67,null],[3,"BodyId","","",null,null],[12,"node_id","","",68,null],[3,"Body","","The body of a function or constant value.",null,null],[12,"arguments","","",69,null],[12,"value","","",69,null],[3,"Expr","","An expression",null,null],[12,"id","","",70,null],[12,"span","","",70,null],[12,"node","","",70,null],[12,"attrs","","",70,null],[4,"Expr_","","",null,null],[13,"ExprBox","","A `box x` expression.",71,null],[13,"ExprArray","","An array (`[a, b, c, d]`)",71,null],[13,"ExprCall","","A function call",71,null],[13,"ExprMethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",71,null],[13,"ExprTup","","A tuple (`(a, b, c ,d)`)",71,null],[13,"ExprBinary","","A binary operation (For example: `a + b`, `a * b`)",71,null],[13,"ExprUnary","","A unary operation (For example: `!x`, `*x`)",71,null],[13,"ExprLit","","A literal (For example: `1`, `\"foo\"`)",71,null],[13,"ExprCast","","A cast (`foo as f64`)",71,null],[13,"ExprType","","",71,null],[13,"ExprIf","","An `if` block, with an optional else block",71,null],[13,"ExprWhile","","A while loop, with an optional label",71,null],[13,"ExprLoop","","Conditionless loop (can be exited with break, continue, or return)",71,null],[13,"ExprMatch","","A `match` block, with a source that indicates whether or not it is the result of a desugaring, and if so, which kind.",71,null],[13,"ExprClosure","","A closure (for example, `move |a, b, c| {a + b + c}`).",71,null],[13,"ExprBlock","","A block (`{ ... }`)",71,null],[13,"ExprAssign","","An assignment (`a = foo()`)",71,null],[13,"ExprAssignOp","","An assignment with an operator",71,null],[13,"ExprField","","Access of a named struct field (`obj.foo`)",71,null],[13,"ExprTupField","","Access of an unnamed field of a struct or tuple-struct",71,null],[13,"ExprIndex","","An indexing operation (`foo[2]`)",71,null],[13,"ExprPath","","Path to a definition, possibly containing lifetime or type parameters.",71,null],[13,"ExprAddrOf","","A referencing operation (`&a` or `&mut a`)",71,null],[13,"ExprBreak","","A `break`, with an optional label to break",71,null],[13,"ExprAgain","","A `continue`, with an optional label",71,null],[13,"ExprRet","","A `return`, with an optional value to be returned",71,null],[13,"ExprInlineAsm","","Inline assembly (from `asm!`), with its outputs and inputs.",71,null],[13,"ExprStruct","","A struct or struct-like variant literal expression.",71,null],[13,"ExprRepeat","","An array literal constructed from one repeated element.",71,null],[4,"QPath","","Optionally `Self`-qualified value/type path or associated extension.",null,null],[13,"Resolved","","Path to a definition, optionally \"fully-qualified\" with a `Self` type, if the path points to an associated item in a trait.",72,null],[13,"TypeRelative","","Type-related paths, e.g. `<T>::default` or `<T>::Output`. Will be resolved by type-checking to an associated item.",72,null],[4,"MatchSource","","Hints at the original code for a `match _ { .. }`",null,null],[13,"Normal","","A `match _ { .. }`",73,null],[13,"IfLetDesugar","","An `if let _ = _ { .. }` (optionally with `else { .. }`)",73,null],[12,"contains_else_clause","rustc_typeck::hir::MatchSource","",73,null],[13,"WhileLetDesugar","rustc_typeck::hir","A `while let _ = _ { .. }` (which was desugared to a `loop { match _ { .. } }`)",73,null],[13,"ForLoopDesugar","","A desugared `for _ in _ { .. }` loop",73,null],[13,"TryDesugar","","A desugared `?` operator",73,null],[4,"LoopSource","","The loop type that yielded an ExprLoop",null,null],[13,"Loop","","A `loop { .. }` loop",74,null],[13,"WhileLet","","A `while let _ = _ { .. }` loop",74,null],[13,"ForLoop","","A `for _ in _ { .. }` loop",74,null],[3,"Label","","",null,null],[12,"span","","",75,null],[12,"name","","",75,null],[12,"loop_id","","",75,null],[4,"CaptureClause","","",null,null],[13,"CaptureByValue","","",76,null],[13,"CaptureByRef","","",76,null],[3,"MutTy","","",null,null],[12,"ty","","",77,null],[12,"mutbl","","",77,null],[3,"MethodSig","","Represents a method's signature in a trait declaration or implementation.",null,null],[12,"unsafety","","",78,null],[12,"constness","","",78,null],[12,"abi","","",78,null],[12,"decl","","",78,null],[12,"generics","","",78,null],[3,"TraitItemId","","",null,null],[12,"node_id","","",79,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",80,null],[12,"name","","",80,null],[12,"attrs","","",80,null],[12,"node","","",80,null],[12,"span","","",80,null],[4,"TraitMethod","","A trait method's body (or just argument names).",null,null],[13,"Required","","No default body in the trait, just a signature.",81,null],[13,"Provided","","Both signature and body are provided in the trait.",81,null],[4,"TraitItemKind","","Represents a trait method or associated constant or type",null,null],[13,"Const","","An associated constant with an optional value (otherwise `impl`s must contain a value)",82,null],[13,"Method","","A method with an optional body",82,null],[13,"Type","","An associated type with (possibly empty) bounds and optional concrete type",82,null],[3,"ImplItemId","","",null,null],[12,"node_id","","",83,null],[3,"ImplItem","","Represents anything within an `impl` block",null,null],[12,"id","","",84,null],[12,"name","","",84,null],[12,"vis","","",84,null],[12,"defaultness","","",84,null],[12,"attrs","","",84,null],[12,"node","","",84,null],[12,"span","","",84,null],[4,"ImplItemKind","","Represents different contents within `impl`s",null,null],[13,"Const","","An associated constant of the given type, set to the constant result of the expression",85,null],[13,"Method","","A method implementation with the given signature and body",85,null],[13,"Type","","An associated type",85,null],[3,"TypeBinding","","",null,null],[12,"id","","",86,null],[12,"name","","",86,null],[12,"ty","","",86,null],[12,"span","","",86,null],[3,"Ty","","",null,null],[12,"id","","",87,null],[12,"node","","",87,null],[12,"span","","",87,null],[4,"PrimTy","","Not represented directly in the AST, referred to by name through a ty_path.",null,null],[13,"TyInt","","",88,null],[13,"TyUint","","",88,null],[13,"TyFloat","","",88,null],[13,"TyStr","","",88,null],[13,"TyBool","","",88,null],[13,"TyChar","","",88,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",89,null],[12,"abi","","",89,null],[12,"lifetimes","","",89,null],[12,"decl","","",89,null],[4,"Ty_","","The different kinds of types recognized by the compiler",null,null],[13,"TySlice","","A variable length slice (`[T]`)",90,null],[13,"TyArray","","A fixed length array (`[T; n]`)",90,null],[13,"TyPtr","","A raw pointer (`*const T` or `*mut T`)",90,null],[13,"TyRptr","","A reference (`&'a T` or `&'a mut T`)",90,null],[13,"TyBareFn","","A bare function (e.g. `fn(usize) -> bool`)",90,null],[13,"TyNever","","The never type (`!`)",90,null],[13,"TyTup","","A tuple (`(A, B, C, D,...)`)",90,null],[13,"TyPath","","A path to a type definition (`module::module::...::Type`), or an associated type, e.g. `<Vec<T> as Trait>::Type` or `<T>::Target`.",90,null],[13,"TyObjectSum","","Something like `A+B`. Note that `B` must always be a path.",90,null],[13,"TyPolyTraitRef","","A type like `for<'a> Foo<&'a Bar>`",90,null],[13,"TyImplTrait","","An `impl TraitA+TraitB` type.",90,null],[13,"TyTypeof","","Unused for now",90,null],[13,"TyInfer","","TyInfer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",90,null],[3,"InlineAsmOutput","","",null,null],[12,"constraint","","",91,null],[12,"is_rw","","",91,null],[12,"is_indirect","","",91,null],[3,"InlineAsm","","",null,null],[12,"asm","","",92,null],[12,"asm_str_style","","",92,null],[12,"outputs","","",92,null],[12,"inputs","","",92,null],[12,"clobbers","","",92,null],[12,"volatile","","",92,null],[12,"alignstack","","",92,null],[12,"dialect","","",92,null],[12,"expn_id","","",92,null],[3,"Arg","","represents an argument in a function header",null,null],[12,"pat","","",93,null],[12,"id","","",93,null],[3,"FnDecl","","Represents the header (not the body) of a function declaration",null,null],[12,"inputs","","",94,null],[12,"output","","",94,null],[12,"variadic","","",94,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",95,null],[13,"Normal","","",95,null],[4,"Constness","","",null,null],[13,"Const","","",96,null],[13,"NotConst","","",96,null],[4,"Defaultness","","",null,null],[13,"Default","","",97,null],[12,"has_value","rustc_typeck::hir::Defaultness","",97,null],[13,"Final","rustc_typeck::hir","",97,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",98,null],[13,"Negative","","`impl !Trait for Type`",98,null],[4,"FunctionRetTy","","",null,null],[13,"DefaultReturn","","Return type is not specified.",99,null],[13,"Return","","Everything else",99,null],[3,"Mod","","",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`. For `mod foo;`, the inner span ranges from the first token to the last token in the external file.",100,null],[12,"item_ids","","",100,null],[3,"ForeignMod","","",null,null],[12,"abi","","",101,null],[12,"items","","",101,null],[3,"EnumDef","","",null,null],[12,"variants","","",102,null],[3,"Variant_","","",null,null],[12,"name","","",103,null],[12,"attrs","","",103,null],[12,"data","","",103,null],[12,"disr_expr","","Explicit discriminant, eg `Foo = 1`",103,null],[6,"Variant","","",null,null],[4,"UseKind","","",null,null],[13,"Single","","One import, e.g. `use foo::bar` or `use foo::bar as baz`. Also produced for each element of a list `use`, e.g.",104,null],[13,"Glob","","Glob import, e.g. `use foo::*`.",104,null],[13,"ListStem","","Degenerate list import, e.g. `use foo::{a, b}` produces an additional `use foo::{}` for performing checks such as unstable feature gating. May be removed in the future.",104,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",105,null],[12,"ref_id","","",105,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",106,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",106,null],[12,"span","","",106,null],[4,"Visibility","","",null,null],[13,"Public","","",107,null],[13,"Crate","","",107,null],[13,"Restricted","","",107,null],[12,"path","rustc_typeck::hir::Visibility","",107,null],[12,"id","","",107,null],[13,"Inherited","rustc_typeck::hir","",107,null],[3,"StructField","","",null,null],[12,"span","","",108,null],[12,"name","","",108,null],[12,"vis","","",108,null],[12,"id","","",108,null],[12,"ty","","",108,null],[12,"attrs","","",108,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","",109,null],[13,"Tuple","","",109,null],[13,"Unit","","",109,null],[3,"ItemId","","",null,null],[12,"id","","",110,null],[3,"Item","","An item",null,null],[12,"name","","",111,null],[12,"attrs","","",111,null],[12,"id","","",111,null],[12,"node","","",111,null],[12,"vis","","",111,null],[12,"span","","",111,null],[4,"Item_","","",null,null],[13,"ItemExternCrate","","An`extern crate` item, with optional original crate name,",112,null],[13,"ItemUse","","`use foo::bar::*;` or `use foo::bar::baz as quux;`",112,null],[13,"ItemStatic","","A `static` item",112,null],[13,"ItemConst","","A `const` item",112,null],[13,"ItemFn","","A function declaration",112,null],[13,"ItemMod","","A module",112,null],[13,"ItemForeignMod","","An external module",112,null],[13,"ItemTy","","A type alias, e.g. `type Foo = Bar<u8>`",112,null],[13,"ItemEnum","","An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`",112,null],[13,"ItemStruct","","A struct definition, e.g. `struct Foo<A> {x: A}`",112,null],[13,"ItemUnion","","A union definition, e.g. `union Foo<A, B> {x: A, y: B}`",112,null],[13,"ItemTrait","","Represents a Trait Declaration",112,null],[13,"ItemDefaultImpl","","",112,null],[13,"ItemImpl","","An implementation, eg `impl<A> Trait for Foo { .. }`",112,null],[3,"TraitItemRef","","A reference from an trait to one of its associated items. This contains the item's id, naturally, but also the item's name and some other high-level details (like whether it is an associated type or method, and whether it is public). This allows other passes to find the impl they want without loading the id (which means fewer edges in the incremental compilation graph).",null,null],[12,"id","","",113,null],[12,"name","","",113,null],[12,"kind","","",113,null],[12,"span","","",113,null],[12,"defaultness","","",113,null],[3,"ImplItemRef","","A reference from an impl to one of its associated items. This contains the item's id, naturally, but also the item's name and some other high-level details (like whether it is an associated type or method, and whether it is public). This allows other passes to find the impl they want without loading the id (which means fewer edges in the incremental compilation graph).",null,null],[12,"id","","",114,null],[12,"name","","",114,null],[12,"kind","","",114,null],[12,"span","","",114,null],[12,"vis","","",114,null],[12,"defaultness","","",114,null],[4,"AssociatedItemKind","","",null,null],[13,"Const","","",115,null],[13,"Method","","",115,null],[12,"has_self","rustc_typeck::hir::AssociatedItemKind","",115,null],[13,"Type","rustc_typeck::hir","",115,null],[3,"ForeignItem","","",null,null],[12,"name","","",116,null],[12,"attrs","","",116,null],[12,"node","","",116,null],[12,"id","","",116,null],[12,"span","","",116,null],[12,"vis","","",116,null],[4,"ForeignItem_","","An item within an `extern` block",null,null],[13,"ForeignItemFn","","A foreign function",117,null],[13,"ForeignItemStatic","","A foreign static item (`static ext: u8`), with optional mutability (the boolean is true when mutable)",117,null],[3,"Freevar","","A free variable referred to in a function.",null,null],[12,"def","","The variable being accessed free.",118,null],[12,"span","","",118,null],[6,"FreevarMap","","",null,null],[6,"CaptureModeMap","","",null,null],[3,"TraitCandidate","","",null,null],[12,"def_id","","",119,null],[12,"import_id","","",119,null],[6,"TraitMap","","",null,null],[6,"GlobMap","","",null,null],[0,"lint","rustc_typeck","Lints, aka compiler warnings.",null,null],[3,"Lint","rustc_typeck::lint","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",120,null],[12,"default_level","","Default level for the lint.",120,null],[12,"desc","","Description of the lint or the issue it detects.",120,null],[6,"LintArray","","",null,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",121,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_name","","",122,null],[11,"check_crate","","",122,null],[11,"check_crate_post","","",122,null],[11,"check_mod","","",122,null],[11,"check_mod_post","","",122,null],[11,"check_foreign_item","","",122,null],[11,"check_foreign_item_post","","",122,null],[11,"check_item","","",122,null],[11,"check_item_post","","",122,null],[11,"check_local","","",122,null],[11,"check_block","","",122,null],[11,"check_block_post","","",122,null],[11,"check_stmt","","",122,null],[11,"check_arm","","",122,null],[11,"check_pat","","",122,null],[11,"check_decl","","",122,null],[11,"check_expr","","",122,null],[11,"check_expr_post","","",122,null],[11,"check_ty","","",122,null],[11,"check_generics","","",122,null],[11,"check_fn","","",122,null],[11,"check_fn_post","","",122,null],[11,"check_trait_item","","",122,null],[11,"check_trait_item_post","","",122,null],[11,"check_impl_item","","",122,null],[11,"check_impl_item_post","","",122,null],[11,"check_struct_def","","",122,null],[11,"check_struct_def_post","","",122,null],[11,"check_struct_field","","",122,null],[11,"check_variant","","",122,null],[11,"check_variant_post","","",122,null],[11,"check_lifetime","","",122,null],[11,"check_lifetime_def","","",122,null],[11,"check_path","","",122,null],[11,"check_attribute","","",122,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",122,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",122,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",123,null],[11,"check_crate","","",123,null],[11,"check_crate_post","","",123,null],[11,"check_mod","","",123,null],[11,"check_mod_post","","",123,null],[11,"check_foreign_item","","",123,null],[11,"check_foreign_item_post","","",123,null],[11,"check_item","","",123,null],[11,"check_item_post","","",123,null],[11,"check_local","","",123,null],[11,"check_block","","",123,null],[11,"check_block_post","","",123,null],[11,"check_stmt","","",123,null],[11,"check_arm","","",123,null],[11,"check_pat","","",123,null],[11,"check_expr","","",123,null],[11,"check_expr_post","","",123,null],[11,"check_ty","","",123,null],[11,"check_generics","","",123,null],[11,"check_fn","","",123,null],[11,"check_fn_post","","",123,null],[11,"check_trait_item","","",123,null],[11,"check_trait_item_post","","",123,null],[11,"check_impl_item","","",123,null],[11,"check_impl_item_post","","",123,null],[11,"check_struct_def","","",123,null],[11,"check_struct_def_post","","",123,null],[11,"check_struct_field","","",123,null],[11,"check_variant","","",123,null],[11,"check_variant_post","","",123,null],[11,"check_lifetime","","",123,null],[11,"check_lifetime_def","","",123,null],[11,"check_path","","",123,null],[11,"check_path_list_item","","",123,null],[11,"check_attribute","","",123,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",123,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",123,null],[6,"EarlyLintPassObject","","A lint pass boxed up as a trait object.",null,null],[6,"LateLintPassObject","","",null,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",124,null],[13,"Warn","","",124,null],[13,"Deny","","",124,null],[13,"Forbid","","",124,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared in rustc or a plugin.",125,null],[13,"Node","","Lint level was set by an attribute.",125,null],[13,"CommandLine","","Lint level was set by a command-line flag.",125,null],[6,"LevelSource","","",null,null],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[7,"CONST_ERR","rustc_typeck::lint::builtin","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"TRANSMUTE_FROM_FN_ITEM_TYPES","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"LIFETIME_UNDERSCORE","","",null,null],[7,"SAFE_EXTERN_STATICS","","",null,null],[7,"PATTERNS_IN_FNS_WITHOUT_BODY","","",null,null],[7,"EXTRA_REQUIREMENT_IN_IMPL","","",null,null],[7,"LEGACY_DIRECTORY_OWNERSHIP","","",null,null],[7,"LEGACY_IMPORTS","","",null,null],[7,"DEPRECATED","","",null,null],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s which are used by other parts of the compiler.",null,null],[3,"FutureIncompatibleInfo","rustc_typeck::lint","Extra information for a future incompatibility lint. See the call to `register_future_incompatible` in `librustc_lint/lib.rs` for guidelines.",null,null],[12,"id","","",126,null],[12,"reference","","",126,null],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all) according to `level`.",null,null],[3,"LateContext","","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we're checking in.",127,null],[12,"krate","","The crate being checked.",127,null],[12,"access_levels","","Items accessible from the crate being checked.",127,null],[5,"raw_struct_lint","","",null,null],[5,"check_crate","","Perform lint checking on a crate.",null,null],[3,"LintStore","","Information about the registered lints.",null,null],[8,"IntoEarlyLint","","",null,null],[10,"into_early_lint","","",128,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"earlylint"}}],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint attributes. Writing this as an iterator is an enormous mess.",null,null],[5,"check_ast_crate","","",null,null],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to HIR.",null,null],[12,"sess","","Type context we're checking in.",129,null],[12,"krate","","The crate being checked.",129,null],[8,"LintContext","","",null,null],[10,"sess","","",130,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[10,"lints","","",130,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"mut_lints","","",130,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"level_stack","","",130,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"enter_attrs","","",130,null],[10,"exit_attrs","","",130,null],[11,"current_level","","Get the level of `lint` at the current position of the lint traversal.",130,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"level"}}],[11,"level_src","","",130,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"option"}}],[11,"lookup_and_emit","","",130,null],[11,"lookup","","",130,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",130,null],[11,"early_lint","","",130,null],[11,"struct_span_lint","","",130,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",130,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",130,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",130,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the current lint context, call the provided function, then reset the lints in effect to their previous state.",130,null],[3,"EarlyLint","","When you call `add_lint` on the session, you wind up storing one of these, which records a \"potential lint\" at a particular point.",null,null],[12,"id","","what lint is this? (e.g., `dead_code`)",131,null],[12,"diagnostic","","the main message",131,null],[0,"middle","rustc_typeck","",null,null],[0,"astconv_util","rustc_typeck::middle","This module contains a simple utility routine used by both `typeck` and `const_eval`. Almost certainly this could (and should) be refactored out of existence.",null,null],[0,"expr_use_visitor","","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_typeck::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",132,null],[10,"matched_pat","","",132,null],[10,"consume_pat","","",132,null],[10,"borrow","","",132,null],[10,"decl_without_init","","",132,null],[10,"mutate","","",132,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",133,null],[13,"AddrOf","","",133,null],[13,"AutoRef","","",133,null],[13,"AutoUnsafe","","",133,null],[13,"RefBinding","","",133,null],[13,"OverloadedOperator","","",133,null],[13,"ClosureInvocation","","",133,null],[13,"ForLoop","","",133,null],[13,"MatchDiscriminant","","",133,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",134,null],[13,"Move","","",134,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",135,null],[13,"PatBindingMove","","",135,null],[13,"CaptureMove","","",135,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",136,null],[13,"BorrowingMatch","","",136,null],[13,"CopyingMatch","","",136,null],[13,"MovingMatch","","",136,null],[4,"MutateMode","","",null,null],[13,"Init","","",137,null],[13,"JustWrite","","",137,null],[13,"WriteAndRead","","",137,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_typeck::middle","",null,null],[4,"ConstVal","rustc_typeck::middle::const_val","",null,null],[13,"Float","","",138,null],[13,"Integral","","",138,null],[13,"Str","","",138,null],[13,"ByteStr","","",138,null],[13,"Bool","","",138,null],[13,"Struct","","",138,null],[13,"Tuple","","",138,null],[13,"Function","","",138,null],[13,"Array","","",138,null],[13,"Repeat","","",138,null],[13,"Char","","",138,null],[13,"Dummy","","A value that only occurs in case `eval_const_expr` reported an error. You should never handle this case. Its sole purpose is to allow more errors to be reported instead of causing a fatal error.",138,null],[0,"cstore","rustc_typeck::middle","",null,null],[3,"LinkMeta","rustc_typeck::middle::cstore","",null,null],[12,"crate_name","","",139,null],[12,"crate_hash","","",139,null],[3,"CrateSource","","",null,null],[12,"dylib","","",140,null],[12,"rlib","","",140,null],[12,"rmeta","","",140,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",141,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",141,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",141,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",141,null],[4,"LibSource","","",null,null],[13,"Some","","",142,null],[13,"MetadataOnly","","",142,null],[13,"None","","",142,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",143,null],[13,"RequireStatic","","",143,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",144,null],[13,"NativeFramework","","",144,null],[13,"NativeUnknown","","",144,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",145,null],[12,"name","","",145,null],[12,"cfg","","",145,null],[12,"foreign_items","","",145,null],[4,"LoadedMacro","","",null,null],[13,"MacroRules","","",146,null],[13,"ProcMacro","","",146,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",147,null],[12,"span","","span of the extern crate that caused this to be loaded",147,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",147,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",147,null],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"describe_def","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"def_span","","",148,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[10,"stability","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"deprecation","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"visibility","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"closure_kind","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[10,"closure_ty","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"closurety"}}],[10,"item_variances","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_type","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"tys"}}],[10,"visible_parent_map","","",148,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[10,"item_predicates","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[10,"item_super_predicates","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[10,"item_generics","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"item_attrs","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"trait_def","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"traitdef"}}],[10,"adt_def","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"adtdef"}}],[10,"fn_arg_names","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"inherent_implementations_for_type","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"implementations_of_trait","","",148,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[10,"associated_item_def_ids","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"impl_trait_ref","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"impl_polarity","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[10,"custom_coerce_unsized_kind","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"impl_parent","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"trait_of_item","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"associated_item","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"is_const_fn","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_defaulted_trait","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_default_impl","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_foreign_item","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_dllimport_foreign_item","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_statically_included_foreign_item","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"dylib_dependency_formats","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"dep_kind","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"export_macros","","",148,null],[10,"lang_items","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"missing_lang_items","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_staged_api","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_allocator","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_panic_runtime","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_compiler_builtins","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"panic_strategy","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[10,"extern_crate","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"crate_name","","The name of the crate as it is referred to in source code of the current crate.",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"original_crate_name","","The name of the crate as it is stored in the crate's metadata.",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"crate_disambiguator","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"plugin_registrar_fn","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"derive_registrar_fn","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"native_libraries","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"exported_symbols","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_no_builtins","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"retrace_path","","",148,null],[10,"def_key","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"struct_field_names","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"load_macro","","",148,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"maybe_get_item_body","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"item_body_nested_bodies","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[10,"const_is_rvalue_promotable_to_static","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"get_item_mir","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mir"}}],[10,"is_item_mir_available","","",148,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"can_have_local_instance","","Take a look if we need to inline or monomorphize this. If so, we will emit code for this item in the local crate, and thus create a translation item for it.",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"crates","","",148,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_libraries","","",148,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_link_args","","",148,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"metadata_filename","","",148,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"metadata_section_name","","",148,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[10,"used_crates","","",148,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[10,"used_crate_source","","",148,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[10,"extern_mod_stmt_cnum","","",148,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"encode_metadata","","",148,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[10,"metadata_encoding_version","","",148,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",149,null],[10,"postprocess","","",149,null],[0,"dataflow","rustc_typeck::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_typeck::middle::dataflow","",null,null],[13,"Entry","","",150,null],[13,"Exit","","",150,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",151,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",153,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",153,null],[0,"dead","rustc_typeck::middle","",null,null],[5,"check_crate","rustc_typeck::middle::dead","",null,null],[0,"dependency_format","rustc_typeck::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_typeck::middle::dependency_format","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",154,null],[13,"IncludedFromDylib","","",154,null],[13,"Static","","",154,null],[13,"Dynamic","","",154,null],[5,"calculate","","",null,null],[0,"effect","rustc_typeck::middle","Enforces the Rust effect system. Currently there is just one effect, `unsafe`.",null,null],[5,"check_crate","rustc_typeck::middle::effect","",null,null],[0,"entry","rustc_typeck::middle","",null,null],[5,"find_entry_point","rustc_typeck::middle::entry","",null,null],[0,"free_region","rustc_typeck::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_typeck::middle::free_region","",null,null],[0,"intrinsicck","rustc_typeck::middle","",null,null],[5,"check_crate","rustc_typeck::middle::intrinsicck","",null,null],[0,"lang_items","rustc_typeck::middle","",null,null],[4,"LangItem","rustc_typeck::middle::lang_items","",null,null],[13,"CharImplItem","","",155,null],[13,"StrImplItem","","",155,null],[13,"SliceImplItem","","",155,null],[13,"ConstPtrImplItem","","",155,null],[13,"MutPtrImplItem","","",155,null],[13,"I8ImplItem","","",155,null],[13,"I16ImplItem","","",155,null],[13,"I32ImplItem","","",155,null],[13,"I64ImplItem","","",155,null],[13,"I128ImplItem","","",155,null],[13,"IsizeImplItem","","",155,null],[13,"U8ImplItem","","",155,null],[13,"U16ImplItem","","",155,null],[13,"U32ImplItem","","",155,null],[13,"U64ImplItem","","",155,null],[13,"U128ImplItem","","",155,null],[13,"UsizeImplItem","","",155,null],[13,"F32ImplItem","","",155,null],[13,"F64ImplItem","","",155,null],[13,"SendTraitLangItem","","",155,null],[13,"SizedTraitLangItem","","",155,null],[13,"UnsizeTraitLangItem","","",155,null],[13,"CopyTraitLangItem","","",155,null],[13,"SyncTraitLangItem","","",155,null],[13,"DropTraitLangItem","","",155,null],[13,"CoerceUnsizedTraitLangItem","","",155,null],[13,"AddTraitLangItem","","",155,null],[13,"SubTraitLangItem","","",155,null],[13,"MulTraitLangItem","","",155,null],[13,"DivTraitLangItem","","",155,null],[13,"RemTraitLangItem","","",155,null],[13,"NegTraitLangItem","","",155,null],[13,"NotTraitLangItem","","",155,null],[13,"BitXorTraitLangItem","","",155,null],[13,"BitAndTraitLangItem","","",155,null],[13,"BitOrTraitLangItem","","",155,null],[13,"ShlTraitLangItem","","",155,null],[13,"ShrTraitLangItem","","",155,null],[13,"AddAssignTraitLangItem","","",155,null],[13,"SubAssignTraitLangItem","","",155,null],[13,"MulAssignTraitLangItem","","",155,null],[13,"DivAssignTraitLangItem","","",155,null],[13,"RemAssignTraitLangItem","","",155,null],[13,"BitXorAssignTraitLangItem","","",155,null],[13,"BitAndAssignTraitLangItem","","",155,null],[13,"BitOrAssignTraitLangItem","","",155,null],[13,"ShlAssignTraitLangItem","","",155,null],[13,"ShrAssignTraitLangItem","","",155,null],[13,"IndexTraitLangItem","","",155,null],[13,"IndexMutTraitLangItem","","",155,null],[13,"UnsafeCellTypeLangItem","","",155,null],[13,"DerefTraitLangItem","","",155,null],[13,"DerefMutTraitLangItem","","",155,null],[13,"FnTraitLangItem","","",155,null],[13,"FnMutTraitLangItem","","",155,null],[13,"FnOnceTraitLangItem","","",155,null],[13,"EqTraitLangItem","","",155,null],[13,"OrdTraitLangItem","","",155,null],[13,"StrEqFnLangItem","","",155,null],[13,"PanicFnLangItem","","",155,null],[13,"PanicBoundsCheckFnLangItem","","",155,null],[13,"PanicFmtLangItem","","",155,null],[13,"ExchangeMallocFnLangItem","","",155,null],[13,"BoxFreeFnLangItem","","",155,null],[13,"StrDupUniqFnLangItem","","",155,null],[13,"StartFnLangItem","","",155,null],[13,"EhPersonalityLangItem","","",155,null],[13,"EhUnwindResumeLangItem","","",155,null],[13,"MSVCTryFilterLangItem","","",155,null],[13,"OwnedBoxLangItem","","",155,null],[13,"PhantomDataItem","","",155,null],[13,"CovariantTypeItem","","",155,null],[13,"ContravariantTypeItem","","",155,null],[13,"InvariantTypeItem","","",155,null],[13,"CovariantLifetimeItem","","",155,null],[13,"ContravariantLifetimeItem","","",155,null],[13,"InvariantLifetimeItem","","",155,null],[13,"NoCopyItem","","",155,null],[13,"NonZeroItem","","",155,null],[13,"DebugTraitLangItem","","",155,null],[3,"LanguageItems","","",null,null],[12,"items","","",156,null],[12,"missing","","",156,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_typeck::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc_typeck::middle::liveness","",null,null],[0,"mem_categorization","rustc_typeck::middle","Categorization",null,null],[4,"Categorization","rustc_typeck::middle::mem_categorization","",null,null],[13,"Rvalue","","",157,null],[13,"StaticItem","","",157,null],[13,"Upvar","","",157,null],[13,"Local","","",157,null],[13,"Deref","","",157,null],[13,"Interior","","",157,null],[13,"Downcast","","",157,null],[3,"Upvar","","",null,null],[12,"id","","",158,null],[12,"kind","","",158,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",159,null],[13,"BorrowedPtr","","`&T`",159,null],[13,"UnsafePtr","","`*T`",159,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",159,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",160,null],[13,"InteriorElement","","",160,null],[4,"FieldName","","",null,null],[13,"NamedField","","",161,null],[13,"PositionalField","","",161,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",162,null],[13,"Pattern","","",162,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",163,null],[13,"OtherElement","","",163,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",164,null],[13,"McDeclared","","",164,null],[13,"McInherited","","",164,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",165,null],[13,"NoteUpvarRef","","",165,null],[13,"NoteNone","","",165,null],[3,"cmt_","","",null,null],[12,"id","","",166,null],[12,"span","","",166,null],[12,"cat","","",166,null],[12,"mutbl","","",166,null],[12,"ty","","",166,null],[12,"note","","",166,null],[6,"cmt","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",167,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",167,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",168,null],[3,"MemCategorizationOptions","","",null,null],[12,"during_closure_kind_inference","","",169,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",170,null],[13,"NonAliasable","","",170,null],[13,"ImmutableUnique","","",170,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",171,null],[13,"AliasableClosure","","",171,null],[13,"AliasableOther","","",171,null],[13,"UnaliasableImmutable","","",171,null],[13,"AliasableStatic","","",171,null],[13,"AliasableStaticMut","","",171,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_typeck::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_typeck::middle::privacy","",null,null],[13,"Reachable","","",172,null],[13,"Exported","","",172,null],[13,"Public","","",172,null],[3,"AccessLevels","","",null,null],[12,"map","","",173,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[0,"reachable","rustc_typeck::middle","",null,null],[5,"find_reachable","rustc_typeck::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_typeck::middle","This file actually contains two passes related to regions.  The first pass builds up the `scope_map`, which describes the parent links in the region hierarchy.  The second pass infers which types must be region parameterized.",null,null],[3,"CodeExtent","rustc_typeck::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling instead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be used to bound the lifetime/region for values.",null,null],[13,"Misc","","",174,null],[13,"CallSiteScope","","",174,null],[12,"fn_id","rustc_typeck::middle::region::CodeExtentData","",174,null],[12,"body_id","","",174,null],[13,"ParameterScope","rustc_typeck::middle::region","",174,null],[12,"fn_id","rustc_typeck::middle::region::CodeExtentData","",174,null],[12,"body_id","","",174,null],[13,"DestructionScope","rustc_typeck::middle::region","",174,null],[13,"Remainder","","",174,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",175,null],[12,"body_id","","",175,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",176,null],[12,"first_statement_index","","",176,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[0,"recursion_limit","rustc_typeck::middle","",null,null],[5,"update_limits","rustc_typeck::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_typeck::middle","Name resolution for lifetimes.",null,null],[4,"DefRegion","rustc_typeck::middle::resolve_lifetime","",null,null],[13,"DefStaticRegion","","",177,null],[13,"DefEarlyBoundRegion","","",177,null],[13,"DefLateBoundRegion","","",177,null],[13,"DefFreeRegion","","",177,null],[3,"NamedRegionMap","","",null,null],[12,"defs","","",178,null],[12,"late_bound","","",178,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[0,"stability","rustc_typeck::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_typeck::middle::stability","",null,null],[13,"Unstable","","",179,null],[13,"Stable","","",179,null],[3,"DeprecationEntry","","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",180,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,null],[0,"weak_lang_items","rustc_typeck::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_typeck::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"session","rustc_typeck","",null,null],[0,"config","rustc_typeck::session","Contains infrastructure for configuring the compiler, including parsing command line options.",null,null],[3,"Config","rustc_typeck::session::config","",null,null],[12,"target","","",181,null],[12,"int_type","","",181,null],[12,"uint_type","","",181,null],[4,"OptLevel","","",null,null],[13,"No","","",182,null],[13,"Less","","",182,null],[13,"Default","","",182,null],[13,"Aggressive","","",182,null],[13,"Size","","",182,null],[13,"SizeMin","","",182,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",183,null],[13,"LimitedDebugInfo","","",183,null],[13,"FullDebugInfo","","",183,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",184,null],[13,"Assembly","","",184,null],[13,"LlvmAssembly","","",184,null],[13,"Metadata","","",184,null],[13,"Object","","",184,null],[13,"Exe","","",184,null],[13,"DepInfo","","",184,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",185,null],[13,"Json","","",185,null],[3,"OutputTypes","","",null,null],[3,"Externs","","",null,null],[3,"Options","","",null,null],[12,"crate_types","","",186,null],[12,"optimize","","",186,null],[12,"debug_assertions","","",186,null],[12,"debuginfo","","",186,null],[12,"lint_opts","","",186,null],[12,"lint_cap","","",186,null],[12,"describe_lints","","",186,null],[12,"output_types","","",186,null],[12,"search_paths","","",186,null],[12,"libs","","",186,null],[12,"maybe_sysroot","","",186,null],[12,"target_triple","","",186,null],[12,"test","","",186,null],[12,"error_format","","",186,null],[12,"incremental","","",186,null],[12,"debugging_opts","","",186,null],[12,"prints","","",186,null],[12,"cg","","",186,null],[12,"externs","","",186,null],[12,"crate_name","","",186,null],[12,"alt_std_name","","",186,null],[12,"unstable_features","","",186,null],[12,"actually_rustdoc","","",186,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",187,null],[13,"Sysroot","","",187,null],[13,"CrateName","","",187,null],[13,"Cfg","","",187,null],[13,"TargetList","","",187,null],[13,"TargetCPUs","","",187,null],[13,"TargetFeatures","","",187,null],[13,"RelocationModels","","",187,null],[13,"CodeModels","","",187,null],[13,"TargetSpec","","",187,null],[4,"Input","","",null,null],[13,"File","","Load source from file",188,null],[13,"Str","","",188,null],[12,"name","rustc_typeck::session::config::Input","String that is shown in place of a filename",188,null],[12,"input","","Anonymous source string",188,null],[3,"OutputFilenames","rustc_typeck::session::config","",null,null],[12,"out_directory","","",189,null],[12,"out_filestem","","",189,null],[12,"single_output_file","","",189,null],[12,"extra","","",189,null],[12,"outputs","","",189,null],[17,"NUMBERED_CODEGEN_UNIT_MARKER","","Codegen unit names generated by the numbered naming scheme will contain this marker right before the index of the codegen unit.",null,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[4,"EntryFnType","","",null,null],[13,"EntryMain","","",190,null],[13,"EntryStart","","",190,null],[13,"EntryNone","","",190,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",191,null],[13,"CrateTypeDylib","","",191,null],[13,"CrateTypeRlib","","",191,null],[13,"CrateTypeStaticlib","","",191,null],[13,"CrateTypeCdylib","","",191,null],[13,"CrateTypeProcMacro","","",191,null],[4,"Passes","","",null,null],[13,"SomePasses","","",192,null],[13,"AllPasses","","",192,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",193,null],[12,"linker","","",193,null],[12,"link_arg","","",193,null],[12,"link_args","","",193,null],[12,"link_dead_code","","",193,null],[12,"lto","","",193,null],[12,"target_cpu","","",193,null],[12,"target_feature","","",193,null],[12,"passes","","",193,null],[12,"llvm_args","","",193,null],[12,"save_temps","","",193,null],[12,"rpath","","",193,null],[12,"no_prepopulate_passes","","",193,null],[12,"no_vectorize_loops","","",193,null],[12,"no_vectorize_slp","","",193,null],[12,"soft_float","","",193,null],[12,"prefer_dynamic","","",193,null],[12,"no_integrated_as","","",193,null],[12,"no_redzone","","",193,null],[12,"relocation_model","","",193,null],[12,"code_model","","",193,null],[12,"metadata","","",193,null],[12,"extra_filename","","",193,null],[12,"codegen_units","","",193,null],[12,"remark","","",193,null],[12,"no_stack_check","","",193,null],[12,"debuginfo","","",193,null],[12,"opt_level","","",193,null],[12,"debug_assertions","","",193,null],[12,"inline_threshold","","",193,null],[12,"panic","","",193,null],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[6,"CodegenSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",194,null],[12,"time_passes","","",194,null],[12,"count_llvm_insns","","",194,null],[12,"time_llvm_passes","","",194,null],[12,"input_stats","","",194,null],[12,"trans_stats","","",194,null],[12,"asm_comments","","",194,null],[12,"no_verify","","",194,null],[12,"borrowck_stats","","",194,null],[12,"no_landing_pads","","",194,null],[12,"debug_llvm","","",194,null],[12,"meta_stats","","",194,null],[12,"print_link_args","","",194,null],[12,"print_llvm_passes","","",194,null],[12,"ast_json","","",194,null],[12,"ast_json_noexpand","","",194,null],[12,"ls","","",194,null],[12,"save_analysis","","",194,null],[12,"save_analysis_csv","","",194,null],[12,"save_analysis_api","","",194,null],[12,"print_move_fragments","","",194,null],[12,"flowgraph_print_loans","","",194,null],[12,"flowgraph_print_moves","","",194,null],[12,"flowgraph_print_assigns","","",194,null],[12,"flowgraph_print_all","","",194,null],[12,"print_region_graph","","",194,null],[12,"parse_only","","",194,null],[12,"no_trans","","",194,null],[12,"treat_err_as_bug","","",194,null],[12,"continue_parse_after_error","","",194,null],[12,"incremental","","",194,null],[12,"incremental_info","","",194,null],[12,"incremental_dump_hash","","",194,null],[12,"dump_dep_graph","","",194,null],[12,"query_dep_graph","","",194,null],[12,"no_analysis","","",194,null],[12,"extra_plugins","","",194,null],[12,"unstable_options","","",194,null],[12,"force_overflow_checks","","",194,null],[12,"trace_macros","","",194,null],[12,"debug_macros","","",194,null],[12,"enable_nonzeroing_move_hints","","",194,null],[12,"keep_hygiene_data","","",194,null],[12,"keep_ast","","",194,null],[12,"show_span","","",194,null],[12,"print_type_sizes","","",194,null],[12,"print_trans_items","","",194,null],[12,"mir_opt_level","","",194,null],[12,"dump_mir","","",194,null],[12,"dump_mir_dir","","",194,null],[12,"perf_stats","","",194,null],[12,"hir_stats","","",194,null],[12,"mir_stats","","",194,null],[12,"always_encode_mir","","",194,null],[12,"osx_rpath_install_name","","",194,null],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[6,"DebuggingSetter","","",null,null],[17,"DB_OPTIONS","","",null,null],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"hashset"}}],[5,"build_configuration","","",null,{"inputs":[{"name":"session"},{"name":"hashset"}],"output":{"name":"hashset"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[4,"OptionStability","","",null,null],[13,"Stable","","",195,null],[13,"UnstableButNotReally","","",195,null],[13,"Unstable","","",195,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",196,null],[12,"stability","","",196,null],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"hashset"}}],[5,"build_session_options_and_crate_config","","",null,null],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc_typeck::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[0,"filesearch","rustc_typeck::session","",null,null],[4,"FileMatch","rustc_typeck::session::filesearch","",null,null],[13,"FileMatches","","",197,null],[13,"FileDoesntMatch","","",197,null],[3,"FileSearch","","",null,null],[12,"sysroot","","",198,null],[12,"search_paths","","",198,null],[12,"triple","","",198,null],[12,"kind","","",198,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[0,"search_paths","rustc_typeck::session","",null,null],[3,"SearchPaths","rustc_typeck::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",199,null],[13,"Crate","","",199,null],[13,"Dependency","","",199,null],[13,"Framework","","",199,null],[13,"ExternFlag","","",199,null],[13,"All","","",199,null],[3,"Session","rustc_typeck::session","",null,null],[12,"dep_graph","","",200,null],[12,"target","","",200,null],[12,"host","","",200,null],[12,"opts","","",200,null],[12,"cstore","","",200,null],[12,"parse_sess","","",200,null],[12,"entry_fn","","",200,null],[12,"entry_type","","",200,null],[12,"plugin_registrar_fn","","",200,null],[12,"derive_registrar_fn","","",200,null],[12,"default_sysroot","","",200,null],[12,"local_crate_source_file","","",200,null],[12,"working_dir","","",200,null],[12,"lint_store","","",200,null],[12,"lints","","",200,null],[12,"one_time_diagnostics","","Set of (LintId, span, message) tuples tracking lint (sub)diagnostics that have been set once, but should not be set again, in order to avoid redundantly verbose output (Issue #24690).",200,null],[12,"plugin_llvm_passes","","",200,null],[12,"mir_passes","","",200,null],[12,"plugin_attributes","","",200,null],[12,"crate_types","","",200,null],[12,"dependency_formats","","",200,null],[12,"crate_disambiguator","","",200,null],[12,"features","","",200,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization.",200,null],[12,"type_length_limit","","The maximum length of types during monomorphization.",200,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime dependency if it didn't already find one, and this tracks what was injected.",200,null],[12,"injected_panic_runtime","","",200,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of the localized span for the macro body) to the macro name and defintion span in the source crate.",200,null],[12,"perf_stats","","Some measurements that are being gathered during compilation.",200,null],[12,"code_stats","","Data about code being compiled, gathered during compilation.",200,null],[3,"PerfStats","","",null,null],[12,"svh_time","","",201,null],[12,"incr_comp_hashes_time","","",201,null],[12,"incr_comp_hashes_count","","",201,null],[12,"incr_comp_bytes_hashed","","",201,null],[12,"symbol_hash_time","","",201,null],[12,"decode_def_path_tables_time","","",201,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"},{"name":"option"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[4,"IncrCompSession","","Holds data on the current incremental compilation session, if there is one.",null,null],[13,"NotInitialized","","",202,null],[13,"Active","","",202,null],[12,"session_directory","rustc_typeck::session::IncrCompSession","",202,null],[12,"lock_file","","",202,null],[13,"Finalized","rustc_typeck::session","",202,null],[12,"session_directory","rustc_typeck::session::IncrCompSession","",202,null],[13,"InvalidBecauseOfErrors","rustc_typeck::session","",202,null],[12,"session_directory","rustc_typeck::session::IncrCompSession","",202,null],[5,"early_error","rustc_typeck::session","",null,null],[5,"early_warn","","",null,null],[6,"CompileResult","","",null,null],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[3,"FieldInfo","","",null,null],[12,"name","","",203,null],[12,"offset","","",203,null],[12,"size","","",203,null],[12,"align","","",203,null],[4,"SizeKind","","",null,null],[13,"Exact","","",204,null],[13,"Min","","",204,null],[3,"VariantInfo","","",null,null],[12,"name","","",205,null],[12,"kind","","",205,null],[12,"size","","",205,null],[12,"align","","",205,null],[12,"fields","","",205,null],[4,"DataTypeKind","","",null,null],[13,"Struct","","",206,null],[13,"Union","","",206,null],[13,"Enum","","",206,null],[13,"Closure","","",206,null],[3,"CodeStats","","",null,null],[3,"TypeSizeInfo","","",null,null],[12,"kind","","",207,null],[12,"type_description","","",207,null],[12,"align","","",207,null],[12,"overall_size","","",207,null],[12,"opt_discr_size","","",207,null],[12,"variants","","",207,null],[0,"util","rustc_typeck","",null,null],[0,"common","rustc_typeck::util","",null,null],[17,"FN_OUTPUT_NAME","rustc_typeck::util::common","",null,null],[3,"ErrorReported","","",null,null],[5,"time_depth","","Read the current depth of `time()` calls. This is used to encourage indentation across threads.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"set_time_depth","","Set the current depth of `time()` calls. The idea is to call `set_time_depth()` with the result from `time_depth()` in the parent thread.",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"duration_to_secs_str","","",null,{"inputs":[{"name":"duration"}],"output":{"name":"string"}}],[5,"to_readable_str","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"record_time","","",null,{"inputs":[{"name":"cell"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[3,"Indenter","","",null,null],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[8,"MemoizationMap","","",null,null],[16,"Key","","",208,null],[16,"Value","","",208,null],[10,"memoize","","If `key` is present in the map, return the valuee, otherwise invoke `op` and store the value in the map.",208,null],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[0,"ppaux","rustc_typeck::util","",null,null],[5,"verbose","rustc_typeck::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"parameterized","","",null,null],[0,"nodemap","rustc_typeck::util","An efficient hash map for node IDs",null,null],[6,"NodeMap","rustc_typeck::util::nodemap","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[6,"FxHashSet","","",null,null],[6,"FxHashMap","","",null,null],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[0,"num","rustc_typeck::util","",null,null],[8,"ToPrimitive","rustc_typeck::util::num","",null,null],[10,"to_i8","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i16","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i32","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u8","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u16","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u32","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"fs","rustc_typeck::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc_typeck::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[4,"LinkOrCopy","","",null,null],[13,"Link","","",210,null],[13,"Copy","","",210,null],[5,"link_or_copy","","Copy `p` into `q`, preferring to use hard-linking if possible. If `q` already exists, it is removed first. The result indicates which of the two operations has been performed.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"create_dir_racy","","",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[3,"TypeAndSubsts","rustc_typeck","",null,null],[12,"substs","","",211,null],[12,"ty","","",211,null],[3,"CrateCtxt","","",null,null],[12,"all_traits","","A vector of every trait accessible in the whole crate (i.e. including those from subcrates). This is used only for error reporting, and so is lazily initialised and generally shouldn't taint the common path (hence the RefCell).",212,null],[12,"stack","","This stack is used to identify cycles in the user's source. Note that these cycles can cross multiple items.",212,null],[12,"tcx","","",212,null],[12,"deferred_obligations","","Obligations which will have to be checked at the end of type-checking, after all functions have been inferred. The key is the NodeId of the item the obligations were from.",212,null],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"result"}}],[0,"diagnostics","","",null,null],[0,"check","","",null,null],[3,"Inherited","rustc_typeck::check","closures defined within the function.  For example:",null,null],[3,"UnsafetyState","","",null,null],[12,"def","","",213,null],[12,"unsafety","","",213,null],[12,"unsafe_push_count","","",213,null],[3,"LoopCtxt","","",null,null],[3,"EnclosingLoops","","",null,null],[3,"FnCtxt","","",null,null],[3,"InheritedBuilder","","Helper type of a temporary returned by ccx.inherited(...). Necessary because we can't write the following bound: F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(Inherited<'b, 'gcx, 'tcx>).",null,null],[4,"Expectation","","When type-checking an expression, we propagate downward whatever type hint we are able in the form of an `Expectation`.",null,null],[13,"NoExpectation","","We know nothing about what type this expression should have.",214,null],[13,"ExpectHasType","","This expression should have the type given (or some subtype)",214,null],[13,"ExpectCastableToType","","This expression will be cast to the `Ty`",214,null],[13,"ExpectRvalueLikeUnsized","","This rvalue expression will be wrapped in `&` or `Box` and coerced to `&Ty` or `Box<Ty>`, respectively. `Ty` is `[A]` or `Trait`.",214,null],[5,"compare_impl_method","","Checks that a method from an impl conforms to the signature of the same method as declared in the trait.",null,{"inputs":[{"name":"cratectxt"},{"name":"associateditem"},{"name":"span"},{"name":"nodeid"},{"name":"associateditem"},{"name":"traitref"},{"name":"option"},{"name":"bool"}],"output":null}],[5,"compare_const_impl","","",null,{"inputs":[{"name":"cratectxt"},{"name":"associateditem"},{"name":"span"},{"name":"associateditem"},{"name":"traitref"}],"output":null}],[5,"check_wf_new","","",null,{"inputs":[{"name":"cratectxt"}],"output":{"name":"compileresult"}}],[5,"check_item_types","","",null,{"inputs":[{"name":"cratectxt"}],"output":{"name":"compileresult"}}],[5,"check_item_bodies","","",null,{"inputs":[{"name":"cratectxt"}],"output":{"name":"compileresult"}}],[5,"check_drop_impls","","",null,{"inputs":[{"name":"cratectxt"}],"output":{"name":"compileresult"}}],[5,"check_item_type","","",null,{"inputs":[{"name":"cratectxt"},{"name":"item"}],"output":null}],[5,"check_item_body","","",null,{"inputs":[{"name":"cratectxt"},{"name":"item"}],"output":null}],[5,"check_simd","","",null,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[5,"check_enum_variants","","",null,null],[5,"check_bounds_are_used","","",null,{"inputs":[{"name":"cratectxt"},{"name":"generics"},{"name":"ty"}],"output":null}],[11,"autoderef","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"}],"output":{"name":"autoderef"}}],[11,"try_overloaded_deref","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"},{"name":"ty"},{"name":"lvaluepreference"}],"output":{"name":"option"}}],[0,"dropck","","",null,null],[5,"check_drop_impl","rustc_typeck::check::dropck","check_drop_impl confirms that the Drop implementation identfied by `drop_impl_did` is not any more specialized than the type it is attached to (Issue #8142).",null,{"inputs":[{"name":"cratectxt"},{"name":"defid"}],"output":{"name":"result"}}],[5,"check_safety_of_destructor_if_necessary","","check_safety_of_destructor_if_necessary confirms that the type expression `typ` conforms to the \"Drop Check Rule\" from the Sound Generic Drop (RFC 769).",null,{"inputs":[{"name":"regionctxt"},{"name":"ty"},{"name":"span"},{"name":"codeextent"}],"output":null}],[0,"_match","rustc_typeck::check","",null,null],[11,"check_pat","","",215,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"ty"}],"output":null}],[11,"check_dereferencable","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"check_match","","",215,null],[0,"writeback","","",null,null],[11,"resolve_type_vars_in_body","","",215,{"inputs":[{"name":"self"},{"name":"body"},{"name":"nodeid"}],"output":null}],[0,"regionck","","The region check is a final pass that runs over the AST after we have inferred the type constraints but before we have actually finalized the types.  Its purpose is to embed a variety of region constraints. Inserting these constraints as a separate pass is good because (1) it localizes the code that has to do with region inference and (2) often we cannot know what constraints are needed until the basic types have been inferred.",null,null],[3,"RegionCtxt","rustc_typeck::check::regionck","",null,null],[12,"fcx","","",216,null],[3,"RepeatingScope","","",null,null],[4,"SubjectNode","","",null,null],[13,"Subject","","",217,null],[13,"None","","",217,null],[11,"regionck_expr","rustc_typeck::check","",215,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"regionck_item","","Region checking during the WF phase for items. `wf_tys` are the types from which we should derive implied bounds, if any.",215,null],[11,"regionck_fn","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"body"}],"output":null}],[11,"deref","rustc_typeck::check::regionck","",216,null],[11,"new","","",216,{"inputs":[{"name":"fnctxt"},{"name":"repeatingscope"},{"name":"nodeid"},{"name":"subjectnode"}],"output":{"name":"regionctxt"}}],[11,"resolve_type","","Try to resolve the type for the given node, returning t_err if an error results.  Note that we never care about the details of the error, the same error will be detected and reported in the writeback phase.",216,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"resolve_expr_type_adjusted","","Try to resolve the type for the given node.",216,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"nested_visit_map","","",216,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_fn","","",216,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"bodyid"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_arm","","",216,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_local","","",216,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_expr","","",216,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"mk_subregion_due_to_dereference","","",216,{"inputs":[{"name":"self"},{"name":"span"},{"name":"region"},{"name":"region"}],"output":null}],[11,"type_must_outlive","","Ensures that type is well-formed in `region`, which implies (among other things) that all borrowed data reachable via `ty` outlives `region`.",216,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"ty"},{"name":"region"}],"output":null}],[0,"coercion","rustc_typeck::check","Type Coercion",null,null],[11,"try_coerce","","Attempt to coerce an expression to a type, and return the adjusted type of the expression, if successful. Adjustments are only recorded if the coercion succeeded. The expressions *must not* have any pre-existing adjustments.",215,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[11,"try_find_coercion_lub","","Given some expressions, their known unified type and another expression, tries to unify the types, potentially inserting coercions on any of the provided expressions and returns their LUB (aka \"common supertype\").",215,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"e"},{"name":"ty"},{"name":"expr"},{"name":"ty"}],"output":{"name":"relateresult"}}],[0,"demand","","",null,null],[11,"demand_suptype","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"ty"}],"output":null}],[11,"demand_eqtype","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"ty"}],"output":null}],[11,"demand_eqtype_with_origin","","",215,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"ty"},{"name":"ty"}],"output":null}],[11,"demand_coerce","","",215,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"ty"},{"name":"ty"}],"output":null}],[0,"method","","Method lookup: the secret sauce of Rust. See `README.md`.",null,null],[3,"NoMatchData","rustc_typeck::check::method","",null,null],[12,"static_candidates","","",218,null],[12,"unsatisfied_predicates","","",218,null],[12,"out_of_scope_traits","","",218,null],[12,"mode","","",218,null],[4,"MethodError","","",null,null],[13,"NoMatch","","",219,null],[13,"Ambiguity","","",219,null],[13,"ClosureAmbiguity","","",219,null],[13,"PrivateMatch","","",219,null],[4,"CandidateSource","","",null,null],[13,"ImplSource","","",220,null],[13,"TraitSource","","",220,null],[11,"confirm_method","rustc_typeck::check","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"expr"},{"name":"expr"},{"name":"ty"},{"name":"pick"},{"name":"vec"}],"output":{"name":"methodcallee"}}],[0,"probe","rustc_typeck::check::method","",null,null],[3,"IsSuggestion","rustc_typeck::check::method::probe","Boolean flag used to indicate if this search is for a suggestion or not.  If true, we can allow ambiguity and so forth.",null,null],[12,"0","","",221,null],[3,"Pick","","",null,null],[12,"item","","",222,null],[12,"kind","","",222,null],[12,"import_id","","",222,null],[12,"autoderefs","","",222,null],[12,"autoref","","",222,null],[12,"unsize","","",222,null],[4,"LookingFor","","",null,null],[13,"MethodName","","looking for methods with the given name; this is the normal case",223,null],[13,"ReturnType","","looking for methods that return a given type; this is used to assemble suggestions",223,null],[4,"PickKind","","",null,null],[13,"InherentImplPick","","",224,null],[13,"ExtensionImplPick","","",224,null],[13,"ObjectPick","","",224,null],[13,"TraitPick","","",224,null],[13,"WhereClausePick","","",224,null],[4,"Mode","","",null,null],[13,"MethodCall","","",225,null],[13,"Path","","",225,null],[6,"PickResult","","",null,null],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"pickkind"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"probe_for_return_type","rustc_typeck::check","This is used to offer suggestions to users. It returns methods that could have been called which have the desired return type. Some effort is made to rule out methods that, if called, would result in an error (basically, the same criteria we would use to decide if a method is a plausible fit for ambiguity purposes).",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"mode"},{"name":"ty"},{"name":"ty"},{"name":"nodeid"}],"output":{"name":"vec"}}],[11,"probe_for_name","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"mode"},{"name":"name"},{"name":"issuggestion"},{"name":"ty"},{"name":"nodeid"}],"output":{"name":"pickresult"}}],[11,"report_method_error","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"name"},{"name":"option"},{"name":"methoderror"}],"output":null}],[6,"AllTraitsVec","rustc_typeck::check::method","",null,null],[11,"new","","",218,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"mode"}],"output":{"name":"self"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"candidatesource"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",220,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"ordering"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",220,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"option"}}],[11,"lt","","",220,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"le","","",220,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"gt","","",220,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"ge","","",220,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"method_exists","rustc_typeck::check","Determines whether the type `self_ty` supports a method name `method_name` or not.",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"ty"},{"name":"nodeid"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"lookup_method","","Performs method lookup. If lookup is successful, it will return the callee and store an appropriate adjustment for the self-expr. In some cases it may report an error (e.g., invoking the `drop` method).",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"ty"},{"name":"vec"},{"name":"expr"},{"name":"expr"}],"output":{"name":"result"}}],[11,"lookup_method_in_trait","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"},{"name":"name"},{"name":"defid"},{"name":"ty"},{"name":"option"}],"output":{"name":"option"}}],[11,"lookup_method_in_trait_adjusted","","`lookup_in_trait_adjusted` is used for overloaded operators. It does a very narrow slice of what the normal probe/confirm path does. In particular, it doesn't really do any probing: it simply constructs an obligation for aparticular trait with the given self-type and checks whether that trait is implemented.",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"},{"name":"name"},{"name":"defid"},{"name":"usize"},{"name":"bool"},{"name":"ty"},{"name":"option"}],"output":{"name":"option"}}],[11,"resolve_ufcs","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"ty"},{"name":"nodeid"}],"output":{"name":"result"}}],[11,"associated_item","","Find item with name `item_name` defined in impl/trait `def_id` and return it, or `None`, if no such item was defined there.",215,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"name"}],"output":{"name":"option"}}],[11,"closure_analyze","","",215,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"check_expr_closure","","",215,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"captureclause"},{"name":"fndecl"},{"name":"bodyid"},{"name":"expectation"}],"output":{"name":"ty"}}],[11,"check_call","","",215,null],[11,"check_binop_assign","","Check a `a <op>= b`",215,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"binop"},{"name":"expr"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"check_binop","","Check a potentially overloaded binary operator.",215,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"binop"},{"name":"expr"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"check_user_unop","","",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"option"},{"name":"expr"},{"name":"expr"},{"name":"ty"},{"name":"unop"}],"output":{"name":"ty"}}],[11,"deref","","",226,null],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"expectation"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"unsafetystate"}}],[11,"function","","",213,{"inputs":[{"name":"unsafety"},{"name":"nodeid"}],"output":{"name":"unsafetystate"}}],[11,"recurse","","",213,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"unsafetystate"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"loopctxt"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"enclosingloops"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"fnctxt"}}],[11,"deref","","",215,null],[11,"inherited","rustc_typeck","",212,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"inheritedbuilder"}}],[11,"new","rustc_typeck::check","",226,{"inputs":[{"name":"cratectxt"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"new","","",215,{"inputs":[{"name":"inherited"},{"name":"option"},{"name":"nodeid"}],"output":{"name":"fnctxt"}}],[11,"param_env","","",215,{"inputs":[{"name":"self"}],"output":{"name":"parameterenvironment"}}],[11,"sess","","",215,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"err_count_since_creation","","",215,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cause","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",215,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"obligationcause"}}],[11,"tag","","",215,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"local_ty","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"nodeid"}],"output":{"name":"ty"}}],[11,"write_ty","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"ty"}],"output":null}],[11,"write_substs","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"itemsubsts"}],"output":null}],[11,"write_autoderef_adjustment","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"usize"},{"name":"ty"}],"output":null}],[11,"write_adjustment","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"adjustment"}],"output":null}],[11,"write_nil","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"write_never","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"write_error","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"require_type_meets","","",215,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"},{"name":"obligationcausecode"},{"name":"defid"}],"output":null}],[11,"require_type_is_sized","","",215,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"},{"name":"obligationcausecode"}],"output":null}],[11,"register_bound","","",215,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"defid"},{"name":"obligationcause"}],"output":null}],[11,"register_predicate","","",215,{"inputs":[{"name":"self"},{"name":"predicateobligation"}],"output":null}],[11,"register_predicates","","",215,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"register_infer_ok_obligations","","",215,{"inputs":[{"name":"self"},{"name":"inferok"}],"output":{"name":"t"}}],[11,"to_ty","","",215,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"node_ty","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ty"}}],[11,"item_substs","","",215,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"opt_node_ty_substs","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":null}],[11,"register_region_obligation","","Registers an obligation for checking later, during regionck, that the type `ty` must outlive the region `r`.",215,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"region"},{"name":"obligationcause"}],"output":null}],[11,"register_wf_obligation","","Registers an obligation for checking later, during regionck, that the type `ty` must outlive the region `r`.",215,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"},{"name":"obligationcausecode"}],"output":null}],[11,"register_old_wf_obligation","","",215,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"},{"name":"obligationcausecode"}],"output":null}],[11,"add_wf_bounds","","Registers obligations that all types appearing in `substs` are well-formed.",215,{"inputs":[{"name":"self"},{"name":"substs"},{"name":"expr"}],"output":null}],[11,"add_obligations_for_parameters","","Given a fully substituted set of bounds (`generic_bounds`), and the values with which each type/region parameter was instantiated (`substs`), creates and registers suitable trait/region obligations.",215,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"instantiatedpredicates"}],"output":null}],[11,"field_ty","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"fielddef"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"check_expr_has_type","","",215,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"impl_self_ty","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"defid"}],"output":{"name":"typeandsubsts"}}],[11,"check_struct_path","","",215,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"resolve_ty_and_def_ufcs","","",215,null],[11,"check_decl_initializer","","",215,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"check_decl_local","","",215,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"check_stmt","","",215,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"check_block_no_value","","",215,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"instantiate_value_path","","",215,null],[11,"structurally_resolved_type","","",215,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"}],"output":{"name":"ty"}}],[0,"check_unused","rustc_typeck","",null,null],[5,"check_crate","rustc_typeck::check_unused","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"collect","rustc_typeck","",null,null],[4,"AstConvRequest","rustc_typeck::collect","",null,null],[13,"GetGenerics","","",229,null],[13,"GetItemTypeScheme","","",229,null],[13,"GetTraitDef","","",229,null],[13,"EnsureSuperPredicates","","",229,null],[13,"GetTypeParameterBounds","","",229,null],[4,"SizedByDefault","","",null,null],[13,"Yes","","",230,null],[13,"No","","",230,null],[5,"collect_item_types","","",null,{"inputs":[{"name":"cratectxt"}],"output":null}],[5,"compute_bounds","","Translate the AST's notion of ty param bounds (which are an enum consisting of a newtyped Ty or a region) to ty's notion of ty param bounds, which can either be user-defined traits, or the built-in trait (formerly known as kind): Send.",null,null],[5,"mk_item_substs","","",null,{"inputs":[{"name":"astconv"},{"name":"span"},{"name":"defid"}],"output":{"name":"substs"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"astconvrequest"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"astconvrequest"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"self"},{"name":"astconvrequest"}],"output":{"name":"bool"}}],[0,"coherence","rustc_typeck","",null,null],[5,"check_coherence","rustc_typeck::coherence","",null,{"inputs":[{"name":"cratectxt"}],"output":null}],[0,"variance","rustc_typeck","Module for inferring the variance of type and lifetime parameters. See README.md for details.",null,null],[5,"infer_variance","rustc_typeck::variance","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[17,"DIAGNOSTICS","rustc_typeck","",null,null],[11,"new","rustc_typeck::dep_graph::debug","",231,{"inputs":[{"name":"str"}],"output":{"name":"depnodefilter"}}],[11,"accepts_all","","True if all nodes always pass the filter.",231,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"test","","Tests whether `node` meets the filter, returning true if so.",231,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"sess","rustc_typeck::lint","Get the overall compiler `Session` object.",127,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",127,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",127,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",127,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",127,null],[11,"exit_attrs","","",127,null],[11,"sess","","Get the overall compiler `Session` object.",129,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",129,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",129,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",129,null],[11,"exit_attrs","","",129,null],[11,"partial_cmp","rustc_typeck::dep_graph","",2,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"lt","","",232,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"le","","",232,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"gt","","",232,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"ge","","",232,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"lt","","",233,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"le","","",233,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"gt","","",233,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"ge","","",233,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_typeck::hir","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_typeck::lint","",124,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::middle::cstore","",141,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"partial_cmp","","",144,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::middle::privacy","",172,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::middle::region","",234,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"lt","","",234,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"le","","",234,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"gt","","",234,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ge","","",234,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",174,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"option"}}],[11,"lt","","",174,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"le","","",174,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"gt","","",174,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ge","","",174,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",175,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"option"}}],[11,"lt","","",175,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"le","","",175,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"gt","","",175,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ge","","",175,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",176,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",176,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",176,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",176,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",176,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_typeck::middle::stability","",179,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::session::config","",184,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"partial_cmp","","",191,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::session::search_paths","",199,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"option"}}],[11,"index","rustc_typeck::dep_graph","",235,null],[11,"fmt","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::mem_categorization","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session::config","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::map::definitions","",237,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::dep_graph","",2,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::def","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::def_id","",233,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::intravisit","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::map","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",114,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",115,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",116,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",117,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",118,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::const_val","",138,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::cstore","",141,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",143,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",144,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",145,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::lang_items","",155,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::region","",234,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",175,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",176,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::resolve_lifetime","",177,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::stability","",179,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::session::config","",184,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"drop","rustc_typeck::dep_graph","",238,null],[11,"drop","rustc_typeck::util::common","",239,null],[11,"from","rustc_typeck::session","",206,{"inputs":[{"name":"adtkind"}],"output":{"name":"datatypekind"}}],[11,"default_decode","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_item","rustc_typeck::hir::map","",27,null],[11,"visit_foreign_item","","",27,null],[11,"visit_generics","","",27,null],[11,"visit_trait_item","","",27,null],[11,"visit_impl_item","","",27,null],[11,"visit_pat","","",27,null],[11,"visit_expr","","",27,null],[11,"visit_ty","","",27,null],[11,"visit_lifetime_def","","",27,null],[11,"visit_macro_def","","",27,null],[11,"visit_stmt","","",27,null],[11,"visit_item","rustc_typeck::lint","",129,null],[11,"visit_foreign_item","","",129,null],[11,"visit_pat","","",129,null],[11,"visit_expr","","",129,null],[11,"visit_stmt","","",129,null],[11,"visit_fn","","",129,null],[11,"visit_variant_data","","",129,null],[11,"visit_struct_field","","",129,null],[11,"visit_variant","","",129,null],[11,"visit_ty","","",129,null],[11,"visit_ident","","",129,null],[11,"visit_mod","","",129,null],[11,"visit_local","","",129,null],[11,"visit_block","","",129,null],[11,"visit_arm","","",129,null],[11,"visit_expr_post","","",129,null],[11,"visit_generics","","",129,null],[11,"visit_trait_item","","",129,null],[11,"visit_impl_item","","",129,null],[11,"visit_lifetime","","",129,null],[11,"visit_lifetime_def","","",129,null],[11,"visit_path","","",129,null],[11,"visit_path_list_item","","",129,null],[11,"visit_attribute","","",129,null],[11,"visit_item","rustc_typeck::hir::itemlikevisit","",240,null],[11,"visit_trait_item","","",240,null],[11,"visit_impl_item","","",240,null],[11,"id","rustc_typeck::hir","",70,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"span","","",70,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"id","","",54,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"span","","",54,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","rustc_typeck::hir::def_id","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::lint","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::mem_categorization","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::privacy","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::region","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::dep_graph::debug","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::dep_graph","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::def","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::intravisit","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::map","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::lint","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::expr_use_visitor","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::const_val","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::cstore","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::dataflow","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::dependency_format","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::mem_categorization","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::privacy","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::region","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::resolve_lifetime","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::stability","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session::config","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session::search_paths","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::util::common","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relate","rustc_typeck::hir","",95,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"describe_def","rustc_typeck::middle::cstore","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",246,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"closure_kind","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[11,"closure_ty","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"closurety"}}],[11,"item_variances","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_type","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"tys"}}],[11,"visible_parent_map","","",246,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"item_predicates","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_super_predicates","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_generics","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"trait_def","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"traitdef"}}],[11,"adt_def","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"adtdef"}}],[11,"fn_arg_names","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",246,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"associated_item_def_ids","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"impl_trait_ref","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_polarity","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"custom_coerce_unsized_kind","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_parent","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"is_const_fn","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_defaulted_trait","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"lang_items","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"dep_kind","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",246,null],[11,"is_allocator","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"extern_crate","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_name","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",246,null],[11,"def_key","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",246,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"get_item_mir","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"mir"}}],[11,"is_item_mir_available","","",246,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"can_have_local_instance","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",246,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",246,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",246,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",246,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",246,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",246,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",246,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",246,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",246,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",246,null],[11,"eq","rustc_typeck::lint","",241,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::dep_graph","",2,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::def","",6,{"inputs":[{"name":"self"},{"name":"ctorkind"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::intravisit","",11,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"idrange"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"idrange"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::map","",20,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"disambiguateddefpathdata"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"disambiguateddefpathdata"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"defpath"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"defpath"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"defpathdata"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"defpathdata"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir","",34,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"qpath"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"qpath"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"loopsource"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"bool"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"traitmethod"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"traitmethod"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"usekind"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":{"name":"bool"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":{"name":"bool"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::lint","",124,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::expr_use_visitor","",133,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::const_val","",138,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::cstore","",140,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::dataflow","",153,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::dependency_format","",154,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::lang_items","",155,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::mem_categorization","",157,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"elementkind"}],"output":{"name":"bool"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::privacy","",172,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::region","",234,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ne","","",234,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::resolve_lifetime","",177,{"inputs":[{"name":"self"},{"name":"defregion"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"defregion"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::stability","",179,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::session","",205,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"sizekind"}],"output":{"name":"bool"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"datatypekind"}],"output":{"name":"bool"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"eq","","",243,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::session::config","",182,{"inputs":[{"name":"self"},{"name":"optlevel"}],"output":{"name":"bool"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"debuginfolevel"}],"output":{"name":"bool"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"printrequest"}],"output":{"name":"bool"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"entryfntype"}],"output":{"name":"bool"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"bool"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"optionstability"}],"output":{"name":"bool"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::session::search_paths","",199,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc_typeck::hir","",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"unsafety"}}],[11,"super_visit_with","","",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"writer","rustc_typeck::hir::print","",33,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[11,"boxes","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"comments","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",33,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","rustc_typeck::middle::privacy","",173,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"default","rustc_typeck::session::config","",185,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"default","rustc_typeck::middle::mem_categorization","",169,{"inputs":[],"output":{"name":"memcategorizationoptions"}}],[11,"cmp","rustc_typeck::dep_graph","",2,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"ordering"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"ordering"}}],[11,"cmp","","",233,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::hir","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"ordering"}}],[11,"cmp","","",79,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"ordering"}}],[11,"cmp","","",83,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::lint","",124,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::middle::cstore","",141,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"cmp","","",144,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::middle::privacy","",172,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::middle::region","",234,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"ordering"}}],[11,"cmp","","",174,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"ordering"}}],[11,"cmp","","",175,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"ordering"}}],[11,"cmp","","",176,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::session::config","",184,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"ordering"}}],[11,"cmp","","",191,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::session::search_paths","",199,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"ordering"}}],[11,"next","rustc_typeck::hir::map","",247,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","rustc_typeck::hir::pat_util","",248,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","rustc_typeck::session::search_paths","",249,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_lints","rustc_typeck::lint::builtin","",250,null],[11,"is_fn_like","rustc_typeck::hir","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"nested","rustc_typeck::hir::map","",26,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"nested","rustc_typeck::hir","",51,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"nested","rustc_typeck::middle::dataflow","",251,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",251,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"default_encode","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"nested_visit_map","rustc_typeck::hir::intravisit","",252,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_id","","",252,null],[11,"nested_visit_map","rustc_typeck::lint","Because lints are scoped lexically, we want to walk nested items in the context of the outer item, so enable deep-walking.",127,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_item","","",127,null],[11,"visit_foreign_item","","",127,null],[11,"visit_pat","","",127,null],[11,"visit_expr","","",127,null],[11,"visit_stmt","","",127,null],[11,"visit_fn","","",127,null],[11,"visit_variant_data","","",127,null],[11,"visit_struct_field","","",127,null],[11,"visit_variant","","",127,null],[11,"visit_ty","","",127,null],[11,"visit_name","","",127,null],[11,"visit_mod","","",127,null],[11,"visit_local","","",127,null],[11,"visit_block","","",127,null],[11,"visit_arm","","",127,null],[11,"visit_decl","","",127,null],[11,"visit_generics","","",127,null],[11,"visit_trait_item","","",127,null],[11,"visit_impl_item","","",127,null],[11,"visit_lifetime","","",127,null],[11,"visit_lifetime_def","","",127,null],[11,"visit_path","","",127,null],[11,"visit_attribute","","",127,null],[11,"hash","rustc_typeck::hir::svh","",236,null],[11,"hash","rustc_typeck::lint","",241,null],[11,"hash","rustc_typeck::dep_graph","",2,null],[11,"hash","","",3,null],[11,"hash","rustc_typeck::hir::def","",6,null],[11,"hash","","",7,null],[11,"hash","rustc_typeck::hir::def_id","",232,null],[11,"hash","","",233,null],[11,"hash","","",10,null],[11,"hash","rustc_typeck::hir::map","",20,null],[11,"hash","","",21,null],[11,"hash","","",22,null],[11,"hash","","",23,null],[11,"hash","rustc_typeck::hir","",34,null],[11,"hash","","",35,null],[11,"hash","","",36,null],[11,"hash","","",37,null],[11,"hash","","",38,null],[11,"hash","","",39,null],[11,"hash","","",40,null],[11,"hash","","",41,null],[11,"hash","","",42,null],[11,"hash","","",43,null],[11,"hash","","",44,null],[11,"hash","","",46,null],[11,"hash","","",47,null],[11,"hash","","",48,null],[11,"hash","","",49,null],[11,"hash","","",50,null],[11,"hash","","",52,null],[11,"hash","","",53,null],[11,"hash","","",54,null],[11,"hash","","",55,null],[11,"hash","","",56,null],[11,"hash","","",57,null],[11,"hash","","",58,null],[11,"hash","","",59,null],[11,"hash","","",60,null],[11,"hash","","",61,null],[11,"hash","","",62,null],[11,"hash","","",63,null],[11,"hash","","",64,null],[11,"hash","","",65,null],[11,"hash","","",66,null],[11,"hash","","",67,null],[11,"hash","","",68,null],[11,"hash","","",69,null],[11,"hash","","",70,null],[11,"hash","","",71,null],[11,"hash","","",72,null],[11,"hash","","",73,null],[11,"hash","","",74,null],[11,"hash","","",75,null],[11,"hash","","",76,null],[11,"hash","","",77,null],[11,"hash","","",78,null],[11,"hash","","",79,null],[11,"hash","","",80,null],[11,"hash","","",81,null],[11,"hash","","",82,null],[11,"hash","","",83,null],[11,"hash","","",84,null],[11,"hash","","",85,null],[11,"hash","","",86,null],[11,"hash","","",87,null],[11,"hash","","",88,null],[11,"hash","","",89,null],[11,"hash","","",90,null],[11,"hash","","",91,null],[11,"hash","","",92,null],[11,"hash","","",93,null],[11,"hash","","",94,null],[11,"hash","","",95,null],[11,"hash","","",96,null],[11,"hash","","",97,null],[11,"hash","","",98,null],[11,"hash","","",99,null],[11,"hash","","",100,null],[11,"hash","","",101,null],[11,"hash","","",102,null],[11,"hash","","",103,null],[11,"hash","","",104,null],[11,"hash","","",105,null],[11,"hash","","",106,null],[11,"hash","","",107,null],[11,"hash","","",108,null],[11,"hash","","",109,null],[11,"hash","","",110,null],[11,"hash","","",111,null],[11,"hash","","",112,null],[11,"hash","","",113,null],[11,"hash","","",114,null],[11,"hash","","",115,null],[11,"hash","","",116,null],[11,"hash","","",117,null],[11,"hash","rustc_typeck::lint","",124,null],[11,"hash","rustc_typeck::middle::const_val","",138,null],[11,"hash","rustc_typeck::middle::cstore","",144,null],[11,"hash","","",145,null],[11,"hash","rustc_typeck::middle::lang_items","",155,null],[11,"hash","rustc_typeck::middle::mem_categorization","",159,null],[11,"hash","","",160,null],[11,"hash","","",161,null],[11,"hash","","",162,null],[11,"hash","","",163,null],[11,"hash","","",164,null],[11,"hash","rustc_typeck::middle::region","",234,null],[11,"hash","","",174,null],[11,"hash","","",175,null],[11,"hash","","",176,null],[11,"hash","rustc_typeck::middle::resolve_lifetime","",177,null],[11,"hash","rustc_typeck::middle::stability","",179,null],[11,"hash","rustc_typeck::session","",205,null],[11,"hash","","",204,null],[11,"hash","","",203,null],[11,"hash","","",206,null],[11,"hash","","",207,null],[11,"hash","rustc_typeck::session::config","",182,null],[11,"hash","","",183,null],[11,"hash","","",184,null],[11,"hash","","",253,null],[11,"hash","","",254,null],[11,"hash","","",191,null],[11,"hash","","",192,null],[11,"hash","rustc_typeck::session::search_paths","",199,null],[11,"encode","rustc_typeck::hir::map::definitions","",237,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::dep_graph","",2,{"inputs":[{"name":"self"},{"name":"__sd"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::def","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::def_id","",233,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::intravisit","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::map","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",102,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",103,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",104,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",106,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",107,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",108,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",109,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",110,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",111,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",112,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",113,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",114,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",115,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",116,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",117,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",118,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::const_val","",138,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::cstore","",141,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",143,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",144,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",145,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::lang_items","",155,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::region","",234,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",175,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",176,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::resolve_lifetime","",177,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::stability","",179,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::session::config","",184,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"usize"}],"output":{"name":"cratenum"}}],[11,"index","","",232,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","rustc_typeck::dep_graph","",2,{"inputs":[{"name":"self"}],"output":{"name":"depnode"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"workproductid"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"depgraph"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"workproduct"}}],[11,"clone","rustc_typeck::hir::def","",6,{"inputs":[{"name":"self"}],"output":{"name":"ctorkind"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"pathresolution"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"export"}}],[11,"clone","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"defindex"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"clone","rustc_typeck::hir::intravisit","",11,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"idrange"}}],[11,"clone","rustc_typeck::hir::map::blocks","",256,{"inputs":[{"name":"self"}],"output":{"name":"fnlikenode"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"clone","rustc_typeck::hir::map::definitions","",237,{"inputs":[{"name":"self"}],"output":{"name":"defpathtable"}}],[11,"clone","rustc_typeck::hir::map","",257,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"defkey"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"disambiguateddefpathdata"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"defpath"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"defpathdata"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"clone","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"}],"output":{"name":"svh"}}],[11,"clone","rustc_typeck::hir","",34,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"macrodef"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"binop_"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stmt_"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"decl_"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"unsafesource"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"expr_"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"qpath"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"matchsource"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"loopsource"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"label"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"captureclause"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"traititemid"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"traitmethod"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"implitemid"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"primty"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"ty_"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmoutput"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"inlineasm"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"variant_"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usekind"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"structfield"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"itemid"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"item_"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"traititemref"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"implitemref"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"associateditemkind"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem_"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"freevar"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"traitcandidate"}}],[11,"clone","rustc_typeck::lint","",120,{"inputs":[{"name":"self"}],"output":{"name":"lint"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"lintid"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"lintsource"}}],[11,"clone","rustc_typeck::lint::builtin","",250,{"inputs":[{"name":"self"}],"output":{"name":"hardwiredlints"}}],[11,"clone","rustc_typeck::middle::expr_use_visitor","",133,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"clone","rustc_typeck::middle::const_val","",138,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"clone","rustc_typeck::middle::cstore","",139,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"clone","rustc_typeck::middle::dataflow","",150,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"clone","rustc_typeck::middle::dependency_format","",154,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"clone","rustc_typeck::middle::free_region","",258,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"clone","rustc_typeck::middle::lang_items","",155,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"clone","rustc_typeck::middle::mem_categorization","",157,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"elementkind"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationoptions"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"clone","rustc_typeck::middle::privacy","",172,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"clone","rustc_typeck::middle::region","",234,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"codeextentdata"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"callsitescopedata"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","rustc_typeck::middle::resolve_lifetime","",177,{"inputs":[{"name":"self"}],"output":{"name":"defregion"}}],[11,"clone","rustc_typeck::middle::stability","",179,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"clone","rustc_typeck::session","",205,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"sizekind"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"fieldinfo"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"datatypekind"}}],[11,"clone","rustc_typeck::session::config","",182,{"inputs":[{"name":"self"}],"output":{"name":"optlevel"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"debuginfolevel"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"outputtype"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"erroroutputtype"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"outputtypes"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"externs"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"printrequest"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"outputfilenames"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"entryfntype"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"cratetype"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"passes"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptions"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"debuggingoptions"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"optionstability"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"rustcoptgroup"}}],[11,"clone","rustc_typeck::session::filesearch","",197,{"inputs":[{"name":"self"}],"output":{"name":"filematch"}}],[11,"clone","rustc_typeck::session::search_paths","",244,{"inputs":[{"name":"self"}],"output":{"name":"searchpaths"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"pathkind"}}],[11,"clone","rustc_typeck::util::common","",245,{"inputs":[{"name":"self"}],"output":{"name":"errorreported"}}],[11,"super_fold_with","rustc_typeck::middle::const_val","",138,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"constval"}}],[11,"new","rustc_typeck::dep_graph::debug","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"test","","",0,{"inputs":[{"name":"self"},{"name":"depnode"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"new","rustc_typeck::dep_graph","",255,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"is_fully_enabled","","True if we are actually building the full dep-graph.",255,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"query","","",255,{"inputs":[{"name":"self"}],"output":{"name":"depgraphquery"}}],[11,"in_ignore","","",255,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"in_task","","",255,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"with_ignore","","",255,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"with_task","","",255,{"inputs":[{"name":"self"},{"name":"depnode"},{"name":"op"}],"output":{"name":"r"}}],[11,"read","","",255,null],[11,"write","","",255,null],[11,"insert_previous_work_product","","Indicates that a previous work product exists for `v`. This is invoked during initial start-up based on what nodes are clean (and what files exist in the incr. directory).",255,null],[11,"insert_work_product","","Indicates that we created the given work-product in this run for `v`. This record will be preserved and loaded in the next run.",255,null],[11,"previous_work_product","","Check whether a previous work product exists for `v` and, if so, return the path that leads to it. Used to skip doing work.",255,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"option"}}],[11,"work_products","","Access the map of work-products created during this run. Only used during saving of the dep-graph.",255,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"new","","",1,null],[11,"contains_node","","",1,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"nodes","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"edges","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"transitive_successors","","All nodes reachable from `node`. In other words, things that will have to be recomputed if `node` changes.",1,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"transitive_predecessors","","All nodes that can reach `node`.",1,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"immediate_successors","","Just the outgoing edges from `node`.",1,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"from_label_string","","Used in testing",2,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",2,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"new","","",238,{"inputs":[{"name":"depgraphthreaddata"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"new","","",235,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",235,null],[11,"get_mut","","",235,null],[11,"insert","","",235,null],[11,"contains_key","","",235,null],[11,"keys","","",235,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"push","","Append `elem` to the vector stored for `k`, creating a new vector if needed. This is considered a write to `k`.",235,null],[11,"from_ast","rustc_typeck::hir::def","",6,{"inputs":[{"name":"variantdata"}],"output":{"name":"ctorkind"}}],[11,"from_hir","","",6,{"inputs":[{"name":"variantdata"}],"output":{"name":"ctorkind"}}],[11,"def_id","","",7,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"kind_name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",8,{"inputs":[{"name":"def"}],"output":{"name":"pathresolution"}}],[11,"kind_name","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","rustc_typeck::hir::def_id","",232,{"inputs":[{"name":"usize"}],"output":{"name":"cratenum"}}],[11,"from_u32","","",232,{"inputs":[{"name":"u32"}],"output":{"name":"cratenum"}}],[11,"as_usize","","",232,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",232,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","",233,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",233,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",233,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",233,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"local","","",10,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attrs","rustc_typeck::hir::intravisit","",11,null],[11,"intra","","Returns the map to use for an \"intra item-like\" thing (if any). e.g., function body.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inter","","Returns the map to use for an \"item-like\" thing (if any). e.g., item, impl-item.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",14,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",14,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"add","","",14,null],[11,"new","","",252,{"inputs":[{"name":"map"}],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",252,{"inputs":[{"name":"self"}],"output":{"name":"idrange"}}],[11,"new","rustc_typeck::hir::itemlikevisit","",240,{"inputs":[{"name":"v"}],"output":{"name":"deepvisitor"}}],[11,"lower_item","rustc_typeck::hir::lowering","",259,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"from_node","rustc_typeck::hir::map::blocks","Attempts to construct a FnLikeNode from presumed FnLike node input.",256,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"to_fn_parts","","",256,{"inputs":[{"name":"self"}],"output":{"name":"fnparts"}}],[11,"body","","",256,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"decl","","",256,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"span","","",256,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"id","","",256,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"constness","","",256,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"kind","","",256,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"id","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Expr node input.",19,{"inputs":[{"name":"map"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"def_key","rustc_typeck::hir::map::definitions","",237,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_index_for_def_key","","",237,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"option"}}],[11,"contains_key","","",237,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"retrace_path","","",237,null],[11,"new","rustc_typeck::hir::map","Create new empty definition map.",257,{"inputs":[],"output":{"name":"definitions"}}],[11,"def_path_table","","",257,{"inputs":[{"name":"self"}],"output":{"name":"defpathtable"}}],[11,"len","","Get the number of definitions.",257,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"def_key","","",257,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_index_for_def_key","","",257,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"option"}}],[11,"def_path","","Returns the path from the crate root to `index`. The root nodes are not included in the path (i.e., this will be an empty vector for the crate root). For an inlined item, this will be the path of the item in the external crate (but the path will begin with the path to the external crate).",257,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpath"}}],[11,"opt_def_index","","",257,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"opt_local_def_id","","",257,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"local_def_id","","",257,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"as_local_node_id","","",257,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"create_def_with_parent","","Add a definition with a parent definition.",257,{"inputs":[{"name":"self"},{"name":"option"},{"name":"nodeid"},{"name":"defpathdata"}],"output":{"name":"defindex"}}],[11,"is_local","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"make","","",22,{"inputs":[{"name":"cratenum"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"to_string","","",22,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"deterministic_hash","","",22,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"u64"}}],[11,"deterministic_hash_to","","",22,null],[11,"get_opt_name","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_interned_str","","",23,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"to_string","","",23,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","",25,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",25,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"is_inlined_node_id","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"read","","Registers a read in the dependency graph of the AST node with the given `id`. This needs to be called each time a public function returns the HIR for a node -- in other words, when it \"reveals\" the content of a node to the caller (who might not otherwise have had access to those contents, and hence needs a read recorded). If the function just returns a DefId or NodeId, no actual content was returned, so no read is needed.",26,null],[11,"num_local_def_ids","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"definitions","","",26,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"def_key","","",26,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path_from_id","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"def_path","","",26,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"def_index_for_def_key","","",26,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"option"}}],[11,"local_def_id","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"opt_local_def_id","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"as_local_node_id","","",26,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"krate","","",26,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"trait_item","","",26,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"traititem"}}],[11,"impl_item","","",26,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"implitem"}}],[11,"body","","",26,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"body"}}],[11,"body_owner","","Returns the `NodeId` that corresponds to the definition of which this is the body of, i.e. a `fn`, `const` or `static` item (possibly associated), or a closure, or the body itself for embedded constant expressions (e.g. `N` in `[T; N]`).",26,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"nodeid"}}],[11,"body_owner_def_id","","",26,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"defid"}}],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to invoking `krate.attrs` because it registers a tighter dep-graph access.",26,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot be found.",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"node"}}],[11,"get_if_local","","",26,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"find","","Retrieve the Node corresponding to `id`, returning None if cannot be found.",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no parent. This function returns the immediate parent in the AST, whereas get_parent returns the enclosing item. Note that this might not be the actual parent node in the AST - some kinds of nodes are not in the map and these will never appear as the parent_node. So you can always walk the parent_nodes from a node to the root of the ast (unless you get the same id back here that can happen if the id is not in the map itself or is just weird).",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose immediate parent is an item or a closure.",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"get_parent","","Retrieve the NodeId for `id`'s parent item, or `id` itself if no parent item is in this map. The \"parent item\" is the closest parent node in the AST which is recorded by the map and is an item, either an item in a module, trait, or impl.",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"get_module_parent","","Returns the NodeId of `id`'s nearest module parent, or `id` itself if no module parent is in this map.",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block. FIXME it is not clear to me that all items qualify as scopes - statics and associated types probably shouldn't, for example. Behaviour in this regard should be expected to be highly unstable.",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_parent_did","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"get_foreign_abi","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"abi"}}],[11,"expect_item","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"item"}}],[11,"expect_impl_item","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"implitem"}}],[11,"expect_trait_item","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"traititem"}}],[11,"expect_variant_data","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"variantdata"}}],[11,"expect_variant","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"spanned"}}],[11,"expect_foreign_item","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"foreignitem"}}],[11,"expect_expr","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"expr"}}],[11,"expect_inlined_body","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"body"}}],[11,"name","","Returns the name associated with the given NodeId's AST.",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"symbol"}}],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST corresponding to the Node ID",26,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id's with paths that match `parts`.  (Requires `parts` is non-empty.)",26,null],[11,"span","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"span"}}],[11,"span_if_local","","",26,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"node_to_string","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"node_to_user_string","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"node_to_pretty_string","","",26,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"new","","",27,{"inputs":[{"name":"definitions"}],"output":{"name":"defcollector"}}],[11,"collect_root","","",27,null],[11,"with_parent","","",27,null],[11,"visit_ast_const_integer","","",27,null],[11,"print_node","rustc_typeck::hir::print","",33,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"result"}}],[11,"new_from_input","","",33,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",33,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"nbsp","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"word_nbsp","","",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bclose_","","",33,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",33,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",33,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"space_if_not_bol","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"break_offset_if_not_bol","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",33,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",33,null],[11,"commasep_exprs","","",33,null],[11,"print_mod","","",33,null],[11,"print_foreign_mod","","",33,null],[11,"print_opt_lifetime","","",33,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",33,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",33,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",33,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_trait_ref","","",33,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"print_enum_def","","",33,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"symbol"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",33,null],[11,"print_visibility","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",33,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"generics"},{"name":"symbol"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_variant","","",33,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_method_sig","","",33,null],[11,"print_trait_item","","",33,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",33,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",33,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_block","","",33,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",33,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_indent","","",33,{"inputs":[{"name":"self"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",33,null],[11,"print_block_maybe_unclosed","","",33,null],[11,"print_if","","",33,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",33,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_expr_maybe_paren","","",33,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",33,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",33,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_decl","","",33,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_usize","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",33,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"result"}}],[11,"print_for_decl","","",33,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_path","","",33,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_qpath","","",33,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_pat","","",33,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",33,null],[11,"print_capture_clause","","",33,{"inputs":[{"name":"self"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"print_bounds","","",33,null],[11,"print_lifetime","","",33,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_def","","",33,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"result"}}],[11,"print_generics","","",33,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",33,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",33,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_mutability","","",33,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",33,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_fn_output","","",33,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",33,{"inputs":[{"name":"self"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",33,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",33,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",33,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",33,{"inputs":[{"name":"self"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",33,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"new","rustc_typeck::hir::svh","Create a new `Svh` given the hash. If you actually want to compute the SVH from some HIR, you want the `calculate_svh` function found in `librustc_incremental`.",236,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_u64","","",236,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_string","","",236,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_global","rustc_typeck::hir","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_name","","Convert an identifier to the corresponding segment.",37,{"inputs":[{"name":"symbol"}],"output":{"name":"pathsegment"}}],[11,"none","","",38,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_lifetimes","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_types","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type parameters in the parenthesized case.",38,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"lifetimes","","",38,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"bindings","","",38,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"empty","","",44,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"carries_unsafe_attr","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"attr_name","","",45,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"item","","",51,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"item"}}],[11,"trait_item","","",51,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"traititem"}}],[11,"impl_item","","",51,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"implitem"}}],[11,"visit_all_item_likes","","Visits all items in the crate in some determinstic (but unspecified) order. If you just need to process every item, but don't care about nesting, this method is the best choice.",51,null],[11,"body","","",51,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"body"}}],[11,"is_refutable","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_const","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"each_binding","","Call `f` on every \"binding\" in a pattern, e.g., on `a` in `match foo() { Some(a) => (), None => () }`",54,null],[11,"contains_bindings","","Checks if the pattern contains any patterns that bind something to an ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to an ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"simple_name","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"necessary_variants","","Return variants that are necessary to exist for the pattern to match.",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"contains_ref_binding","","Checks if the pattern contains any `ref` or `ref mut` bindings, and if yes whether its containing mutable ones or just immutables ones.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"walk","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"as_str","","",59,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_lazy","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shift","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_comparison","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",60,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attrs","","",61,null],[11,"id","","",61,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"attrs","","",63,null],[11,"contains_ref_binding","","Checks if the patterns for this arm contain any `ref` or `ref mut` bindings, and if yes whether its containing mutable ones or just immutables ones.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"id","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"has_value","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_final","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_default","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",99,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_positional","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fields","","",109,null],[11,"id","","",109,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"descriptive_variant","","",112,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"descriptive_variant","","",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_lower","rustc_typeck::lint","Get the lint's name, with ASCII letters converted to lowercase.",120,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"of","","Get the `LintId` for a `Lint`.",241,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"to_string","","Get the name of the lint.",241,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_str","","Convert a level to a lower-case string.",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","Convert a lower-case string to a level.",124,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",260,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",260,null],[11,"get_lint_groups","","",260,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_early_pass","","",260,null],[11,"register_late_pass","","",260,null],[11,"register_future_incompatible","","",260,null],[11,"future_incompatible","","",260,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"option"}}],[11,"register_group","","",260,null],[11,"register_renamed","","",260,null],[11,"register_removed","","",260,null],[11,"process_command_line","","",260,null],[11,"new","rustc_typeck::middle::expr_use_visitor","",261,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"with_options","","",261,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"exprusevisitor"}}],[11,"consume_body","","",261,null],[11,"consume_expr","","",261,null],[11,"walk_expr","","",261,null],[11,"description","rustc_typeck::middle::const_val","",138,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"macros_only","rustc_typeck::middle::cstore","",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_some","","",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rustc_typeck::middle::dataflow","",251,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",251,null],[11,"add_kill","","Indicates that `id` kills `bit`",251,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",251,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",251,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",251,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",251,null],[11,"propagate","","Performs the data flow analysis.",251,null],[11,"new","rustc_typeck::middle::free_region","",258,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",258,null],[11,"relate_free_regions_from_predicates","","",258,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship by walking the graph encoded in `map`.  Note that it is possible that `sub != sup` and `sub <= sup` and `sup <= sub` (that is, the user can give two different names to the same lifetime).",258,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",258,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"region"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after inference* and sadly the logic is somewhat duplicated with the code in infer.rs.",258,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"is_static","","Determines whether this free-region is required to be 'static",258,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"from_u32","rustc_typeck::middle::lang_items","",155,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",156,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",156,null],[11,"item_name","","",156,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",156,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"require_owned_box","","",156,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",156,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_eq_fn","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strdup_uniq_fn","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_type","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_type","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_type","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_lifetime","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_lifetime","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_lifetime","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_copy_bound","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_mutbl","rustc_typeck::middle::mem_categorization","",164,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",164,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",164,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",164,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",164,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",164,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",166,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",166,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",166,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"new","","",168,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_options","","",168,{"inputs":[{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",168,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_expr_autoderefd","","",168,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cat_expr_unadjusted","","",168,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_def","","",168,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"},{"name":"def"}],"output":{"name":"result"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",168,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"cat_rvalue_node","","",168,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_rvalue","","",168,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_field","","",168,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"symbol"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_tup_field","","",168,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"usize"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",168,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"interioroffsetkind"}],"output":{"name":"result"}}],[11,"cat_imm_interior","","",168,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"interiorkind"}],"output":{"name":"rc"}}],[11,"cat_downcast","","",168,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"cat_pattern","","",168,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"pat"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_reachable","rustc_typeck::middle::privacy","",173,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",173,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",173,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"node_id","rustc_typeck::middle::region","",234,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this CodeExtent.  Note that in general the returned span may not correspond to the span of any node id in the AST.",234,{"inputs":[{"name":"self"},{"name":"regionmaps"},{"name":"map"}],"output":{"name":"option"}}],[11,"node_id","","Returns a node id associated with this scope.",174,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"to_code_extent","","",175,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"codeextent"}}],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody really cares about the contents of these.",262,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"lookup_code_extent","","",262,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"node_extent","","",262,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"item_extent","","",262,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"call_site_extent","","",262,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"opt_destruction_extent","","",262,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"intern_code_extent","","",262,{"inputs":[{"name":"self"},{"name":"codeextentdata"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"intern_node","","",262,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"code_extent_data","","",262,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextentdata"}}],[11,"each_encl_scope","","",262,null],[11,"each_var_scope","","",262,null],[11,"each_rvalue_scope","","",262,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",262,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",262,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",262,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",262,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",262,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"scopes_intersect","","",262,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",262,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",262,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"from_attr_level","rustc_typeck::middle::stability","",179,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"same_origin","","",180,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"build","","Construct the stability index for a crate being compiled.",263,null],[11,"new","","",263,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"extension","rustc_typeck::session::config","",184,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",253,null],[11,"get","","",253,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"contains_key","","",253,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"keys","","",253,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","",253,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"should_trans","","",253,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",254,{"inputs":[{"name":"btreemap"}],"output":{"name":"externs"}}],[11,"get","","",254,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",254,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"single_codegen_unit","","",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dep_tracking_hash","","",186,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"filestem","","",188,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"path","","",189,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"pathbuf"}}],[11,"temp_path","","Get the path where a compilation artifact of the given type for the given codegen unit should be placed on disk. If codegen_unit_name is None, a path distinct from those of any codegen unit will be generated.",189,{"inputs":[{"name":"self"},{"name":"outputtype"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"temp_path_ext","","Like temp_path, but also supports things where there is no corresponding OutputType, like no-opt-bitcode or lto-bitcode.",189,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","",189,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"filestem","","",189,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_empty","","",192,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stable","","",196,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",196,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"for_each_lib_search_path","rustc_typeck::session::filesearch","",198,null],[11,"get_lib_path","","",198,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"search","","",198,null],[11,"new","","",198,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",198,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tools_search_paths","","",198,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","rustc_typeck::session::search_paths","",244,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",244,null],[11,"iter","","",244,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"iter"}}],[11,"local_crate_disambiguator","rustc_typeck::session","",200,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"struct_span_warn","","",200,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",200,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",200,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",200,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",200,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",200,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",200,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",200,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",200,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",200,null],[11,"span_fatal_with_code","","",200,null],[11,"fatal","","",200,null],[11,"span_err_or_warn","","",200,null],[11,"span_err","","",200,null],[11,"span_err_with_code","","",200,null],[11,"err","","",200,null],[11,"err_count","","",200,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",200,null],[11,"track_errors","","",200,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"span_warn","","",200,null],[11,"span_warn_with_code","","",200,null],[11,"warn","","",200,null],[11,"opt_span_warn","","",200,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",200,null],[11,"note_without_error","","",200,null],[11,"span_note_without_error","","",200,null],[11,"span_unimpl","","",200,null],[11,"unimpl","","",200,null],[11,"add_lint","","",200,null],[11,"add_lint_diagnostic","","",200,null],[11,"reserve_node_ids","","",200,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"next_node_id","","",200,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"diagnostic","","",200,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"diag_span_note_once","","Analogous to calling `.span_note` on the given DiagnosticBuilder, but deduplicates on lint ID, span, and message for this `Session` if we're not outputting in JSON mode.",200,null],[11,"codemap","","",200,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"verbose","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_passes","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"count_llvm_insns","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_llvm_passes","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trans_stats","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta_stats","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"asm_comments","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"no_verify","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrowck_stats","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_llvm_passes","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lto","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","Returns the panic strategy for this compile session. If the user explicitly selected one using '-C panic', use that, otherwise use the panic strategy defined by the target.",200,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"no_landing_pads","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unstable_options","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"nonzeroing_move_hints","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"must_not_eliminate_frame_pointers","","",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate_plugin_registrar_symbol","","Returns the symbol name for the registrar function, given the crate Svh and the function DefIndex.",200,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"generate_derive_registrar_symbol","","",200,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"sysroot","","",200,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"target_filesearch","","",200,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"host_filesearch","","",200,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"init_incr_comp_session","","",200,null],[11,"finalize_incr_comp_session","","",200,null],[11,"mark_incr_comp_session_as_invalid","","",200,null],[11,"incr_comp_session_dir","","",200,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"incr_comp_session_dir_opt","","",200,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_perf_stats","","",200,null],[11,"new","","",243,{"inputs":[],"output":{"name":"codestats"}}],[11,"record_type_size","","",243,null],[11,"print_type_sizes","","",243,null]],"paths":[[3,"EdgeFilter"],[3,"DepGraphQuery"],[4,"DepNode"],[3,"WorkProductId"],[8,"DepTrackingMapConfig"],[3,"WorkProduct"],[4,"CtorKind"],[4,"Def"],[3,"PathResolution"],[3,"Export"],[3,"DefId"],[4,"FnKind"],[4,"NestedVisitorMap"],[8,"Visitor"],[3,"IdRange"],[8,"ItemLikeVisitor"],[8,"Resolver"],[8,"MaybeFnLike"],[3,"FnParts"],[4,"Code"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefPath"],[4,"DefPathData"],[4,"Node"],[3,"Forest"],[3,"Map"],[3,"DefCollector"],[3,"MacroInvocationData"],[8,"EnumerateAndAdjustIterator"],[4,"AnnNode"],[4,"Nested"],[8,"PpAnn"],[3,"State"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"Generics"],[4,"UnsafeGeneric"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[3,"Local"],[4,"Decl_"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[3,"BodyId"],[3,"Body"],[3,"Expr"],[4,"Expr_"],[4,"QPath"],[4,"MatchSource"],[4,"LoopSource"],[3,"Label"],[4,"CaptureClause"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItemId"],[3,"TraitItem"],[4,"TraitMethod"],[4,"TraitItemKind"],[3,"ImplItemId"],[3,"ImplItem"],[4,"ImplItemKind"],[3,"TypeBinding"],[3,"Ty"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"UseKind"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField"],[4,"VariantData"],[3,"ItemId"],[3,"Item"],[4,"Item_"],[3,"TraitItemRef"],[3,"ImplItemRef"],[4,"AssociatedItemKind"],[3,"ForeignItem"],[4,"ForeignItem_"],[3,"Freevar"],[3,"TraitCandidate"],[3,"Lint"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[4,"Level"],[4,"LintSource"],[3,"FutureIncompatibleInfo"],[3,"LateContext"],[8,"IntoEarlyLint"],[3,"EarlyContext"],[8,"LintContext"],[3,"EarlyLint"],[8,"Delegate"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[4,"ConstVal"],[3,"LinkMeta"],[3,"CrateSource"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"NativeLibrary"],[4,"LoadedMacro"],[3,"ExternCrate"],[8,"CrateStore"],[8,"CrateLoader"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[4,"KillFrom"],[4,"Linkage"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[8,"ast_node"],[3,"MemCategorizationContext"],[3,"MemCategorizationOptions"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"DefRegion"],[3,"NamedRegionMap"],[4,"StabilityLevel"],[3,"DeprecationEntry"],[3,"Config"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[4,"PathKind"],[3,"Session"],[3,"PerfStats"],[4,"IncrCompSession"],[3,"FieldInfo"],[4,"SizeKind"],[3,"VariantInfo"],[4,"DataTypeKind"],[3,"TypeSizeInfo"],[8,"MemoizationMap"],[8,"ToPrimitive"],[4,"LinkOrCopy"],[3,"TypeAndSubsts"],[3,"CrateCtxt"],[3,"UnsafetyState"],[4,"Expectation"],[3,"FnCtxt"],[3,"RegionCtxt"],[4,"SubjectNode"],[3,"NoMatchData"],[4,"MethodError"],[4,"CandidateSource"],[3,"IsSuggestion"],[3,"Pick"],[4,"LookingFor"],[4,"PickKind"],[4,"Mode"],[3,"Inherited"],[3,"LoopCtxt"],[3,"EnclosingLoops"],[4,"AstConvRequest"],[4,"SizedByDefault"],[3,"DepNodeFilter"],[3,"CrateNum"],[3,"DefIndex"],[3,"CodeExtent"],[3,"DepTrackingMap"],[3,"Svh"],[3,"DefPathTable"],[3,"DepTask"],[3,"Indenter"],[3,"DeepVisitor"],[3,"LintId"],[3,"Context"],[3,"CodeStats"],[3,"SearchPaths"],[3,"ErrorReported"],[3,"DummyCrateStore"],[3,"NodesMatchingSuffix"],[3,"EnumerateAndAdjust"],[3,"Iter"],[3,"HardwiredLints"],[3,"DataFlowContext"],[3,"IdRangeComputingVisitor"],[3,"OutputTypes"],[3,"Externs"],[3,"DepGraph"],[3,"FnLikeNode"],[3,"Definitions"],[3,"FreeRegionMap"],[3,"LoweringContext"],[3,"LintStore"],[3,"ExprUseVisitor"],[3,"RegionMaps"],[3,"Index"]]};
searchIndex["rustdoc"] = {"doc":"","items":[],"paths":[]};
searchIndex["serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"hex","serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",0,null],[13,"InvalidHexLength","","The input had an invalid length",0,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"json","serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of compact data",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",3,null],[13,"U64","","",3,null],[13,"F64","","",3,null],[13,"String","","",3,null],[13,"Boolean","","",3,null],[13,"Array","","",3,null],[13,"Object","","",3,null],[13,"Null","","",3,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",4,null],[13,"InvalidNumber","","",4,null],[13,"EOFWhileParsingObject","","",4,null],[13,"EOFWhileParsingArray","","",4,null],[13,"EOFWhileParsingValue","","",4,null],[13,"EOFWhileParsingString","","",4,null],[13,"KeyMustBeAString","","",4,null],[13,"ExpectedColon","","",4,null],[13,"TrailingCharacters","","",4,null],[13,"TrailingComma","","",4,null],[13,"InvalidEscape","","",4,null],[13,"InvalidUnicodeCodePoint","","",4,null],[13,"LoneLeadingSurrogateInHexEscape","","",4,null],[13,"UnexpectedEndOfHexEscape","","",4,null],[13,"UnrecognizedHex","","",4,null],[13,"NotFourDigit","","",4,null],[13,"NotUtf8","","",4,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",5,null],[13,"IoError","","",5,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",6,null],[13,"ExpectedError","","",6,null],[13,"MissingFieldError","","",6,null],[13,"UnknownVariantError","","",6,null],[13,"ApplicationError","","",6,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",7,null],[13,"BadHashmapKey","","",7,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",8,null],[13,"ObjectEnd","","",8,null],[13,"ArrayStart","","",8,null],[13,"ArrayEnd","","",8,null],[13,"BooleanValue","","",8,null],[13,"I64Value","","",8,null],[13,"U64Value","","",8,null],[13,"F64Value","","",8,null],[13,"StringValue","","",8,null],[13,"NullValue","","",8,null],[13,"Error","","",8,null],[4,"StackElement","","StackElements compose a Stack. For example, StackElement::Key(\"foo\"), StackElement::Key(\"bar\"), StackElement::Index(3) and StackElement::Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",9,null],[13,"Key","","",9,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[5,"from_reader","","Decodes a json value from an `&mut io::Read`",null,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[5,"from_str","","Decodes a json value from a string",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",10,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"parsererror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"decodererror"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"encodererror"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",7,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new","","Creates a new JSON encoder whose output will be written to the writer specified.",11,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",11,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",11,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",11,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",11,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",11,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",11,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",11,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",11,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",11,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",11,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",11,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",11,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",11,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",11,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"new","","Creates a new encoder whose output will be written to the specified writer",12,{"inputs":[{"name":"write"}],"output":{"name":"prettyencoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"emit_nil","","",12,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",12,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",12,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",12,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",12,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",12,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",12,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",12,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",12,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",12,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",12,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",12,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",12,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",12,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",3,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",3,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"jsonevent"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",13,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",13,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",13,null],[11,"top","","Returns the top-most element (if any).",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",14,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",15,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",16,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u128","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i128","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",16,null],[11,"read_enum_variant_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",16,null],[11,"read_enum_struct_variant_field","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",3,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"opaque","serialize","",null,null],[3,"Encoder","serialize::opaque","",null,null],[12,"cursor","","",20,null],[3,"Decoder","","",null,null],[12,"data","","",21,null],[6,"EncodeResult","","",null,null],[11,"new","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",20,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",20,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",20,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",20,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",20,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",20,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",20,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",20,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",20,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",20,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",21,null],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u128","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i128","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"error","","",21,null],[0,"leb128","serialize","",null,null],[5,"write_unsigned_leb128_to","serialize::leb128","encodes an integer using unsigned leb128 encoding and stores the result using a callback function.",null,{"inputs":[{"name":"u128"},{"name":"w"}],"output":{"name":"usize"}}],[5,"write_unsigned_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"u128"}],"output":{"name":"usize"}}],[5,"read_unsigned_leb128","","",null,null],[5,"write_signed_leb128_to","","encodes an integer using signed leb128 encoding and stores the result using a callback function.",null,{"inputs":[{"name":"i128"},{"name":"w"}],"output":{"name":"usize"}}],[5,"write_signed_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"i128"}],"output":{"name":"usize"}}],[5,"read_signed_leb128","","",null,null],[8,"Decoder","serialize","",null,null],[16,"Error","","",22,null],[10,"read_nil","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u128","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i128","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_enum","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",22,null],[11,"read_enum_variant_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",22,null],[11,"read_enum_struct_variant_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",22,null],[8,"Encoder","","",null,null],[16,"Error","","",23,null],[10,"emit_nil","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u128","","",23,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[10,"emit_u64","","",23,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",23,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",23,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",23,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i128","","",23,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[10,"emit_i64","","",23,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",23,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",23,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",23,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",23,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",23,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",23,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",24,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"SpecializationError","","Implement this trait on your `{Encodable,Decodable}::Error` types to override the default panic behavior for missing specializations.",null,null],[10,"not_found","","Create an error for a missing method specialization. Defaults to panicking with type, trait & method names. `S` is the encoder/decoder state type, `T` is the type being encoded/decoded, and the arguments are the names of the trait and method that should've been overriden.",26,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[8,"SpecializedEncoder","","Implement this trait on encoders, with `T` being the type you want to encode (employing `UseSpecializedEncodable`), using a strategy specific to the encoder.",null,null],[10,"specialized_encode","","Encode the value in a manner specific to this encoder state.",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SpecializedDecoder","","Implement this trait on decoders, with `T` being the type you want to decode (employing `UseSpecializedDecodable`), using a strategy specific to the decoder.",null,null],[10,"specialized_decode","","Decode a value in a manner specific to this decoder state.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"UseSpecializedEncodable","","Implement this trait on your type to get an `Encodable` implementation which goes through `SpecializedEncoder`.",null,null],[11,"default_encode","","Defaults to returning an error (see `SpecializationError`).",29,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[8,"UseSpecializedDecodable","","Implement this trait on your type to get an `Decodable` implementation which goes through `SpecializedDecoder`.",null,null],[11,"default_decode","","Defaults to returning an error (see `SpecializationError`).",30,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"emit_enum","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",22,null],[11,"read_enum_variant_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",22,null],[11,"read_enum_struct_variant_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"default_encode","","Defaults to returning an error (see `SpecializationError`).",29,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"default_decode","","Defaults to returning an error (see `SpecializationError`).",30,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"PrettyEncoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"Encoder"],[3,"Decoder"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"SpecializationError"],[8,"SpecializedEncoder"],[8,"SpecializedDecoder"],[8,"UseSpecializedEncodable"],[8,"UseSpecializedDecodable"]]};
searchIndex["syntax"] = {"doc":"The Rust parser and macro expander.","items":[[0,"diagnostics","syntax","",null,null],[0,"plugin","syntax::diagnostics","",null,null],[3,"ErrorInfo","syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",0,null],[12,"use_site","","",0,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"metadata","syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",1,null],[12,"use_site","","",1,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",2,null],[12,"line","","",2,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_span","","Create an error location from a span.",2,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"diagnostic_list","syntax","",null,null],[0,"util","","",null,null],[3,"ThinVec","syntax::util","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[0,"lev_distance","","",null,null],[5,"lev_distance","syntax::util::lev_distance","To find the Levenshtein distance between two strings",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"find_best_match_for_name","","To find the best match for a given string from an iterator of names As a loose rule to avoid the obviously incorrect suggestions, it takes an optional limit for the maximum allowable edit distance, which defaults to one-third of the given word",null,{"inputs":[{"name":"t"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[0,"node_count","syntax::util","",null,null],[3,"NodeCounter","syntax::util::node_count","",null,null],[12,"count","","",3,null],[11,"new","","",3,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",3,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",3,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",3,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",3,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",3,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",3,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",3,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",3,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",3,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",3,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",3,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",3,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",3,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",3,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",3,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",3,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",3,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",3,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",3,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",3,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",3,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",3,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",3,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_path","","",3,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",3,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_parameters","","",3,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",3,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_macro_def","","",3,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":null}],[0,"parser","syntax::util","",null,null],[4,"AssocOp","syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",4,null],[13,"Subtract","","`-`",4,null],[13,"Multiply","","`*`",4,null],[13,"Divide","","`/`",4,null],[13,"Modulus","","`%`",4,null],[13,"LAnd","","`&&`",4,null],[13,"LOr","","`||`",4,null],[13,"BitXor","","`^`",4,null],[13,"BitAnd","","`&`",4,null],[13,"BitOr","","`|`",4,null],[13,"ShiftLeft","","`<<`",4,null],[13,"ShiftRight","","`>>`",4,null],[13,"Equal","","`==`",4,null],[13,"Less","","`<`",4,null],[13,"LessEqual","","`<=`",4,null],[13,"NotEqual","","`!=`",4,null],[13,"Greater","","`>`",4,null],[13,"GreaterEqual","","`>=`",4,null],[13,"Assign","","`=`",4,null],[13,"Inplace","","`<-`",4,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",4,null],[13,"As","","`as`",4,null],[13,"DotDot","","`..` range",4,null],[13,"DotDotDot","","`...` range",4,null],[13,"Colon","","`:`",4,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",5,null],[13,"Right","","The operator is right-associative",5,null],[13,"None","","The operator is not associative",5,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"from_token","","Create a new AssocOP from a token",4,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",4,{"inputs":[{"name":"binopkind"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fixity","","Gets the fixity of this operator",4,{"inputs":[{"name":"self"}],"output":{"name":"fixity"}}],[11,"is_comparison","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_assign_like","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ast_binop","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"small_vector","syntax::util","",null,null],[6,"SmallVector","syntax::util::small_vector","",null,null],[0,"move_map","syntax::util","",null,null],[8,"MoveMap","syntax::util::move_map","",null,null],[11,"move_map","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"move_flat_map","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"move_flat_map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"clone","syntax::util","",8,{"inputs":[{"name":"self"}],"output":{"name":"thinvec"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",8,null],[11,"extend","","",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"json","syntax","A JSON emitter for errors.",null,null],[3,"JsonEmitter","syntax::json","",null,null],[11,"stderr","","",9,{"inputs":[{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"basic","","",9,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"new","","",9,{"inputs":[{"name":"box"},{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",9,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[0,"syntax","syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntax::abi","",null,null],[4,"Os","","",null,null],[13,"Windows","","",10,null],[13,"Macos","","",10,null],[13,"Linux","","",10,null],[13,"Android","","",10,null],[13,"Freebsd","","",10,null],[13,"iOS","","",10,null],[13,"Dragonfly","","",10,null],[13,"Bitrig","","",10,null],[13,"Netbsd","","",10,null],[13,"Openbsd","","",10,null],[13,"NaCl","","",10,null],[13,"Haiku","","",10,null],[13,"Solaris","","",10,null],[4,"Abi","","",null,null],[13,"Cdecl","","",11,null],[13,"Stdcall","","",11,null],[13,"Fastcall","","",11,null],[13,"Vectorcall","","",11,null],[13,"Aapcs","","",11,null],[13,"Win64","","",11,null],[13,"SysV64","","",11,null],[13,"PtxKernel","","",11,null],[13,"Rust","","",11,null],[13,"C","","",11,null],[13,"System","","",11,null],[13,"RustIntrinsic","","",11,null],[13,"RustCall","","",11,null],[13,"PlatformIntrinsic","","",11,null],[13,"Unadjusted","","",11,null],[4,"Architecture","","",null,null],[13,"X86","","",12,null],[13,"X86_64","","",12,null],[13,"Arm","","",12,null],[13,"Mips","","",12,null],[13,"Mipsel","","",12,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"name":"vec"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"os"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"os"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"architecture"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"data","","",11,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"generic","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ast","syntax","",null,null],[3,"ThinVec","syntax::ast","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[3,"Ident","","An identifier contains a Name (index into the interner table) and a SyntaxContext to track renaming and macro expansion per Flatt et al., \"Macros That Work Together\"",null,null],[12,"name","","",14,null],[12,"ctxt","","",14,null],[3,"Lifetime","","",null,null],[12,"id","","",15,null],[12,"span","","",15,null],[12,"name","","",15,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",16,null],[12,"lifetime","","",16,null],[12,"bounds","","",16,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"span","","",17,null],[12,"segments","","The segments in the path: the things separated by `::`. Global paths begin with `keywords::CrateRoot`.",17,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"identifier","","The identifier portion of this path segment.",18,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction. The `Option<P<..>>` wrapper is purely a size optimization; `None` is used to represent both `Path` and `Path<>`.",18,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",19,null],[12,"types","","The type parameters for this path segment, if present.",19,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",19,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"span","","Overall span",20,null],[12,"inputs","","`(A,B)`",20,null],[12,"output","","`C`",20,null],[3,"NodeId","","",null,null],[3,"TyParam","","",null,null],[12,"attrs","","",21,null],[12,"ident","","",21,null],[12,"id","","",21,null],[12,"bounds","","",21,null],[12,"default","","",21,null],[12,"span","","",21,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",22,null],[12,"ty_params","","",22,null],[12,"where_clause","","",22,null],[12,"span","","",22,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",23,null],[12,"predicates","","",23,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"span","","",24,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",24,null],[12,"bounded_ty","","The type being bounded",24,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",24,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"span","","",25,null],[12,"lifetime","","",25,null],[12,"bounds","","",25,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"id","","",26,null],[12,"span","","",26,null],[12,"path","","",26,null],[12,"ty","","",26,null],[3,"Crate","","",null,null],[12,"module","","",27,null],[12,"attrs","","",27,null],[12,"span","","",27,null],[12,"exported_macros","","",27,null],[3,"MetaItem","","A spanned compile-time attribute item.",null,null],[12,"name","","",28,null],[12,"node","","",28,null],[12,"span","","",28,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",29,null],[12,"id","","",29,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",29,null],[12,"span","","",29,null],[3,"Pat","","",null,null],[12,"id","","",30,null],[12,"node","","",30,null],[12,"span","","",30,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",31,null],[12,"pat","","The pattern the field is destructured to",31,null],[12,"is_shorthand","","",31,null],[3,"Stmt","","A statement",null,null],[12,"id","","",32,null],[12,"node","","",32,null],[12,"span","","",32,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",33,null],[12,"ty","","",33,null],[12,"init","","Initializer expression to set the value, if any",33,null],[12,"id","","",33,null],[12,"span","","",33,null],[12,"attrs","","",33,null],[3,"Arm","","An arm of a 'match'.",null,null],[12,"attrs","","",34,null],[12,"pats","","",34,null],[12,"guard","","",34,null],[12,"body","","",34,null],[3,"Field","","",null,null],[12,"ident","","",35,null],[12,"expr","","",35,null],[12,"span","","",35,null],[12,"is_shorthand","","",35,null],[3,"Expr","","An expression",null,null],[12,"id","","",36,null],[12,"node","","",36,null],[12,"span","","",36,null],[12,"attrs","","",36,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",37,null],[12,"position","","",37,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",38,null],[12,"tts","","",38,null],[3,"MutTy","","",null,null],[12,"ty","","",39,null],[12,"mutbl","","",39,null],[3,"MethodSig","","Represents a method's signature in a trait declaration, or in an implementation.",null,null],[12,"unsafety","","",40,null],[12,"constness","","",40,null],[12,"abi","","",40,null],[12,"decl","","",40,null],[12,"generics","","",40,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",41,null],[12,"ident","","",41,null],[12,"attrs","","",41,null],[12,"node","","",41,null],[12,"span","","",41,null],[3,"ImplItem","","",null,null],[12,"id","","",42,null],[12,"ident","","",42,null],[12,"vis","","",42,null],[12,"defaultness","","",42,null],[12,"attrs","","",42,null],[12,"node","","",42,null],[12,"span","","",42,null],[3,"TypeBinding","","",null,null],[12,"id","","",43,null],[12,"ident","","",43,null],[12,"ty","","",43,null],[12,"span","","",43,null],[3,"Ty","","",null,null],[12,"id","","",44,null],[12,"node","","",44,null],[12,"span","","",44,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",45,null],[12,"abi","","",45,null],[12,"lifetimes","","",45,null],[12,"decl","","",45,null],[3,"InlineAsmOutput","","Inline assembly.",null,null],[12,"constraint","","",46,null],[12,"expr","","",46,null],[12,"is_rw","","",46,null],[12,"is_indirect","","",46,null],[3,"InlineAsm","","Inline assembly.",null,null],[12,"asm","","",47,null],[12,"asm_str_style","","",47,null],[12,"outputs","","",47,null],[12,"inputs","","",47,null],[12,"clobbers","","",47,null],[12,"volatile","","",47,null],[12,"alignstack","","",47,null],[12,"dialect","","",47,null],[12,"expn_id","","",47,null],[3,"Arg","","An argument in a function header.",null,null],[12,"ty","","",48,null],[12,"pat","","",48,null],[12,"id","","",48,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",49,null],[12,"output","","",49,null],[12,"variadic","","",49,null],[3,"Mod","","Module declaration.",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`. For `mod foo;`, the inner span ranges from the first token to the last token in the external file.",50,null],[12,"items","","",50,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",51,null],[12,"items","","",51,null],[3,"EnumDef","","",null,null],[12,"variants","","",52,null],[3,"Variant_","","",null,null],[12,"name","","",53,null],[12,"attrs","","",53,null],[12,"data","","",53,null],[12,"disr_expr","","Explicit discriminant, e.g. `Foo = 1`",53,null],[3,"PathListItem_","","",null,null],[12,"name","","",54,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",54,null],[12,"id","","",54,null],[3,"AttrId","","",null,null],[12,"0","","",55,null],[3,"Attribute","","Meta-data associated with an item Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",56,null],[12,"style","","",56,null],[12,"value","","",56,null],[12,"is_sugared_doc","","",56,null],[12,"span","","",56,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",57,null],[12,"ref_id","","",57,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",58,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",58,null],[12,"span","","",58,null],[3,"StructField","","Field of a struct.",null,null],[12,"span","","",59,null],[12,"ident","","",59,null],[12,"vis","","",59,null],[12,"id","","",59,null],[12,"ty","","",59,null],[12,"attrs","","",59,null],[3,"Item","","An item",null,null],[12,"ident","","",60,null],[12,"attrs","","",60,null],[12,"id","","",60,null],[12,"node","","",60,null],[12,"vis","","",60,null],[12,"span","","",60,null],[3,"ForeignItem","","",null,null],[12,"ident","","",61,null],[12,"attrs","","",61,null],[12,"node","","",61,null],[12,"id","","",61,null],[12,"span","","",61,null],[12,"vis","","",61,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"ident","","",62,null],[12,"attrs","","",62,null],[12,"id","","",62,null],[12,"span","","",62,null],[12,"body","","",62,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`",63,null],[13,"Parenthesized","","The `(A,B)` and `C` in `Foo(A,B) -> C`",63,null],[4,"TyParamBound","","The AST represents all type param bounds as types. typeck::collect::compute_bounds matches these against the \"special\" built-in traits (see middle::lang_items) and detects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",64,null],[13,"RegionTyParamBound","","",64,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",65,null],[13,"Maybe","","",65,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",66,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",66,null],[13,"EqPredicate","","An equality predicate (unsupported)",66,null],[4,"NestedMetaItemKind","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",67,null],[13,"Literal","","A literal.",67,null],[4,"MetaItemKind","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",68,null],[13,"List","","List meta item.",68,null],[13,"NameValue","","Name value meta item.",68,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",69,null],[13,"ByValue","","",69,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",70,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`), or a unit struct/variant pattern, or a const pattern (in the last two cases the third field must be `None`). Disambiguation cannot be done with parser alone, so it happens during name resolution.",70,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",70,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",70,null],[13,"Path","","A possibly qualified path pattern. Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can only legally refer to associated constants.",70,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",70,null],[13,"Box","","A `box` pattern",70,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",70,null],[13,"Lit","","A literal",70,null],[13,"Range","","A range pattern, e.g. `1...2`",70,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `PatKind::Slice(box [a, b], Some(i), box [y, z])`",70,null],[13,"Mac","","A macro pattern; pre-expansion",70,null],[4,"Mutability","","",null,null],[13,"Mutable","","",71,null],[13,"Immutable","","",71,null],[4,"BinOpKind","","",null,null],[13,"Add","","The `+` operator (addition)",72,null],[13,"Sub","","The `-` operator (subtraction)",72,null],[13,"Mul","","The `*` operator (multiplication)",72,null],[13,"Div","","The `/` operator (division)",72,null],[13,"Rem","","The `%` operator (modulus)",72,null],[13,"And","","The `&&` operator (logical and)",72,null],[13,"Or","","The `||` operator (logical or)",72,null],[13,"BitXor","","The `^` operator (bitwise xor)",72,null],[13,"BitAnd","","The `&` operator (bitwise and)",72,null],[13,"BitOr","","The `|` operator (bitwise or)",72,null],[13,"Shl","","The `<<` operator (shift left)",72,null],[13,"Shr","","The `>>` operator (shift right)",72,null],[13,"Eq","","The `==` operator (equality)",72,null],[13,"Lt","","The `<` operator (less than)",72,null],[13,"Le","","The `<=` operator (less than or equal to)",72,null],[13,"Ne","","The `!=` operator (not equal to)",72,null],[13,"Ge","","The `>=` operator (greater than or equal to)",72,null],[13,"Gt","","The `>` operator (greater than)",72,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",73,null],[13,"Not","","The `!` operator for logical inversion",73,null],[13,"Neg","","The `-` operator for negation",73,null],[4,"StmtKind","","",null,null],[13,"Local","","A local (let) binding.",74,null],[13,"Item","","An item definition.",74,null],[13,"Expr","","Expr without trailing semi-colon.",74,null],[13,"Semi","","",74,null],[13,"Mac","","",74,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };` `foo!(...);`, `foo![...];`",75,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",75,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g. `foo!(...)`. All of these will end up being converted into macro expressions.",75,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",76,null],[13,"Unsafe","","",76,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",77,null],[13,"UserProvided","","",77,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",78,null],[13,"Closed","","Inclusive at the beginning and end",78,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",79,null],[13,"InPlace","","First expr is the place; second expr is the value.",79,null],[13,"Vec","","An array (`[a, b, c, d]`)",79,null],[13,"Call","","A function call",79,null],[13,"MethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",79,null],[13,"Tup","","A tuple (`(a, b, c ,d)`)",79,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",79,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",79,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",79,null],[13,"Cast","","A cast (`foo as f64`)",79,null],[13,"Type","","",79,null],[13,"If","","An `if` block, with an optional else block",79,null],[13,"IfLet","","An `if let` expression with an optional else block",79,null],[13,"While","","A while loop, with an optional label",79,null],[13,"WhileLet","","A while-let loop, with an optional label",79,null],[13,"ForLoop","","A for loop, with an optional label",79,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",79,null],[13,"Match","","A `match` block.",79,null],[13,"Closure","","A closure (for example, `move |a, b, c| a + b + c`)",79,null],[13,"Block","","A block (`{ ... }`)",79,null],[13,"Assign","","An assignment (`a = foo()`)",79,null],[13,"AssignOp","","An assignment with an operator",79,null],[13,"Field","","Access of a named struct field (`obj.foo`)",79,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",79,null],[13,"Index","","An indexing operation (`foo[2]`)",79,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",79,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::<baz>.",79,null],[13,"AddrOf","","A referencing operation (`&a` or `&mut a`)",79,null],[13,"Break","","A `break`, with an optional label to break, and an optional expression",79,null],[13,"Continue","","A `continue`, with an optional label",79,null],[13,"Ret","","A `return`, with an optional value to be returned",79,null],[13,"InlineAsm","","Output of the `asm!()` macro",79,null],[13,"Mac","","A macro invocation; pre-expansion",79,null],[13,"Struct","","A struct literal expression.",79,null],[13,"Repeat","","An array literal constructed from one repeated element.",79,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",79,null],[13,"Try","","`expr?`",79,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",80,null],[13,"Ref","","",80,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",81,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",81,null],[4,"LitIntType","","",null,null],[13,"Signed","","",82,null],[13,"Unsigned","","",82,null],[13,"Unsuffixed","","",82,null],[4,"LitKind","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",83,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",83,null],[13,"Byte","","A byte char (`b'f'`)",83,null],[13,"Char","","A character literal (`'a'`)",83,null],[13,"Int","","An integer literal (`1`)",83,null],[13,"Float","","A float literal (`1f64` or `1E10f64`)",83,null],[13,"FloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",83,null],[13,"Bool","","A boolean literal",83,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",84,null],[13,"Method","","",84,null],[13,"Type","","",84,null],[13,"Macro","","",84,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",85,null],[13,"Method","","",85,null],[13,"Type","","",85,null],[13,"Macro","","",85,null],[4,"IntTy","","",null,null],[13,"Is","","",86,null],[13,"I8","","",86,null],[13,"I16","","",86,null],[13,"I32","","",86,null],[13,"I64","","",86,null],[13,"I128","","",86,null],[4,"UintTy","","",null,null],[13,"Us","","",87,null],[13,"U8","","",87,null],[13,"U16","","",87,null],[13,"U32","","",87,null],[13,"U64","","",87,null],[13,"U128","","",87,null],[4,"FloatTy","","",null,null],[13,"F32","","",88,null],[13,"F64","","",88,null],[4,"TyKind","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length slice (`[T]`)",89,null],[13,"Array","","A fixed length array (`[T; n]`)",89,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",89,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",89,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",89,null],[13,"Never","","The never type (`!`)",89,null],[13,"Tup","","A tuple (`(A, B, C, D,...)`)",89,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",89,null],[13,"ObjectSum","","Something like `A+B`. Note that `B` must always be a path.",89,null],[13,"PolyTraitRef","","A type like `for<'a> Foo<&'a Bar>`",89,null],[13,"ImplTrait","","An `impl TraitA+TraitB` type.",89,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",89,null],[13,"Typeof","","Unused for now",89,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",89,null],[13,"ImplicitSelf","","Inferred type of a `self` or `&self` argument in a method.",89,null],[13,"Mac","","",89,null],[4,"AsmDialect","","Inline assembly dialect.",null,null],[13,"Att","","",90,null],[13,"Intel","","",90,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",91,null],[13,"Region","","`&'lt self`, `&'lt mut self`",91,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",91,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",92,null],[13,"Normal","","",92,null],[4,"Constness","","",null,null],[13,"Const","","",93,null],[13,"NotConst","","",93,null],[4,"Defaultness","","",null,null],[13,"Default","","",94,null],[13,"Final","","",94,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",95,null],[13,"Negative","","`impl !Trait for Type`",95,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",96,null],[13,"Ty","","Everything else",96,null],[4,"ViewPath_","","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",97,null],[13,"ViewPathGlob","","`foo::bar::*`",97,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",97,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",98,null],[13,"Inner","","",98,null],[4,"Visibility","","",null,null],[13,"Public","","",99,null],[13,"Crate","","",99,null],[13,"Restricted","","",99,null],[12,"path","syntax::ast::Visibility","",99,null],[12,"id","","",99,null],[13,"Inherited","syntax::ast","",99,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","Struct variant.",100,null],[13,"Tuple","","Tuple variant.",100,null],[13,"Unit","","Unit variant.",100,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",101,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",101,null],[13,"Static","","A static item (`static` or `pub static`).",101,null],[13,"Const","","A constant item (`const` or `pub const`).",101,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",101,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",101,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",101,null],[13,"Ty","","A type alias (`type` or `pub type`).",101,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",101,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",101,null],[13,"Union","","A union definition (`union` or `pub union`).",101,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",101,null],[13,"DefaultImpl","","",101,null],[13,"Impl","","An implementation.",101,null],[13,"Mac","","A macro invocation (which includes macro definition).",101,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",102,null],[13,"Static","","A foreign static item (`static ext: u8`), with optional mutability (the boolean is true when mutable)",102,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate, used to drive conditional compilation",null,null],[6,"NestedMetaItem","","A spanned compile-time attribute list item.",null,null],[6,"BinOp","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST node value. Then later, in the renumber pass, we renumber them to have small, positive ids.",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"with_empty_ctxt","","",14,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"from_str","","Maps a string to an identifier with an empty syntax context.",14,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[11,"unhygienize","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","","",17,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"default_to_global","","",17,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"is_global","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"crate_root","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"into","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"cmp","","",103,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ordering"}}],[11,"hash","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",103,{"inputs":[{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"from_u32","","",103,{"inputs":[{"name":"u32"}],"output":{"name":"nodeid"}}],[11,"as_usize","","",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_encode","","",103,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",103,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_lt_parameterized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_for_name","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"default","","Creates an instance of `Generics`.",22,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitemkind"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"nestedmetaitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"nestedmetaitemkind"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"metaitemkind"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"metaitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"metaitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"walk","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"binopkind"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"binopkind"}],"output":{"name":"bool"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",72,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"lazy","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shift","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_comparison","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",73,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",73,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"add_trailing_semicolon","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"stmtkind"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"macstmtstyle"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"encode","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"unsafesource"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"captureby"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"bool"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"mac_"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"litinttype"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"litkind"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_str","","Returns true if this literal is a string and false otherwise.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unsuffixed","","Returns true if this literal has no suffix. Note: this will return true for literals with prefixes such as raw strings and byte strings.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_suffixed","","Returns true if this literal has a suffix.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",86,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"string"}}],[11,"bit_width","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"uintty"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"ty_to_string","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",87,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"string"}}],[11,"bit_width","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"bit_width","","",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"tykind"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"asmdialect"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmoutput"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"inlineasm"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"selfkind"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_self","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_self","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_self","","",48,{"inputs":[{"name":"explicitself"},{"name":"spannedident"}],"output":{"name":"arg"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_self","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_self","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",96,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"variant_"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"pathlistitem_"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"viewpath_"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","",97,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"attrid"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"encode","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"structfield"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fields","","",100,null],[11,"id","","",100,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"itemkind"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",101,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemkind"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",102,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",102,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"macrodef"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"attr","syntax","",null,null],[3,"Stability","syntax::attr","Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.",null,null],[12,"level","","",104,null],[12,"feature","","",104,null],[12,"rustc_depr","","",104,null],[3,"RustcDeprecation","","",null,null],[12,"since","","",105,null],[12,"reason","","",105,null],[3,"Deprecation","","",null,null],[12,"since","","",106,null],[12,"note","","",106,null],[4,"InlineAttr","","",null,null],[13,"None","","",107,null],[13,"Hint","","",107,null],[13,"Always","","",107,null],[13,"Never","","",107,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",108,null],[12,"reason","syntax::attr::StabilityLevel","",108,null],[12,"issue","","",108,null],[13,"Stable","syntax::attr","",108,null],[12,"since","syntax::attr::StabilityLevel","",108,null],[4,"ReprAttr","syntax::attr","",null,null],[13,"ReprAny","","",109,null],[13,"ReprInt","","",109,null],[13,"ReprExtern","","",109,null],[13,"ReprPacked","","",109,null],[13,"ReprSimd","","",109,null],[4,"IntType","","",null,null],[13,"SignedInt","","",110,null],[13,"UnsignedInt","","",110,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mark_known","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_known","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"name"},{"name":"symbol"}],"output":{"name":"metaitem"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"name"},{"name":"lit"}],"output":{"name":"metaitem"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[5,"mk_list_word_item","","",null,{"inputs":[{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"name"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_name_value_item","","",null,{"inputs":[{"name":"span"},{"name":"name"},{"name":"lit"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_list_item","","",null,{"inputs":[{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_word_item","","",null,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_inner","","Returns an innter attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_outer","","Returns an outer attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"symbol"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"attribute"}}],[5,"list_contains_name","","",null,null],[5,"contains_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"find_crate_name","","",null,null],[5,"find_export_name_attr","","Find the value of #[export_name=*] attribute and check its validity.",null,null],[5,"contains_extern_indicator","","",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,{"inputs":[{"name":"metaitem"},{"name":"parsesess"},{"name":"option"}],"output":{"name":"bool"}}],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"find_deprecation","","Find the deprecation attribute. `None` if none exists.",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"handler"},{"name":"attribute"}],"output":{"name":"vec"}}],[8,"HasAttrs","","",null,null],[10,"attrs","","",111,null],[10,"map_attrs","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"meta_item","","Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","Returns the Lit if self is a NestedMetaItemKind::Literal.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the Span for `self`.",112,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"check_name","","Returns true if this list item is a MetaItem with a name of `name`.",112,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","Returns the name of the meta item, e.g. `foo` in `#[foo]`, `#[foo=\"bar\"]` and `#[foo(bar)]`, if self is a MetaItem",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_str","","Gets the string value if self is a MetaItem and the MetaItem is a MetaItemKind::NameValue variant containing a string, otherwise None.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"word","","Returns a MetaItem if self is a MetaItem with Kind Word.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_meta_item","","Returns `true` if the variant is MetaItem.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_literal","","Returns `true` if the variant is Literal.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_word","","Returns `true` if self is a MetaItem and the meta item is a word.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","Returns `true` if self is a MetaItem and the meta item is a ValueString.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","Returns `true` if self is a MetaItem and the meta item is a list.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"check_name","syntax::ast","",56,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"value_str","","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",56,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_meta_item_list","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","Indicates if the attribute is a Value String.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"value_str","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"check_name","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_value_str","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta","","Extract the MetaItem from inside this Attribute.",56,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a comment like `///` or `/** */`. (Returns self unchanged for non-sugared doc attributes.)",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"clone","syntax::attr","",107,{"inputs":[{"name":"self"}],"output":{"name":"inlineattr"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"encode","","",104,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"hash","","",104,null],[11,"encode","","",108,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"encode","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"rustcdeprecation"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"encode","","",106,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"deprecation"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"is_unstable","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",109,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"reprattr"}}],[11,"is_ffi_safe","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",110,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"is_signed","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attrs","syntax::util","",8,null],[11,"map_attrs","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntax::ast","",74,null],[11,"map_attrs","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",60,null],[11,"map_attrs","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",36,null],[11,"map_attrs","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",33,null],[11,"map_attrs","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",61,null],[11,"map_attrs","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",59,null],[11,"map_attrs","","",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",42,null],[11,"map_attrs","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",41,null],[11,"map_attrs","","",41,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",34,null],[11,"map_attrs","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",32,null],[11,"map_attrs","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntax::attr","",113,null],[11,"map_attrs","","",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"codemap","syntax","The CodeMap tracks all the source code used within a single crate, mapping from integer byte positions to the original source code location. Each bit of source parsed during crate parsing (typically files, in-memory strings, or various bits of macro expansion) cover a continuous range of bytes in the CodeMap and are represented by FileMaps. Byte positions are stored in `spans` and used pervasively in the compiler. They are absolute positions within the CodeMap, which upon request can be converted to line and column information, source code snippets, etc.",null,null],[3,"Spanned","syntax::codemap","",null,null],[12,"node","","",114,null],[12,"span","","",114,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",115,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",115,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",115,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",116,null],[12,"callee","","Information about the expansion.",116,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[12,"files","","",117,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] <item>",118,null],[13,"MacroBang","","e.g. `format!()`",118,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",118,null],[5,"original_sp","","Return the span itself if it doesn't come from a macro expansion, otherwise return the call site span up to the `enclosing_sp` by following the `expn_info` chain.",null,{"inputs":[{"name":"codemap"},{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[5,"spanned","","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[5,"combine_spans","","Build a span that covers the two provided spans.",null,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",119,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[10,"abs_path","","Return an absolute path to a file, if possible.",119,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[10,"read_file","","Read the contents of an UTF-8 file into memory.",119,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"expnformat"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"spanned"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"encode","","",114,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",114,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"nameandspan"}}],[11,"hash","","",115,null],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",115,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"hash","","",116,null],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"file_exists","","",120,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"abs_path","","",120,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"read_file","","",120,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","",117,{"inputs":[],"output":{"name":"codemap"}}],[11,"with_file_loader","","",117,{"inputs":[{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",117,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",117,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't intend to set the line information yourself, you should use new_filemap_and_lines.",117,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"option"},{"name":"string"}],"output":{"name":"rc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",117,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"},{"name":"str"}],"output":{"name":"rc"}}],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external crate. The source code of such an \"imported filemap\" is not available, but we still know enough to generate accurate debuginfo location information for things inlined from other crates.",117,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"option"},{"name":"usize"},{"name":"vec"},{"name":"vec"}],"output":{"name":"rc"}}],[11,"mk_substr_filename","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",117,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_char_pos_adj","","",117,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"merge_spans","","Returns `Some(span)`, a union of the lhs and rhs span.  The lhs must precede the rhs. If there are gaps between lhs and rhs, the resulting union will cross these gaps. For this to work, the spans have to be:    * the expn_id of both spans much match    * the lhs span needs to end on the same line the rhs span begins    * the lhs span must start at or before the rhs span",117,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_to_string","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_expanded_string","","Returns a formatted string showing the expansion chain of a span",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"source_callee","","Return the source callee.",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_to_filename","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"span_to_lines","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_snippet","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"get_filemap","","",117,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",117,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",117,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"lookup_filemap_idx","","",117,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"usize"}}],[11,"record_expansion","","",117,{"inputs":[{"name":"self"},{"name":"expninfo"}],"output":{"name":"expnid"}}],[11,"with_expn_info","","",117,{"inputs":[{"name":"self"},{"name":"expnid"},{"name":"f"}],"output":{"name":"t"}}],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"count_lines","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"macro_backtrace","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"vec"}}],[11,"lookup_char_pos","","",117,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"span_to_lines","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_string","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"macro_backtrace","","",117,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"vec"}}],[11,"merge_spans","","",117,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"option"}}],[0,"config","syntax","",null,null],[3,"StripUnconfigured","syntax::config","A folder that strips out items that do not belong in the current configuration.",null,null],[12,"should_test","","",121,null],[12,"sess","","",121,null],[12,"features","","",121,null],[5,"features","","",null,null],[5,"is_test_or_bench","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[11,"configure","","",121,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"process_cfg_attrs","","",121,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"in_cfg","","",121,null],[11,"configure_foreign_mod","","",121,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"configure_item_kind","","",121,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"configure_expr_kind","","",121,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"exprkind"}}],[11,"configure_expr","","",121,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"configure_stmt","","",121,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"option"}}],[11,"fold_foreign_mod","","",121,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_item_kind","","",121,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_expr","","",121,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",121,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_stmt","","",121,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_item","","",121,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",121,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",121,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_mac","","",121,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"entry","syntax","",null,null],[4,"EntryPointType","syntax::entry","",null,null],[13,"None","","",122,null],[13,"MainNamed","","",122,null],[13,"MainAttr","","",122,null],[13,"Start","","",122,null],[13,"OtherMain","","",122,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntax","Feature gating",null,null],[3,"Features","syntax::feature_gate","A set of features to be used by later passes.",null,null],[12,"declared_stable_lang_features","","![feature] attrs for stable language features, for error reporting",123,null],[12,"declared_lib_features","","![feature] attrs for non-language (library) features",123,null],[12,"asm","","",123,null],[12,"concat_idents","","",123,null],[12,"link_args","","",123,null],[12,"log_syntax","","",123,null],[12,"non_ascii_idents","","",123,null],[12,"plugin_registrar","","",123,null],[12,"thread_local","","",123,null],[12,"trace_macros","","",123,null],[12,"intrinsics","","",123,null],[12,"lang_items","","",123,null],[12,"link_llvm_intrinsics","","",123,null],[12,"linkage","","",123,null],[12,"quote","","",123,null],[12,"simd","","",123,null],[12,"rustc_diagnostic_macros","","",123,null],[12,"advanced_slice_patterns","","",123,null],[12,"box_syntax","","",123,null],[12,"placement_in_syntax","","",123,null],[12,"reflect","","",123,null],[12,"unboxed_closures","","",123,null],[12,"pushpop_unsafe","","",123,null],[12,"allocator","","",123,null],[12,"fundamental","","",123,null],[12,"main","","",123,null],[12,"needs_allocator","","",123,null],[12,"on_unimplemented","","",123,null],[12,"plugin","","",123,null],[12,"simd_ffi","","",123,null],[12,"start","","",123,null],[12,"structural_match","","",123,null],[12,"panic_runtime","","",123,null],[12,"needs_panic_runtime","","",123,null],[12,"optin_builtin_traits","","",123,null],[12,"macro_reexport","","",123,null],[12,"staged_api","","",123,null],[12,"no_core","","",123,null],[12,"box_patterns","","",123,null],[12,"dropck_parametricity","","",123,null],[12,"dropck_eyepatch","","",123,null],[12,"custom_attribute","","",123,null],[12,"custom_derive","","",123,null],[12,"rustc_attrs","","",123,null],[12,"allow_internal_unstable","","",123,null],[12,"slice_patterns","","",123,null],[12,"associated_consts","","",123,null],[12,"const_fn","","",123,null],[12,"const_indexing","","",123,null],[12,"prelude_import","","",123,null],[12,"static_recursion","","",123,null],[12,"default_type_parameter_fallback","","",123,null],[12,"associated_type_defaults","","",123,null],[12,"repr_simd","","",123,null],[12,"cfg_target_feature","","",123,null],[12,"platform_intrinsics","","",123,null],[12,"unwind_attributes","","",123,null],[12,"naked_functions","","",123,null],[12,"no_debug","","",123,null],[12,"omit_gdb_pretty_printer_section","","",123,null],[12,"cfg_target_vendor","","",123,null],[12,"stmt_expr_attributes","","",123,null],[12,"type_ascription","","",123,null],[12,"cfg_target_thread_local","","",123,null],[12,"abi_vectorcall","","",123,null],[12,"inclusive_range_syntax","","",123,null],[12,"specialization","","",123,null],[12,"pub_restricted","","",123,null],[12,"drop_types_in_const","","",123,null],[12,"cfg_target_has_atomic","","",123,null],[12,"conservative_impl_trait","","",123,null],[12,"relaxed_adts","","",123,null],[12,"never_type","","",123,null],[12,"attr_literals","","",123,null],[12,"abi_sysv64","","",123,null],[12,"untagged_unions","","",123,null],[12,"static_in_const","","",123,null],[12,"compiler_builtins","","",123,null],[12,"generic_param_attrs","","",123,null],[12,"field_init_shorthand","","",123,null],[12,"windows_subsystem","","",123,null],[12,"more_struct_aliases","","",123,null],[12,"link_cfg","","",123,null],[12,"use_extern_macros","","",123,null],[12,"loop_break_value","","",123,null],[12,"target_feature","","",123,null],[12,"safe_suggestion","","",123,null],[12,"abi_ptx","","",123,null],[12,"i128_type","","",123,null],[12,"abi_unadjusted","","",123,null],[3,"GatedCfg","","",null,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed by the compiler before the unused_attribute check",124,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler before the unused_attribute check. These attributes will be ignored by the unused_attribute lint",124,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",124,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate, reason and function to check if enabled",125,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",125,null],[4,"Stability","","",null,null],[13,"Unstable","","",126,null],[13,"Deprecated","","",126,null],[4,"GateIssue","","",null,null],[13,"Language","","",127,null],[13,"Library","","",127,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on beta/stable channels.",128,null],[13,"Allow","","Allow features to be activated, as on nightly.",128,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time during the build that feature-related lints are set to warn or above because the build turns on warnings-as-errors and uses lots of unstable features. As a result, this is always required for building Rust itself.",128,null],[5,"deprecated_attributes","","",null,{"inputs":[],"output":{"name":"vec"}}],[5,"check_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"parsesess"},{"name":"codemap"},{"name":"features"}],"output":null}],[5,"find_lang_feature_accepted_version","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[5,"get_features","","",null,null],[5,"check_crate","","",null,null],[17,"BUILTIN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_STMT_ATTR_SYNTAX","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DEPR_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DERIVE_UNDERSCORE","","",null,null],[17,"EXPLAIN_PLACEMENT_IN","","",null,null],[11,"new","","",123,{"inputs":[],"output":{"name":"features"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"attributetype"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"gate","","",129,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"check_and_emit","","",129,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"features"}],"output":null}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"unstablefeatures"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"unstablefeatures"}],"output":{"name":"bool"}}],[11,"hash","","",128,null],[11,"from_environment","","",128,{"inputs":[],"output":{"name":"unstablefeatures"}}],[11,"is_nightly_build","","",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"fold","syntax","A Folder represents an AST->AST fold; it accepts an AST piece, and returns a piece of the same type. So, for instance, macro expansion is a Folder that walks over an AST and produces another AST.",null,null],[5,"noop_fold_meta_items","syntax::fold","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"fold_thin_attrs","","",null,{"inputs":[{"name":"thinvec"},{"name":"t"}],"output":{"name":"thinvec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_meta_list_item","","",null,{"inputs":[{"name":"nestedmetaitem"},{"name":"t"}],"output":{"name":"nestedmetaitem"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"metaitem"},{"name":"t"}],"output":{"name":"metaitem"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,null],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_kind","","",null,{"inputs":[{"name":"itemkind"},{"name":"t"}],"output":{"name":"itemkind"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_opt_expr","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_exprs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_stmt_kind","","",null,{"inputs":[{"name":"stmtkind"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_vis","","",null,{"inputs":[{"name":"visibility"},{"name":"t"}],"output":{"name":"visibility"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",130,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_meta_items","","",130,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_meta_list_item","","",130,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"nestedmetaitem"}}],[11,"fold_meta_item","","",130,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"metaitem"}}],[11,"fold_view_path","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_foreign_item","","",130,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fold_item","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_item_simple","","",130,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_struct_field","","",130,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"structfield"}}],[11,"fold_item_kind","","",130,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_trait_item","","",130,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",130,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_fn_decl","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_block","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_stmt","","",130,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_arm","","",130,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_pat","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_expr","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_exprs","","",130,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_ty","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty_binding","","",130,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"typebinding"}}],[11,"fold_mod","","",130,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_foreign_mod","","",130,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_variant","","",130,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"variant"}}],[11,"fold_ident","","",130,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_usize","","",130,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"fold_path","","",130,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_parameters","","",130,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"fold_angle_bracketed_parameter_data","","",130,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fold_parenthesized_parameter_data","","",130,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fold_local","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",130,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_lifetime","","",130,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",130,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_attribute","","",130,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"option"}}],[11,"fold_arg","","",130,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"arg"}}],[11,"fold_generics","","",130,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_trait_ref","","",130,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fold_poly_trait_ref","","",130,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fold_variant_data","","",130,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"fold_lifetimes","","",130,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_lifetime_defs","","",130,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_ty_param","","",130,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fold_ty_params","","",130,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_tt","","",130,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"fold_tts","","",130,null],[11,"fold_token","","",130,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"token"}}],[11,"fold_interpolated","","",130,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fold_opt_lifetime","","",130,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_opt_bounds","","",130,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_bounds","","",130,{"inputs":[{"name":"self"},{"name":"typarambounds"}],"output":{"name":"typarambounds"}}],[11,"fold_ty_param_bound","","",130,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fold_mt","","",130,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fold_field","","",130,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_where_clause","","",130,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",130,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"fold_vis","","",130,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"new_id","","",130,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"new_span","","",130,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[0,"parse","syntax","The main parser interface",null,null],[3,"ParseSess","syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",131,null],[12,"unstable_features","","",131,null],[12,"config","","",131,null],[3,"Directory","","",null,null],[12,"path","","",132,null],[12,"ownership","","",132,null],[4,"DirectoryOwnership","","",null,null],[13,"Owned","","",133,null],[13,"UnownedViaBlock","","",133,null],[13,"UnownedViaMod","","",133,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_item_from_source_str","","Parses an item.",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_tts_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate if the file doesn't exist",null,{"inputs":[{"name":"parsesess"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add the file at the given path to the codemap, and return a parser. On an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"path"},{"name":"directoryownership"},{"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"new_parser_from_ts","","",null,{"inputs":[{"name":"parsesess"},{"name":"tokenstream"}],"output":{"name":"parser"}}],[5,"filemap_to_tts","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"vec"}}],[5,"tts_to_parser","","Given tts and the ParseSess, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"char_lit","","Parse a string representing a character literal into its final form. Rather than just accepting/rejecting a given literal, unescapes it as well. Can take any slice prefixed by a character escape. Returns the character and the number of characters consumed.",null,null],[5,"str_lit","","Parse a string representing a string literal into its final form. Does unescaping.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The only operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[0,"parser","","",null,null],[3,"Restrictions","syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",134,null],[12,"token","","the current token:",134,null],[12,"span","","the span of the current token:",134,null],[12,"prev_span","","the span of the previous token:",134,null],[12,"tokens_consumed","","",134,null],[12,"restrictions","","",134,null],[12,"quote_depth","","",134,null],[12,"reader","","",134,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress extra detail when the same error is seen twice",134,null],[12,"directory","","Used to determine the path to externally loaded source files",134,null],[12,"open_braces","","Stack of open delimiters and their spans. Used for error message.",134,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the name is not known. This does not change while the parser is descending into modules, and sub-parsers have new values for this name.",134,null],[12,"expected_tokens","","",134,null],[12,"tts","","",134,null],[12,"desugar_doc_comments","","",134,null],[12,"allow_interpolated_tts","","",134,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",135,null],[12,"path_exists","","",135,null],[12,"result","","",135,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",136,null],[12,"directory_ownership","","",136,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",137,null],[12,"help_msg","","",137,null],[4,"PathStyle","","How to parse a path. There are three different kinds of paths, all of which are parsed somewhat differently.",null,null],[13,"Mod","","A path with no type parameters, e.g. `foo::bar::Baz`, used in imports or visibilities.",138,null],[13,"Type","","A path with a lifetime and type parameters, with no double colons before the type parameters; e.g. `foo::bar<'a>::Baz<T>`, used in types. Paths using this style can be passed into macros expecting `path` nonterminals.",138,null],[13,"Expr","","A path with a lifetime and type parameters with double colons before the type parameters; e.g. `foo::bar::<'a>::Baz::<T>`, used in expressions or patterns.",138,null],[4,"SemiColonMode","","",null,null],[13,"Break","","",139,null],[13,"Ignore","","",139,null],[4,"TokenType","","",null,null],[13,"Token","","",140,null],[13,"Keyword","","",140,null],[13,"Operator","","",140,null],[4,"LhsExpr","","",null,null],[13,"NotYetParsed","","",141,null],[13,"AttributesParsed","","",141,null],[13,"AlreadyParsed","","",141,null],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"cmp","","",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"ordering"}}],[11,"hash","","",142,null],[18,"RESTRICTION_STMT_EXPR","","",142,null],[18,"RESTRICTION_NO_STRUCT_LITERAL","","",142,null],[11,"empty","","Returns an empty set of flags.",142,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",142,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",142,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",142,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",142,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if all of the flags in `other` are contained within `self`.",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",142,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"not","","Returns the complement of this set of flags.",142,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"pathstyle"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"semicolonmode"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"semicolonmode"}],"output":{"name":"bool"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"from","","",141,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",141,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"new","","",134,{"inputs":[{"name":"parsesess"},{"name":"box"},{"name":"option"},{"name":"bool"}],"output":{"name":"self"}}],[11,"token_to_string","","Convert a token to a string using self's reader",134,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self's reader",134,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"this_token_descr","","",134,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unexpected_last","","",134,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"unexpected","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"expect","","Expect and consume the token t. Signal an error if the next token is not t.",134,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible, then consume it; if inedible, then return without consuming anything.  Signal a fatal error if next token is unexpected.",134,null],[11,"parse_ident","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"check","","Check if the next token is `tok`, and return `true` if so.",134,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given token was present, false otherwise.",134,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"check_keyword","","",134,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword","","If the next token is the given keyword, eat it and return true. Otherwise, return false.",134,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword_noexpect","","",134,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"check_contextual_keyword","","",134,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"eat_contextual_keyword","","",134,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"expect_keyword","","If the given word is not a keyword, signal an error. If the next token is not the given word, signal an error. Otherwise, eat it.",134,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"presult"}}],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",134,{"inputs":[{"name":"self"}],"output":null}],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",134,{"inputs":[{"name":"self"}],"output":null}],[11,"expect_no_suffix","","",134,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"option"}],"output":null}],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it with a single > and continue. If a GT is not seen, signal an error.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt_or_return","","",134,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping before the '>'.",134,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt","","",134,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt_or_return","","",134,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees, passes through any errors encountered. Used for error recovery.",134,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",134,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",134,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"vec"}}],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",134,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq","","",134,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"bump","","Advance the parser by one token",134,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",134,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when consuming a part of a token. For example a single `<` from `<<`.",134,{"inputs":[{"name":"self"},{"name":"token"},{"name":"bytepos"},{"name":"bytepos"}],"output":null}],[11,"look_ahead","","",134,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[11,"fatal","","",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",134,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal_help","","",134,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"bug","","",134,null],[11,"warn","","",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"span_warn","","",134,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err","","",134,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err_help","","",134,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_bug","","",134,null],[11,"abort_if_errors","","",134,{"inputs":[{"name":"self"}],"output":null}],[11,"diagnostic","","",134,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function type?",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_lifetime","","",134,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"parse_for_in_type","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_impl_trait_type","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty_path","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",134,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"parse_unsafety","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_trait_item","","Parse the items in a trait declaration",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_trait_items","","Parse the items in a trait declaration",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_mt","","Parse a possibly mutable type",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty","","Parse a type.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_borrowed_pointee","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ptr","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"is_named_argument","","",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require identifier names.",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_arg","","Parse a single function argument",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"maybe_parse_fixed_length_of_vec","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lit","","Matches lit = true | false | token_lit",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_pat_literal_maybe_minus","","matches '-' lit | lit",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segment_ident","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_qualified_path","","Parses qualified path.",134,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"presult"}}],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the mode. The `mode` parameter determines whether lifetimes, types, and/or bounds are permitted and whether `::` must precede type parameter groups.",134,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"presult"}}],[11,"parse_path_segments_without_colons","","Examples: - `a::b<T,U>::c<V,W>` - `a::b<T,U>::c(V) -> W` - `a::b<T,U>::c(V)`",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segments_with_colons","","Examples: - `a::b::<T,U>::c`",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segments_without_types","","Examples: - `a::b::c`",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lifetime","","Parses a single lifetime Matches lifetime = LIFETIME",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  = lifetime [':' lifetimes]`",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty one too, but putting that in there messes up the grammar....",134,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"parse_mutability","","Parse mutability (`mut` or nothing).",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_field_name","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_field","","Parse ident (COLON expr)?",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"mk_expr","","",134,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"},{"name":"exprkind"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"mk_unary","","",134,{"inputs":[{"name":"self"},{"name":"unop"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_binary","","",134,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_call","","",134,{"inputs":[{"name":"self"},{"name":"p"},{"name":"vec"}],"output":{"name":"exprkind"}}],[11,"mk_index","","",134,{"inputs":[{"name":"self"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_range","","",134,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"rangelimits"}],"output":{"name":"presult"}}],[11,"mk_field","","",134,{"inputs":[{"name":"self"},{"name":"p"},{"name":"spannedident"}],"output":{"name":"exprkind"}}],[11,"mk_tup_field","","",134,{"inputs":[{"name":"self"},{"name":"p"},{"name":"spanned"}],"output":{"name":"exprkind"}}],[11,"mk_assign_op","","",134,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_mac_expr","","",134,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"},{"name":"mac_"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"mk_lit_u32","","",134,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"parse_block_expr","","Parse a block or unsafe block",134,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"blockcheckmode"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr_with","","",134,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"check_unknown_macro_variable","","",134,{"inputs":[{"name":"self"}],"output":null}],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style repetition token (+ or *).",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_token_tree","","parse a single token tree from the input.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_all_token_trees","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr","","Parse an associative expression",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",134,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"lhsexpr"}],"output":{"name":"presult"}}],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",134,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",134,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_lambda_expr","","",134,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"captureby"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_else_expr","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",134,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",134,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",134,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_loop_expr","","",134,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_arm","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_expr","","Parse an expression",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"with_res","","Evaluate the closure with restrictions in place.",134,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"f"}],"output":{"name":"t"}}],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",134,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_pat","","Parse a pattern.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_stmt","","Parse a statement. This stops just before trailing semicolons on everything but items. e.g. a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_block","","Parse a block. No inner attrs are allowed.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_full_stmt","","Parse a statement, including the trailing semicolon.",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where clauses are not parsed here, and must be added later via `parse_where_clause()`.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_fn_front_matter","","parses all the \"front matter\" for a `fn` declaration, up to and including the `fn` keyword:",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_impl_item","","Parse an impl item.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_record_struct_body","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_tuple_struct_body","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_single_struct_field","","Parse a structure field declaration",134,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"submod_path_from_attr","","",134,null],[11,"default_submod_path","","Returns either a path to a module, or .",134,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main entry point for the parser.",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_optional_str","","",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"lexer","syntax::parse","",null,null],[3,"TokenAndSpan","syntax::parse::lexer","",null,null],[12,"tok","","",143,null],[12,"sp","","",143,null],[3,"StringReader","","",null,null],[12,"span_diagnostic","","",144,null],[12,"next_pos","","The absolute offset within the codemap of the next character to read",144,null],[12,"pos","","The absolute offset within the codemap of the current character",144,null],[12,"col","","The column of the next character to read",144,null],[12,"ch","","The current character (which has been read from self.pos)",144,null],[12,"filemap","","",144,null],[12,"terminator","","If Some, stop reading the source at this position (inclusive).",144,null],[12,"save_new_lines","","Whether to record new-lines in filemap. This is only necessary the first time a filemap is lexed. If part of a filemap is being re-lexed, this should be set to false.",144,null],[12,"peek_tok","","",144,null],[12,"peek_span","","",144,null],[12,"fatal_errs","","",144,null],[5,"is_pattern_whitespace","","",null,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntax::parse::lexer::comments","",null,null],[12,"style","","",145,null],[12,"lines","","",145,null],[12,"pos","","",145,null],[3,"Literal","","",null,null],[12,"lit","","",146,null],[12,"pos","","",146,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",147,null],[13,"Trailing","","Code exists to the left of the comment",147,null],[13,"Mixed","","Code before /* foo */ and after the comment",147,null],[13,"BlankLine","","Just a manual blank line \"\\n\\n\", for layout",147,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"commentstyle"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[8,"Reader","syntax::parse::lexer","",null,null],[10,"is_eof","","",148,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"try_next_token","","",148,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_token","","",148,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[10,"fatal","","Report a fatal error with the current span.",148,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[10,"err","","Report a non-fatal error with the current span.",148,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"emit_fatal_errors","","",148,{"inputs":[{"name":"self"}],"output":null}],[11,"unwrap_or_abort","","",148,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"tokenandspan"}}],[10,"peek","","",148,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"try_real_token","","Get a token the parser cares about.",148,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"real_token","","",148,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",143,{"inputs":[],"output":{"name":"self"}}],[11,"is_eof","","",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",144,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fatal","","",144,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",144,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"emit_fatal_errors","","",144,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",144,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"new_raw","","For comments.rs, which hackily pokes into next_pos and ch",144,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",144,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"ch_is","","",144,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fatal_span","","Report a fatal lexical error with a given span.",144,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err_span","","Report a lexical error with a given span.",144,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start` up to but excluding `self.pos`, meaning the slice does not include the character `self.ch`.",144,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"f"}],"output":{"name":"t"}}],[11,"name_from","","Create a Name from a given offset to the current offset, each adjusted 1 towards each other (assumes that on either side there is a single-byte delimiter).",144,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"name_from_to","","As name_from, with an explicit endpoint.",144,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"bump","","Advance the StringReader by one character. If a newline is discovered, add it to the FileMap's list of line start offsets.",144,{"inputs":[{"name":"self"}],"output":null}],[11,"nextch","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nextch_is","","",144,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"nextnextch","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nextnextch_is","","",144,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[0,"token","syntax::parse","",null,null],[4,"BinOpToken","syntax::parse::token","",null,null],[13,"Plus","","",149,null],[13,"Minus","","",149,null],[13,"Star","","",149,null],[13,"Slash","","",149,null],[13,"Percent","","",149,null],[13,"Caret","","",149,null],[13,"And","","",149,null],[13,"Or","","",149,null],[13,"Shl","","",149,null],[13,"Shr","","",149,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",150,null],[13,"Bracket","","A square bracket: `[` or `]`",150,null],[13,"Brace","","A curly brace: `{` or `}`",150,null],[13,"NoDelim","","An empty delimiter",150,null],[4,"Lit","","",null,null],[13,"Byte","","",151,null],[13,"Char","","",151,null],[13,"Integer","","",151,null],[13,"Float","","",151,null],[13,"Str_","","",151,null],[13,"StrRaw","","",151,null],[13,"ByteStr","","",151,null],[13,"ByteStrRaw","","",151,null],[4,"Token","","",null,null],[13,"Eq","","",152,null],[13,"Lt","","",152,null],[13,"Le","","",152,null],[13,"EqEq","","",152,null],[13,"Ne","","",152,null],[13,"Ge","","",152,null],[13,"Gt","","",152,null],[13,"AndAnd","","",152,null],[13,"OrOr","","",152,null],[13,"Not","","",152,null],[13,"Tilde","","",152,null],[13,"BinOp","","",152,null],[13,"BinOpEq","","",152,null],[13,"At","","",152,null],[13,"Dot","","",152,null],[13,"DotDot","","",152,null],[13,"DotDotDot","","",152,null],[13,"Comma","","",152,null],[13,"Semi","","",152,null],[13,"Colon","","",152,null],[13,"ModSep","","",152,null],[13,"RArrow","","",152,null],[13,"LArrow","","",152,null],[13,"FatArrow","","",152,null],[13,"Pound","","",152,null],[13,"Dollar","","",152,null],[13,"Question","","",152,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",152,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",152,null],[13,"Literal","","",152,null],[13,"Ident","","",152,null],[13,"Underscore","","",152,null],[13,"Lifetime","","",152,null],[13,"Interpolated","","",152,null],[13,"DocComment","","Doc comment",152,null],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT)",152,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",152,null],[13,"Whitespace","","Whitespace",152,null],[13,"Comment","","Comment",152,null],[13,"Shebang","","",152,null],[13,"Eof","","",152,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",153,null],[13,"NtBlock","","",153,null],[13,"NtStmt","","",153,null],[13,"NtPat","","",153,null],[13,"NtExpr","","",153,null],[13,"NtTy","","",153,null],[13,"NtIdent","","",153,null],[13,"NtMeta","","Stuff inside brackets for attributes",153,null],[13,"NtPath","","",153,null],[13,"NtTT","","",153,null],[13,"NtArm","","",153,null],[13,"NtImplItem","","",153,null],[13,"NtTraitItem","","",153,null],[13,"NtGenerics","","",153,null],[13,"NtWhereClause","","",153,null],[13,"NtArg","","",153,null],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"encode","","",149,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",149,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",149,null],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"encode","","",150,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",150,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",150,null],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"encode","","",151,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",151,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",151,null],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"short_name","","",151,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"encode","","",152,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",152,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",152,null],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_like_gt","","Returns `true` if the token starts with '>'.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lit","","Returns `true` if the token is any literal",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ident","","Returns `true` if the token is an identifier.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_doc_comment","","Returns `true` if the token is a documentation comment.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_interpolated","","Returns `true` if the token is interpolated.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path","","Returns `true` if the token is an interpolated path.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_qpath_start","","",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path_start","","",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",152,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_path_segment_keyword","","",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"nonterminal"}}],[11,"encode","","",153,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",153,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"hash","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"attr","syntax::parse","",null,null],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should be preceded by an exclamation mark, but we accept and warn about one terminated by a semicolon. matches inner_attrs*",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_meta_item","","Per RFC#1559, matches the following grammar:",134,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"common","syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntax::parse::common","SeqSep : a sequence separator (token) and whether a trailing separator is allowed.",null,null],[12,"sep","","",154,null],[12,"trailing_sep_allowed","","",154,null],[11,"trailing_allowed","","",154,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",154,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntax::parse::classify","Does this expression require a semicolon to be treated as a statement? The negation of this: 'can this expression be used as a statement without a semicolon' -- is used as an early-bail-out in the parser so that, for instance,     if true {...} else {...}      |x| 5 isn't parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"expr_is_simple_block","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it. note that in one case (stmt_semi), we've already seen the semicolon, and thus don't need another.",null,{"inputs":[{"name":"stmtkind"}],"output":{"name":"bool"}}],[0,"obsolete","syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of these syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",155,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[10,"report","","",155,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"obsoletesyntax"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",134,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[11,"report","","",134,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[6,"PResult","syntax::parse","",null,null],[11,"new","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"with_span_handler","","",131,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",131,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"directory"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"directoryownership"}}],[0,"ptr","syntax","The AST pointer",null,null],[3,"P","syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P<T>` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"hash","","",157,null],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"lt","","",157,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"le","","",157,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"gt","","",157,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ge","","",157,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"cmp","","",157,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"ordering"}}],[11,"and_then","","Move out of the pointer. Intended for chaining transformations not covered by `map`.",157,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"unwrap","","Equivalent to and_then(|x| x)",157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",157,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",157,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",157,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",157,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",157,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",157,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","Creates an empty `P<[T]>`.",157,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"from","","",157,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",157,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",157,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",157,null],[11,"encode","","",157,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",157,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"show_span","syntax","Span debugger",null,null],[5,"run","syntax::show_span","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntax","",null,null],[5,"injected_crate_name","syntax::std_inject","",null,{"inputs":[{"name":"crate"}],"output":{"name":"option"}}],[5,"maybe_inject_crates_ref","","",null,{"inputs":[{"name":"parsesess"},{"name":"crate"},{"name":"option"}],"output":{"name":"crate"}}],[0,"str","syntax","",null,null],[5,"char_at","syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[0,"symbol","syntax","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e. given a value, one can easily find the type, and vice versa.",null,null],[3,"Symbol","syntax::symbol","A symbol is an interned or gensymed string.",null,null],[3,"Interner","","",null,null],[3,"InternedString","","Represents a string stored in the thread-local interner. Because the interner lives for the life of the thread, this can be safely treated as an immortal string, as long as it never crosses between threads.",null,null],[0,"keywords","","",null,null],[3,"Keyword","syntax::symbol::keywords","",null,null],[17,"Invalid","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Default","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[17,"CrateRoot","","",null,null],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ident","","",158,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"name","","",158,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"clone","syntax::symbol","",159,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",159,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"option"}}],[11,"lt","","",159,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"le","","",159,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"gt","","",159,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ge","","",159,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"cmp","","",159,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"ordering"}}],[11,"hash","","",159,null],[11,"intern","","Maps a string to its interned representation.",159,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"gensym","","gensym's a new usize, using the current interner.",159,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"as_str","","",159,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"as_u32","","",159,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",159,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",159,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"interner"}}],[11,"new","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"intern","","",160,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"symbol"}}],[11,"get","","",160,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"str"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"hash","","",161,null],[11,"partial_cmp","","",161,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"option"}}],[11,"lt","","",161,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",161,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",161,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",161,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"cmp","","",161,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"deref","","",161,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",161,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",161,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"test","syntax","",null,null],[5,"modify_for_testing","syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"resolver"},{"name":"bool"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"tokenstream","syntax","Token Streams",null,null],[3,"Delimited","syntax::tokenstream","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",162,null],[12,"open_span","","The span covering the opening delimiter",162,null],[12,"tts","","The delimited sequence of token trees",162,null],[12,"close_span","","The span covering the closing delimiter",162,null],[3,"SequenceRepetition","","A sequence of token trees",null,null],[12,"tts","","The sequence of token trees",163,null],[12,"separator","","The optional separator",163,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",163,null],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",163,null],[3,"TokenStream","","Token Streams",null,null],[3,"Iter","","",null,null],[3,"Split","","",null,null],[4,"KleeneOp","","A Kleene-style repetition operator for token sequences.",null,null],[13,"ZeroOrMore","","",164,null],[13,"OneOrMore","","",164,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",165,null],[13,"Delimited","","A delimited sequence of token trees",165,null],[13,"Sequence","","A kleene-style repetition sequence with a span",165,null],[4,"InternalTS","","",null,null],[13,"Empty","","",166,null],[13,"Leaf","","",166,null],[12,"tts","syntax::tokenstream::InternalTS","",166,null],[12,"offset","","",166,null],[12,"len","","",166,null],[12,"sp","","",166,null],[13,"Node","syntax::tokenstream","",166,null],[12,"left","syntax::tokenstream::InternalTS","",166,null],[12,"right","","",166,null],[12,"len","","",166,null],[12,"sp","","",166,null],[11,"clone","syntax::tokenstream","",162,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"encode","","",162,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",162,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",162,null],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_token","","Returns the opening delimiter as a token.",162,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"close_token","","Returns the closing delimiter as a token.",162,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"open_tt","","Returns the opening delimiter as a token tree.",162,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"close_tt","","Returns the closing delimiter as a token tree.",162,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"subtrees","","Returns the token trees inside the delimiters.",162,null],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"sequencerepetition"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"encode","","",163,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",163,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",163,null],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"kleeneop"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"encode","","",164,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",164,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"encode","","",165,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",165,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"len","","",165,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_tt","","",165,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"get_span","","Returns the `Span` corresponding to this token tree.",165,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"parse","","Use this token tree as a matcher to parse given tts.",165,null],[11,"eq_unspanned","","Check if this TokenTree is equal to the other, regardless of span information.",165,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"span","","Retrieve the TokenTree's span.",165,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq_token","","Indicates if the stream is a token that is equal to the provided token.",165,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"is_ident","","Indicates if the token is an identifier.",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"maybe_ident","","Returns an identifier.",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"maybe_lit","","Returns a Token literal.",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"maybe_str","","Returns an AST string literal.",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"hash","","",167,null],[11,"encode","","",167,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",167,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"internalts"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"internalts"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"internalts"}],"output":{"name":"bool"}}],[11,"hash","","",166,null],[11,"encode","","",166,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",166,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"mk_empty","","",167,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"from_tts","","Convert a vector of `TokenTree`s into a `TokenStream`.",167,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"from_tokens","","Convert a vector of Tokens into a TokenStream.",167,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"respan","","Manually change a TokenStream's span.",167,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokenstream"}}],[11,"concat","","Concatenates two TokenStreams into a new TokenStream.",167,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"is_empty","","Indicate if the TokenStream is empty.",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Return a TokenStream's length.",167,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_vec","","Convert a TokenStream into a vector of borrowed TokenTrees.",167,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_tts","","Convert a TokenStream into a vector of TokenTrees (by cloning the TokenTrees). (This operation is an O(n) deep copy of the underlying structure.)",167,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"span","","Return the TokenStream's span.",167,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"iter","","Returns an iterator over a TokenStream (as a sequence of TokenTrees).",167,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"split","","Splits a TokenStream based on the provided `&TokenTree -> bool` predicate.",167,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"slice","","Produce a slice of the input TokenStream from the `from` index, inclusive, to the `to` index, non-inclusive.",167,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"tokenstream"}}],[11,"slice_from","","Slice starting at the provided index, inclusive.",167,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"tokenstream"}}],[11,"slice_to","","Slice up to the provided index, non-inclusive.",167,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"tokenstream"}}],[11,"is_delimited","","Indicates where the stream is a single, delimited expression (e.g., `(a,b,c)` or `{a,b,c}`).",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"maybe_delimited","","Returns the inside of the delimited term as a new TokenStream.",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_ident","","Indicates if the stream is exactly one identifier.",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"maybe_ident","","Returns an identifier",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_unspanned","","Compares two TokenStreams, checking equality without regarding span information.",167,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"as_delimited_stream","","Convert a vector of TokenTrees into a parentheses-delimited TokenStream.",167,{"inputs":[{"name":"vec"},{"name":"delimtoken"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",167,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"index","","",166,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"tokentree"}}],[0,"visit","syntax","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[4,"FnKind","syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",170,null],[13,"Method","","fn foo(&self)",170,null],[13,"Closure","","|x, y| body",170,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_sp_ident","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",171,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_ident","","",171,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",171,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",171,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",171,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",171,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",171,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",171,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",171,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",171,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",171,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_post","","",171,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",171,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",171,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",171,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",171,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",171,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",171,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",171,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",171,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",171,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",171,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",171,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",171,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",171,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",171,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",171,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_path","","",171,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",171,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_segment","","",171,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",171,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",171,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",171,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_macro_def","","",171,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":null}],[11,"visit_vis","","",171,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_fn_ret_ty","","",171,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[0,"print","syntax","",null,null],[0,"pp","syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton's Mesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","In case you do not have the paper, here is an explanation of what's going on.",null,null],[12,"out","","",172,null],[4,"Breaks","","",null,null],[13,"Consistent","","",173,null],[13,"Inconsistent","","",173,null],[4,"Token","","",null,null],[13,"String","","",174,null],[13,"Break","","",174,null],[13,"Begin","","",174,null],[13,"End","","",174,null],[13,"Eof","","",174,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",175,null],[13,"Broken","","",175,null],[5,"mk_printer","","",null,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[5,"rbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[5,"ibox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"cbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"break_offset","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[5,"end","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"eof","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"huge_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"zero_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"spaces","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"zerobreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"space","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak_tok_offset","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[5,"hardbreak_tok","","",null,{"inputs":[],"output":{"name":"token"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"breaks"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"breaktoken"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"begintoken"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"is_eof","","",174,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hardbreak_tok","","",174,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"printstackbreak"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"last_token","","",172,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"replace_last_token","","",172,{"inputs":[{"name":"self"},{"name":"token"}],"output":null}],[11,"pretty_print","","",172,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_stream","","",172,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"scan_push","","",172,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"scan_pop","","",172,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_top","","",172,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_pop_bottom","","",172,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_right","","",172,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_left","","",172,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"check_stack","","",172,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"print_newline","","",172,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"indent","","",172,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"get_top","","",172,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"print_str","","",172,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"print","","",172,{"inputs":[{"name":"self"},{"name":"token"},{"name":"isize"}],"output":{"name":"result"}}],[0,"pprust","syntax::print","",null,null],[3,"NoAnn","syntax::print::pprust","",null,null],[3,"CurrentCommentAndLiteral","","",null,null],[12,"cur_cmnt","","",179,null],[12,"cur_lit","","",179,null],[3,"State","","",null,null],[12,"s","","",180,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",181,null],[13,"NodeName","","",181,null],[13,"NodeBlock","","",181,null],[13,"NodeItem","","",181,null],[13,"NodeSubItem","","",181,null],[13,"NodeExpr","","",181,null],[13,"NodePat","","",181,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that it can scan the input text for comments and literals to copy forward.",null,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_list_item_to_string","","",null,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"INDENT_UNIT","","",null,null],[17,"DEFAULT_COLUMNS","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",182,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",182,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[8,"PrintState","","",null,null],[10,"writer","","",183,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[10,"boxes","","",183,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"comments","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"cur_cmnt_and_lit","","",183,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[10,"literals","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"word_space","","",183,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"popen","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pclose","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_begin","","",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_end","","",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bol","","",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hardbreak_if_not_bol","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"rbox","","",183,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[11,"ibox","","",183,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"end","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"commasep","","",183,null],[11,"next_lit","","",183,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"maybe_print_comment","","",183,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"print_comment","","",183,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"result"}}],[11,"next_comment","","",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_literal","","",183,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"result"}}],[11,"print_string","","",183,{"inputs":[{"name":"self"},{"name":"str"},{"name":"strstyle"}],"output":{"name":"result"}}],[11,"print_inner_attributes","","",183,null],[11,"print_inner_attributes_no_trailing_hardbreak","","",183,null],[11,"print_outer_attributes","","",183,null],[11,"print_inner_attributes_inline","","",183,null],[11,"print_outer_attributes_inline","","",183,null],[11,"print_either_attributes","","",183,null],[11,"print_attribute","","",183,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"result"}}],[11,"print_attribute_inline","","",183,{"inputs":[{"name":"self"},{"name":"attribute"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_meta_list_item","","",183,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"result"}}],[11,"print_meta_item","","",183,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"space_if_not_bol","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"nbsp","","",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"noann"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"new_from_input","","",180,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",180,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",180,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[11,"boxes","","",180,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"comments","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",180,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cbox","","",180,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"word_nbsp","","",180,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",180,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bclose_","","",180,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",180,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",180,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"break_offset_if_not_bol","","",180,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",180,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",180,null],[11,"commasep_exprs","","",180,null],[11,"print_mod","","",180,null],[11,"print_foreign_mod","","",180,null],[11,"print_opt_lifetime","","",180,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",180,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",180,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",180,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_enum_def","","",180,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",180,null],[11,"print_visibility","","",180,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",180,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be meaning-preserving. A quick hack that might help would be to look at the spans embedded in the TTs to decide where to put spaces and newlines. But it'd be better to parse these according to the grammar of the appropriate macro, transcribe back into the grammar we just parsed from, and then pretty-print the resulting AST nodes (so, e.g., we print expression arguments as expressions). It can be done! I think.",180,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"result"}}],[11,"print_tts","","",180,null],[11,"print_variant","","",180,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"print_method_sig","","",180,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"methodsig"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_trait_item","","",180,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",180,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",180,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"result"}}],[11,"print_block","","",180,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",180,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_with_attrs","","",180,null],[11,"print_block_unclosed_indent","","",180,{"inputs":[{"name":"self"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",180,null],[11,"print_block_maybe_unclosed","","",180,null],[11,"print_if","","",180,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",180,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_mac","","",180,{"inputs":[{"name":"self"},{"name":"mac"},{"name":"delimtoken"}],"output":{"name":"result"}}],[11,"check_expr_bin_needs_paren","","",180,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"print_expr_maybe_paren","","",180,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",180,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",180,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_ident","","",180,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"result"}}],[11,"print_usize","","",180,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",180,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",180,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_pat","","",180,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",180,{"inputs":[{"name":"self"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"option"},{"name":"generics"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_fn_args_and_ret","","",180,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_fn_block_args","","",180,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_capture_clause","","",180,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"result"}}],[11,"print_bounds","","",180,null],[11,"print_lifetime","","",180,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_bounds","","",180,null],[11,"print_generics","","",180,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",180,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",180,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_view_path","","",180,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"result"}}],[11,"print_mutability","","",180,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",180,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_arg","","",180,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_fn_output","","",180,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",180,{"inputs":[{"name":"self"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",180,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",180,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",180,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",180,{"inputs":[{"name":"self"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",180,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"result"}}],[0,"ext","syntax","",null,null],[0,"base","syntax::ext","",null,null],[3,"MacEager","syntax::ext::base","`MacResult` implementation for the common case where you've already built each form of AST that you might return.",null,null],[12,"expr","","",185,null],[12,"pat","","",185,null],[12,"items","","",185,null],[12,"impl_items","","",185,null],[12,"trait_items","","",185,null],[12,"stmts","","",185,null],[12,"ty","","",185,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue after hitting errors.",null,null],[3,"DummyResolver","","",null,null],[3,"ModuleData","","",null,null],[12,"mod_path","","",186,null],[12,"directory","","",186,null],[3,"ExpansionData","","",null,null],[12,"mark","","",187,null],[12,"depth","","",187,null],[12,"backtrace","","",187,null],[12,"module","","",187,null],[12,"directory_ownership","","",187,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go; when a macro expansion occurs, the resulting nodes have the backtrace() -> expn_info of their expansion context stored into their span.",null,null],[12,"parse_sess","","",188,null],[12,"ecfg","","",188,null],[12,"crate_root","","",188,null],[12,"resolver","","",188,null],[12,"resolve_err_count","","",188,null],[12,"current_expansion","","",188,null],[3,"ChangeSpan","","",null,null],[12,"span","","",189,null],[4,"Annotatable","","",null,null],[13,"Item","","",190,null],[13,"TraitItem","","",190,null],[13,"ImplItem","","",190,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items based upon it.",191,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it in-place. Also allows decoration, i.e., creating new items.",191,null],[13,"ProcMacro","","A function-like procedural macro. TokenStream -> TokenStream.",191,null],[13,"AttrProcMacro","","An attribute-like procedural macro. TokenStream, TokenStream -> TokenStream. The first TokenSteam is the attribute, the second is the annotated item. Allows modification of the input items and adding new items, similar to MultiModifier, but uses TokenStreams, rather than AST nodes.",191,null],[13,"NormalTT","","A normal, function-like syntax extension.",191,null],[13,"IdentTT","","A function-like syntax extension that has an extra ident before the block.",191,null],[13,"CustomDerive","","",191,null],[4,"Determinacy","","",null,null],[13,"Determined","","",192,null],[13,"Undetermined","","",192,null],[5,"expr_to_spanned_string","","Extract a string literal from the macro expanded version of `expr`, emitting `err_msg` if `expr` is not a string literal. This does not stop compilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function returns even when `tts` is non-empty, macros that *need* to stop compilation should call `cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be done as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this is not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a parsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",193,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[8,"MultiItemModifier","","",null,null],[10,"expand","","",194,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"name":"vec"}}],[8,"ProcMacro","","",null,null],[10,"expand","","",195,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[8,"AttrProcMacro","","",null,null],[10,"expand","","",196,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",197,null],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",198,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"box"}}],[8,"MacResult","","The result of a macro expansion. The return values of the various methods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",199,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","Create zero or more items.",199,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",199,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","Create zero or more trait items.",199,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","Create a pattern.",199,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",199,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",199,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[8,"Resolver","","",null,null],[10,"next_node_id","","",200,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"get_module_scope","","",200,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[10,"eliminate_crate_var","","",200,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"is_whitelisted_legacy_custom_derive","","",200,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[10,"visit_expansion","","",200,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"expansion"}],"output":null}],[10,"add_ext","","",200,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"rc"}],"output":null}],[10,"add_expansions_at_stmt","","",200,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"vec"}],"output":null}],[10,"resolve_imports","","",200,{"inputs":[{"name":"self"}],"output":null}],[10,"find_attr_invoc","","",200,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[10,"resolve_macro","","",200,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"annotatable"}}],[11,"attrs","","",190,null],[11,"map_attrs","","",190,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"expect_item","","",190,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"map_item_or","","",190,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"annotatable"}}],[11,"expect_trait_item","","",190,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"expect_impl_item","","",190,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"into","","",190,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","",185,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",185,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",185,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",185,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",185,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"trait_items","","",185,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",185,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",185,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"dummyresult"}}],[11,"any","","Create a default MacResult that can be anything.",201,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",201,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",201,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",201,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",201,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",201,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"determinacy"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_node_id","","",202,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"get_module_scope","","",202,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[11,"eliminate_crate_var","","",202,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"is_whitelisted_legacy_custom_derive","","",202,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"visit_expansion","","",202,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"expansion"}],"output":null}],[11,"add_ext","","",202,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"rc"}],"output":null}],[11,"add_expansions_at_stmt","","",202,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"vec"}],"output":null}],[11,"resolve_imports","","",202,{"inputs":[{"name":"self"}],"output":null}],[11,"find_attr_invoc","","",202,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"resolve_macro","","",202,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"moduledata"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"expansiondata"}}],[11,"new","","",188,{"inputs":[{"name":"parsesess"},{"name":"expansionconfig"},{"name":"resolver"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",188,{"inputs":[{"name":"self"}],"output":{"name":"macroexpander"}}],[11,"monotonic_expander","","Returns a `Folder` that deeply expands all macros and assigns all node ids in an AST node. Once node ids are assigned, the node may not be expanded, removed, or otherwise modified.",188,{"inputs":[{"name":"self"}],"output":{"name":"macroexpander"}}],[11,"new_parser_from_tts","","",188,null],[11,"codemap","","",188,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"parse_sess","","",188,{"inputs":[{"name":"self"}],"output":{"name":"parsesess"}}],[11,"cfg","","",188,{"inputs":[{"name":"self"}],"output":{"name":"crateconfig"}}],[11,"call_site","","",188,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"backtrace","","",188,{"inputs":[{"name":"self"}],"output":{"name":"expnid"}}],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",188,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"bt_push","","",188,{"inputs":[{"name":"self"},{"name":"expninfo"}],"output":null}],[11,"bt_pop","","",188,{"inputs":[{"name":"self"}],"output":null}],[11,"struct_span_warn","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",188,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping compilation.",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_warn","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",188,null],[11,"span_bug","","",188,null],[11,"bug","","",188,null],[11,"trace_macros","","",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_trace_macros","","",188,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ident_of","","",188,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ident"}}],[11,"std_path","","",188,null],[11,"name_of","","",188,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"name"}}],[11,"new_span","","",189,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"fold_mac","","",189,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"build","syntax::ext","",null,null],[8,"AstBuilder","syntax::ext::build","",null,null],[10,"path","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_ident","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[10,"path_global","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_all","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[10,"qpath","","",203,null],[10,"qpath_all","","",203,null],[10,"ty_mt","","",203,{"inputs":[{"name":"self"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[10,"ty","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"name":"p"}}],[10,"ty_path","","",203,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[10,"ty_sum","","",203,{"inputs":[{"name":"self"},{"name":"path"},{"name":"typarambounds"}],"output":{"name":"p"}}],[10,"ty_ident","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"ty_rptr","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_ptr","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_option","","",203,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"ty_infer","","",203,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"ty_vars","","",203,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[10,"ty_vars_global","","",203,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[10,"typaram","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"typarambounds"},{"name":"option"}],"output":{"name":"typaram"}}],[10,"trait_ref","","",203,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[10,"poly_trait_ref","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[10,"typarambound","","",203,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[10,"lifetime","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[10,"lifetime_def","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[10,"stmt_expr","","",203,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_semi","","",203,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let_typed","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let_type_only","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_item","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"block","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"block_expr","","",203,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"name":"p"}}],[10,"expr_path","","",203,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_qpath","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_ident","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_self","","",203,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_binary","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_deref","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_unary","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_addr_of","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_mut_addr_of","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_field_access","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_tup_field_access","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_call","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_ident","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_global","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_method_call","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_block","","",203,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_cast","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"field_imm","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[10,"expr_struct","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_struct_ident","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_lit","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"name":"p"}}],[10,"expr_usize","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_isize","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[10,"expr_u8","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[10,"expr_u32","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[10,"expr_bool","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[10,"expr_vec","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_vec_ng","","",203,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_vec_slice","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_str","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[10,"expr_some","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_none","","",203,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_break","","",203,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_tuple","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_fail","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[10,"expr_unreachable","","",203,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_ok","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_err","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_try","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"name":"p"}}],[10,"pat_wild","","",203,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_lit","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_ident","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"pat_ident_binding_mode","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[10,"pat_path","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"p"}}],[10,"pat_tuple_struct","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_struct","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_tuple","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_some","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_none","","",203,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_ok","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_err","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"arm","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[10,"arm_unreachable","","",203,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[10,"expr_match","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_if","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[10,"expr_loop","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda_fn_decl","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"span"}],"output":{"name":"p"}}],[10,"lambda","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda0","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda1","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"lambda_stmts","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_0","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_1","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[10,"item","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"itemkind"}],"output":{"name":"p"}}],[10,"arg","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[10,"fn_decl","","",203,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn_poly","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"variant","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[10,"item_enum_poly","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_enum","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[10,"item_struct_poly","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_struct","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[10,"item_mod","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"item_static","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_const","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_ty_poly","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_ty","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[10,"attribute","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[10,"meta_word","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[10,"meta_list_item_word","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[10,"meta_list","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[10,"meta_name_value","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"litkind"}],"output":{"name":"metaitem"}}],[10,"item_use","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_use_simple","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_simple_","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_list","","",203,null],[10,"item_use_glob","","",203,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[11,"path","syntax::ext::base","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"path_global","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_all","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[11,"qpath","","Constructs a qualified path.",188,null],[11,"qpath_all","","Constructs a qualified path.",188,null],[11,"ty_mt","","",188,{"inputs":[{"name":"self"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[11,"ty","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"name":"p"}}],[11,"ty_path","","",188,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[11,"ty_sum","","",188,{"inputs":[{"name":"self"},{"name":"path"},{"name":"typarambounds"}],"output":{"name":"p"}}],[11,"ty_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"ty_rptr","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_ptr","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_option","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"ty_infer","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"typaram","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"typarambounds"},{"name":"option"}],"output":{"name":"typaram"}}],[11,"ty_vars","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"ty_vars_global","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"trait_ref","","",188,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[11,"poly_trait_ref","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[11,"typarambound","","",188,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[11,"lifetime","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[11,"lifetime_def","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[11,"stmt_expr","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_semi","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let_typed","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let_type_only","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_item","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"block_expr","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"block","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"name":"p"}}],[11,"expr_path","","",188,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_qpath","","Constructs a QPath expression.",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_self","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_binary","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_deref","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_unary","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_field_access","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_tup_field_access","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_addr_of","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_mut_addr_of","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_call","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_global","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_method_call","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_block","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"field_imm","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[11,"expr_struct","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_struct_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_lit","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"name":"p"}}],[11,"expr_usize","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_isize","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[11,"expr_u32","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[11,"expr_u8","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[11,"expr_bool","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[11,"expr_vec","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_vec_ng","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_vec_slice","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_str","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[11,"expr_cast","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_some","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_none","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_break","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_tuple","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_fail","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[11,"expr_unreachable","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_ok","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_err","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_try","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"name":"p"}}],[11,"pat_wild","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_lit","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"pat_ident_binding_mode","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[11,"pat_path","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"p"}}],[11,"pat_tuple_struct","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_struct","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_tuple","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_some","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_none","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_ok","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_err","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"arm","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[11,"arm_unreachable","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[11,"expr_match","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_if","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr_loop","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_fn_decl","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"span"}],"output":{"name":"p"}}],[11,"lambda","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda0","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda1","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_stmts","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_0","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_1","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[11,"arg","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[11,"fn_decl","","",188,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"item","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"itemkind"}],"output":{"name":"p"}}],[11,"item_fn_poly","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_fn","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"variant","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[11,"item_enum_poly","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_enum","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[11,"item_struct","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[11,"item_struct_poly","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_mod","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"item_static","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_const","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_ty_poly","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_ty","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"attribute","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[11,"meta_word","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[11,"meta_list_item_word","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[11,"meta_list","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[11,"meta_name_value","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"litkind"}],"output":{"name":"metaitem"}}],[11,"item_use","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_use_simple","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_simple_","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_list","","",188,null],[11,"item_use_glob","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[0,"expand","syntax::ext","",null,null],[3,"Invocation","syntax::ext::expand","",null,null],[12,"kind","","",204,null],[3,"MacroExpander","","",null,null],[12,"cx","","",205,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",206,null],[12,"features","","",206,null],[12,"recursion_limit","","",206,null],[12,"trace_mac","","",206,null],[12,"should_test","","",206,null],[12,"single_step","","",206,null],[12,"keep_macs","","",206,null],[4,"ExpansionKind","","",null,null],[13,"OptExpr","","",207,null],[13,"Expr","","",207,null],[13,"Pat","","",207,null],[13,"Ty","","",207,null],[13,"Stmts","","",207,null],[13,"Items","","",207,null],[13,"TraitItems","","",207,null],[13,"ImplItems","","",207,null],[4,"Expansion","","",null,null],[13,"OptExpr","","",208,null],[13,"Expr","","",208,null],[13,"Pat","","",208,null],[13,"Ty","","",208,null],[13,"Stmts","","",208,null],[13,"Items","","",208,null],[13,"TraitItems","","",208,null],[13,"ImplItems","","",208,null],[4,"InvocationKind","","",null,null],[13,"Bang","","",209,null],[12,"mac","syntax::ext::expand::InvocationKind","",209,null],[12,"ident","","",209,null],[12,"span","","",209,null],[13,"Attr","syntax::ext::expand","",209,null],[12,"attr","syntax::ext::expand::InvocationKind","",209,null],[12,"item","","",209,null],[5,"mark_tts","syntax::ext::expand","",null,null],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"expansionkind"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"expansionkind"}],"output":{"name":"bool"}}],[11,"name","","",207,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"make_opt_expr","","",208,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"make_expr","","",208,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"make_pat","","",208,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"make_ty","","",208,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"make_stmts","","",208,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"make_items","","",208,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"make_trait_items","","",208,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"make_impl_items","","",208,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"fold_with","","",208,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"visit_with","","",208,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"fold_opt_expr","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_expr","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_pat","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_stmt","","",205,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_item","","",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",205,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",205,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"new","","",205,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"expand_crate","","",205,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"parse_expansion","syntax::parse::parser","",134,{"inputs":[{"name":"self"},{"name":"expansionkind"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"ensure_complete_parse","","",134,{"inputs":[{"name":"self"},{"name":"name"},{"name":"str"},{"name":"span"}],"output":null}],[11,"default","syntax::ext::expand","",206,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_asm","","",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_log_syntax","","",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_concat_idents","","",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_trace_macros","","",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_allow_internal_unstable","","",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_custom_derive","","",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_pushpop_unsafe","","",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"placeholders","syntax::ext","",null,null],[3,"PlaceholderExpander","syntax::ext::placeholders","",null,null],[5,"placeholder","","",null,{"inputs":[{"name":"expansionkind"},{"name":"nodeid"}],"output":{"name":"expansion"}}],[11,"new","","",210,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"add","","",210,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"expansion"}],"output":null}],[11,"fold_item","","",210,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",210,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",210,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_expr","","",210,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",210,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_stmt","","",210,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_pat","","",210,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty","","",210,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_block","","",210,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mod","","",210,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_mac","","",210,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"hygiene","syntax::ext","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntax::ext::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",211,null],[12,"prev_ctxt","","",211,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[5,"reset_hygiene_data","","",null,{"inputs":[],"output":null}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"hash","","",212,null],[11,"encode","","",212,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",212,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",212,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"hash","","",213,null],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",213,{"inputs":[],"output":{"name":"mark"}}],[11,"fresh","","",213,{"inputs":[],"output":{"name":"self"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",213,{"inputs":[],"output":{"name":"self"}}],[11,"from_placeholder_id","","",213,{"inputs":[{"name":"nodeid"}],"output":{"name":"self"}}],[11,"as_placeholder_id","","",213,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"as_u32","","",213,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"empty","","",212,{"inputs":[],"output":{"name":"self"}}],[11,"data","","",212,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"apply_mark","","Extend a syntax context with a given mark",212,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"syntaxcontext"}}],[11,"source","","If `ident` is macro expanded, return the source ident from the macro definition and the mark of the expansion that created the macro definition.",212,null],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"proc_macro_shim","syntax::ext","This is a shim file to ease the transition to the final procedural macro interface for Macros 2.0. It currently exposes the `libsyntax` operations that the quasiquoter's output needs to compile correctly, along with the following operators:",null,null],[5,"build_block_emitter","syntax::ext::proc_macro_shim","Take a `ExtCtxt`, `Span`, and `TokenStream`, and produce a Macro Result that parses the TokenStream as a block and returns it as an `Expr`.",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"box"}}],[0,"prelude","","",null,null],[17,"DUMMY_SP","syntax::ext::proc_macro_shim::prelude","",null,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans are *absolute* positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",214,null],[12,"hi","","",214,null],[12,"expn_id","","Information about where the macro came from, if this piece of code was created by a macro expansion.",214,null],[0,"quote","syntax::ext","",null,null],[5,"parse_expr_panic","syntax::ext::quote","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"metaitem"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathstyle"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[5,"expand_quote_matcher","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[3,"BytePos","syntax::ext::quote::rt","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",215,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans are *absolute* positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",214,null],[12,"hi","","",214,null],[12,"expn_id","","Information about where the macro came from, if this piece of code was created by a macro expansion.",214,null],[17,"DUMMY_SP","","",null,null],[8,"ToTokens","","",null,null],[10,"to_tokens","","",216,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",217,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_expr","","",217,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_stmt","","",217,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[10,"parse_tts","","",217,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::tokenstream","",165,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",114,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",14,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",157,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",42,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",157,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",41,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",157,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",157,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",34,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",157,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",28,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ext::quote::rt","",218,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntax::ext::base","",188,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",188,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[11,"parse_expr","","",188,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",188,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"vec"}}],[0,"source_util","syntax::ext","",null,null],[5,"expand_line","syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_file","","file!(): expands to the current filename */ The filemap (`loc.file`) contains a bunch more information we could spit out if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr This is generally a bad idea because it's going to behave unhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"tt","syntax::ext","",null,null],[0,"transcribe","syntax::ext::tt","",null,null],[3,"TtReader","syntax::ext::tt::transcribe","",null,null],[12,"sp_diag","","",219,null],[12,"cur_tok","","",219,null],[12,"cur_span","","",219,null],[12,"fatal_errs","","Transform doc comments. Only useful in macro invocations",219,null],[5,"new_tt_reader","","This can do Macro-By-Example transcription. On the other hand, if `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can (and should) be None.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"vec"}],"output":{"name":"ttreader"}}],[5,"tt_next_token","","Return the next token from the TtReader. EFFECT: advances the reader's token field",null,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"ttreader"}}],[0,"macro_parser","syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals, only by calling out to the main rust parser for named nonterminals (which it commits to fully when it hits one in a grammar). This means that there are no completer or predictor rules, and therefore no need to store one column per token: instead, there's a set of current Earley items and a set of next ones. Instead of NTs, we have a special case for Kleene star. The big-O, in pathological cases, is worse than traditional Earley parsing, but it's an easier fit for Macro-by-Example-style rules, and I think the overhead is lower. (In order to prevent the pathological case, we'd need to lazily construct the resulting `NamedMatch`es at the very end. It'd be a pain, and require more memory to keep around old items, but it would also save overhead)",null,null],[4,"NamedMatch","syntax::ext::tt::macro_parser","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL: so it is associated with a single ident in a parse, and all `MatchedNonterminal`s in the NamedMatch have the same nonterminal type (expr, item, etc). Each leaf in a single NamedMatch corresponds to a single token::MATCH_NONTERMINAL in the TokenTree that produced it.",null,null],[13,"MatchedSeq","","",220,null],[13,"MatchedNonterminal","","",220,null],[4,"ParseResult","","",null,null],[13,"Success","","",221,null],[13,"Failure","","Arm failed to match. If the second parameter is `token::Eof`, it indicates an unexpected end of macro invocation. Otherwise, it indicates that no rules expected the given token.",221,null],[13,"Error","","Fatal error (malformed macro?). Abort compilation.",221,null],[5,"count_names","","",null,null],[5,"parse_failure_msg","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"parse","","",null,null],[6,"NamedParseResult","","",null,null],[0,"macro_rules","syntax::ext::tt","",null,null],[3,"ParserAnyMacro","syntax::ext::tt::macro_rules","",null,null],[5,"compile","","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"parsesess"},{"name":"macrodef"}],"output":{"name":"syntaxextension"}}],[11,"make","","",222,{"inputs":[{"name":"box"},{"name":"expansionkind"}],"output":{"name":"expansion"}}],[14,"panictry","syntax","",null,null],[14,"register_diagnostic","","",null,null],[14,"span_fatal","","",null,null],[14,"span_err","","",null,null],[14,"span_warn","","",null,null],[14,"span_err_or_warn","","",null,null],[14,"struct_span_fatal","","",null,null],[14,"struct_span_err","","",null,null],[14,"struct_span_warn","","",null,null],[14,"struct_span_err_or_warn","","",null,null],[14,"span_note","","",null,null],[14,"span_help","","",null,null],[14,"help","","",null,null],[14,"register_diagnostics","","",null,null],[14,"register_long_diagnostics","","",null,null],[14,"walk_list","","",null,null],[11,"move_flat_map","syntax::ptr","",157,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",157,null],[11,"map_attrs","","",157,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"is_eof","syntax::ext::tt::transcribe","",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_next_token","","",219,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fatal","","",219,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",219,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"emit_fatal_errors","","",219,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",219,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"make_expr","syntax::ext::tt::macro_rules","",222,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",222,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",222,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",222,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",222,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",222,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",222,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"end_point","syntax::ext::quote::rt","Returns a new span representing just the end-point of this span",214,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",214,null],[11,"hash","","",215,null],[11,"partial_cmp","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"lt","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"encode","","",215,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",214,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"from_usize","","",215,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",215,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cmp","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"cmp","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"add","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"default_encode","","",214,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",215,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"sub","","",215,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}]],"paths":[[3,"ErrorInfo"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[8,"MoveMap"],[6,"SmallVector"],[3,"ThinVec"],[3,"JsonEmitter"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[3,"AbiData"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MetaItem"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Stmt"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Mac_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"PathListItem_"],[3,"AttrId"],[3,"Attribute"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"Item"],[3,"ForeignItem"],[3,"MacroDef"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"NestedMetaItemKind"],[4,"MetaItemKind"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[4,"StmtKind"],[4,"MacStmtStyle"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"RangeLimits"],[4,"ExprKind"],[4,"CaptureBy"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"TyKind"],[4,"AsmDialect"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"VariantData"],[4,"ItemKind"],[4,"ForeignItemKind"],[3,"NodeId"],[3,"Stability"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"HasAttrs"],[6,"NestedMetaItem"],[6,"Variant"],[3,"Spanned"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"CodeMap"],[4,"ExpnFormat"],[8,"FileLoader"],[3,"RealFileLoader"],[3,"StripUnconfigured"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"Stability"],[4,"GateIssue"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"Folder"],[3,"ParseSess"],[3,"Directory"],[4,"DirectoryOwnership"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathStyle"],[4,"SemiColonMode"],[4,"TokenType"],[4,"LhsExpr"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[8,"Reader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"SeqSep"],[8,"ParserObsoleteMethods"],[4,"ObsoleteSyntax"],[3,"P"],[3,"Keyword"],[3,"Symbol"],[3,"Interner"],[3,"InternedString"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"],[4,"InternalTS"],[3,"TokenStream"],[3,"Iter"],[3,"Split"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"CurrentCommentAndLiteral"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"MacEager"],[3,"ModuleData"],[3,"ExpansionData"],[3,"ExtCtxt"],[3,"ChangeSpan"],[4,"Annotatable"],[4,"SyntaxExtension"],[4,"Determinacy"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"ProcMacro"],[8,"AttrProcMacro"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[8,"Resolver"],[3,"DummyResult"],[3,"DummyResolver"],[8,"AstBuilder"],[3,"Invocation"],[3,"MacroExpander"],[3,"ExpansionConfig"],[4,"ExpansionKind"],[4,"Expansion"],[4,"InvocationKind"],[3,"PlaceholderExpander"],[3,"SyntaxContextData"],[3,"SyntaxContext"],[3,"Mark"],[3,"Span"],[3,"BytePos"],[8,"ToTokens"],[8,"ExtParseUtils"],[6,"Lit"],[3,"TtReader"],[4,"NamedMatch"],[4,"ParseResult"],[3,"ParserAnyMacro"]]};
searchIndex["syntax_ext"] = {"doc":"Syntax extensions in the Rust compiler.","items":[[5,"register_builtins","syntax_ext","",null,{"inputs":[{"name":"resolver"},{"name":"vec"},{"name":"bool"}],"output":null}],[0,"proc_macro_registrar","","",null,null],[5,"modify","syntax_ext::proc_macro_registrar","",null,{"inputs":[{"name":"parsesess"},{"name":"resolver"},{"name":"crate"},{"name":"bool"},{"name":"bool"},{"name":"usize"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"deriving","syntax_ext","The compiler code necessary to implement the `#[derive]` extensions.",null,null],[5,"expand_derive","syntax_ext::deriving","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"name":"vec"}}],[5,"is_builtin_trait","","",null,{"inputs":[{"name":"name"}],"output":{"name":"bool"}}],[0,"bounds","","",null,null],[5,"expand_deriving_unsafe_bound","syntax_ext::deriving::bounds","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_copy","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"clone","syntax_ext::deriving","",null,null],[5,"expand_deriving_clone","syntax_ext::deriving::clone","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"encodable","syntax_ext::deriving","The compiler code necessary to implement the `#[derive(Encodable)]` (and `Decodable`, in decodable.rs) extension.  The idea here is that type-defining items may be tagged with `#[derive(Encodable, Decodable)]`.",null,null],[5,"expand_deriving_rustc_encodable","syntax_ext::deriving::encodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_encodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"decodable","syntax_ext::deriving","The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.",null,null],[5,"expand_deriving_rustc_decodable","syntax_ext::deriving::decodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_decodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"hash","syntax_ext::deriving","",null,null],[5,"expand_deriving_hash","syntax_ext::deriving::hash","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"debug","syntax_ext::deriving","",null,null],[5,"expand_deriving_debug","syntax_ext::deriving::debug","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"default","syntax_ext::deriving","",null,null],[5,"expand_deriving_default","syntax_ext::deriving::default","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"custom","syntax_ext::deriving","",null,null],[3,"CustomDerive","syntax_ext::deriving::custom","",null,null],[11,"new","","",0,null],[11,"expand","","",0,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"name":"vec"}}],[0,"partial_eq","syntax_ext::deriving","",null,null],[5,"expand_deriving_partial_eq","syntax_ext::deriving::partial_eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"eq","syntax_ext::deriving","",null,null],[5,"expand_deriving_eq","syntax_ext::deriving::eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"partial_ord","syntax_ext::deriving","",null,null],[4,"OrderingOp","syntax_ext::deriving::partial_ord","",null,null],[13,"PartialCmpOp","","",1,null],[13,"LtOp","","",1,null],[13,"LeOp","","",1,null],[13,"GtOp","","",1,null],[13,"GeOp","","",1,null],[5,"expand_deriving_partial_ord","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"some_ordering_collapsed","","",null,null],[5,"cs_partial_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"orderingop"}}],[0,"ord","syntax_ext::deriving","",null,null],[5,"expand_deriving_ord","syntax_ext::deriving::ord","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"ordering_collapsed","","",null,null],[5,"cs_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[0,"generic","syntax_ext::deriving","Some code that abstracts away much of the boilerplate of writing `derive` instances for traits. Among other things it manages getting access to the fields of the 4 different sorts of structs and enum variants, as well as creating the method and impl ast instances.",null,null],[3,"TraitDef","syntax_ext::deriving::generic","",null,null],[12,"span","","The span for the current #[derive(Foo)] header.",2,null],[12,"attributes","","",2,null],[12,"path","","Path of the trait, including any type parameters",2,null],[12,"additional_bounds","","Additional bounds required of any type parameters of the type, other than the current trait",2,null],[12,"generics","","Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`",2,null],[12,"is_unsafe","","Is it an `unsafe` trait?",2,null],[12,"supports_unions","","Can this trait be derived for unions?",2,null],[12,"methods","","",2,null],[12,"associated_types","","",2,null],[3,"MethodDef","","",null,null],[12,"name","","name of the method",3,null],[12,"generics","","List of generics, e.g. `R: rand::Rng`",3,null],[12,"explicit_self","","Whether there is a self argument (outer Option) i.e. whether this is a static function, and whether it is a pointer (inner Option)",3,null],[12,"args","","Arguments other than the self argument",3,null],[12,"ret_ty","","Return type",3,null],[12,"attributes","","",3,null],[12,"is_unsafe","","",3,null],[12,"unify_fieldless_variants","","Can we combine fieldless variants for enums into a single match arm?",3,null],[12,"combine_substructure","","",3,null],[3,"Substructure","","All the data about the data structure/method being derived upon.",null,null],[12,"type_ident","","ident of self",4,null],[12,"method_ident","","ident of the method",4,null],[12,"self_args","","dereferenced access to any `Self_` or `Ptr(Self_, _)` arguments",4,null],[12,"nonself_args","","verbatim access to any other arguments",4,null],[12,"fields","","",4,null],[3,"FieldInfo","","Summary of the relevant parts of a struct/enum field.",null,null],[12,"span","","",5,null],[12,"name","","None for tuple structs/normal enum variants, Some for normal structs/struct enum variants.",5,null],[12,"self_","","The expression corresponding to this field of `self` (specifically, a reference to it).",5,null],[12,"other","","The expressions corresponding to references to this field in the other `Self` arguments.",5,null],[12,"attrs","","The attributes on the field",5,null],[4,"StaticFields","","Fields for a static method",null,null],[13,"Unnamed","","Tuple and unit structs/enum variants like this.",6,null],[13,"Named","","Normal structs/struct variants.",6,null],[4,"SubstructureFields","","A summary of the possible sets of fields.",null,null],[13,"Struct","","",7,null],[13,"EnumMatching","","Matching variants of the enum: variant index, ast::Variant, fields: the field name is only non-`None` in the case of a struct variant.",7,null],[13,"EnumNonMatchingCollapsed","","Non-matching variants of the enum, but with all state hidden from the consequent code.  The first component holds `Ident`s for all of the `Self` arguments; the second component is a slice of all of the variants for the enum itself, and the third component is a list of `Ident`s bound to the variant index values for each of the actual input `Self` arguments.",7,null],[13,"StaticStruct","","A static method where `Self` is a struct.",7,null],[13,"StaticEnum","","A static method where `Self` is an enum.",7,null],[5,"combine_substructure","","",null,{"inputs":[{"name":"combinesubstructurefunc"}],"output":{"name":"refcell"}}],[5,"cs_fold","","Fold the fields. `use_foldl` controls whether this is done left-to-right (`true`) or right-to-left (`false`).",null,{"inputs":[{"name":"bool"},{"name":"f"},{"name":"p"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"cs_same_method","","Call the method that is being derived on all the fields, and then process the collected results. i.e.",null,{"inputs":[{"name":"f"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"is_type_without_fields","","Return true if the type has no value fields (for an enum, no variant has any fields)",null,{"inputs":[{"name":"annotatable"}],"output":{"name":"bool"}}],[0,"ty","","A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use when specifying impls to be derived.",null,null],[3,"Path","syntax_ext::deriving::generic::ty","A path, e.g. `::std::option::Option::<i32>` (global). Has support for type parameters and a lifetime.",null,null],[12,"path","","",8,null],[12,"lifetime","","",8,null],[12,"params","","",8,null],[12,"global","","",8,null],[3,"LifetimeBounds","","Lifetimes and bounds on type parameters",null,null],[12,"lifetimes","","",9,null],[12,"bounds","","",9,null],[4,"PtrTy","","The types of pointers",null,null],[13,"Borrowed","","&'lifetime mut",10,null],[13,"Raw","","*mut",10,null],[4,"Ty","","A type. Supports pointers, Self, and literals",null,null],[13,"Self_","","",11,null],[13,"Ptr","","&/Box/ Ty",11,null],[13,"Literal","","mod::mod::Type<[lifetime], [Params...]>, including a plain type parameter, and things like `i32`",11,null],[13,"Tuple","","includes unit",11,null],[5,"borrowed_ptrty","","",null,{"inputs":[],"output":{"name":"ptrty"}}],[5,"borrowed","","",null,{"inputs":[{"name":"box"}],"output":{"name":"ty"}}],[5,"borrowed_explicit_self","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"borrowed_self","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"nil_ty","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"get_explicit_self","","",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ptrty"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"new","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"path"}}],[11,"new_local","","",8,{"inputs":[{"name":"str"}],"output":{"name":"path"}}],[11,"new_","","",8,{"inputs":[{"name":"vec"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"path"}}],[11,"to_ty","","",8,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",8,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"to_ty","","",11,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",11,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"lifetimebounds"}}],[11,"empty","","",9,{"inputs":[],"output":{"name":"lifetimebounds"}}],[11,"to_generics","","",9,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"generics"}}],[6,"CombineSubstructureFunc","syntax_ext::deriving::generic","Combine the values of all the fields together. The last argument is all the fields of all the structures.",null,null],[6,"EnumNonMatchCollapsedFunc","","Deal with non-matching enum variants.  The tuple is a list of identifiers (one for each `Self` argument, which could be any of the variants since they have been collapsed together) and the identifiers holding the variant index value for each of the `Self` arguments.  The last argument is all the non-`Self` args of the method being derived.",null,null],[11,"expand","","",2,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[11,"expand_ext","","",2,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"},{"name":"bool"}],"output":null}]],"paths":[[3,"CustomDerive"],[4,"OrderingOp"],[3,"TraitDef"],[3,"MethodDef"],[3,"Substructure"],[3,"FieldInfo"],[4,"StaticFields"],[4,"SubstructureFields"],[3,"Path"],[3,"LifetimeBounds"],[4,"PtrTy"],[4,"Ty"]]};
searchIndex["syntax_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntax_pos","Spans represent a region of code, used for error reporting. Positions in spans are *absolute* positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[12,"expn_id","","Information about where the macro came from, if this piece of code was created by a macro expansion.",0,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",1,null],[12,"is_primary","","Is this a primary span? This is the \"locus\" of the message, and is indicated with a `^^^^` underline, versus `----`.",1,null],[12,"label","","What label should we attach to this span (if any)?",1,null],[3,"ExpnId","","",null,null],[12,"0","","",2,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",3,null],[12,"bytes","","The number of bytes, >=2",3,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't originate from files has names between angle brackets by convention, e.g. `<anon>`",4,null],[12,"abs_path","","The absolute path of the file that the source came from.",4,null],[12,"src","","The complete source code",4,null],[12,"start_pos","","The start position of this source in the CodeMap",4,null],[12,"end_pos","","The end position of this source in the CodeMap",4,null],[12,"lines","","Locations of lines beginnings in the source code",4,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",4,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",5,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset is not equivalent to a character offset. The CodeMap will convert BytePos values to CharPos values as necessary.",null,null],[12,"0","","",6,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",7,null],[12,"line","","The (1-based) line number",7,null],[12,"col","","The (0-based) column offset",7,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[12,"file","","",8,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",9,null],[12,"line","","",9,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",10,null],[12,"pos","","",10,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",11,null],[12,"start_col","","Column in line where span begins, starting from 0.",11,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",11,null],[3,"FileLines","","",null,null],[12,"file","","",12,null],[12,"lines","","",12,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",13,null],[12,"macro_decl_name","","name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")",13,null],[12,"def_site_span","","span where macro was defined (if known)",13,null],[3,"DistinctSources","","",null,null],[12,"begin","","",14,null],[12,"end","","",14,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",15,null],[12,"source_len","","",15,null],[12,"begin_pos","","",15,null],[12,"end_pos","","",15,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",16,null],[13,"DistinctSources","","",16,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",17,null],[13,"DistinctSources","","",17,null],[13,"MalformedForCodemap","","",17,null],[13,"SourceNotAvailable","","",17,null],[12,"filename","syntax_pos::SpanSnippetError","",17,null],[5,"mk_sp","syntax_pos","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"span"}}],[6,"FileName","","",null,null],[6,"FileLinesResult","","",null,null],[7,"SPAN_DEBUG","","",null,null],[17,"DUMMY_SP","","",null,null],[17,"COMMAND_LINE_SP","","",null,null],[17,"NO_EXPANSION","","",null,null],[17,"COMMAND_LINE_EXPN","","",null,null],[17,"PROC_EXPN","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"multispan"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"end_point","","Returns a new span representing just the end-point of this span",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"spanlabel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_encode","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",19,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",19,{"inputs":[{"name":"self"},{"name":"span"},{"name":"string"}],"output":null}],[11,"primary_span","","Selects the first primary span (if any)",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"primary_spans","","Returns all primary spans.",19,null],[11,"replace","","Replaces all occurances of one Span with another. Used to move Spans in areas that don't display well (like std macros). Returns true if replacements occurred.",19,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"span_labels","","Returns the strings to highlight. We always ensure that there is an entry for each of the primary spans -- for each primary span P, if there is at least one label with span P, we return those labels (marked as primary). But otherwise we return `SpanLabel` instances with empty labels.",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expnid"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"from_u32","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"multibytechar"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the table of line-beginnings. UNCHECKED INVARIANT: these offsets must be added in the right order and must be in the right places; there is shared knowledge about what ends a line between this file and parse.rs WARNING: pos param here is the offset relative to start of CodeMap, and CodeMap will append a newline when adding a filemap without a newline at the end, so the safe way to call this is with value calculated as filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":null}],[11,"get_line","","get a line from the list of pre-computed line-beginnings. line-number here is 0-based.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"record_multibyte_char","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"usize"}],"output":null}],[11,"is_real_file","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_imported","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_length","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_lines","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lookup_line","","Find the line containing the given position. The return value is the index into the `lines` array of this FileMap, not the 1-based line number. If the filemap is empty or the position is located before the first line, None is returned.",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"line_bounds","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"charpos"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"ordering"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_usize","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"loc"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lineinfo"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"spanlineserror"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"spansnippeterror"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"distinctsources"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"malformedcodemappositions"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Span"],[3,"SpanLabel"],[3,"ExpnId"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[8,"Pos"],[3,"MultiSpan"]]};
initSearch(searchIndex);
