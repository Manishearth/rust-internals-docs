var searchIndex = {};
searchIndex["alloc"] = {"doc":"The Rust core allocation library","items":[[0,"heap","alloc","",null,null],[5,"allocate","alloc::heap","Return a pointer to `size` bytes of memory aligned to `align`.",null,null],[5,"reallocate","","Resize the allocation referenced by `ptr` to `size` bytes.",null,null],[5,"reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes.",null,null],[5,"deallocate","","Deallocates the memory referenced by `ptr`.",null,null],[5,"usable_size","","Returns the usable size of an allocation created with the specified the `size` and `align`.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations.",null,null],[0,"boxed","alloc","A pointer type for heap allocation.",null,null],[3,"ExchangeHeapSingleton","alloc::boxed","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[17,"HEAP","","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",0,null],[10,"call_box","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",2,null],[11,"make_place","","",2,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",2,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"finalize","","",3,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Allocates memory on the heap and then places `x` into it.",3,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",3,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",3,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",3,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,null],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"nth","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"call_once","","",3,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",3,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"borrow","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"arc","alloc","Thread-safe reference-counting pointers.",null,null],[3,"Arc","alloc::arc","A thread-safe reference-counting pointer.",null,null],[3,"Weak","","A weak version of [`Arc`][arc].",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",5,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Returns the contained value, if the `Arc` has exactly one strong reference.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",5,null],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",5,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",5,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this value.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr_eq","","Returns true if the two `Arc`s point to the same value (not just values that compare as equal).",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","Makes a clone of the `Arc` pointer.",5,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Arc` or [`Weak`][weak] pointers to the same value.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc`.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",4,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades the `Weak` pointer to an [`Arc`][arc], if possible.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak` pointer.",4,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"default","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",4,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak` pointer.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","Equality for two `Arc`s.",5,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc`s.",5,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc`s.",5,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc`s.",5,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",5,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc`s.",5,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",5,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Arc`s.",5,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a new `Arc<T>`, with the `Default` value for `T`.",5,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"borrow","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"rc","alloc","Single-threaded reference-counting pointers.",null,null],[3,"Rc","alloc::rc","A single-threaded reference-counting pointer.",null,null],[3,"Weak","","A weak version of [`Rc`][rc].",null,null],[11,"new","","Constructs a new `Rc<T>`.",6,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks whether [`Rc::try_unwrap`][try_unwrap] would return [`Ok`].",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",6,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",6,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",6,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or [`Weak`][weak] pointers to this inner value.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc`.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","Makes a clone of the `Rc` pointer.",6,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",6,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc`s.",6,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",6,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc`s.",6,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",6,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",6,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",6,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",6,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc`s.",6,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",7,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades the `Weak` pointer to an [`Rc`][rc], if possible.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak` pointer.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","Makes a clone of the `Weak` pointer.",7,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",7,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"raw_vec","alloc","",null,null],[3,"RawVec","alloc::raw_vec","A low-level utility for more ergonomically allocating, reallocating, and deallocating a buffer of memory on the heap without having to worry about all the corner cases involved. This type is excellent for building your own data structures like Vec and VecDeque. In particular:",null,null],[11,"new","","Creates the biggest possible RawVec without allocating. If T has positive size, then this makes a RawVec with capacity 0. If T has 0 size, then it it makes a RawVec with capacity `usize::MAX`. Useful for implementing delayed allocation.",8,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements for a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0 or T is zero-sized. Note that if `T` is zero-sized this means you will *not* get a RawVec with the requested capacity!",8,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",8,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",8,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is heap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must be careful.",8,null],[11,"cap","","Gets the capacity of the allocation.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough to want to do that it's easiest to just have a dedicated method. Slightly more efficient logic can be provided for this than the general case.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"double_in_place","","Attempts to double the size of the type's backing allocation in place. This is common enough to want to do that it's easiest to just have a dedicated method. Slightly more efficient logic can be provided for this than the general case.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold `used_cap + needed_extra_cap` elements. If it doesn't already, will reallocate the minimum possible amount of memory necessary. Generally this will be exactly the amount of memory necessary, but in principle the allocator is free to give back more than we asked for.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reserve","","Ensures that the buffer contains at least enough space to hold `used_cap + needed_extra_cap` elements. If it doesn't already have enough capacity, will reallocate enough space plus comfortable slack space to get amortized `O(1)` behavior. Will limit this behavior if it would needlessly cause itself to panic.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold `used_cap + needed_extra_cap` elements. If it doesn't already have enough capacity, will reallocate in place enough space plus comfortable slack space to get amortized `O(1)` behaviour. Will limit this behaviour if it would needlessly cause itself to panic.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount is 0, actually completely deallocates.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",8,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",8,{"inputs":[{"name":"self"}],"output":null}],[0,"oom","alloc","",null,null],[5,"set_oom_handler","alloc::oom","Set a custom handler for out-of-memory conditions",null,null],[5,"oom","","Common out-of-memory routine",null,null]],"paths":[[8,"FnBox"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"]]};
searchIndex["alloc_jemalloc"] = {"doc":"","items":[[5,"__rust_allocate","alloc_jemalloc","",null,null],[5,"__rust_reallocate","","",null,null],[5,"__rust_reallocate_inplace","","",null,null],[5,"__rust_deallocate","","",null,null],[5,"__rust_usable_size","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["alloc_system"] = {"doc":"","items":[[5,"__rust_allocate","alloc_system","",null,null],[5,"__rust_deallocate","","",null,null],[5,"__rust_reallocate","","",null,null],[5,"__rust_reallocate_inplace","","",null,null],[5,"__rust_usable_size","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["arena"] = {"doc":"The arena, a fast but limited type of allocator.","items":[[3,"TypedArena","arena","An arena that can hold objects of only one type.",null,null],[3,"DroplessArena","","",null,null],[11,"new","","Creates a new `TypedArena`.",0,{"inputs":[],"output":{"name":"typedarena"}}],[11,"alloc","","Allocates an object in the `TypedArena`, returning a reference to it.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"alloc_slice","","Allocates a slice of objects that are copy into the `TypedArena`, returning a mutable reference to it. Will panic if passed a zero-sized types.",0,null],[11,"clear","","Clears the arena. Deallocates all but the longest chunk which may be reused.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"droplessarena"}}],[11,"in_arena","","",1,null],[11,"alloc","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"alloc_slice","","Allocates a slice of objects that are copied into the `DroplessArena`, returning a mutable reference to it. Will panic if passed a zero-sized type.",1,null]],"paths":[[3,"TypedArena"],[3,"DroplessArena"]]};
searchIndex["collections"] = {"doc":"Collection types.","items":[[0,"boxed","collections","A pointer type for heap allocation.",null,null],[17,"HEAP","collections::boxed","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",0,null],[10,"call_box","","",0,null],[4,"Bound","collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",1,null],[13,"Excluded","","An exclusive bound.",1,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",1,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","A container object that represents the result of the [`peek_mut`] method on `BinaryHeap`. See its documentation for details.",null,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[3,"BinaryHeapPlace","","",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"pop","","Removes the peeked value from the heap and returns it.",2,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","Creates an empty `BinaryHeap<T>`.",3,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",3,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",3,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in an optimized fashion.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in an optimized fashion. The push is done regardless of whether the binary heap was empty.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",3,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",3,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pointer","","",7,null],[11,"finalize","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"borrow","collections","A module for working with borrowed data.",null,null],[8,"Borrow","collections::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",8,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",9,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",10,null],[13,"Owned","","Owned data.",10,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",11,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",11,null],[11,"borrow","","",10,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",10,null],[11,"into_owned","","Extracts the owned data.",10,null],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an owned Cow<'a, B> with the default value for the contained owned value.",10,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"add","","",10,null],[11,"add","","",10,null],[11,"add_assign","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_assign","","",10,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[0,"enum_set","collections","A structure for holding a set of enum variants.",null,null],[3,"EnumSet","collections::enum_set","A specialized set implementation to use enum types.",null,null],[3,"Iter","","An iterator over an EnumSet",null,null],[8,"CLike","","An interface for casting C-like enum to usize and back. A typically implementation is as below.",null,null],[10,"to_usize","","Converts a C-like enum to a `usize`.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"from_usize","","Converts a `usize` to a C-like enum.",12,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"enumset"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",13,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",13,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",13,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",13,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",13,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",13,{"inputs":[{"name":"self"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"from_iter","","",13,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"fmt","collections","Utilities for formatting and printing `String`s",null,null],[3,"Formatter","collections::fmt","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",15,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",15,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string, and a list of arguments. The arguments will be formatted according to the specified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[5,"format","","The format function takes a precompiled format string and a list of arguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[0,"linked_list","collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over references to the elements of a `LinkedList`.",null,null],[3,"IterMut","","An iterator over mutable references to the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `LinkedList<T>`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates an empty `LinkedList`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"append","","Moves all elements from `other` to the end of the list.",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"iter","","Provides a forward iterator.",28,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",28,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",28,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",28,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"drop","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","",28,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",28,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",28,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",28,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",28,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",29,null],[11,"finalize","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",30,null],[11,"finalize","","",30,{"inputs":[{"name":"self"}],"output":null}],[0,"range","collections","Range syntax.",null,null],[8,"RangeArgument","collections::range","**RangeArgument** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound",31,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound",31,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[0,"slice","collections","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[3,"Chunks","collections::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a time).",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",32,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",32,null],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",32,null],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",32,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",32,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",32,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",32,null],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",33,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",33,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",33,null],[10,"connect","","",33,null],[0,"str","collections","Unicode string slices.",null,null],[8,"FromStr","collections::str","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",34,null],[10,"from_str","","Parses a string `s` to return a value of this type.",34,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8` as a string.",null,null],[3,"Lines","","Created with the method [`lines`].",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string's bytes. Use with the `std::iter` module.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","collections::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",35,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",35,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",36,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",36,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending the iteration.",36,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",37,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",38,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"EncodeUtf16","collections::str","External iterator for a string's UTF-16 code units.",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[0,"string","collections","A UTF-8 encoded, growable string.",null,null],[3,"String","collections::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[3,"Drain","","A draining iterator for `String`.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",40,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",41,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",41,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",41,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",41,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err` if `v` contains any invalid data.",41,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing invalid data with the replacement character (U+FFFD).",41,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",41,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",41,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",41,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"capacity","","Returns this `String`'s capacity, in bytes.",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",41,{"inputs":[{"name":"self"}],"output":null}],[11,"push","","Appends the given `char` to the end of this `String`.",41,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",41,null],[11,"truncate","","Shortens this `String` to the specified length.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"pop","","Removes the last character from the string buffer and returns it.",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",41,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"char"}],"output":null}],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",41,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",41,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",41,{"inputs":[{"name":"self"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the string and yields the removed chars.",41,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",41,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",42,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",42,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",41,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"from_iter","","",41,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",41,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",41,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",41,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",41,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","Creates an empty `String`.",41,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"add_assign","","",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"index","","",41,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",41,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",41,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",41,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",41,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",41,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",41,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",41,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",41,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",41,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",41,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",41,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",41,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"to_string","collections::borrow","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","collections::string","",41,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",41,null],[11,"from","","",41,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",41,{"inputs":[{"name":"box"}],"output":{"name":"string"}}],[11,"into","","",41,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"from","","",41,{"inputs":[{"name":"cow"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",10,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",10,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"write_str","collections::string","",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",41,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"vec","collections","A contiguous growable array type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'",null,null],[3,"Vec","collections::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[11,"new","","Constructs a new, empty `Vec<T>`.",46,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",46,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",46,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",46,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",46,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",46,null],[11,"set_len","","Sets the length of a vector.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing it with the last element.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by_key","","Removes consecutive elements in the vector that resolve to the same key.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by","","Removes consecutive elements in the vector according to a predicate.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"push","","Appends an element to the back of a collection.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",46,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items.",46,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Returns the number of elements in the vector.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",46,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",46,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"dedup","","Removes consecutive repeated elements in the vector.",46,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",46,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"hash","","",46,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",46,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",46,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",46,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","collections::borrow","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",46,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates an empty `Vec<T>`.",46,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",46,null],[11,"as_mut","","",46,null],[11,"from","","",46,null],[11,"from","","",46,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",46,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"into","","",46,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"from","","",46,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",10,null],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"fmt","collections::vec","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",47,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",47,null],[11,"next","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"count","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_back","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drop","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"is_empty","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",49,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",49,null],[11,"finalize","","",49,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"vec_deque","collections","VecDeque is a double-ended queue, which is implemented with the help of a growing ring buffer.",null,null],[3,"VecDeque","collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended queue efficiently.",null,null],[3,"Iter","","`VecDeque` iterator.",null,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[3,"Drain","","A draining VecDeque iterator",null,null],[3,"PlaceBack","","A place for insertion at the back of a `VecDeque`.",null,null],[3,"PlaceFront","","A place for insertion at the front of a `VecDeque`.",null,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"drop","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates an empty `VecDeque<T>`.",50,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",50,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",50,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",50,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"iter","","Returns a front-to-back iterator.",50,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",50,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",50,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",50,null],[11,"len","","Returns the number of elements in the `VecDeque`.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",50,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",50,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the sequence is empty.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the sequence is empty.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is empty.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the sequence is empty.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is empty.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_back","","Appends an element to the back of a buffer",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if it is empty.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",50,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",50,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",50,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",50,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements or by appending clones of `value` to the back.",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"fold","","",51,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"fold","","",52,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"eq","","",50,null],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",50,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",50,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",50,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by value.",50,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",50,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",50,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","collections::vec","",46,{"inputs":[{"name":"vecdeque"}],"output":{"name":"self"}}],[11,"fmt","collections::vec_deque","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",55,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",55,null],[11,"finalize","","",55,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",56,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",56,null],[11,"finalize","","",56,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"btree_map","collections","A map based on a B-Tree.",null,null],[3,"BTreeMap","collections::btree_map","A map based on a B-Tree.",null,null],[3,"Iter","","An iterator over a BTreeMap's entries.",null,null],[3,"IterMut","","A mutable iterator over a BTreeMap's entries.",null,null],[3,"IntoIter","","An owning iterator over a BTreeMap's entries.",null,null],[3,"Keys","","An iterator over a BTreeMap's keys.",null,null],[3,"Values","","An iterator over a BTreeMap's values.",null,null],[3,"ValuesMut","","A mutable iterator over a BTreeMap's values.",null,null],[3,"Range","","An iterator over a sub-range of BTreeMap's entries.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`BTreeMap`].",null,null],[13,"Vacant","","A vacant Entry",57,null],[13,"Occupied","","An occupied Entry",57,null],[0,"btree_set","collections","A set based on a B-Tree.",null,null],[3,"BTreeSet","collections::btree_set","A set based on a B-Tree.",null,null],[3,"Iter","","An iterator over a `BTreeSet`'s items.",null,null],[3,"IntoIter","","An owning iterator over a `BTreeSet`'s items.",null,null],[3,"Range","","An iterator over a sub-range of `BTreeSet`'s items.",null,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[11,"clone","collections","",1,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[14,"vec","","Creates a `Vec` containing the arguments.",null,null],[14,"format","","Use the syntax described in `std::fmt` to create a value of type `String`. See [`std::fmt`][fmt] for more information.",null,null],[11,"next_back","collections::str","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::slice","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next","","",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"count","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",61,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"count","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",62,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"count","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","collections::str","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",64,null],[11,"last","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",65,null],[11,"last","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"count","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next","collections::slice","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"count","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"count","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next","collections::str","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","collections::slice","",69,null],[11,"next_back","collections::str::pattern","",85,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",87,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",88,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","collections::slice","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str::pattern","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::fmt","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::slice","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str::pattern","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::str","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::fmt","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"clone","collections::slice","",69,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","collections::str::pattern","",36,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","collections::str","",90,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","collections::fmt","",92,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"hash","","",92,null],[11,"write_str","","",93,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",93,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",93,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"error"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"next_back","collections::slice","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::str","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::slice","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","collections::str","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","collections::str::pattern","",36,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","collections::str","",90,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","collections::fmt","",92,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"is_empty","collections::slice","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","collections::str","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","collections::fmt","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","collections::str::pattern","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",85,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",87,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","collections::boxed","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"pointer","","",95,null],[11,"finalize","","",94,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"borrow","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"make_place","","",95,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",94,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",96,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"hash","","",94,null],[11,"next","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"nth","","",94,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"finalize","","",95,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"borrow_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",95,null],[11,"drop","","",94,null],[11,"call_once","","",94,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",94,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"as_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",94,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",94,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",94,null],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"next_back","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",94,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","","",94,null],[11,"from","","",94,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",94,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",94,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",94,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",94,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Allocates memory on the heap and then places `x` into it.",94,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",94,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",94,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",94,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",94,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","collections::vec","",46,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"drop","collections::btree_map","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",97,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",97,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",97,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",97,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",97,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",97,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",97,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",97,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",97,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",97,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",97,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",97,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"self"}}],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",97,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drop","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_back","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","",97,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",97,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",97,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"hash","","",97,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"default","","Creates an empty `BTreeMap<K, V>`.",97,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",97,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",97,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",97,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",97,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",97,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",97,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",97,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",57,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",57,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",106,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",106,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",106,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",107,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_pair","","Deprecated, renamed to `remove_entry`",107,null],[11,"remove_entry","","Take ownership of the key and value from the map.",107,null],[11,"get","","Gets a reference to the value in the entry.",107,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",107,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",107,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",107,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",107,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"clone","collections::btree_set","",108,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `BTreeSet` with a reasonable choice of B.",108,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",108,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",108,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",108,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",108,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",108,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"self"}}],[11,"from_iter","","",108,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",108,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"iter"}],"output":null}],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",108,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"next","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"next","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"pad_integral","collections::fmt","Performs the correct padding for an integer which has already been emitted into a str. The str should *not* contain the sign for the integer, that will be added by this method.",93,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",93,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",93,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",93,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",93,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",93,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",93,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of `fmt::Debug` implementations for structs.",93,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",93,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",93,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",93,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",93,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"entry","","Adds a new entry to the list output.",116,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",116,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",116,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",117,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",117,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",118,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",118,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",119,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",120,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",120,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_slice","collections::slice","View the underlying data as a subslice of the original data.",69,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",70,null],[11,"borrow","collections::vec","",46,null],[11,"borrow_mut","","",46,null],[11,"valid_up_to","collections::str","Returns the index in the given string up to which valid UTF-8 was verified.",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",65,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","collections::string","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","collections::vec","",46,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}]],"paths":[[8,"FnBox"],[4,"Bound"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BinaryHeapPlace"],[8,"Borrow"],[8,"BorrowMut"],[4,"Cow"],[8,"ToOwned"],[8,"CLike"],[3,"EnumSet"],[3,"Iter"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"LinkedList"],[3,"FrontPlace"],[3,"BackPlace"],[8,"RangeArgument"],[8,"SliceIndex"],[8,"SliceConcatExt"],[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"EncodeUtf16"],[8,"ToString"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"PlaceBack"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"PlaceBack"],[3,"PlaceFront"],[4,"Entry"],[3,"SplitWhitespace"],[3,"Split"],[3,"SplitMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Lines"],[3,"LinesAny"],[3,"Iter"],[3,"IterMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Arguments"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Error"],[3,"Formatter"],[3,"Box"],[3,"IntermediateBox"],[3,"ExchangeHeapSingleton"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"]]};
searchIndex["compiler_builtins"] = {"doc":"","items":[],"paths":[]};
searchIndex["core"] = {"doc":"The Rust Core Library","items":[[0,"isize","core","The pointer-sized signed integer type.",null,null],[17,"MIN","core::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","core","The 8-bit signed integer type.",null,null],[17,"MIN","core::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","core","The 16-bit signed integer type.",null,null],[17,"MIN","core::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","core","The 32-bit signed integer type.",null,null],[17,"MIN","core::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","core","The 64-bit signed integer type.",null,null],[17,"MIN","core::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i128","core","The 128-bit signed integer type.",null,null],[17,"MIN","core::i128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","core::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","core","The 8-bit unsigned integer type.",null,null],[17,"MIN","core::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","core","The 16-bit unsigned integer type.",null,null],[17,"MIN","core::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","core","The 32-bit unsigned integer type.",null,null],[17,"MIN","core::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","core","The 64-bit unsigned integer type.",null,null],[17,"MIN","core::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u128","core","The 128-bit unsigned integer type.",null,null],[17,"MIN","core::u128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"f32","core","Operations and constants for 32-bits floats (`f32` type)",null,null],[0,"consts","core::f32","Basic mathematical constants.",null,null],[17,"PI","core::f32::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log<sub>2</sub>(e)",null,null],[17,"LOG10_E","","log<sub>10</sub>(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f32","The radix or base of the internal representation of `f32`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[0,"f64","core","Operations and constants for 64-bits floats (`f64` type)",null,null],[0,"consts","core::f64","Basic mathematical constants.",null,null],[17,"PI","core::f64::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log<sub>2</sub>(e)",null,null],[17,"LOG10_E","","log<sub>10</sub>(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f64","The radix or base of the internal representation of `f64`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[0,"num","core","Numeric traits and functions for the built-in numeric types.",null,null],[3,"Wrapping","core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",0,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",1,null],[13,"Infinite","","Positive or negative infinity.",1,null],[13,"Zero","","Positive or negative zero.",1,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",1,null],[13,"Normal","","A regular floating point number.",1,null],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parsefloaterror"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Zero","","Types that have a \"zero\" value.",null,null],[10,"zero","","The \"zero\" (usually, additive identity) for this type.",3,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a \"one\" value.",null,null],[10,"one","","The \"one\" (usually, multiplicative identity) for this type.",4,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"parseinterror"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","core","The libcore prelude",null,null],[0,"v1","core::prelude","The core prelude",null,null],[0,"intrinsics","core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","core::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",null,null],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,null],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,null],[5,"pref_align_of","","",null,null],[5,"size_of_val","","",null,null],[5,"min_align_of_val","","",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,null],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",null,null],[5,"init","","Creates a value initialized to zero.",null,null],[5,"uninit","","Creates an uninitialized value.",null,null],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",null,null],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,null],[5,"sqrtf64","","Returns the square root of an `f64`",null,null],[5,"powif32","","Raises an `f32` to an integer power.",null,null],[5,"powif64","","Raises an `f64` to an integer power.",null,null],[5,"sinf32","","Returns the sine of an `f32`.",null,null],[5,"sinf64","","Returns the sine of an `f64`.",null,null],[5,"cosf32","","Returns the cosine of an `f32`.",null,null],[5,"cosf64","","Returns the cosine of an `f64`.",null,null],[5,"powf32","","Raises an `f32` to an `f32` power.",null,null],[5,"powf64","","Raises an `f64` to an `f64` power.",null,null],[5,"expf32","","Returns the exponential of an `f32`.",null,null],[5,"expf64","","Returns the exponential of an `f64`.",null,null],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,null],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,null],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,null],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,null],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,null],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,null],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,null],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,null],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,null],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,null],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,null],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,null],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,null],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,null],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,null],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,null],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,null],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,null],[5,"truncf32","","Returns the integer part of an `f32`.",null,null],[5,"truncf64","","Returns the integer part of an `f64`.",null,null],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",null,null],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",null,null],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,null],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,null],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,null],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,null],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,null],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",null,null],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",null,null],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,null],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",null,null],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",null,null],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",null,null],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",null,null],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",null,null],[0,"mem","core","Basic functions for dealing with memory.",null,null],[3,"Discriminant","core::mem","Opaque type representing the discriminant of an enum.",null,null],[5,"forget","","Leaks a value: takes ownership and \"forgets\" about the value **without running its destructor**.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":null}],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"nonzero","core","Exposes the NonZero lang item which provides optimization hints.",null,null],[3,"NonZero","core::nonzero","A wrapper type for raw pointers and integers that will never be NULL or 0 that might allow certain optimizations.",null,null],[8,"Zeroable","","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"nonzero"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"new","","Creates an instance of NonZero with the provided value. You must indeed ensure that the value is actually \"non-zero\".",8,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"ptr","core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[3,"Unique","core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper owns the referent. This in turn implies that the `Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw `*mut T` (which conveys no particular ownership semantics).  It also implies that the referent of the pointer should not be modified without a unique path to the `Unique` reference. Useful for building abstractions like `Vec<T>` or `Box<T>`, which internally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper has shared ownership of the referent. Useful for building abstractions like `Rc<T>` or `Arc<T>`, which internally use raw pointers to manage the memory that they own.",null,null],[5,"null","","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old value, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",null,null],[5,"eq","","Compare raw pointers for equality.",null,null],[11,"new","","Creates a new `Unique`.",9,null],[11,"get","","Dereferences the content.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",10,null],[11,"as_mut_ptr","","Acquires the underlying pointer as a `*mut` pointer.",10,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"marker","core","Primitive traits and types representing basic properties of types.",null,null],[3,"PhantomData","core::marker","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"phantomdata"}}],[0,"ops","core","Overloadable operators.",null,null],[3,"RangeFull","core::ops","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start <= x < end }. Use `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",12,null],[12,"end","","The upper bound of the range (exclusive).",12,null],[3,"RangeFrom","","A range which is only bounded below: { x | start <= x }. Use `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",13,null],[3,"RangeTo","","A range which is only bounded above: { x | x < end }. Use `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",14,null],[3,"RangeToInclusive","","An inclusive range which is only bounded above: { x | x <= end }. Use `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",15,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start <= x <= end }. Use `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",16,null],[12,"at","core::ops::RangeInclusive","The point at which iteration finished",16,null],[13,"NonEmpty","core::ops","Non-empty range (iteration will yield value(s))",16,null],[12,"start","core::ops::RangeInclusive","The lower bound of the range (inclusive).",16,null],[12,"end","","The upper bound of the range (inclusive).",16,null],[8,"Drop","core::ops","The `Drop` trait is used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",17,{"inputs":[{"name":"self"}],"output":null}],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",18,null],[10,"add","","The method for the `+` operator",18,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",19,null],[10,"sub","","The method for the `-` operator",19,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",20,null],[10,"mul","","The method for the `*` operator",20,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",21,null],[10,"div","","The method for the `/` operator",21,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",22,null],[10,"rem","","The method for the `%` operator",22,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",23,null],[10,"neg","","The method for the unary `-` operator",23,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",24,null],[10,"not","","The method for the unary `!` operator",24,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",25,null],[10,"bitand","","The method for the `&` operator",25,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",26,null],[10,"bitor","","The method for the `|` operator",26,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",27,null],[10,"bitxor","","The method for the `^` operator",27,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",28,null],[10,"shl","","The method for the `<<` operator",28,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",29,null],[10,"shr","","The method for the `>>` operator",29,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",31,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",32,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",33,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",34,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&=` operator",35,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",36,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",37,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",38,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",39,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations like `container[index]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",40,null],[10,"index","","The method for the indexing (`container[index]`) operation",40,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing operations like `container[index]` when used in a mutable context.",null,null],[10,"index_mut","","The method for the mutable indexing (`container[index]`) operation",41,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",42,null],[10,"deref","","The method called to dereference a value",42,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing mutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",43,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",44,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",45,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",46,null],[10,"call_once","","This is called when the call operator is used.",46,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",47,null],[8,"Placer","","Interface to implementations of  `PLACE <- EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the uninitialized state for `Data`.",48,null],[10,"make_place","","Creates a fresh place from `self`.",48,null],[8,"InPlace","","Specialization of `Place` trait supporting `PLACE <- EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `PLACE <- EXPR`",49,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",49,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",50,null],[16,"Place","","The place that will negotiate the storage of the data.",50,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",50,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",51,{"inputs":[],"output":{"name":"self"}}],[8,"Carrier","","A trait for types which have success and error states and are meant to work with the question mark operator. When the `?` operator is used with a value, whether the value is in the success or error state is determined by calling `translate`.",null,null],[16,"Success","","The type of the value when computation succeeds.",52,null],[16,"Error","","The type of the value when computation errors out.",52,null],[10,"from_success","","Create a `Carrier` from a success value.",52,null],[10,"from_error","","Create a `Carrier` from an error value.",52,null],[10,"translate","","Translate this `Carrier` to another implementation of `Carrier` with the same associated types.",52,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Examples",12,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Examples",13,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Examples",14,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Examples",16,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Examples",15,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[0,"cmp","core","Functionality for ordering and comparison.",null,null],[4,"Ordering","core::cmp","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",54,null],[13,"Equal","","An ordering where a compared value is equal [to another].",54,null],[13,"Greater","","An ordering where a compared value is greater [than another].",54,null],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"PartialEq","","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",55,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",55,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",57,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",57,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",57,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",57,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",57,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"reverse","","Reverse the `Ordering`.",54,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",54,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[0,"clone","core","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","core::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",58,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",58,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[0,"default","core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",59,{"inputs":[],"output":{"name":"self"}}],[0,"convert","core","Traits for conversions between types.",null,null],[8,"AsRef","core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",60,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",61,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",62,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",63,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",64,null],[10,"try_into","","Performs the conversion.",64,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",65,null],[10,"try_from","","Performs the conversion.",65,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"borrow","core","A module for working with borrowed data.",null,null],[8,"Borrow","core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",66,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",67,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"any","core","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",null,null],[3,"TypeId","core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[8,"Any","","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",68,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"ordering"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"of","","Returns the `TypeId` of the type this generic function has been instantiated with.",69,{"inputs":[],"output":{"name":"typeid"}}],[0,"array","core","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths.",null,null],[8,"FixedSizeArray","core::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",70,null],[10,"as_mut_slice","","Converts the array to mutable slice",70,null],[0,"sync","core","Synchronization primitives",null,null],[0,"atomic","core::sync","Atomic types",null,null],[3,"AtomicBool","core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM's `Monotonic` ordering.",71,null],[13,"Release","","When coupled with a store, all previous writes become visible to the other threads that perform a load with `Acquire` ordering on the same value.",71,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data written before a store with `Release` ordering on the same value in other threads.",71,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store `Release` ordering.",71,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all sequentially consistent operations in the same order.",71,null],[5,"fence","","An atomic fence.",null,{"inputs":[{"name":"ordering"}],"output":null}],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[11,"default","","Creates an `AtomicBool` initialized to `false`.",72,{"inputs":[],"output":{"name":"self"}}],[11,"default","","Creates a null `AtomicPtr<T>`.",73,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicBool`.",72,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"get_mut","","Returns a mutable reference to the underlying `bool`.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"load","","Loads a value from the bool.",72,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",72,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the bool, returning the old value.",72,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",72,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",72,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",72,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",72,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",73,null],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",73,null],[11,"into_inner","","Consumes the atomic and returns the contained value.",73,null],[11,"load","","Loads a value from the pointer.",73,null],[11,"store","","Stores a value into the pointer.",73,null],[11,"swap","","Stores a value into the pointer, returning the old value.",73,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",73,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",73,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",73,null],[11,"default","","",74,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",74,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",74,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",74,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"load","","Loads a value from the atomic integer.",74,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",74,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",75,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",75,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",75,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"load","","Loads a value from the atomic integer.",75,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",75,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",76,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",76,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",76,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"load","","Loads a value from the atomic integer.",76,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",76,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",77,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",77,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",77,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"load","","Loads a value from the atomic integer.",77,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",77,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"default","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",78,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"load","","Loads a value from the atomic integer.",78,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",78,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"default","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",79,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",79,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"load","","Loads a value from the atomic integer.",79,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",80,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",80,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"load","","Loads a value from the atomic integer.",80,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"default","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",81,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",81,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load","","Loads a value from the atomic integer.",81,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",82,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",82,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"load","","Loads a value from the atomic integer.",82,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"load","","Loads a value from the atomic integer.",83,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the old value.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cell","core","Shareable mutable containers.",null,null],[3,"Cell","core::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",84,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",84,null],[13,"Unused","","There are no outstanding borrows on this cell.",84,null],[11,"get","","Returns a copy of the contained value.",85,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"default","","Creates a `Cell<T>`, with the `Default` value for T.",85,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"from","","",85,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"new","","Creates a new `Cell` containing the given value.",85,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",85,{"inputs":[{"name":"self"}],"output":{"name":"unsafecell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",85,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",85,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",85,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"replace","","Replaces the contained value.",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps the value.",85,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",85,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"borrowstate"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `RefCell` containing `value`.",88,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",88,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",88,{"inputs":[{"name":"self"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",88,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",88,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",88,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",88,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",88,{"inputs":[{"name":"self"}],"output":{"name":"unsafecell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",88,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",88,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"default","","Creates a `RefCell<T>`, with the `Default` value for T.",88,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"cmp","","",88,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"from","","",88,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"deref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",89,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",89,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",90,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",91,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",91,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",91,null],[11,"default","","Creates an `UnsafeCell`, with the `Default` value for T.",91,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"from","","",91,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[0,"char","core","Character manipulation.",null,null],[3,"CharTryFromError","core::char","The error type returned when a conversion from u32 to char fails.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[3,"InvalidSequence","","`<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"count","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"count","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",94,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"invalidsequence"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"invalidsequence"}],"output":{"name":"bool"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"panicking","core","Panic support for libcore",null,null],[5,"panic","core::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","core","Composable external iteration.",null,null],[3,"StepBy","core::iter","An adapter for stepping range iterators by a custom amount.",null,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[3,"Rev","","A double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",13,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the given amount at each iteration.",12,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the given amount at each iteration.",16,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next","core::ops","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next_back","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","core::iter","",99,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"sum","core::num","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[8,"Iterator","core::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",102,null],[10,"next","","Advances the iterator and returns the next value.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",102,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",102,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",102,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",102,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",102,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",102,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",102,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",102,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",102,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",102,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",102,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",102,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",102,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",102,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",102,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",102,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",102,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",103,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between_by_one","","Same as `steps_between`, but with a `by` of 1",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"is_negative","","Tests whether this step is negative or not (going backwards)",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",103,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",103,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",103,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",103,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",104,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",105,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",105,null],[10,"into_iter","","Creates an iterator from a value.",105,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",109,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",110,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"fold","","",112,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",114,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",114,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",114,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"fold","","",116,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"count","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_back","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Overflow Behavior",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"nth","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_back","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",120,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",123,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",124,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next_back","","",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",127,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",127,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next_back","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"option","core","Optional values.",null,null],[3,"Iter","core::option","An iterator over a reference of the contained item in an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an [`Option`].",null,null],[3,"IntoIter","","An iterator over the item contained inside an [`Option`].",null,null],[4,"Option","","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",129,null],[13,"Some","","Some value `T`",129,null],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"is_some","","Returns `true` if the option is a `Some` value.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",129,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",129,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a `default` (if not).",129,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a `default` (if not).",129,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err)`][Err].",129,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err())`][Err].",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",129,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",129,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the wrapped value and returns the result.",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",129,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value.",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value.",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",129,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","Returns None.",129,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",129,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"from","","",129,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"next_back","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"next_back","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"next_back","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further elements are taken, and the `None` is returned. Should no `None` occur, a container with the values of each `Option` is returned.",129,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[0,"raw","core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"TraitObject","core::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",133,null],[12,"vtable","","",133,null],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"traitobject"}}],[0,"result","core","Error handling with the `Result` type.",null,null],[3,"Iter","core::result","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",134,null],[13,"Err","","Contains the error value",134,null],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"cmp","","",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"is_ok","","Returns true if the result is `Ok`.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",134,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",134,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value, leaving an `Err` value untouched.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value untouched.",134,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",134,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",134,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",134,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",134,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`. Else, it returns `optb`.",134,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`. If the value is an `Err` then it calls `op` with its value.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",134,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an `Err`.",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",134,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",135,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next_back","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"next_back","","",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",134,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[0,"slice","core","Slice management and manipulation",null,null],[3,"Iter","core::slice","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a time).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[8,"SliceExt","","Extension methods for slices.",null,null],[16,"Item","","",138,null],[10,"split_at","","",138,null],[10,"iter","","",138,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[10,"split","","",138,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",138,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",138,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",138,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",138,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",138,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[10,"first","","",138,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_first","","",138,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_last","","",138,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"last","","",138,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_unchecked","","",138,null],[10,"as_ptr","","",138,null],[10,"binary_search","","",138,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"result"}}],[10,"binary_search_by","","",138,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"binary_search_by_key","","",138,{"inputs":[{"name":"self"},{"name":"q"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",138,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",138,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_mut","","",138,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[10,"iter_mut","","",138,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[10,"first_mut","","",138,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_first_mut","","",138,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_last_mut","","",138,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"last_mut","","",138,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_mut","","",138,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",138,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",138,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",138,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",138,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"split_at_mut","","",138,null],[10,"reverse","","",138,{"inputs":[{"name":"self"}],"output":null}],[10,"get_unchecked_mut","","",138,null],[10,"as_mut_ptr","","",138,null],[10,"contains","","",138,null],[10,"starts_with","","",138,null],[10,"ends_with","","",138,null],[10,"clone_from_slice","","",138,null],[10,"copy_from_slice","","",138,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",139,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",139,null],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",139,null],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",139,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",139,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",139,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",139,null],[11,"get","core::ops","",12,null],[11,"get_mut","","",12,null],[11,"get_unchecked","","",12,null],[11,"get_unchecked_mut","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"get","","",14,null],[11,"get_mut","","",14,null],[11,"get_unchecked","","",14,null],[11,"get_unchecked_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"get","","",13,null],[11,"get_mut","","",13,null],[11,"get_unchecked","","",13,null],[11,"get_unchecked_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"get","","",53,null],[11,"get_mut","","",53,null],[11,"get_unchecked","","",53,null],[11,"get_unchecked_mut","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"get","","",16,null],[11,"get_mut","","",16,null],[11,"get_unchecked","","",16,null],[11,"get_unchecked_mut","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"get","","",15,null],[11,"get_mut","","",15,null],[11,"get_unchecked","","",15,null],[11,"get_unchecked_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"fmt","core::slice","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",140,null],[11,"next","","",140,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"count","","",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",140,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",140,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",140,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",140,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",140,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",140,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",140,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","","",140,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"as_ref","","",140,null],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",141,null],[11,"next","","",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"count","","",141,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",141,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",141,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",141,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",141,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",141,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",141,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next_back","","",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"next","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"next_back","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next_back","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"next","","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"next","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"next","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"next","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"count","","",148,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",148,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"next","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"count","","",149,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",149,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"count","","",150,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",150,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"str","core","String manipulation",null,null],[3,"ParseBoolError","core::str","An error returned when parsing a `bool` from a string fails.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8` as a string.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string's bytes. Use with the `std::iter` module.",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"Lines","","Created with the method [`lines`].",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a UTF-8-like encoding).",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character",null,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[0,"pattern","","The string Pattern API.",null,null],[3,"CharSearcher","core::str::pattern","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",151,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",151,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending the iteration.",151,null],[8,"Pattern","","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",152,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",152,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",152,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",152,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",152,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",153,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",153,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",154,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",155,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",155,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",155,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",156,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",156,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",157,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",157,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",158,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",158,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",158,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromStr","core::str","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",159,null],[10,"from_str","","Parses a string `s` to return a value of this type.",159,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",161,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",162,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",162,null],[11,"last","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",162,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",163,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",163,null],[11,"last","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",163,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"count","","",164,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",164,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",164,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",164,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",175,null],[11,"next_back","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",176,null],[11,"next_back","","",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"hash","core","Generic hashing support.",null,null],[3,"SipHasher","core::hash","An implementation of SipHash 2-4.",null,null],[3,"SipHasher13","","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"BuildHasherDefault","","The `BuildHasherDefault` structure is used in scenarios where one has a type that implements [`Hasher`] and [`Default`], but needs that type to implement [`BuildHasher`].",null,null],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",177,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",178,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",179,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",179,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",179,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",177,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",177,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",178,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",178,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",179,null],[11,"finish","","",179,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",177,null],[11,"finish","","",177,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",178,null],[11,"finish","","",178,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",180,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash_slice","","Feeds a slice of this type into the state provided.",180,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",181,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",181,null],[11,"write_u8","","Write a single `u8` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","Writes a single `u16` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","Writes a single `u32` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","Writes a single `u64` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_u128","","Writes a single `u128` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"write_usize","","Writes a single `usize` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","Writes a single `i8` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","Writes a single `i16` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","Writes a single `i32` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","Writes a single `i64` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_i128","","Writes a single `i128` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"write_isize","","Writes a single `isize` into this hasher.",181,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher` which a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",182,null],[10,"build_hasher","","Creates a new hasher.",182,null],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",183,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",183,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[0,"fmt","core","Utilities for formatting and printing strings.",null,null],[3,"DebugStruct","core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",184,null],[13,"Right","","Indication that contents should be right-aligned.",184,null],[13,"Center","","Indication that contents should be center-aligned.",184,null],[13,"Unknown","","No alignment was requested.",184,null],[5,"write","","The `write` function takes an output stream, a precompiled format string, and a list of arguments. The arguments will be formatted according to the specified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",185,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",185,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",186,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",186,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",187,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",187,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",188,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",188,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",188,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",189,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",189,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",190,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",190,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",190,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",200,{"inputs":[],"output":{"name":"error"}}],[11,"hash","","",200,null],[11,"cmp","","",200,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should *not* contain the sign for the integer, that will be added by this method.",202,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",202,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",202,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",202,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",202,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",202,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",202,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of `fmt::Debug` implementations for structs.",202,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",202,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",202,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",202,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",202,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"write_str","","",202,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",202,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",202,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"panic","core","Entry point of thread panic, for details, see std::macros",null,null],[14,"assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"debug_assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",null,null],[14,"write","","Write formatted data into a buffer",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"unreachable","","A utility macro for indicating unreachable code.",null,null],[14,"unimplemented","","A standardized placeholder for marking unfinished code. It panics with the message `\"not yet implemented\"` when executed.",null,null],[14,"format_args","","The core macro for formatted string creation & output.",null,null],[14,"env","","Inspect an environment variable at compile time.",null,null],[14,"option_env","","Optionally inspect an environment variable at compile time.",null,null],[14,"concat_idents","","Concatenate identifiers into one identifier.",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"line","","A macro which expands to the line number on which it was invoked.",null,null],[14,"column","","A macro which expands to the column number on which it was invoked.",null,null],[14,"file","","A macro which expands to the file name from which it was invoked.",null,null],[14,"stringify","","A macro which stringifies its argument.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"cfg","","Boolean evaluation of configuration flags.",null,null],[14,"include","","Parse a file as an expression or an item according to the context.",null,null],[11,"from_success","core::result","",134,{"inputs":[{"name":"u"}],"output":{"name":"result"}}],[11,"from_error","","",134,{"inputs":[{"name":"v"}],"output":{"name":"result"}}],[11,"translate","","",134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"size_hint","core::iter","Returns the bounds on the remaining length of the iterator.",102,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",102,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",102,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",102,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",102,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",102,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",102,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",102,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",102,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",102,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",102,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",102,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",102,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",102,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",102,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",102,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",102,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",102,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"len","","Returns the exact number of times the iterator will iterate.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sum","core::result","",134,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","","",134,{"inputs":[{"name":"i"}],"output":{"name":"result"}}]],"paths":[[3,"Wrapping"],[4,"FpCategory"],[3,"ParseFloatError"],[8,"Zero"],[8,"One"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"Discriminant"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeToInclusive"],[4,"RangeInclusive"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"Carrier"],[3,"RangeFull"],[4,"Ordering"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Clone"],[8,"Default"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Borrow"],[8,"BorrowMut"],[8,"Any"],[3,"TypeId"],[8,"FixedSizeArray"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[4,"BorrowState"],[3,"Cell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"CharTryFromError"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"DecodeUtf8"],[3,"InvalidSequence"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[8,"Iterator"],[8,"Step"],[8,"FromIterator"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"Extend"],[8,"ExactSizeIterator"],[8,"Sum"],[8,"Product"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[8,"SliceExt"],[8,"SliceIndex"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[8,"FromStr"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Error"],[3,"Arguments"],[3,"Formatter"]]};
searchIndex["flate"] = {"doc":"Simple [DEFLATE][def]-based compression. This is a wrapper around the [`miniz`][mz] library, which is a one-file pure-C implementation of zlib.","items":[[3,"Error","flate","",null,null],[3,"Bytes","","",null,null],[5,"deflate_bytes","","Compress a buffer without writing any sort of header on the output. Fast compression is used because it is almost twice as fast as default compression and the compression ratio is only marginally worse.",null,null],[5,"inflate_bytes","","Decompress a buffer without parsing any sort of header on the input.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,null],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Error"],[3,"Bytes"]]};
searchIndex["fmt_macros"] = {"doc":"Macro support for format strings","items":[[3,"Argument","fmt_macros","Representation of an argument specification.",null,null],[12,"position","","Where to find this argument",0,null],[12,"format","","How to format the argument",0,null],[3,"FormatSpec","","Specification for the formatting of an argument in the format string.",null,null],[12,"fill","","Optionally specified character to fill alignment with",1,null],[12,"align","","Optionally specified alignment",1,null],[12,"flags","","Packed version of various flags provided",1,null],[12,"precision","","The integer precision to use",1,null],[12,"width","","The string width requested for the resulting format",1,null],[12,"ty","","The descriptor string representing the name of the format desired for this argument, this can be empty or any number of characters, although it is required to be one word.",1,null],[3,"Parser","","The parser structure for interpreting the input format string. This is modeled as an iterator over `Piece` structures to form a stream of tokens being output.",null,null],[12,"errors","","Error messages accumulated during parsing",2,null],[4,"Piece","","A piece is a portion of the format string which represents the next part to emit. These are emitted as a stream by the `Parser` class.",null,null],[13,"String","","A literal string which should directly be emitted",3,null],[13,"NextArgument","","This describes that formatting should process the next argument (as specified inside) for emission.",3,null],[4,"Position","","Enum describing where an argument for a format can be located.",null,null],[13,"ArgumentIs","","The argument is located at a specific index.",4,null],[13,"ArgumentNamed","","The argument has a name.",4,null],[4,"Alignment","","Enum of alignments which are supported.",null,null],[13,"AlignLeft","","The value will be aligned to the left.",5,null],[13,"AlignRight","","The value will be aligned to the right.",5,null],[13,"AlignCenter","","The value will be aligned in the center.",5,null],[13,"AlignUnknown","","The value will take on a default alignment.",5,null],[4,"Flag","","Various flags which can be applied to format strings. The meaning of these flags is defined by the formatters themselves.",null,null],[13,"FlagSignPlus","","A `+` will be used to denote positive numbers.",6,null],[13,"FlagSignMinus","","A `-` will be used to denote negative numbers. This is the default.",6,null],[13,"FlagAlternate","","An alternate form will be used for the value. In the case of numbers, this means that the number will be prefixed with the supplied string.",6,null],[13,"FlagSignAwareZeroPad","","For numbers, this means that the number will be padded with zeroes, and the sign (`+` or `-`) will precede them.",6,null],[4,"Count","","A count is used for the precision and width parameters of an integer, and can reference either an argument or a literal integer.",null,null],[13,"CountIs","","The count is specified explicitly.",7,null],[13,"CountIsName","","The count is specified by the argument with the given name.",7,null],[13,"CountIsParam","","The count is specified by the argument at the given index.",7,null],[13,"CountImplied","","The count is implied and cannot be explicitly specified.",7,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"piece"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"argument"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"formatspec"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"formatspec"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"formatspec"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"count"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"count"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"count"}],"output":{"name":"bool"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new parser for the given format string",2,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}]],"paths":[[3,"Argument"],[3,"FormatSpec"],[3,"Parser"],[4,"Piece"],[4,"Position"],[4,"Alignment"],[4,"Flag"],[4,"Count"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Opt","getopts","A description of a possible option.",null,null],[12,"name","","Name of the option",0,null],[12,"hasarg","","Whether it has an argument",0,null],[12,"occur","","How often it can occur",0,null],[12,"aliases","","Which options it aliases",0,null],[3,"OptGroup","","One group of options, e.g., both `-h` and `--help`, along with their shared description and properties.",null,null],[12,"short_name","","Short name of the option, e.g. `h` for a `-h` option",1,null],[12,"long_name","","Long name of the option, e.g. `help` for a `--help` option",1,null],[12,"hint","","Hint for argument, e.g. `FILE` for a `-o FILE` option",1,null],[12,"desc","","Description for usage help text",1,null],[12,"hasarg","","Whether option has an argument",1,null],[12,"occur","","How often it can occur",1,null],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",2,null],[4,"Name","","Name of an option. Either a string or a single char.",null,null],[13,"Long","","A string representing the long name of an option. For example: \"help\"",3,null],[13,"Short","","A char representing the short name of an option. For example: 'h'",3,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",4,null],[13,"No","","The option takes no argument.",4,null],[13,"Maybe","","The option argument is optional.",4,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",5,null],[13,"Optional","","The option occurs at most once.",5,null],[13,"Multi","","The option occurs zero or more times.",5,null],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",6,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",6,null],[13,"OptionMissing","","A required option is not present.",6,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",6,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",6,null],[4,"FailType","","The type of failure that occurred.",null,null],[13,"ArgumentMissing_","","",7,null],[13,"UnrecognizedOption_","","",7,null],[13,"OptionMissing_","","",7,null],[13,"OptionDuplicated_","","",7,null],[13,"UnexpectedArgument_","","",7,null],[5,"reqopt","","Create a long option that is required and takes an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optopt","","Create a long option that is optional and takes an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optflag","","Create a long option that is optional and does not take an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optflagopt","","Create a long option that is optional and takes an optional argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"opt","","Create a generic option group, stating all parameters explicitly",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"optgroup"}}],[5,"getopts","","Parse command line arguments according to the provided options.",null,null],[5,"usage","","Derive a usage message from a set of long options.",null,null],[5,"short_usage","","Derive a short one-line usage summary from a set of long options.",null,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"hasarg"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"occur"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"opt"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"opt"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"opt"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"optgroup"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"optgroup"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"optgroup"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"failtype"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"failtype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"long_to_short","","Translate OptGroup into Opt. (Both short and long names correspond to different Opts).",1,{"inputs":[{"name":"self"}],"output":{"name":"opt"}}],[11,"opt_present","","Returns true if an option was matched.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",2,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",2,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or none.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Opt"],[3,"OptGroup"],[3,"Matches"],[4,"Name"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"]]};
searchIndex["graphviz"] = {"doc":"Generate files suitable for use with Graphviz","items":[[3,"Id","graphviz","`Id` is a Graphviz `ID`.",null,null],[4,"LabelText","","The text for a graphviz label on a node or edge.",null,null],[13,"LabelStr","","This kind of label preserves the text directly as is.",0,null],[13,"EscStr","","This kind of label uses the graphviz label escString type: http://www.graphviz.org/content/attrs#kescString",0,null],[13,"HtmlStr","","This uses a graphviz [HTML string label][html]. The string is printed exactly as given, but between `<` and `>`. **No escaping is performed.**",0,null],[4,"Style","","The style for a node or edge. See http://www.graphviz.org/doc/info/attrs.html#k:style for descriptions. Note that some of these are not valid for edges.",null,null],[13,"None","","",1,null],[13,"Solid","","",1,null],[13,"Dashed","","",1,null],[13,"Dotted","","",1,null],[13,"Bold","","",1,null],[13,"Rounded","","",1,null],[13,"Diagonals","","",1,null],[13,"Filled","","",1,null],[13,"Striped","","",1,null],[13,"Wedged","","",1,null],[4,"RenderOption","","",null,null],[13,"NoEdgeLabels","","",2,null],[13,"NoNodeLabels","","",2,null],[13,"NoEdgeStyles","","",2,null],[13,"NoNodeStyles","","",2,null],[5,"escape_html","","Escape tags in such a way that it is suitable for inclusion in a Graphviz HTML label.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"default_options","","Returns vec holding all the default render options.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"render","","Renders directed graph `g` into the writer `w` in DOT syntax. (Simple wrapper around `render_opts` that passes a default set of options.)",null,{"inputs":[{"name":"g"},{"name":"w"}],"output":{"name":"result"}}],[5,"render_opts","","Renders directed graph `g` into the writer `w` in DOT syntax. (Main entry point for the library.)",null,null],[6,"Nodes","","",null,null],[6,"Edges","","",null,null],[8,"Labeller","","Each instance of a type that implements `Label<C>` maps to a unique identifier with respect to `C`, which is used to identify it in the generated .dot file. They can also provide more elaborate (and non-unique) label text that is used in the graphviz rendered output. The graph instance is responsible for providing the DOT compatible identifiers for the nodes and (optionally) rendered labels for the nodes and edges, as well as an identifier for the graph itself.",null,null],[16,"Node","","",3,null],[16,"Edge","","",3,null],[10,"graph_id","","Must return a DOT compatible identifier naming the graph.",3,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[10,"node_id","","Maps `n` to a unique identifier with respect to `self`. The implementor is responsible for ensuring that the returned name is a valid DOT identifier.",3,null],[11,"node_shape","","Maps `n` to one of the [graphviz `shape` names][1]. If `None` is returned, no `shape` attribute is specified.",3,null],[11,"node_label","","Maps `n` to a label that will be used in the rendered output. The label need not be unique, and may be the empty string; the default is just the output from `node_id`.",3,null],[11,"edge_label","","Maps `e` to a label that will be used in the rendered output. The label need not be unique, and may be the empty string; the default is in fact the empty string.",3,null],[11,"node_style","","Maps `n` to a style that will be used in the rendered output.",3,null],[11,"edge_style","","Maps `e` to a style that will be used in the rendered output.",3,null],[8,"GraphWalk","","GraphWalk is an abstraction over a directed graph = (nodes,edges) made up of node handles `N` and edge handles `E`, where each `E` can be mapped to its source and target nodes.",null,null],[16,"Node","","",4,null],[16,"Edge","","",4,null],[10,"nodes","","Returns all the nodes in this graph.",4,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[10,"edges","","Returns all of the edges in this graph.",4,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[10,"source","","The source node for `edge`.",4,null],[10,"target","","The target node for `edge`.",4,null],[8,"IntoCow","","",null,null],[10,"into_cow","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates an `Id` named `name`.",6,{"inputs":[{"name":"name"}],"output":{"name":"result"}}],[11,"as_slice","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name","","",6,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"label","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"escaped","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"html","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"to_dot_string","","Renders text as string suitable for a label in a .dot file. This includes quotes or suitable delimeters.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"prefix_line","","Puts `prefix` on a line above this label, with a blank line separator.",0,{"inputs":[{"name":"self"},{"name":"labeltext"}],"output":{"name":"labeltext"}}],[11,"suffix_line","","Puts `suffix` on a line below this label, with a blank line separator.",0,{"inputs":[{"name":"self"},{"name":"labeltext"}],"output":{"name":"labeltext"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"renderoption"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"renderoption"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"LabelText"],[4,"Style"],[4,"RenderOption"],[8,"Labeller"],[8,"GraphWalk"],[8,"IntoCow"],[3,"Id"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",16,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",17,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",18,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"passwd","","",null,null],[12,"pw_name","","",19,null],[12,"pw_passwd","","",19,null],[12,"pw_uid","","",19,null],[12,"pw_gid","","",19,null],[12,"pw_change","","",19,null],[12,"pw_class","","",19,null],[12,"pw_gecos","","",19,null],[12,"pw_dir","","",19,null],[12,"pw_shell","","",19,null],[12,"pw_expire","","",19,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",20,null],[12,"ifa_name","","",20,null],[12,"ifa_flags","","",20,null],[12,"ifa_addr","","",20,null],[12,"ifa_netmask","","",20,null],[12,"ifa_dstaddr","","",20,null],[12,"ifa_data","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"utsname","","",null,null],[12,"sysname","","",22,null],[12,"nodename","","",22,null],[12,"release","","",22,null],[12,"version","","",22,null],[12,"machine","","",22,null],[3,"msghdr","","",null,null],[12,"msg_name","","",23,null],[12,"msg_namelen","","",23,null],[12,"msg_iov","","",23,null],[12,"msg_iovlen","","",23,null],[12,"msg_control","","",23,null],[12,"msg_controllen","","",23,null],[12,"msg_flags","","",23,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",24,null],[12,"cmsg_level","","",24,null],[12,"cmsg_type","","",24,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",25,null],[12,"if_name","","",25,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",26,null],[12,"aio_offset","","",26,null],[12,"aio_buf","","",26,null],[12,"aio_nbytes","","",26,null],[12,"aio_reqprio","","",26,null],[12,"aio_sigevent","","",26,null],[12,"aio_lio_opcode","","",26,null],[3,"utmpx","","",null,null],[12,"ut_user","","",27,null],[12,"ut_id","","",27,null],[12,"ut_line","","",27,null],[12,"ut_pid","","",27,null],[12,"ut_type","","",27,null],[12,"ut_tv","","",27,null],[12,"ut_host","","",27,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",28,null],[12,"gl_offs","","",28,null],[12,"gl_pathv","","",28,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",29,null],[12,"ss_family","","",29,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",30,null],[12,"ai_family","","",30,null],[12,"ai_socktype","","",30,null],[12,"ai_protocol","","",30,null],[12,"ai_addrlen","","",30,null],[12,"ai_canonname","","",30,null],[12,"ai_addr","","",30,null],[12,"ai_next","","",30,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",31,null],[12,"denom","","",31,null],[3,"stat","","",null,null],[12,"st_dev","","",32,null],[12,"st_mode","","",32,null],[12,"st_nlink","","",32,null],[12,"st_ino","","",32,null],[12,"st_uid","","",32,null],[12,"st_gid","","",32,null],[12,"st_rdev","","",32,null],[12,"st_atime","","",32,null],[12,"st_atime_nsec","","",32,null],[12,"st_mtime","","",32,null],[12,"st_mtime_nsec","","",32,null],[12,"st_ctime","","",32,null],[12,"st_ctime_nsec","","",32,null],[12,"st_birthtime","","",32,null],[12,"st_birthtime_nsec","","",32,null],[12,"st_size","","",32,null],[12,"st_blocks","","",32,null],[12,"st_blksize","","",32,null],[12,"st_flags","","",32,null],[12,"st_gen","","",32,null],[12,"st_lspare","","",32,null],[12,"st_qspare","","",32,null],[3,"dirent","","",null,null],[12,"d_ino","","",33,null],[12,"d_seekoff","","",33,null],[12,"d_reclen","","",33,null],[12,"d_namlen","","",33,null],[12,"d_type","","",33,null],[12,"d_name","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",34,null],[12,"si_errno","","",34,null],[12,"si_code","","",34,null],[12,"si_pid","","",34,null],[12,"si_uid","","",34,null],[12,"si_status","","",34,null],[12,"si_addr","","",34,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",35,null],[12,"sa_mask","","",35,null],[12,"sa_flags","","",35,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",36,null],[12,"ss_size","","",36,null],[12,"ss_flags","","",36,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",37,null],[12,"fst_posmode","","",37,null],[12,"fst_offset","","",37,null],[12,"fst_length","","",37,null],[12,"fst_bytesalloc","","",37,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",38,null],[12,"ra_count","","",38,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",39,null],[12,"f_frsize","","",39,null],[12,"f_blocks","","",39,null],[12,"f_bfree","","",39,null],[12,"f_bavail","","",39,null],[12,"f_files","","",39,null],[12,"f_ffree","","",39,null],[12,"f_favail","","",39,null],[12,"f_fsid","","",39,null],[12,"f_flag","","",39,null],[12,"f_namemax","","",39,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",40,null],[12,"dli_fbase","","",40,null],[12,"dli_sname","","",40,null],[12,"dli_saddr","","",40,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",41,null],[12,"sin_family","","",41,null],[12,"sin_port","","",41,null],[12,"sin_addr","","",41,null],[12,"sin_zero","","",41,null],[3,"statfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_iosize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_owner","","",42,null],[12,"f_type","","",42,null],[12,"f_flags","","",42,null],[12,"f_fssubtype","","",42,null],[12,"f_fstypename","","",42,null],[12,"f_mntonname","","",42,null],[12,"f_mntfromname","","",42,null],[12,"f_reserved","","",42,null],[3,"kevent","","",null,null],[12,"ident","","",43,null],[12,"filter","","",43,null],[12,"flags","","",43,null],[12,"fflags","","",43,null],[12,"data","","",43,null],[12,"udata","","",43,null],[3,"kevent64_s","","",null,null],[12,"ident","","",44,null],[12,"filter","","",44,null],[12,"flags","","",44,null],[12,"fflags","","",44,null],[12,"data","","",44,null],[12,"udata","","",44,null],[12,"ext","","",44,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",45,null],[12,"dqb_bsoftlimit","","",45,null],[12,"dqb_curbytes","","",45,null],[12,"dqb_ihardlimit","","",45,null],[12,"dqb_isoftlimit","","",45,null],[12,"dqb_curinodes","","",45,null],[12,"dqb_btime","","",45,null],[12,"dqb_itime","","",45,null],[12,"dqb_id","","",45,null],[12,"dqb_spare","","",45,null],[3,"termios","","",null,null],[12,"c_iflag","","",46,null],[12,"c_oflag","","",46,null],[12,"c_cflag","","",46,null],[12,"c_lflag","","",46,null],[12,"c_cc","","",46,null],[12,"c_ispeed","","",46,null],[12,"c_ospeed","","",46,null],[3,"flock","","",null,null],[12,"l_start","","",47,null],[12,"l_len","","",47,null],[12,"l_pid","","",47,null],[12,"l_type","","",47,null],[12,"l_whence","","",47,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",48,null],[12,"hdr_cnt","","",48,null],[12,"trailers","","",48,null],[12,"trl_cnt","","",48,null],[3,"lconv","","",null,null],[12,"decimal_point","","",49,null],[12,"thousands_sep","","",49,null],[12,"grouping","","",49,null],[12,"int_curr_symbol","","",49,null],[12,"currency_symbol","","",49,null],[12,"mon_decimal_point","","",49,null],[12,"mon_thousands_sep","","",49,null],[12,"mon_grouping","","",49,null],[12,"positive_sign","","",49,null],[12,"negative_sign","","",49,null],[12,"int_frac_digits","","",49,null],[12,"frac_digits","","",49,null],[12,"p_cs_precedes","","",49,null],[12,"p_sep_by_space","","",49,null],[12,"n_cs_precedes","","",49,null],[12,"n_sep_by_space","","",49,null],[12,"p_sign_posn","","",49,null],[12,"n_sign_posn","","",49,null],[12,"int_p_cs_precedes","","",49,null],[12,"int_n_cs_precedes","","",49,null],[12,"int_p_sep_by_space","","",49,null],[12,"int_n_sep_by_space","","",49,null],[12,"int_p_sign_posn","","",49,null],[12,"int_n_sign_posn","","",49,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",50,null],[12,"sigev_signo","","",50,null],[12,"sigev_value","","",50,null],[12,"sigev_notify_attributes","","",50,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"]]};
searchIndex["log"] = {"doc":"Utilities for program-wide and customizable logging","items":[[3,"LogLevel","log","Wraps the log level with fmt implementations.",null,null],[12,"0","","",0,null],[3,"LogRecord","","A LogRecord is created by the logging macros, and passed as the only argument to Loggers.",null,null],[12,"module_path","","The module path of where the LogRecord originated.",1,null],[12,"level","","The LogLevel of this record.",1,null],[12,"args","","The arguments from the log line.",1,null],[12,"file","","The file of where the LogRecord originated.",1,null],[12,"line","","The line number of where the LogRecord originated.",1,null],[5,"set_logger","","Replaces the thread-local logger with the specified logger, returning the old logger.",null,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[0,"macros","","Logging macros",null,null],[17,"MAX_LOG_LEVEL","","Maximum logging level of a module that can be specified. Common logging levels are found in the DEBUG/INFO/WARN/ERROR constants.",null,null],[17,"DEBUG","","Debug log level",null,null],[17,"INFO","","Info log level",null,null],[17,"WARN","","Warn log level",null,null],[17,"ERROR","","Error log level",null,null],[8,"Logger","","A trait used to represent an interface to a thread-local logger. Each thread can have its own custom logger which can respond to logging messages however it likes.",null,null],[10,"log","","Logs a single message described by the `record`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"log","","The standard logging macro",null,null],[14,"error","","A convenience macro for logging at the error log level.",null,null],[14,"warn","","A convenience macro for logging at the warning log level.",null,null],[14,"info","","A convenience macro for logging at the info log level.",null,null],[14,"debug","","A convenience macro for logging at the debug log level. This macro will be omitted at compile time in an optimized build unless `-C debug-assertions` is passed to the compiler.",null,null],[14,"log_enabled","","A macro to test whether a log level is enabled for the current module.",null,null]],"paths":[[3,"LogLevel"],[3,"LogRecord"],[8,"Logger"]]};
searchIndex["panic_abort"] = {"doc":"Implementation of Rust panics via process aborts","items":[[5,"__rust_maybe_catch_panic","panic_abort","",null,null],[5,"__rust_start_panic","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"u32"}}],[0,"personalities","","",null,null],[5,"rust_eh_personality","panic_abort::personalities","",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex["panic_unwind"] = {"doc":"Implementation of panics via stack unwinding","items":[[5,"__rust_maybe_catch_panic","panic_unwind","",null,null],[5,"__rust_start_panic","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"u32"}}]],"paths":[]};
searchIndex["proc_macro"] = {"doc":"A support library for macro authors when defining new macros.","items":[[3,"TokenStream","proc_macro","The main type provided by this crate, representing an abstract stream of tokens.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"LexError"],[3,"TokenStream"]]};
searchIndex["proc_macro_plugin"] = {"doc":"Proc_Macro","items":[[5,"plugin_registrar","proc_macro_plugin","",null,{"inputs":[{"name":"registry"}],"output":null}]],"paths":[]};
searchIndex["rand"] = {"doc":"Interface to random number generators in Rust.","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",3,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",4,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",5,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",6,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",7,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",8,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",9,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",9,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",11,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",12,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"randsample"}}],[11,"sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",16,null],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",17,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",19,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",19,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",19,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",20,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",21,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",20,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",20,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","Creates an instance of `ReseedWithDefault`.",22,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[8,"Rng","rand","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",23,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",23,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",23,null],[11,"gen","","Return a random value of a `Rand` type.",23,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",23,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",23,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",23,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",23,null],[11,"shuffle","","Shuffle a mutable slice in place.",23,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",24,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",24,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",27,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",27,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",27,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"]]};
searchIndex["rustc"] = {"doc":"The Rust compiler.","items":[[0,"diagnostics","rustc","",null,null],[0,"cfg","","Module that constructs a control-flow graph representing an item. Uses `Graph` as the underlying representation.",null,null],[3,"CFG","rustc::cfg","",null,null],[12,"graph","","",0,null],[12,"entry","","",0,null],[12,"exit","","",0,null],[3,"CFGEdgeData","","",null,null],[12,"exiting_scopes","","",1,null],[4,"CFGNodeData","","",null,null],[13,"AST","","",2,null],[13,"Entry","","",2,null],[13,"Exit","","",2,null],[13,"Dummy","","",2,null],[13,"Unreachable","","",2,null],[0,"graphviz","","",null,null],[3,"LabelledCFG","rustc::cfg::graphviz","",null,null],[12,"hir_map","","",3,null],[12,"cfg","","",3,null],[12,"name","","",3,null],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",3,null],[6,"Node","","",null,null],[6,"Edge","","",null,null],[11,"graph_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node_id","","",3,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"id"}}],[11,"node_label","","",3,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"labeltext"}}],[11,"edge_label","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"labeltext"}}],[11,"nodes","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"edges","","",3,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[11,"source","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}],[11,"target","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}],[6,"CFGIndex","rustc::cfg","",null,null],[6,"CFGGraph","","",null,null],[6,"CFGNode","","",null,null],[6,"CFGEdge","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cfgnodedata"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cfgnodedata"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"cfgnodedata"}],"output":{"name":"bool"}}],[11,"id","","",2,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"tyctxt"},{"name":"body"}],"output":{"name":"cfg"}}],[11,"node_is_reachable","","",0,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[0,"dep_graph","rustc","",null,null],[3,"DepTrackingMap","rustc::dep_graph","A DepTrackingMap offers a subset of the `Map` API and ensures that we make calls to `read` and `write` as appropriate. We key the maps with a unique type for brevity.",null,null],[3,"WorkProductId","","A \"work product\" corresponds to a `.o` (or other) file that we save in between runs. These ids do not have a DefId but rather some independent path or string that persists between runs without the need to be mapped or unmapped. (This ensures we can serialize them even in the absence of a tcx.)",null,null],[12,"0","","",4,null],[3,"DepGraph","","",null,null],[3,"WorkProduct","","A \"work product\" is an intermediate result that we save into the incremental directory for later re-use. The primary example are the object files that we save for each partition at code generation time.",null,null],[12,"input_hash","","Extra hash used to decide if work-product is still suitable; note that this is *not* a hash of the work-product itself. See documentation on `WorkProduct` type for an example.",5,null],[12,"saved_files","","Saved files associated with this CGU",5,null],[3,"DepGraphQuery","","",null,null],[12,"graph","","",6,null],[12,"indices","","",6,null],[3,"AssertDepGraphSafe","","A convenient override that lets you pass arbitrary state into a task. Every use should be accompanied by a comment explaining why it makes sense (or how it could be refactored away in the future).",null,null],[12,"0","","",7,null],[3,"DepTask","","",null,null],[4,"DepNode","","",null,null],[13,"Krate","","",8,null],[13,"Hir","","",8,null],[13,"HirBody","","",8,null],[13,"MetaData","","",8,null],[13,"WorkProduct","","",8,null],[13,"CollectLanguageItems","","",8,null],[13,"CheckStaticRecursion","","",8,null],[13,"ResolveLifetimes","","",8,null],[13,"RegionResolveCrate","","",8,null],[13,"CheckLoops","","",8,null],[13,"PluginRegistrar","","",8,null],[13,"StabilityIndex","","",8,null],[13,"CollectItem","","",8,null],[13,"CollectItemSig","","",8,null],[13,"Coherence","","",8,null],[13,"EffectCheck","","",8,null],[13,"Liveness","","",8,null],[13,"Resolve","","",8,null],[13,"EntryPoint","","",8,null],[13,"CheckEntryFn","","",8,null],[13,"CoherenceCheckTrait","","",8,null],[13,"CoherenceCheckImpl","","",8,null],[13,"CoherenceOverlapCheck","","",8,null],[13,"CoherenceOverlapCheckSpecial","","",8,null],[13,"CoherenceOverlapInherentCheck","","",8,null],[13,"CoherenceOrphanCheck","","",8,null],[13,"Variance","","",8,null],[13,"WfCheck","","",8,null],[13,"TypeckItemType","","",8,null],[13,"UnusedTraitCheck","","",8,null],[13,"CheckConst","","",8,null],[13,"Privacy","","",8,null],[13,"IntrinsicCheck","","",8,null],[13,"MatchCheck","","",8,null],[13,"MirKrate","","",8,null],[13,"Mir","","",8,null],[13,"BorrowCheckKrate","","",8,null],[13,"BorrowCheck","","",8,null],[13,"RvalueCheck","","",8,null],[13,"Reachability","","",8,null],[13,"DeadCheck","","",8,null],[13,"StabilityCheck","","",8,null],[13,"LateLintCheck","","",8,null],[13,"TransCrate","","",8,null],[13,"TransCrateItem","","",8,null],[13,"TransInlinedItem","","",8,null],[13,"TransWriteMetadata","","",8,null],[13,"LinkBinary","","",8,null],[13,"AssociatedItems","","",8,null],[13,"ItemSignature","","",8,null],[13,"TypeParamPredicates","","",8,null],[13,"SizedConstraint","","",8,null],[13,"AdtDestructor","","",8,null],[13,"AssociatedItemDefIds","","",8,null],[13,"InherentImpls","","",8,null],[13,"TypeckBodiesKrate","","",8,null],[13,"TypeckTables","","",8,null],[13,"UsedTraitImports","","",8,null],[13,"MonomorphicConstEval","","",8,null],[13,"TraitImpls","","",8,null],[13,"TraitItems","","",8,null],[13,"ReprHints","","",8,null],[13,"TraitSelect","","",8,null],[12,"trait_def_id","rustc::dep_graph::DepNode","",8,null],[12,"input_def_id","","",8,null],[13,"ProjectionCache","rustc::dep_graph","",8,null],[12,"def_ids","rustc::dep_graph::DepNode","",8,null],[5,"visit_all_bodies_in_krate","rustc::dep_graph","",null,{"inputs":[{"name":"tyctxt"},{"name":"c"}],"output":null}],[5,"visit_all_item_likes_in_krate","","Visit all the items in the krate in some order. When visiting a particular item, first create a dep-node by calling `dep_node_fn` and push that onto the dep-graph stack of tasks, and also create a read edge from the corresponding AST node. This is used in compiler passes to automatically record the item that they are working on.",null,{"inputs":[{"name":"tyctxt"},{"name":"f"},{"name":"v"}],"output":null}],[0,"debug","","Code for debugging the dep-graph.",null,null],[3,"DepNodeFilter","rustc::dep_graph::debug","A dep-node filter goes from a user-defined string to a query over nodes. Right now the format is like this:",null,null],[3,"EdgeFilter","","A filter like `F -> G` where `F` and `G` are valid dep-node filters. This can be used to test the source/target independently.",null,null],[12,"source","","",9,null],[12,"target","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"accepts_all","","True if all nodes always pass the filter.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"test","","Tests whether `node` meets the filter, returning true if so.",10,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"new","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"test","","",9,{"inputs":[{"name":"self"},{"name":"depnode"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"clone","rustc::dep_graph","",8,{"inputs":[{"name":"self"}],"output":{"name":"depnode"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__sd"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"from_label_string","","Used in testing",8,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",8,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"workproductid"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",11,null],[11,"insert","","",11,null],[11,"entry","","",11,null],[11,"contains_key","","",11,null],[11,"keys","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"push","","Append `elem` to the vector stored for `k`, creating a new vector if needed. This is considered a write to `k`.",11,null],[11,"index","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"depgraph"}}],[11,"new","","",12,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"is_fully_enabled","","True if we are actually building the full dep-graph.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"query","","",12,{"inputs":[{"name":"self"}],"output":{"name":"depgraphquery"}}],[11,"in_ignore","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"in_task","","",12,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"with_ignore","","",12,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"with_task","","Starts a new dep-graph task. Dep-graph tasks are specified using a free function (`task`) and **not** a closure -- this is intentional because we want to exercise tight control over what state they have access to. In particular, we want to prevent implicit 'leaks' of tracked state into the task (which could then be read without generating correct edges in the dep-graph -- see the [README] for more details on the dep-graph). To this end, the task function gets exactly two pieces of state: the context `cx` and an argument `arg`. Both of these bits of state must be of some type that implements `DepGraphSafe` and hence does not leak.",12,null],[11,"read","","",12,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":null}],[11,"write","","",12,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":null}],[11,"insert_previous_work_product","","Indicates that a previous work product exists for `v`. This is invoked during initial start-up based on what nodes are clean (and what files exist in the incr. directory).",12,{"inputs":[{"name":"self"},{"name":"arc"},{"name":"workproduct"}],"output":null}],[11,"insert_work_product","","Indicates that we created the given work-product in this run for `v`. This record will be preserved and loaded in the next run.",12,{"inputs":[{"name":"self"},{"name":"arc"},{"name":"workproduct"}],"output":null}],[11,"previous_work_product","","Check whether a previous work product exists for `v` and, if so, return the path that leads to it. Used to skip doing work.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"option"}}],[11,"work_products","","Access the map of work-products created during this run. Only used during saving of the dep-graph.",12,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"previous_work_products","","Access the map of work-products created during the cached run. Only used during saving of the dep-graph.",12,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"workproduct"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",6,null],[11,"contains_node","","",6,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"nodes","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"edges","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"transitive_successors","","All nodes reachable from `node`. In other words, things that will have to be recomputed if `node` changes.",6,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"transitive_predecessors","","All nodes that can reach `node`.",6,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"immediate_successors","","Just the outgoing edges from `node`.",6,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"new","","",13,{"inputs":[{"name":"depgraphthreaddata"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[8,"DepTrackingMapConfig","","",null,null],[16,"Key","","",14,null],[16,"Value","","",14,null],[10,"to_dep_node","","",14,null],[8,"DepGraphSafe","","The `DepGraphSafe` trait is used to specify what kinds of values are safe to \"leak\" into a task. The idea is that this should be only be implemented for things like the tcx as well as various id types, which will create reads in the dep-graph whenever the trait loads anything that might depend on the input program.",null,null],[0,"hir","rustc","",null,null],[3,"Lifetime","rustc::hir","",null,null],[12,"id","","",15,null],[12,"span","","",15,null],[12,"name","","Either \"'a\", referring to a named lifetime definition, or \"\" (aka keywords::Invalid), for elision placeholders.",15,null],[3,"LifetimeDef","","A lifetime definition, eg `'a: 'b+'c+'d`",null,null],[12,"lifetime","","",16,null],[12,"bounds","","",16,null],[12,"pure_wrt_drop","","",16,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name; for instance: std::cmp::PartialEq  .  It's represented as a sequence of identifiers, along with a bunch of supporting information.",null,null],[12,"span","","",17,null],[12,"def","","The definition that the path resolved to.",17,null],[12,"segments","","The segments in the path: the things separated by `::`.",17,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"name","","The identifier portion of this path segment.",18,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",18,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",19,null],[12,"types","","The type parameters for this path segment, if present.",19,null],[12,"infer_types","","Whether to infer remaining type parameters, if any. This only applies to expression and pattern paths, and out of those only the segments with no type parameters to begin with, e.g. `Vec::new` is `<Vec<..>>::new::<..>`.",19,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present. E.g., `Foo<A=Bar>`.",19,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"span","","Overall span",20,null],[12,"inputs","","`(A,B)`",20,null],[12,"output","","`C`",20,null],[3,"TyParam","","",null,null],[12,"name","","",21,null],[12,"id","","",21,null],[12,"bounds","","",21,null],[12,"default","","",21,null],[12,"span","","",21,null],[12,"pure_wrt_drop","","",21,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",22,null],[12,"ty_params","","",22,null],[12,"where_clause","","",22,null],[12,"span","","",22,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",23,null],[12,"predicates","","",23,null],[3,"WhereBoundPredicate","","A type bound, eg `for<'c> Foo: Send+Clone+'c`",null,null],[12,"span","","",24,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",24,null],[12,"bounded_ty","","The type being bounded",24,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",24,null],[3,"WhereRegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",null,null],[12,"span","","",25,null],[12,"lifetime","","",25,null],[12,"bounds","","",25,null],[3,"WhereEqPredicate","","An equality predicate (unsupported), e.g. `T=int`",null,null],[12,"id","","",26,null],[12,"span","","",26,null],[12,"lhs_ty","","",26,null],[12,"rhs_ty","","",26,null],[3,"Crate","","",null,null],[12,"module","","",27,null],[12,"attrs","","",27,null],[12,"span","","",27,null],[12,"exported_macros","","",27,null],[12,"items","","",27,null],[12,"trait_items","","",27,null],[12,"impl_items","","",27,null],[12,"bodies","","",27,null],[12,"trait_impls","","",27,null],[12,"trait_default_impl","","",27,null],[12,"body_ids","","A list of the body ids written out in the order in which they appear in the crate. If you're going to process all the bodies in the crate, you should iterate over this list rather than the keys of bodies.",27,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"name","","",28,null],[12,"attrs","","",28,null],[12,"id","","",28,null],[12,"span","","",28,null],[12,"body","","",28,null],[3,"Block","","",null,null],[12,"stmts","","Statements in a block",29,null],[12,"expr","","An expression at the end of the block without a semicolon, if any",29,null],[12,"id","","",29,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",29,null],[12,"span","","",29,null],[3,"Pat","","",null,null],[12,"id","","",30,null],[12,"node","","",30,null],[12,"span","","",30,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"name","","The identifier for the field",31,null],[12,"pat","","The pattern the field is destructured to",31,null],[12,"is_shorthand","","",31,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",32,null],[12,"ty","","",32,null],[12,"init","","Initializer expression to set the value, if any",32,null],[12,"id","","",32,null],[12,"span","","",32,null],[12,"attrs","","",32,null],[3,"Arm","","represents one arm of a 'match'",null,null],[12,"attrs","","",33,null],[12,"pats","","",33,null],[12,"guard","","",33,null],[12,"body","","",33,null],[3,"Field","","",null,null],[12,"name","","",34,null],[12,"expr","","",34,null],[12,"span","","",34,null],[12,"is_shorthand","","",34,null],[3,"BodyId","","",null,null],[12,"node_id","","",35,null],[3,"Body","","The body of a function or constant value.",null,null],[12,"arguments","","",36,null],[12,"value","","",36,null],[3,"Expr","","An expression",null,null],[12,"id","","",37,null],[12,"span","","",37,null],[12,"node","","",37,null],[12,"attrs","","",37,null],[3,"Destination","","",null,null],[12,"ident","","",38,null],[12,"loop_id","","",38,null],[3,"MutTy","","",null,null],[12,"ty","","",39,null],[12,"mutbl","","",39,null],[3,"MethodSig","","Represents a method's signature in a trait declaration or implementation.",null,null],[12,"unsafety","","",40,null],[12,"constness","","",40,null],[12,"abi","","",40,null],[12,"decl","","",40,null],[12,"generics","","",40,null],[3,"TraitItemId","","",null,null],[12,"node_id","","",41,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",42,null],[12,"name","","",42,null],[12,"attrs","","",42,null],[12,"node","","",42,null],[12,"span","","",42,null],[3,"ImplItemId","","",null,null],[12,"node_id","","",43,null],[3,"ImplItem","","Represents anything within an `impl` block",null,null],[12,"id","","",44,null],[12,"name","","",44,null],[12,"vis","","",44,null],[12,"defaultness","","",44,null],[12,"attrs","","",44,null],[12,"node","","",44,null],[12,"span","","",44,null],[3,"TypeBinding","","",null,null],[12,"id","","",45,null],[12,"name","","",45,null],[12,"ty","","",45,null],[12,"span","","",45,null],[3,"Ty","","",null,null],[12,"id","","",46,null],[12,"node","","",46,null],[12,"span","","",46,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",47,null],[12,"abi","","",47,null],[12,"lifetimes","","",47,null],[12,"decl","","",47,null],[3,"InlineAsmOutput","","",null,null],[12,"constraint","","",48,null],[12,"is_rw","","",48,null],[12,"is_indirect","","",48,null],[3,"InlineAsm","","",null,null],[12,"asm","","",49,null],[12,"asm_str_style","","",49,null],[12,"outputs","","",49,null],[12,"inputs","","",49,null],[12,"clobbers","","",49,null],[12,"volatile","","",49,null],[12,"alignstack","","",49,null],[12,"dialect","","",49,null],[12,"expn_id","","",49,null],[3,"Arg","","represents an argument in a function header",null,null],[12,"pat","","",50,null],[12,"id","","",50,null],[3,"FnDecl","","Represents the header (not the body) of a function declaration",null,null],[12,"inputs","","",51,null],[12,"output","","",51,null],[12,"variadic","","",51,null],[3,"Mod","","",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`. For `mod foo;`, the inner span ranges from the first token to the last token in the external file.",52,null],[12,"item_ids","","",52,null],[3,"ForeignMod","","",null,null],[12,"abi","","",53,null],[12,"items","","",53,null],[3,"EnumDef","","",null,null],[12,"variants","","",54,null],[3,"Variant_","","",null,null],[12,"name","","",55,null],[12,"attrs","","",55,null],[12,"data","","",55,null],[12,"disr_expr","","Explicit discriminant, eg `Foo = 1`",55,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",56,null],[12,"ref_id","","",56,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",57,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",57,null],[12,"span","","",57,null],[3,"StructField","","",null,null],[12,"span","","",58,null],[12,"name","","",58,null],[12,"vis","","",58,null],[12,"id","","",58,null],[12,"ty","","",58,null],[12,"attrs","","",58,null],[3,"ItemId","","",null,null],[12,"id","","",59,null],[3,"Item","","An item",null,null],[12,"name","","",60,null],[12,"attrs","","",60,null],[12,"id","","",60,null],[12,"node","","",60,null],[12,"vis","","",60,null],[12,"span","","",60,null],[3,"TraitItemRef","","A reference from an trait to one of its associated items. This contains the item's id, naturally, but also the item's name and some other high-level details (like whether it is an associated type or method, and whether it is public). This allows other passes to find the impl they want without loading the id (which means fewer edges in the incremental compilation graph).",null,null],[12,"id","","",61,null],[12,"name","","",61,null],[12,"kind","","",61,null],[12,"span","","",61,null],[12,"defaultness","","",61,null],[3,"ImplItemRef","","A reference from an impl to one of its associated items. This contains the item's id, naturally, but also the item's name and some other high-level details (like whether it is an associated type or method, and whether it is public). This allows other passes to find the impl they want without loading the id (which means fewer edges in the incremental compilation graph).",null,null],[12,"id","","",62,null],[12,"name","","",62,null],[12,"kind","","",62,null],[12,"span","","",62,null],[12,"vis","","",62,null],[12,"defaultness","","",62,null],[3,"ForeignItem","","",null,null],[12,"name","","",63,null],[12,"attrs","","",63,null],[12,"node","","",63,null],[12,"id","","",63,null],[12,"span","","",63,null],[12,"vis","","",63,null],[3,"Freevar","","A free variable referred to in a function.",null,null],[12,"def","","The variable being accessed free.",64,null],[12,"span","","",64,null],[3,"TraitCandidate","","",null,null],[12,"def_id","","",65,null],[12,"import_id","","",65,null],[4,"PathParameters","","",null,null],[13,"AngleBracketedParameters","","The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`",66,null],[13,"ParenthesizedParameters","","The `(A,B)` and `C` in `Foo(A,B) -> C`",66,null],[4,"TyParamBound","","The AST represents all type param bounds as types. typeck::collect::compute_bounds matches these against the \"special\" built-in traits (see middle::lang_items) and detects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",67,null],[13,"RegionTyParamBound","","",67,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",68,null],[13,"Maybe","","",68,null],[4,"UnsafeGeneric","","",null,null],[13,"Region","","",69,null],[13,"Type","","",69,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, eg `for<'c> Foo: Send+Clone+'c`",70,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",70,null],[13,"EqPredicate","","An equality predicate (unsupported)",70,null],[4,"BindingMode","","",null,null],[13,"BindByRef","","",71,null],[13,"BindByValue","","",71,null],[4,"RangeEnd","","",null,null],[13,"Included","","",72,null],[13,"Excluded","","",72,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",73,null],[13,"Binding","","A fresh binding `ref mut binding @ OPT_SUBPATTERN`. The `DefId` is for the definition of the variable being bound.",73,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",73,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",73,null],[13,"Path","","A path pattern for an unit struct/variant or a (maybe-associated) constant.",73,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",73,null],[13,"Box","","A `box` pattern",73,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",73,null],[13,"Lit","","A literal",73,null],[13,"Range","","A range pattern, e.g. `1...2` or `1..2`",73,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `PatKind::Slice(box [a, b], Some(i), box [y, z])`",73,null],[4,"Mutability","","",null,null],[13,"MutMutable","","",74,null],[13,"MutImmutable","","",74,null],[4,"BinOp_","","",null,null],[13,"BiAdd","","The `+` operator (addition)",75,null],[13,"BiSub","","The `-` operator (subtraction)",75,null],[13,"BiMul","","The `*` operator (multiplication)",75,null],[13,"BiDiv","","The `/` operator (division)",75,null],[13,"BiRem","","The `%` operator (modulus)",75,null],[13,"BiAnd","","The `&&` operator (logical and)",75,null],[13,"BiOr","","The `||` operator (logical or)",75,null],[13,"BiBitXor","","The `^` operator (bitwise xor)",75,null],[13,"BiBitAnd","","The `&` operator (bitwise and)",75,null],[13,"BiBitOr","","The `|` operator (bitwise or)",75,null],[13,"BiShl","","The `<<` operator (shift left)",75,null],[13,"BiShr","","The `>>` operator (shift right)",75,null],[13,"BiEq","","The `==` operator (equality)",75,null],[13,"BiLt","","The `<` operator (less than)",75,null],[13,"BiLe","","The `<=` operator (less than or equal to)",75,null],[13,"BiNe","","The `!=` operator (not equal to)",75,null],[13,"BiGe","","The `>=` operator (greater than or equal to)",75,null],[13,"BiGt","","The `>` operator (greater than)",75,null],[4,"UnOp","","",null,null],[13,"UnDeref","","The `*` operator for dereferencing",76,null],[13,"UnNot","","The `!` operator for logical inversion",76,null],[13,"UnNeg","","The `-` operator for negation",76,null],[4,"Stmt_","","",null,null],[13,"StmtDecl","","Could be an item or a local (let) binding:",77,null],[13,"StmtExpr","","Expr without trailing semi-colon (must have unit type):",77,null],[13,"StmtSemi","","Expr with trailing semi-colon (may have any type):",77,null],[4,"Decl_","","",null,null],[13,"DeclLocal","","A local (let) binding:",78,null],[13,"DeclItem","","An item binding:",78,null],[4,"BlockCheckMode","","",null,null],[13,"DefaultBlock","","",79,null],[13,"UnsafeBlock","","",79,null],[13,"PushUnsafeBlock","","",79,null],[13,"PopUnsafeBlock","","",79,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",80,null],[13,"UserProvided","","",80,null],[4,"Expr_","","",null,null],[13,"ExprBox","","A `box x` expression.",81,null],[13,"ExprArray","","An array (`[a, b, c, d]`)",81,null],[13,"ExprCall","","A function call",81,null],[13,"ExprMethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",81,null],[13,"ExprTup","","A tuple (`(a, b, c ,d)`)",81,null],[13,"ExprBinary","","A binary operation (For example: `a + b`, `a * b`)",81,null],[13,"ExprUnary","","A unary operation (For example: `!x`, `*x`)",81,null],[13,"ExprLit","","A literal (For example: `1`, `\"foo\"`)",81,null],[13,"ExprCast","","A cast (`foo as f64`)",81,null],[13,"ExprType","","",81,null],[13,"ExprIf","","An `if` block, with an optional else block",81,null],[13,"ExprWhile","","A while loop, with an optional label",81,null],[13,"ExprLoop","","Conditionless loop (can be exited with break, continue, or return)",81,null],[13,"ExprMatch","","A `match` block, with a source that indicates whether or not it is the result of a desugaring, and if so, which kind.",81,null],[13,"ExprClosure","","A closure (for example, `move |a, b, c| {a + b + c}`).",81,null],[13,"ExprBlock","","A block (`{ ... }`)",81,null],[13,"ExprAssign","","An assignment (`a = foo()`)",81,null],[13,"ExprAssignOp","","An assignment with an operator",81,null],[13,"ExprField","","Access of a named struct field (`obj.foo`)",81,null],[13,"ExprTupField","","Access of an unnamed field of a struct or tuple-struct",81,null],[13,"ExprIndex","","An indexing operation (`foo[2]`)",81,null],[13,"ExprPath","","Path to a definition, possibly containing lifetime or type parameters.",81,null],[13,"ExprAddrOf","","A referencing operation (`&a` or `&mut a`)",81,null],[13,"ExprBreak","","A `break`, with an optional label to break",81,null],[13,"ExprAgain","","A `continue`, with an optional label",81,null],[13,"ExprRet","","A `return`, with an optional value to be returned",81,null],[13,"ExprInlineAsm","","Inline assembly (from `asm!`), with its outputs and inputs.",81,null],[13,"ExprStruct","","A struct or struct-like variant literal expression.",81,null],[13,"ExprRepeat","","An array literal constructed from one repeated element.",81,null],[4,"QPath","","Optionally `Self`-qualified value/type path or associated extension.",null,null],[13,"Resolved","","Path to a definition, optionally \"fully-qualified\" with a `Self` type, if the path points to an associated item in a trait.",82,null],[13,"TypeRelative","","Type-related paths, e.g. `<T>::default` or `<T>::Output`. Will be resolved by type-checking to an associated item.",82,null],[4,"MatchSource","","Hints at the original code for a `match _ { .. }`",null,null],[13,"Normal","","A `match _ { .. }`",83,null],[13,"IfLetDesugar","","An `if let _ = _ { .. }` (optionally with `else { .. }`)",83,null],[12,"contains_else_clause","rustc::hir::MatchSource","",83,null],[13,"WhileLetDesugar","rustc::hir","A `while let _ = _ { .. }` (which was desugared to a `loop { match _ { .. } }`)",83,null],[13,"ForLoopDesugar","","A desugared `for _ in _ { .. }` loop",83,null],[13,"TryDesugar","","A desugared `?` operator",83,null],[4,"LoopSource","","The loop type that yielded an ExprLoop",null,null],[13,"Loop","","A `loop { .. }` loop",84,null],[13,"WhileLet","","A `while let _ = _ { .. }` loop",84,null],[13,"ForLoop","","A `for _ in _ { .. }` loop",84,null],[4,"LoopIdError","","",null,null],[13,"OutsideLoopScope","","",85,null],[13,"UnlabeledCfInWhileCondition","","",85,null],[13,"UnresolvedLabel","","",85,null],[4,"LoopIdResult","","",null,null],[13,"Ok","","",86,null],[13,"Err","","",86,null],[4,"CaptureClause","","",null,null],[13,"CaptureByValue","","",87,null],[13,"CaptureByRef","","",87,null],[4,"TraitMethod","","A trait method's body (or just argument names).",null,null],[13,"Required","","No default body in the trait, just a signature.",88,null],[13,"Provided","","Both signature and body are provided in the trait.",88,null],[4,"TraitItemKind","","Represents a trait method or associated constant or type",null,null],[13,"Const","","An associated constant with an optional value (otherwise `impl`s must contain a value)",89,null],[13,"Method","","A method with an optional body",89,null],[13,"Type","","An associated type with (possibly empty) bounds and optional concrete type",89,null],[4,"ImplItemKind","","Represents different contents within `impl`s",null,null],[13,"Const","","An associated constant of the given type, set to the constant result of the expression",90,null],[13,"Method","","A method implementation with the given signature and body",90,null],[13,"Type","","An associated type",90,null],[4,"PrimTy","","Not represented directly in the AST, referred to by name through a ty_path.",null,null],[13,"TyInt","","",91,null],[13,"TyUint","","",91,null],[13,"TyFloat","","",91,null],[13,"TyStr","","",91,null],[13,"TyBool","","",91,null],[13,"TyChar","","",91,null],[4,"Ty_","","The different kinds of types recognized by the compiler",null,null],[13,"TySlice","","A variable length slice (`[T]`)",92,null],[13,"TyArray","","A fixed length array (`[T; n]`)",92,null],[13,"TyPtr","","A raw pointer (`*const T` or `*mut T`)",92,null],[13,"TyRptr","","A reference (`&'a T` or `&'a mut T`)",92,null],[13,"TyBareFn","","A bare function (e.g. `fn(usize) -> bool`)",92,null],[13,"TyNever","","The never type (`!`)",92,null],[13,"TyTup","","A tuple (`(A, B, C, D,...)`)",92,null],[13,"TyPath","","A path to a type definition (`module::module::...::Type`), or an associated type, e.g. `<Vec<T> as Trait>::Type` or `<T>::Target`.",92,null],[13,"TyTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",92,null],[13,"TyImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",92,null],[13,"TyTypeof","","Unused for now",92,null],[13,"TyInfer","","TyInfer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",92,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",93,null],[13,"Normal","","",93,null],[4,"Constness","","",null,null],[13,"Const","","",94,null],[13,"NotConst","","",94,null],[4,"Defaultness","","",null,null],[13,"Default","","",95,null],[12,"has_value","rustc::hir::Defaultness","",95,null],[13,"Final","rustc::hir","",95,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",96,null],[13,"Negative","","`impl !Trait for Type`",96,null],[4,"FunctionRetTy","","",null,null],[13,"DefaultReturn","","Return type is not specified.",97,null],[13,"Return","","Everything else",97,null],[4,"UseKind","","",null,null],[13,"Single","","One import, e.g. `use foo::bar` or `use foo::bar as baz`. Also produced for each element of a list `use`, e.g.",98,null],[13,"Glob","","Glob import, e.g. `use foo::*`.",98,null],[13,"ListStem","","Degenerate list import, e.g. `use foo::{a, b}` produces an additional `use foo::{}` for performing checks such as unstable feature gating. May be removed in the future.",98,null],[4,"Visibility","","",null,null],[13,"Public","","",99,null],[13,"Crate","","",99,null],[13,"Restricted","","",99,null],[12,"path","rustc::hir::Visibility","",99,null],[12,"id","","",99,null],[13,"Inherited","rustc::hir","",99,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","",100,null],[13,"Tuple","","",100,null],[13,"Unit","","",100,null],[4,"Item_","","",null,null],[13,"ItemExternCrate","","An`extern crate` item, with optional original crate name,",101,null],[13,"ItemUse","","`use foo::bar::*;` or `use foo::bar::baz as quux;`",101,null],[13,"ItemStatic","","A `static` item",101,null],[13,"ItemConst","","A `const` item",101,null],[13,"ItemFn","","A function declaration",101,null],[13,"ItemMod","","A module",101,null],[13,"ItemForeignMod","","An external module",101,null],[13,"ItemTy","","A type alias, e.g. `type Foo = Bar<u8>`",101,null],[13,"ItemEnum","","An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`",101,null],[13,"ItemStruct","","A struct definition, e.g. `struct Foo<A> {x: A}`",101,null],[13,"ItemUnion","","A union definition, e.g. `union Foo<A, B> {x: A, y: B}`",101,null],[13,"ItemTrait","","Represents a Trait Declaration",101,null],[13,"ItemDefaultImpl","","",101,null],[13,"ItemImpl","","An implementation, eg `impl<A> Trait for Foo { .. }`",101,null],[4,"AssociatedItemKind","","",null,null],[13,"Const","","",102,null],[13,"Method","","",102,null],[12,"has_self","rustc::hir::AssociatedItemKind","",102,null],[13,"Type","rustc::hir","",102,null],[4,"ForeignItem_","","An item within an `extern` block",null,null],[13,"ForeignItemFn","","A foreign function",103,null],[13,"ForeignItemStatic","","A foreign static item (`static ext: u8`), with optional mutability (the boolean is true when mutable)",103,null],[0,"check_attr","","",null,null],[5,"check_crate","rustc::hir::check_attr","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"def","rustc::hir","",null,null],[3,"PathResolution","rustc::hir::def","The result of resolving a path before lowering to HIR. `base_def` is definition of resolved part of the path, `unresolved_segments` is the number of unresolved segments.     module::Type::AssocX::AssocY::MethodOrAssocType     ^~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     base_def      unresolved_segments = 3",null,null],[3,"Export","","",null,null],[12,"name","","",104,null],[12,"def","","",104,null],[4,"CtorKind","","",null,null],[13,"Fn","","",105,null],[13,"Const","","",105,null],[13,"Fictive","","",105,null],[4,"Def","","",null,null],[13,"Mod","","",106,null],[13,"Struct","","",106,null],[13,"Union","","",106,null],[13,"Enum","","",106,null],[13,"Variant","","",106,null],[13,"Trait","","",106,null],[13,"TyAlias","","",106,null],[13,"AssociatedTy","","",106,null],[13,"PrimTy","","",106,null],[13,"TyParam","","",106,null],[13,"SelfTy","","",106,null],[13,"Fn","","",106,null],[13,"Const","","",106,null],[13,"Static","","",106,null],[13,"StructCtor","","",106,null],[13,"VariantCtor","","",106,null],[13,"Method","","",106,null],[13,"AssociatedConst","","",106,null],[13,"Local","","",106,null],[13,"Upvar","","",106,null],[13,"Label","","",106,null],[13,"Macro","","",106,null],[13,"Err","","",106,null],[6,"DefMap","","",null,null],[6,"ExportMap","","",null,null],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"ctorkind"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"ctorkind"}],"output":{"name":"bool"}}],[11,"encode","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"encode","","",106,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"pathresolution"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",107,{"inputs":[{"name":"def"}],"output":{"name":"self"}}],[11,"with_unresolved_segments","","",107,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"self"}}],[11,"base_def","","",107,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"unresolved_segments","","",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind_name","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"export"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",104,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_ast","","",105,{"inputs":[{"name":"variantdata"}],"output":{"name":"ctorkind"}}],[11,"from_hir","","",105,{"inputs":[{"name":"variantdata"}],"output":{"name":"ctorkind"}}],[11,"def_id","","",106,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"kind_name","","",106,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"def_id","rustc::hir","",null,null],[3,"CrateNum","rustc::hir::def_id","",null,null],[3,"DefIndex","","A DefIndex is an index into the hir-map for a crate, identifying a particular definition. It should really be considered an interned shorthand for a particular DefPath.",null,null],[3,"DefId","","A DefId identifies a particular *definition*, by combining a crate index and a def index.",null,null],[12,"krate","","",108,null],[12,"index","","",108,null],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum LOCAL_CRATE in their DefId.",null,null],[17,"BUILTIN_MACROS_CRATE","","Virtual crate for builtin macros",null,null],[17,"CRATE_DEF_INDEX","","The crate root is always assigned index 0 by the AST Map code, thanks to `NodeCollector::new`.",null,null],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"cmp","","",109,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"hash","","",109,null],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",109,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",109,{"inputs":[{"name":"usize"}],"output":{"name":"cratenum"}}],[11,"from_u32","","",109,{"inputs":[{"name":"u32"}],"output":{"name":"cratenum"}}],[11,"as_usize","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",109,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_encode","","",109,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",109,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"defindex"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",110,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"encode","","",110,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"new","","",110,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",110,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",110,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"encode","","",108,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"local","","",108,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"intravisit","rustc::hir","HIR walker for walking the contents of nodes.",null,null],[3,"IdRange","rustc::hir::intravisit","",null,null],[12,"min","","",111,null],[12,"max","","",111,null],[3,"IdRangeComputingVisitor","","",null,null],[4,"FnKind","","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",112,null],[13,"Method","","fn foo(&self)",112,null],[13,"Closure","","|x, y| {}",112,null],[4,"NestedVisitorMap","","Specifies what nested things a visitor wants to visit. The most common choice is `OnlyBodies`, which will cause the visitor to visit fn bodies for fns that it encounters, but skip over nested item-like things.",null,null],[13,"None","","Do not visit any nested things. When you add a new \"non-nested\" thing, you will want to audit such uses to see if they remain valid.",113,null],[13,"OnlyBodies","","Do not visit nested item-like things, but visit nested things that are inside of an item-like.",113,null],[13,"All","","Visit all nested things, including item-likes.",113,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_sp_name","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_crate","","Walks the contents of a crate. See also `Crate::visit_all_items`.",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"},{"name":"nodeid"}],"output":null}],[5,"walk_body","","",null,{"inputs":[{"name":"v"},{"name":"body"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_qpath","","",null,{"inputs":[{"name":"v"},{"name":"qpath"},{"name":"nodeid"},{"name":"span"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_kind","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"bodyid"},{"name":"span"},{"name":"nodeid"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_trait_item_ref","","",null,{"inputs":[{"name":"v"},{"name":"traititemref"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_impl_item_ref","","",null,{"inputs":[{"name":"v"},{"name":"implitemref"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_decl","","",null,{"inputs":[{"name":"v"},{"name":"decl"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"walk_associated_item_kind","","",null,{"inputs":[{"name":"v"},{"name":"associateditemkind"}],"output":null}],[5,"walk_defaultness","","",null,{"inputs":[{"name":"v"},{"name":"defaultness"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `intravisit::walk_mod`.",null,null],[10,"nested_visit_map","","The default versions of the `visit_nested_XXX` routines invoke this method to get a map to use. By selecting an enum variant, you control which kinds of nested HIR are visited; see `NestedVisitorMap` for details. By \"nested HIR\", we are referring to bits of HIR that are not directly embedded within one another but rather indirectly, through a table in the crate. This is done to control dependencies during incremental compilation: the non-inline bits of HIR can be tracked and hashed separately.",114,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_nested_item","","Invoked when a nested item is encountered. By default does nothing unless you override `nested_visit_map` to return `Some(_)`, in which case it will walk the item. **You probably don't want to override this method** -- instead, override `nested_visit_map` or use the \"shallow\" or \"deep\" visit patterns described on `itemlikevisit::ItemLikeVisitor`. The only reason to override this method is if you want a nested pattern but cannot supply a `Map`; see `nested_visit_map` for advice.",114,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":null}],[11,"visit_nested_trait_item","","Like `visit_nested_item()`, but for trait items. See `visit_nested_item()` for advice on when to override this method.",114,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":null}],[11,"visit_nested_impl_item","","Like `visit_nested_item()`, but for impl items. See `visit_nested_item()` for advice on when to override this method.",114,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":null}],[11,"visit_nested_body","","Invoked to visit the body of a function, method or closure. Like visit_nested_item, does nothing by default unless you override `nested_visit_map` to return `Some(_)`, in which case it will walk the body.",114,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":null}],[11,"visit_item","","Visit the top-level item and (optionally) nested items / impl items. See `visit_nested_item` for details.",114,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_body","","",114,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"as_deep_visitor","","When invoking `visit_all_item_likes()`, you need to supply an item-like visitor.  This method converts a \"intra-visit\" visitor into an item-like visitor that walks the entire tree. If you use this, you probably don't want to process the contents of nested item-like things, since the outer loop will visit them as well.",114,{"inputs":[{"name":"self"}],"output":{"name":"deepvisitor"}}],[11,"visit_id","","",114,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"visit_def_mention","","",114,{"inputs":[{"name":"self"},{"name":"def"}],"output":null}],[11,"visit_name","","",114,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_mod","","",114,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",114,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_local","","",114,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",114,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",114,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",114,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",114,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_decl","","",114,{"inputs":[{"name":"self"},{"name":"decl"}],"output":null}],[11,"visit_expr","","",114,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",114,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",114,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_where_predicate","","",114,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[11,"visit_fn_decl","","",114,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_fn","","",114,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"bodyid"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",114,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_trait_item_ref","","",114,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":null}],[11,"visit_impl_item","","",114,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_impl_item_ref","","",114,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":null}],[11,"visit_trait_ref","","",114,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",114,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",114,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",114,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"name"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",114,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",114,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",114,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",114,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",114,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_qpath","","",114,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_path","","",114,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_segment","","",114,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",114,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",114,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",114,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_macro_def","","",114,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":null}],[11,"visit_vis","","",114,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_associated_item_kind","","",114,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":null}],[11,"visit_defaultness","","",114,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":null}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"attrs","","",112,null],[11,"intra","","Returns the map to use for an \"intra item-like\" thing (if any). e.g., function body.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inter","","Returns the map to use for an \"item-like\" thing (if any). e.g., item, impl-item.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"idrange"}}],[11,"encode","","",111,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"idrange"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"idrange"}],"output":{"name":"bool"}}],[11,"max","","",111,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",111,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"add","","",111,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"new","","",115,{"inputs":[{"name":"map"}],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",115,{"inputs":[{"name":"self"}],"output":{"name":"idrange"}}],[11,"nested_visit_map","","",115,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_id","","",115,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[0,"itemlikevisit","rustc::hir","",null,null],[3,"DeepVisitor","rustc::hir::itemlikevisit","",null,null],[8,"ItemLikeVisitor","","The \"item-like visitor\" visitor defines only the top-level methods that can be invoked by `Crate::visit_all_item_likes()`. Whether this trait is the right one to implement will depend on the overall pattern you need. Here are the three available patterns, in roughly the order of desirability:",null,null],[10,"visit_item","","",116,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[10,"visit_trait_item","","",116,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[10,"visit_impl_item","","",116,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"new","","",117,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[11,"visit_item","","",117,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_trait_item","","",117,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",117,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[0,"lowering","rustc::hir","",null,null],[3,"LoweringContext","rustc::hir::lowering","",null,null],[5,"lower_crate","","",null,{"inputs":[{"name":"session"},{"name":"crate"},{"name":"resolver"}],"output":{"name":"crate"}}],[8,"Resolver","","",null,null],[10,"resolve_hir_path","","",118,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":null}],[10,"get_resolution","","",118,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"definitions","","",118,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"lower_item","","",119,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"option"}}],[0,"map","rustc::hir","",null,null],[3,"DefCollector","rustc::hir::map","Creates def ids for nodes in the AST.",null,null],[12,"visit_macro_invoc","","",120,null],[3,"MacroInvocationData","","",null,null],[12,"mark","","",121,null],[12,"def_index","","",121,null],[12,"const_expr","","",121,null],[3,"Forest","","Stores a crate and any number of inlined items from other crates.",null,null],[12,"dep_graph","","",122,null],[3,"Map","","Represents a mapping from Node IDs to AST elements and their parent Node IDs",null,null],[12,"forest","","The backing storage for all the AST nodes.",123,null],[12,"dep_graph","","Same as the dep_graph in forest, just available with one fewer deref. This is a gratuitious micro-optimization.",123,null],[3,"NodesMatchingSuffix","","",null,null],[4,"Node","","",null,null],[13,"NodeItem","","",124,null],[13,"NodeForeignItem","","",124,null],[13,"NodeTraitItem","","",124,null],[13,"NodeImplItem","","",124,null],[13,"NodeVariant","","",124,null],[13,"NodeField","","",124,null],[13,"NodeExpr","","",124,null],[13,"NodeStmt","","",124,null],[13,"NodeTy","","",124,null],[13,"NodeTraitRef","","",124,null],[13,"NodeLocal","","",124,null],[13,"NodePat","","",124,null],[13,"NodeBlock","","",124,null],[13,"NodeStructCtor","","NodeStructCtor represents a tuple struct.",124,null],[13,"NodeLifetime","","",124,null],[13,"NodeTyParam","","",124,null],[13,"NodeVisibility","","",124,null],[5,"map_crate","","",null,{"inputs":[{"name":"forest"},{"name":"definitions"}],"output":{"name":"map"}}],[0,"blocks","","This module provides a simplified abstraction for working with code blocks identified by their integer node-id.  In particular, it captures a common set of attributes that all \"function-like things\" (represented by `FnLike` instances) share.  For example, all `FnLike` instances have a type signature (be it explicit or inferred).  And all `FnLike` instances have a body, i.e. the code that is run when the function-like thing it represents is invoked.",null,null],[3,"FnLikeNode","rustc::hir::map::blocks","An FnLikeNode is a Node that is like a fn, in that it has a decl and a body (as well as a NodeId, a span, etc).",null,null],[4,"Code","","Carries either an FnLikeNode or a Expr, as these are the two constructs that correspond to \"code\" (as in, something from which we can construct a control-flow graph).",null,null],[13,"FnLike","","",125,null],[13,"Expr","","",125,null],[8,"MaybeFnLike","","MaybeFnLike wraps a method that indicates if an object corresponds to some FnLikeNode.",null,null],[10,"is_fn_like","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"fnlikenode"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_fn_like","rustc::hir","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","rustc::hir::map::blocks","",125,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"id","","",125,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Expr node input.",125,{"inputs":[{"name":"map"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",127,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"body","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"decl","","",127,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"span","","",127,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"id","","",127,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"constness","","",127,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"kind","","",127,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"new","rustc::hir::map","",120,{"inputs":[{"name":"definitions"}],"output":{"name":"self"}}],[11,"collect_root","","",120,{"inputs":[{"name":"self"}],"output":null}],[11,"with_parent","","",120,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"f"}],"output":null}],[11,"visit_const_expr","","",120,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_item","","",120,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_foreign_item","","",120,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_generics","","",120,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_trait_item","","",120,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",120,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_pat","","",120,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",120,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",120,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_lifetime_def","","",120,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_stmt","","",120,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[0,"definitions","","For each definition, we track the following data.  A definition here is defined somewhat circularly as \"something with a def-id\", but it generally corresponds to things like structs, enums, etc. There are also some rather random cases (like const initializer expressions) that are mostly just leftovers.",null,null],[3,"DefPathTable","rustc::hir::map::definitions","The DefPathTable maps DefIndexes to DefKeys and vice versa. Internally the DefPathTable holds a tree of DefKeys, where each DefKey stores the DefIndex of its parent. There is one DefPathTable for each crate.",null,null],[3,"Definitions","","The definition table containing node definitions. It holds the DefPathTable for local DefIds/DefPaths and it also stores a mapping from NodeIds to local DefIds.",null,null],[3,"DefKey","","A unique identifier that we can use to lookup a definition precisely. It combines the index of the definition's parent (if any) with a `DisambiguatedDefPathData`.",null,null],[12,"parent","","Parent path.",128,null],[12,"disambiguated_data","","Identifier of this node.",128,null],[3,"DisambiguatedDefPathData","","Pair of `DefPathData` and an integer disambiguator. The integer is normally 0, but in the event that there are multiple defs with the same `parent` and `data`, we use this field to disambiguate between them. This introduces some artificial ordering dependency but means that if you have (e.g.) two impls for the same type in the same module, they do get distinct def-ids.",null,null],[12,"data","","",129,null],[12,"disambiguator","","",129,null],[3,"DefPath","","",null,null],[12,"data","","the path leading from the crate root to the item",130,null],[12,"krate","","what krate root is this path relative to?",130,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","The crate root (marker)",131,null],[13,"Misc","","",131,null],[13,"Impl","","An impl",131,null],[13,"TypeNs","","Something in the type NS",131,null],[13,"ValueNs","","Something in the value NS",131,null],[13,"Module","","A module declaration",131,null],[13,"MacroDef","","A macro rule",131,null],[13,"ClosureExpr","","A closure expression",131,null],[13,"TypeParam","","A type parameter (generic parameter)",131,null],[13,"LifetimeDef","","A lifetime definition",131,null],[13,"EnumVariant","","A variant of a enum",131,null],[13,"Field","","A struct field",131,null],[13,"StructCtor","","Implicit ctor for a tuple-like struct",131,null],[13,"Initializer","","Initializer for a const",131,null],[13,"Binding","","Pattern binding",131,null],[13,"ImplTrait","","An `impl Trait` type node.",131,null],[13,"Typeof","","A `typeof` type node.",131,null],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"defpathtable"}}],[11,"def_key","","",132,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_index_for_def_key","","",132,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"option"}}],[11,"contains_key","","",132,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"retrace_path","","",132,null],[11,"encode","","",132,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",132,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"defkey"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"hash","","",128,null],[11,"encode","","",128,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",128,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"disambiguateddefpathdata"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"disambiguateddefpathdata"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"disambiguateddefpathdata"}],"output":{"name":"bool"}}],[11,"hash","","",129,null],[11,"encode","","",129,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",129,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"defpath"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"defpath"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"defpath"}],"output":{"name":"bool"}}],[11,"hash","","",130,null],[11,"encode","","",130,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",130,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"is_local","","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"make","","",130,{"inputs":[{"name":"cratenum"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"to_string","","",130,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"deterministic_hash","","",130,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"u64"}}],[11,"deterministic_hash_to","","",130,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"h"}],"output":null}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"defpathdata"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"defpathdata"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"defpathdata"}],"output":{"name":"bool"}}],[11,"hash","","",131,null],[11,"encode","","",131,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",131,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","Create new empty definition map.",133,{"inputs":[],"output":{"name":"definitions"}}],[11,"def_path_table","","",133,{"inputs":[{"name":"self"}],"output":{"name":"defpathtable"}}],[11,"len","","Get the number of definitions.",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"def_key","","",133,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_index_for_def_key","","",133,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"option"}}],[11,"def_path","","Returns the path from the crate root to `index`. The root nodes are not included in the path (i.e., this will be an empty vector for the crate root). For an inlined item, this will be the path of the item in the external crate (but the path will begin with the path to the external crate).",133,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpath"}}],[11,"opt_def_index","","",133,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"opt_local_def_id","","",133,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"local_def_id","","",133,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"as_local_node_id","","",133,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"create_def_with_parent","","Add a definition with a parent definition.",133,{"inputs":[{"name":"self"},{"name":"option"},{"name":"nodeid"},{"name":"defpathdata"}],"output":{"name":"defindex"}}],[11,"get_opt_name","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_interned_str","","",131,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"to_string","","",131,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","rustc::hir::map","",124,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",122,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",122,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"read","","Registers a read in the dependency graph of the AST node with the given `id`. This needs to be called each time a public function returns the HIR for a node -- in other words, when it \"reveals\" the content of a node to the caller (who might not otherwise have had access to those contents, and hence needs a read recorded). If the function just returns a DefId or NodeId, no actual content was returned, so no read is needed.",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"num_local_def_ids","","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"definitions","","",123,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"def_key","","",123,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path_from_id","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"def_path","","",123,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"def_index_for_def_key","","",123,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"option"}}],[11,"local_def_id","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"opt_local_def_id","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"as_local_node_id","","",123,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"krate","","",123,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"trait_item","","",123,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"traititem"}}],[11,"impl_item","","",123,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"implitem"}}],[11,"body","","",123,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"body"}}],[11,"body_owner","","Returns the `NodeId` that corresponds to the definition of which this is the body of, i.e. a `fn`, `const` or `static` item (possibly associated), or a closure, or the body itself for embedded constant expressions (e.g. `N` in `[T; N]`).",123,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"nodeid"}}],[11,"body_owner_def_id","","",123,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"defid"}}],[11,"ty_param_owner","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"ty_param_name","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"name"}}],[11,"trait_impls","","",123,null],[11,"trait_default_impl","","",123,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_is_auto","","",123,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to invoking `krate.attrs` because it registers a tighter dep-graph access.",123,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot be found.",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"node"}}],[11,"get_if_local","","",123,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"find","","Retrieve the Node corresponding to `id`, returning None if cannot be found.",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no parent. This function returns the immediate parent in the AST, whereas get_parent returns the enclosing item. Note that this might not be the actual parent node in the AST - some kinds of nodes are not in the map and these will never appear as the parent_node. So you can always walk the parent_nodes from a node to the root of the ast (unless you get the same id back here that can happen if the id is not in the map itself or is just weird).",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose immediate parent is an item or a closure.",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"get_parent","","Retrieve the NodeId for `id`'s parent item, or `id` itself if no parent item is in this map. The \"parent item\" is the closest parent node in the AST which is recorded by the map and is an item, either an item in a module, trait, or impl.",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"get_module_parent","","Returns the NodeId of `id`'s nearest module parent, or `id` itself if no module parent is in this map.",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block. FIXME it is not clear to me that all items qualify as scopes - statics and associated types probably shouldn't, for example. Behaviour in this regard should be expected to be highly unstable.",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_parent_did","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"get_foreign_abi","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"abi"}}],[11,"expect_item","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"item"}}],[11,"expect_impl_item","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"implitem"}}],[11,"expect_trait_item","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"traititem"}}],[11,"expect_variant_data","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"variantdata"}}],[11,"expect_variant","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"variant"}}],[11,"expect_foreign_item","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"foreignitem"}}],[11,"expect_expr","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"expr"}}],[11,"get_inlined_body","","",123,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"intern_inlined_body","","",123,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"body"}],"output":{"name":"body"}}],[11,"name","","Returns the name associated with the given NodeId's AST.",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"name"}}],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST corresponding to the Node ID",123,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id's with paths that match `parts`.  (Requires `parts` is non-empty.)",123,null],[11,"span","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"span"}}],[11,"span_if_local","","",123,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"node_to_string","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"node_to_user_string","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"node_to_pretty_string","","",123,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"next","","",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nested","","",123,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[0,"pat_util","rustc::hir","",null,null],[3,"EnumerateAndAdjust","rustc::hir::pat_util","",null,null],[8,"EnumerateAndAdjustIterator","","",null,null],[10,"enumerate_and_adjust","","",135,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"option"}],"output":{"name":"enumerateandadjust"}}],[11,"next","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_refutable","rustc::hir","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_const","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"each_binding","","Call `f` on every \"binding\" in a pattern, e.g., on `a` in `match foo() { Some(a) => (), None => () }`",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"contains_bindings","","Checks if the pattern contains any patterns that bind something to an ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to an ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"simple_name","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"necessary_variants","","Return variants that are necessary to exist for the pattern to match.",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"contains_ref_binding","","Checks if the pattern contains any `ref` or `ref mut` bindings, and if yes whether its containing mutable ones or just immutables ones.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains_ref_binding","","Checks if the patterns for this arm contain any `ref` or `ref mut` bindings, and if yes whether its containing mutable ones or just immutables ones.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"print","","",null,null],[3,"NoAnn","rustc::hir::print","",null,null],[3,"State","","",null,null],[12,"s","","",137,null],[4,"AnnNode","","",null,null],[13,"NodeName","","",138,null],[13,"NodeBlock","","",138,null],[13,"NodeItem","","",138,null],[13,"NodeSubItem","","",138,null],[13,"NodeExpr","","",138,null],[13,"NodePat","","",138,null],[4,"Nested","","",null,null],[13,"Item","","",139,null],[13,"TraitItem","","",139,null],[13,"ImplItem","","",139,null],[13,"Body","","",139,null],[13,"BodyArgPat","","",139,null],[5,"print_crate","","Requires you to pass an input filename and reader so that it can scan the input text for comments and literals to copy forward.",null,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"ppann"},{"name":"f"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"NO_ANN","","",null,null],[17,"indent_unit","","",null,null],[17,"default_columns","","",null,null],[8,"PpAnn","","",null,null],[11,"nested","","",140,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",140,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",140,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"nested","rustc::hir","",27,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"writer","rustc::hir::print","",137,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[11,"boxes","","",137,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"comments","","",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",137,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new_from_input","","",137,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",137,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"nbsp","","",137,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"word_nbsp","","",137,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",137,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",137,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bclose_","","",137,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",137,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",137,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"space_if_not_bol","","",137,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"break_offset_if_not_bol","","",137,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",137,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",137,null],[11,"commasep_exprs","","",137,null],[11,"print_mod","","",137,null],[11,"print_foreign_mod","","",137,null],[11,"print_opt_lifetime","","",137,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_type","","",137,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",137,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",137,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_trait_ref","","",137,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"print_enum_def","","",137,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"name"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",137,null],[11,"print_visibility","","",137,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",137,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"generics"},{"name":"name"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_variant","","",137,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"print_method_sig","","",137,null],[11,"print_trait_item","","",137,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",137,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",137,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"result"}}],[11,"print_block","","",137,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",137,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_indent","","",137,{"inputs":[{"name":"self"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",137,null],[11,"print_block_maybe_unclosed","","",137,null],[11,"print_if","","",137,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",137,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_expr_maybe_paren","","",137,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",137,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",137,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_decl","","",137,{"inputs":[{"name":"self"},{"name":"decl"}],"output":{"name":"result"}}],[11,"print_usize","","",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",137,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",137,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_path","","",137,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_qpath","","",137,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_pat","","",137,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",137,null],[11,"print_capture_clause","","",137,{"inputs":[{"name":"self"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"print_bounds","","",137,null],[11,"print_lifetime","","",137,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_def","","",137,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"result"}}],[11,"print_generics","","",137,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",137,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",137,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_mutability","","",137,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",137,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_fn_output","","",137,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",137,{"inputs":[{"name":"self"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",137,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",137,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",137,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",137,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",137,{"inputs":[{"name":"self"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",137,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"result"}}],[0,"svh","rustc::hir","Calculation and management of a Strict Version Hash for crates",null,null],[3,"Svh","rustc::hir::svh","",null,null],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"svh"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Svh` given the hash. If you actually want to compute the SVH from some HIR, you want the `calculate_svh` function found in `librustc_incremental`.",141,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_u64","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_string","","",141,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"hash","","",141,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",141,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",141,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[6,"HirVec","rustc::hir","HIR doesn't commit to a concrete storage type and have its own alias for a vector. It can be `Vec`, `P<[T]>` or potentially `Box<[T]>`, or some other container with similar behavior. Unlike AST, HIR is mostly a static structure, so we can use an owned slice instead of `Vec` to avoid keeping extra capacity.",null,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","",null,null],[6,"BinOp","","",null,null],[6,"Stmt","","A statement",null,null],[6,"Decl","","",null,null],[6,"Variant","","",null,null],[6,"FreevarMap","","",null,null],[6,"CaptureModeMap","","",null,null],[6,"TraitMap","","",null,null],[6,"GlobMap","","",null,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_elided","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"is_global","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_name","","Convert an identifier to the corresponding segment.",18,{"inputs":[{"name":"name"}],"output":{"name":"pathsegment"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"none","","",66,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type parameters in the parenthesized case.",66,{"inputs":[{"name":"self"}],"output":{"name":"hirvec"}}],[11,"lifetimes","","",66,{"inputs":[{"name":"self"}],"output":{"name":"hirvec"}}],[11,"bindings","","",66,{"inputs":[{"name":"self"}],"output":{"name":"hirvec"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","",22,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attr_name","","",69,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"carries_unsafe_attr","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"item","","",27,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"item"}}],[11,"trait_item","","",27,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"traititem"}}],[11,"impl_item","","",27,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"implitem"}}],[11,"visit_all_item_likes","","Visits all items in the crate in some determinstic (but unspecified) order. If you just need to process every item, but don't care about nesting, this method is the best choice.",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"body","","",27,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"body"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"macrodef"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"walk","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"rangeend"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"bool"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"binop_"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_lazy","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shift","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_comparison","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"encode","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","",76,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"stmt_"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"attrs","","",77,null],[11,"id","","",77,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"decl_"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"attrs","","",78,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"unsafesource"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"ordering"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"expr_"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"qpath"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"qpath"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"qpath"}],"output":{"name":"bool"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"matchsource"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"loopsource"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"loopsource"}],"output":{"name":"bool"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"loopiderror"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"loopiderror"}],"output":{"name":"bool"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"loopidresult"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"loopidresult"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"loopidresult"}],"output":{"name":"bool"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",86,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",86,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"destination"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"destination"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"destination"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"captureclause"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"traititemid"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"ordering"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"traitmethod"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"traitmethod"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"traitmethod"}],"output":{"name":"bool"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"implitemid"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"ordering"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"primty"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"ty_"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmoutput"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"inlineasm"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_final","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_default","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",97,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"variant_"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usekind"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"usekind"}],"output":{"name":"bool"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"encode","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"structfield"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_positional","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fields","","",100,null],[11,"id","","",100,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"itemid"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":{"name":"bool"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"item_"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",101,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"traititemref"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":{"name":"bool"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"implitemref"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":{"name":"bool"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"associateditemkind"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":{"name":"bool"}}],[11,"encode","","",102,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem_"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"encode","","",103,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"freevar"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"traitcandidate"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"infer","rustc","See the Book for more information.",null,null],[3,"TypeFreshener","rustc::infer","",null,null],[3,"InferOk","","",null,null],[12,"value","","",142,null],[12,"obligations","","",142,null],[3,"InferCtxt","","",null,null],[12,"tcx","","",143,null],[12,"tables","","",143,null],[12,"projection_cache","","",143,null],[12,"type_variables","","",143,null],[12,"parameter_environment","","",143,null],[12,"selection_cache","","Caches the results of trait selection. This cache is used for things that have to do with the parameters in scope.",143,null],[12,"evaluation_cache","","Caches the results of trait evaluation.",143,null],[12,"reported_trait_errors","","",143,null],[12,"obligations_in_snapshot","","",143,null],[3,"TypeTrace","","The trace designates the path through inference that we took to encounter an error or subtyping constraint.",null,null],[3,"InferCtxtBuilder","","Helper type of a temporary returned by tcx.infer_ctxt(...). Necessary because we can't write the following bound: F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(InferCtxt<'b, 'gcx, 'tcx>).",null,null],[3,"CombinedSnapshot","","",null,null],[4,"InferTables","","A version of &ty::TypeckTables which can be `Missing` (not needed), `InProgress` (during typeck) or `Interned` (result of typeck). Only the `InProgress` version supports `borrow_mut`.",null,null],[13,"Interned","","",144,null],[13,"InProgress","","",144,null],[13,"Missing","","",144,null],[4,"InferTablesRef","","",null,null],[13,"Interned","","",145,null],[13,"InProgress","","",145,null],[4,"ValuePairs","","See `error_reporting` module for more details",null,null],[13,"Types","","",146,null],[13,"TraitRefs","","",146,null],[13,"PolyTraitRefs","","",146,null],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint.",null,null],[13,"Subtype","","",147,null],[13,"InfStackClosure","","",147,null],[13,"InvokeClosure","","",147,null],[13,"DerefPointer","","",147,null],[13,"FreeVariable","","",147,null],[13,"IndexSlice","","",147,null],[13,"RelateObjectBound","","",147,null],[13,"RelateParamBound","","",147,null],[13,"RelateRegionParamBound","","",147,null],[13,"RelateDefaultParamBound","","",147,null],[13,"Reborrow","","",147,null],[13,"ReborrowUpvar","","",147,null],[13,"DataBorrowed","","",147,null],[13,"ReferenceOutlivesReferent","","",147,null],[13,"ParameterInScope","","",147,null],[13,"ExprTypeIsNotInScope","","",147,null],[13,"BindingTypeIsNotValidAtDecl","","",147,null],[13,"CallRcvr","","",147,null],[13,"CallArg","","",147,null],[13,"CallReturn","","",147,null],[13,"Operand","","",147,null],[13,"AddrOf","","",147,null],[13,"AutoBorrow","","",147,null],[13,"SafeDestructor","","",147,null],[13,"CompareImplMethodObligation","","",147,null],[12,"span","rustc::infer::SubregionOrigin","",147,null],[12,"item_name","","",147,null],[12,"impl_item_def_id","","",147,null],[12,"trait_item_def_id","","",147,null],[12,"lint_id","","",147,null],[4,"ParameterOrigin","rustc::infer","Places that type/region parameters can appear.",null,null],[13,"Path","","",148,null],[13,"MethodCall","","",148,null],[13,"OverloadedOperator","","",148,null],[13,"OverloadedDeref","","",148,null],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:",null,null],[13,"FnCall","","when a fn is called",149,null],[13,"HigherRankedType","","when two higher-ranked types are compared",149,null],[13,"AssocTypeProjection","","when projecting an associated type",149,null],[4,"RegionVariableOrigin","","Reasons to create a region inference variable",null,null],[13,"MiscVariable","","",150,null],[13,"PatternRegion","","",150,null],[13,"AddrOfRegion","","",150,null],[13,"Autoref","","",150,null],[13,"Coercion","","",150,null],[13,"EarlyBoundRegion","","",150,null],[13,"LateBoundRegion","","",150,null],[13,"UpvarRegion","","",150,null],[13,"BoundRegionInCoherence","","",150,null],[4,"FixupError","","",null,null],[13,"UnresolvedIntTy","","",151,null],[13,"UnresolvedFloatTy","","",151,null],[13,"UnresolvedTy","","",151,null],[11,"super_combine_tys","","",143,{"inputs":[{"name":"self"},{"name":"r"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[0,"error_reporting","","Error Reporting Code for the inference engine",null,null],[11,"report_region_errors","","",143,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"note_type_err","","",143,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"obligationcause"},{"name":"option"},{"name":"option"},{"name":"typeerror"}],"output":null}],[11,"note_issue_32330","","",143,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"typeerror"}],"output":null}],[11,"report_and_explain_type_error","","",143,{"inputs":[{"name":"self"},{"name":"typetrace"},{"name":"typeerror"}],"output":{"name":"diagnosticbuilder"}}],[11,"fudge_regions_if_ok","","This rather funky routine is used while processing expected types. What happens here is that we want to propagate a coercion through the return type of a fn to its argument. Consider the type of `Option::Some`, which is basically `for<T> fn(T) -> Option<T>`. So if we have an expression `Some(&[1, 2, 3])`, and that has the expected type `Option<&[u32]>`, we would like to type check `&[1, 2, 3]` with the expectation of `&[u32]`. This will cause us to coerce from `&[u32; 3]` to `&[u32]` and make the users life more pleasant.",143,{"inputs":[{"name":"self"},{"name":"regionvariableorigin"},{"name":"f"}],"output":{"name":"result"}}],[11,"skolemize_late_bound_regions","","Replace all regions bound by `binder` with skolemized regions and return a map indicating which bound-region was replaced with what skolemized region. This is the first step of checking subtyping when higher-ranked things are involved.",143,null],[11,"leak_check","","Searches the region constriants created since `snapshot` was started and checks to determine whether any of the skolemized regions created in `skol_map` would \"escape\" -- meaning that they are related to other regions in some way. If so, the higher-ranked subtyping doesn't hold. See `README.md` for more details.",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"span"},{"name":"skolemizationmap"},{"name":"combinedsnapshot"}],"output":{"name":"relateresult"}}],[11,"plug_leaks","","This code converts from skolemized regions back to late-bound regions. It works by replacing each region in the taint set of a skolemized region with a bound-region. The bound region will be bound by the outer-most binder in `value`; the caller must ensure that there is such a binder and it is the right place.",143,{"inputs":[{"name":"self"},{"name":"skolemizationmap"},{"name":"combinedsnapshot"},{"name":"t"}],"output":{"name":"t"}}],[11,"pop_skolemized","","Pops the skolemized regions found in `skol_map` from the region inference context. Whenever you create skolemized regions via `skolemize_late_bound_regions`, they must be popped before you commit the enclosing snapshot (if you do not commit, e.g. within a probe or as a result of an error, then this is not necessary, as popping happens as part of the rollback).",143,{"inputs":[{"name":"self"},{"name":"skolemizationmap"},{"name":"combinedsnapshot"}],"output":null}],[0,"lattice","","Lattice Variables",null,null],[5,"super_lattice_tys","rustc::infer::lattice","",null,{"inputs":[{"name":"l"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[8,"LatticeDir","","",null,null],[10,"infcx","","",152,{"inputs":[{"name":"self"}],"output":{"name":"inferctxt"}}],[10,"cause","","",152,{"inputs":[{"name":"self"}],"output":{"name":"obligationcause"}}],[10,"relate_bound","","",152,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[0,"region_inference","rustc::infer","See README.md",null,null],[3,"Verify","rustc::infer::region_inference","",null,null],[3,"TwoRegions","","",null,null],[3,"RegionVarBindings","","",null,null],[3,"RegionSnapshot","","",null,null],[3,"TaintDirections","","When working with skolemized regions, we often wish to find all of the regions that are either reachable from a skolemized region, or which can reach a skolemized region, or both. We call such regions *tained* regions.  This struct allows you to decide what set of tainted regions you want.",null,null],[4,"Constraint","","",null,null],[13,"ConstrainVarSubVar","","",153,null],[13,"ConstrainRegSubVar","","",153,null],[13,"ConstrainVarSubReg","","",153,null],[13,"ConstrainRegSubReg","","",153,null],[4,"GenericKind","","",null,null],[13,"Param","","",154,null],[13,"Projection","","",154,null],[4,"VerifyBound","","",null,null],[13,"AnyRegion","","",155,null],[13,"AllRegions","","",155,null],[13,"AnyBound","","",155,null],[13,"AllBounds","","",155,null],[4,"UndoLogEntry","","",null,null],[13,"OpenSnapshot","","Pushed when we start a snapshot.",156,null],[13,"CommitedSnapshot","","Replaces an `OpenSnapshot` when a snapshot is committed, but that snapshot is not the root. If the root snapshot is unrolled, all nested snapshots must be committed.",156,null],[13,"AddVar","","We added `RegionVid`",156,null],[13,"AddConstraint","","We added the given `constraint`",156,null],[13,"AddVerify","","We added the given `verify`",156,null],[13,"AddGiven","","We added the given `given`",156,null],[13,"AddCombination","","We added a GLB/LUB \"combinaton variable\"",156,null],[13,"Purged","","During skolemization, we sometimes purge entries from the undo log in a kind of minisnapshot (unlike other snapshots, this purging actually takes place *on success*). In that case, we replace the corresponding entry with `Noop` so as to avoid the need to do a bunch of swapping. (We can't use `swap_remove` as the order of the vector is important.)",156,null],[4,"CombineMapType","","",null,null],[13,"Lub","","",157,null],[13,"Glb","","",157,null],[4,"RegionResolutionError","","",null,null],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",158,null],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a)",158,null],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",158,null],[4,"ProcessedErrorOrigin","","",null,null],[13,"ConcreteFailure","","",159,null],[13,"VariableFailure","","",159,null],[4,"VarValue","","",null,null],[13,"Value","","",160,null],[13,"ErrorValue","","",160,null],[6,"CombineMap","","",null,null],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"constraint"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"bool"}}],[11,"hash","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"generickind"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"generickind"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"generickind"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"tworegions"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"tworegions"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"tworegions"}],"output":{"name":"bool"}}],[11,"hash","","",162,null],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"undologentry"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"undologentry"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"undologentry"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"combinemaptype"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"combinemaptype"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"regionresolutionerror"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"processederrororigin"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"incoming","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"outgoing","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"both","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",164,{"inputs":[{"name":"tyctxt"}],"output":{"name":"regionvarbindings"}}],[11,"start_snapshot","","",164,{"inputs":[{"name":"self"}],"output":{"name":"regionsnapshot"}}],[11,"commit","","",164,{"inputs":[{"name":"self"},{"name":"regionsnapshot"}],"output":null}],[11,"rollback_to","","",164,{"inputs":[{"name":"self"},{"name":"regionsnapshot"}],"output":null}],[11,"rollback_undo_entry","","",164,{"inputs":[{"name":"self"},{"name":"undologentry"}],"output":null}],[11,"num_vars","","",164,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new_region_var","","",164,{"inputs":[{"name":"self"},{"name":"regionvariableorigin"}],"output":{"name":"regionvid"}}],[11,"var_origin","","",164,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"regionvariableorigin"}}],[11,"push_skolemized","","Creates a new skolemized region. Skolemized regions are fresh regions used when performing higher-ranked computations. They must be used in a very particular way and are never supposed to \"escape\" out into error messages or the code at large.",164,{"inputs":[{"name":"self"},{"name":"boundregion"},{"name":"regionsnapshot"}],"output":{"name":"region"}}],[11,"pop_skolemized","","Removes all the edges to/from the skolemized regions that are in `skols`. This is used after a higher-ranked operation completes to remove all trace of the skolemized regions created in that time.",164,{"inputs":[{"name":"self"},{"name":"fxhashset"},{"name":"regionsnapshot"}],"output":null}],[11,"new_bound","","",164,{"inputs":[{"name":"self"},{"name":"debruijnindex"}],"output":{"name":"region"}}],[11,"add_given","","",164,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"regionvid"}],"output":null}],[11,"make_eqregion","","",164,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":null}],[11,"make_subregion","","",164,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":null}],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",164,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"generickind"},{"name":"region"},{"name":"verifybound"}],"output":null}],[11,"lub_regions","","",164,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":{"name":"region"}}],[11,"glb_regions","","",164,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":{"name":"region"}}],[11,"resolve_var","","",164,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"region"}}],[11,"opportunistic_resolve_var","","",164,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"region"}}],[11,"combine_vars","","",164,{"inputs":[{"name":"self"},{"name":"combinemaptype"},{"name":"region"},{"name":"region"},{"name":"subregionorigin"},{"name":"f"}],"output":{"name":"region"}}],[11,"vars_created_since_snapshot","","",164,{"inputs":[{"name":"self"},{"name":"regionsnapshot"}],"output":{"name":"vec"}}],[11,"tainted","","Computes all regions that have been related to `r0` since the mark `mark` was made---`r0` itself will be the first entry. The `directions` parameter controls what kind of relations are considered. For example, one can say that only \"incoming\" edges to `r0` are desired, in which case one will get the set of regions `{r|r <= r0}`. This is used when checking whether skolemized regions are being improperly related to other regions.",164,{"inputs":[{"name":"self"},{"name":"regionsnapshot"},{"name":"region"},{"name":"taintdirections"}],"output":{"name":"fxhashset"}}],[11,"resolve_regions","","This function performs the actual region resolution.  It must be called after all constraints have been added.  It performs a fixed-point iteration to find region values which satisfy all constraints, assuming such values can be found; if they cannot, errors are reported.",164,{"inputs":[{"name":"self"},{"name":"freeregionmap"},{"name":"nodeid"}],"output":{"name":"vec"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"varvalue"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_ty","","",154,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"must_hold","","",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_hold","","",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"or","","",155,{"inputs":[{"name":"self"},{"name":"verifybound"}],"output":{"name":"verifybound"}}],[11,"and","","",155,{"inputs":[{"name":"self"},{"name":"verifybound"}],"output":{"name":"verifybound"}}],[0,"resolve","rustc::infer","",null,null],[3,"OpportunisticTypeResolver","rustc::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces type variables that have been unified with the things they have been unified with (similar to `shallow_resolve`, but deep). This is useful for printing messages etc but also required at various points for correctness.",null,null],[3,"OpportunisticTypeAndRegionResolver","","The opportunistic type and region resolver is similar to the opportunistic type resolver, but also opportunistly resolves regions. It is useful for canonicalization.",null,null],[5,"fully_resolve","","Full type resolution replaces all type and region variables with their concrete results. If any variable cannot be replaced (never unified, etc) then an `Err` result is returned.",null,{"inputs":[{"name":"inferctxt"},{"name":"t"}],"output":{"name":"fixupresult"}}],[11,"new","","",166,{"inputs":[{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"tcx","","",166,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_ty","","",166,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"new","","",167,{"inputs":[{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"tcx","","",167,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_ty","","",167,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"fold_region","","",167,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"region"}}],[11,"new","rustc::infer","",168,{"inputs":[{"name":"inferctxt"}],"output":{"name":"typefreshener"}}],[11,"tcx","","",168,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_region","","",168,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"region"}}],[11,"fold_ty","","",168,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[0,"type_variable","","",null,null],[3,"TypeVariableTable","rustc::infer::type_variable","",null,null],[3,"Default","","",null,null],[12,"ty","","",169,null],[12,"origin_span","","The span where the default was incurred",169,null],[12,"def_id","","The definition that the default originates from",169,null],[3,"Snapshot","","",null,null],[4,"TypeVariableOrigin","","Reasons to create a type inference variable",null,null],[13,"MiscVariable","","",170,null],[13,"NormalizeProjectionType","","",170,null],[13,"TypeInference","","",170,null],[13,"TypeParameterDefinition","","",170,null],[13,"TransformedUpvar","","",170,null],[13,"SubstitutionPlaceholder","","",170,null],[13,"AutoDeref","","",170,null],[13,"AdjustmentType","","",170,null],[13,"DivergingStmt","","",170,null],[13,"DivergingBlockExpr","","",170,null],[13,"LatticeVariable","","",170,null],[4,"RelationDir","","",null,null],[13,"SubtypeOf","","",171,null],[13,"SupertypeOf","","",171,null],[13,"EqTo","","",171,null],[13,"BiTo","","",171,null],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"hash","","",169,null],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"relationdir"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"relationdir"}],"output":{"name":"bool"}}],[11,"hash","","",171,null],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",172,{"inputs":[],"output":{"name":"typevariabletable"}}],[11,"default","","",172,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"option"}}],[11,"var_diverges","","",172,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"bool"}}],[11,"var_origin","","",172,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"typevariableorigin"}}],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",172,{"inputs":[{"name":"self"},{"name":"tyvid"},{"name":"relationdir"},{"name":"tyvid"}],"output":null}],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the relations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)` where `vid1` is some other variable id.",172,{"inputs":[{"name":"self"},{"name":"tyvid"},{"name":"ty"},{"name":"smallvector"}],"output":null}],[11,"new_var","","",172,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"typevariableorigin"},{"name":"option"}],"output":{"name":"tyvid"}}],[11,"num_vars","","",172,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"root_var","","",172,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"tyvid"}}],[11,"probe","","",172,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"option"}}],[11,"probe_root","","Retrieves the type of `vid` given that it is currently a root in the unification table",172,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"option"}}],[11,"replace_if_possible","","",172,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"snapshot","","",172,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"rollback_to","","",172,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","",172,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s` but which have only been unified since `s` started, and return the types with which they were unified. So if we had a type variable `V0`, then we started the snapshot, then we created a type variable `V1`, unifed `V0` with `T0`, and unified `V1` with `T1`, this function would return `{T0}`.",172,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":{"name":"vec"}}],[11,"unsolved_variables","","",172,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"unify_key","rustc::infer","",null,null],[3,"RegionVidKey","rustc::infer::unify_key","",null,null],[12,"min_vid","","The minimum region vid in the unification set. This is needed to have a canonical name for a type to prevent infinite recursion.",173,null],[8,"ToType","","",null,null],[10,"to_type","","",174,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"regionvidkey"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"regionvidkey"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"regionvidkey"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"combine","","",173,{"inputs":[{"name":"self"},{"name":"regionvidkey"}],"output":{"name":"regionvidkey"}}],[6,"InferResult","rustc::infer","",null,null],[6,"Bound","","",null,null],[6,"UnitResult","","",null,null],[6,"FixupResult","","",null,null],[6,"SkolemizationMap","","A map returned by `skolemize_late_bound_regions()` indicating the skolemized region that each late-bound region was replaced with.",null,null],[8,"InferEnv","","",null,null],[10,"to_parts","","",175,null],[8,"TransNormalize","","Helper trait for shortening the lifetimes inside a value for post-type-checking normalization.",null,null],[10,"trans_normalize","","",176,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"infertables"}}],[11,"deref","","",145,null],[11,"borrow","","",144,{"inputs":[{"name":"self"}],"output":{"name":"infertablesref"}}],[11,"expect_interned","","",144,{"inputs":[{"name":"self"}],"output":{"name":"typecktables"}}],[11,"borrow_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"valuepairs"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"typetrace"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"subregionorigin"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"parameterorigin"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"lateboundregionconversiontime"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"regionvariableorigin"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"fixuperror"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_parts","rustc::hir","",35,null],[11,"enter","rustc::infer","",178,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"unit","","",142,{"inputs":[{"name":"self"}],"output":{"name":"inferok"}}],[11,"drain_fulfillment_cx_or_panic","","Finishes processes any obligations that remain in the fulfillment context, and then returns the result with all type variables removed and regions erased. Because this is intended for use after type-check has completed, if any errors occur, it will panic. It is used during normalization and other cases where processing the obligations in `fulfill_cx` may cause type inference variables that appear in `result` to be unified, and hence we need to process those obligations to get the complete picture of the type.",143,null],[11,"projection_mode","","",143,{"inputs":[{"name":"self"}],"output":{"name":"reveal"}}],[11,"freshen","","",143,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"type_var_diverges","","",143,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"freshener","","",143,{"inputs":[{"name":"self"}],"output":{"name":"typefreshener"}}],[11,"type_is_unconstrained_numeric","","",143,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"unconstrainednumeric"}}],[11,"default","","Returns a type variable's default fallback if any exists. A default must be attached to the variable when created, if it is created without a default, this will return None.",143,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"option"}}],[11,"unsolved_variables","","",143,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"equate","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"typetrace"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"sub","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"typetrace"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"lub","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"typetrace"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"glb","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"typetrace"},{"name":"t"},{"name":"t"}],"output":{"name":"inferresult"}}],[11,"save_and_restore_obligations_in_snapshot_flag","","",143,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"commit_unconditionally","","Execute `f` and commit the bindings",143,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"commit_if_ok","","Execute `f` and commit the bindings if closure `f` returns `Ok(_)`",143,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"in_snapshot","","",143,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"probe","","Execute `f` then unroll any bindings it creates",143,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"add_given","","",143,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"regionvid"}],"output":null}],[11,"sub_types","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"obligationcause"},{"name":"ty"},{"name":"ty"}],"output":{"name":"inferresult"}}],[11,"can_sub_types","","",143,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"ty"}],"output":{"name":"unitresult"}}],[11,"eq_types","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"obligationcause"},{"name":"ty"},{"name":"ty"}],"output":{"name":"inferresult"}}],[11,"eq_trait_refs","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"obligationcause"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"inferresult"}}],[11,"eq_impl_headers","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"obligationcause"},{"name":"implheader"},{"name":"implheader"}],"output":{"name":"inferresult"}}],[11,"sub_poly_trait_refs","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"obligationcause"},{"name":"polytraitref"},{"name":"polytraitref"}],"output":{"name":"inferresult"}}],[11,"sub_regions","","",143,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"region"},{"name":"region"}],"output":null}],[11,"equality_predicate","","",143,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"polyequatepredicate"}],"output":{"name":"inferresult"}}],[11,"region_outlives_predicate","","",143,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"polyregionoutlivespredicate"}],"output":{"name":"unitresult"}}],[11,"next_ty_var_id","","",143,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"typevariableorigin"}],"output":{"name":"tyvid"}}],[11,"next_ty_var","","",143,{"inputs":[{"name":"self"},{"name":"typevariableorigin"}],"output":{"name":"ty"}}],[11,"next_diverging_ty_var","","",143,{"inputs":[{"name":"self"},{"name":"typevariableorigin"}],"output":{"name":"ty"}}],[11,"next_int_var_id","","",143,{"inputs":[{"name":"self"}],"output":{"name":"intvid"}}],[11,"next_float_var_id","","",143,{"inputs":[{"name":"self"}],"output":{"name":"floatvid"}}],[11,"next_region_var","","",143,{"inputs":[{"name":"self"},{"name":"regionvariableorigin"}],"output":{"name":"region"}}],[11,"region_var_for_def","","Create a region inference variable for the given region parameter definition.",143,{"inputs":[{"name":"self"},{"name":"span"},{"name":"regionparameterdef"}],"output":{"name":"region"}}],[11,"type_var_for_def","","Create a type inference variable for the given type parameter definition. The substitutions are for actual parameters that may be referred to by the default of this type parameter, if it exists. E.g. `struct Foo<A, B, C = (A, B)>(...);` when used in a path such as `Foo::<T, U>::new()` will use an inference variable for `C` with `[T, U]` as the substitutions for the default, `(T, U)`.",143,null],[11,"fresh_substs_for_item","","Given a set of generics defined on a type or impl, returns a substitution mapping each type/region parameter to a fresh inference variable.",143,{"inputs":[{"name":"self"},{"name":"span"},{"name":"defid"}],"output":{"name":"substs"}}],[11,"fresh_bound_region","","",143,{"inputs":[{"name":"self"},{"name":"debruijnindex"}],"output":{"name":"region"}}],[11,"is_tainted_by_errors","","True if errors have been reported since this infcx was created.  This is sometimes used as a heuristic to skip reporting errors that often occur as a result of earlier errors, but where it's hard to be 100% sure (e.g., unresolved inference variables, regionck errors).",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tainted_by_errors","","Set the \"tainted by errors\" flag to true. We call this when we observe an error from a prior pass.",143,{"inputs":[{"name":"self"}],"output":null}],[11,"node_type","","",143,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ty"}}],[11,"expr_ty","","",143,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"resolve_regions_and_report_errors","","",143,{"inputs":[{"name":"self"},{"name":"freeregionmap"},{"name":"nodeid"}],"output":null}],[11,"ty_to_string","","",143,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"string"}}],[11,"tys_to_string","","",143,null],[11,"trait_ref_to_string","","",143,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"string"}}],[11,"shallow_resolve","","",143,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in `value` with their final value. Note that region variables are unaffected. If a type variable has not been unified, it is left as is.  This is an idempotent operation that does not affect inference state in any way and so you can do it at will.",143,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"resolve_type_and_region_vars_if_possible","","",143,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"fully_resolve","","Attempts to resolve all type/region variables in `value`. Region inference must have been run already (e.g., by calling `resolve_regions_and_report_errors`).  If some variable was never unified, an `Err` results.",143,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"fixupresult"}}],[11,"type_error_message","","",143,{"inputs":[{"name":"self"},{"name":"span"},{"name":"m"},{"name":"ty"}],"output":null}],[11,"type_error_struct","","",143,{"inputs":[{"name":"self"},{"name":"span"},{"name":"m"},{"name":"ty"}],"output":{"name":"diagnosticbuilder"}}],[11,"type_error_struct_with_diag","","",143,{"inputs":[{"name":"self"},{"name":"span"},{"name":"m"},{"name":"ty"}],"output":{"name":"diagnosticbuilder"}}],[11,"report_mismatched_types","","",143,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"ty"},{"name":"ty"},{"name":"typeerror"}],"output":{"name":"diagnosticbuilder"}}],[11,"report_conflicting_default_types","","",143,{"inputs":[{"name":"self"},{"name":"span"},{"name":"nodeid"},{"name":"default"},{"name":"default"}],"output":null}],[11,"replace_late_bound_regions_with_fresh_var","","",143,null],[11,"match_poly_projection_predicate","","Given a higher-ranked projection predicate like:",143,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"polyprojectionpredicate"},{"name":"traitref"}],"output":{"name":"inferresult"}}],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",143,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"generickind"},{"name":"region"},{"name":"verifybound"}],"output":null}],[11,"can_equate","","",143,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"unitresult"}}],[11,"node_ty","","",143,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mcresult"}}],[11,"expr_ty_adjusted","","",143,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"mcresult"}}],[11,"type_moves_by_default","","",143,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"}],"output":{"name":"bool"}}],[11,"node_method_ty","","",143,{"inputs":[{"name":"self"},{"name":"methodcall"}],"output":{"name":"option"}}],[11,"node_method_id","","",143,{"inputs":[{"name":"self"},{"name":"methodcall"}],"output":{"name":"option"}}],[11,"is_method_call","","",143,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"upvar_capture","","",143,{"inputs":[{"name":"self"},{"name":"upvarid"}],"output":{"name":"option"}}],[11,"param_env","","",143,{"inputs":[{"name":"self"}],"output":{"name":"parameterenvironment"}}],[11,"closure_kind","","",143,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"closure_type","","",143,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"polyfnsig"}}],[11,"span","","",177,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"types","","",177,{"inputs":[{"name":"obligationcause"},{"name":"bool"},{"name":"ty"},{"name":"ty"}],"output":{"name":"typetrace"}}],[11,"dummy","","",177,{"inputs":[{"name":"tyctxt"}],"output":{"name":"typetrace"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",147,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"from_obligation_cause","","",147,{"inputs":[{"name":"obligationcause"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",150,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"super_fold_with","","",146,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",146,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",177,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",177,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[0,"lint","rustc","Lints, aka compiler warnings.",null,null],[3,"LateContext","rustc::lint","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we're checking in.",179,null],[12,"tables","","Side-tables for the body we are in.",179,null],[12,"krate","","The crate being checked.",179,null],[12,"access_levels","","Items accessible from the crate being checked.",179,null],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to HIR.",null,null],[12,"sess","","Type context we're checking in.",180,null],[12,"krate","","The crate being checked.",180,null],[3,"LintStore","","Information about the registered lints.",null,null],[3,"FutureIncompatibleInfo","","Extra information for a future incompatibility lint. See the call to `register_future_incompatible` in `librustc_lint/lib.rs` for guidelines.",null,null],[12,"id","","",181,null],[12,"reference","","",181,null],[3,"EarlyLint","","When you call `add_lint` on the session, you wind up storing one of these, which records a \"potential lint\" at a particular point.",null,null],[12,"id","","what lint is this? (e.g., `dead_code`)",182,null],[12,"diagnostic","","the main message",182,null],[3,"LintTable","","",null,null],[3,"Lint","","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",183,null],[12,"default_level","","Default level for the lint.",183,null],[12,"desc","","Description of the lint or the issue it detects.",183,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",184,null],[13,"Warn","","",184,null],[13,"Deny","","",184,null],[13,"Forbid","","",184,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared in rustc or a plugin.",185,null],[13,"Node","","Lint level was set by an attribute.",185,null],[13,"CommandLine","","Lint level was set by a command-line flag.",185,null],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all) according to `level`.",null,{"inputs":[{"name":"session"},{"name":"lintstore"},{"name":"lint"},{"name":"levelsource"},{"name":"option"},{"name":"str"}],"output":null}],[5,"check_crate","","Perform lint checking on a crate.",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":null}],[5,"check_ast_crate","","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint attributes. Writing this as an iterator is an enormous mess.",null,null],[5,"raw_struct_lint","","",null,{"inputs":[{"name":"session"},{"name":"lintstore"},{"name":"lint"},{"name":"levelsource"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[3,"HardwiredLints","rustc::lint::builtin","Does nothing as a lint pass, but registers some `Lint`s which are used by other parts of the compiler.",null,null],[7,"CONST_ERR","","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"UNREACHABLE_PATTERNS","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"LIFETIME_UNDERSCORE","","",null,null],[7,"RESOLVE_TRAIT_ON_DEFAULTED_UNIT","","",null,null],[7,"SAFE_EXTERN_STATICS","","",null,null],[7,"PATTERNS_IN_FNS_WITHOUT_BODY","","",null,null],[7,"EXTRA_REQUIREMENT_IN_IMPL","","",null,null],[7,"LEGACY_DIRECTORY_OWNERSHIP","","",null,null],[7,"LEGACY_IMPORTS","","",null,null],[7,"LEGACY_CONSTRUCTOR_VISIBILITY","","",null,null],[7,"MISSING_FRAGMENT_SPECIFIER","","",null,null],[7,"DEPRECATED","","",null,null],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"hardwiredlints"}}],[11,"get_lints","","",186,{"inputs":[{"name":"self"}],"output":{"name":"lintarray"}}],[11,"eq","rustc::lint","",182,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"encode","","",182,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",182,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",187,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",187,null],[11,"get_lint_groups","","",187,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_early_pass","","",187,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bool"},{"name":"earlylintpassobject"}],"output":null}],[11,"register_late_pass","","",187,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bool"},{"name":"latelintpassobject"}],"output":null}],[11,"register_future_incompatible","","",187,{"inputs":[{"name":"self"},{"name":"option"},{"name":"vec"}],"output":null}],[11,"future_incompatible","","",187,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"option"}}],[11,"register_group","","",187,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bool"},{"name":"str"},{"name":"vec"}],"output":null}],[11,"register_renamed","","",187,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"register_removed","","",187,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"process_command_line","","",187,{"inputs":[{"name":"self"},{"name":"session"}],"output":null}],[11,"sess","","Get the overall compiler `Session` object.",179,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",179,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",179,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",179,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",179,null],[11,"exit_attrs","","",179,null],[11,"sess","","Get the overall compiler `Session` object.",180,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",180,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",180,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",180,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",180,null],[11,"exit_attrs","","",180,null],[11,"nested_visit_map","","Because lints are scoped lexically, we want to walk nested items in the context of the outer item, so enable deep-walking.",179,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_id","","",179,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"visit_nested_body","","",179,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":null}],[11,"visit_body","","",179,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"visit_item","","",179,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_foreign_item","","",179,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_pat","","",179,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",179,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_stmt","","",179,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_fn","","",179,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"bodyid"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_variant_data","","",179,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"name"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",179,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_variant","","",179,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_ty","","",179,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_name","","",179,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_mod","","",179,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_local","","",179,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",179,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_arm","","",179,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_decl","","",179,{"inputs":[{"name":"self"},{"name":"decl"}],"output":null}],[11,"visit_generics","","",179,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_trait_item","","",179,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",179,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_lifetime","","",179,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",179,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",179,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_attribute","","",179,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_item","","",180,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_foreign_item","","",180,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_pat","","",180,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",180,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_stmt","","",180,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_fn","","",180,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_variant_data","","",180,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",180,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_variant","","",180,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_ty","","",180,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_ident","","",180,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",180,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_local","","",180,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",180,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_arm","","",180,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_expr_post","","",180,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_generics","","",180,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_trait_item","","",180,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",180,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_lifetime","","",180,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",180,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",180,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",180,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_attribute","","",180,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"encode","","",188,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",188,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",189,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",189,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",189,{"inputs":[],"output":{"name":"self"}}],[11,"add_lint","","",189,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"s"},{"name":"string"}],"output":null}],[11,"add_lint_diagnostic","","",189,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"m"}],"output":null}],[11,"get","","",189,null],[11,"take","","",189,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"vec"}}],[11,"transfer","","",189,{"inputs":[{"name":"self"},{"name":"linttable"}],"output":null}],[11,"get_any","","Returns the first (id, lint) pair that is non-empty. Used to implement a sanity check in lints that all node-ids are visited.",189,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"LintArray","","",null,null],[6,"EarlyLintPassObject","","A lint pass boxed up as a trait object.",null,null],[6,"LateLintPassObject","","",null,null],[6,"LevelSource","","",null,null],[8,"LintContext","","",null,null],[10,"sess","","",190,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[10,"lints","","",190,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"mut_lints","","",190,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"level_stack","","",190,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"enter_attrs","","",190,null],[10,"exit_attrs","","",190,null],[11,"current_level","","Get the level of `lint` at the current position of the lint traversal.",190,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"level"}}],[11,"level_src","","",190,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"option"}}],[11,"lookup_and_emit","","",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":null}],[11,"lookup","","",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":null}],[11,"early_lint","","",190,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":null}],[11,"struct_span_lint","","",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"str"}],"output":null}],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the current lint context, call the provided function, then reset the lints in effect to their previous state.",190,null],[8,"IntoEarlyLint","","",null,null],[10,"into_early_lint","","",191,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"earlylint"}}],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",192,{"inputs":[{"name":"self"}],"output":{"name":"lintarray"}}],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_body","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"body"}],"output":null}],[11,"check_body_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"body"}],"output":null}],[11,"check_name","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"span"},{"name":"name"}],"output":null}],[11,"check_crate","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"crate"}],"output":null}],[11,"check_crate_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"crate"}],"output":null}],[11,"check_mod","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_mod_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_foreign_item","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"foreignitem"}],"output":null}],[11,"check_foreign_item_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"foreignitem"}],"output":null}],[11,"check_item","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_item_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_local","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"local"}],"output":null}],[11,"check_block","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"block"}],"output":null}],[11,"check_block_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"block"}],"output":null}],[11,"check_stmt","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[11,"check_arm","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"arm"}],"output":null}],[11,"check_pat","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"pat"}],"output":null}],[11,"check_decl","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"decl"}],"output":null}],[11,"check_expr","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_expr_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_ty","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"ty"}],"output":null}],[11,"check_generics","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"generics"}],"output":null}],[11,"check_fn","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"body"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_fn_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"body"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_trait_item","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[11,"check_trait_item_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[11,"check_impl_item","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_impl_item_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_struct_def","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"variantdata"},{"name":"name"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"check_struct_def_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"variantdata"},{"name":"name"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"check_struct_field","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"structfield"}],"output":null}],[11,"check_variant","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"check_variant_post","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"check_lifetime","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"lifetime"}],"output":null}],[11,"check_lifetime_def","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"lifetimedef"}],"output":null}],[11,"check_path","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"check_attribute","","",193,{"inputs":[{"name":"self"},{"name":"latecontext"},{"name":"attribute"}],"output":null}],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",193,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",193,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"check_crate","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"crate"}],"output":null}],[11,"check_crate_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"crate"}],"output":null}],[11,"check_mod","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_mod_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_foreign_item","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"foreignitem"}],"output":null}],[11,"check_foreign_item_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"foreignitem"}],"output":null}],[11,"check_item","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"item"}],"output":null}],[11,"check_item_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"item"}],"output":null}],[11,"check_local","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"local"}],"output":null}],[11,"check_block","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[11,"check_block_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[11,"check_stmt","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"stmt"}],"output":null}],[11,"check_arm","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"arm"}],"output":null}],[11,"check_pat","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"pat"}],"output":null}],[11,"check_expr","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[11,"check_expr_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[11,"check_ty","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"ty"}],"output":null}],[11,"check_generics","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"generics"}],"output":null}],[11,"check_fn","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_fn_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_trait_item","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"traititem"}],"output":null}],[11,"check_trait_item_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"traititem"}],"output":null}],[11,"check_impl_item","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"implitem"}],"output":null}],[11,"check_impl_item_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"implitem"}],"output":null}],[11,"check_struct_def","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"check_struct_def_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"check_struct_field","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"structfield"}],"output":null}],[11,"check_variant","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"check_variant_post","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"check_lifetime","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"lifetime"}],"output":null}],[11,"check_lifetime_def","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"lifetimedef"}],"output":null}],[11,"check_path","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"check_path_list_item","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"pathlistitem"}],"output":null}],[11,"check_attribute","","",194,{"inputs":[{"name":"self"},{"name":"earlycontext"},{"name":"attribute"}],"output":null}],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",194,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",194,null],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"lint"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",183,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"lintid"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"bool"}}],[11,"hash","","",188,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"of","","Get the `LintId` for a `Lint`.",188,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"to_string","","Get the name of the lint.",188,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",184,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"cmp","","",184,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",184,null],[11,"as_str","","Convert a level to a lower-case string.",184,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","Convert a lower-case string to a level.",184,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"lintsource"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[0,"middle","rustc","",null,null],[0,"expr_use_visitor","rustc::middle","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[3,"ExprUseVisitor","rustc::middle::expr_use_visitor","",null,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",195,null],[13,"AddrOf","","",195,null],[13,"AutoRef","","",195,null],[13,"AutoUnsafe","","",195,null],[13,"RefBinding","","",195,null],[13,"OverloadedOperator","","",195,null],[13,"ClosureInvocation","","",195,null],[13,"ForLoop","","",195,null],[13,"MatchDiscriminant","","",195,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",196,null],[13,"Move","","",196,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",197,null],[13,"PatBindingMove","","",197,null],[13,"CaptureMove","","",197,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",198,null],[13,"BorrowingMatch","","",198,null],[13,"CopyingMatch","","",198,null],[13,"MovingMatch","","",198,null],[4,"MutateMode","","",null,null],[13,"Init","","",199,null],[13,"JustWrite","","",199,null],[13,"WriteAndRead","","",199,null],[8,"Delegate","","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",200,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"cmt"},{"name":"consumemode"}],"output":null}],[10,"matched_pat","","",200,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"cmt"},{"name":"matchmode"}],"output":null}],[10,"consume_pat","","",200,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"cmt"},{"name":"consumemode"}],"output":null}],[10,"borrow","","",200,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"cmt"},{"name":"region"},{"name":"borrowkind"},{"name":"loancause"}],"output":null}],[10,"decl_without_init","","",200,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"}],"output":null}],[10,"mutate","","",200,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"cmt"},{"name":"mutatemode"}],"output":null}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",201,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"with_options","","",201,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"self"}}],[11,"consume_body","","",201,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"consume_expr","","",201,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"walk_expr","","",201,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[0,"const_val","rustc::middle","",null,null],[4,"ConstInt","rustc::middle::const_val","",null,null],[13,"I8","","",202,null],[13,"I16","","",202,null],[13,"I32","","",202,null],[13,"I64","","",202,null],[13,"I128","","",202,null],[13,"Isize","","",202,null],[13,"U8","","",202,null],[13,"U16","","",202,null],[13,"U32","","",202,null],[13,"U64","","",202,null],[13,"U128","","",202,null],[13,"Usize","","",202,null],[4,"ConstVal","","",null,null],[13,"Float","","",203,null],[13,"Integral","","",203,null],[13,"Str","","",203,null],[13,"ByteStr","","",203,null],[13,"Bool","","",203,null],[13,"Function","","",203,null],[13,"Struct","","",203,null],[13,"Tuple","","",203,null],[13,"Array","","",203,null],[13,"Repeat","","",203,null],[13,"Char","","",203,null],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",203,null],[11,"encode","","",203,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",203,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"description","","",203,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_const_int","","",203,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"cstore","rustc::middle","",null,null],[3,"LinkMeta","rustc::middle::cstore","",null,null],[12,"crate_name","","",204,null],[12,"crate_hash","","",204,null],[3,"CrateSource","","",null,null],[12,"dylib","","",205,null],[12,"rlib","","",205,null],[12,"rmeta","","",205,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",206,null],[12,"name","","",206,null],[12,"cfg","","",206,null],[12,"foreign_items","","",206,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",207,null],[12,"span","","span of the extern crate that caused this to be loaded",207,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",207,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",207,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",208,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",208,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",208,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",208,null],[4,"LibSource","","",null,null],[13,"Some","","",209,null],[13,"MetadataOnly","","",209,null],[13,"None","","",209,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",210,null],[13,"RequireStatic","","",210,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",211,null],[13,"NativeStaticNobundle","","",211,null],[13,"NativeFramework","","",211,null],[13,"NativeUnknown","","",211,null],[4,"LoadedMacro","","",null,null],[13,"MacroDef","","",212,null],[13,"ProcMacro","","",212,null],[5,"validate_crate_name","","",null,{"inputs":[{"name":"option"},{"name":"str"},{"name":"option"}],"output":null}],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"crate_data_as_rc_any","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[10,"describe_def","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"def_span","","",213,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[10,"stability","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"deprecation","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"visibility","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"visible_parent_map","","",213,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[10,"item_generics_cloned","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"item_attrs","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"fn_arg_names","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"inherent_implementations_for_type","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"implementations_of_trait","","",213,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[10,"impl_polarity","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[10,"impl_parent","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"trait_of_item","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"associated_item_cloned","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[10,"is_const_fn","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_default_impl","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_foreign_item","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_dllimport_foreign_item","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_statically_included_foreign_item","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_exported_symbol","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"dylib_dependency_formats","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"dep_kind","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"export_macros","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":null}],[10,"lang_items","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"missing_lang_items","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_staged_api","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_allocator","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_panic_runtime","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_compiler_builtins","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_sanitizer_runtime","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"panic_strategy","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[10,"extern_crate","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"crate_name","","The name of the crate as it is referred to in source code of the current crate.",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"original_crate_name","","The name of the crate as it is stored in the crate's metadata.",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"crate_disambiguator","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"plugin_registrar_fn","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"derive_registrar_fn","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"native_libraries","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"exported_symbols","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_no_builtins","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"retrace_path","","",213,null],[10,"def_key","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"struct_field_names","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"load_macro","","",213,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"maybe_get_item_body","","",213,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"item_body_nested_bodies","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[10,"const_is_rvalue_promotable_to_static","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_item_mir_available","","",213,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"crates","","",213,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_libraries","","",213,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_link_args","","",213,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"metadata_filename","","",213,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"metadata_section_name","","",213,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[10,"used_crates","","",213,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[10,"used_crate_source","","",213,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[10,"extern_mod_stmt_cnum","","",213,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"encode_metadata","","",213,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"exportmap"},{"name":"linkmeta"},{"name":"nodeset"}],"output":{"name":"vec"}}],[10,"metadata_encoding_version","","",213,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",214,{"inputs":[{"name":"self"},{"name":"item"},{"name":"definitions"}],"output":null}],[10,"postprocess","","",214,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",208,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",208,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"cmp","","",208,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",208,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"macros_only","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","","",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",209,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"encode","","",210,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",210,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",211,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"cmp","","",211,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"hash","","",211,null],[11,"encode","","",211,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",211,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"hash","","",206,null],[11,"encode","","",206,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",206,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"crate_data_as_rc_any","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"describe_def","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",215,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"visible_parent_map","","",215,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"item_generics_cloned","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"fn_arg_names","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",215,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"impl_polarity","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"impl_parent","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item_cloned","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"is_const_fn","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_exported_symbol","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"lang_items","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"dep_kind","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":null}],[11,"is_allocator","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"extern_crate","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_name","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",215,null],[11,"def_key","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",215,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",215,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_item_mir_available","","",215,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",215,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",215,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",215,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",215,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",215,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",215,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",215,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",215,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",215,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"exportmap"},{"name":"linkmeta"},{"name":"nodeset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",215,null],[0,"dataflow","rustc::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[3,"DataFlowContext","rustc::middle::dataflow","",null,null],[4,"EntryOrExit","","",null,null],[13,"Entry","","",216,null],[13,"Exit","","",216,null],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",217,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",217,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",218,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"nested","","",220,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",220,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",220,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",220,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"usize"}],"output":null}],[11,"add_kill","","Indicates that `id` kills `bit`",220,{"inputs":[{"name":"self"},{"name":"killfrom"},{"name":"nodeid"},{"name":"usize"}],"output":null}],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",220,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",220,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"cfgindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",220,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",220,{"inputs":[{"name":"self"},{"name":"cfg"}],"output":null}],[11,"propagate","","Performs the data flow analysis.",220,{"inputs":[{"name":"self"},{"name":"cfg"},{"name":"body"}],"output":null}],[0,"dead","rustc::middle","",null,null],[5,"check_crate","rustc::middle::dead","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":null}],[0,"dependency_format","rustc::middle","Resolution of mixing rlibs and dylibs",null,null],[4,"Linkage","rustc::middle::dependency_format","",null,null],[13,"NotLinked","","",221,null],[13,"IncludedFromDylib","","",221,null],[13,"Static","","",221,null],[13,"Dynamic","","",221,null],[5,"calculate","","",null,{"inputs":[{"name":"session"}],"output":null}],[6,"DependencyList","","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"effect","rustc::middle","Enforces the Rust effect system. Currently there is just one effect, `unsafe`.",null,null],[5,"check_crate","rustc::middle::effect","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"entry","rustc::middle","",null,null],[5,"find_entry_point","rustc::middle::entry","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":null}],[0,"free_region","rustc::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc::middle::free_region","",null,null],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"encode","","",222,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",222,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",222,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"is_empty","","",222,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"relate_free_regions_from_implied_bounds","","",222,null],[11,"relate_free_regions_from_predicates","","",222,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship by walking the graph encoded in `map`.  Note that it is possible that `sub != sup` and `sub <= sup` and `sup <= sub` (that is, the user can give two different names to the same lifetime).",222,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",222,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"region"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after inference* and sadly the logic is somewhat duplicated with the code in infer.rs.",222,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"is_static","","Determines whether this free-region is required to be 'static",222,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[0,"intrinsicck","rustc::middle","",null,null],[5,"check_crate","rustc::middle::intrinsicck","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"lang_items","rustc::middle","",null,null],[3,"LanguageItems","rustc::middle::lang_items","",null,null],[12,"items","","",223,null],[12,"missing","","",223,null],[4,"LangItem","","",null,null],[13,"CharImplItem","","",224,null],[13,"StrImplItem","","",224,null],[13,"SliceImplItem","","",224,null],[13,"ConstPtrImplItem","","",224,null],[13,"MutPtrImplItem","","",224,null],[13,"I8ImplItem","","",224,null],[13,"I16ImplItem","","",224,null],[13,"I32ImplItem","","",224,null],[13,"I64ImplItem","","",224,null],[13,"I128ImplItem","","",224,null],[13,"IsizeImplItem","","",224,null],[13,"U8ImplItem","","",224,null],[13,"U16ImplItem","","",224,null],[13,"U32ImplItem","","",224,null],[13,"U64ImplItem","","",224,null],[13,"U128ImplItem","","",224,null],[13,"UsizeImplItem","","",224,null],[13,"F32ImplItem","","",224,null],[13,"F64ImplItem","","",224,null],[13,"SendTraitLangItem","","",224,null],[13,"SizedTraitLangItem","","",224,null],[13,"UnsizeTraitLangItem","","",224,null],[13,"CopyTraitLangItem","","",224,null],[13,"SyncTraitLangItem","","",224,null],[13,"DropTraitLangItem","","",224,null],[13,"CoerceUnsizedTraitLangItem","","",224,null],[13,"AddTraitLangItem","","",224,null],[13,"SubTraitLangItem","","",224,null],[13,"MulTraitLangItem","","",224,null],[13,"DivTraitLangItem","","",224,null],[13,"RemTraitLangItem","","",224,null],[13,"NegTraitLangItem","","",224,null],[13,"NotTraitLangItem","","",224,null],[13,"BitXorTraitLangItem","","",224,null],[13,"BitAndTraitLangItem","","",224,null],[13,"BitOrTraitLangItem","","",224,null],[13,"ShlTraitLangItem","","",224,null],[13,"ShrTraitLangItem","","",224,null],[13,"AddAssignTraitLangItem","","",224,null],[13,"SubAssignTraitLangItem","","",224,null],[13,"MulAssignTraitLangItem","","",224,null],[13,"DivAssignTraitLangItem","","",224,null],[13,"RemAssignTraitLangItem","","",224,null],[13,"BitXorAssignTraitLangItem","","",224,null],[13,"BitAndAssignTraitLangItem","","",224,null],[13,"BitOrAssignTraitLangItem","","",224,null],[13,"ShlAssignTraitLangItem","","",224,null],[13,"ShrAssignTraitLangItem","","",224,null],[13,"IndexTraitLangItem","","",224,null],[13,"IndexMutTraitLangItem","","",224,null],[13,"UnsafeCellTypeLangItem","","",224,null],[13,"DerefTraitLangItem","","",224,null],[13,"DerefMutTraitLangItem","","",224,null],[13,"FnTraitLangItem","","",224,null],[13,"FnMutTraitLangItem","","",224,null],[13,"FnOnceTraitLangItem","","",224,null],[13,"EqTraitLangItem","","",224,null],[13,"OrdTraitLangItem","","",224,null],[13,"StrEqFnLangItem","","",224,null],[13,"PanicFnLangItem","","",224,null],[13,"PanicBoundsCheckFnLangItem","","",224,null],[13,"PanicFmtLangItem","","",224,null],[13,"ExchangeMallocFnLangItem","","",224,null],[13,"BoxFreeFnLangItem","","",224,null],[13,"StrDupUniqFnLangItem","","",224,null],[13,"StartFnLangItem","","",224,null],[13,"EhPersonalityLangItem","","",224,null],[13,"EhUnwindResumeLangItem","","",224,null],[13,"MSVCTryFilterLangItem","","",224,null],[13,"OwnedBoxLangItem","","",224,null],[13,"PhantomDataItem","","",224,null],[13,"CovariantTypeItem","","",224,null],[13,"ContravariantTypeItem","","",224,null],[13,"InvariantTypeItem","","",224,null],[13,"CovariantLifetimeItem","","",224,null],[13,"ContravariantLifetimeItem","","",224,null],[13,"InvariantLifetimeItem","","",224,null],[13,"NoCopyItem","","",224,null],[13,"NonZeroItem","","",224,null],[13,"DebugTraitLangItem","","",224,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"hash","","",224,null],[11,"encode","","",224,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",224,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_u32","","",224,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",223,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",223,null],[11,"item_name","","",223,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",223,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"require_owned_box","","",223,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",223,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_eq_fn","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strdup_uniq_fn","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_type","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_type","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_type","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_lifetime","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_lifetime","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_lifetime","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_copy_bound","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"liveness","rustc::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc::middle::liveness","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"mem_categorization","rustc::middle","Categorization",null,null],[3,"Upvar","rustc::middle::mem_categorization","",null,null],[12,"id","","",225,null],[12,"kind","","",225,null],[3,"cmt_","","",null,null],[12,"id","","",226,null],[12,"span","","",226,null],[12,"cat","","",226,null],[12,"mutbl","","",226,null],[12,"ty","","",226,null],[12,"note","","",226,null],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",227,null],[3,"MemCategorizationOptions","","",null,null],[12,"during_closure_kind_inference","","",228,null],[4,"Categorization","","",null,null],[13,"Rvalue","","",229,null],[13,"StaticItem","","",229,null],[13,"Upvar","","",229,null],[13,"Local","","",229,null],[13,"Deref","","",229,null],[13,"Interior","","",229,null],[13,"Downcast","","",229,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",230,null],[13,"BorrowedPtr","","`&T`",230,null],[13,"UnsafePtr","","`*T`",230,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",230,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",231,null],[13,"InteriorElement","","",231,null],[4,"FieldName","","",null,null],[13,"NamedField","","",232,null],[13,"PositionalField","","",232,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",233,null],[13,"Pattern","","",233,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",234,null],[13,"OtherElement","","",234,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",235,null],[13,"McDeclared","","",235,null],[13,"McInherited","","",235,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",236,null],[13,"NoteUpvarRef","","",236,null],[13,"NoteNone","","",236,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",237,null],[13,"NonAliasable","","",237,null],[13,"ImmutableUnique","","",237,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",238,null],[13,"AliasableClosure","","",238,null],[13,"AliasableOther","","",238,null],[13,"UnaliasableImmutable","","",238,null],[13,"AliasableStatic","","",238,null],[13,"AliasableStaticMut","","",238,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[6,"cmt","","",null,null],[6,"McResult","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",239,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",239,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"hash","","",230,null],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"eq","","",231,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"hash","","",231,null],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"hash","","",232,null],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"hash","","",233,null],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"elementkind"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"elementkind"}],"output":{"name":"bool"}}],[11,"hash","","",234,null],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"eq","","",235,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"hash","","",235,null],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"get_field","","",226,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"get_field_name","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_arg_if_immutable","","",226,{"inputs":[{"name":"self"},{"name":"map"}],"output":{"name":"option"}}],[11,"id","rustc::hir","",37,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"span","","",37,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"id","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"span","","",30,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","rustc::middle::mem_categorization","",227,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationoptions"}}],[11,"default","","",228,{"inputs":[],"output":{"name":"memcategorizationoptions"}}],[11,"from_mutbl","","",235,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",235,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",235,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",235,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",235,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",235,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",227,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_options","","",227,{"inputs":[{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",227,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"mcresult"}}],[11,"cat_expr_autoderefd","","",227,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"usize"}],"output":{"name":"mcresult"}}],[11,"cat_expr_unadjusted","","",227,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"mcresult"}}],[11,"cat_def","","",227,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"ty"},{"name":"def"}],"output":{"name":"mcresult"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",227,null],[11,"cat_rvalue_node","","",227,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"ty"}],"output":{"name":"cmt"}}],[11,"cat_rvalue","","",227,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"region"},{"name":"ty"}],"output":{"name":"cmt"}}],[11,"cat_field","","",227,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"name"},{"name":"ty"}],"output":{"name":"cmt"}}],[11,"cat_tup_field","","",227,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"usize"},{"name":"ty"}],"output":{"name":"cmt"}}],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",227,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"interioroffsetkind"}],"output":{"name":"mcresult"}}],[11,"cat_imm_interior","","",227,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"ty"},{"name":"interiorkind"}],"output":{"name":"cmt"}}],[11,"cat_downcast","","",227,{"inputs":[{"name":"self"},{"name":"n"},{"name":"cmt"},{"name":"ty"},{"name":"defid"}],"output":{"name":"cmt"}}],[11,"cat_pattern","","",227,{"inputs":[{"name":"self"},{"name":"cmt"},{"name":"pat"},{"name":"f"}],"output":{"name":"mcresult"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",226,{"inputs":[{"name":"self"}],"output":{"name":"cmt"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",226,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",226,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"privacy","rustc::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[3,"AccessLevels","rustc::middle::privacy","",null,null],[12,"map","","",240,null],[4,"AccessLevel","","",null,null],[13,"Reachable","","",241,null],[13,"Exported","","",241,null],[13,"Public","","",241,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",241,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"cmp","","",241,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"is_reachable","","",240,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",240,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",240,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"default","","",240,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"reachable","rustc::middle","",null,null],[5,"find_reachable","rustc::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"nodeset"}}],[0,"region","rustc::middle","This file actually contains two passes related to regions.  The first pass builds up the `scope_map`, which describes the parent links in the region hierarchy.  The second pass infers which types must be region parameterized.",null,null],[3,"CodeExtent","rustc::middle::region","",null,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",242,null],[12,"body_id","","",242,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",243,null],[12,"first_statement_index","","",243,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be used to bound the lifetime/region for values.",null,null],[13,"Misc","","",244,null],[13,"CallSiteScope","","",244,null],[12,"fn_id","rustc::middle::region::CodeExtentData","",244,null],[12,"body_id","","",244,null],[13,"ParameterScope","rustc::middle::region","",244,null],[12,"fn_id","rustc::middle::region::CodeExtentData","",244,null],[12,"body_id","","",244,null],[13,"DestructionScope","rustc::middle::region","",244,null],[13,"Remainder","","",244,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling instead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"eq","","",245,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ne","","",245,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",245,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"lt","","",245,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"le","","",245,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"gt","","",245,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ge","","",245,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"cmp","","",245,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"ordering"}}],[11,"hash","","",245,null],[11,"encode","","",245,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",245,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"codeextentdata"}}],[11,"eq","","",244,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ne","","",244,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",244,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"option"}}],[11,"lt","","",244,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"le","","",244,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"gt","","",244,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ge","","",244,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"cmp","","",244,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"ordering"}}],[11,"hash","","",244,null],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"callsitescopedata"}}],[11,"eq","","",242,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ne","","",242,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",242,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"option"}}],[11,"lt","","",242,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"le","","",242,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"gt","","",242,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ge","","",242,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"cmp","","",242,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"ordering"}}],[11,"hash","","",242,null],[11,"encode","","",242,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",242,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_code_extent","","",242,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"codeextent"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"eq","","",243,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",243,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",243,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",243,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",243,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",243,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"cmp","","",243,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"hash","","",243,null],[11,"encode","","",243,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",243,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"node_id","","Returns a node id associated with this scope.",244,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"node_id","","",245,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this CodeExtent.  Note that in general the returned span may not correspond to the span of any node id in the AST.",245,{"inputs":[{"name":"self"},{"name":"regionmaps"},{"name":"map"}],"output":{"name":"option"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody really cares about the contents of these.",247,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"lookup_code_extent","","",247,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"node_extent","","",247,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"item_extent","","",247,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"call_site_extent","","",247,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"opt_destruction_extent","","",247,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"intern_code_extent","","",247,{"inputs":[{"name":"self"},{"name":"codeextentdata"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"intern_node","","",247,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"code_extent_data","","",247,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextentdata"}}],[11,"each_encl_scope","","",247,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"each_var_scope","","",247,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",247,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",247,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",247,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"temporary_scope2","","",247,null],[11,"old_and_new_temporary_scope","","",247,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",247,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",247,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"scopes_intersect","","",247,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",247,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",247,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[0,"recursion_limit","rustc::middle","",null,null],[5,"update_limits","rustc::middle::recursion_limit","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"resolve_lifetime","rustc::middle","Name resolution for lifetimes.",null,null],[3,"NamedRegionMap","rustc::middle::resolve_lifetime","",null,null],[12,"defs","","",248,null],[12,"late_bound","","",248,null],[12,"issue_32330","","",248,null],[12,"object_lifetime_defaults","","",248,null],[4,"Region","","",null,null],[13,"Static","","",249,null],[13,"EarlyBound","","",249,null],[13,"LateBound","","",249,null],[13,"LateBoundAnon","","",249,null],[13,"Free","","",249,null],[4,"Set1","","A set containing, at most, one known element. If two distinct values are inserted into a set, then it becomes `Many`, which can be used to detect ambiguities.",null,null],[13,"Empty","","",250,null],[13,"One","","",250,null],[13,"Many","","",250,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[6,"ObjectLifetimeDefault","","",null,null],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"eq","","",249,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"ne","","",249,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"hash","","",249,null],[11,"encode","","",249,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",249,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"set1"}}],[11,"eq","","",250,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"ne","","",250,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"encode","","",250,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",250,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"insert","","",250,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"stability","rustc::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[3,"DeprecationEntry","rustc::middle::stability","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",251,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[4,"StabilityLevel","","",null,null],[13,"Unstable","","",252,null],[13,"Stable","","",252,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":null}],[11,"encode","","",252,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",252,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",252,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",252,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",252,null],[11,"from_attr_level","","",252,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"self"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"same_origin","","",251,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"build","","Construct the stability index for a crate being compiled.",253,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":null}],[11,"new","","",253,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[0,"weak_lang_items","rustc::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,{"inputs":[{"name":"crate"},{"name":"session"},{"name":"languageitems"}],"output":null}],[5,"link_name","","",null,null],[0,"mir","rustc","",null,null],[3,"Mir","rustc::mir","Lowered representation of a single function.",null,null],[12,"visibility_scopes","","List of visibility (lexical) scopes; these are referenced by statements and used (eventually) for debuginfo. Indexed by a `VisibilityScope`.",254,null],[12,"promoted","","Rvalues promoted from this function, such as borrows of constants. Each of them is the Mir of a constant with the fn's type parameters in scope, but a separate set of locals.",254,null],[12,"return_ty","","Return type of the function.",254,null],[12,"local_decls","","Declarations of locals.",254,null],[12,"arg_count","","Number of arguments this function takes.",254,null],[12,"upvar_decls","","Names and capture modes of all the closure upvars, assuming the first argument is either the closure or a reference to it.",254,null],[12,"spread_arg","","Mark an argument local (which must be a tuple) as getting passed as its individual components at the LLVM level.",254,null],[12,"span","","A span representing this MIR, for error reporting",254,null],[3,"SourceInfo","","Grouped information about the source code origin of a MIR entity. Intended to be inspected by diagnostics and debuginfo. Most passes can work with it as a whole, within a single function.",null,null],[12,"span","","Source span for the AST pertaining to this MIR entity.",255,null],[12,"scope","","The lexical visibility scope, i.e. which bindings can be seen.",255,null],[3,"Local","","",null,null],[3,"LocalDecl","","A MIR local.",null,null],[12,"mutability","","`let mut x` vs `let x`.",256,null],[12,"ty","","Type of this local.",256,null],[12,"name","","Name of the local, used in debuginfo and pretty-printing.",256,null],[12,"source_info","","For user-declared variables, stores their source information.",256,null],[3,"UpvarDecl","","A closure capture, with its name and mode.",null,null],[12,"debug_name","","",257,null],[12,"by_ref","","If true, the capture is behind a reference.",257,null],[3,"BasicBlock","","",null,null],[3,"BasicBlockData","","",null,null],[12,"statements","","List of statements in this block.",258,null],[12,"terminator","","Terminator for this block.",258,null],[12,"is_cleanup","","If true, this block lies on an unwind path. This is used during trans where distinct kinds of basic blocks may be generated (particularly for MSVC cleanup). Unwind blocks must only branch to other unwind blocks.",258,null],[3,"Terminator","","",null,null],[12,"source_info","","",259,null],[12,"kind","","",259,null],[3,"Statement","","",null,null],[12,"source_info","","",260,null],[12,"kind","","",260,null],[3,"Static","","The def-id of a static, along with its normalized type (which is stored to avoid requiring normalization when reading MIR).",null,null],[12,"def_id","","",261,null],[12,"ty","","",261,null],[3,"Projection","","The `Projection` data structure defines things of the form `B.x` or `*B` or `B[index]`. Note that it is parameterized because it is shared between `Constant` and `Lvalue`. See the aliases `LvalueProjection` etc below.",null,null],[12,"base","","",262,null],[12,"elem","","",262,null],[3,"Field","","",null,null],[3,"VisibilityScope","","",null,null],[3,"VisibilityScopeData","","",null,null],[12,"span","","",263,null],[12,"parent_scope","","",263,null],[3,"Constant","","Constants",null,null],[12,"span","","",264,null],[12,"ty","","",264,null],[12,"literal","","",264,null],[3,"Promoted","","",null,null],[3,"Location","","",null,null],[12,"block","","the location is within this block",265,null],[12,"statement_index","","the location is the start of the this statement; or, if `statement_index` == num-statements, then the start of the terminator.",265,null],[4,"Mutability","","",null,null],[13,"Mut","","",266,null],[13,"Not","","",266,null],[4,"BorrowKind","","",null,null],[13,"Shared","","Data must be immutable and is aliasable.",267,null],[13,"Unique","","Data must be immutable but not aliasable.  This kind of borrow cannot currently be expressed by the user and is used only in implicit closure bindings. It is needed when you the closure is borrowing or mutating a mutable referent, e.g.:",267,null],[13,"Mut","","Data is mutable and not aliasable.",267,null],[4,"LocalKind","","Classifies locals into categories. See `Mir::local_kind`.",null,null],[13,"Var","","User-declared variable binding",268,null],[13,"Temp","","Compiler-introduced temporary",268,null],[13,"Arg","","Function argument",268,null],[13,"ReturnPointer","","Location of function's return value",268,null],[4,"TerminatorKind","","",null,null],[13,"Goto","","block should have one successor in the graph; we jump there",269,null],[12,"target","rustc::mir::TerminatorKind","",269,null],[13,"SwitchInt","rustc::mir","operand evaluates to an integer; jump depending on its value to one of the targets, and otherwise fallback to `otherwise`",269,null],[12,"discr","rustc::mir::TerminatorKind","discriminant value being tested",269,null],[12,"switch_ty","","type of value being tested",269,null],[12,"values","","Possible values. The locations to branch to in each case are found in the corresponding indices from the `targets` vector.",269,null],[12,"targets","","Possible branch sites. The last element of this vector is used for the otherwise branch, so values.len() == targets.len() + 1 should hold.",269,null],[13,"Resume","rustc::mir","Indicates that the landing pad is finished and unwinding should continue. Emitted by build::scope::diverge_cleanup.",269,null],[13,"Return","","Indicates a normal return. The return pointer lvalue should have been filled in by now. This should occur at most once.",269,null],[13,"Unreachable","","Indicates a terminator that can never be reached.",269,null],[13,"Drop","","Drop the Lvalue",269,null],[12,"location","rustc::mir::TerminatorKind","",269,null],[12,"target","","",269,null],[12,"unwind","","",269,null],[13,"DropAndReplace","rustc::mir","Drop the Lvalue and assign the new value over it",269,null],[12,"location","rustc::mir::TerminatorKind","",269,null],[12,"value","","",269,null],[12,"target","","",269,null],[12,"unwind","","",269,null],[13,"Call","rustc::mir","Block ends with a call of a converging function",269,null],[12,"func","rustc::mir::TerminatorKind","The function that’s being called",269,null],[12,"args","","Arguments the function is called with",269,null],[12,"destination","","Destination for the return value. If some, the call is converging.",269,null],[12,"cleanup","","Cleanups to be done if the call unwinds.",269,null],[13,"Assert","rustc::mir","Jump to the target if the condition has the expected value, otherwise panic with a message and a cleanup target.",269,null],[12,"cond","rustc::mir::TerminatorKind","",269,null],[12,"expected","","",269,null],[12,"msg","","",269,null],[12,"target","","",269,null],[12,"cleanup","","",269,null],[4,"AssertMessage","rustc::mir","",null,null],[13,"BoundsCheck","","",270,null],[12,"len","rustc::mir::AssertMessage","",270,null],[12,"index","","",270,null],[13,"Math","rustc::mir","",270,null],[4,"StatementKind","","",null,null],[13,"Assign","","Write the RHS Rvalue to the LHS Lvalue.",271,null],[13,"SetDiscriminant","","Write the discriminant for a variant to the enum Lvalue.",271,null],[12,"lvalue","rustc::mir::StatementKind","",271,null],[12,"variant_index","","",271,null],[13,"StorageLive","rustc::mir","Start a live range for the storage of the local.",271,null],[13,"StorageDead","","End the current live range for the storage of the local.",271,null],[13,"InlineAsm","","",271,null],[12,"asm","rustc::mir::StatementKind","",271,null],[12,"outputs","","",271,null],[12,"inputs","","",271,null],[13,"Nop","rustc::mir","No-op. Useful for deleting instructions without affecting statement indices.",271,null],[4,"Lvalue","","A path to a value; something that can be evaluated without changing or disturbing program state.",null,null],[13,"Local","","local variable",272,null],[13,"Static","","static or static mut variable",272,null],[13,"Projection","","projection out of an lvalue (access a field, deref a pointer, etc)",272,null],[4,"ProjectionElem","","",null,null],[13,"Deref","","",273,null],[13,"Field","","",273,null],[13,"Index","","",273,null],[13,"ConstantIndex","","These indices are generated by slice patterns. Easiest to explain by example:",273,null],[12,"offset","rustc::mir::ProjectionElem","index or -index (in Python terms), depending on from_end",273,null],[12,"min_length","","thing being indexed must be at least this long",273,null],[12,"from_end","","counting backwards from end?",273,null],[13,"Subslice","rustc::mir","These indices are generated by slice patterns.",273,null],[12,"from","rustc::mir::ProjectionElem","",273,null],[12,"to","","",273,null],[13,"Downcast","rustc::mir","\"Downcast\" to a variant of an ADT. Currently, we only introduce this for ADTs with more than one variant. It may be better to just introduce it always, or always for enums.",273,null],[4,"Operand","","These are values that can appear inside an rvalue (or an index lvalue). They are intentionally limited to prevent rvalues from being nested in one another.",null,null],[13,"Consume","","",274,null],[13,"Constant","","",274,null],[4,"Rvalue","","Rvalues",null,null],[13,"Use","","x (either a move or copy, depending on type of x)",275,null],[13,"Repeat","","[x; 32]",275,null],[13,"Ref","","&x or &mut x",275,null],[13,"Len","","length of a [X] or [X;n] value",275,null],[13,"Cast","","",275,null],[13,"BinaryOp","","",275,null],[13,"CheckedBinaryOp","","",275,null],[13,"UnaryOp","","",275,null],[13,"Discriminant","","Read the discriminant of an ADT.",275,null],[13,"Box","","Creates an *uninitialized* Box",275,null],[13,"Aggregate","","Create an aggregate value, like a tuple or struct.  This is only needed because we want to distinguish `dest = Foo { x: ..., y: ... }` from `dest.x = ...; dest.y = ...;` in the case that `Foo` has a destructor. These rvalues can be optimized away after type-checking and before lowering.",275,null],[4,"CastKind","","",null,null],[13,"Misc","","",276,null],[13,"ReifyFnPointer","","Convert unique, zero-sized type for a fn to fn()",276,null],[13,"ClosureFnPointer","","Convert non capturing closure to fn()",276,null],[13,"UnsafeFnPointer","","Convert safe fn() to unsafe fn()",276,null],[13,"Unsize","","\"Unsize\" -- convert a thin-or-fat pointer to a fat pointer. trans must figure out the details once full monomorphization is known. For example, this could be used to cast from a `&[i32;N]` to a `&[i32]`, or a `Box<T>` to a `Box<Trait>` (presuming `T: Trait`).",276,null],[4,"AggregateKind","","",null,null],[13,"Array","","The type is of the element",277,null],[13,"Tuple","","",277,null],[13,"Adt","","The second field is variant number (discriminant), it's equal to 0 for struct and union expressions. The fourth field is active field number and is present only for union expressions.",277,null],[13,"Closure","","",277,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",278,null],[13,"Sub","","The `-` operator (subtraction)",278,null],[13,"Mul","","The `*` operator (multiplication)",278,null],[13,"Div","","The `/` operator (division)",278,null],[13,"Rem","","The `%` operator (modulus)",278,null],[13,"BitXor","","The `^` operator (bitwise xor)",278,null],[13,"BitAnd","","The `&` operator (bitwise and)",278,null],[13,"BitOr","","The `|` operator (bitwise or)",278,null],[13,"Shl","","The `<<` operator (shift left)",278,null],[13,"Shr","","The `>>` operator (shift right)",278,null],[13,"Eq","","The `==` operator (equality)",278,null],[13,"Lt","","The `<` operator (less than)",278,null],[13,"Le","","The `<=` operator (less than or equal to)",278,null],[13,"Ne","","The `!=` operator (not equal to)",278,null],[13,"Ge","","The `>=` operator (greater than or equal to)",278,null],[13,"Gt","","The `>` operator (greater than)",278,null],[4,"UnOp","","",null,null],[13,"Not","","The `!` operator for logical inversion",279,null],[13,"Neg","","The `-` operator for negation",279,null],[4,"Literal","","",null,null],[13,"Item","","",280,null],[12,"def_id","rustc::mir::Literal","",280,null],[12,"substs","","",280,null],[13,"Value","rustc::mir","",280,null],[12,"value","rustc::mir::Literal","",280,null],[13,"Promoted","rustc::mir","",280,null],[12,"index","rustc::mir::Literal","",280,null],[0,"tcx","rustc::mir","Methods for the various MIR types. These are intended for use after building is complete.",null,null],[4,"LvalueTy","rustc::mir::tcx","",null,null],[13,"Ty","","Normal type.",281,null],[12,"ty","rustc::mir::tcx::LvalueTy","",281,null],[13,"Downcast","rustc::mir::tcx","Downcast to a particular variant of an enum.",281,null],[12,"adt_def","rustc::mir::tcx::LvalueTy","",281,null],[12,"substs","","",281,null],[12,"variant_index","","",281,null],[11,"clone","rustc::mir::tcx","",281,{"inputs":[{"name":"self"}],"output":{"name":"lvaluety"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ty","","",281,{"inputs":[{"name":"ty"}],"output":{"name":"lvaluety"}}],[11,"to_ty","","",281,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"projection_ty","","",281,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"lvalueelem"}],"output":{"name":"lvaluety"}}],[11,"super_fold_with","","",281,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",281,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"ty","rustc::mir","",272,{"inputs":[{"name":"self"},{"name":"mir"},{"name":"tyctxt"}],"output":{"name":"lvaluety"}}],[11,"ty","","",275,{"inputs":[{"name":"self"},{"name":"mir"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"ty","","",274,{"inputs":[{"name":"self"},{"name":"mir"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"ty","","",278,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"to_mutbl_lossy","","",267,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"to_hir_binop","","",278,{"inputs":[{"name":"self"}],"output":{"name":"binop_"}}],[0,"visit","","",null,null],[4,"LvalueContext","rustc::mir::visit","",null,null],[13,"Store","","",282,null],[13,"Call","","",282,null],[13,"Drop","","",282,null],[13,"Inspect","","",282,null],[13,"Borrow","","",282,null],[12,"region","rustc::mir::visit::LvalueContext","",282,null],[12,"kind","","",282,null],[13,"Projection","rustc::mir::visit","",282,null],[13,"Consume","","",282,null],[13,"StorageLive","","",282,null],[13,"StorageDead","","",282,null],[8,"Visitor","","",null,null],[11,"visit_mir","","",283,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"visit_basic_block_data","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblockdata"}],"output":null}],[11,"visit_visibility_scope_data","","",283,{"inputs":[{"name":"self"},{"name":"visibilityscopedata"}],"output":null}],[11,"visit_statement","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"statement"},{"name":"location"}],"output":null}],[11,"visit_assign","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"visit_terminator","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"visit_terminator_kind","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminatorkind"},{"name":"location"}],"output":null}],[11,"visit_assert_message","","",283,{"inputs":[{"name":"self"},{"name":"assertmessage"},{"name":"location"}],"output":null}],[11,"visit_rvalue","","",283,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"visit_operand","","",283,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"location"}],"output":null}],[11,"visit_lvalue","","",283,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_static","","",283,{"inputs":[{"name":"self"},{"name":"static"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_projection","","",283,{"inputs":[{"name":"self"},{"name":"lvalueprojection"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_projection_elem","","",283,{"inputs":[{"name":"self"},{"name":"lvalueelem"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_branch","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"visit_constant","","",283,{"inputs":[{"name":"self"},{"name":"constant"},{"name":"location"}],"output":null}],[11,"visit_literal","","",283,{"inputs":[{"name":"self"},{"name":"literal"},{"name":"location"}],"output":null}],[11,"visit_def_id","","",283,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"location"}],"output":null}],[11,"visit_span","","",283,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_source_info","","",283,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":null}],[11,"visit_ty","","",283,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_substs","","",283,{"inputs":[{"name":"self"},{"name":"substs"}],"output":null}],[11,"visit_closure_substs","","",283,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":null}],[11,"visit_const_val","","",283,{"inputs":[{"name":"self"},{"name":"constval"},{"name":"location"}],"output":null}],[11,"visit_const_int","","",283,{"inputs":[{"name":"self"},{"name":"constint"},{"name":"location"}],"output":null}],[11,"visit_const_usize","","",283,{"inputs":[{"name":"self"},{"name":"constusize"},{"name":"location"}],"output":null}],[11,"visit_local_decl","","",283,{"inputs":[{"name":"self"},{"name":"localdecl"}],"output":null}],[11,"visit_visibility_scope","","",283,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":null}],[11,"super_mir","","",283,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"super_basic_block_data","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblockdata"}],"output":null}],[11,"super_visibility_scope_data","","",283,{"inputs":[{"name":"self"},{"name":"visibilityscopedata"}],"output":null}],[11,"super_statement","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"statement"},{"name":"location"}],"output":null}],[11,"super_assign","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"super_terminator","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"super_terminator_kind","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminatorkind"},{"name":"location"}],"output":null}],[11,"super_assert_message","","",283,{"inputs":[{"name":"self"},{"name":"assertmessage"},{"name":"location"}],"output":null}],[11,"super_rvalue","","",283,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"super_operand","","",283,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"location"}],"output":null}],[11,"super_lvalue","","",283,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_static","","",283,{"inputs":[{"name":"self"},{"name":"static"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_projection","","",283,{"inputs":[{"name":"self"},{"name":"lvalueprojection"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_projection_elem","","",283,{"inputs":[{"name":"self"},{"name":"lvalueelem"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_local_decl","","",283,{"inputs":[{"name":"self"},{"name":"localdecl"}],"output":null}],[11,"super_visibility_scope","","",283,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":null}],[11,"super_branch","","",283,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"super_constant","","",283,{"inputs":[{"name":"self"},{"name":"constant"},{"name":"location"}],"output":null}],[11,"super_literal","","",283,{"inputs":[{"name":"self"},{"name":"literal"},{"name":"location"}],"output":null}],[11,"super_def_id","","",283,{"inputs":[{"name":"self"},{"name":"defid"}],"output":null}],[11,"super_span","","",283,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"super_source_info","","",283,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":null}],[11,"super_ty","","",283,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"super_substs","","",283,{"inputs":[{"name":"self"},{"name":"substs"}],"output":null}],[11,"super_closure_substs","","",283,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":null}],[11,"super_const_val","","",283,{"inputs":[{"name":"self"},{"name":"constval"}],"output":null}],[11,"super_const_int","","",283,{"inputs":[{"name":"self"},{"name":"constint"}],"output":null}],[11,"super_const_usize","","",283,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":null}],[11,"visit_location","","",283,{"inputs":[{"name":"self"},{"name":"mir"},{"name":"location"}],"output":null}],[8,"MutVisitor","","",null,null],[11,"visit_mir","","",284,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"visit_basic_block_data","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblockdata"}],"output":null}],[11,"visit_visibility_scope_data","","",284,{"inputs":[{"name":"self"},{"name":"visibilityscopedata"}],"output":null}],[11,"visit_statement","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"statement"},{"name":"location"}],"output":null}],[11,"visit_assign","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"visit_terminator","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"visit_terminator_kind","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminatorkind"},{"name":"location"}],"output":null}],[11,"visit_assert_message","","",284,{"inputs":[{"name":"self"},{"name":"assertmessage"},{"name":"location"}],"output":null}],[11,"visit_rvalue","","",284,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"visit_operand","","",284,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"location"}],"output":null}],[11,"visit_lvalue","","",284,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_static","","",284,{"inputs":[{"name":"self"},{"name":"static"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_projection","","",284,{"inputs":[{"name":"self"},{"name":"lvalueprojection"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_projection_elem","","",284,{"inputs":[{"name":"self"},{"name":"lvalueelem"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"visit_branch","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"visit_constant","","",284,{"inputs":[{"name":"self"},{"name":"constant"},{"name":"location"}],"output":null}],[11,"visit_literal","","",284,{"inputs":[{"name":"self"},{"name":"literal"},{"name":"location"}],"output":null}],[11,"visit_def_id","","",284,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"location"}],"output":null}],[11,"visit_span","","",284,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_source_info","","",284,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":null}],[11,"visit_ty","","",284,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_substs","","",284,{"inputs":[{"name":"self"},{"name":"substs"}],"output":null}],[11,"visit_closure_substs","","",284,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":null}],[11,"visit_const_val","","",284,{"inputs":[{"name":"self"},{"name":"constval"},{"name":"location"}],"output":null}],[11,"visit_const_int","","",284,{"inputs":[{"name":"self"},{"name":"constint"},{"name":"location"}],"output":null}],[11,"visit_const_usize","","",284,{"inputs":[{"name":"self"},{"name":"constusize"},{"name":"location"}],"output":null}],[11,"visit_local_decl","","",284,{"inputs":[{"name":"self"},{"name":"localdecl"}],"output":null}],[11,"visit_visibility_scope","","",284,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":null}],[11,"super_mir","","",284,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"super_basic_block_data","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblockdata"}],"output":null}],[11,"super_visibility_scope_data","","",284,{"inputs":[{"name":"self"},{"name":"visibilityscopedata"}],"output":null}],[11,"super_statement","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"statement"},{"name":"location"}],"output":null}],[11,"super_assign","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"super_terminator","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"super_terminator_kind","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminatorkind"},{"name":"location"}],"output":null}],[11,"super_assert_message","","",284,{"inputs":[{"name":"self"},{"name":"assertmessage"},{"name":"location"}],"output":null}],[11,"super_rvalue","","",284,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[11,"super_operand","","",284,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"location"}],"output":null}],[11,"super_lvalue","","",284,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_static","","",284,{"inputs":[{"name":"self"},{"name":"static"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_projection","","",284,{"inputs":[{"name":"self"},{"name":"lvalueprojection"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_projection_elem","","",284,{"inputs":[{"name":"self"},{"name":"lvalueelem"},{"name":"lvaluecontext"},{"name":"location"}],"output":null}],[11,"super_local_decl","","",284,{"inputs":[{"name":"self"},{"name":"localdecl"}],"output":null}],[11,"super_visibility_scope","","",284,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":null}],[11,"super_branch","","",284,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"super_constant","","",284,{"inputs":[{"name":"self"},{"name":"constant"},{"name":"location"}],"output":null}],[11,"super_literal","","",284,{"inputs":[{"name":"self"},{"name":"literal"},{"name":"location"}],"output":null}],[11,"super_def_id","","",284,{"inputs":[{"name":"self"},{"name":"defid"}],"output":null}],[11,"super_span","","",284,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"super_source_info","","",284,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":null}],[11,"super_ty","","",284,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"super_substs","","",284,{"inputs":[{"name":"self"},{"name":"substs"}],"output":null}],[11,"super_closure_substs","","",284,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":null}],[11,"super_const_val","","",284,{"inputs":[{"name":"self"},{"name":"constval"}],"output":null}],[11,"super_const_int","","",284,{"inputs":[{"name":"self"},{"name":"constint"}],"output":null}],[11,"super_const_usize","","",284,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":null}],[11,"visit_location","","",284,{"inputs":[{"name":"self"},{"name":"mir"},{"name":"location"}],"output":null}],[11,"clone","","",282,{"inputs":[{"name":"self"}],"output":{"name":"lvaluecontext"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",282,{"inputs":[{"name":"self"},{"name":"lvaluecontext"}],"output":{"name":"bool"}}],[11,"ne","","",282,{"inputs":[{"name":"self"},{"name":"lvaluecontext"}],"output":{"name":"bool"}}],[11,"is_drop","","Returns true if this lvalue context represents a drop.",282,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_storage_marker","","Returns true if this lvalue context represents a storage live or storage dead marker.",282,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_storage_live_marker","","Returns true if this lvalue context represents a storage live marker.",282,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_storage_dead_marker","","Returns true if this lvalue context represents a storage dead marker.",282,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mutating_use","","Returns true if this lvalue context represents a use that potentially changes the value.",282,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_nonmutating_use","","Returns true if this lvalue context represents a use that does not change the value.",282,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_use","","",282,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"transform","rustc::mir","",null,null],[3,"Passes","rustc::mir::transform","A manager for MIR passes.",null,null],[4,"MirSource","","Where a specific Mir comes from.",null,null],[13,"Fn","","Functions and methods.",285,null],[13,"Const","","Constants and associated constants.",285,null],[13,"Static","","Initializer of a `static` item.",285,null],[13,"Promoted","","Promoted rvalues within a function.",285,null],[8,"Pass","","Various information about pass.",null,null],[11,"name","","",286,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"disambiguator","","",286,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MirMapPass","","A pass which inspects the whole Mir map.",null,null],[10,"run_pass","","",287,null],[8,"MirPassHook","","",null,null],[10,"on_mir_pass","","",288,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"},{"name":"pass"},{"name":"bool"}],"output":null}],[8,"MirPass","","A pass which inspects Mir of functions in isolation.",null,null],[10,"run_pass","","",289,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",285,{"inputs":[{"name":"self"}],"output":{"name":"mirsource"}}],[11,"from_node","","",285,{"inputs":[{"name":"tyctxt"},{"name":"nodeid"}],"output":{"name":"mirsource"}}],[11,"item_id","","",285,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"new","","",290,{"inputs":[],"output":{"name":"passes"}}],[11,"run_passes","","",290,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":null}],[11,"push_pass","","Pushes a built-in pass.",290,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"push_hook","","Pushes a pass hook.",290,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"extend","","",290,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"traversal","rustc::mir","",null,null],[3,"Preorder","rustc::mir::traversal","Preorder traversal of a graph.",null,null],[3,"Postorder","","Postorder traversal of a graph.",null,null],[3,"ReversePostorder","","Reverse postorder traversal of a graph",null,null],[5,"preorder","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"preorder"}}],[5,"postorder","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"postorder"}}],[5,"reverse_postorder","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"reversepostorder"}}],[11,"clone","","",291,{"inputs":[{"name":"self"}],"output":{"name":"preorder"}}],[11,"new","","",291,{"inputs":[{"name":"mir"},{"name":"basicblock"}],"output":{"name":"preorder"}}],[11,"next","","",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",292,{"inputs":[{"name":"mir"},{"name":"basicblock"}],"output":{"name":"postorder"}}],[11,"next","","",292,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",293,{"inputs":[{"name":"self"}],"output":{"name":"reversepostorder"}}],[11,"new","","",293,{"inputs":[{"name":"mir"},{"name":"basicblock"}],"output":{"name":"reversepostorder"}}],[11,"reset","","",293,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"LvalueProjection","rustc::mir","Alias for projections as they appear in lvalues, where the base is an lvalue and the index is an operand.",null,null],[6,"LvalueElem","","Alias for projections as they appear in lvalues, where the base is an lvalue and the index is an operand.",null,null],[17,"START_BLOCK","","where execution begins",null,null],[17,"RETURN_POINTER","","",null,null],[17,"ARGUMENT_VISIBILITY_SCOPE","","",null,null],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"mir"}}],[11,"encode","","",254,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",254,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",254,{"inputs":[{"name":"indexvec"},{"name":"indexvec"},{"name":"indexvec"},{"name":"ty"},{"name":"indexvec"},{"name":"usize"},{"name":"vec"},{"name":"span"}],"output":{"name":"self"}}],[11,"basic_blocks","","",254,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"basic_blocks_mut","","",254,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"predecessors","","",254,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"predecessors_for","","",254,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"ref"}}],[11,"dominators","","",254,{"inputs":[{"name":"self"}],"output":{"name":"dominators"}}],[11,"local_kind","","",254,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"localkind"}}],[11,"temps_iter","","Returns an iterator over all temporaries.",254,null],[11,"vars_iter","","Returns an iterator over all user-declared locals.",254,null],[11,"args_iter","","Returns an iterator over all function arguments.",254,null],[11,"vars_and_temps_iter","","Returns an iterator over all user-defined variables and compiler-generated temporaries (all locals that are neither arguments nor the return pointer).",254,null],[11,"make_statement_nop","","Changes a statement to a nop. This is both faster than deleting instructions and avoids invalidating statement indices in `Location`s.",254,{"inputs":[{"name":"self"},{"name":"location"}],"output":null}],[11,"index","","",254,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"basicblockdata"}}],[11,"index_mut","","",254,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"basicblockdata"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"sourceinfo"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",255,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":{"name":"bool"}}],[11,"ne","","",255,{"inputs":[{"name":"self"},{"name":"sourceinfo"}],"output":{"name":"bool"}}],[11,"encode","","",255,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",255,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",266,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"encode","","",266,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",266,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"borrowkind"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",267,{"inputs":[{"name":"self"},{"name":"borrowkind"}],"output":{"name":"bool"}}],[11,"encode","","",267,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",267,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",294,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",294,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"hash","","",294,null],[11,"partial_cmp","","",294,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"option"}}],[11,"lt","","",294,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"le","","",294,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"gt","","",294,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ge","","",294,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"cmp","","",294,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"ordering"}}],[11,"encode","","",294,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",294,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",294,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",294,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",268,{"inputs":[{"name":"self"},{"name":"localkind"}],"output":{"name":"bool"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"localdecl"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",256,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",256,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new_temp","","Create a new `LocalDecl` for a temporary.",256,{"inputs":[{"name":"ty"}],"output":{"name":"self"}}],[11,"new_return_pointer","","Builds a `LocalDecl` for the return pointer.",256,{"inputs":[{"name":"ty"}],"output":{"name":"localdecl"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"upvardecl"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",257,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",257,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",295,{"inputs":[{"name":"self"}],"output":{"name":"basicblock"}}],[11,"eq","","",295,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"ne","","",295,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"hash","","",295,null],[11,"partial_cmp","","",295,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"option"}}],[11,"lt","","",295,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"le","","",295,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"gt","","",295,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"ge","","",295,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"bool"}}],[11,"cmp","","",295,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":{"name":"ordering"}}],[11,"encode","","",295,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",295,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",295,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",295,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"basicblockdata"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",258,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",258,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"terminator"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",259,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",259,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"terminatorkind"}}],[11,"encode","","",269,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",269,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"successors","","",259,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"successors_mut","","",259,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"if_","","",269,{"inputs":[{"name":"tyctxt"},{"name":"operand"},{"name":"basicblock"},{"name":"basicblock"}],"output":{"name":"terminatorkind"}}],[11,"successors","","",269,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"successors_mut","","",269,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","",258,{"inputs":[{"name":"option"}],"output":{"name":"basicblockdata"}}],[11,"terminator","","Accessor for terminator.",258,{"inputs":[{"name":"self"}],"output":{"name":"terminator"}}],[11,"terminator_mut","","",258,{"inputs":[{"name":"self"}],"output":{"name":"terminator"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_head","","Write the \"head\" part of the terminator; that is, its name and the data it uses to pick the successor basic block, if any. The only information not inlcuded is the list of possible successors, which may be rendered differently between the text and the graphviz format.",269,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt_successor_labels","","Return the list of labels for the edges to the successor basic blocks.",269,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"assertmessage"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",270,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",270,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"statement"}}],[11,"encode","","",260,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",260,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"make_nop","","Changes a statement to a nop. This is both faster than deleting instructions and avoids invalidating statement indices in `Location`s.",260,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"statementkind"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",271,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",271,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"lvalue"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"lvalue"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"lvalue"}],"output":{"name":"bool"}}],[11,"encode","","",272,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",272,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"static"}],"output":{"name":"bool"}}],[11,"ne","","",261,{"inputs":[{"name":"self"},{"name":"static"}],"output":{"name":"bool"}}],[11,"encode","","",261,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",261,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"projection"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"ne","","",262,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"hash","","",262,null],[11,"encode","","",262,{"inputs":[{"name":"self"},{"name":"__sbv"}],"output":{"name":"result"}}],[11,"decode","","",262,{"inputs":[{"name":"__dbv"}],"output":{"name":"result"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"projectionelem"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"projectionelem"}],"output":{"name":"bool"}}],[11,"ne","","",273,{"inputs":[{"name":"self"},{"name":"projectionelem"}],"output":{"name":"bool"}}],[11,"hash","","",273,null],[11,"encode","","",273,{"inputs":[{"name":"self"},{"name":"__sv"}],"output":{"name":"result"}}],[11,"decode","","",273,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"clone","","",296,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",296,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",296,null],[11,"partial_cmp","","",296,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"option"}}],[11,"lt","","",296,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"le","","",296,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"gt","","",296,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ge","","",296,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"cmp","","",296,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"ordering"}}],[11,"encode","","",296,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",296,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",296,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",296,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","","",272,{"inputs":[{"name":"self"},{"name":"field"},{"name":"ty"}],"output":{"name":"lvalue"}}],[11,"deref","","",272,{"inputs":[{"name":"self"}],"output":{"name":"lvalue"}}],[11,"downcast","","",272,{"inputs":[{"name":"self"},{"name":"adtdef"},{"name":"usize"}],"output":{"name":"lvalue"}}],[11,"index","","",272,{"inputs":[{"name":"self"},{"name":"operand"}],"output":{"name":"lvalue"}}],[11,"elem","","",272,{"inputs":[{"name":"self"},{"name":"lvalueelem"}],"output":{"name":"lvalue"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",297,{"inputs":[{"name":"self"}],"output":{"name":"visibilityscope"}}],[11,"eq","","",297,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"ne","","",297,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"hash","","",297,null],[11,"partial_cmp","","",297,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"option"}}],[11,"lt","","",297,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"le","","",297,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"gt","","",297,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"ge","","",297,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"bool"}}],[11,"cmp","","",297,{"inputs":[{"name":"self"},{"name":"visibilityscope"}],"output":{"name":"ordering"}}],[11,"encode","","",297,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",297,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",297,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",297,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"visibilityscopedata"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",263,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",263,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"operand"}}],[11,"eq","","",274,{"inputs":[{"name":"self"},{"name":"operand"}],"output":{"name":"bool"}}],[11,"ne","","",274,{"inputs":[{"name":"self"},{"name":"operand"}],"output":{"name":"bool"}}],[11,"encode","","",274,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",274,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"rvalue"}}],[11,"encode","","",275,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",275,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"castkind"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",276,{"inputs":[{"name":"self"},{"name":"castkind"}],"output":{"name":"bool"}}],[11,"encode","","",276,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",276,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",277,{"inputs":[{"name":"self"}],"output":{"name":"aggregatekind"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",277,{"inputs":[{"name":"self"},{"name":"aggregatekind"}],"output":{"name":"bool"}}],[11,"ne","","",277,{"inputs":[{"name":"self"},{"name":"aggregatekind"}],"output":{"name":"bool"}}],[11,"encode","","",277,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",277,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",278,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",278,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"encode","","",278,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",278,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"is_checkable","","",278,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",279,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"fmt","","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",279,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"encode","","",279,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",279,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"eq","","",264,{"inputs":[{"name":"self"},{"name":"constant"}],"output":{"name":"bool"}}],[11,"ne","","",264,{"inputs":[{"name":"self"},{"name":"constant"}],"output":{"name":"bool"}}],[11,"hash","","",264,null],[11,"encode","","",264,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",264,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",298,{"inputs":[{"name":"self"}],"output":{"name":"promoted"}}],[11,"eq","","",298,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"hash","","",298,null],[11,"partial_cmp","","",298,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"option"}}],[11,"lt","","",298,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"le","","",298,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"gt","","",298,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"ge","","",298,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"bool"}}],[11,"cmp","","",298,{"inputs":[{"name":"self"},{"name":"promoted"}],"output":{"name":"ordering"}}],[11,"encode","","",298,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",298,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",298,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",298,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",280,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"eq","","",280,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",280,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"hash","","",280,null],[11,"encode","","",280,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",280,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"num_nodes","","",254,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"start_node","","",254,null],[11,"predecessors","","",254,null],[11,"successors","","",254,null],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"eq","","",265,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",265,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"hash","","",265,null],[11,"cmp","","",265,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",265,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"option"}}],[11,"lt","","",265,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"le","","",265,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"gt","","",265,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ge","","",265,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dominates","","",265,{"inputs":[{"name":"self"},{"name":"location"},{"name":"dominators"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",254,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",256,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",256,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",258,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",260,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",260,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",259,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",259,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",272,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",272,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",275,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",275,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",274,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",274,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",262,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",262,{"inputs":[{"name":"self"},{"name":"vs"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",264,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",264,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",280,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[0,"session","rustc","",null,null],[3,"CodeStats","rustc::session","",null,null],[3,"FieldInfo","","",null,null],[12,"name","","",299,null],[12,"offset","","",299,null],[12,"size","","",299,null],[12,"align","","",299,null],[3,"TypeSizeInfo","","",null,null],[12,"kind","","",300,null],[12,"type_description","","",300,null],[12,"align","","",300,null],[12,"overall_size","","",300,null],[12,"opt_discr_size","","",300,null],[12,"variants","","",300,null],[3,"VariantInfo","","",null,null],[12,"name","","",301,null],[12,"kind","","",301,null],[12,"size","","",301,null],[12,"align","","",301,null],[12,"fields","","",301,null],[3,"Session","","",null,null],[12,"dep_graph","","",302,null],[12,"target","","",302,null],[12,"host","","",302,null],[12,"opts","","",302,null],[12,"cstore","","",302,null],[12,"parse_sess","","",302,null],[12,"entry_fn","","",302,null],[12,"entry_type","","",302,null],[12,"plugin_registrar_fn","","",302,null],[12,"derive_registrar_fn","","",302,null],[12,"default_sysroot","","",302,null],[12,"local_crate_source_file","","",302,null],[12,"working_dir","","",302,null],[12,"lint_store","","",302,null],[12,"lints","","",302,null],[12,"one_time_diagnostics","","Set of (LintId, span, message) tuples tracking lint (sub)diagnostics that have been set once, but should not be set again, in order to avoid redundantly verbose output (Issue #24690).",302,null],[12,"plugin_llvm_passes","","",302,null],[12,"mir_passes","","",302,null],[12,"plugin_attributes","","",302,null],[12,"crate_types","","",302,null],[12,"dependency_formats","","",302,null],[12,"crate_disambiguator","","",302,null],[12,"features","","",302,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization.",302,null],[12,"type_length_limit","","The maximum length of types during monomorphization.",302,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime dependency if it didn't already find one, and this tracks what was injected.",302,null],[12,"injected_panic_runtime","","",302,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of the localized span for the macro body) to the macro name and defintion span in the source crate.",302,null],[12,"perf_stats","","Some measurements that are being gathered during compilation.",302,null],[12,"code_stats","","Data about code being compiled, gathered during compilation.",302,null],[3,"PerfStats","","",null,null],[12,"svh_time","","",303,null],[12,"incr_comp_hashes_time","","",303,null],[12,"incr_comp_hashes_count","","",303,null],[12,"incr_comp_bytes_hashed","","",303,null],[12,"symbol_hash_time","","",303,null],[12,"decode_def_path_tables_time","","",303,null],[4,"DataTypeKind","","",null,null],[13,"Struct","","",304,null],[13,"Union","","",304,null],[13,"Enum","","",304,null],[13,"Closure","","",304,null],[4,"SizeKind","","",null,null],[13,"Exact","","",305,null],[13,"Min","","",305,null],[4,"IncrCompSession","","Holds data on the current incremental compilation session, if there is one.",null,null],[13,"NotInitialized","","",306,null],[13,"Active","","",306,null],[12,"session_directory","rustc::session::IncrCompSession","",306,null],[12,"lock_file","","",306,null],[13,"Finalized","rustc::session","",306,null],[12,"session_directory","rustc::session::IncrCompSession","",306,null],[13,"InvalidBecauseOfErrors","rustc::session","",306,null],[12,"session_directory","rustc::session::IncrCompSession","",306,null],[5,"build_session","rustc::session","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"},{"name":"option"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[5,"early_error","","",null,null],[5,"early_warn","","",null,{"inputs":[{"name":"erroroutputtype"},{"name":"str"}],"output":null}],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"compileresult"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[11,"clone","","",301,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"eq","","",301,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"hash","","",301,null],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",305,{"inputs":[{"name":"self"}],"output":{"name":"sizekind"}}],[11,"eq","","",305,{"inputs":[{"name":"self"},{"name":"sizekind"}],"output":{"name":"bool"}}],[11,"hash","","",305,null],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"fieldinfo"}}],[11,"eq","","",299,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"ne","","",299,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"hash","","",299,null],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",304,{"inputs":[{"name":"adtkind"}],"output":{"name":"self"}}],[11,"clone","","",304,{"inputs":[{"name":"self"}],"output":{"name":"datatypekind"}}],[11,"eq","","",304,{"inputs":[{"name":"self"},{"name":"datatypekind"}],"output":{"name":"bool"}}],[11,"hash","","",304,null],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",300,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"hash","","",300,null],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",307,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"ne","","",307,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",307,{"inputs":[],"output":{"name":"self"}}],[11,"record_type_size","","",307,{"inputs":[{"name":"self"},{"name":"datatypekind"},{"name":"s"},{"name":"align"},{"name":"size"},{"name":"option"},{"name":"vec"}],"output":null}],[11,"print_type_sizes","","",307,{"inputs":[{"name":"self"}],"output":null}],[0,"config","","Contains infrastructure for configuring the compiler, including parsing command line options.",null,null],[3,"Config","rustc::session::config","",null,null],[12,"target","","",308,null],[12,"int_type","","",308,null],[12,"uint_type","","",308,null],[3,"OutputTypes","","",null,null],[3,"Externs","","",null,null],[3,"Options","","",null,null],[12,"crate_types","","",309,null],[12,"optimize","","",309,null],[12,"debug_assertions","","",309,null],[12,"debuginfo","","",309,null],[12,"lint_opts","","",309,null],[12,"lint_cap","","",309,null],[12,"describe_lints","","",309,null],[12,"output_types","","",309,null],[12,"search_paths","","",309,null],[12,"libs","","",309,null],[12,"maybe_sysroot","","",309,null],[12,"target_triple","","",309,null],[12,"test","","",309,null],[12,"error_format","","",309,null],[12,"incremental","","",309,null],[12,"debugging_opts","","",309,null],[12,"prints","","",309,null],[12,"cg","","",309,null],[12,"externs","","",309,null],[12,"crate_name","","",309,null],[12,"alt_std_name","","",309,null],[12,"unstable_features","","",309,null],[12,"actually_rustdoc","","",309,null],[3,"OutputFilenames","","",null,null],[12,"out_directory","","",310,null],[12,"out_filestem","","",310,null],[12,"single_output_file","","",310,null],[12,"extra","","",310,null],[12,"outputs","","",310,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",311,null],[12,"linker","","",311,null],[12,"link_arg","","",311,null],[12,"link_args","","",311,null],[12,"link_dead_code","","",311,null],[12,"lto","","",311,null],[12,"target_cpu","","",311,null],[12,"target_feature","","",311,null],[12,"passes","","",311,null],[12,"llvm_args","","",311,null],[12,"save_temps","","",311,null],[12,"rpath","","",311,null],[12,"overflow_checks","","",311,null],[12,"no_prepopulate_passes","","",311,null],[12,"no_vectorize_loops","","",311,null],[12,"no_vectorize_slp","","",311,null],[12,"soft_float","","",311,null],[12,"prefer_dynamic","","",311,null],[12,"no_integrated_as","","",311,null],[12,"no_redzone","","",311,null],[12,"relocation_model","","",311,null],[12,"code_model","","",311,null],[12,"metadata","","",311,null],[12,"extra_filename","","",311,null],[12,"codegen_units","","",311,null],[12,"remark","","",311,null],[12,"no_stack_check","","",311,null],[12,"debuginfo","","",311,null],[12,"opt_level","","",311,null],[12,"debug_assertions","","",311,null],[12,"inline_threshold","","",311,null],[12,"panic","","",311,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",312,null],[12,"time_passes","","",312,null],[12,"count_llvm_insns","","",312,null],[12,"time_llvm_passes","","",312,null],[12,"input_stats","","",312,null],[12,"trans_stats","","",312,null],[12,"asm_comments","","",312,null],[12,"no_verify","","",312,null],[12,"borrowck_stats","","",312,null],[12,"no_landing_pads","","",312,null],[12,"debug_llvm","","",312,null],[12,"meta_stats","","",312,null],[12,"print_link_args","","",312,null],[12,"print_llvm_passes","","",312,null],[12,"ast_json","","",312,null],[12,"ast_json_noexpand","","",312,null],[12,"ls","","",312,null],[12,"save_analysis","","",312,null],[12,"save_analysis_csv","","",312,null],[12,"save_analysis_api","","",312,null],[12,"print_move_fragments","","",312,null],[12,"flowgraph_print_loans","","",312,null],[12,"flowgraph_print_moves","","",312,null],[12,"flowgraph_print_assigns","","",312,null],[12,"flowgraph_print_all","","",312,null],[12,"print_region_graph","","",312,null],[12,"parse_only","","",312,null],[12,"no_trans","","",312,null],[12,"treat_err_as_bug","","",312,null],[12,"continue_parse_after_error","","",312,null],[12,"incremental","","",312,null],[12,"incremental_cc","","",312,null],[12,"incremental_info","","",312,null],[12,"incremental_dump_hash","","",312,null],[12,"dump_dep_graph","","",312,null],[12,"query_dep_graph","","",312,null],[12,"no_analysis","","",312,null],[12,"extra_plugins","","",312,null],[12,"unstable_options","","",312,null],[12,"force_overflow_checks","","",312,null],[12,"trace_macros","","",312,null],[12,"debug_macros","","",312,null],[12,"enable_nonzeroing_move_hints","","",312,null],[12,"keep_hygiene_data","","",312,null],[12,"keep_ast","","",312,null],[12,"show_span","","",312,null],[12,"print_type_sizes","","",312,null],[12,"print_trans_items","","",312,null],[12,"mir_opt_level","","",312,null],[12,"dump_mir","","",312,null],[12,"dump_mir_dir","","",312,null],[12,"perf_stats","","",312,null],[12,"hir_stats","","",312,null],[12,"mir_stats","","",312,null],[12,"always_encode_mir","","",312,null],[12,"osx_rpath_install_name","","",312,null],[12,"sanitizer","","",312,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",313,null],[12,"stability","","",313,null],[4,"Sanitizer","","",null,null],[13,"Address","","",314,null],[13,"Leak","","",314,null],[13,"Memory","","",314,null],[13,"Thread","","",314,null],[4,"OptLevel","","",null,null],[13,"No","","",315,null],[13,"Less","","",315,null],[13,"Default","","",315,null],[13,"Aggressive","","",315,null],[13,"Size","","",315,null],[13,"SizeMin","","",315,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",316,null],[13,"LimitedDebugInfo","","",316,null],[13,"FullDebugInfo","","",316,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",317,null],[13,"Assembly","","",317,null],[13,"LlvmAssembly","","",317,null],[13,"Metadata","","",317,null],[13,"Object","","",317,null],[13,"Exe","","",317,null],[13,"DepInfo","","",317,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",318,null],[13,"Json","","",318,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",319,null],[13,"Sysroot","","",319,null],[13,"CrateName","","",319,null],[13,"Cfg","","",319,null],[13,"TargetList","","",319,null],[13,"TargetCPUs","","",319,null],[13,"TargetFeatures","","",319,null],[13,"RelocationModels","","",319,null],[13,"CodeModels","","",319,null],[13,"TargetSpec","","",319,null],[4,"Input","","",null,null],[13,"File","","Load source from file",320,null],[13,"Str","","",320,null],[12,"name","rustc::session::config::Input","String that is shown in place of a filename",320,null],[12,"input","","Anonymous source string",320,null],[4,"EntryFnType","rustc::session::config","",null,null],[13,"EntryMain","","",321,null],[13,"EntryStart","","",321,null],[13,"EntryNone","","",321,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",322,null],[13,"CrateTypeDylib","","",322,null],[13,"CrateTypeRlib","","",322,null],[13,"CrateTypeStaticlib","","",322,null],[13,"CrateTypeCdylib","","",322,null],[13,"CrateTypeProcMacro","","",322,null],[4,"Passes","","",null,null],[13,"SomePasses","","",323,null],[13,"AllPasses","","",323,null],[4,"OptionStability","","",null,null],[13,"Stable","","",324,null],[13,"UnstableButNotReally","","",324,null],[13,"Unstable","","",324,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"crateconfig"}}],[5,"build_configuration","","",null,{"inputs":[{"name":"session"},{"name":"crateconfig"}],"output":{"name":"crateconfig"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"crateconfig"}}],[5,"build_session_options_and_crate_config","","",null,null],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[6,"CodegenSetter","rustc::session::config","",null,null],[6,"DebuggingSetter","","",null,null],[17,"NUMBERED_CODEGEN_UNIT_MARKER","","Codegen unit names generated by the numbered naming scheme will contain this marker right before the index of the codegen unit.",null,null],[17,"CG_OPTIONS","","",null,null],[17,"DB_OPTIONS","","",null,null],[11,"clone","","",314,{"inputs":[{"name":"self"}],"output":{"name":"sanitizer"}}],[11,"hash","","",314,null],[11,"clone","","",315,{"inputs":[{"name":"self"}],"output":{"name":"optlevel"}}],[11,"eq","","",315,{"inputs":[{"name":"self"},{"name":"optlevel"}],"output":{"name":"bool"}}],[11,"hash","","",315,null],[11,"clone","","",316,{"inputs":[{"name":"self"}],"output":{"name":"debuginfolevel"}}],[11,"eq","","",316,{"inputs":[{"name":"self"},{"name":"debuginfolevel"}],"output":{"name":"bool"}}],[11,"hash","","",316,null],[11,"clone","","",317,{"inputs":[{"name":"self"}],"output":{"name":"outputtype"}}],[11,"eq","","",317,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"hash","","",317,null],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",317,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"cmp","","",317,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"ordering"}}],[11,"encode","","",317,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",317,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"extension","","",317,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",318,{"inputs":[{"name":"self"}],"output":{"name":"erroroutputtype"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",318,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"ne","","",318,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"default","","",318,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"clone","","",325,{"inputs":[{"name":"self"}],"output":{"name":"outputtypes"}}],[11,"hash","","",325,null],[11,"new","","",325,null],[11,"get","","",325,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"contains_key","","",325,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"keys","","",325,{"inputs":[{"name":"self"}],"output":{"name":"btreemapkeysiter"}}],[11,"values","","",325,{"inputs":[{"name":"self"}],"output":{"name":"btreemapvaluesiter"}}],[11,"should_trans","","",325,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",326,{"inputs":[{"name":"self"}],"output":{"name":"externs"}}],[11,"hash","","",326,null],[11,"new","","",326,{"inputs":[{"name":"btreemap"}],"output":{"name":"externs"}}],[11,"get","","",326,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",326,{"inputs":[{"name":"self"}],"output":{"name":"btreemapiter"}}],[11,"clone","","",309,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"dep_tracking_hash","","",309,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",319,{"inputs":[{"name":"self"}],"output":{"name":"printrequest"}}],[11,"eq","","",319,{"inputs":[{"name":"self"},{"name":"printrequest"}],"output":{"name":"bool"}}],[11,"filestem","","",320,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",310,{"inputs":[{"name":"self"}],"output":{"name":"outputfilenames"}}],[11,"path","","",310,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"pathbuf"}}],[11,"temp_path","","Get the path where a compilation artifact of the given type for the given codegen unit should be placed on disk. If codegen_unit_name is None, a path distinct from those of any codegen unit will be generated.",310,{"inputs":[{"name":"self"},{"name":"outputtype"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"temp_path_ext","","Like temp_path, but also supports things where there is no corresponding OutputType, like no-opt-bitcode or lto-bitcode.",310,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","",310,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"filestem","","",310,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"single_codegen_unit","","",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",321,{"inputs":[{"name":"self"}],"output":{"name":"entryfntype"}}],[11,"eq","","",321,{"inputs":[{"name":"self"},{"name":"entryfntype"}],"output":{"name":"bool"}}],[11,"eq","","",322,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",322,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"option"}}],[11,"clone","","",322,{"inputs":[{"name":"self"}],"output":{"name":"cratetype"}}],[11,"cmp","","",322,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"ordering"}}],[11,"hash","","",322,null],[11,"fmt","","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",323,{"inputs":[{"name":"self"}],"output":{"name":"passes"}}],[11,"hash","","",323,null],[11,"is_empty","","",323,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",311,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptions"}}],[11,"clone","","",312,{"inputs":[{"name":"self"}],"output":{"name":"debuggingoptions"}}],[11,"clone","","",324,{"inputs":[{"name":"self"}],"output":{"name":"optionstability"}}],[11,"eq","","",324,{"inputs":[{"name":"self"},{"name":"optionstability"}],"output":{"name":"bool"}}],[11,"fmt","","",324,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",313,{"inputs":[{"name":"self"}],"output":{"name":"rustcoptgroup"}}],[11,"eq","","",313,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"is_stable","","",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stable","","",313,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",313,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"fmt","","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"filesearch","rustc::session","",null,null],[3,"FileSearch","rustc::session::filesearch","",null,null],[12,"sysroot","","",327,null],[12,"search_paths","","",327,null],[12,"triple","","",327,null],[12,"kind","","",327,null],[4,"FileMatch","","",null,null],[13,"FileMatches","","",328,null],[13,"FileDoesntMatch","","",328,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"clone","","",328,{"inputs":[{"name":"self"}],"output":{"name":"filematch"}}],[11,"for_each_lib_search_path","","",327,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"get_lib_path","","",327,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"search","","",327,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"new","","",327,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",327,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tools_search_paths","","",327,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"search_paths","rustc::session","",null,null],[3,"SearchPaths","rustc::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",329,null],[13,"Crate","","",329,null],[13,"Dependency","","",329,null],[13,"Framework","","",329,null],[13,"ExternFlag","","",329,null],[13,"All","","",329,null],[11,"clone","","",330,{"inputs":[{"name":"self"}],"output":{"name":"searchpaths"}}],[11,"fmt","","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",329,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"bool"}}],[11,"clone","","",329,{"inputs":[{"name":"self"}],"output":{"name":"pathkind"}}],[11,"fmt","","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",329,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"option"}}],[11,"cmp","","",329,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"ordering"}}],[11,"hash","","",329,null],[11,"new","","",330,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",330,{"inputs":[{"name":"self"},{"name":"str"},{"name":"erroroutputtype"}],"output":null}],[11,"iter","","",330,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"iter"}}],[11,"next","","",331,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"CompileResult","rustc::session","",null,null],[11,"local_crate_disambiguator","","",302,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"struct_span_warn","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",302,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",302,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",302,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",302,null],[11,"span_fatal_with_code","","",302,null],[11,"fatal","","",302,null],[11,"span_err_or_warn","","",302,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_err","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_err_with_code","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"err","","",302,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"err_count","","",302,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",302,{"inputs":[{"name":"self"}],"output":null}],[11,"track_errors","","",302,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"span_warn","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_warn_with_code","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"warn","","",302,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"opt_span_warn","","",302,{"inputs":[{"name":"self"},{"name":"option"},{"name":"str"}],"output":null}],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"note_without_error","","",302,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"span_note_without_error","","",302,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",302,null],[11,"unimpl","","",302,null],[11,"add_lint","","",302,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"s"},{"name":"string"}],"output":null}],[11,"add_lint_diagnostic","","",302,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"nodeid"},{"name":"m"}],"output":null}],[11,"reserve_node_ids","","",302,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"next_node_id","","",302,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"diagnostic","","",302,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"diag_span_note_once","","Analogous to calling `.span_note` on the given DiagnosticBuilder, but deduplicates on lint ID, span, and message for this `Session` if we're not outputting in JSON mode.",302,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"lint"},{"name":"span"},{"name":"str"}],"output":null}],[11,"codemap","","",302,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"verbose","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_passes","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"count_llvm_insns","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_llvm_passes","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trans_stats","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta_stats","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"asm_comments","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"no_verify","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrowck_stats","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_llvm_passes","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lto","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","Returns the panic strategy for this compile session. If the user explicitly selected one using '-C panic', use that, otherwise use the panic strategy defined by the target.",302,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"no_landing_pads","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unstable_options","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"nonzeroing_move_hints","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"overflow_checks","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"must_not_eliminate_frame_pointers","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate_plugin_registrar_symbol","","Returns the symbol name for the registrar function, given the crate Svh and the function DefIndex.",302,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"generate_derive_registrar_symbol","","",302,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"sysroot","","",302,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"target_filesearch","","",302,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"host_filesearch","","",302,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"init_incr_comp_session","","",302,{"inputs":[{"name":"self"},{"name":"pathbuf"},{"name":"lock"}],"output":null}],[11,"finalize_incr_comp_session","","",302,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":null}],[11,"mark_incr_comp_session_as_invalid","","",302,{"inputs":[{"name":"self"}],"output":null}],[11,"incr_comp_session_dir","","",302,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"incr_comp_session_dir_opt","","",302,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_perf_stats","","",302,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"traits","rustc","Trait Resolution. See README.md for an overview of how this works.",null,null],[3,"TraitErrorKey","rustc::traits","",null,null],[3,"FulfillmentContext","","The fulfillment context is used to drive trait resolution.  It consists of a list of obligations that must be (eventually) satisfied. The job is to track which are satisfied, which yielded errors, and which are still pending. At any point, users can call `select_where_possible`, and the fulfilment context will try to do selection, retaining only those obligations that remain ambiguous. This may be helpful in pushing type inference along. Once all type inference constraints have been generated, the method `select_all_or_error` can be used to report any remaining ambiguous cases as errors.",null,null],[3,"GlobalFulfilledPredicates","","",null,null],[3,"RegionObligation","","",null,null],[12,"sub_region","","",332,null],[12,"sup_type","","",332,null],[12,"cause","","",332,null],[3,"MismatchedProjectionTypes","","",null,null],[12,"err","","",333,null],[3,"Normalized","","",null,null],[12,"value","","",334,null],[12,"obligations","","",334,null],[3,"ProjectionCache","","",null,null],[3,"ProjectionCacheSnapshot","","",null,null],[3,"EvaluationCache","","",null,null],[3,"SelectionContext","","",null,null],[3,"SelectionCache","","",null,null],[3,"OverlapError","","Information pertinent to an overlapping impl error.",null,null],[12,"with_impl","","",335,null],[12,"trait_desc","","",335,null],[12,"self_desc","","",335,null],[3,"SpecializesCache","","",null,null],[3,"SupertraitDefIds","","",null,null],[3,"Obligation","","An `Obligation` represents some trait reference (e.g. `int:Eq`) for which the vtable must be found.  The process of finding a vtable is called \"resolving\" the `Obligation`. This process consists of either identifying an `impl` (e.g., `impl Eq for int`) that provides the required vtable, or else finding a bound that is in scope. The eventual result is usually a `Selection` (defined below).",null,null],[12,"cause","","",336,null],[12,"recursion_depth","","",336,null],[12,"predicate","","",336,null],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting.",null,null],[12,"span","","",337,null],[12,"body_id","","",337,null],[12,"code","","",337,null],[3,"DerivedObligationCause","","",null,null],[3,"FulfillmentError","","",null,null],[12,"obligation","","",338,null],[12,"code","","",338,null],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of substitutions from the impl's type/lifetime parameters. The `nested` vector corresponds to the nested obligations attached to the impl's type parameters.",null,null],[12,"impl_def_id","","",339,null],[12,"substs","","",339,null],[12,"nested","","",339,null],[3,"VtableClosureData","","",null,null],[12,"closure_def_id","","",340,null],[12,"substs","","",340,null],[12,"nested","","Nested obligations. This can be non-empty if the closure signature contains associated types.",340,null],[3,"VtableDefaultImplData","","",null,null],[12,"trait_def_id","","",341,null],[12,"nested","","",341,null],[3,"VtableBuiltinData","","",null,null],[12,"nested","","",342,null],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived for the object type `Foo`.",null,null],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",343,null],[12,"vtable_base","","The vtable is formed by concatenating together the method lists of the base object trait and all supertraits; this is the start of `upcast_trait_ref`'s methods in that vtable.",343,null],[12,"nested","","",343,null],[3,"VtableFnPointerData","","",null,null],[12,"fn_ty","","",344,null],[12,"nested","","",344,null],[4,"OrphanCheckErr","","",null,null],[13,"NoLocalInputType","","",345,null],[13,"UncoveredTy","","",345,null],[4,"Reveal","","Depending on the stage of compilation, we want projection to be more or less conservative.",null,null],[13,"UserFacing","","At type-checking time, we refuse to project any associated type that is marked `default`. Non-`default` (\"final\") types are always projected. This is necessary in general for soundness of specialization. However, we *could* allow projections in fully-monomorphic cases. We choose not to, because we prefer for `default type` to force the type definition to be treated abstractly by any consumers of the impl. Concretely, that means that the following example will fail to compile:",346,null],[13,"All","","At trans time, all monomorphic projections will succeed. Also, `impl Trait` is normalized to the concrete type, which has to be already collected by type-checking.",346,null],[4,"ObjectSafetyViolation","","",null,null],[13,"SizedSelf","","Self : Sized declared on the trait",347,null],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location (e.g. `trait Foo : Bar<Self>`)",347,null],[13,"Method","","Method has something illegal",347,null],[4,"MethodViolationCode","","Reasons a method might not be object-safe.",null,null],[13,"StaticMethod","","e.g., `fn foo()`",348,null],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",348,null],[13,"Generic","","e.g., `fn foo<A>()`",348,null],[4,"MethodMatchResult","","",null,null],[13,"MethodMatched","","",349,null],[13,"MethodAmbiguous","","",349,null],[13,"MethodDidNotMatch","","",349,null],[4,"MethodMatchedData","","",null,null],[13,"PreciseMethodMatch","","",350,null],[13,"CoerciveMethodMatch","","",350,null],[4,"ObligationCauseCode","","",null,null],[13,"MiscObligation","","Not well classified or should be obvious from span.",351,null],[13,"SliceOrArrayElem","","A slice or array is WF only if `T: Sized`",351,null],[13,"TupleElem","","A tuple is WF only if its middle elements are Sized",351,null],[13,"ProjectionWf","","This is the trait reference from the given projection",351,null],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must also implement all supertraits of X.",351,null],[13,"ReferenceOutlivesReferent","","A type like `&'a T` is WF only if `T: 'a`.",351,null],[13,"ObjectTypeBound","","A type like `Box<Foo<'a> + 'b>` is WF only if `'b: 'a`.",351,null],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",351,null],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",351,null],[13,"StructInitializerSized","","",351,null],[13,"VariableType","","",351,null],[13,"ReturnType","","",351,null],[13,"RepeatVec","","",351,null],[13,"FieldSized","","",351,null],[13,"ConstSized","","",351,null],[13,"SharedStatic","","",351,null],[13,"BuiltinDerivedObligation","","",351,null],[13,"ImplDerivedObligation","","",351,null],[13,"CompareImplMethodObligation","","",351,null],[12,"item_name","rustc::traits::ObligationCauseCode","",351,null],[12,"impl_item_def_id","","",351,null],[12,"trait_item_def_id","","",351,null],[12,"lint_id","","",351,null],[13,"ExprAssignable","rustc::traits","",351,null],[13,"MatchExpressionArm","","",351,null],[12,"arm_span","rustc::traits::ObligationCauseCode","",351,null],[12,"source","","",351,null],[13,"IfExpression","rustc::traits","",351,null],[13,"IfExpressionWithNoElse","","",351,null],[13,"EquatePredicate","","",351,null],[13,"MainFunctionType","","",351,null],[13,"StartFunctionType","","",351,null],[13,"IntrinsicType","","",351,null],[13,"MethodReceiver","","",351,null],[4,"SelectionError","","",null,null],[13,"Unimplemented","","",352,null],[13,"OutputTypeParameterMismatch","","",352,null],[13,"TraitNotObjectSafe","","",352,null],[4,"FulfillmentErrorCode","","",null,null],[13,"CodeSelectionError","","",353,null],[13,"CodeProjectionError","","",353,null],[13,"CodeAmbiguity","","",353,null],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable` indicates where the vtable comes from. Note that while we call this a \"vtable\", it does not necessarily indicate dynamic dispatch at runtime. `Vtable` instances just tell the compiler where to find methods, but in generic code those methods are typically statically dispatched -- only when an object is constructed is a `Vtable` instance reified into an actual vtable.",null,null],[13,"VtableImpl","","Vtable identifying a particular impl.",354,null],[13,"VtableDefaultImpl","","Vtable for default trait implementations This carries the information and nested obligations with regards to a default implementation for a trait `Trait`. The nested obligations ensure the trait implementation holds for all the constituent types.",354,null],[13,"VtableParam","","Successful resolution to an obligation provided by the caller for some type parameter. The `Vec<N>` represents the obligations incurred from normalizing the where-clause (if any).",354,null],[13,"VtableObject","","Virtual calls through an object",354,null],[13,"VtableBuiltin","","Successful resolution for a builtin trait.",354,null],[13,"VtableClosure","","Vtable automatically generated for a closure. The def ID is the ID of the closure expression. This is a `VtableImpl` in spirit, but the impl is generated by the compiler and does not appear in the source.",354,null],[13,"VtableFnPointer","","Same as above, but for a fn pointer type with the given signature.",354,null],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the def-id of a trait impl. To pass, either the trait must be local, or else two conditions must be satisfied:",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"result"}}],[5,"overlapping_impls","","If there are types that satisfy both impls, returns a suitably-freshened `ImplHeader` with those types substituted",null,{"inputs":[{"name":"inferctxt"},{"name":"defid"},{"name":"defid"}],"output":{"name":"option"}}],[5,"normalize","","Normalizes any associated type projections in `value`, replacing them with a fully resolved type where possible. The return value combines the normalized result and any additional obligations that were incurred as result.",null,{"inputs":[{"name":"selectioncontext"},{"name":"obligationcause"},{"name":"t"}],"output":{"name":"normalized"}}],[5,"normalize_projection_type","","The guts of `normalize`: normalize a specific projection like `<T as Trait>::Item`. The result is always a type (and possibly additional obligations). If ambiguity arises, which implies that there are unresolved type variables in the projection, we will substitute a fresh type variable `$X` and generate a new obligation `<T as Trait>::Item == $X` for later.",null,{"inputs":[{"name":"selectioncontext"},{"name":"projectionty"},{"name":"obligationcause"},{"name":"usize"}],"output":{"name":"normalized"}}],[5,"specializes","","Is impl1 a specialization of impl2?",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[5,"translate_substs","","Given a subst for the requested impl, translate it to a subst appropriate for the actual item definition (whether it be in that impl, a parent impl, or the trait). When we have selected one impl, but are actually using item definitions from a parent impl providing a default, we need a way to translate between the type parameters of the two impls. Here the `source_impl` is the one we've selected, and `source_substs` is a substitution of its generics. And `target_node` is the impl/trait we're actually going to get the definition from. The resulting substitution will map from `target_node`'s generics to `source_impl`'s generics as instantiated by `source_subst`.",null,{"inputs":[{"name":"inferctxt"},{"name":"defid"},{"name":"substs"},{"name":"node"}],"output":{"name":"substs"}}],[5,"find_method","","Given a selected impl described by `impl_data`, returns the definition and substitions for the method with the name `name`, and trait method substitutions `substs`, in that impl, a less specialized impl, or the trait default, whichever applies.",null,null],[5,"elaborate_predicates","","",null,{"inputs":[{"name":"tyctxt"},{"name":"vec"}],"output":{"name":"elaborator"}}],[5,"supertraits","","",null,{"inputs":[{"name":"tyctxt"},{"name":"polytraitref"}],"output":{"name":"supertraits"}}],[5,"supertrait_def_ids","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"supertraitdefids"}}],[5,"transitive_bounds","","",null,null],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds.",null,{"inputs":[{"name":"obligationcause"},{"name":"instantiatedpredicates"}],"output":{"name":"predicateobligations"}}],[5,"type_known_to_meet_bound","","Determines whether the type `ty` is known to meet `bound` and returns true if so. Returns false if `ty` either does not meet `bound` or is not known to meet bound (note that this is conservative towards *no impl*, which is the opposite of the `evaluate` methods).",null,{"inputs":[{"name":"inferctxt"},{"name":"ty"},{"name":"defid"},{"name":"span"}],"output":{"name":"bool"}}],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur.",null,{"inputs":[{"name":"tyctxt"},{"name":"parameterenvironment"},{"name":"obligationcause"}],"output":{"name":"parameterenvironment"}}],[5,"fully_normalize","","",null,{"inputs":[{"name":"inferctxt"},{"name":"obligationcause"},{"name":"t"}],"output":{"name":"result"}}],[5,"normalize_and_test_predicates","","Normalizes the predicates and checks whether they hold.  If this returns false, then either normalize encountered an error or one of the predicates did not hold. Used when creating vtables to check for unsatisfiable methods.",null,{"inputs":[{"name":"tyctxt"},{"name":"vec"}],"output":{"name":"bool"}}],[5,"get_vtable_methods","","Given a trait `trait_ref`, iterates the vtable entries that come from `trait_ref`, including its supertraits.",null,null],[0,"specialization_graph","","",null,null],[3,"Graph","rustc::traits::specialization_graph","A per-trait graph of impls in specialization order. At the moment, this graph forms a tree rooted with the trait itself, with all other nodes representing impls, and parent-child relationships representing specializations.",null,null],[3,"Ancestors","","",null,null],[3,"NodeItem","","",null,null],[12,"node","","",355,null],[12,"item","","",355,null],[4,"Node","","A node in the specialization graph is either an impl or a trait definition; either can serve as a source of item definitions. There is always exactly one trait definition node: the root.",null,null],[13,"Impl","","",356,null],[13,"Trait","","",356,null],[5,"ancestors","","Walk up the specialization ancestors of a given impl, starting with that impl itself.",null,{"inputs":[{"name":"traitdef"},{"name":"defid"}],"output":{"name":"ancestors"}}],[11,"fmt","rustc::traits","",357,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",357,{"inputs":[{"name":"self"},{"name":"traiterrorkey"}],"output":{"name":"bool"}}],[11,"ne","","",357,{"inputs":[{"name":"self"},{"name":"traiterrorkey"}],"output":{"name":"bool"}}],[11,"hash","","",357,null],[11,"report_fulfillment_errors","rustc::infer","",143,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"report_overflow_error","","Reports that an overflow has occurred and halts compilation. We halt compilation unconditionally because it is important that overflows never be masked -- they basically represent computations whose result could not be truly determined and thus we can't say if the program type checks or not -- and they are unusual occurrences in any case.",143,null],[11,"report_overflow_error_cycle","","Reports that a cycle was detected which led to overflow and halts compilation. This is equivalent to `report_overflow_error` except that we can give a more helpful error message (and, in particular, we do not suggest increasing the overflow limit, which is not going to help).",143,null],[11,"report_extra_impl_obligation","","",143,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"defid"},{"name":"defid"},{"name":"display"},{"name":"option"}],"output":{"name":"diagnosticbuilder"}}],[11,"report_selection_error","","",143,{"inputs":[{"name":"self"},{"name":"predicateobligation"},{"name":"selectionerror"}],"output":null}],[11,"clone","rustc::traits","",332,{"inputs":[{"name":"self"}],"output":{"name":"regionobligation"}}],[11,"new","","Creates a new fulfillment context.",358,{"inputs":[],"output":{"name":"fulfillmentcontext"}}],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by creating a fresh type variable `$0` as well as a projection predicate `<SomeType as SomeTrait>::X == $0`. When the inference engine runs, it will attempt to find an impl of `SomeTrait` or a where clause that lets us unify `$0` with something concrete. If this fails, we'll unify `$0` with `projection_ty` again.",358,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"projectionty"},{"name":"obligationcause"}],"output":{"name":"ty"}}],[11,"register_bound","","",358,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"ty"},{"name":"defid"},{"name":"obligationcause"}],"output":null}],[11,"register_region_obligation","","",358,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"region"},{"name":"obligationcause"}],"output":null}],[11,"register_predicate_obligation","","",358,{"inputs":[{"name":"self"},{"name":"inferctxt"},{"name":"predicateobligation"}],"output":null}],[11,"region_obligations","","",358,null],[11,"select_all_or_error","","",358,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"select_where_possible","","",358,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"pending_obligations","","",358,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","",359,{"inputs":[{"name":"depgraph"}],"output":{"name":"globalfulfilledpredicates"}}],[11,"check_duplicate","","",359,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"check_duplicate_trait","","",359,{"inputs":[{"name":"self"},{"name":"polytraitpredicate"}],"output":{"name":"bool"}}],[11,"fmt","","",346,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",346,{"inputs":[{"name":"self"}],"output":{"name":"reveal"}}],[11,"eq","","",346,{"inputs":[{"name":"self"},{"name":"reveal"}],"output":{"name":"bool"}}],[11,"clone","","",333,{"inputs":[{"name":"self"}],"output":{"name":"mismatchedprojectiontypes"}}],[11,"clone","","",334,{"inputs":[{"name":"self"}],"output":{"name":"normalized"}}],[11,"with","","",334,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"normalized"}}],[11,"new","","",360,{"inputs":[],"output":{"name":"self"}}],[11,"snapshot","","",360,{"inputs":[{"name":"self"}],"output":{"name":"projectioncachesnapshot"}}],[11,"rollback_to","","",360,{"inputs":[{"name":"self"},{"name":"projectioncachesnapshot"}],"output":null}],[11,"rollback_skolemized","","",360,{"inputs":[{"name":"self"},{"name":"projectioncachesnapshot"}],"output":null}],[11,"commit","","",360,{"inputs":[{"name":"self"},{"name":"projectioncachesnapshot"}],"output":null}],[11,"clone","","",347,{"inputs":[{"name":"self"}],"output":{"name":"objectsafetyviolation"}}],[11,"fmt","","",347,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",347,{"inputs":[{"name":"self"},{"name":"objectsafetyviolation"}],"output":{"name":"bool"}}],[11,"ne","","",347,{"inputs":[{"name":"self"},{"name":"objectsafetyviolation"}],"output":{"name":"bool"}}],[11,"hash","","",347,null],[11,"error_msg","","",347,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone","","",348,{"inputs":[{"name":"self"}],"output":{"name":"methodviolationcode"}}],[11,"fmt","","",348,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",348,{"inputs":[{"name":"self"},{"name":"methodviolationcode"}],"output":{"name":"bool"}}],[11,"hash","","",348,null],[11,"clone","","",361,{"inputs":[{"name":"self"}],"output":{"name":"selectioncache"}}],[11,"clone","","",350,{"inputs":[{"name":"self"}],"output":{"name":"methodmatcheddata"}}],[11,"fmt","","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",362,{"inputs":[{"name":"self"}],"output":{"name":"evaluationcache"}}],[11,"new","","",363,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"intercrate","","",363,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"infcx","","",363,{"inputs":[{"name":"self"}],"output":{"name":"inferctxt"}}],[11,"tcx","","",363,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"param_env","","",363,{"inputs":[{"name":"self"}],"output":{"name":"parameterenvironment"}}],[11,"closure_typer","","",363,{"inputs":[{"name":"self"}],"output":{"name":"inferctxt"}}],[11,"projection_mode","","",363,{"inputs":[{"name":"self"}],"output":{"name":"reveal"}}],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding type environment by performing unification.",363,{"inputs":[{"name":"self"},{"name":"traitobligation"}],"output":{"name":"selectionresult"}}],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",363,{"inputs":[{"name":"self"},{"name":"predicateobligation"}],"output":{"name":"bool"}}],[11,"evaluate_obligation_conservatively","","Evaluates whether the obligation `obligation` can be satisfied, and returns `false` if not certain. However, this is not entirely accurate if inference variables are involved.",363,{"inputs":[{"name":"self"},{"name":"predicateobligation"}],"output":{"name":"bool"}}],[11,"new","","",361,{"inputs":[],"output":{"name":"selectioncache"}}],[11,"new","","",362,{"inputs":[],"output":{"name":"evaluationcache"}}],[11,"may_apply","","",349,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","rustc::traits::specialization_graph","",364,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl conflicts with it (has overlap, but neither specializes the other), information about the area of overlap is returned in the `Err`.",364,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"result"}}],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",364,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"},{"name":"defid"}],"output":null}],[11,"parent","","The parent of a given impl, which is the def id of the trait when the impl is a \"specialization root\".",364,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defid"}}],[11,"fmt","","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",356,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"is_from_trait","","",356,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",356,null],[11,"def_id","","",356,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"next","","",365,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","",355,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"nodeitem"}}],[11,"defs","","Search the items from the given ancestors, returning each definition with the given name and the given kind.",365,null],[11,"new","rustc::traits","",366,{"inputs":[],"output":{"name":"self"}}],[11,"check","","",366,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"defid"}],"output":{"name":"option"}}],[11,"insert","","",366,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"defid"},{"name":"bool"}],"output":null}],[11,"fmt","","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",336,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",339,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",340,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",342,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",341,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",343,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",344,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",353,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",333,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lift_to_tcx","","",352,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",351,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",367,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",337,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",354,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"super_fold_with","","",336,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",336,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",339,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",339,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",340,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",340,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",341,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",341,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",342,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",342,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",343,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",343,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",344,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",344,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",354,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",354,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",334,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",334,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",351,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",351,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",367,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",367,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",337,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",337,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"next","","",368,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Supertraits","","",null,null],[6,"PredicateObligation","","",null,null],[6,"TraitObligation","","",null,null],[6,"Obligations","","",null,null],[6,"PredicateObligations","","",null,null],[6,"TraitObligations","","",null,null],[6,"Selection","","",null,null],[6,"SelectionResult","","When performing resolution, it is typically the case that there can be one of three outcomes:",null,null],[11,"clone","","",336,{"inputs":[{"name":"self"}],"output":{"name":"obligation"}}],[11,"eq","","",336,{"inputs":[{"name":"self"},{"name":"obligation"}],"output":{"name":"bool"}}],[11,"ne","","",336,{"inputs":[{"name":"self"},{"name":"obligation"}],"output":{"name":"bool"}}],[11,"clone","","",337,{"inputs":[{"name":"self"}],"output":{"name":"obligationcause"}}],[11,"fmt","","",337,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",337,{"inputs":[{"name":"self"},{"name":"obligationcause"}],"output":{"name":"bool"}}],[11,"ne","","",337,{"inputs":[{"name":"self"},{"name":"obligationcause"}],"output":{"name":"bool"}}],[11,"clone","","",351,{"inputs":[{"name":"self"}],"output":{"name":"obligationcausecode"}}],[11,"fmt","","",351,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",351,{"inputs":[{"name":"self"},{"name":"obligationcausecode"}],"output":{"name":"bool"}}],[11,"ne","","",351,{"inputs":[{"name":"self"},{"name":"obligationcausecode"}],"output":{"name":"bool"}}],[11,"clone","","",367,{"inputs":[{"name":"self"}],"output":{"name":"derivedobligationcause"}}],[11,"fmt","","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",367,{"inputs":[{"name":"self"},{"name":"derivedobligationcause"}],"output":{"name":"bool"}}],[11,"ne","","",367,{"inputs":[{"name":"self"},{"name":"derivedobligationcause"}],"output":{"name":"bool"}}],[11,"clone","","",352,{"inputs":[{"name":"self"}],"output":{"name":"selectionerror"}}],[11,"fmt","","",352,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",353,{"inputs":[{"name":"self"}],"output":{"name":"fulfillmenterrorcode"}}],[11,"clone","","",354,{"inputs":[{"name":"self"}],"output":{"name":"vtable"}}],[11,"clone","","",339,{"inputs":[{"name":"self"}],"output":{"name":"vtableimpldata"}}],[11,"eq","","",339,{"inputs":[{"name":"self"},{"name":"vtableimpldata"}],"output":{"name":"bool"}}],[11,"ne","","",339,{"inputs":[{"name":"self"},{"name":"vtableimpldata"}],"output":{"name":"bool"}}],[11,"clone","","",340,{"inputs":[{"name":"self"}],"output":{"name":"vtableclosuredata"}}],[11,"eq","","",340,{"inputs":[{"name":"self"},{"name":"vtableclosuredata"}],"output":{"name":"bool"}}],[11,"ne","","",340,{"inputs":[{"name":"self"},{"name":"vtableclosuredata"}],"output":{"name":"bool"}}],[11,"clone","","",341,{"inputs":[{"name":"self"}],"output":{"name":"vtabledefaultimpldata"}}],[11,"clone","","",342,{"inputs":[{"name":"self"}],"output":{"name":"vtablebuiltindata"}}],[11,"eq","","",343,{"inputs":[{"name":"self"},{"name":"vtableobjectdata"}],"output":{"name":"bool"}}],[11,"ne","","",343,{"inputs":[{"name":"self"},{"name":"vtableobjectdata"}],"output":{"name":"bool"}}],[11,"clone","","",343,{"inputs":[{"name":"self"}],"output":{"name":"vtableobjectdata"}}],[11,"clone","","",344,{"inputs":[{"name":"self"}],"output":{"name":"vtablefnpointerdata"}}],[11,"eq","","",344,{"inputs":[{"name":"self"},{"name":"vtablefnpointerdata"}],"output":{"name":"bool"}}],[11,"ne","","",344,{"inputs":[{"name":"self"},{"name":"vtablefnpointerdata"}],"output":{"name":"bool"}}],[11,"new","","",336,{"inputs":[{"name":"obligationcause"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"misc","","",336,{"inputs":[{"name":"span"},{"name":"nodeid"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"with","","",336,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"obligation"}}],[11,"new","","",337,{"inputs":[{"name":"span"},{"name":"nodeid"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",337,{"inputs":[{"name":"span"},{"name":"nodeid"}],"output":{"name":"obligationcause"}}],[11,"dummy","","",337,{"inputs":[],"output":{"name":"obligationcause"}}],[11,"nested_obligations","","",354,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"map","","",354,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vtable"}}],[0,"ty","rustc","",null,null],[3,"Binder","rustc::ty","Binder is a binder for higher-ranked lifetimes. It is part of the compiler's representation for things like `for<'a> Fn(&'a isize)` (which would be represented by the type `PolyTraitRef == Binder<TraitRef>`). Note that when we skolemize, instantiate, erase, or otherwise \"discharge\" these bound regions, we change the type from `Binder<T>` to just `T` (see e.g. `liberate_late_bound_regions`).",null,null],[12,"0","","",369,null],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing regions (and perhaps later types) in a higher-ranked setting. In particular, imagine a type like this:",null,null],[12,"depth","","",370,null],[3,"FnSig","","Signature of a function type, which I have arbitrarily decided to use to refer to the input/output types.",null,null],[12,"inputs_and_output","","",371,null],[12,"variadic","","",371,null],[12,"unsafety","","",371,null],[12,"abi","","",371,null],[3,"ParamTy","","",null,null],[12,"idx","","",372,null],[12,"name","","",372,null],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS form this would be written `<T as Trait<..>>::N`.",null,null],[12,"trait_ref","","The trait reference `T as Trait<..>`.",373,null],[12,"item_name","","The name `N` of the associated type.",373,null],[3,"ClosureSubsts","","A closure can be modeled as a struct that looks like:",null,null],[12,"substs","","Lifetime and type parameters from the enclosing function, concatenated with the types of the upvars.",374,null],[3,"TypeAndMut","","",null,null],[12,"ty","","",375,null],[12,"mutbl","","",375,null],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax, but perhaps the most recognizable form is in a where clause:",null,null],[12,"def_id","","",376,null],[12,"substs","","",376,null],[3,"ExistentialTraitRef","","An existential reference to a trait, where `Self` is erased. For example, the trait object `Trait<'a, 'b, X, Y>` is:",null,null],[12,"def_id","","",377,null],[12,"substs","","",377,null],[3,"ExistentialProjection","","A `ProjectionPredicate` for an `ExistentialTraitRef`.",null,null],[12,"trait_ref","","",378,null],[12,"item_name","","",378,null],[12,"ty","","",378,null],[3,"EarlyBoundRegion","","",null,null],[12,"index","","",379,null],[12,"name","","",379,null],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region at least as big as the scope `fr.scope`\".",null,null],[12,"scope","","",380,null],[12,"bound_region","","",380,null],[3,"Issue32330","","When a region changed from late-bound to early-bound when #32330 was fixed, its `RegionParameterDef` will have one of these structures that we can use to give nicer errors.",null,null],[12,"fn_def_id","","fn where is region declared",381,null],[12,"region_name","","name of region; duplicates the info in BrNamed but convenient to have it here, and this code is only temporary",381,null],[3,"TyVid","","",null,null],[12,"index","","",382,null],[3,"IntVid","","",null,null],[12,"index","","",383,null],[3,"FloatVid","","",null,null],[12,"index","","",384,null],[3,"RegionVid","","",null,null],[12,"index","","",385,null],[3,"SkolemizedRegionVid","","",null,null],[12,"index","","",386,null],[3,"TypeContents","","Type contents is how the type checker reasons about kinds. They track what kinds of things are found within a type.  You can think of them as kind of an \"anti-kind\".  They track the kinds of values and thinks that are contained in types.  Having a larger contents for a type tends to rule that type *out* from various kinds.  For example, a type that contains a reference is not sendable.",null,null],[12,"bits","","",387,null],[3,"TyCtxt","","The data structure to keep track of all the information that typechecker generates so that so that it can be reused and doesn't have to be redone later on.",null,null],[3,"GlobalArenas","","Internal storage",null,null],[3,"TypeckTables","","",null,null],[12,"type_relative_path_defs","","Resolved definitions for `<T>::X` associated paths.",388,null],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table is not guaranteed to be populated until after typeck.  See typeck::check::fn_ctxt for details.",388,null],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type of this node.  This only applies to nodes that refer to entities parameterized by type parameters, such as generic fns, types, or other items.",388,null],[12,"adjustments","","",388,null],[12,"method_map","","",388,null],[12,"upvar_capture_map","","Borrows",388,null],[12,"closure_tys","","Records the type of each closure.",388,null],[12,"closure_kinds","","Records the kind of each closure.",388,null],[12,"liberated_fn_sigs","","For each fn, records the \"liberated\" types of its arguments and return type. Liberated means that all bound regions (including late-bound regions) are replaced with free equivalents. This table is not used in trans (since regions are erased there) and hence is not serialized to metadata.",388,null],[12,"fru_field_types","","For each FRU expression, record the normalized types of the fields of the struct - this is needed because it is non-trivial to normalize while preserving regions. This table is used only in MIR construction and hence is not serialized to metadata.",388,null],[12,"cast_kinds","","Maps a cast expression to its kind. This is keyed on the *from* expression of the cast, not the cast itself.",388,null],[12,"lints","","Lints for the body of this fn generated by typeck.",388,null],[12,"used_trait_imports","","Set of trait imports actually used in the method resolution. This is used for warning unused imports.",388,null],[12,"tainted_by_errors","","If any errors occurred while type-checking this body, this field will be set to `true`.",388,null],[12,"free_region_map","","Stores the free-region relationships that were deduced from its where clauses and parameter types. These are then read-again by borrowck.",388,null],[3,"CrateAnalysis","","The complete set of all analyses described in this module. This is produced by the driver and fed to trans and later passes.",null,null],[12,"export_map","","",389,null],[12,"access_levels","","",389,null],[12,"reachable","","",389,null],[12,"name","","",389,null],[12,"glob_map","","",389,null],[3,"Resolutions","","",null,null],[12,"freevars","","",390,null],[12,"trait_map","","",390,null],[12,"maybe_unused_trait_imports","","",390,null],[3,"ImplHeader","","The \"header\" of an impl is everything outside the body: a Self type, a trait ref (in the case of a trait impl), and a set of predicates (from the bounds/where clauses).",null,null],[12,"impl_def_id","","",391,null],[12,"self_ty","","",391,null],[12,"trait_ref","","",391,null],[12,"predicates","","",391,null],[3,"AssociatedItem","","",null,null],[12,"def_id","","",392,null],[12,"name","","",392,null],[12,"kind","","",392,null],[12,"vis","","",392,null],[12,"defaultness","","",392,null],[12,"container","","",392,null],[12,"method_has_self_argument","","Whether this is a method with an explicit self as its first argument, allowing method calls.",392,null],[3,"MethodCallee","","",null,null],[12,"def_id","","Impl method ID, for inherent methods, or trait method ID, otherwise.",393,null],[12,"ty","","",393,null],[12,"substs","","",393,null],[3,"MethodCall","","With method calls, we store some extra information in side tables (i.e method_map). We use MethodCall as a key to index into these tables instead of just directly using the expression's NodeId. The reason for this being that we may apply adjustments (coercions) with the resulting expression also needing to use the side tables. The problem with this is that we don't assign a separate NodeId to this new expression and so it would clash with the base expression if both needed to add to the side tables. Thus to disambiguate we also keep track of whether there's an adjustment in our key.",null,null],[12,"expr_id","","",394,null],[12,"autoderef","","",394,null],[3,"CReaderCacheKey","","",null,null],[12,"cnum","","",395,null],[12,"pos","","",395,null],[3,"TypeFlags","","",null,null],[3,"TyS","","",null,null],[12,"sty","","",396,null],[12,"flags","","",396,null],[3,"Slice","","A wrapper for slices with the additional invariant that the slice is interned and no other slice with the same contents can exist in the same context. This means we can use pointer + length for both equality comparisons and hashing.",null,null],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of the original var id (that is, the root variable that is referenced by the upvar) and the id of the closure expression.",null,null],[12,"var_id","","",397,null],[12,"closure_expr_id","","",397,null],[3,"UpvarBorrow","","",null,null],[12,"kind","","The kind of borrow: by-ref upvars have access to shared immutable borrows, which are not part of the normal language syntax.",398,null],[12,"region","","Region of the resulting reference.",398,null],[3,"ClosureUpvar","","",null,null],[12,"def","","",399,null],[12,"span","","",399,null],[12,"ty","","",399,null],[3,"TypeParameterDef","","",null,null],[12,"name","","",400,null],[12,"def_id","","",400,null],[12,"index","","",400,null],[12,"has_default","","",400,null],[12,"object_lifetime_default","","",400,null],[12,"pure_wrt_drop","","`pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute on generic parameter `T`, asserts data behind the parameter `T` won't be accessed during the parent type's `Drop` impl.",400,null],[3,"RegionParameterDef","","",null,null],[12,"name","","",401,null],[12,"def_id","","",401,null],[12,"index","","",401,null],[12,"issue_32330","","",401,null],[12,"pure_wrt_drop","","`pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute on generic parameter `'a`, asserts data of lifetime `'a` won't be accessed during the parent type's `Drop` impl.",401,null],[3,"Generics","","Information about the formal type/lifetime parameters associated with an item or method. Analogous to hir::Generics.",null,null],[12,"parent","","",402,null],[12,"parent_regions","","",402,null],[12,"parent_types","","",402,null],[12,"regions","","",402,null],[12,"types","","",402,null],[12,"type_param_to_index","","Reverse map to each `TypeParameterDef`'s `index` field, from `def_id.index` (`def_id.krate` is the same as the item's).",402,null],[12,"has_self","","",402,null],[3,"GenericPredicates","","Bounds on generics.",null,null],[12,"parent","","",403,null],[12,"predicates","","",403,null],[3,"TraitPredicate","","",null,null],[12,"trait_ref","","",404,null],[3,"EquatePredicate","","",null,null],[12,"0","","",405,null],[12,"1","","",405,null],[3,"OutlivesPredicate","","",null,null],[12,"0","","",406,null],[12,"1","","",406,null],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the syntax, but it roughly corresponds to the syntactic forms:",null,null],[12,"projection_ty","","",407,null],[12,"ty","","",407,null],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type parameters.  Should eventually be generalized into a flag list of where clauses.  You can obtain a `InstantiatedPredicates` list from a `GenericPredicates` by using the `instantiate` method. Note that this method reflects an important semantic invariant of `InstantiatedPredicates`: while the `GenericPredicates` are expressed in terms of the bound type parameters of the impl/trait/whatever, an `InstantiatedPredicates` instance represented a set of bounds for some particular instantiation, meaning that the generic parameters have been substituted with their values.",null,null],[12,"predicates","","",408,null],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track details about the type/lifetime parameters that are in scope. It primarily stores the bounds information.",null,null],[12,"free_substs","","See `construct_free_substs` for details.",409,null],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that indicates it must outlive at least the function body (the user may specify stronger requirements). This field indicates the region of the callee.",409,null],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically the set of bounds on the in-scope type parameters, translated into Obligations, and elaborated and normalized.",409,null],[12,"free_id_outlive","","Scope that is attached to free regions for this scope. This is usually the id of the fn body, but for more abstract scopes like structs we often use the node-id of the struct.",409,null],[12,"is_copy_cache","","A cache for `moves_by_default`.",409,null],[12,"is_sized_cache","","A cache for `type_is_sized`",409,null],[3,"Destructor","","",null,null],[12,"did","","The def-id of the destructor method",410,null],[12,"is_dtorck","","Invoking the destructor of a dtorck type during usual cleanup (e.g. the glue emitted for stack unwinding) requires all lifetimes in the type-structure of `adt` to strictly outlive the adt value itself.",410,null],[3,"AdtFlags","","",null,null],[3,"VariantDef","","",null,null],[12,"did","","The variant's DefId. If this is a tuple-like struct, this is the DefId of the struct's ctor.",411,null],[12,"name","","",411,null],[12,"discr","","",411,null],[12,"fields","","",411,null],[12,"ctor_kind","","",411,null],[3,"FieldDef","","",null,null],[12,"did","","",412,null],[12,"name","","",412,null],[12,"vis","","",412,null],[3,"AdtDef","","The definition of an abstract data type - a struct or enum.",null,null],[12,"did","","",413,null],[12,"variants","","",413,null],[12,"repr","","",413,null],[3,"ReprOptions","","Represents the repr options provided by the user,",null,null],[12,"c","","",414,null],[12,"packed","","",414,null],[12,"simd","","",414,null],[12,"int","","",414,null],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an item into the monotype of an item reference.",null,null],[12,"substs","","",415,null],[4,"InferTy","","",null,null],[13,"TyVar","","",416,null],[13,"IntVar","","",416,null],[13,"FloatVar","","",416,null],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an unbound type variable. This is convenient for caching etc. See `infer::freshen` for more details.",416,null],[13,"FreshIntTy","","",416,null],[13,"FreshFloatTy","","",416,null],[4,"ExistentialPredicate","","",null,null],[13,"Trait","","",417,null],[13,"Projection","","",417,null],[13,"AutoTrait","","",417,null],[4,"TypeVariants","","",null,null],[13,"TyBool","","The primitive boolean type. Written as `bool`.",418,null],[13,"TyChar","","The primitive character type; holds a Unicode scalar value (a non-surrogate code point).  Written as `char`.",418,null],[13,"TyInt","","A primitive signed integer type. For example, `i32`.",418,null],[13,"TyUint","","A primitive unsigned integer type. For example, `u32`.",418,null],[13,"TyFloat","","A primitive floating-point type. For example, `f64`.",418,null],[13,"TyAdt","","Structures, enumerations and unions.",418,null],[13,"TyStr","","The pointee of a string slice. Written as `str`.",418,null],[13,"TyArray","","An array with the given length. Written as `[T; n]`.",418,null],[13,"TySlice","","The pointee of an array slice.  Written as `[T]`.",418,null],[13,"TyRawPtr","","A raw pointer. Written as `*mut T` or `*const T`",418,null],[13,"TyRef","","A reference; a pointer with an associated lifetime. Written as `&'a mut T` or `&'a T`.",418,null],[13,"TyFnDef","","The anonymous type of a function declaration/definition. Each function has a unique type.",418,null],[13,"TyFnPtr","","A pointer to a function.  Written as `fn() -> i32`. FIXME: This is currently also used to represent the callee of a method; see ty::MethodCallee etc.",418,null],[13,"TyDynamic","","A trait, defined with `trait`.",418,null],[13,"TyClosure","","The anonymous type of a closure. Used to represent the type of `|a| a`.",418,null],[13,"TyNever","","The never type `!`",418,null],[13,"TyTuple","","A tuple type.  For example, `(i32, bool)`. The bool indicates whether this is a unit tuple and was created by defaulting a diverging type variable with feature(never_type) disabled. It's only purpose is for raising future-compatibility warnings for when diverging type variables start defaulting to ! instead of ().",418,null],[13,"TyProjection","","The projection of an associated type.  For example, `<T as Trait<..>>::N`.",418,null],[13,"TyAnon","","Anonymized (`impl Trait`) type found in a return type. The DefId comes from the `impl Trait` ast::Ty node, and the substitutions are for the generics of the function in question. After typeck, the concrete type can be found in the `types` map.",418,null],[13,"TyParam","","A type parameter; for example, `T` in `fn f<T>(x: T) {}",418,null],[13,"TyInfer","","A type variable used during type-checking.",418,null],[13,"TyError","","A placeholder for a type which could not be computed; this is propagated to avoid useless error messages.",418,null],[4,"BoundRegion","","",null,null],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",419,null],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",419,null],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",419,null],[13,"BrEnv","","",419,null],[4,"Region","","Representation of regions.",null,null],[13,"ReEarlyBound","","",420,null],[13,"ReLateBound","","",420,null],[13,"ReFree","","When checking a function body, the types of all arguments and so forth that refer to bound region parameters are modified to refer to free region parameters.",420,null],[13,"ReScope","","A concrete region naming some statically determined extent (e.g. an expression or sequence of statements) within the current function.",420,null],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",420,null],[13,"ReVar","","A region variable.  Should not exist after typeck.",420,null],[13,"ReSkolemized","","A skolemized region - basically the higher-ranked version of ReFree. Should not exist after typeck.",420,null],[13,"ReEmpty","","Empty lifetime is for data that is never accessed. Bottom in the region lattice. We treat ReEmpty somewhat specially; at least right now, we do not generate instances of it during the GLB computations, but rather generate an error instead. This is to improve error messages. The only way to get an instance of ReEmpty is to have a region variable with no constraints.",420,null],[13,"ReErased","","Erased region, used by trait selection, in MIR and during trans.",420,null],[4,"AssociatedItemContainer","","",null,null],[13,"TraitContainer","","",421,null],[13,"ImplContainer","","",421,null],[4,"AssociatedKind","","",null,null],[13,"Const","","",422,null],[13,"Method","","",422,null],[13,"Type","","",422,null],[4,"Visibility","","",null,null],[13,"Public","","Visible everywhere (including in other crates).",423,null],[13,"Restricted","","Visible only in the given crate-local module.",423,null],[13,"Invisible","","Not visible anywhere in the local crate. This is the visibility of private external items.",423,null],[4,"Variance","","",null,null],[13,"Covariant","","",424,null],[13,"Invariant","","",424,null],[13,"Contravariant","","",424,null],[13,"Bivariant","","",424,null],[4,"FragmentInfo","","Describes the fragment-state associated with a NodeId.",null,null],[13,"Moved","","",425,null],[12,"var","rustc::ty::FragmentInfo","",425,null],[12,"move_expr","","",425,null],[13,"Assigned","rustc::ty","",425,null],[12,"var","rustc::ty::FragmentInfo","",425,null],[12,"assign_expr","","",425,null],[12,"assignee_id","","",425,null],[4,"BorrowKind","rustc::ty","",null,null],[13,"ImmBorrow","","Data must be immutable and is aliasable.",426,null],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow cannot currently be expressed by the user and is used only in implicit closure bindings. It is needed when the closure is borrowing or mutating a mutable referent, e.g.:",426,null],[13,"MutBorrow","","Data is mutable and not aliasable.",426,null],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed during `typeck`, specifically by `regionck`.",null,null],[13,"ByValue","","Upvar is captured by value. This is always true when the closure is labeled `move`, but can also be true in other cases depending on inference.",427,null],[13,"ByRef","","Upvar is captured by reference.",427,null],[4,"IntVarValue","","",null,null],[13,"IntType","","",428,null],[13,"UintType","","",428,null],[4,"Predicate","","",null,null],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be the `Self` type of the trait reference and `A`, `B`, and `C` would be the type parameters.",429,null],[13,"Equate","","where `T1 == T2`.",429,null],[13,"RegionOutlives","","where 'a : 'b",429,null],[13,"TypeOutlives","","where T : 'a",429,null],[13,"Projection","","where <T as TraitRef>::Name == X, approximately. See `ProjectionPredicate` struct for details.",429,null],[13,"WellFormed","","no syntax: T WF",429,null],[13,"ObjectSafe","","trait must be object-safe",429,null],[13,"ClosureKind","","No direct syntax. May be thought of as `where T : FnFoo<...>` for some substitutions `...` and T being a closure type. Satisfied (or refuted) once we know the closure's kind.",429,null],[4,"VariantDiscr","","",null,null],[13,"Explicit","","Explicit value for this variant, i.e. `X = 123`. The `DefId` corresponds to the embedded constant.",430,null],[13,"Relative","","The previous variant's discriminant plus one. For efficiency reasons, the distance from the last `Explicit` discriminant is being stored, or `0` for the first variant, if it has none.",430,null],[4,"AdtKind","","",null,null],[13,"Struct","","",431,null],[13,"Union","","",431,null],[13,"Enum","","",431,null],[4,"ClosureKind","","",null,null],[13,"Fn","","",432,null],[13,"FnMut","","",432,null],[13,"FnOnce","","",432,null],[4,"LvaluePreference","","",null,null],[13,"PreferMutLvalue","","",433,null],[13,"NoPreference","","",433,null],[0,"tls","","",null,null],[5,"enter_global","rustc::ty::tls","",null,{"inputs":[{"name":"globalctxt"},{"name":"f"}],"output":{"name":"r"}}],[5,"enter","","",null,{"inputs":[{"name":"globalctxt"},{"name":"ctxtinterners"},{"name":"f"}],"output":{"name":"r"}}],[5,"with","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"with_opt","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[0,"adjustment","rustc::ty","",null,null],[3,"Adjustment","rustc::ty::adjustment","",null,null],[12,"kind","","",434,null],[12,"target","","",434,null],[4,"Adjust","","",null,null],[13,"NeverToAny","","Go from ! to any type.",435,null],[13,"ReifyFnPointer","","Go from a fn-item type to a fn-pointer type.",435,null],[13,"UnsafeFnPointer","","Go from a safe fn pointer to an unsafe fn pointer.",435,null],[13,"ClosureFnPointer","","",435,null],[13,"MutToConstPointer","","Go from a mut raw pointer to a const raw pointer.",435,null],[13,"DerefRef","","Represents coercing a pointer to a different kind of pointer - where 'kind' here means either or both of raw vs borrowed vs unique and fat vs thin.",435,null],[12,"autoderefs","rustc::ty::adjustment::Adjust","Step 1. Apply a number of dereferences, producing an lvalue.",435,null],[12,"autoref","","Step 2. Optionally produce a pointer/reference from the value.",435,null],[12,"unsize","","Step 3. Unsize a pointer/reference value, e.g. `&[T; n]` to `&[T]`. Note that the source could be a thin or fat pointer.",435,null],[4,"AutoBorrow","rustc::ty::adjustment","",null,null],[13,"Ref","","Convert from T to &T.",436,null],[13,"RawPtr","","Convert from T to *T.",436,null],[4,"CustomCoerceUnsized","","",null,null],[13,"Struct","","Records the index of the field being coerced.",437,null],[11,"clone","","",434,{"inputs":[{"name":"self"}],"output":{"name":"adjustment"}}],[11,"encode","","",434,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",434,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",435,{"inputs":[{"name":"self"}],"output":{"name":"adjust"}}],[11,"fmt","","",435,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",435,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",435,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"is_identity","","",434,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",436,{"inputs":[{"name":"self"}],"output":{"name":"autoborrow"}}],[11,"eq","","",436,{"inputs":[{"name":"self"},{"name":"autoborrow"}],"output":{"name":"bool"}}],[11,"ne","","",436,{"inputs":[{"name":"self"},{"name":"autoborrow"}],"output":{"name":"bool"}}],[11,"fmt","","",436,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",436,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",436,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",437,{"inputs":[{"name":"self"}],"output":{"name":"customcoerceunsized"}}],[11,"encode","","",437,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",437,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",437,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adjust_for_autoderef","rustc::ty","",396,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"nodeid"},{"name":"span"},{"name":"u32"},{"name":"f"}],"output":{"name":"ty"}}],[11,"adjust_for_autoref","","",396,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"option"}],"output":{"name":"ty"}}],[0,"cast","","",null,null],[4,"IntTy","rustc::ty::cast","Types that are represented as ints.",null,null],[13,"U","","",438,null],[13,"I","","",438,null],[13,"CEnum","","",438,null],[13,"Bool","","",438,null],[13,"Char","","",438,null],[4,"CastTy","","",null,null],[13,"Int","","Various types that are represented as ints and handled mostly in the same way, merged for easier matching.",439,null],[13,"Float","","Floating-Point types",439,null],[13,"FnPtr","","Function Pointers",439,null],[13,"Ptr","","Raw pointers",439,null],[13,"RPtr","","References",439,null],[4,"CastKind","","Cast Kind. See RFC 401 (or librustc_typeck/check/cast.rs)",null,null],[13,"CoercionCast","","",440,null],[13,"PtrPtrCast","","",440,null],[13,"PtrAddrCast","","",440,null],[13,"AddrPtrCast","","",440,null],[13,"NumericCast","","",440,null],[13,"EnumCast","","",440,null],[13,"PrimIntCast","","",440,null],[13,"U8CharCast","","",440,null],[13,"ArrayPtrCast","","",440,null],[13,"FnPtrPtrCast","","",440,null],[13,"FnPtrAddrCast","","",440,null],[11,"clone","","",438,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"fmt","","",438,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",438,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"ne","","",438,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"clone","","",439,{"inputs":[{"name":"self"}],"output":{"name":"castty"}}],[11,"fmt","","",439,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",439,{"inputs":[{"name":"self"},{"name":"castty"}],"output":{"name":"bool"}}],[11,"ne","","",439,{"inputs":[{"name":"self"},{"name":"castty"}],"output":{"name":"bool"}}],[11,"clone","","",440,{"inputs":[{"name":"self"}],"output":{"name":"castkind"}}],[11,"fmt","","",440,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",440,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",440,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_ty","","",439,{"inputs":[{"name":"ty"}],"output":{"name":"option"}}],[0,"error","rustc::ty","",null,null],[3,"ExpectedFound","rustc::ty::error","",null,null],[12,"expected","","",441,null],[12,"found","","",441,null],[4,"TypeError","","",null,null],[13,"Mismatch","","",442,null],[13,"UnsafetyMismatch","","",442,null],[13,"AbiMismatch","","",442,null],[13,"Mutability","","",442,null],[13,"TupleSize","","",442,null],[13,"FixedArraySize","","",442,null],[13,"ArgCount","","",442,null],[13,"RegionsDoesNotOutlive","","",442,null],[13,"RegionsNotSame","","",442,null],[13,"RegionsNoOverlap","","",442,null],[13,"RegionsInsufficientlyPolymorphic","","",442,null],[13,"RegionsOverlyPolymorphic","","",442,null],[13,"Sorts","","",442,null],[13,"IntMismatch","","",442,null],[13,"FloatMismatch","","",442,null],[13,"Traits","","",442,null],[13,"VariadicMismatch","","",442,null],[13,"CyclicTy","","",442,null],[13,"ProjectionNameMismatched","","",442,null],[13,"ProjectionBoundsLength","","",442,null],[13,"TyParamDefaultMismatch","","",442,null],[13,"ExistentialMismatch","","",442,null],[4,"UnconstrainedNumeric","","",null,null],[13,"UnconstrainedFloat","","",443,null],[13,"UnconstrainedInt","","",443,null],[13,"Neither","","",443,null],[11,"clone","","",441,{"inputs":[{"name":"self"}],"output":{"name":"expectedfound"}}],[11,"fmt","","",441,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",442,{"inputs":[{"name":"self"}],"output":{"name":"typeerror"}}],[11,"fmt","","",442,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",443,{"inputs":[{"name":"self"}],"output":{"name":"unconstrainednumeric"}}],[11,"encode","","",443,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",443,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",443,{"inputs":[{"name":"self"},{"name":"unconstrainednumeric"}],"output":{"name":"bool"}}],[11,"hash","","",443,null],[11,"fmt","","",443,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",442,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sort_string","rustc::ty","",396,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"note_and_explain_type_err","","",444,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"typeerror"},{"name":"span"}],"output":null}],[0,"fast_reject","","",null,null],[4,"SimplifiedType","rustc::ty::fast_reject","See `simplify_type",null,null],[13,"BoolSimplifiedType","","",445,null],[13,"CharSimplifiedType","","",445,null],[13,"IntSimplifiedType","","",445,null],[13,"UintSimplifiedType","","",445,null],[13,"FloatSimplifiedType","","",445,null],[13,"AdtSimplifiedType","","",445,null],[13,"StrSimplifiedType","","",445,null],[13,"ArraySimplifiedType","","",445,null],[13,"PtrSimplifiedType","","",445,null],[13,"NeverSimplifiedType","","",445,null],[13,"TupleSimplifiedType","","",445,null],[13,"TraitSimplifiedType","","",445,null],[13,"ClosureSimplifiedType","","",445,null],[13,"AnonSimplifiedType","","",445,null],[13,"FunctionSimplifiedType","","",445,null],[13,"ParameterSimplifiedType","","",445,null],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc. The idea is to get something simple that we can use to quickly decide if two types could unify during method lookup.",null,{"inputs":[{"name":"tyctxt"},{"name":"ty"},{"name":"bool"}],"output":{"name":"option"}}],[11,"clone","","",445,{"inputs":[{"name":"self"}],"output":{"name":"simplifiedtype"}}],[11,"fmt","","",445,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",445,{"inputs":[{"name":"self"},{"name":"simplifiedtype"}],"output":{"name":"bool"}}],[11,"ne","","",445,{"inputs":[{"name":"self"},{"name":"simplifiedtype"}],"output":{"name":"bool"}}],[11,"hash","","",445,null],[0,"fold","rustc::ty","Generalized type folding mechanism. The setup is a bit convoluted but allows for convenient usage. Let T be an instance of some \"foldable type\" (one which implements `TypeFoldable`) and F be an instance of a \"folder\" (a type which implements `TypeFolder`). Then the setup is intended to be:",null,null],[3,"BottomUpFolder","rustc::ty::fold","",null,null],[12,"tcx","","",446,null],[12,"fldop","","",446,null],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component types and all regions that occur *free* within it.",null,null],[5,"shift_region","","",null,{"inputs":[{"name":"region"},{"name":"u32"}],"output":{"name":"region"}}],[5,"shift_regions","","",null,{"inputs":[{"name":"tyctxt"},{"name":"u32"},{"name":"t"}],"output":{"name":"t"}}],[8,"TypeFoldable","","The TypeFoldable trait is implemented for every type that can be folded. Basically, every type that has a corresponding method in TypeFolder.",null,null],[10,"super_fold_with","","",447,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",447,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"super_visit_with","","",447,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"visit_with","","",447,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"has_regions_escaping_depth","","",447,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"has_escaping_regions","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_type_flags","","",447,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"has_projection_types","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"references_error","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_param_types","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_self_ty","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_infer_types","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_infer","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_subst","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_re_skol","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_closure_types","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_erasable_regions","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normalized_for_trans","","",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Indicates whether this value references only 'global' types/lifetimes that are the same regardless of what fn we are in. This is used for caching. Errs on the side of returning false.",447,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a method defined for every foldable type. Each of these has a default implementation that does an \"identity\" fold. Within each identity fold, it should invoke `foo.fold_with(self)` to fold each sub-item.",null,null],[10,"tcx","","",448,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_binder","","",448,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"binder"}}],[11,"fold_ty","","",448,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"fold_mt","","",448,{"inputs":[{"name":"self"},{"name":"typeandmut"}],"output":{"name":"typeandmut"}}],[11,"fold_impl_header","","",448,{"inputs":[{"name":"self"},{"name":"implheader"}],"output":{"name":"implheader"}}],[11,"fold_substs","","",448,{"inputs":[{"name":"self"},{"name":"substs"}],"output":{"name":"substs"}}],[11,"fold_fn_sig","","",448,{"inputs":[{"name":"self"},{"name":"fnsig"}],"output":{"name":"fnsig"}}],[11,"fold_region","","",448,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"region"}}],[11,"fold_autoref","","",448,{"inputs":[{"name":"self"},{"name":"autoborrow"}],"output":{"name":"autoborrow"}}],[8,"TypeVisitor","","",null,null],[11,"visit_binder","","",449,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"bool"}}],[11,"visit_ty","","",449,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"visit_trait_ref","","",449,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"visit_region","","",449,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"tcx","","",446,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_ty","","",446,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"collect_regions","rustc::ty","Collects the free and escaping regions in `value` into `region_set`. Returns whether any late-bound regions were skipped",444,{"inputs":[{"name":"self"},{"name":"t"},{"name":"fxhashset"}],"output":{"name":"bool"}}],[11,"fold_regions","","Folds the escaping and free regions in `value` using `f`, and sets `skipped_regions` to true if any late-bound region was found and skipped.",444,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"},{"name":"f"}],"output":{"name":"t"}}],[11,"new","rustc::ty::fold","",450,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"f"}],"output":{"name":"regionfolder"}}],[11,"tcx","","",450,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"fold_binder","","",450,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"binder"}}],[11,"fold_region","","",450,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"region"}}],[11,"replace_late_bound_regions","rustc::ty","",444,null],[11,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id `scope_id`.",444,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"binder"}],"output":{"name":"t"}}],[11,"flatten_late_bound_regions","","Flattens two binding levels into one. So `for<'a> for<'b> Foo` becomes `for<'a,'b> Foo`.",444,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"binder"}}],[11,"no_late_bound_regions","","",444,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"option"}}],[11,"collect_constrained_late_bound_regions","","Returns a set of all late-bound regions that are constrained by `value`, meaning that if we instantiate those LBR with variables and equate `value` with something else, those variables will also be equated.",444,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"fxhashset"}}],[11,"collect_referenced_late_bound_regions","","Returns a set of all late-bound regions that appear in `value` anywhere.",444,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"fxhashset"}}],[11,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'erased`. Useful in trans but also method lookup and a few other places where precise region relationships are not required.",444,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"t"}}],[11,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are assigned starting at 1 and increasing monotonically in the order traversed by the fold operation.",444,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"binder"}}],[11,"erase_regions","","Returns an equivalent value with all free regions removed (note that late-bound regions remain, because they are important for subtyping, but they are anonymized and normalized as well)..",444,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[0,"inhabitedness","","",null,null],[3,"DefIdForest","rustc::ty::inhabitedness","Represents a forest of DefIds closed under the ancestor relation. That is, if a DefId representing a module is contained in the forest then all DefIds defined in that module or submodules are also implicitly contained in the forest.",null,null],[11,"clone","","",451,{"inputs":[{"name":"self"}],"output":{"name":"defidforest"}}],[11,"empty","","Create an empty forest.",451,{"inputs":[],"output":{"name":"defidforest"}}],[11,"full","","Create a forest consisting of a single tree representing the entire crate.",451,{"inputs":[{"name":"tyctxt"}],"output":{"name":"defidforest"}}],[11,"from_id","","Create a forest containing a DefId and all its descendants.",451,{"inputs":[{"name":"defid"}],"output":{"name":"defidforest"}}],[11,"is_empty","","Test whether the forest is empty.",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Test whether the forest conains a given DefId.",451,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"intersection","","Calculate the intersection of a collection of forests.",451,{"inputs":[{"name":"tyctxt"},{"name":"i"}],"output":{"name":"defidforest"}}],[11,"union","","Calculate the union of a collection of forests.",451,{"inputs":[{"name":"tyctxt"},{"name":"i"}],"output":{"name":"defidforest"}}],[11,"uninhabited_from","rustc::ty","Calculate the forest of DefIds from which this adt is visibly uninhabited.",413,{"inputs":[{"name":"self"},{"name":"fxhashmap"},{"name":"tyctxt"},{"name":"substs"}],"output":{"name":"defidforest"}}],[11,"uninhabited_from","","Calculate the forest of DefIds from which this variant is visibly uninhabited.",411,{"inputs":[{"name":"self"},{"name":"fxhashmap"},{"name":"tyctxt"},{"name":"substs"},{"name":"adtkind"}],"output":{"name":"defidforest"}}],[11,"uninhabited_from","","Calculate the forest of DefIds from which this field is visibly uninhabited.",412,{"inputs":[{"name":"self"},{"name":"fxhashmap"},{"name":"tyctxt"},{"name":"substs"},{"name":"bool"}],"output":{"name":"defidforest"}}],[11,"uninhabited_from","","Calculate the forest of DefIds from which this type is visibly uninhabited.",396,{"inputs":[{"name":"self"},{"name":"fxhashmap"},{"name":"tyctxt"}],"output":{"name":"defidforest"}}],[0,"item_path","","",null,null],[4,"RootMode","rustc::ty::item_path","",null,null],[13,"Local","","Try to make a path relative to the local crate.  In particular, local paths have no prefix, and if the path comes from an extern crate, start with the path to the `extern crate` declaration.",452,null],[13,"Absolute","","Always prepend the crate name to the path, forming an absolute path from within a given set of crates.",452,null],[5,"with_forced_absolute_paths","","Enforces that item_path_str always returns an absolute path. This is useful when building symbols that contain types, where we want the crate name to be part of the symbol.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"characteristic_def_id_of_type","","As a heuristic, when we see an impl, if we see that the 'self-type' is a type defined in the same module as the impl, we can omit including the path to the impl itself. This function tries to find a \"characteristic def-id\" for a type. It's just a heuristic so it makes some questionable decisions and we may want to adjust it later.",null,{"inputs":[{"name":"ty"}],"output":{"name":"option"}}],[8,"ItemPathBuffer","","Unifying Trait for different kinds of item paths we might construct. The basic interface is that components get pushed: the instance can also customize how we handle the root of a crate.",null,null],[10,"root_mode","","",453,{"inputs":[{"name":"self"}],"output":{"name":"rootmode"}}],[10,"push","","",453,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"item_path_str","rustc::ty","Returns a string identifying this def-id. This string is suitable for user output. It is relative to the current crate root, unless with_forced_absolute_paths was used.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"string"}}],[11,"node_path_str","","Returns a string identifying this local node-id.",444,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"absolute_item_path_str","","Returns a string identifying this def-id. This string is suitable for user output. It always begins with a crate identifier.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"string"}}],[11,"push_krate_path","","Returns the \"path\" to a particular crate. This can proceed in various ways, depending on the `root_mode` of the `buffer`. (See `RootMode` enum for more details.)",444,{"inputs":[{"name":"self"},{"name":"t"},{"name":"cratenum"}],"output":null}],[11,"try_push_visible_item_path","","If possible, this pushes a global path resolving to `external_def_id` that is visible from at least one local module and returns true. If the crate defining `external_def_id` is declared with an `extern crate`, the path is guarenteed to use the `extern crate`.",444,{"inputs":[{"name":"self"},{"name":"t"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"push_item_path","","",444,{"inputs":[{"name":"self"},{"name":"t"},{"name":"defid"}],"output":null}],[11,"parent_def_id","","Returns the def-id of `def_id`'s parent in the def tree. If this returns `None`, then `def_id` represents a crate root or inlined root.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"fmt","rustc::ty::item_path","",452,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"layout","rustc::ty","",null,null],[3,"TargetDataLayout","rustc::ty::layout","Parsed Data layout for a target, which contains everything needed to compute layouts.",null,null],[12,"endian","","",454,null],[12,"i1_align","","",454,null],[12,"i8_align","","",454,null],[12,"i16_align","","",454,null],[12,"i32_align","","",454,null],[12,"i64_align","","",454,null],[12,"i128_align","","",454,null],[12,"f32_align","","",454,null],[12,"f64_align","","",454,null],[12,"pointer_size","","",454,null],[12,"pointer_align","","",454,null],[12,"aggregate_align","","",454,null],[12,"vector_align","","Alignments for vector types.",454,null],[3,"Size","","Size of a type in bytes.",null,null],[3,"Align","","Alignment of a type in bytes, both ABI-mandated and preferred. Since alignments are always powers of 2, we can pack both in one byte, giving each a nibble (4 bits) for a maximum alignment of 2^15 = 32768.",null,null],[3,"Struct","","A structure, a product type in ADT terms.",null,null],[12,"align","","",455,null],[12,"packed","","If true, no alignment padding is used.",455,null],[12,"sized","","If true, the size is exact, otherwise it's only a lower bound.",455,null],[12,"offsets","","Offsets for the first byte of each field, ordered to match the source definition order. This vector does not go in increasing order. FIXME(eddyb) use small vector optimization for the common case.",455,null],[12,"memory_index","","Maps source order field indices to memory order indices, depending how fields were permuted. FIXME (camlorn) also consider small vector  optimization here.",455,null],[12,"min_size","","",455,null],[3,"Union","","An untagged union.",null,null],[12,"align","","",456,null],[12,"min_size","","",456,null],[12,"packed","","If true, no alignment padding is used.",456,null],[4,"Endian","","Endianness of the target, which must match cfg(target-endian).",null,null],[13,"Little","","",457,null],[13,"Big","","",457,null],[4,"Integer","","Integers, also used for enum discriminants.",null,null],[13,"I1","","",458,null],[13,"I8","","",458,null],[13,"I16","","",458,null],[13,"I32","","",458,null],[13,"I64","","",458,null],[13,"I128","","",458,null],[4,"Primitive","","Fundamental unit of memory access and layout.",null,null],[13,"Int","","",459,null],[13,"F32","","",459,null],[13,"F64","","",459,null],[13,"Pointer","","",459,null],[4,"Layout","","Type layout, from which size and alignment can be cheaply computed. For ADTs, it also includes field placement and enum optimizations. NOTE: Because Layout is interned, redundant information should be kept to a minimum, e.g. it includes no sub-component Ty or Layout.",null,null],[13,"Scalar","","TyBool, TyChar, TyInt, TyUint, TyFloat, TyRawPtr, TyRef or TyFnPtr.",460,null],[12,"value","rustc::ty::layout::Layout","",460,null],[12,"non_zero","","",460,null],[13,"Vector","rustc::ty::layout","SIMD vectors, from structs marked with #[repr(simd)].",460,null],[12,"element","rustc::ty::layout::Layout","",460,null],[12,"count","","",460,null],[13,"Array","rustc::ty::layout","TyArray, TySlice or TyStr.",460,null],[12,"sized","rustc::ty::layout::Layout","If true, the size is exact, otherwise it's only a lower bound.",460,null],[12,"align","","",460,null],[12,"size","","",460,null],[13,"FatPointer","rustc::ty::layout","TyRawPtr or TyRef with a !Sized pointee.",460,null],[12,"metadata","rustc::ty::layout::Layout","",460,null],[12,"non_zero","","",460,null],[13,"CEnum","rustc::ty::layout","C-like enums; basically an integer.",460,null],[12,"discr","rustc::ty::layout::Layout","",460,null],[12,"signed","","",460,null],[12,"non_zero","","",460,null],[12,"min","","",460,null],[12,"max","","",460,null],[13,"Univariant","rustc::ty::layout","Single-case enums, and structs/tuples.",460,null],[12,"variant","rustc::ty::layout::Layout","",460,null],[12,"non_zero","","",460,null],[13,"UntaggedUnion","rustc::ty::layout","Untagged unions.",460,null],[12,"variants","rustc::ty::layout::Layout","",460,null],[13,"General","rustc::ty::layout","General-case enums: for each case there is a struct, and they all start with a field for the discriminant.",460,null],[12,"discr","rustc::ty::layout::Layout","",460,null],[12,"variants","","",460,null],[12,"size","","",460,null],[12,"align","","",460,null],[13,"RawNullablePointer","rustc::ty::layout","Two cases distinguished by a nullable pointer: the case with discriminant `nndiscr` must have single field which is known to be nonnull due to its type. The other case is known to be zero sized. Hence we represent the enum as simply a nullable pointer: if not null it indicates the `nndiscr` variant, otherwise it indicates the other case.",460,null],[12,"nndiscr","rustc::ty::layout::Layout","",460,null],[12,"value","","",460,null],[13,"StructWrappedNullablePointer","rustc::ty::layout","Two cases distinguished by a nullable pointer: the case with discriminant `nndiscr` is represented by the struct `nonnull`, where the `discrfield`th field is known to be nonnull due to its type; if that field is null, then it represents the other case, which is known to be zero sized.",460,null],[12,"nndiscr","rustc::ty::layout::Layout","",460,null],[12,"nonnull","","",460,null],[12,"discrfield","","",460,null],[12,"discrfield_source","","",460,null],[4,"LayoutError","rustc::ty::layout","",null,null],[13,"Unknown","","",461,null],[13,"SizeOverflow","","",461,null],[4,"SizeSkeleton","","Type size \"skeleton\", i.e. the only information determining a type's size. While this is conservative, (aside from constant sizes, only pointers, newtypes thereof and null pointer optimized enums are allowed), it is enough to statically check common usecases of transmute.",null,null],[13,"Known","","Any statically computable Layout.",462,null],[13,"Pointer","","A potentially-fat pointer.",462,null],[12,"non_zero","rustc::ty::layout::SizeSkeleton","",462,null],[12,"tail","","",462,null],[6,"FieldPath","rustc::ty::layout","Path through fields of nested structures.",null,null],[17,"FAT_PTR_ADDR","","The first half of a fat pointer. - For a trait object, this is the address of the box. - For a slice, this is the base address.",null,null],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer. - For a trait object, this is the address of the vtable. - For a slice, this is the length.",null,null],[11,"default","","Creates an instance of `TargetDataLayout`.",454,{"inputs":[],"output":{"name":"targetdatalayout"}}],[11,"parse","","",454,{"inputs":[{"name":"session"}],"output":{"name":"targetdatalayout"}}],[11,"obj_size_bound","","Return exclusive upper bound on object size.",454,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ptr_sized_integer","","",454,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"clone","","",457,{"inputs":[{"name":"self"}],"output":{"name":"endian"}}],[11,"clone","","",463,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"eq","","",463,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ne","","",463,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",463,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"option"}}],[11,"lt","","",463,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"le","","",463,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"gt","","",463,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ge","","",463,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"cmp","","",463,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"ordering"}}],[11,"hash","","",463,null],[11,"fmt","","",463,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bits","","",463,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"from_bytes","","",463,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"bytes","","",463,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"bits","","",463,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"abi_align","","",463,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"size"}}],[11,"checked_add","","",463,{"inputs":[{"name":"self"},{"name":"size"},{"name":"targetdatalayout"}],"output":{"name":"option"}}],[11,"checked_mul","","",463,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"targetdatalayout"}],"output":{"name":"option"}}],[11,"clone","","",464,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"eq","","",464,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"ne","","",464,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"hash","","",464,null],[11,"fmt","","",464,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bits","","",464,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_bytes","","",464,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"abi","","",464,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"pref","","",464,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"min","","",464,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"align"}}],[11,"max","","",464,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"align"}}],[11,"clone","","",458,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"eq","","",458,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",458,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"option"}}],[11,"cmp","","",458,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"ordering"}}],[11,"hash","","",458,null],[11,"fmt","","",458,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size","","",458,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"align","","",458,{"inputs":[{"name":"self"},{"name":"targetdatalayout"}],"output":{"name":"align"}}],[11,"to_ty","","",458,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"bool"}],"output":{"name":"ty"}}],[11,"fit_signed","","Find the smallest Integer type which can represent the signed value.",458,{"inputs":[{"name":"i64"}],"output":{"name":"integer"}}],[11,"fit_unsigned","","Find the smallest Integer type which can represent the unsigned value.",458,{"inputs":[{"name":"u64"}],"output":{"name":"integer"}}],[11,"for_abi_align","","Find the smallest integer with the given alignment.",458,{"inputs":[{"name":"targetdatalayout"},{"name":"align"}],"output":{"name":"option"}}],[11,"from_attr","","Get the Integer type from an attr::IntType.",458,{"inputs":[{"name":"targetdatalayout"},{"name":"inttype"}],"output":{"name":"integer"}}],[11,"clone","","",459,{"inputs":[{"name":"self"}],"output":{"name":"primitive"}}],[11,"eq","","",459,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",459,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"hash","","",459,null],[11,"fmt","","",459,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size","","",459,{"inputs":[{"name":"self"},{"name":"targetdatalayout"}],"output":{"name":"size"}}],[11,"align","","",459,{"inputs":[{"name":"self"},{"name":"targetdatalayout"}],"output":{"name":"align"}}],[11,"eq","","",455,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"ne","","",455,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"hash","","",455,null],[11,"fmt","","",455,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stride","","Get the size with trailing alignment padding.",455,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"would_be_zero_sized","","Determine whether a structure would be zero-sized, given its fields.",455,{"inputs":[{"name":"targetdatalayout"},{"name":"i"}],"output":{"name":"result"}}],[11,"field_index_by_increasing_offset","","Get indices of the tys that made this struct by increasing offset.",455,null],[11,"eq","","",456,{"inputs":[{"name":"self"},{"name":"union"}],"output":{"name":"bool"}}],[11,"ne","","",456,{"inputs":[{"name":"self"},{"name":"union"}],"output":{"name":"bool"}}],[11,"hash","","",456,null],[11,"fmt","","",456,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",456,{"inputs":[{"name":"targetdatalayout"},{"name":"bool"}],"output":{"name":"union"}}],[11,"extend","","Extend the Struct with more fields.",456,{"inputs":[{"name":"self"},{"name":"targetdatalayout"},{"name":"i"},{"name":"ty"}],"output":{"name":"result"}}],[11,"stride","","Get the size with trailing alignment padding.",456,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"fmt","","",460,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",460,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ne","","",460,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"hash","","",460,null],[11,"clone","","",461,{"inputs":[{"name":"self"}],"output":{"name":"layouterror"}}],[11,"fmt","","",461,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",461,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compute_uncached","","",460,{"inputs":[{"name":"ty"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"is_unsized","","Returns true if the layout corresponds to an unsized type.",460,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"size","","",460,{"inputs":[{"name":"self"},{"name":"targetdatalayout"}],"output":{"name":"size"}}],[11,"align","","",460,{"inputs":[{"name":"self"},{"name":"targetdatalayout"}],"output":{"name":"align"}}],[11,"clone","","",462,{"inputs":[{"name":"self"}],"output":{"name":"sizeskeleton"}}],[11,"fmt","","",462,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compute","","",462,{"inputs":[{"name":"ty"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"same_size","","",462,{"inputs":[{"name":"self"},{"name":"sizeskeleton"}],"output":{"name":"bool"}}],[0,"_match","rustc::ty","",null,null],[3,"Match","rustc::ty::_match","A type \"A\" *matches* \"B\" if the fresh types in B could be substituted with values so as to make it equal to A. Matching is intended to be used only on freshened types, and it basically indicates if the non-freshened versions of A and B could have been unified.",null,null],[11,"new","","",465,{"inputs":[{"name":"tyctxt"}],"output":{"name":"match"}}],[11,"tag","","",465,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"tcx","","",465,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"a_is_expected","","",465,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"relate_with_variance","","",465,{"inputs":[{"name":"self"},{"name":"variance"},{"name":"t"},{"name":"t"}],"output":{"name":"relateresult"}}],[11,"regions","","",465,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":{"name":"relateresult"}}],[11,"tys","","",465,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[11,"binders","","",465,{"inputs":[{"name":"self"},{"name":"binder"},{"name":"binder"}],"output":{"name":"relateresult"}}],[0,"maps","rustc::ty","",null,null],[3,"CycleError","rustc::ty::maps","",null,null],[3,"Maps","","",null,null],[12,"ty","","Records the type of every item.",466,null],[12,"generics","","Maps from the def-id of an item (trait/struct/enum/fn) to its associated generics and predicates.",466,null],[12,"predicates","","",466,null],[12,"super_predicates","","Maps from the def-id of a trait to the list of super-predicates. This is a subset of the full list of predicates. We store these in a separate map because we must evaluate them even during type conversion, often before the full predicates are available (note that supertraits have additional acyclicity requirements).",466,null],[12,"type_param_predicates","","To avoid cycles within the predicates of a single item we compute per-type-parameter predicates for resolving `T::AssocTy`.",466,null],[12,"trait_def","","",466,null],[12,"adt_def","","",466,null],[12,"adt_destructor","","",466,null],[12,"adt_sized_constraint","","",466,null],[12,"variances","","Maps from def-id of a type or region parameter to its (inferred) variance.",466,null],[12,"associated_item_def_ids","","Maps from an impl/trait def-id to a list of the def-ids of its items",466,null],[12,"associated_item","","Maps from a trait item to the trait item \"descriptor\"",466,null],[12,"impl_trait_ref","","",466,null],[12,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls. Contains implementations of methods that are inherent to a type. Methods in these implementations don't need to be exported.",466,null],[12,"mir","","Maps from the def-id of a function/method or const/static to its MIR. Mutation is done at an item granularity to allow MIR optimization passes to function and still access cross-crate MIR (e.g. inlining or const eval).",466,null],[12,"mir_const_qualif","","Maps DefId's that have an associated Mir to the result of the MIR qualify_consts pass. The actual meaning of the value isn't known except to the pass itself.",466,null],[12,"closure_kind","","Records the type of each closure. The def ID is the ID of the expression defining the closure.",466,null],[12,"closure_type","","Records the type of each closure. The def ID is the ID of the expression defining the closure.",466,null],[12,"custom_coerce_unsized_kind","","Caches CoerceUnsized kinds for impls on custom types.",466,null],[12,"typeck_tables","","",466,null],[12,"coherent_trait","","",466,null],[12,"coherent_inherent_impls","","",466,null],[12,"monomorphic_const_eval","","Results of evaluating monomorphic constants embedded in other items, such as enum variant explicit discriminants.",466,null],[3,"Providers","","",null,null],[12,"ty","","",467,null],[12,"generics","","",467,null],[12,"predicates","","",467,null],[12,"super_predicates","","",467,null],[12,"type_param_predicates","","",467,null],[12,"trait_def","","",467,null],[12,"adt_def","","",467,null],[12,"adt_destructor","","",467,null],[12,"adt_sized_constraint","","",467,null],[12,"variances","","",467,null],[12,"associated_item_def_ids","","",467,null],[12,"associated_item","","",467,null],[12,"impl_trait_ref","","",467,null],[12,"inherent_impls","","",467,null],[12,"mir","","",467,null],[12,"mir_const_qualif","","",467,null],[12,"closure_kind","","",467,null],[12,"closure_type","","",467,null],[12,"custom_coerce_unsized_kind","","",467,null],[12,"typeck_tables","","",467,null],[12,"coherent_trait","","",467,null],[12,"coherent_inherent_impls","","",467,null],[12,"monomorphic_const_eval","","",467,null],[4,"Query","","",null,null],[13,"ty","","Records the type of every item.",468,null],[13,"generics","","Maps from the def-id of an item (trait/struct/enum/fn) to its associated generics and predicates.",468,null],[13,"predicates","","",468,null],[13,"super_predicates","","Maps from the def-id of a trait to the list of super-predicates. This is a subset of the full list of predicates. We store these in a separate map because we must evaluate them even during type conversion, often before the full predicates are available (note that supertraits have additional acyclicity requirements).",468,null],[13,"type_param_predicates","","To avoid cycles within the predicates of a single item we compute per-type-parameter predicates for resolving `T::AssocTy`.",468,null],[13,"trait_def","","",468,null],[13,"adt_def","","",468,null],[13,"adt_destructor","","",468,null],[13,"adt_sized_constraint","","",468,null],[13,"variances","","Maps from def-id of a type or region parameter to its (inferred) variance.",468,null],[13,"associated_item_def_ids","","Maps from an impl/trait def-id to a list of the def-ids of its items",468,null],[13,"associated_item","","Maps from a trait item to the trait item \"descriptor\"",468,null],[13,"impl_trait_ref","","",468,null],[13,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls. Contains implementations of methods that are inherent to a type. Methods in these implementations don't need to be exported.",468,null],[13,"mir","","Maps from the def-id of a function/method or const/static to its MIR. Mutation is done at an item granularity to allow MIR optimization passes to function and still access cross-crate MIR (e.g. inlining or const eval).",468,null],[13,"mir_const_qualif","","Maps DefId's that have an associated Mir to the result of the MIR qualify_consts pass. The actual meaning of the value isn't known except to the pass itself.",468,null],[13,"closure_kind","","Records the type of each closure. The def ID is the ID of the expression defining the closure.",468,null],[13,"closure_type","","Records the type of each closure. The def ID is the ID of the expression defining the closure.",468,null],[13,"custom_coerce_unsized_kind","","Caches CoerceUnsized kinds for impls on custom types.",468,null],[13,"typeck_tables","","",468,null],[13,"coherent_trait","","",468,null],[13,"coherent_inherent_impls","","",468,null],[13,"monomorphic_const_eval","","Results of evaluating monomorphic constants embedded in other items, such as enum variant explicit discriminants.",468,null],[0,"queries","","",null,null],[3,"ty","rustc::ty::maps::queries","",null,null],[3,"generics","","",null,null],[3,"predicates","","",null,null],[3,"super_predicates","","",null,null],[3,"type_param_predicates","","",null,null],[3,"trait_def","","",null,null],[3,"adt_def","","",null,null],[3,"adt_destructor","","",null,null],[3,"adt_sized_constraint","","",null,null],[3,"variances","","",null,null],[3,"associated_item_def_ids","","",null,null],[3,"associated_item","","",null,null],[3,"impl_trait_ref","","",null,null],[3,"inherent_impls","","",null,null],[3,"mir","","",null,null],[3,"mir_const_qualif","","",null,null],[3,"closure_kind","","",null,null],[3,"closure_type","","",null,null],[3,"custom_coerce_unsized_kind","","",null,null],[3,"typeck_tables","","",null,null],[3,"coherent_trait","","",null,null],[3,"coherent_inherent_impls","","",null,null],[3,"monomorphic_const_eval","","",null,null],[11,"report_cycle","rustc::ty","",444,{"inputs":[{"name":"self"},{"name":"cycleerror"}],"output":null}],[11,"new","rustc::ty::maps","",466,{"inputs":[{"name":"depgraph"},{"name":"indexvec"}],"output":{"name":"self"}}],[11,"clone","","",468,{"inputs":[{"name":"self"}],"output":{"name":"query"}}],[11,"fmt","","",468,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",468,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"name":"bool"}}],[11,"ne","","",468,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"name":"bool"}}],[11,"describe","","",468,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"to_dep_node","rustc::ty::maps::queries","",469,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",469,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Records the type of every item.",469,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"ty"}}],[11,"force","","",469,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",470,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",470,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Maps from the def-id of an item (trait/struct/enum/fn) to its associated generics and predicates.",470,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"force","","",470,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",471,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",471,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","",471,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"force","","",471,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",472,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",472,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Maps from the def-id of a trait to the list of super-predicates. This is a subset of the full list of predicates. We store these in a separate map because we must evaluate them even during type conversion, often before the full predicates are available (note that supertraits have additional acyclicity requirements).",472,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"force","","",472,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",473,null],[11,"try_get","","",473,null],[11,"get","","To avoid cycles within the predicates of a single item we compute per-type-parameter predicates for resolving `T::AssocTy`.",473,null],[11,"force","","",473,null],[11,"to_dep_node","","",474,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",474,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","",474,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"traitdef"}}],[11,"force","","",474,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",475,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",475,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","",475,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"adtdef"}}],[11,"force","","",475,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",476,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",476,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","",476,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"option"}}],[11,"force","","",476,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",477,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",477,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","",477,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"ty"}}],[11,"force","","",477,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",478,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",478,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Maps from def-id of a type or region parameter to its (inferred) variance.",478,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"force","","",478,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",479,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",479,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Maps from an impl/trait def-id to a list of the def-ids of its items",479,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"force","","",479,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",480,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",480,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Maps from a trait item to the trait item \"descriptor\"",480,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"force","","",480,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",481,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",481,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","",481,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"option"}}],[11,"force","","",481,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",482,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",482,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Maps a DefId of a type to a list of its inherent impls. Contains implementations of methods that are inherent to a type. Methods in these implementations don't need to be exported.",482,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"force","","",482,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",483,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",483,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Maps from the def-id of a function/method or const/static to its MIR. Mutation is done at an item granularity to allow MIR optimization passes to function and still access cross-crate MIR (e.g. inlining or const eval).",483,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"refcell"}}],[11,"force","","",483,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",484,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",484,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Maps DefId's that have an associated Mir to the result of the MIR qualify_consts pass. The actual meaning of the value isn't known except to the pass itself.",484,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"u8"}}],[11,"force","","",484,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",485,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",485,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Records the type of each closure. The def ID is the ID of the expression defining the closure.",485,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"closurekind"}}],[11,"force","","",485,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",486,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",486,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Records the type of each closure. The def ID is the ID of the expression defining the closure.",486,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"polyfnsig"}}],[11,"force","","",486,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",487,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",487,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Caches CoerceUnsized kinds for impls on custom types.",487,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"customcoerceunsized"}}],[11,"force","","",487,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",488,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",488,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","",488,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"typecktables"}}],[11,"force","","",488,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"to_dep_node","","",489,null],[11,"try_get","","",489,null],[11,"get","","",489,null],[11,"force","","",489,null],[11,"to_dep_node","","",490,{"inputs":[{"name":"cratenum"}],"output":{"name":"depnode"}}],[11,"try_get","","",490,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":{"name":"result"}}],[11,"get","","",490,null],[11,"force","","",490,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"cratenum"}],"output":null}],[11,"to_dep_node","","",491,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"try_get","","",491,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"get","","Results of evaluating monomorphic constants embedded in other items, such as enum variant explicit discriminants.",491,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":{"name":"result"}}],[11,"force","","",491,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"clone","rustc::ty::maps","",467,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",467,{"inputs":[],"output":{"name":"self"}}],[0,"outlives","rustc::ty","",null,null],[4,"Component","rustc::ty::outlives","",null,null],[13,"Region","","",492,null],[13,"Param","","",492,null],[13,"UnresolvedInferenceVariable","","",492,null],[13,"Projection","","",492,null],[13,"EscapingProjection","","",492,null],[11,"fmt","","",492,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"outlives_components","rustc::ty","Returns all the things that must outlive `'a` for the condition `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.",444,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"vec"}}],[0,"relate","","Generalized type relating mechanism. A type relation R relates a pair of values (A, B). A and B are usually types or regions but can be other things. Examples of type relations are subtyping, type equality, etc.",null,null],[4,"Cause","rustc::ty::relate","",null,null],[13,"ExistentialRegionBound","","",493,null],[5,"relate_substs","","",null,{"inputs":[{"name":"r"},{"name":"option"},{"name":"substs"},{"name":"substs"}],"output":{"name":"relateresult"}}],[5,"super_relate_tys","","The main \"type relation\" routine. Note that this does not handle inference artifacts, so you should filter those out before calling it.",null,{"inputs":[{"name":"r"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[5,"expected_found","","",null,{"inputs":[{"name":"r"},{"name":"t"},{"name":"t"}],"output":{"name":"expectedfound"}}],[5,"expected_found_bool","","",null,{"inputs":[{"name":"bool"},{"name":"t"},{"name":"t"}],"output":{"name":"expectedfound"}}],[6,"RelateResult","","",null,null],[8,"TypeRelation","","",null,null],[10,"tcx","","",494,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[10,"tag","","Returns a static string we can use for printouts.",494,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"a_is_expected","","Returns true if the value `a` is the \"expected\" type in the relation. Just affects error messages.",494,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_cause","","",494,{"inputs":[{"name":"self"},{"name":"cause"},{"name":"f"}],"output":{"name":"r"}}],[11,"relate","","Generic relation routine suitable for most anything.",494,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"relateresult"}}],[10,"relate_with_variance","","Switch variance for the purpose of relating `a` and `b`.",494,{"inputs":[{"name":"self"},{"name":"variance"},{"name":"t"},{"name":"t"}],"output":{"name":"relateresult"}}],[10,"tys","","",494,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[10,"regions","","",494,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":{"name":"relateresult"}}],[10,"binders","","",494,{"inputs":[{"name":"self"},{"name":"binder"},{"name":"binder"}],"output":{"name":"relateresult"}}],[8,"Relate","","",null,null],[10,"relate","","",495,{"inputs":[{"name":"r"},{"name":"self"},{"name":"self"}],"output":{"name":"relateresult"}}],[11,"clone","","",493,{"inputs":[{"name":"self"}],"output":{"name":"cause"}}],[11,"fmt","","",493,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relate","rustc::ty","",375,{"inputs":[{"name":"r"},{"name":"typeandmut"},{"name":"typeandmut"}],"output":{"name":"relateresult"}}],[11,"relate","","",371,{"inputs":[{"name":"r"},{"name":"fnsig"},{"name":"fnsig"}],"output":{"name":"relateresult"}}],[11,"relate","rustc::hir","",93,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"relateresult"}}],[11,"relate","rustc::ty","",373,{"inputs":[{"name":"r"},{"name":"projectionty"},{"name":"projectionty"}],"output":{"name":"relateresult"}}],[11,"relate","","",378,{"inputs":[{"name":"r"},{"name":"existentialprojection"},{"name":"existentialprojection"}],"output":{"name":"relateresult"}}],[11,"relate","","",376,{"inputs":[{"name":"r"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"relateresult"}}],[11,"relate","","",377,{"inputs":[{"name":"r"},{"name":"existentialtraitref"},{"name":"existentialtraitref"}],"output":{"name":"relateresult"}}],[11,"relate","","",374,{"inputs":[{"name":"r"},{"name":"closuresubsts"},{"name":"closuresubsts"}],"output":{"name":"relateresult"}}],[11,"relate","","",369,{"inputs":[{"name":"r"},{"name":"binder"},{"name":"binder"}],"output":{"name":"relateresult"}}],[0,"subst","","",null,null],[3,"Kind","rustc::ty::subst","An entity in the Rust typesystem, which can be one of several kinds (only types and lifetimes for now). To reduce memory usage, a `Kind` is a interned pointer, with the lowest 2 bits being reserved for a tag to indicate the type (`Ty` or `Region`) it points to.",null,null],[6,"Substs","","A substitution mapping type/region parameters to new values.",null,null],[8,"Subst","","",null,null],[11,"subst","","",496,null],[10,"subst_spanned","","",496,null],[11,"clone","","",497,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"eq","","",497,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",497,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"hash","","",497,null],[11,"from","","",497,{"inputs":[{"name":"ty"}],"output":{"name":"kind"}}],[11,"from","","",497,{"inputs":[{"name":"region"}],"output":{"name":"kind"}}],[11,"as_type","","",497,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_region","","",497,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",497,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"super_fold_with","","",497,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",497,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"encode","","",497,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",497,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"identity_for_item","","Creates a Substs that maps each generic parameter to itself.",498,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"substs"}}],[11,"for_item","","Creates a Substs for generic parameter definitions, by calling closures to obtain each region and type. The closures get to observe the Substs as they're being built, which can be used to correctly substitute defaults of type parameters.",498,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"fr"},{"name":"ft"}],"output":{"name":"substs"}}],[11,"extend_to","","",498,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"},{"name":"fr"},{"name":"ft"}],"output":{"name":"substs"}}],[11,"is_noop","","",498,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"types","","",498,null],[11,"regions","","",498,null],[11,"type_at","","",498,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"ty"}}],[11,"region_at","","",498,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"region"}}],[11,"type_for_def","","",498,{"inputs":[{"name":"self"},{"name":"typeparameterdef"}],"output":{"name":"ty"}}],[11,"region_for_def","","",498,{"inputs":[{"name":"self"},{"name":"regionparameterdef"}],"output":{"name":"region"}}],[11,"rebase_onto","","Transform from substitutions for a child of `source_ancestor` (e.g. a trait or impl) to substitutions for the same child in a different item, with `target_substs` as the base for the target impl/trait, with the source child-specific parameters (e.g. method parameters) on top of that base.",498,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"},{"name":"substs"}],"output":{"name":"substs"}}],[11,"truncate_to","","",498,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"generics"}],"output":{"name":"substs"}}],[11,"from_method","rustc::ty","",376,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"erase_self_ty","","",377,{"inputs":[{"name":"tyctxt"},{"name":"traitref"}],"output":{"name":"existentialtraitref"}}],[0,"trait_def","","",null,null],[3,"TraitDef","rustc::ty::trait_def","A trait's definition with type information.",null,null],[12,"def_id","","",499,null],[12,"unsafety","","",499,null],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]` attribute, indicating that it should be used with `Foo()` sugar. This is a temporary thing -- eventually any trait will be usable with the sugar (or without it).",499,null],[12,"specialization_graph","","The specialization order for impls of this trait.",499,null],[12,"flags","","Various flags",499,null],[12,"def_path_hash","","The ICH of this trait's DefPath, cached here so it doesn't have to be recomputed all the time.",499,null],[3,"TraitFlags","","",null,null],[11,"new","","",499,{"inputs":[{"name":"defid"},{"name":"unsafety"},{"name":"bool"},{"name":"u64"}],"output":{"name":"traitdef"}}],[11,"object_safety","","",499,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_object_safety","","",499,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"record_local_impl","","Records a trait-to-implementation mapping for a crate-local impl.",499,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"},{"name":"traitref"}],"output":null}],[11,"record_has_default_impl","","Records a trait-to-implementation mapping.",499,{"inputs":[{"name":"self"}],"output":null}],[11,"record_remote_impl","","Records a trait-to-implementation mapping for a non-local impl.",499,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"},{"name":"traitref"},{"name":"defid"}],"output":null}],[11,"add_impl_for_specialization","","Adds a local impl into the specialization graph, returning an error with overlap information if the impl overlaps but does not specialize an existing impl.",499,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"result"}}],[11,"ancestors","","",499,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ancestors"}}],[11,"is_complete","","Whether the impl set and specialization graphs are complete.",499,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"bool"}}],[11,"for_each_impl","","",499,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"f"}],"output":null}],[11,"for_each_relevant_impl","","Iterate over every impl that could possibly match the self-type `self_ty`.",499,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"},{"name":"f"}],"output":null}],[11,"eq","","",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"bool"}}],[11,"ne","","",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"bool"}}],[11,"clone","","",500,{"inputs":[{"name":"self"}],"output":{"name":"traitflags"}}],[11,"partial_cmp","","",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"option"}}],[11,"lt","","",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"bool"}}],[11,"le","","",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"bool"}}],[11,"gt","","",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"bool"}}],[11,"ge","","",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"bool"}}],[11,"cmp","","",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"ordering"}}],[11,"hash","","",500,null],[18,"NO_TRAIT_FLAGS","","",500,null],[18,"HAS_DEFAULT_IMPL","","",500,null],[18,"IS_OBJECT_SAFE","","",500,null],[18,"OBJECT_SAFETY_VALID","","",500,null],[18,"HAS_REMOTE_IMPLS","","",500,null],[18,"HAS_LOCAL_IMPLS","","",500,null],[11,"empty","","Returns an empty set of flags.",500,{"inputs":[],"output":{"name":"traitflags"}}],[11,"all","","Returns the set containing all flags.",500,{"inputs":[],"output":{"name":"traitflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",500,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",500,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",500,{"inputs":[{"name":"u32"}],"output":{"name":"traitflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",500,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",500,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if all of the flags in `other` are contained within `self`.",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"traitflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"traitflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"traitflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",500,{"inputs":[{"name":"self"},{"name":"traitflags"}],"output":{"name":"traitflags"}}],[11,"not","","Returns the complement of this set of flags.",500,{"inputs":[{"name":"self"}],"output":{"name":"traitflags"}}],[0,"walk","rustc::ty","An iterator over the type substructure. WARNING: this does not keep track of the region depth.",null,null],[3,"TypeWalker","rustc::ty::walk","",null,null],[5,"walk_shallow","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"accintoiter"}}],[6,"TypeWalkerArray","","",null,null],[6,"TypeWalkerStack","","",null,null],[11,"new","","",501,{"inputs":[{"name":"ty"}],"output":{"name":"typewalker"}}],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type returned by `next()`.",501,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",501,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"wf","rustc::ty","",null,null],[4,"ImpliedBound","rustc::ty::wf","Implied bounds are region relationships that we deduce automatically.  The idea is that (e.g.) a caller must check that a function's argument types are well-formed immediately before calling that fn, and hence the *callee* can assume that its argument types are well-formed. This may imply certain relationships between generic parameters. For example:",null,null],[13,"RegionSubRegion","","",502,null],[13,"RegionSubParam","","",502,null],[13,"RegionSubProjection","","",502,null],[5,"obligations","","Returns the set of obligations needed to make `ty` well-formed. If `ty` contains unresolved inference variables, this may include further WF obligations. However, if `ty` IS an unresolved inference variable, returns `None`, because we are not able to make any progress at all. This is to prevent \"livelock\" where we say \"$0 is WF if $0 is WF\".",null,{"inputs":[{"name":"inferctxt"},{"name":"nodeid"},{"name":"ty"},{"name":"span"}],"output":{"name":"option"}}],[5,"trait_obligations","","Returns the obligations that make this trait reference well-formed.  For example, if there is a trait `Set` defined like `trait Set<K:Eq>`, then the trait reference `Foo: Set<Bar>` is WF if `Bar: Eq`.",null,{"inputs":[{"name":"inferctxt"},{"name":"nodeid"},{"name":"traitref"},{"name":"span"}],"output":{"name":"vec"}}],[5,"predicate_obligations","","",null,{"inputs":[{"name":"inferctxt"},{"name":"nodeid"},{"name":"predicate"},{"name":"span"}],"output":{"name":"vec"}}],[5,"implied_bounds","","Compute the implied bounds that a callee/impl can assume based on the fact that caller/projector has ensured that `ty` is WF.  See the `ImpliedBound` type for more details.",null,{"inputs":[{"name":"inferctxt"},{"name":"nodeid"},{"name":"ty"},{"name":"span"}],"output":{"name":"vec"}}],[5,"object_region_bounds","","Given an object type like `SomeTrait+Send`, computes the lifetime bounds that must hold on the elided self type. These are derived from the declarations of `SomeTrait`, `Send`, and friends -- if they declare `trait SomeTrait : 'static`, for example, then `'static` would appear in the list. The hard work is done by `ty::required_region_bounds`, see that for more information.",null,{"inputs":[{"name":"tyctxt"},{"name":"binder"}],"output":{"name":"vec"}}],[11,"fmt","","",502,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"util","rustc::ty","misc. type-system utilities too small to deserve their own file",null,null],[3,"TypeIdHasher","rustc::ty::util","",null,null],[4,"CopyImplementationError","","",null,null],[13,"InfrigingField","","",503,null],[13,"NotAnAdt","","",503,null],[13,"HasDestructor","","",503,null],[4,"Representability","","Describes whether a type is representable. For types that are not representable, 'SelfRecursive' and 'ContainsRecursive' are used to distinguish between types that are recursive with themselves and types that contain a different recursive type. These cases can therefore be treated differently when reporting errors.",null,null],[13,"Representable","","",504,null],[13,"ContainsRecursive","","",504,null],[13,"SelfRecursive","","",504,null],[8,"IntTypeExt","","",null,null],[10,"to_ty","","",505,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[10,"disr_incr","","",505,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"option"}],"output":{"name":"option"}}],[10,"assert_ty_matches","","",505,{"inputs":[{"name":"self"},{"name":"constint"}],"output":null}],[10,"initial_discriminant","","",505,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"constint"}}],[11,"clone","","",503,{"inputs":[{"name":"self"}],"output":{"name":"copyimplementationerror"}}],[11,"clone","","",504,{"inputs":[{"name":"self"}],"output":{"name":"representability"}}],[11,"partial_cmp","","",504,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"option"}}],[11,"cmp","","",504,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"ordering"}}],[11,"eq","","",504,{"inputs":[{"name":"self"},{"name":"representability"}],"output":{"name":"bool"}}],[11,"fmt","","",504,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"can_type_implement_copy","rustc::ty","",409,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"},{"name":"span"}],"output":{"name":"result"}}],[11,"has_error_field","","",444,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`. For an enum `t`, `variant` is None only if `t` is a univariant enum.",444,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"usize"},{"name":"option"}],"output":{"name":"option"}}],[11,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`. For an enum `t`, `variant` must be some def id.",444,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"name"},{"name":"option"}],"output":{"name":"option"}}],[11,"struct_tail","","Returns the deeply last field of nested structures, or the same type, if not a structure at all. Corresponds to the only possible unsized field, and its type can be used to determine unsizing strategy.",444,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"struct_lockstep_tails","","Same as applying struct_tail on `source` and `target`, but only keeps going as long as the two types are instances of the same structure definitions. For `(Foo<Foo<T>>, Foo<Trait>)`, the result will be `(Foo<T>, Trait)`, whereas struct_tail produces `T`, and `Trait`, respectively.",444,null],[11,"required_region_bounds","","Given a set of predicates that apply to an object type, returns the region bounds that the (erased) `Self` type must outlive. Precisely *because* the `Self` type is erased, the parameter `erased_self_ty` must be supplied to indicate what type has been used to represent `Self` in the predicates themselves. This should really be a unique type; `FreshTy(0)` is a popular choice.",444,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"type_id_hash","","Creates a hash of the type `Ty` which will be the same no matter what crate context it's calculated within. This is used by the `type_id` intrinsic.",444,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"u64"}}],[11,"calculate_dtor","","Calculate the destructor of a given type.",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"fnmut"}],"output":{"name":"option"}}],[11,"closure_base_def_id","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defid"}}],[11,"new","rustc::ty::util","",506,{"inputs":[{"name":"tyctxt"}],"output":{"name":"self"}}],[11,"finish","","",506,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"hash","","",506,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"def_path","","",506,{"inputs":[{"name":"self"},{"name":"defpath"}],"output":null}],[11,"visit_ty","","",506,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"visit_region","","",506,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"visit_binder","","",506,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"bool"}}],[11,"moves_by_default","rustc::ty","",396,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"parameterenvironment"},{"name":"span"}],"output":{"name":"bool"}}],[11,"is_sized","","",396,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"parameterenvironment"},{"name":"span"}],"output":{"name":"bool"}}],[11,"layout","","",396,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"is_representable","","Check whether a type is representable. This means it cannot contain unboxed structural recursion. This check is needed for structs and enums.",396,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"span"}],"output":{"name":"representability"}}],[11,"clone","","",387,{"inputs":[{"name":"self"}],"output":{"name":"typecontents"}}],[11,"when","","",387,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"typecontents"}}],[11,"intersects","","",387,{"inputs":[{"name":"self"},{"name":"typecontents"}],"output":{"name":"bool"}}],[11,"interior_param","","",387,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"interior_unsafe","","",387,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_drop","","",387,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"bool"}}],[11,"union","","",387,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"typecontents"}}],[11,"bitor","","",387,{"inputs":[{"name":"self"},{"name":"typecontents"}],"output":{"name":"typecontents"}}],[11,"bitand","","",387,{"inputs":[{"name":"self"},{"name":"typecontents"}],"output":{"name":"typecontents"}}],[11,"sub","","",387,{"inputs":[{"name":"self"},{"name":"typecontents"}],"output":{"name":"typecontents"}}],[11,"fmt","","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"type_contents","","",396,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"typecontents"}}],[11,"new","","",507,{"inputs":[],"output":{"name":"globalarenas"}}],[11,"encode","","",388,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",388,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"empty","","",388,{"inputs":[],"output":{"name":"typecktables"}}],[11,"qpath_def","","Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.",388,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"nodeid"}],"output":{"name":"def"}}],[11,"node_id_to_type","","",388,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ty"}}],[11,"node_id_to_type_opt","","",388,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"node_id_item_substs","","",388,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"pat_ty","","",388,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"ty"}}],[11,"pat_ty_opt","","",388,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"option"}}],[11,"expr_ty","","",388,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"expr_ty_opt","","",388,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"option"}}],[11,"expr_ty_adjusted","","Returns the type of `expr`, considering any `Adjustment` entry recorded for that expression.",388,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"expr_ty_adjusted_opt","","",388,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"option"}}],[11,"is_method_call","","",388,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"is_overloaded_autoderef","","",388,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"upvar_capture","","",388,{"inputs":[{"name":"self"},{"name":"upvarid"}],"output":{"name":"option"}}],[11,"clone","","",444,{"inputs":[{"name":"self"}],"output":{"name":"tyctxt"}}],[11,"deref","","",444,null],[11,"crate_name","","",444,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",444,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_disambiguator","","",444,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"retrace_path","","",444,null],[11,"alloc_generics","","",444,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"alloc_mir","","",444,{"inputs":[{"name":"self"},{"name":"mir"}],"output":{"name":"refcell"}}],[11,"alloc_tables","","",444,{"inputs":[{"name":"self"},{"name":"typecktables"}],"output":{"name":"typecktables"}}],[11,"alloc_trait_def","","",444,{"inputs":[{"name":"self"},{"name":"traitdef"}],"output":{"name":"traitdef"}}],[11,"alloc_adt_def","","",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"adtkind"},{"name":"vec"},{"name":"reproptions"}],"output":{"name":"adtdef"}}],[11,"intern_stability","","",444,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"stability"}}],[11,"intern_layout","","",444,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"layout"}}],[11,"lift","","",444,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"lift_to_global","","Like lift, but only tries in the global tcx.",444,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"create_and_enter","","Create a type context and call the closure with a `TyCtxt` reference to the context. The closure enforces that the type context and any interned value (types, substs, etc.) can only be used while `ty::tls` has a valid reference to the context, to allow formatting values that need it.",444,{"inputs":[{"name":"session"},{"name":"providers"},{"name":"providers"},{"name":"globalarenas"},{"name":"droplessarena"},{"name":"resolutions"},{"name":"namedregionmap"},{"name":"map"},{"name":"regionmaps"},{"name":"languageitems"},{"name":"index"},{"name":"str"},{"name":"f"}],"output":{"name":"r"}}],[11,"print_debug_stats","","",444,{"inputs":[{"name":"self"}],"output":null}],[11,"mk_region","","",444,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"region"}}],[11,"_intern_existential_predicates","","",444,null],[11,"_intern_type_list","","",444,null],[11,"_intern_substs","","",444,null],[11,"safe_to_unsafe_fn_ty","","Create an unsafe fn ty based on a safe fn ty.",444,{"inputs":[{"name":"self"},{"name":"polyfnsig"}],"output":{"name":"ty"}}],[11,"mk_ty","","",444,{"inputs":[{"name":"self"},{"name":"typevariants"}],"output":{"name":"ty"}}],[11,"mk_mach_int","","",444,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"ty"}}],[11,"mk_mach_uint","","",444,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"ty"}}],[11,"mk_mach_float","","",444,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"ty"}}],[11,"mk_str","","",444,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_static_str","","",444,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_adt","","",444,{"inputs":[{"name":"self"},{"name":"adtdef"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"mk_box","","",444,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_ptr","","",444,{"inputs":[{"name":"self"},{"name":"typeandmut"}],"output":{"name":"ty"}}],[11,"mk_ref","","",444,{"inputs":[{"name":"self"},{"name":"region"},{"name":"typeandmut"}],"output":{"name":"ty"}}],[11,"mk_mut_ref","","",444,{"inputs":[{"name":"self"},{"name":"region"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_imm_ref","","",444,{"inputs":[{"name":"self"},{"name":"region"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_mut_ptr","","",444,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_imm_ptr","","",444,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"mk_nil_ptr","","",444,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_array","","",444,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"usize"}],"output":{"name":"ty"}}],[11,"mk_slice","","",444,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"intern_tup","","",444,null],[11,"mk_tup","","",444,null],[11,"mk_nil","","",444,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_diverging_default","","",444,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_bool","","",444,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_fn_def","","",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"substs"},{"name":"polyfnsig"}],"output":{"name":"ty"}}],[11,"mk_fn_ptr","","",444,{"inputs":[{"name":"self"},{"name":"polyfnsig"}],"output":{"name":"ty"}}],[11,"mk_dynamic","","",444,{"inputs":[{"name":"self"},{"name":"binder"},{"name":"region"}],"output":{"name":"ty"}}],[11,"mk_projection","","",444,{"inputs":[{"name":"self"},{"name":"traitref"},{"name":"name"}],"output":{"name":"ty"}}],[11,"mk_closure","","",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"mk_closure_from_closure_substs","","",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"closuresubsts"}],"output":{"name":"ty"}}],[11,"mk_var","","",444,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"ty"}}],[11,"mk_int_var","","",444,{"inputs":[{"name":"self"},{"name":"intvid"}],"output":{"name":"ty"}}],[11,"mk_float_var","","",444,{"inputs":[{"name":"self"},{"name":"floatvid"}],"output":{"name":"ty"}}],[11,"mk_infer","","",444,{"inputs":[{"name":"self"},{"name":"inferty"}],"output":{"name":"ty"}}],[11,"mk_param","","",444,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"name"}],"output":{"name":"ty"}}],[11,"mk_self_type","","",444,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"mk_param_from_def","","",444,{"inputs":[{"name":"self"},{"name":"typeparameterdef"}],"output":{"name":"ty"}}],[11,"mk_anon","","",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"intern_existential_predicates","","",444,null],[11,"intern_type_list","","",444,null],[11,"intern_substs","","",444,null],[11,"mk_fn_sig","","",444,null],[11,"mk_existential_predicates","","",444,null],[11,"mk_type_list","","",444,null],[11,"mk_substs","","",444,null],[11,"mk_substs_trait","","",444,null],[11,"lift_to_tcx","","",376,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",377,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",404,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",405,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",406,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",373,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",407,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",378,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",429,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",369,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",374,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","","",415,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::ty::adjustment","",436,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::ty","",371,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::ty::error","",441,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::infer::type_variable","",169,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"lift_to_tcx","rustc::ty::error","",442,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"super_fold_with","rustc::hir","",93,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"unsafety"}}],[11,"super_visit_with","","",93,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::ty","",369,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",369,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",369,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"visit_with","","",369,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",417,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",417,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",375,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",375,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",375,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",371,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",371,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",371,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",376,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",376,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"visit_with","","",376,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",377,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",377,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",391,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",391,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",391,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",374,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",374,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",415,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",415,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::ty::adjustment","",436,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",436,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",436,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::ty","",403,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",403,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",429,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",429,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",407,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",407,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",378,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",378,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",373,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",373,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",408,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",408,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",405,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",404,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",404,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",406,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",406,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","","",399,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",399,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"super_fold_with","rustc::ty::error","",441,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",441,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"clone","rustc::ty","",375,{"inputs":[{"name":"self"}],"output":{"name":"typeandmut"}}],[11,"eq","","",375,{"inputs":[{"name":"self"},{"name":"typeandmut"}],"output":{"name":"bool"}}],[11,"ne","","",375,{"inputs":[{"name":"self"},{"name":"typeandmut"}],"output":{"name":"bool"}}],[11,"hash","","",375,null],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",375,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",375,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",380,{"inputs":[{"name":"self"}],"output":{"name":"freeregion"}}],[11,"eq","","",380,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"ne","","",380,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",380,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"option"}}],[11,"lt","","",380,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"le","","",380,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"gt","","",380,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"ge","","",380,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"cmp","","",380,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"ordering"}}],[11,"hash","","",380,null],[11,"encode","","",380,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",380,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",419,{"inputs":[{"name":"self"}],"output":{"name":"boundregion"}}],[11,"eq","","",419,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"ne","","",419,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",419,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"option"}}],[11,"lt","","",419,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"le","","",419,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"gt","","",419,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"ge","","",419,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"bool"}}],[11,"cmp","","",419,{"inputs":[{"name":"self"},{"name":"boundregion"}],"output":{"name":"ordering"}}],[11,"hash","","",419,null],[11,"encode","","",419,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",419,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",381,{"inputs":[{"name":"self"}],"output":{"name":"issue32330"}}],[11,"fmt","","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",381,{"inputs":[{"name":"self"},{"name":"issue32330"}],"output":{"name":"bool"}}],[11,"ne","","",381,{"inputs":[{"name":"self"},{"name":"issue32330"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",381,{"inputs":[{"name":"self"},{"name":"issue32330"}],"output":{"name":"option"}}],[11,"lt","","",381,{"inputs":[{"name":"self"},{"name":"issue32330"}],"output":{"name":"bool"}}],[11,"le","","",381,{"inputs":[{"name":"self"},{"name":"issue32330"}],"output":{"name":"bool"}}],[11,"gt","","",381,{"inputs":[{"name":"self"},{"name":"issue32330"}],"output":{"name":"bool"}}],[11,"ge","","",381,{"inputs":[{"name":"self"},{"name":"issue32330"}],"output":{"name":"bool"}}],[11,"cmp","","",381,{"inputs":[{"name":"self"},{"name":"issue32330"}],"output":{"name":"ordering"}}],[11,"hash","","",381,null],[11,"encode","","",381,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",381,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",418,{"inputs":[{"name":"self"}],"output":{"name":"typevariants"}}],[11,"eq","","",418,{"inputs":[{"name":"self"},{"name":"typevariants"}],"output":{"name":"bool"}}],[11,"ne","","",418,{"inputs":[{"name":"self"},{"name":"typevariants"}],"output":{"name":"bool"}}],[11,"hash","","",418,null],[11,"fmt","","",418,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",418,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",418,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",374,{"inputs":[{"name":"self"}],"output":{"name":"closuresubsts"}}],[11,"eq","","",374,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":{"name":"bool"}}],[11,"ne","","",374,{"inputs":[{"name":"self"},{"name":"closuresubsts"}],"output":{"name":"bool"}}],[11,"hash","","",374,null],[11,"fmt","","",374,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",374,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",374,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"upvar_tys","","",374,null],[11,"fmt","","",417,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",417,{"inputs":[{"name":"self"}],"output":{"name":"existentialpredicate"}}],[11,"eq","","",417,{"inputs":[{"name":"self"},{"name":"existentialpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",417,{"inputs":[{"name":"self"},{"name":"existentialpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",417,null],[11,"encode","","",417,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",417,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"cmp","","",417,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"with_self_ty","","",369,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"predicate"}}],[11,"principal","","",508,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"projection_bounds","","",508,null],[11,"auto_traits","","",508,null],[11,"principal","","",369,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"projection_bounds","","",369,null],[11,"auto_traits","","",369,null],[11,"iter","","",369,null],[11,"clone","","",376,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"eq","","",376,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",376,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"hash","","",376,null],[11,"encode","","",376,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",376,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",376,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"self_ty","","",376,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"input_types","","",376,null],[11,"clone","","",377,{"inputs":[{"name":"self"}],"output":{"name":"existentialtraitref"}}],[11,"eq","","",377,{"inputs":[{"name":"self"},{"name":"existentialtraitref"}],"output":{"name":"bool"}}],[11,"ne","","",377,{"inputs":[{"name":"self"},{"name":"existentialtraitref"}],"output":{"name":"bool"}}],[11,"hash","","",377,null],[11,"encode","","",377,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",377,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"input_types","","",377,null],[11,"with_self_ty","","Object types don't have a self-type specified. Therefore, when we convert the principal trait-ref into a normal trait-ref, you must give *some* self-type. A common choice is `mk_err()` or some skolemized type.",377,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"traitref"}}],[11,"clone","","",369,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"eq","","",369,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"bool"}}],[11,"ne","","",369,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"bool"}}],[11,"hash","","",369,null],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",369,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",369,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a risky thing to do because it's easy to get confused about debruijn indices and the like. It is usually better to discharge the binder using `no_late_bound_regions` or `replace_late_bound_regions` or something like that. `skip_binder` is only valid when you are either extracting data that has nothing to do with bound regions, you are doing some sort of test that does not involve bound regions, or you are being very careful about your depth accounting.",369,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",369,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"map_bound_ref","","",369,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"binder"}}],[11,"map_bound","","",369,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"binder"}}],[11,"fmt","","",509,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",373,{"inputs":[{"name":"self"}],"output":{"name":"projectionty"}}],[11,"eq","","",373,{"inputs":[{"name":"self"},{"name":"projectionty"}],"output":{"name":"bool"}}],[11,"ne","","",373,{"inputs":[{"name":"self"},{"name":"projectionty"}],"output":{"name":"bool"}}],[11,"hash","","",373,null],[11,"fmt","","",373,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",373,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",373,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",371,{"inputs":[{"name":"self"}],"output":{"name":"fnsig"}}],[11,"eq","","",371,{"inputs":[{"name":"self"},{"name":"fnsig"}],"output":{"name":"bool"}}],[11,"ne","","",371,{"inputs":[{"name":"self"},{"name":"fnsig"}],"output":{"name":"bool"}}],[11,"hash","","",371,null],[11,"encode","","",371,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",371,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"inputs","","",371,null],[11,"output","","",371,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"clone","","",372,{"inputs":[{"name":"self"}],"output":{"name":"paramty"}}],[11,"eq","","",372,{"inputs":[{"name":"self"},{"name":"paramty"}],"output":{"name":"bool"}}],[11,"ne","","",372,{"inputs":[{"name":"self"},{"name":"paramty"}],"output":{"name":"bool"}}],[11,"hash","","",372,null],[11,"encode","","",372,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",372,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",372,{"inputs":[{"name":"u32"},{"name":"name"}],"output":{"name":"paramty"}}],[11,"for_self","","",372,{"inputs":[],"output":{"name":"paramty"}}],[11,"for_def","","",372,{"inputs":[{"name":"typeparameterdef"}],"output":{"name":"paramty"}}],[11,"to_ty","","",372,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"is_self","","",372,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",370,{"inputs":[{"name":"self"}],"output":{"name":"debruijnindex"}}],[11,"eq","","",370,{"inputs":[{"name":"self"},{"name":"debruijnindex"}],"output":{"name":"bool"}}],[11,"ne","","",370,{"inputs":[{"name":"self"},{"name":"debruijnindex"}],"output":{"name":"bool"}}],[11,"hash","","",370,null],[11,"encode","","",370,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",370,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",370,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",420,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"eq","","",420,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"ne","","",420,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"hash","","",420,null],[11,"encode","","",420,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",420,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",379,{"inputs":[{"name":"self"}],"output":{"name":"earlyboundregion"}}],[11,"eq","","",379,{"inputs":[{"name":"self"},{"name":"earlyboundregion"}],"output":{"name":"bool"}}],[11,"ne","","",379,{"inputs":[{"name":"self"},{"name":"earlyboundregion"}],"output":{"name":"bool"}}],[11,"hash","","",379,null],[11,"encode","","",379,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",379,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",382,{"inputs":[{"name":"self"}],"output":{"name":"tyvid"}}],[11,"eq","","",382,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"bool"}}],[11,"ne","","",382,{"inputs":[{"name":"self"},{"name":"tyvid"}],"output":{"name":"bool"}}],[11,"hash","","",382,null],[11,"encode","","",382,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",382,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",383,{"inputs":[{"name":"self"}],"output":{"name":"intvid"}}],[11,"eq","","",383,{"inputs":[{"name":"self"},{"name":"intvid"}],"output":{"name":"bool"}}],[11,"ne","","",383,{"inputs":[{"name":"self"},{"name":"intvid"}],"output":{"name":"bool"}}],[11,"hash","","",383,null],[11,"encode","","",383,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",383,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",384,{"inputs":[{"name":"self"}],"output":{"name":"floatvid"}}],[11,"eq","","",384,{"inputs":[{"name":"self"},{"name":"floatvid"}],"output":{"name":"bool"}}],[11,"ne","","",384,{"inputs":[{"name":"self"},{"name":"floatvid"}],"output":{"name":"bool"}}],[11,"hash","","",384,null],[11,"encode","","",384,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",384,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",385,{"inputs":[{"name":"self"}],"output":{"name":"regionvid"}}],[11,"eq","","",385,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"bool"}}],[11,"ne","","",385,{"inputs":[{"name":"self"},{"name":"regionvid"}],"output":{"name":"bool"}}],[11,"encode","","",385,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",385,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",385,null],[11,"clone","","",386,{"inputs":[{"name":"self"}],"output":{"name":"skolemizedregionvid"}}],[11,"eq","","",386,{"inputs":[{"name":"self"},{"name":"skolemizedregionvid"}],"output":{"name":"bool"}}],[11,"ne","","",386,{"inputs":[{"name":"self"},{"name":"skolemizedregionvid"}],"output":{"name":"bool"}}],[11,"hash","","",386,null],[11,"encode","","",386,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",386,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",416,{"inputs":[{"name":"self"}],"output":{"name":"inferty"}}],[11,"eq","","",416,{"inputs":[{"name":"self"},{"name":"inferty"}],"output":{"name":"bool"}}],[11,"ne","","",416,{"inputs":[{"name":"self"},{"name":"inferty"}],"output":{"name":"bool"}}],[11,"hash","","",416,null],[11,"encode","","",416,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",416,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",378,{"inputs":[{"name":"self"}],"output":{"name":"existentialprojection"}}],[11,"eq","","",378,{"inputs":[{"name":"self"},{"name":"existentialprojection"}],"output":{"name":"bool"}}],[11,"ne","","",378,{"inputs":[{"name":"self"},{"name":"existentialprojection"}],"output":{"name":"bool"}}],[11,"hash","","",378,null],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",378,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",378,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"item_name","","",378,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"sort_key","","",378,null],[11,"with_self_ty","","",378,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"projectionpredicate"}}],[11,"new","","",370,{"inputs":[{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"shifted","","",370,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"is_bound","","",420,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_infer","","",420,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"escapes_depth","","",420,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_depth","","Returns the depth of `self` from the (1-based) binding level `depth`",420,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"region"}}],[11,"type_flags","","",420,{"inputs":[{"name":"self"}],"output":{"name":"typeflags"}}],[11,"as_opt_param_ty","","",396,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_nil","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_never","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_defaulted_unit","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uninhabited_from","","Checks whether a type is visibly uninhabited from a particular module. # Example ```rust enum Void {} mod a {     pub mod b {         pub struct SecretlyUninhabited {             _priv: !,         }     } }",396,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"tyctxt"}],"output":{"name":"bool"}}],[11,"is_primitive","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ty_var","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_phantom_data","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bool","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_param","","",396,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_self","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_slice","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_structural","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_simd","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sequence_element_type","","",396,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"simd_type","","",396,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"simd_size","","",396,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"usize"}}],[11,"is_region_ptr","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mutable_pointer","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unsafe_ptr","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_box","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"boxed_ty","","",396,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"is_scalar","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_floating_point","","Returns true if this type is a floating point type and false otherwise.",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_trait","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_integral","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fresh","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uint","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_char","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fp","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_numeric","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_signed","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_machine","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_concrete_skeleton","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"builtin_deref","","",396,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"lvaluepreference"}],"output":{"name":"option"}}],[11,"builtin_index","","",396,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_sig","","",396,{"inputs":[{"name":"self"}],"output":{"name":"polyfnsig"}}],[11,"fn_args","","",396,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"fn_ret","","",396,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"is_fn","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ty_to_def_id","","",396,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ty_adt_def","","",396,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"regions","","Returns the regions directly referenced from this type (but not types reachable from this type via `walk_tys`). This ignores late-bound regions binders.",396,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"PolyFnSig","","",null,null],[6,"PolyTraitRef","","",null,null],[6,"PolyExistentialTraitRef","","",null,null],[6,"PolyExistentialProjection","","",null,null],[6,"MethodMap","","",null,null],[6,"Ty","","",null,null],[6,"UpvarCaptureMap","","",null,null],[6,"PolyTraitPredicate","","",null,null],[6,"PolyEquatePredicate","","",null,null],[6,"PolyOutlivesPredicate","","",null,null],[6,"PolyRegionOutlivesPredicate","","",null,null],[6,"PolyTypeOutlivesPredicate","","",null,null],[6,"PolyProjectionPredicate","","",null,null],[8,"Lift","","A trait implemented for all X<'a> types which can be safely and efficiently converted to X<'tcx> as long as they are part of the provided TyCtxt<'tcx>. This can be done, for example, for Ty<'tcx> or &'tcx Substs<'tcx> by looking them up in their respective interners.",null,null],[16,"Lifted","","",510,null],[10,"lift_to_tcx","","",510,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[8,"DefIdTree","","",null,null],[10,"parent","","",511,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"is_descendant_of","","",511,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[8,"ToPolyTraitRef","","",null,null],[10,"to_poly_trait_ref","","",512,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[8,"ToPredicate","","",null,null],[10,"to_predicate","","",513,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"clone","","",389,{"inputs":[{"name":"self"}],"output":{"name":"crateanalysis"}}],[11,"clone","","",390,{"inputs":[{"name":"self"}],"output":{"name":"resolutions"}}],[11,"clone","","",421,{"inputs":[{"name":"self"}],"output":{"name":"associateditemcontainer"}}],[11,"eq","","",421,{"inputs":[{"name":"self"},{"name":"associateditemcontainer"}],"output":{"name":"bool"}}],[11,"ne","","",421,{"inputs":[{"name":"self"},{"name":"associateditemcontainer"}],"output":{"name":"bool"}}],[11,"fmt","","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","",421,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"clone","","",391,{"inputs":[{"name":"self"}],"output":{"name":"implheader"}}],[11,"eq","","",391,{"inputs":[{"name":"self"},{"name":"implheader"}],"output":{"name":"bool"}}],[11,"ne","","",391,{"inputs":[{"name":"self"},{"name":"implheader"}],"output":{"name":"bool"}}],[11,"hash","","",391,null],[11,"fmt","","",391,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_fresh_ty_vars","","",391,{"inputs":[{"name":"selectioncontext"},{"name":"defid"}],"output":{"name":"implheader"}}],[11,"clone","","",392,{"inputs":[{"name":"self"}],"output":{"name":"associateditem"}}],[11,"fmt","","",392,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",422,{"inputs":[{"name":"self"}],"output":{"name":"associatedkind"}}],[11,"eq","","",422,{"inputs":[{"name":"self"},{"name":"associatedkind"}],"output":{"name":"bool"}}],[11,"fmt","","",422,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",422,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",422,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"def","","",392,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"relevant_for_never","","Tests whether the associated item admits a non-trivial implementation for !",392,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",423,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",423,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",423,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"encode","","",423,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",423,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"parent","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"from_hir","","",423,{"inputs":[{"name":"visibility"},{"name":"nodeid"},{"name":"tyctxt"}],"output":{"name":"self"}}],[11,"is_accessible_from","","Returns true if an item with this visibility is accessible from the given block.",423,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"t"}],"output":{"name":"bool"}}],[11,"is_at_least","","Returns true if this visibility is at least as accessible as the given visibility",423,{"inputs":[{"name":"self"},{"name":"visibility"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",424,{"inputs":[{"name":"self"}],"output":{"name":"variance"}}],[11,"eq","","",424,{"inputs":[{"name":"self"},{"name":"variance"}],"output":{"name":"bool"}}],[11,"decode","","",424,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",424,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",393,{"inputs":[{"name":"self"}],"output":{"name":"methodcallee"}}],[11,"fmt","","",393,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",393,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",393,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",394,{"inputs":[{"name":"self"}],"output":{"name":"methodcall"}}],[11,"eq","","",394,{"inputs":[{"name":"self"},{"name":"methodcall"}],"output":{"name":"bool"}}],[11,"ne","","",394,{"inputs":[{"name":"self"},{"name":"methodcall"}],"output":{"name":"bool"}}],[11,"hash","","",394,null],[11,"fmt","","",394,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",394,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",394,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"expr","","",394,{"inputs":[{"name":"nodeid"}],"output":{"name":"methodcall"}}],[11,"autoderef","","",394,{"inputs":[{"name":"nodeid"},{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"clone","","",395,{"inputs":[{"name":"self"}],"output":{"name":"creadercachekey"}}],[11,"eq","","",395,{"inputs":[{"name":"self"},{"name":"creadercachekey"}],"output":{"name":"bool"}}],[11,"ne","","",395,{"inputs":[{"name":"self"},{"name":"creadercachekey"}],"output":{"name":"bool"}}],[11,"hash","","",395,null],[11,"clone","","",425,{"inputs":[{"name":"self"}],"output":{"name":"fragmentinfo"}}],[11,"fmt","","",425,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"ne","","",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"clone","","",509,{"inputs":[{"name":"self"}],"output":{"name":"typeflags"}}],[11,"partial_cmp","","",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"option"}}],[11,"lt","","",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"le","","",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"gt","","",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"ge","","",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",509,null],[18,"HAS_PARAMS","","",509,null],[18,"HAS_SELF","","",509,null],[18,"HAS_TY_INFER","","",509,null],[18,"HAS_RE_INFER","","",509,null],[18,"HAS_RE_SKOL","","",509,null],[18,"HAS_RE_EARLY_BOUND","","",509,null],[18,"HAS_FREE_REGIONS","","",509,null],[18,"HAS_TY_ERR","","",509,null],[18,"HAS_PROJECTION","","",509,null],[18,"HAS_TY_CLOSURE","","",509,null],[18,"HAS_LOCAL_NAMES","","",509,null],[18,"KEEP_IN_LOCAL_TCX","","",509,null],[18,"HAS_NORMALIZABLE_PROJECTION","","",509,null],[18,"NEEDS_SUBST","","",509,null],[18,"NOMINAL_FLAGS","","",509,null],[18,"SIZEDNESS_CACHED","","",509,null],[18,"IS_SIZED","","",509,null],[18,"MOVENESS_CACHED","","",509,null],[18,"MOVES_BY_DEFAULT","","",509,null],[11,"empty","","Returns an empty set of flags.",509,{"inputs":[],"output":{"name":"typeflags"}}],[11,"all","","Returns the set containing all flags.",509,{"inputs":[],"output":{"name":"typeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",509,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",509,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",509,{"inputs":[{"name":"u32"}],"output":{"name":"typeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",509,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",509,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if all of the flags in `other` are contained within `self`.",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"typeflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"typeflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"typeflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",509,{"inputs":[{"name":"self"},{"name":"typeflags"}],"output":{"name":"typeflags"}}],[11,"not","","Returns the complement of this set of flags.",509,{"inputs":[{"name":"self"}],"output":{"name":"typeflags"}}],[11,"eq","","",396,{"inputs":[{"name":"self"},{"name":"tys"}],"output":{"name":"bool"}}],[11,"hash","","",396,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",508,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",508,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"eq","","",508,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"hash","","",508,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"deref","","",508,null],[11,"empty","","",508,{"inputs":[],"output":{"name":"slice"}}],[11,"clone","","",397,{"inputs":[{"name":"self"}],"output":{"name":"upvarid"}}],[11,"eq","","",397,{"inputs":[{"name":"self"},{"name":"upvarid"}],"output":{"name":"bool"}}],[11,"ne","","",397,{"inputs":[{"name":"self"},{"name":"upvarid"}],"output":{"name":"bool"}}],[11,"hash","","",397,null],[11,"encode","","",397,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",397,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",426,{"inputs":[{"name":"self"}],"output":{"name":"borrowkind"}}],[11,"eq","","",426,{"inputs":[{"name":"self"},{"name":"borrowkind"}],"output":{"name":"bool"}}],[11,"hash","","",426,null],[11,"fmt","","",426,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",426,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",426,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",427,{"inputs":[{"name":"self"},{"name":"upvarcapture"}],"output":{"name":"bool"}}],[11,"ne","","",427,{"inputs":[{"name":"self"},{"name":"upvarcapture"}],"output":{"name":"bool"}}],[11,"clone","","",427,{"inputs":[{"name":"self"}],"output":{"name":"upvarcapture"}}],[11,"fmt","","",427,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",427,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",427,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",398,{"inputs":[{"name":"self"},{"name":"upvarborrow"}],"output":{"name":"bool"}}],[11,"ne","","",398,{"inputs":[{"name":"self"},{"name":"upvarborrow"}],"output":{"name":"bool"}}],[11,"clone","","",398,{"inputs":[{"name":"self"}],"output":{"name":"upvarborrow"}}],[11,"encode","","",398,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",398,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",399,{"inputs":[{"name":"self"}],"output":{"name":"closureupvar"}}],[11,"clone","","",428,{"inputs":[{"name":"self"}],"output":{"name":"intvarvalue"}}],[11,"eq","","",428,{"inputs":[{"name":"self"},{"name":"intvarvalue"}],"output":{"name":"bool"}}],[11,"ne","","",428,{"inputs":[{"name":"self"},{"name":"intvarvalue"}],"output":{"name":"bool"}}],[11,"clone","","",400,{"inputs":[{"name":"self"}],"output":{"name":"typeparameterdef"}}],[11,"encode","","",400,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",400,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",401,{"inputs":[{"name":"self"}],"output":{"name":"regionparameterdef"}}],[11,"encode","","",401,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",401,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"to_early_bound_region_data","","",401,{"inputs":[{"name":"self"}],"output":{"name":"earlyboundregion"}}],[11,"to_bound_region","","",401,{"inputs":[{"name":"self"}],"output":{"name":"boundregion"}}],[11,"clone","","",402,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"fmt","","",402,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",402,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",402,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"parent_count","","",402,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"own_count","","",402,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"count","","",402,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"region_param","","",402,{"inputs":[{"name":"self"},{"name":"earlyboundregion"}],"output":{"name":"regionparameterdef"}}],[11,"type_param","","",402,{"inputs":[{"name":"self"},{"name":"paramty"}],"output":{"name":"typeparameterdef"}}],[11,"clone","","",403,{"inputs":[{"name":"self"}],"output":{"name":"genericpredicates"}}],[11,"default","","",403,{"inputs":[],"output":{"name":"genericpredicates"}}],[11,"instantiate","","",403,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"substs"}],"output":{"name":"instantiatedpredicates"}}],[11,"instantiate_own","","",403,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"substs"}],"output":{"name":"instantiatedpredicates"}}],[11,"instantiate_supertrait","","",403,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"polytraitref"}],"output":{"name":"instantiatedpredicates"}}],[11,"clone","","",429,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"eq","","",429,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"ne","","",429,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"hash","","",429,null],[11,"encode","","",429,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",429,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"subst_supertrait","","Performs a substitution suitable for going from a poly-trait-ref to supertraits that must hold if that poly-trait-ref holds. This is slightly different from a normal substitution in terms of what happens with bound regions.  See lengthy comment below for details.",429,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"polytraitref"}],"output":{"name":"predicate"}}],[11,"clone","","",404,{"inputs":[{"name":"self"}],"output":{"name":"traitpredicate"}}],[11,"eq","","",404,{"inputs":[{"name":"self"},{"name":"traitpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",404,{"inputs":[{"name":"self"},{"name":"traitpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",404,null],[11,"encode","","",404,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",404,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"def_id","","",404,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"input_types","","",404,null],[11,"self_ty","","",404,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"def_id","","",514,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"dep_node","","",514,{"inputs":[{"name":"self"}],"output":{"name":"depnode"}}],[11,"clone","","",405,{"inputs":[{"name":"self"}],"output":{"name":"equatepredicate"}}],[11,"eq","","",405,{"inputs":[{"name":"self"},{"name":"equatepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",405,{"inputs":[{"name":"self"},{"name":"equatepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",405,null],[11,"fmt","","",405,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",405,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",405,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",406,{"inputs":[{"name":"self"}],"output":{"name":"outlivespredicate"}}],[11,"eq","","",406,{"inputs":[{"name":"self"},{"name":"outlivespredicate"}],"output":{"name":"bool"}}],[11,"ne","","",406,{"inputs":[{"name":"self"},{"name":"outlivespredicate"}],"output":{"name":"bool"}}],[11,"hash","","",406,null],[11,"fmt","","",406,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",406,{"inputs":[{"name":"self"},{"name":"__sab"}],"output":{"name":"result"}}],[11,"decode","","",406,{"inputs":[{"name":"__dab"}],"output":{"name":"result"}}],[11,"clone","","",407,{"inputs":[{"name":"self"}],"output":{"name":"projectionpredicate"}}],[11,"eq","","",407,{"inputs":[{"name":"self"},{"name":"projectionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",407,{"inputs":[{"name":"self"},{"name":"projectionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",407,null],[11,"encode","","",407,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",407,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"item_name","","",515,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"to_poly_trait_ref","","",376,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"to_poly_trait_ref","","",514,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"to_poly_trait_ref","","",515,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"to_predicate","","",376,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",516,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",517,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",518,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",519,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"to_predicate","","",515,{"inputs":[{"name":"self"}],"output":{"name":"predicate"}}],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all cases this is skipping over a binder, so late-bound regions with depth 0 are bound by the predicate.",429,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"to_opt_poly_trait_ref","","",429,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",408,{"inputs":[{"name":"self"}],"output":{"name":"instantiatedpredicates"}}],[11,"empty","","",408,{"inputs":[],"output":{"name":"instantiatedpredicates"}}],[11,"is_empty","","",408,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",409,{"inputs":[{"name":"self"}],"output":{"name":"parameterenvironment"}}],[11,"with_caller_bounds","","",409,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"parameterenvironment"}}],[11,"for_item","","Construct a parameter environment given an item, impl item, or trait item",409,{"inputs":[{"name":"tyctxt"},{"name":"nodeid"}],"output":{"name":"parameterenvironment"}}],[11,"clone","","",410,{"inputs":[{"name":"self"}],"output":{"name":"destructor"}}],[11,"fmt","","",410,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"ne","","",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"clone","","",520,{"inputs":[{"name":"self"}],"output":{"name":"adtflags"}}],[11,"partial_cmp","","",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"option"}}],[11,"lt","","",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"le","","",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"gt","","",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"ge","","",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"cmp","","",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"ordering"}}],[11,"hash","","",520,null],[18,"NO_ADT_FLAGS","","",520,null],[18,"IS_ENUM","","",520,null],[18,"IS_PHANTOM_DATA","","",520,null],[18,"IS_FUNDAMENTAL","","",520,null],[18,"IS_UNION","","",520,null],[18,"IS_BOX","","",520,null],[11,"empty","","Returns an empty set of flags.",520,{"inputs":[],"output":{"name":"adtflags"}}],[11,"all","","Returns the set containing all flags.",520,{"inputs":[],"output":{"name":"adtflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",520,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",520,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",520,{"inputs":[{"name":"u32"}],"output":{"name":"adtflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",520,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",520,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if all of the flags in `other` are contained within `self`.",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"adtflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"adtflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"adtflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",520,{"inputs":[{"name":"self"},{"name":"adtflags"}],"output":{"name":"adtflags"}}],[11,"not","","Returns the complement of this set of flags.",520,{"inputs":[{"name":"self"}],"output":{"name":"adtflags"}}],[11,"fmt","","",411,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",430,{"inputs":[{"name":"self"}],"output":{"name":"variantdiscr"}}],[11,"fmt","","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",430,{"inputs":[{"name":"self"},{"name":"variantdiscr"}],"output":{"name":"bool"}}],[11,"ne","","",430,{"inputs":[{"name":"self"},{"name":"variantdiscr"}],"output":{"name":"bool"}}],[11,"encode","","",430,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",430,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",412,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",413,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",413,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",431,{"inputs":[{"name":"self"}],"output":{"name":"adtkind"}}],[11,"fmt","","",431,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",431,{"inputs":[{"name":"self"},{"name":"adtkind"}],"output":{"name":"bool"}}],[11,"clone","","",414,{"inputs":[{"name":"self"}],"output":{"name":"reproptions"}}],[11,"eq","","",414,{"inputs":[{"name":"self"},{"name":"reproptions"}],"output":{"name":"bool"}}],[11,"ne","","",414,{"inputs":[{"name":"self"},{"name":"reproptions"}],"output":{"name":"bool"}}],[11,"encode","","",414,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",414,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",414,{"inputs":[],"output":{"name":"reproptions"}}],[11,"new","","",414,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"reproptions"}}],[11,"discr_type","","",414,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"inhibit_enum_layout_opt","","Returns true if this `#[repr()]` should inhabit \"smart enum layout\" optimizations, such as representing `Foo<&T>` as a single pointer.",414,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct","","",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_union","","",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_enum","","",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"adt_kind","","Returns the kind of the ADT - Struct or Enum.",413,{"inputs":[{"name":"self"}],"output":{"name":"adtkind"}}],[11,"descr","","",413,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"variant_descr","","",413,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_dtorck","","Returns whether this is a dtorck type. If this returns true, this type being safe for destruction requires it to be alive; Otherwise, only the contents are required to be.",413,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"bool"}}],[11,"is_fundamental","","Returns whether this type is #[fundamental] for the purposes of coherence checking.",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_phantom_data","","Returns true if this is PhantomData<T>.",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_box","","Returns true if this is Box<T>.",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_dtor","","Returns whether this type has a destructor.",413,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"bool"}}],[11,"struct_variant","","Asserts this is a struct and returns the struct's unique variant.",413,{"inputs":[{"name":"self"}],"output":{"name":"variantdef"}}],[11,"predicates","","",413,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[11,"all_fields","","Returns an iterator over all fields contained by this ADT.",413,null],[11,"is_univariant","","",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_payloadfree","","",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"variant_with_id","","",413,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"variantdef"}}],[11,"variant_index_with_id","","",413,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"usize"}}],[11,"variant_of_def","","",413,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"variantdef"}}],[11,"discriminants","","",413,null],[11,"destructor","","",413,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"sized_constraint","","Returns a simpler type such that `Self: Sized` if and only if that type is Sized, or `TyErr` if this type is recursive.",413,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"find_field_named","","",411,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"index_of_field_named","","",411,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"field_named","","",411,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"fielddef"}}],[11,"ty","","",412,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"clone","","",415,{"inputs":[{"name":"self"}],"output":{"name":"itemsubsts"}}],[11,"encode","","",415,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",415,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",432,{"inputs":[{"name":"self"}],"output":{"name":"closurekind"}}],[11,"partial_cmp","","",432,{"inputs":[{"name":"self"},{"name":"closurekind"}],"output":{"name":"option"}}],[11,"cmp","","",432,{"inputs":[{"name":"self"},{"name":"closurekind"}],"output":{"name":"ordering"}}],[11,"eq","","",432,{"inputs":[{"name":"self"},{"name":"closurekind"}],"output":{"name":"bool"}}],[11,"hash","","",432,null],[11,"fmt","","",432,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",432,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",432,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"trait_did","","",432,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"defid"}}],[11,"extends","","True if this a type that impls this closure kind must also implement `other`.",432,{"inputs":[{"name":"self"},{"name":"closurekind"}],"output":{"name":"bool"}}],[11,"walk","","Iterator that walks `self` and any types reachable from `self`, in depth-first order. Note that just walks the types that appear in `self`, it does not descend into the fields of structs or variants. For example:",396,{"inputs":[{"name":"self"}],"output":{"name":"typewalker"}}],[11,"walk_shallow","","Iterator that walks the immediate children of `self`.  Hence `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]` (but not `i32`, like `walk`).",396,{"inputs":[{"name":"self"}],"output":{"name":"accintoiter"}}],[11,"maybe_walk","","Walks `ty` and any types appearing within `ty`, invoking the callback `f` on each type. If the callback returns false, then the children of the current type are ignored.",396,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"is_noop","","",415,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",433,{"inputs":[{"name":"self"}],"output":{"name":"lvaluepreference"}}],[11,"fmt","","",433,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",433,{"inputs":[{"name":"self"},{"name":"lvaluepreference"}],"output":{"name":"bool"}}],[11,"from_mutbl","","",433,{"inputs":[{"name":"mutability"}],"output":{"name":"self"}}],[11,"from_mutbl","","",426,{"inputs":[{"name":"mutability"}],"output":{"name":"borrowkind"}}],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow kind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a mutability that is stronger than necessary so that it at least *would permit* the borrow in question.",426,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"to_user_str","","",426,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"body_tables","","",444,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"typecktables"}}],[11,"item_tables","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"typecktables"}}],[11,"expr_span","","",444,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"span"}}],[11,"local_var_name_str","","",444,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"internedstring"}}],[11,"expr_is_lval","","",444,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"provided_trait_methods","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"trait_impl_polarity","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"trait_relevant_for_never","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"custom_coerce_unsized_kind","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"customcoerceunsized"}}],[11,"associated_item","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"associated_item_def_ids","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"associated_items","","",444,null],[11,"impl_trait_ref","","Returns the trait-ref corresponding to a given impl, or None if it is an inherent impl.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"expect_variant_def","","",444,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"variantdef"}}],[11,"def_key","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","Convert a `DefId` into its fully expanded `DefPath` (every `DefId` is really just an interned def-path).",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"def_span","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"span"}}],[11,"vis_is_accessible_from","","",444,{"inputs":[{"name":"self"},{"name":"visibility"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"item_name","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"name"}}],[11,"item_type","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ty"}}],[11,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"traitdef"}}],[11,"lookup_adt_def","","Given the did of an ADT, return a reference to its definition.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"adtdef"}}],[11,"item_generics","","Given the did of an item, returns its generics.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_predicates","","Given the did of an item, returns its full set of predicates.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_super_predicates","","Given the did of a trait, returns its superpredicates.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"genericpredicates"}}],[11,"item_mir","","Given the did of an item, returns its MIR, borrowed immutably.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ref"}}],[11,"maybe_item_mir","","Given the DefId of an item, returns its MIR, borrowed immutably. Returns None if there is no MIR for the DefId",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"type_needs_drop_given_env","","If `type_needs_drop` returns true, then `ty` is definitely non-copy and *might* have a destructor attached; if it returns false, then `ty` definitely has no destructor (i.e. no drop glue).",444,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"parameterenvironment"}],"output":{"name":"bool"}}],[11,"get_attrs","","Get the attributes of a definition.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"cow"}}],[11,"has_attr","","Determine whether an item is annotated with an attribute",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"str"}],"output":{"name":"bool"}}],[11,"item_variances","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"trait_has_default_impl","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"populate_inherent_implementations_for_type_if_necessary","","Populates the type context with all the inherent implementations for the given type if necessary.",444,{"inputs":[{"name":"self"},{"name":"span"},{"name":"defid"}],"output":null}],[11,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given trait if necessary.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":null}],[11,"closure_kind","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"closurekind"}}],[11,"closure_type","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"polyfnsig"}}],[11,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements. If it implements no trait, return `None`.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the ID of the impl that the method belongs to. Otherwise, return `None`.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","If the given def ID describes an item belonging to a trait, return the ID of the trait that the trait item belongs to. Otherwise, return `None`.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there are no free type/lifetime parameters in scope.",444,{"inputs":[{"name":"self"}],"output":{"name":"parameterenvironment"}}],[11,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from the \"outer\" view of a type or method to the \"inner\" view. In general, this means converting from bound parameters to free parameters. Since we currently represent bound/free type parameters in the same way, this only has an effect on regions.",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"codeextent"}],"output":{"name":"substs"}}],[11,"construct_parameter_environment","","See `ParameterEnvironment` struct def'n for details. If you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)` for the `free_id_outlive` parameter. (But note that this is not always quite right.)",444,{"inputs":[{"name":"self"},{"name":"span"},{"name":"defid"},{"name":"codeextent"}],"output":{"name":"parameterenvironment"}}],[11,"node_scope_region","","",444,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"visit_all_item_likes_in_krate","","",444,{"inputs":[{"name":"self"},{"name":"f"},{"name":"v"}],"output":null}],[11,"visit_all_bodies_in_krate","","Invokes `callback` for each body in the krate. This will create a read edge from `DepNode::Krate` to the current task; it is meant to be run in the context of some global task like `BorrowckCrate`. The callback would then create a task like `BorrowckBody(DefId)` to process each individual item.",444,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[11,"span_of_impl","","Looks up the span of `impl_did` if the impl is local; otherwise returns `Err` with the name of the crate containing the impl.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"result"}}],[11,"with_freevars","","",444,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"t"}}],[0,"util","rustc","",null,null],[0,"common","rustc::util","",null,null],[3,"ErrorReported","rustc::util::common","",null,null],[3,"Indenter","","",null,null],[5,"time_depth","","Read the current depth of `time()` calls. This is used to encourage indentation across threads.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"set_time_depth","","Set the current depth of `time()` calls. The idea is to call `set_time_depth()` with the result from `time_depth()` in the parent thread.",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"duration_to_secs_str","","",null,{"inputs":[{"name":"duration"}],"output":{"name":"string"}}],[5,"to_readable_str","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"record_time","","",null,{"inputs":[{"name":"cell"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[17,"FN_OUTPUT_NAME","","",null,null],[8,"MemoizationMap","","",null,null],[16,"Key","","",521,null],[16,"Value","","",521,null],[10,"memoize","","If `key` is present in the map, return the valuee, otherwise invoke `op` and store the value in the map.",521,null],[11,"clone","","",522,{"inputs":[{"name":"self"}],"output":{"name":"errorreported"}}],[11,"fmt","","",522,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",523,{"inputs":[{"name":"self"}],"output":null}],[0,"ppaux","rustc::util","",null,null],[5,"verbose","rustc::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"parameterized","","",null,null],[11,"fmt","rustc::ty","",400,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",401,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",396,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",415,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc::ty::trait_def","",499,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc::ty","",413,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc::ty::adjustment","",434,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc::ty","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",409,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",424,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",403,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",416,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",418,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",396,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",397,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",416,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",406,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",405,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",404,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",404,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",407,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",407,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",373,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",432,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"nodemap","rustc::util","An efficient hash map for node IDs",null,null],[6,"FxHashMap","rustc::util::nodemap","",null,null],[6,"FxHashSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"nodemap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"defidmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"nodeset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"defidset"}}],[6,"NodeMap","","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[0,"fs","rustc::util","",null,null],[4,"LinkOrCopy","rustc::util::fs","",null,null],[13,"Link","","",524,null],[13,"Copy","","",524,null],[4,"RenameOrCopyRemove","","",null,null],[13,"Rename","","",525,null],[13,"CopyRemove","","",525,null],[5,"fix_windows_verbatim_for_gcc","","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[5,"link_or_copy","","Copy `p` into `q`, preferring to use hard-linking if possible. If `q` already exists, it is removed first. The result indicates which of the two operations has been performed.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"rename_or_copy_remove","","Rename `p` into `q`, preferring to use `rename` if possible. If `rename` fails (rename may fail for reasons such as crossing filesystem), fallback to copy & remove",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"create_dir_racy","","",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"fmt","","",525,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"DIAGNOSTICS","rustc","",null,null],[14,"bug","","",null,null],[14,"span_bug","","",null,null],[14,"lint_initializer","","Build a `Lint` initializer.",null,null],[14,"declare_lint","","Declare a static item of type `&'static Lint`.",null,null],[14,"lint_array","","Declare a static `LintArray` and return it as an expression.",null,null],[11,"print_node","rustc::hir::print","",137,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"result"}}],[11,"note_and_explain_region","rustc::ty","",444,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"str"},{"name":"region"},{"name":"str"}],"output":null}],[11,"index","","",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_index","","",383,{"inputs":[{"name":"u32"}],"output":{"name":"intvid"}}],[11,"tag","","",383,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"index","","",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_index","","",385,{"inputs":[{"name":"u32"}],"output":{"name":"regionvid"}}],[11,"tag","","",385,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","","",428,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"index","","",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_index","","",384,{"inputs":[{"name":"u32"}],"output":{"name":"floatvid"}}],[11,"tag","","",384,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"index","","",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_index","","",382,{"inputs":[{"name":"u32"}],"output":{"name":"tyvid"}}],[11,"tag","","",382,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_parts","","",409,null],[11,"infer_ctxt","","",444,{"inputs":[{"name":"self"},{"name":"e"},{"name":"reveal"}],"output":{"name":"inferctxtbuilder"}}],[11,"borrowck_fake_infer_ctxt","","Fake InferCtxt with the global tcx. Used by pre-MIR borrowck for MemCategorizationContext/ExprUseVisitor. If any inference functionality is used, ICEs will occur.",444,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"inferctxt"}}],[11,"trans_normalize","","",526,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"trans_normalize","","",371,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"trans_normalize","","",527,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"trans_normalize","","",374,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"trans_normalize","","",516,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"trans_normalize","","",377,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"trans_normalize","rustc::mir::tcx","",281,{"inputs":[{"name":"self"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"erase_late_bound_regions_and_normalize","rustc::ty","Currently, higher-ranked type bounds inhibit normalization. Therefore, each time we erase them in translation, we need to normalize the contents.",444,{"inputs":[{"name":"self"},{"name":"binder"}],"output":{"name":"t"}}],[11,"normalize_associated_type","","",444,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"normalize_associated_type_in_env","","",444,{"inputs":[{"name":"self"},{"name":"t"},{"name":"parameterenvironment"}],"output":{"name":"t"}}],[11,"current_level","rustc::lint","Get the level of `lint` at the current position of the lint traversal.",190,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"level"}}],[11,"level_src","","",190,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"option"}}],[11,"lookup_and_emit","","",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":null}],[11,"lookup","","",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":null}],[11,"early_lint","","",190,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":null}],[11,"struct_span_lint","","",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",190,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"str"}],"output":null}],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the current lint context, call the provided function, then reset the lints in effect to their previous state.",190,null],[11,"new_unsigned","rustc::middle::const_val","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",202,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"new_signed","","Creates a new signed ConstInt with matching type while also checking that overflow does not happen.",202,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"option"}}],[11,"new_unsigned_truncating","","Creates a new unsigned ConstInt with matching type.",202,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"constint"}}],[11,"new_signed_truncating","","Creates a new signed ConstInt with matching type.",202,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"constint"}}],[11,"description","","Description of the type, not the value",202,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_u128_unchecked","","Erases the type and returns a u128. This is not the same as `-5i8 as u128` but as `-5i8 as i128 as u128`",202,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u32","","Converts the value to a `u32` if it's in the range 0...std::u32::MAX",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","Converts the value to a `u64` if it's in the range 0...std::u64::MAX",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u128","","Converts the value to a `u128` if it's in the range 0...std::u128::MAX",202,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",202,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64","","",202,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_negative","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",202,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"int_type","","",202,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"neg","","",202,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitxor","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",202,null],[11,"decode","","",202,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"option"}}],[11,"sub","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"not","","",202,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitor","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"div","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"bitand","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"shl","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"add","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"rem","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"shr","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"mul","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"encode","","",202,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",202,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"ordering"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"require_lang_item","rustc::ty","",444,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"defid"}}],[11,"check_stability","","",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"lookup_stability","","Lookup the stability for a node, loading external crate metadata as necessary.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lookup_deprecation","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lookup_deprecation_entry","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"recursive_type_with_infinite_size_error","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"diagnosticbuilder"}}],[11,"report_object_safety_error","","",444,{"inputs":[{"name":"self"},{"name":"span"},{"name":"defid"},{"name":"vec"}],"output":{"name":"diagnosticbuilder"}}],[11,"is_object_safe","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"astconv_object_safety_violations","","Returns the object safety violations that affect astconv - currently, Self in supertraits. This is needed because `object_safety_violations` can't be used during type collection.",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"object_safety_violations","","",444,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"is_vtable_safe_method","","We say a method is *vtable safe* if it can be invoked on a trait object.  Note that object-safe traits can have some non-vtable-safe methods, so long as they require `Self:Sized` or otherwise ensure that they cannot be used when `Self=Trait`.",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"associateditem"}],"output":{"name":"bool"}}],[11,"derived_cause","rustc::traits","Creates a cause for obligations that are derived from `obligation` by a recursive search (e.g., for a builtin bound, or eventually a `impl Foo for ..`). If `obligation` is itself a derived obligation, this is just a clone, but otherwise we create a \"derived obligation\" cause so as to keep track of the original root obligation for error reporting.",528,null],[11,"predicate_for_trait_def","rustc::ty","",444,null],[11,"upcast_choices","","Cast a trait reference into a reference to one of its super traits; returns `None` if `target_trait_def_id` is not a supertrait.",444,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"count_own_vtable_entries","","Given a trait `trait_ref`, returns the number of vtable entries that come from `trait_ref`, excluding its supertraits. Used in computing the vtable base for an upcast trait of a trait object.",444,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"usize"}}],[11,"get_vtable_index_of_object_method","","Given an upcast trait object described by `object`, returns the index of the method `method_def_id` (which should be part of `object.upcast_trait_ref`) within the vtable for `object`.",444,{"inputs":[{"name":"self"},{"name":"vtableobjectdata"},{"name":"defid"}],"output":{"name":"usize"}}],[11,"closure_trait_ref_and_return_type","","",444,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"ty"},{"name":"polyfnsig"},{"name":"tupleargumentsflag"}],"output":{"name":"binder"}}],[11,"relate","","",526,{"inputs":[{"name":"r"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[11,"with_self_ty","","Object types don't have a self-type specified. Therefore, when we convert the principal trait-ref into a normal trait-ref, you must give *some* self-type. A common choice is `mk_err()` or some skolemized type.",529,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"polytraitref"}}],[11,"lift_to_tcx","","",526,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"super_fold_with","","",526,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",526,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_visit_with","","",526,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"visit_with","","",526,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"self_ty","","",516,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"def_id","","",516,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"substs","","",516,{"inputs":[{"name":"self"}],"output":{"name":"substs"}}],[11,"input_types","","",516,null],[11,"to_poly_trait_predicate","","",516,{"inputs":[{"name":"self"}],"output":{"name":"polytraitpredicate"}}],[11,"def_id","","",529,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"input_types","","",529,null],[11,"inputs","","",527,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"input","","",527,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"binder"}}],[11,"output","","",527,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"variadic","","",527,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unsafety","","",527,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"abi","","",527,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"item_name","","",530,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"sort_key","","",530,null],[11,"with_self_ty","","",530,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"ty"}],"output":{"name":"polyprojectionpredicate"}}]],"paths":[[3,"CFG"],[3,"CFGEdgeData"],[4,"CFGNodeData"],[3,"LabelledCFG"],[3,"WorkProductId"],[3,"WorkProduct"],[3,"DepGraphQuery"],[3,"AssertDepGraphSafe"],[4,"DepNode"],[3,"EdgeFilter"],[3,"DepNodeFilter"],[3,"DepTrackingMap"],[3,"DepGraph"],[3,"DepTask"],[8,"DepTrackingMapConfig"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"BodyId"],[3,"Body"],[3,"Expr"],[3,"Destination"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItemId"],[3,"TraitItem"],[3,"ImplItemId"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"ItemId"],[3,"Item"],[3,"TraitItemRef"],[3,"ImplItemRef"],[3,"ForeignItem"],[3,"Freevar"],[3,"TraitCandidate"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"UnsafeGeneric"],[4,"WherePredicate"],[4,"BindingMode"],[4,"RangeEnd"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"Decl_"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[4,"QPath"],[4,"MatchSource"],[4,"LoopSource"],[4,"LoopIdError"],[4,"LoopIdResult"],[4,"CaptureClause"],[4,"TraitMethod"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"PrimTy"],[4,"Ty_"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"UseKind"],[4,"Visibility"],[4,"VariantData"],[4,"Item_"],[4,"AssociatedItemKind"],[4,"ForeignItem_"],[3,"Export"],[4,"CtorKind"],[4,"Def"],[3,"PathResolution"],[3,"DefId"],[3,"CrateNum"],[3,"DefIndex"],[3,"IdRange"],[4,"FnKind"],[4,"NestedVisitorMap"],[8,"Visitor"],[3,"IdRangeComputingVisitor"],[8,"ItemLikeVisitor"],[3,"DeepVisitor"],[8,"Resolver"],[3,"LoweringContext"],[3,"DefCollector"],[3,"MacroInvocationData"],[3,"Forest"],[3,"Map"],[4,"Node"],[4,"Code"],[8,"MaybeFnLike"],[3,"FnLikeNode"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefPath"],[4,"DefPathData"],[3,"DefPathTable"],[3,"Definitions"],[3,"NodesMatchingSuffix"],[8,"EnumerateAndAdjustIterator"],[3,"EnumerateAndAdjust"],[3,"State"],[4,"AnnNode"],[4,"Nested"],[8,"PpAnn"],[3,"Svh"],[3,"InferOk"],[3,"InferCtxt"],[4,"InferTables"],[4,"InferTablesRef"],[4,"ValuePairs"],[4,"SubregionOrigin"],[4,"ParameterOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"FixupError"],[8,"LatticeDir"],[4,"Constraint"],[4,"GenericKind"],[4,"VerifyBound"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"ProcessedErrorOrigin"],[4,"VarValue"],[3,"Verify"],[3,"TwoRegions"],[3,"TaintDirections"],[3,"RegionVarBindings"],[3,"RegionSnapshot"],[3,"OpportunisticTypeResolver"],[3,"OpportunisticTypeAndRegionResolver"],[3,"TypeFreshener"],[3,"Default"],[4,"TypeVariableOrigin"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"RegionVidKey"],[8,"ToType"],[8,"InferEnv"],[8,"TransNormalize"],[3,"TypeTrace"],[3,"InferCtxtBuilder"],[3,"LateContext"],[3,"EarlyContext"],[3,"FutureIncompatibleInfo"],[3,"EarlyLint"],[3,"Lint"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"LintId"],[3,"LintTable"],[8,"LintContext"],[8,"IntoEarlyLint"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[8,"Delegate"],[3,"ExprUseVisitor"],[4,"ConstInt"],[4,"ConstVal"],[3,"LinkMeta"],[3,"CrateSource"],[3,"NativeLibrary"],[3,"ExternCrate"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[4,"LoadedMacro"],[8,"CrateStore"],[8,"CrateLoader"],[3,"DummyCrateStore"],[4,"EntryOrExit"],[4,"KillFrom"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"DataFlowContext"],[4,"Linkage"],[3,"FreeRegionMap"],[3,"LanguageItems"],[4,"LangItem"],[3,"Upvar"],[3,"cmt_"],[3,"MemCategorizationContext"],[3,"MemCategorizationOptions"],[4,"Categorization"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[4,"Aliasability"],[4,"AliasableReason"],[8,"ast_node"],[3,"AccessLevels"],[4,"AccessLevel"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"CodeExtentData"],[3,"CodeExtent"],[3,"Context"],[3,"RegionMaps"],[3,"NamedRegionMap"],[4,"Region"],[4,"Set1"],[3,"DeprecationEntry"],[4,"StabilityLevel"],[3,"Index"],[3,"Mir"],[3,"SourceInfo"],[3,"LocalDecl"],[3,"UpvarDecl"],[3,"BasicBlockData"],[3,"Terminator"],[3,"Statement"],[3,"Static"],[3,"Projection"],[3,"VisibilityScopeData"],[3,"Constant"],[3,"Location"],[4,"Mutability"],[4,"BorrowKind"],[4,"LocalKind"],[4,"TerminatorKind"],[4,"AssertMessage"],[4,"StatementKind"],[4,"Lvalue"],[4,"ProjectionElem"],[4,"Operand"],[4,"Rvalue"],[4,"CastKind"],[4,"AggregateKind"],[4,"BinOp"],[4,"UnOp"],[4,"Literal"],[4,"LvalueTy"],[4,"LvalueContext"],[8,"Visitor"],[8,"MutVisitor"],[4,"MirSource"],[8,"Pass"],[8,"MirMapPass"],[8,"MirPassHook"],[8,"MirPass"],[3,"Passes"],[3,"Preorder"],[3,"Postorder"],[3,"ReversePostorder"],[3,"Local"],[3,"BasicBlock"],[3,"Field"],[3,"VisibilityScope"],[3,"Promoted"],[3,"FieldInfo"],[3,"TypeSizeInfo"],[3,"VariantInfo"],[3,"Session"],[3,"PerfStats"],[4,"DataTypeKind"],[4,"SizeKind"],[4,"IncrCompSession"],[3,"CodeStats"],[3,"Config"],[3,"Options"],[3,"OutputFilenames"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[3,"RustcOptGroup"],[4,"Sanitizer"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[4,"PrintRequest"],[4,"Input"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"OptionStability"],[3,"OutputTypes"],[3,"Externs"],[3,"FileSearch"],[4,"FileMatch"],[4,"PathKind"],[3,"SearchPaths"],[3,"Iter"],[3,"RegionObligation"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[3,"OverlapError"],[3,"Obligation"],[3,"ObligationCause"],[3,"FulfillmentError"],[3,"VtableImplData"],[3,"VtableClosureData"],[3,"VtableDefaultImplData"],[3,"VtableBuiltinData"],[3,"VtableObjectData"],[3,"VtableFnPointerData"],[4,"OrphanCheckErr"],[4,"Reveal"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[4,"MethodMatchResult"],[4,"MethodMatchedData"],[4,"ObligationCauseCode"],[4,"SelectionError"],[4,"FulfillmentErrorCode"],[4,"Vtable"],[3,"NodeItem"],[4,"Node"],[3,"TraitErrorKey"],[3,"FulfillmentContext"],[3,"GlobalFulfilledPredicates"],[3,"ProjectionCache"],[3,"SelectionCache"],[3,"EvaluationCache"],[3,"SelectionContext"],[3,"Graph"],[3,"Ancestors"],[3,"SpecializesCache"],[3,"DerivedObligationCause"],[3,"SupertraitDefIds"],[3,"Binder"],[3,"DebruijnIndex"],[3,"FnSig"],[3,"ParamTy"],[3,"ProjectionTy"],[3,"ClosureSubsts"],[3,"TypeAndMut"],[3,"TraitRef"],[3,"ExistentialTraitRef"],[3,"ExistentialProjection"],[3,"EarlyBoundRegion"],[3,"FreeRegion"],[3,"Issue32330"],[3,"TyVid"],[3,"IntVid"],[3,"FloatVid"],[3,"RegionVid"],[3,"SkolemizedRegionVid"],[3,"TypeContents"],[3,"TypeckTables"],[3,"CrateAnalysis"],[3,"Resolutions"],[3,"ImplHeader"],[3,"AssociatedItem"],[3,"MethodCallee"],[3,"MethodCall"],[3,"CReaderCacheKey"],[3,"TyS"],[3,"UpvarId"],[3,"UpvarBorrow"],[3,"ClosureUpvar"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionPredicate"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"Destructor"],[3,"VariantDef"],[3,"FieldDef"],[3,"AdtDef"],[3,"ReprOptions"],[3,"ItemSubsts"],[4,"InferTy"],[4,"ExistentialPredicate"],[4,"TypeVariants"],[4,"BoundRegion"],[4,"Region"],[4,"AssociatedItemContainer"],[4,"AssociatedKind"],[4,"Visibility"],[4,"Variance"],[4,"FragmentInfo"],[4,"BorrowKind"],[4,"UpvarCapture"],[4,"IntVarValue"],[4,"Predicate"],[4,"VariantDiscr"],[4,"AdtKind"],[4,"ClosureKind"],[4,"LvaluePreference"],[3,"Adjustment"],[4,"Adjust"],[4,"AutoBorrow"],[4,"CustomCoerceUnsized"],[4,"IntTy"],[4,"CastTy"],[4,"CastKind"],[3,"ExpectedFound"],[4,"TypeError"],[4,"UnconstrainedNumeric"],[3,"TyCtxt"],[4,"SimplifiedType"],[3,"BottomUpFolder"],[8,"TypeFoldable"],[8,"TypeFolder"],[8,"TypeVisitor"],[3,"RegionFolder"],[3,"DefIdForest"],[4,"RootMode"],[8,"ItemPathBuffer"],[3,"TargetDataLayout"],[3,"Struct"],[3,"Union"],[4,"Endian"],[4,"Integer"],[4,"Primitive"],[4,"Layout"],[4,"LayoutError"],[4,"SizeSkeleton"],[3,"Size"],[3,"Align"],[3,"Match"],[3,"Maps"],[3,"Providers"],[4,"Query"],[3,"ty"],[3,"generics"],[3,"predicates"],[3,"super_predicates"],[3,"type_param_predicates"],[3,"trait_def"],[3,"adt_def"],[3,"adt_destructor"],[3,"adt_sized_constraint"],[3,"variances"],[3,"associated_item_def_ids"],[3,"associated_item"],[3,"impl_trait_ref"],[3,"inherent_impls"],[3,"mir"],[3,"mir_const_qualif"],[3,"closure_kind"],[3,"closure_type"],[3,"custom_coerce_unsized_kind"],[3,"typeck_tables"],[3,"coherent_trait"],[3,"coherent_inherent_impls"],[3,"monomorphic_const_eval"],[4,"Component"],[4,"Cause"],[8,"TypeRelation"],[8,"Relate"],[8,"Subst"],[3,"Kind"],[6,"Substs"],[3,"TraitDef"],[3,"TraitFlags"],[3,"TypeWalker"],[4,"ImpliedBound"],[4,"CopyImplementationError"],[4,"Representability"],[8,"IntTypeExt"],[3,"TypeIdHasher"],[3,"GlobalArenas"],[3,"Slice"],[3,"TypeFlags"],[8,"Lift"],[8,"DefIdTree"],[8,"ToPolyTraitRef"],[8,"ToPredicate"],[6,"PolyTraitPredicate"],[6,"PolyProjectionPredicate"],[6,"PolyTraitRef"],[6,"PolyEquatePredicate"],[6,"PolyRegionOutlivesPredicate"],[6,"PolyTypeOutlivesPredicate"],[3,"AdtFlags"],[8,"MemoizationMap"],[3,"ErrorReported"],[3,"Indenter"],[4,"LinkOrCopy"],[4,"RenameOrCopyRemove"],[6,"Ty"],[6,"PolyFnSig"],[6,"TraitObligation"],[6,"PolyExistentialTraitRef"],[6,"PolyExistentialProjection"]]};
searchIndex["rustc_back"] = {"doc":"Some stuff used by rustc that doesn't have many dependencies","items":[[4,"PanicStrategy","rustc_back","",null,null],[13,"Unwind","","",0,null],[13,"Abort","","",0,null],[0,"tempdir","","",null,null],[3,"TempDir","rustc_back::tempdir","A wrapper for a path to temporary directory implementing automatic scope-based deletion.",null,null],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory will be automatically deleted once the returned wrapper is destroyed.",1,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix `prefix`. The directory will be automatically deleted once the returned wrapper is destroyed.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper. This discards the wrapper so that the automatic deletion of the temporary directory is prevented.",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",1,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary directory",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[0,"target","rustc_back","Flexible target specification.",null,null],[3,"Target","rustc_back::target","Everything `rustc` knows about how to compile for a specific target.",null,null],[12,"llvm_target","","Target triple to pass to LLVM.",2,null],[12,"target_endian","","String to use as the `target_endian` `cfg` variable.",2,null],[12,"target_pointer_width","","String to use as the `target_pointer_width` `cfg` variable.",2,null],[12,"target_os","","OS name to use for conditional compilation.",2,null],[12,"target_env","","Environment name to use for conditional compilation.",2,null],[12,"target_vendor","","Vendor name to use for conditional compilation.",2,null],[12,"arch","","Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", and \"powerpc64\".",2,null],[12,"data_layout","","Data layout to pass to LLVM.",2,null],[12,"options","","Optional settings with defaults.",2,null],[3,"TargetOptions","","Optional aspects of a target specification.",null,null],[12,"is_builtin","","Whether the target is built-in or loaded from a custom target specification.",3,null],[12,"linker","","Linker to invoke. Defaults to \"cc\".",3,null],[12,"ar","","Archive utility to use when managing archives. Defaults to \"ar\".",3,null],[12,"pre_link_args","","Linker arguments that are unconditionally passed *before* any user-defined libraries.",3,null],[12,"pre_link_objects_exe","","Objects to link before all others, always found within the sysroot folder.",3,null],[12,"pre_link_objects_dll","","",3,null],[12,"late_link_args","","Linker arguments that are unconditionally passed after any user-defined but before post_link_objects.  Standard platform libraries that should be always be linked to, usually go here.",3,null],[12,"post_link_objects","","Objects to link after all others, always found within the sysroot folder.",3,null],[12,"post_link_args","","Linker arguments that are unconditionally passed *after* any user-defined libraries.",3,null],[12,"asm_args","","Extra arguments to pass to the external assembler (when used)",3,null],[12,"cpu","","Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults to \"generic\".",3,null],[12,"features","","Default target features to pass to LLVM. These features will *always* be passed, and cannot be disabled even via `-C`. Corresponds to `llc -mattr=$features`.",3,null],[12,"dynamic_linking","","Whether dynamic linking is available on this target. Defaults to false.",3,null],[12,"executables","","Whether executables are available on this target. iOS, for example, only allows static libraries. Defaults to false.",3,null],[12,"relocation_model","","Relocation model to use in object file. Corresponds to `llc -relocation-model=$relocation_model`. Defaults to \"pic\".",3,null],[12,"code_model","","Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to \"default\".",3,null],[12,"disable_redzone","","Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.",3,null],[12,"eliminate_frame_pointer","","Eliminate frame pointers from stack frames if possible. Defaults to true.",3,null],[12,"function_sections","","Emit each function in its own section. Defaults to true.",3,null],[12,"dll_prefix","","String to prepend to the name of every dynamic library. Defaults to \"lib\".",3,null],[12,"dll_suffix","","String to append to the name of every dynamic library. Defaults to \".so\".",3,null],[12,"exe_suffix","","String to append to the name of every executable.",3,null],[12,"staticlib_prefix","","String to prepend to the name of every static library. Defaults to \"lib\".",3,null],[12,"staticlib_suffix","","String to append to the name of every static library. Defaults to \".a\".",3,null],[12,"target_family","","OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".",3,null],[12,"is_like_openbsd","","Whether the target toolchain is like OpenBSD's. Only useful for compiling against OpenBSD, for configuring abi when returning a struct.",3,null],[12,"is_like_osx","","Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS, in particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.",3,null],[12,"is_like_solaris","","Whether the target toolchain is like Solaris's. Only useful for compiling against Illumos/Solaris, as they have a different set of linker flags. Defaults to false.",3,null],[12,"is_like_windows","","Whether the target toolchain is like Windows'. Only useful for compiling against Windows, only really used for figuring out how to find libraries, since Windows uses its own library naming convention. Defaults to false.",3,null],[12,"is_like_msvc","","",3,null],[12,"is_like_android","","Whether the target toolchain is like Android's. Only useful for compiling against Android. Defaults to false.",3,null],[12,"is_like_emscripten","","Whether the target toolchain is like Emscripten's. Only useful for compiling with Emscripten toolchain. Defaults to false.",3,null],[12,"linker_is_gnu","","Whether the linker support GNU-like arguments such as -O. Defaults to false.",3,null],[12,"allows_weak_linkage","","The MinGW toolchain has a known issue that prevents it from correctly handling COFF object files with more than 2^15 sections. Since each weak symbol needs its own COMDAT section, weak linkage implies a large number sections that easily exceeds the given limit for larger codebases. Consequently we want a way to disallow weak linkage on some platforms.",3,null],[12,"has_rpath","","Whether the linker support rpaths or not. Defaults to false.",3,null],[12,"no_default_libraries","","Whether to disable linking to the default libraries, typically corresponds to `-nodefaultlibs`. Defaults to true.",3,null],[12,"position_independent_executables","","Dynamically linked executables can be compiled as position independent if the default relocation model of position independent code is not changed. This is a requirement to take advantage of ASLR, as otherwise the functions in the executable are not randomized and can be used during an exploit of a vulnerability in any code.",3,null],[12,"archive_format","","Format that archives should be emitted in. This affects whether we use LLVM to assemble an archive or fall back to the system linker, and currently only \"gnu\" is used to fall into LLVM. Unknown strings cause the system linker to be used.",3,null],[12,"allow_asm","","Is asm!() allowed? Defaults to true.",3,null],[12,"custom_unwind_resume","","Whether the target uses a custom unwind resumption routine. By default LLVM lowers `resume` instructions into calls to `_Unwind_Resume` defined in libgcc.  If this option is enabled, the target must provide `eh_unwind_resume` lang item.",3,null],[12,"lib_allocation_crate","","Default crate for allocation symbols to link against",3,null],[12,"exe_allocation_crate","","",3,null],[12,"has_elf_tls","","Flag indicating whether ELF TLS (e.g. #[thread_local]) is available for this target.",3,null],[12,"obj_is_bitcode","","",3,null],[12,"no_integrated_as","","",3,null],[12,"min_atomic_width","","Don't use this field; instead use the `.min_atomic_width()` method.",3,null],[12,"max_atomic_width","","Don't use this field; instead use the `.max_atomic_width()` method.",3,null],[12,"panic_strategy","","Panic strategy: \"unwind\" or \"abort\"",3,null],[12,"abi_blacklist","","A blacklist of ABIs unsupported by the current target. Note that generic ABIs are considered to be supported on all platforms and cannot be blacklisted.",3,null],[12,"crt_static_default","","Whether or not the CRT is statically linked by default.",3,null],[5,"get_targets","","",null,{"inputs":[],"output":{"name":"box"}}],[6,"TargetResult","","",null,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"targetoptions"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"targetoptions"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"targetoptions"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for compilation, will certainly not work.",3,{"inputs":[],"output":{"name":"targetoptions"}}],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",2,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"abi"}}],[11,"min_atomic_width","","Minimum integer size in bits that this target can perform atomic operations on.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"max_atomic_width","","Maximum integer size in bits that this target can perform atomic operations on.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_abi_supported","","",2,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"from_json","","Load a target descriptor from a JSON object.",2,{"inputs":[{"name":"json"}],"output":{"name":"targetresult"}}],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target triple. Note that it could also just be a bare filename already, so also check for that. If one of the hardcoded targets we know about, just return it directly.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_json","","",2,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[0,"slice","rustc_back","",null,null],[5,"ref_slice","rustc_back::slice","",null,null],[5,"mut_ref_slice","","",null,null],[0,"dynamic_lib","rustc_back","Dynamic library facilities.",null,null],[3,"DynamicLibrary","rustc_back::dynamic_lib","",null,null],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"open","","Lazily open a dynamic library. When passed None it gives a handle to the calling process",4,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",4,{"inputs":[{"name":"path"}],"output":null}],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an environment variable for this platforms dylib search path.",4,null],[11,"envvar","","Returns the environment variable for this process's dynamic library search path",4,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this process",4,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","rustc_back","",0,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"panicstrategy"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"desc","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_json","","",0,{"inputs":[{"name":"self"}],"output":{"name":"json"}}]],"paths":[[4,"PanicStrategy"],[3,"TempDir"],[3,"Target"],[3,"TargetOptions"],[3,"DynamicLibrary"]]};
searchIndex["rustc_bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","rustc_bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["rustc_borrowck"] = {"doc":"","items":[[3,"AnalysisData","rustc_borrowck","Collection of conclusions determined via borrow checker analyses.",null,null],[12,"all_loans","","",0,null],[12,"loans","","",0,null],[12,"move_data","","",0,null],[3,"BorrowckCtxt","","",null,null],[3,"ElaborateDrops","","",null,null],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"build_borrowck_dataflow_data_for_fn","","Accessor for introspective clients inspecting `AnalysisData` and the `BorrowckCtxt` itself , e.g. the flowgraph visualizer.",null,null],[0,"diagnostics","","",null,null],[11,"run_pass","","",1,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"is_subregion_of","","",2,{"inputs":[{"name":"self"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"report","","",2,{"inputs":[{"name":"self"},{"name":"bckerror"}],"output":null}],[11,"report_use_of_moved_value","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"movedvalueusekind"},{"name":"loanpath"},{"name":"move"},{"name":"loanpath"},{"name":"parameterenvironment"}],"output":null}],[11,"report_partial_reinitialization_of_uninitialized_structure","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"loanpath"}],"output":null}],[11,"report_reassigned_immutable_variable","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"loanpath"},{"name":"assignment"}],"output":null}],[11,"span_err","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"struct_span_err","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_err_with_code","","",2,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"bckerr_to_diag","","",2,{"inputs":[{"name":"self"},{"name":"bckerror"}],"output":{"name":"diagnosticbuilder"}}],[11,"report_aliasability_violation","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"aliasableviolationkind"},{"name":"aliasablereason"},{"name":"cmt"}],"output":null}],[11,"note_and_explain_bckerr","","",2,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"},{"name":"bckerror"}],"output":null}],[11,"append_loan_path_to_string","","",2,{"inputs":[{"name":"self"},{"name":"loanpath"},{"name":"string"}],"output":null}],[11,"append_autoderefd_loan_path_to_string","","",2,{"inputs":[{"name":"self"},{"name":"loanpath"},{"name":"string"}],"output":null}],[11,"loan_path_to_string","","",2,{"inputs":[{"name":"self"},{"name":"loanpath"}],"output":{"name":"string"}}],[11,"cmt_to_string","","",2,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"string"}}],[11,"cmt_to_path_or_string","","",2,{"inputs":[{"name":"self"},{"name":"cmt"}],"output":{"name":"string"}}],[0,"graphviz","","This module provides linkage between rustc::middle::graph and libgraphviz traits, specialized to attaching borrowck analysis data to rendered labels.",null,null],[6,"Node","rustc_borrowck::graphviz","",null,null],[6,"Edge","","",null,null],[3,"DataflowLabeller","","",null,null],[12,"inner","","",3,null],[12,"variants","","",3,null],[12,"borrowck_ctxt","","",3,null],[12,"analysis_data","","",3,null],[4,"Variant","","",null,null],[13,"Loans","","",4,null],[13,"Moves","","",4,null],[13,"Assigns","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"short_name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"graph_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node_id","","",3,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"id"}}],[11,"node_label","","",3,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"labeltext"}}],[11,"edge_label","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"labeltext"}}],[11,"nodes","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"edges","","",3,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[11,"source","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}],[11,"target","","",3,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"node"}}],[17,"DIAGNOSTICS","rustc_borrowck","",null,null]],"paths":[[3,"AnalysisData"],[3,"ElaborateDrops"],[3,"BorrowckCtxt"],[3,"DataflowLabeller"],[4,"Variant"]]};
searchIndex["rustc_const_eval"] = {"doc":"constant evaluation on the HIR and code to validate patterns/matches","items":[[3,"ConstContext","rustc_const_eval","",null,null],[3,"ConstEvalErr","","",null,null],[12,"span","","",0,null],[12,"kind","","",0,null],[4,"ErrKind","","",null,null],[13,"CannotCast","","",1,null],[13,"MissingStructField","","",1,null],[13,"NegateOn","","",1,null],[13,"NotOn","","",1,null],[13,"CallOn","","",1,null],[13,"NonConstPath","","",1,null],[13,"UnimplementedConstVal","","",1,null],[13,"ExpectedConstTuple","","",1,null],[13,"ExpectedConstStruct","","",1,null],[13,"IndexedNonVec","","",1,null],[13,"IndexNotUsize","","",1,null],[13,"IndexOutOfBounds","","",1,null],[12,"len","rustc_const_eval::ErrKind","",1,null],[12,"index","","",1,null],[13,"MiscBinaryOp","rustc_const_eval","",1,null],[13,"MiscCatchAll","","",1,null],[13,"IndexOpFeatureGated","","",1,null],[13,"Math","","",1,null],[13,"ErroneousReferencedConstant","","",1,null],[13,"TypeckError","","",1,null],[4,"ConstEvalErrDescription","","",null,null],[13,"Simple","","",2,null],[5,"lookup_const_by_id","","`def_id` is the id of the constant. * `substs` is the monomorphized substitutions for the expression.\n",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"substs"}],"output":{"name":"option"}}],[5,"report_const_eval_err","","",null,{"inputs":[{"name":"tyctxt"},{"name":"constevalerr"},{"name":"span"},{"name":"str"}],"output":null}],[5,"fatal_const_eval_err","","",null,null],[5,"note_const_eval_err","","",null,{"inputs":[{"name":"tyctxt"},{"name":"constevalerr"},{"name":"span"},{"name":"str"},{"name":"diagnosticbuilder"}],"output":null}],[5,"compare_const_vals","","",null,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"constval"},{"name":"constval"}],"output":{"name":"result"}}],[5,"eval_length","","Returns the value of the length-valued expression",null,{"inputs":[{"name":"tyctxt"},{"name":"bodyid"},{"name":"str"}],"output":{"name":"result"}}],[0,"diagnostics","","",null,null],[11,"new","","",3,{"inputs":[{"name":"tyctxt"},{"name":"bodyid"}],"output":{"name":"self"}}],[11,"with_tables","","",3,{"inputs":[{"name":"tyctxt"},{"name":"typecktables"}],"output":{"name":"self"}}],[11,"eval","","Evaluate a constant expression in a context where the expression isn't guaranteed to be evaluatable.",3,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"evalresult"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"constevalerr"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errkind"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"constmatherr"}],"output":{"name":"errkind"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"constevalerrdescription"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_oneline","","Return a one-line description of the error, for lints and such",2,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"constevalerrdescription"}}],[11,"compare_lit_exprs","","",3,{"inputs":[{"name":"self"},{"name":"span"},{"name":"expr"},{"name":"expr"}],"output":{"name":"result"}}],[0,"check_match","","",null,null],[5,"check_crate","rustc_const_eval::check_match","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"pattern","rustc_const_eval","",null,null],[3,"FieldPattern","rustc_const_eval::pattern","",null,null],[12,"field","","",4,null],[12,"pattern","","",4,null],[3,"Pattern","","",null,null],[12,"ty","","",5,null],[12,"span","","",5,null],[12,"kind","","",5,null],[3,"PatternContext","","",null,null],[12,"tcx","","",6,null],[12,"tables","","",6,null],[12,"errors","","",6,null],[4,"PatternError","","",null,null],[13,"StaticInPattern","","",7,null],[13,"ConstEval","","",7,null],[4,"BindingMode","","",null,null],[13,"ByValue","","",8,null],[13,"ByRef","","",8,null],[4,"PatternKind","","",null,null],[13,"Wild","","",9,null],[13,"Binding","","x, ref x, x @ P, etc",9,null],[12,"mutability","rustc_const_eval::pattern::PatternKind","",9,null],[12,"name","","",9,null],[12,"mode","","",9,null],[12,"var","","",9,null],[12,"ty","","",9,null],[12,"subpattern","","",9,null],[13,"Variant","rustc_const_eval::pattern","Foo(...) or Foo{...} or Foo, where `Foo` is a variant name from an adt with >1 variants",9,null],[12,"adt_def","rustc_const_eval::pattern::PatternKind","",9,null],[12,"substs","","",9,null],[12,"variant_index","","",9,null],[12,"subpatterns","","",9,null],[13,"Leaf","rustc_const_eval::pattern","(...), Foo(...), Foo{...}, or Foo, where `Foo` is a variant name from an adt with 1 variant",9,null],[12,"subpatterns","rustc_const_eval::pattern::PatternKind","",9,null],[13,"Deref","rustc_const_eval::pattern","box P, &P, &mut P, etc",9,null],[12,"subpattern","rustc_const_eval::pattern::PatternKind","",9,null],[13,"Constant","rustc_const_eval::pattern","",9,null],[12,"value","rustc_const_eval::pattern::PatternKind","",9,null],[13,"Range","rustc_const_eval::pattern","",9,null],[12,"lo","rustc_const_eval::pattern::PatternKind","",9,null],[12,"hi","","",9,null],[12,"end","","",9,null],[13,"Slice","rustc_const_eval::pattern","matches against a slice, checking the length and extracting elements",9,null],[12,"prefix","rustc_const_eval::pattern::PatternKind","",9,null],[12,"slice","","",9,null],[12,"suffix","","",9,null],[13,"Array","rustc_const_eval::pattern","fixed match against an array, irrefutable",9,null],[12,"prefix","rustc_const_eval::pattern::PatternKind","",9,null],[12,"slice","","",9,null],[12,"suffix","","",9,null],[8,"PatternFoldable","rustc_const_eval::pattern","",null,null],[11,"fold_with","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"super_fold_with","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[8,"PatternFolder","","",null,null],[11,"fold_pattern","","",11,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"pattern"}}],[11,"fold_pattern_kind","","",11,{"inputs":[{"name":"self"},{"name":"patternkind"}],"output":{"name":"patternkind"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"patternerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldpattern"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"patternkind"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_hir","","",5,{"inputs":[{"name":"tyctxt"},{"name":"typecktables"},{"name":"pat"}],"output":{"name":"self"}}],[11,"new","","",6,{"inputs":[{"name":"tyctxt"},{"name":"typecktables"}],"output":{"name":"self"}}],[11,"lower_pattern","","",6,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"pattern"}}],[11,"super_fold_with","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_fold_with","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_fold_with","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"super_fold_with","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[6,"EvalResult","rustc_const_eval","",null,null],[6,"CastResult","","",null,null],[17,"DIAGNOSTICS","","",null,null]],"paths":[[3,"ConstEvalErr"],[4,"ErrKind"],[4,"ConstEvalErrDescription"],[3,"ConstContext"],[3,"FieldPattern"],[3,"Pattern"],[3,"PatternContext"],[4,"PatternError"],[4,"BindingMode"],[4,"PatternKind"],[8,"PatternFoldable"],[8,"PatternFolder"]]};
searchIndex["rustc_const_math"] = {"doc":"Rusty Mathematics","items":[[4,"ConstFloat","rustc_const_math","",null,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[4,"ConstInt","","",null,null],[13,"I8","","",1,null],[13,"I16","","",1,null],[13,"I32","","",1,null],[13,"I64","","",1,null],[13,"I128","","",1,null],[13,"Isize","","",1,null],[13,"U8","","",1,null],[13,"U16","","",1,null],[13,"U32","","",1,null],[13,"U64","","",1,null],[13,"U128","","",1,null],[13,"Usize","","",1,null],[4,"ConstUsize","","Depending on the target only one variant is ever used in a compilation. Anything else is an error. This invariant is checked at several locations",null,null],[13,"Us16","","",2,null],[13,"Us32","","",2,null],[13,"Us64","","",2,null],[4,"ConstIsize","","Depending on the target only one variant is ever used in a compilation. Anything else is an error. This invariant is checked at several locations",null,null],[13,"Is16","","",3,null],[13,"Is32","","",3,null],[13,"Is64","","",3,null],[4,"ConstMathErr","","",null,null],[13,"NotInRange","","",4,null],[13,"CmpBetweenUnequalTypes","","",4,null],[13,"UnequalTypes","","",4,null],[13,"Overflow","","",4,null],[13,"ShiftNegative","","",4,null],[13,"DivisionByZero","","",4,null],[13,"RemainderByZero","","",4,null],[13,"UnsignedNegation","","",4,null],[13,"ULitOutOfRange","","",4,null],[13,"LitOutOfRange","","",4,null],[4,"Op","","",null,null],[13,"Add","","",5,null],[13,"Sub","","",5,null],[13,"Mul","","",5,null],[13,"Div","","",5,null],[13,"Rem","","",5,null],[13,"Shr","","",5,null],[13,"Shl","","",5,null],[13,"Neg","","",5,null],[13,"BitAnd","","",5,null],[13,"BitOr","","",5,null],[13,"BitXor","","",5,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"constfloat"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"description","","Description of the type, not the value",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_nan","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"new_unsigned","","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",1,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"new_signed","","Creates a new signed ConstInt with matching type while also checking that overflow does not happen.",1,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"option"}}],[11,"new_unsigned_truncating","","Creates a new unsigned ConstInt with matching type.",1,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"constint"}}],[11,"new_signed_truncating","","Creates a new signed ConstInt with matching type.",1,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"constint"}}],[11,"description","","Description of the type, not the value",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_u128_unchecked","","Erases the type and returns a u128. This is not the same as `-5i8 as u128` but as `-5i8 as i128 as u128`",1,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u32","","Converts the value to a `u32` if it's in the range 0...std::u32::MAX",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","Converts the value to a `u64` if it's in the range 0...std::u64::MAX",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u128","","Converts the value to a `u128` if it's in the range 0...std::u128::MAX",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_negative","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"int_type","","",1,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"shl","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"shr","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"not","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"constusize"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"constusize"}],"output":{"name":"bool"}}],[11,"as_u64","","",2,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"u64"}}],[11,"new","","",2,{"inputs":[{"name":"u64"},{"name":"uintty"}],"output":{"name":"result"}}],[11,"new_truncating","","",2,{"inputs":[{"name":"u128"},{"name":"uintty"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"constisize"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"constisize"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"constisize"}],"output":{"name":"bool"}}],[11,"as_i64","","",3,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"i64"}}],[11,"new","","",3,{"inputs":[{"name":"i64"},{"name":"intty"}],"output":{"name":"result"}}],[11,"new_truncating","","",3,{"inputs":[{"name":"i128"},{"name":"intty"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"constmatherr"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"constmatherr"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"constmatherr"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[4,"ConstFloat"],[4,"ConstInt"],[4,"ConstUsize"],[4,"ConstIsize"],[4,"ConstMathErr"],[4,"Op"]]};
searchIndex["rustc_data_structures"] = {"doc":"Various data structures used by the Rust compiler. The intention is that code in here should be not be *specific* to rustc, so that it can be easily unit tested and so forth.","items":[[8,"ToHex","rustc_data_structures","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"array_vec","","A stack-allocated vector, allowing storage of N elements on the stack.",null,null],[3,"ArrayVec","rustc_data_structures::array_vec","",null,null],[3,"Iter","","",null,null],[3,"Drain","","",null,null],[19,"ManuallyDrop","","",null,null],[8,"Array","","",null,null],[16,"Element","","",1,null],[16,"PartialStorage","","",1,null],[18,"LEN","","",1,null],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_len","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"push","","Panics when the stack vector is full.",2,null],[11,"pop","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drain","","",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",2,null],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[0,"accumulate_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"IntoIter","rustc_data_structures::accumulate_vec","",null,null],[4,"AccumulateVec","","",null,null],[13,"Array","","",6,null],[13,"Heap","","",6,null],[4,"Drain","","",null,null],[13,"Array","","",7,null],[13,"Heap","","",7,null],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"accumulatevec"}}],[11,"one","","",6,null],[11,"many","","",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pop","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drain","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"from_iter","","",6,{"inputs":[{"name":"i"}],"output":{"name":"accumulatevec"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"into_iter","","",6,null],[11,"from","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"accumulatevec"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"accumulatevec"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"small_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"SmallVec","rustc_data_structures::small_vec","",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"one","","",9,null],[11,"many","","",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"expect_one","","",9,null],[11,"push","","Will reallocate onto the heap if needed.",9,null],[11,"reserve","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_len","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"insert","","",9,null],[11,"truncate","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"deref","","",9,null],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"accumulatevec"}}],[11,"from_iter","","",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"smallvec"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base_n","rustc_data_structures","",null,null],[5,"push_str","rustc_data_structures::base_n","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"string"}],"output":null}],[5,"encode","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"string"}}],[17,"MAX_BASE","","",null,null],[17,"ALPHANUMERIC_ONLY","","",null,null],[0,"bitslice","rustc_data_structures","",null,null],[3,"Union","rustc_data_structures::bitslice","",null,null],[3,"Subtract","","",null,null],[5,"bits_to_string","","",null,null],[5,"bitwise","","",null,null],[6,"Word","","",null,null],[8,"BitSlice","","`BitSlice` provides helper methods for treating a `[Word]` as a bitvector.",null,null],[10,"clear_bit","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set_bit","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_bit","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"BitwiseOperator","","",null,null],[10,"join","","Applies some bit-operation pointwise to each of the bits in the two inputs.",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"blake2b","rustc_data_structures","",null,null],[3,"Blake2bCtx","rustc_data_structures::blake2b","",null,null],[3,"Blake2bHasher","","",null,null],[5,"blake2b","","",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",15,null],[11,"finish","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","",15,null],[11,"finalize","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bitvec","rustc_data_structures","",null,null],[3,"BitVector","rustc_data_structures::bitvec","A very simple BitVector type.",null,null],[3,"BitVectorIter","","",null,null],[3,"BitMatrix","","A \"bit matrix\" is basically a matrix of booleans represented as one gigantic bitvector. In other words, it is as if you have `rows` bitvectors, each of length `columns`.",null,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bitvector"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"new","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"bitvector"}}],[11,"clear","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"count","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"insert","","Returns true if the bit has changed.",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"insert_all","","",16,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"grow","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"iter","","Iterates over indexes of set bits in a sorted order",16,{"inputs":[{"name":"self"}],"output":{"name":"bitvectoriter"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","",16,{"inputs":[{"name":"i"}],"output":{"name":"bitvector"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bitmatrix"}}],[11,"new","","",18,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"bitmatrix"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains","","Do the bits from `source` contain `target`?",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"intersection","","Returns those indices that are reachable from both `a` and `b`. This is an O(n) operation where `n` is the number of elements (somewhat independent from the actual size of the intersection, in particular).",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"merge","","Add the bits from `read` to the bits from `write`, return true if anything changed.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"iter","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bitvectoriter"}}],[0,"fmt_wrap","rustc_data_structures","",null,null],[3,"FmtWrap","rustc_data_structures::fmt_wrap","",null,null],[12,"0","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"graph","rustc_data_structures","A graph module for use in dataflow, region resolution, and elsewhere.",null,null],[3,"Graph","rustc_data_structures::graph","",null,null],[3,"Node","","",null,null],[12,"data","","",20,null],[3,"Edge","","",null,null],[12,"data","","",21,null],[3,"NodeIndex","","",null,null],[12,"0","","",22,null],[3,"EdgeIndex","","",null,null],[12,"0","","",23,null],[3,"Direction","","",null,null],[3,"EnumeratedNodes","","",null,null],[3,"EnumeratedEdges","","",null,null],[3,"AdjacentEdges","","",null,null],[3,"AdjacentTargets","","",null,null],[3,"AdjacentSources","","",null,null],[3,"DepthFirstTraversal","","",null,null],[5,"each_edge_index","","",null,{"inputs":[{"name":"edgeindex"},{"name":"f"}],"output":null}],[17,"INVALID_EDGE_INDEX","","",null,null],[17,"OUTGOING","","",null,null],[17,"INCOMING","","",null,null],[11,"reverse","","",20,null],[11,"reverse","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"graph"}}],[11,"all_nodes","","",25,null],[11,"len_nodes","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"all_edges","","",25,null],[11,"len_edges","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_node_index","","",25,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"add_node","","",25,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"mut_node_data","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"node_data","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"node","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"node"}}],[11,"next_edge_index","","",25,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"add_edge","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"mut_edge_data","","",25,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"edge_data","","",25,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"edge","","",25,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`. This is useful if you wish to modify the graph while walking the linked list of edges.",25,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"edgeindex"}}],[11,"next_adjacent","","Accesses the next edge in a given direction. This is useful if you wish to modify the graph while walking the linked list of edges.",25,{"inputs":[{"name":"self"},{"name":"edgeindex"},{"name":"direction"}],"output":{"name":"edgeindex"}}],[11,"enumerated_nodes","","",25,{"inputs":[{"name":"self"}],"output":{"name":"enumeratednodes"}}],[11,"enumerated_edges","","",25,{"inputs":[{"name":"self"}],"output":{"name":"enumeratededges"}}],[11,"each_node","","Iterates over all edges defined in the graph.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_edge","","Iterates over all edges defined in the graph",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"outgoing_edges","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentedges"}}],[11,"incoming_edges","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentedges"}}],[11,"adjacent_edges","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"adjacentedges"}}],[11,"successor_nodes","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacenttargets"}}],[11,"predecessor_nodes","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentsources"}}],[11,"iterate_until_fixed_point","","A common use for graphs in our compiler is to perform fixed-point iteration. In this case, each edge represents a constraint, and the nodes themselves are associated with variables or other bitsets. This method facilitates such a computation.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"depth_traverse","","",25,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"depthfirsttraversal"}}],[11,"is_node_cyclic","","Whether or not a node can be reached from itself.",25,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",31,{"inputs":[{"name":"graph"},{"name":"direction"}],"output":{"name":"self"}}],[11,"with_start_node","","",31,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"self"}}],[11,"reset","","",31,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":null}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"source","","",21,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"target","","",21,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"source_or_target","","",21,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"nodeindex"}}],[0,"ivar","rustc_data_structures","",null,null],[3,"Ivar","rustc_data_structures::ivar","A write-once variable. When constructed, it is empty, and can only be set once.",null,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"ivar"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"ivar"}],"output":{"name":"bool"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"ivar"}}],[11,"get","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fulfill","","",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_fulfilled","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","",32,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"ivar"}}],[0,"indexed_set","rustc_data_structures","",null,null],[3,"IdxSetBuf","rustc_data_structures::indexed_set","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[3,"IdxSet","","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_filled","","Creates set holding every element whose index falls in range 0..universe_size.",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_empty","","Creates set holding no elements.",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"to_owned","","",34,{"inputs":[{"name":"self"}],"output":{"name":"idxsetbuf"}}],[11,"remove","","Removes `elem` from the set `self`; returns true iff this changed `self`.",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"add","","Adds `elem` to the set `self`; returns true iff this changed `self`.",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"range","","",34,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"range_mut","","",34,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"contains","","Returns true iff set `self` contains `elem`.",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"words","","",34,null],[11,"words_mut","","",34,null],[11,"clone_from","","",34,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":null}],[11,"union","","",34,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[11,"subtract","","",34,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[0,"indexed_vec","rustc_data_structures","",null,null],[3,"IndexVec","rustc_data_structures::indexed_vec","",null,null],[12,"raw","","",35,null],[3,"IntoIdx","","",null,null],[6,"Enumerated","","",null,null],[8,"Idx","","Represents some newtyped `usize` wrapper.",null,null],[10,"new","","",36,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_elem","","",35,{"inputs":[{"name":"t"},{"name":"indexvec"}],"output":{"name":"self"}}],[11,"from_elem_n","","",35,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i"}}],[11,"len","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","",35,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter_enumerated","","",35,{"inputs":[{"name":"self"}],"output":{"name":"enumerated"}}],[11,"iter","","",35,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_enumerated","","",35,{"inputs":[{"name":"self"}],"output":{"name":"enumerated"}}],[11,"indices","","",35,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"iter_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"iter_enumerated_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"enumerated"}}],[11,"drain","","",35,null],[11,"drain_enumerated","","",35,null],[11,"last","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shrink_to_fit","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"swap","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"truncate","","",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get","","",35,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","",35,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"index","","",35,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",35,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"extend","","",35,{"inputs":[{"name":"self"},{"name":"j"}],"output":null}],[11,"from_iter","","",35,{"inputs":[{"name":"j"}],"output":{"name":"self"}}],[11,"into_iter","","",35,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"call_once","","",37,null],[11,"call_mut","","",37,null],[11,"call_once","","",37,null],[11,"call_mut","","",37,null],[0,"obligation_forest","rustc_data_structures","The `ObligationForest` is a utility data structure used in trait matching to track the set of outstanding obligations (those not yet resolved to success or error). It also tracks the \"backtrace\" of each pending obligation (why we are trying to figure this out in the first place). See README.md for a general overview of how to use this class.",null,null],[3,"ObligationForest","rustc_data_structures::obligation_forest","",null,null],[3,"Snapshot","","",null,null],[3,"Outcome","","",null,null],[12,"completed","","Obligations that were completely evaluated, including all (transitive) subobligations.",38,null],[12,"errors","","Backtrace of obligations that were found to be in error.",38,null],[12,"stalled","","If true, then we saw no successful obligations, which means there is no point in further iteration. This is based on the assumption that when trait matching returns `Err` or `Ok(None)`, those results do not affect environmental inference state. (Note that if we invoke `process_obligations` with no pending obligations, stalled will be true.)",38,null],[3,"Error","","",null,null],[12,"error","","",39,null],[12,"backtrace","","",39,null],[8,"ForestObligation","","",null,null],[16,"Predicate","","",40,null],[10,"as_predicate","","",40,null],[8,"ObligationProcessor","","",null,null],[16,"Obligation","","",41,null],[16,"Error","","",41,null],[10,"process_obligation","","",41,null],[10,"process_backedge","","",41,{"inputs":[{"name":"self"},{"name":"i"},{"name":"phantomdata"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"new","","",42,{"inputs":[],"output":{"name":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not yet been fully resolved.",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"start_snapshot","","",42,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"commit_snapshot","","",42,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"rollback_snapshot","","",42,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"in_snapshot","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"register_obligation","","Registers an obligation",42,{"inputs":[{"name":"self"},{"name":"o"}],"output":null}],[11,"to_errors","","Convert all remaining obligations to the given error.",42,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"vec"}}],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",42,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"process_obligations","","Perform a pass through the obligation list. This must be called in a loop until `outcome.stalled` is false.",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"outcome"}}],[0,"snapshot_map","rustc_data_structures","",null,null],[3,"SnapshotMap","rustc_data_structures::snapshot_map","",null,null],[3,"Snapshot","","",null,null],[11,"new","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",43,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","",43,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"get","","",43,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"snapshot","","",43,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"commit","","",43,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"partial_rollback","","",43,{"inputs":[{"name":"self"},{"name":"snapshot"},{"name":"f"}],"output":null}],[11,"rollback_to","","",43,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"index","","",43,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"v"}}],[0,"snapshot_vec","rustc_data_structures","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either to rollback to the start of the snapshot or commit those changes.",null,null],[3,"SnapshotVec","rustc_data_structures::snapshot_vec","",null,null],[3,"Snapshot","","",null,null],[4,"UndoLog","","",null,null],[13,"OpenSnapshot","","Indicates where a snapshot started.",44,null],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",44,null],[13,"NewElem","","New variable with given index was created.",44,null],[13,"SetElem","","Variable with given index was changed *from* the given value.",44,null],[13,"Other","","Extensible set of actions",44,null],[8,"SnapshotVecDelegate","","",null,null],[16,"Value","","",45,null],[16,"Undo","","",45,null],[10,"reverse","","",45,null],[11,"new","","",46,{"inputs":[],"output":{"name":"snapshotvec"}}],[11,"record","","",46,null],[11,"len","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","",46,null],[11,"get","","",46,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone automatically, so you should be sure call `record()` with some sort of suitable undo action.",46,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if a snapshot is active.",46,null],[11,"start_snapshot","","",46,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"actions_since_snapshot","","",46,null],[11,"rollback_to","","",46,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",46,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"extend","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"stable_hasher","rustc_data_structures","",null,null],[3,"StableHasher","rustc_data_structures::stable_hasher","When hashing something that ends up affecting properties like symbol names. We want these symbol names to be calculated independent of other factors like what architecture you're compiling *from*.",null,null],[8,"StableHasherResult","","",null,null],[10,"finish","","",47,{"inputs":[{"name":"stablehasher"}],"output":{"name":"self"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",48,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"finalize","","",48,null],[11,"bytes_hashed","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"finish","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",48,null],[11,"write_u8","","",48,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",48,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",48,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",48,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",48,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","",48,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","",48,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","",48,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","",48,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_isize","","",48,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[0,"transitive_relation","rustc_data_structures","",null,null],[3,"TransitiveRelation","rustc_data_structures::transitive_relation","",null,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"transitiverelation"}}],[11,"new","","",49,{"inputs":[],"output":{"name":"transitiverelation"}}],[11,"is_empty","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","Indicate that `a < b` (where `<` is this relation)",49,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"contains","","Check whether `a < target` (transitively)",49,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"postdom_upper_bound","","Picks what I am referring to as the \"postdominating\" upper-bound for `a` and `b`. This is usually the least upper bound, but in cases where there is no single least upper bound, it is the \"mutual immediate postdominator\", if you imagine a graph where `a < b` means `a -> b`.",49,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",49,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"vec"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"unify","rustc_data_structures","",null,null],[3,"VarValue","rustc_data_structures::unify","Value of a unification key. We implement Tarjan's union-find algorithm: when two keys are unified, one of them is converted into a \"redirect\" pointing at the other. These redirects form a DAG: the roots of the DAG (nodes that are not redirected) are each associated with a value of type `V` and a rank. The rank is used to keep the DAG relatively balanced, which helps keep the running time of the algorithm under control. For more information, see <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.",null,null],[3,"UnificationTable","","Table of unification keys and their values.",null,null],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes made during the snapshot may either be *committed* or *rolled back*.",null,null],[8,"UnifyKey","","This trait is implemented by any type that can serve as a type variable. We call such variables *unification keys*. For example, this trait is implemented by `IntVid`, which represents integral variables.",null,null],[16,"Value","","",50,null],[10,"index","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"from_index","","",50,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"tag","","",50,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[8,"Combine","","This trait is implemented for unify values that can be combined. This relation should be a monoid.",null,null],[10,"combine","","",51,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"varvalue"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"varvalue"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"varvalue"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either rolled back or committed in a \"LIFO\" (stack) order.",53,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"rollback_to","","Reverses all changes since the last snapshot. Also removes any keys that have been created since then.",53,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",53,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"new_key","","",53,null],[11,"union","","",53,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"k"}}],[11,"find","","",53,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"find_value","","",53,null],[11,"unioned","","",53,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"bool"}}],[11,"unify_var_var","","",53,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"result"}}],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping relationships, if `a_id` already has a value, it must be the same as `b`.",53,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"has_value","","",53,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"probe","","",53,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"unsolved_variables","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"fnv","rustc_data_structures","",null,null],[3,"FnvHasher","rustc_data_structures::fnv","A speedy hash algorithm for node ids and def ids. The hashmap in libcollections by default uses SipHash which isn't quite as speedy as we want. In the compiler we're not really worried about DOS attempts, so we just default to a non-cryptographic hash.",null,null],[5,"FnvHashMap","","",null,{"inputs":[],"output":{"name":"fnvhashmap"}}],[5,"FnvHashSet","","",null,{"inputs":[],"output":{"name":"fnvhashset"}}],[5,"hash","","",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[6,"FnvHashMap","","",null,null],[6,"FnvHashSet","","",null,null],[11,"default","","Creates a `FnvHasher`, with a 64-bit hex initial value.",54,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"write","","",54,null],[11,"finish","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"fx","rustc_data_structures","",null,null],[3,"FxHasher","rustc_data_structures::fx","A speedy hash algorithm for use within rustc. The hashmap in libcollections by default uses SipHash which isn't quite as speedy as we want. In the compiler we're not really worried about DOS attempts, so we use a fast non-cryptographic hash.",null,null],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"fxhashmap"}}],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"fxhashset"}}],[5,"hash","","",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[6,"FxHashMap","","",null,null],[6,"FxHashSet","","",null,null],[11,"default","","",55,{"inputs":[],"output":{"name":"fxhasher"}}],[11,"write","","",55,null],[11,"write_u8","","",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",55,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",55,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",55,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",55,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"finish","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"tuple_slice","rustc_data_structures","",null,null],[8,"TupleSlice","rustc_data_structures::tuple_slice","Allows to view uniform tuples as slices",null,null],[10,"as_slice","","",56,null],[10,"as_mut_slice","","",56,null],[0,"veccell","rustc_data_structures","",null,null],[3,"VecCell","rustc_data_structures::veccell","",null,null],[11,"with_capacity","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"veccell"}}],[11,"push","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"usize"}}],[11,"swap","","",57,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"control_flow_graph","rustc_data_structures","",null,null],[3,"Iter","rustc_data_structures::control_flow_graph","Immutable slice iterator",null,null],[0,"dominators","","Algorithm citation: A Simple, Fast Dominance Algorithm. Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy Rice Computer Science TS-06-33870 https://www.cs.rice.edu/~keith/EMBED/dom.pdf",null,null],[3,"Dominators","rustc_data_structures::control_flow_graph::dominators","",null,null],[3,"Iter","","",null,null],[3,"DominatorTree","","",null,null],[3,"IterChildrenOf","","",null,null],[5,"dominators","","",null,{"inputs":[{"name":"g"}],"output":{"name":"dominators"}}],[5,"dominators_given_rpo","","",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"dominators"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_reachable","","",58,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"immediate_dominator","","",58,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"node"}}],[11,"dominators","","",58,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"iter"}}],[11,"is_dominated_by","","",58,{"inputs":[{"name":"self"},{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"mutual_dominator_node","","",58,{"inputs":[{"name":"self"},{"name":"node"},{"name":"node"}],"output":{"name":"node"}}],[11,"mutual_dominator","","",58,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"all_immediate_dominators","","",58,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"dominator_tree","","",58,{"inputs":[{"name":"self"}],"output":{"name":"dominatortree"}}],[11,"next","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"root","","",60,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"children","","",60,null],[11,"iter_children_of","","",60,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"iterchildrenof"}}],[11,"next","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"iterate","rustc_data_structures::control_flow_graph","",null,null],[5,"post_order_from","rustc_data_structures::control_flow_graph::iterate","",null,null],[5,"post_order_from_to","","",null,null],[5,"pre_order_walk","","",null,null],[5,"reverse_post_order","","",null,null],[0,"reachable","rustc_data_structures::control_flow_graph","Compute reachability using a simple dataflow propagation. Store end-result in a big NxN bit matrix.",null,null],[3,"Reachability","rustc_data_structures::control_flow_graph::reachable","",null,null],[5,"reachable","","",null,{"inputs":[{"name":"g"}],"output":{"name":"reachability"}}],[5,"reachable_given_rpo","","",null,null],[11,"can_reach","","",62,{"inputs":[{"name":"self"},{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[0,"transpose","rustc_data_structures::control_flow_graph","",null,null],[3,"TransposedGraph","rustc_data_structures::control_flow_graph::transpose","",null,null],[11,"new","","",63,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"with_start","","",63,null],[11,"num_nodes","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"start_node","","",63,null],[11,"predecessors","","",63,null],[11,"successors","","",63,null],[8,"ControlFlowGraph","rustc_data_structures::control_flow_graph","",null,null],[16,"Node","","",64,null],[10,"num_nodes","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"start_node","","",64,null],[10,"predecessors","","",64,null],[10,"successors","","",64,null],[8,"GraphPredecessors","","",null,null],[16,"Item","","",65,null],[16,"Iter","","",65,null],[8,"GraphSuccessors","","",null,null],[16,"Item","","",66,null],[16,"Iter","","",66,null],[0,"flock","rustc_data_structures","Simple file-locking apis for each OS.",null,null],[3,"Lock","rustc_data_structures::flock","",null,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",67,{"inputs":[{"name":"path"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"panicking_new","","",67,{"inputs":[{"name":"path"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"lock"}}],[11,"next","rustc_data_structures::control_flow_graph","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"count","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",68,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"as_ref","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next_back","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",68,null]],"paths":[[8,"ToHex"],[8,"Array"],[3,"ArrayVec"],[3,"Iter"],[3,"Drain"],[19,"ManuallyDrop"],[4,"AccumulateVec"],[4,"Drain"],[3,"IntoIter"],[3,"SmallVec"],[8,"BitSlice"],[8,"BitwiseOperator"],[3,"Union"],[3,"Subtract"],[3,"Blake2bCtx"],[3,"Blake2bHasher"],[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"FmtWrap"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"EnumeratedNodes"],[3,"EnumeratedEdges"],[3,"AdjacentEdges"],[3,"AdjacentTargets"],[3,"AdjacentSources"],[3,"DepthFirstTraversal"],[3,"Ivar"],[3,"IdxSetBuf"],[3,"IdxSet"],[3,"IndexVec"],[8,"Idx"],[3,"IntoIdx"],[3,"Outcome"],[3,"Error"],[8,"ForestObligation"],[8,"ObligationProcessor"],[3,"ObligationForest"],[3,"SnapshotMap"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[3,"SnapshotVec"],[8,"StableHasherResult"],[3,"StableHasher"],[3,"TransitiveRelation"],[8,"UnifyKey"],[8,"Combine"],[3,"VarValue"],[3,"UnificationTable"],[3,"FnvHasher"],[3,"FxHasher"],[8,"TupleSlice"],[3,"VecCell"],[3,"Dominators"],[3,"Iter"],[3,"DominatorTree"],[3,"IterChildrenOf"],[3,"Reachability"],[3,"TransposedGraph"],[8,"ControlFlowGraph"],[8,"GraphPredecessors"],[8,"GraphSuccessors"],[3,"Lock"],[3,"Iter"]]};
searchIndex["rustc_driver"] = {"doc":"The Rust compiler.","items":[[3,"RustcDefaultCalls","rustc_driver","",null,null],[4,"Compilation","","",null,null],[13,"Stop","","",0,null],[13,"Continue","","",0,null],[5,"abort_on_err","","",null,{"inputs":[{"name":"result"},{"name":"session"}],"output":{"name":"t"}}],[5,"run","","",null,{"inputs":[{"name":"f"}],"output":{"name":"isize"}}],[5,"run_compiler","","",null,null],[5,"release_str","","Returns a version string such as \"0.12.0-dev\".",null,{"inputs":[],"output":{"name":"option"}}],[5,"commit_hash_str","","Returns the full SHA1 hash of HEAD of the Git repo from which rustc was built.",null,{"inputs":[],"output":{"name":"option"}}],[5,"commit_date_str","","Returns the \"commit date\" of HEAD of the Git repo from which rustc was built as a static string.",null,{"inputs":[],"output":{"name":"option"}}],[5,"version","","Prints version information",null,{"inputs":[{"name":"str"},{"name":"matches"}],"output":null}],[5,"handle_options","","Process command line options. Emits messages as appropriate. If compilation should continue, returns a getopts::Matches object parsed from args, otherwise returns None.",null,null],[5,"in_rustc_thread","","Runs `f` in a suitable thread for running `rustc`; returns a `Result` with either the return value of `f` or -- if a panic occurs -- the panic value.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"monitor","","Run a procedure which will detect panics in the compiler and print nicer error messages rather than just failing the test.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"diagnostics_registry","","",null,{"inputs":[],"output":{"name":"registry"}}],[5,"main","","",null,{"inputs":[],"output":null}],[0,"driver","","",null,null],[3,"CompileController","rustc_driver::driver","CompileController is used to customise compilation, it allows compilation to be stopped and/or to call arbitrary code at various points in compilation. It also allows for various flags to be set to influence what information gets collected during compilation.",null,null],[12,"after_parse","","",1,null],[12,"after_expand","","",1,null],[12,"after_hir_lowering","","",1,null],[12,"after_analysis","","",1,null],[12,"after_llvm","","",1,null],[12,"compilation_done","","",1,null],[12,"make_glob_map","","",1,null],[3,"PhaseController","","",null,null],[12,"stop","","",2,null],[12,"run_callback_on_error","","",2,null],[12,"callback","","",2,null],[3,"CompileState","","State that is passed to a callback. What state is available depends on when during compilation the callback is made. See the various constructor methods (`state_*`) in the impl to see which data is provided for any given entry point.",null,null],[12,"input","","",3,null],[12,"session","","",3,null],[12,"krate","","",3,null],[12,"registry","","",3,null],[12,"cstore","","",3,null],[12,"crate_name","","",3,null],[12,"output_filenames","","",3,null],[12,"out_dir","","",3,null],[12,"out_file","","",3,null],[12,"arena","","",3,null],[12,"arenas","","",3,null],[12,"expanded_crate","","",3,null],[12,"hir_crate","","",3,null],[12,"hir_map","","",3,null],[12,"resolutions","","",3,null],[12,"analysis","","",3,null],[12,"tcx","","",3,null],[12,"trans","","",3,null],[3,"ExpansionResult","","",null,null],[12,"expanded_crate","","",4,null],[12,"defs","","",4,null],[12,"analysis","","",4,null],[12,"resolutions","","",4,null],[12,"hir_forest","","",4,null],[5,"compile_input","","",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"input"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"compilecontroller"}],"output":{"name":"compileresult"}}],[5,"anon_src","","The name used for source code that doesn't originate in a file (e.g. source from stdin or a string)",null,{"inputs":[],"output":{"name":"string"}}],[5,"source_name","","",null,{"inputs":[{"name":"input"}],"output":{"name":"string"}}],[5,"phase_1_parse_input","","",null,{"inputs":[{"name":"session"},{"name":"input"}],"output":{"name":"presult"}}],[5,"phase_2_configure_and_expand","","Run the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins (including those from `addl_plugins`), syntax expansion, secondary `cfg` expansion, synthesis of a test harness if one is to be provided, injection of a dependency on the standard library and prelude, and name resolution.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crate"},{"name":"option"},{"name":"str"},{"name":"option"},{"name":"makeglobmap"},{"name":"f"}],"output":{"name":"result"}}],[5,"phase_3_run_analysis_passes","","Run the resolution, typechecking, region checking and other miscellaneous analysis passes on the crate. Return various structures carrying the results of the analysis.",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"crateanalysis"},{"name":"resolutions"},{"name":"droplessarena"},{"name":"globalarenas"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[5,"phase_4_translate_to_llvm","","Run the translation phase to LLVM, after which the AST and analysis can be discarded.",null,{"inputs":[{"name":"tyctxt"},{"name":"crateanalysis"},{"name":"incrementalhashesmap"}],"output":{"name":"cratetranslation"}}],[5,"phase_5_run_llvm_passes","","Run LLVM itself, producing a bitcode file, assembly file or object file as a side effect.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"}],"output":{"name":"compileresult"}}],[5,"phase_6_link_output","","Run the linker on any artifacts that resulted from the LLVM run. This should produce either a finished executable or library.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"}],"output":null}],[5,"collect_crate_types","","",null,null],[5,"compute_crate_disambiguator","","",null,{"inputs":[{"name":"session"}],"output":{"name":"string"}}],[5,"build_output_filenames","","",null,null],[11,"basic","","",1,{"inputs":[],"output":{"name":"compilecontroller"}}],[11,"basic","","",2,{"inputs":[],"output":{"name":"phasecontroller"}}],[0,"pretty","rustc_driver","The various pretty print routines.",null,null],[4,"PpSourceMode","rustc_driver::pretty","",null,null],[13,"PpmNormal","","",5,null],[13,"PpmEveryBodyLoops","","",5,null],[13,"PpmExpanded","","",5,null],[13,"PpmIdentified","","",5,null],[13,"PpmExpandedIdentified","","",5,null],[13,"PpmExpandedHygiene","","",5,null],[13,"PpmTyped","","",5,null],[4,"PpFlowGraphMode","","",null,null],[13,"Default","","",6,null],[13,"UnlabelledEdges","","Drops the labels from the edges in the flowgraph output. This is mostly for use in the --unpretty flowgraph run-make tests, since the labels are largely uninteresting in those cases and have become a pain to maintain.",6,null],[4,"PpMode","","",null,null],[13,"PpmSource","","",7,null],[13,"PpmHir","","",7,null],[13,"PpmFlowGraph","","",7,null],[13,"PpmMir","","",7,null],[13,"PpmMirCFG","","",7,null],[4,"UserIdentifiedItem","","",null,null],[13,"ItemViaNode","","",8,null],[13,"ItemViaPath","","",8,null],[5,"parse_pretty","","",null,null],[5,"fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"ppmode"}],"output":{"name":"crate"}}],[5,"print_after_parsing","","",null,{"inputs":[{"name":"session"},{"name":"input"},{"name":"crate"},{"name":"ppmode"},{"name":"option"}],"output":null}],[5,"print_after_hir_lowering","","",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"crateanalysis"},{"name":"resolutions"},{"name":"input"},{"name":"crate"},{"name":"str"},{"name":"ppmode"},{"name":"droplessarena"},{"name":"globalarenas"},{"name":"option"},{"name":"option"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"ppsourcemode"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"ppsourcemode"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ppflowgraphmode"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ppflowgraphmode"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"ppmode"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"ppmode"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"ppmode"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"needs_ast_map","","",7,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"needs_analysis","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"useridentifieditem"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"target_features","rustc_driver","",null,null],[5,"add_configuration","rustc_driver::target_features","Add `target_feature = \"...\"` cfgs for a variety of platform specific features (SSE, NEON etc.).",null,{"inputs":[{"name":"crateconfig"},{"name":"session"}],"output":null}],[8,"CompilerCalls","rustc_driver","",null,null],[11,"early_callback","","",9,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"registry"},{"name":"erroroutputtype"}],"output":{"name":"compilation"}}],[11,"late_callback","","",9,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"session"},{"name":"input"},{"name":"option"},{"name":"option"}],"output":{"name":"compilation"}}],[11,"some_input","","",9,null],[11,"no_input","","",9,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"option"},{"name":"option"},{"name":"registry"}],"output":{"name":"option"}}],[10,"build_controller","","",9,{"inputs":[{"name":"self"},{"name":"session"},{"name":"matches"}],"output":{"name":"compilecontroller"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compilation"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compilation"}],"output":{"name":"bool"}}],[11,"and_then","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"compilation"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"rustcdefaultcalls"}}],[11,"early_callback","","",10,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"registry"},{"name":"erroroutputtype"}],"output":{"name":"compilation"}}],[11,"no_input","","",10,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"options"},{"name":"crateconfig"},{"name":"option"},{"name":"option"},{"name":"registry"}],"output":{"name":"option"}}],[11,"late_callback","","",10,{"inputs":[{"name":"self"},{"name":"matches"},{"name":"session"},{"name":"input"},{"name":"option"},{"name":"option"}],"output":{"name":"compilation"}}],[11,"build_controller","","",10,{"inputs":[{"name":"self"},{"name":"session"},{"name":"matches"}],"output":{"name":"compilecontroller"}}],[11,"list_metadata","","",10,{"inputs":[{"name":"session"},{"name":"matches"},{"name":"input"}],"output":{"name":"compilation"}}]],"paths":[[4,"Compilation"],[3,"CompileController"],[3,"PhaseController"],[3,"CompileState"],[3,"ExpansionResult"],[4,"PpSourceMode"],[4,"PpFlowGraphMode"],[4,"PpMode"],[4,"UserIdentifiedItem"],[8,"CompilerCalls"],[3,"RustcDefaultCalls"]]};
searchIndex["rustc_errors"] = {"doc":"","items":[[3,"CodeSuggestion","rustc_errors","",null,null],[12,"msp","","",0,null],[12,"substitutes","","",0,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also used as the argument to panic at the moment, but that will eventually not be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug` or `.span_bug` rather than a failed assertion, etc.",null,null],[3,"Handler","","A handler deals with errors; certain errors (fatal, bug, unimpl) may cause immediate exit, others log errors for later reporting.",null,null],[12,"can_emit_warnings","","",1,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of the source code covered by the span.",2,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of hypothetical source code, where each `String` is spliced into the lines in place of the code covered by each span.",2,null],[4,"Level","","",null,null],[13,"Bug","","",3,null],[13,"Fatal","","",3,null],[13,"PhaseFatal","","",3,null],[13,"Error","","",3,null],[13,"Warning","","",3,null],[13,"Note","","",3,null],[13,"Help","","",3,null],[13,"Cancelled","","",3,null],[5,"expect","","",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"m"}],"output":{"name":"t"}}],[0,"diagnostic","","",null,null],[3,"Diagnostic","rustc_errors::diagnostic","",null,null],[12,"level","","",4,null],[12,"message","","",4,null],[12,"code","","",4,null],[12,"span","","",4,null],[12,"children","","",4,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",5,null],[12,"message","","",5,null],[12,"span","","",5,null],[12,"render_span","","",5,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"subdiagnostic"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"level"},{"name":"str"}],"output":{"name":"self"}}],[11,"new_with_code","","",4,{"inputs":[{"name":"level"},{"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or cancelled or it will panic when dropped). BEWARE: if this DiagnosticBuilder is an error, then creating it will bump the error count on the Handler and cancelling it won't undo that. If you want to decrement the error count you should use `Handler::cancel`.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"cancelled","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fatal","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_expected_found","","",4,{"inputs":[{"name":"self"},{"name":"display"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",4,{"inputs":[{"name":"self"},{"name":"display"},{"name":"display"},{"name":"display"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"highlighted_note","","",4,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"span_note","","",4,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",4,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",4,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",4,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"set_span","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"message","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"styled_message","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"level","","",4,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"copy_details_not_message","","Used by a lint. Copies over all details *but* the \"main message\".",4,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":null}],[11,"message","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"styled_message","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"diagnostic_builder","rustc_errors","",null,null],[3,"DiagnosticBuilder","rustc_errors::diagnostic_builder","Used for emitting structured error messages and other diagnostic information.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"emit","","Emit the diagnostic.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"span_label","","",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_expected_found","","",6,{"inputs":[{"name":"self"},{"name":"display"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",6,{"inputs":[{"name":"self"},{"name":"display"},{"name":"display"},{"name":"display"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_note","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"set_span","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",6,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"new","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",6,{"inputs":[{"name":"handler"},{"name":"level"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"new_with_code","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",6,{"inputs":[{"name":"handler"},{"name":"level"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"into_diagnostic","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[0,"emitter","rustc_errors","",null,null],[3,"EmitterWriter","rustc_errors::emitter","",null,null],[3,"BufferedWriter","","Buffered writer gives us a way on Unix to buffer up an entire error message before we output it.  This helps to prevent interleaving of multiple error messages when multiple compiler processes error simultaneously",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",7,null],[13,"Always","","",7,null],[13,"Never","","",7,null],[4,"Destination","","",null,null],[13,"Terminal","","",8,null],[13,"BufferedTerminal","","",8,null],[13,"Raw","","",8,null],[6,"BufferedStderr","","",null,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",9,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"emit","","",10,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"colorconfig"}],"output":{"name":"bool"}}],[11,"stderr","","",10,{"inputs":[{"name":"colorconfig"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",10,{"inputs":[{"name":"box"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"write","","",11,null],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"snippet","rustc_errors","",null,null],[3,"SnippetData","rustc_errors::snippet","",null,null],[3,"FileInfo","","",null,null],[3,"Line","","",null,null],[12,"line_index","","",12,null],[12,"annotations","","",12,null],[3,"MultilineAnnotation","","",null,null],[12,"depth","","",13,null],[12,"line_start","","",13,null],[12,"line_end","","",13,null],[12,"start_col","","",13,null],[12,"end_col","","",13,null],[12,"is_primary","","",13,null],[12,"label","","",13,null],[3,"Annotation","","",null,null],[12,"start_col","","Start column, 0-based indexing -- counting *characters*, not utf-8 bytes. Note that it is important that this field goes first, so that when we sort, we sort orderings by start column.",14,null],[12,"end_col","","End column within the line (exclusive)",14,null],[12,"is_primary","","Is this annotation derived from primary span",14,null],[12,"label","","Optional label to display adjacent to the annotation.",14,null],[12,"annotation_type","","Is this a single line, multiline or multiline span minimized down to a smaller span.",14,null],[3,"StyledString","","",null,null],[12,"text","","",15,null],[12,"style","","",15,null],[4,"AnnotationType","","",null,null],[13,"Singleline","","Annotation under a single line of code",16,null],[13,"Minimized","","Annotation under the first character of a multiline span",16,null],[13,"Multiline","","Annotation enclosing the first and last character of a multiline span",16,null],[13,"MultilineStart","","Annotation marking the first character of a fully shown multiline span",16,null],[13,"MultilineEnd","","Annotation marking the last character of a fully shown multiline span",16,null],[13,"MultilineLine","","Line at the left enclosing the lines of a fully shown multiline span",16,null],[4,"Style","","",null,null],[13,"HeaderMsg","","",17,null],[13,"FileNameStyle","","",17,null],[13,"LineAndColumn","","",17,null],[13,"LineNumber","","",17,null],[13,"Quotation","","",17,null],[13,"UnderlinePrimary","","",17,null],[13,"UnderlineSecondary","","",17,null],[13,"LabelPrimary","","",17,null],[13,"LabelSecondary","","",17,null],[13,"OldSchoolNoteText","","",17,null],[13,"OldSchoolNote","","",17,null],[13,"NoStyle","","",17,null],[13,"ErrorCode","","",17,null],[13,"Level","","",17,null],[13,"Highlight","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"snippetdata"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"fileinfo"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"ordering"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"multilineannotation"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"ordering"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"increase_depth","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"as_start","","",13,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"as_end","","",13,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"as_line","","",13,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"annotationtype"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"ordering"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"ordering"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"is_minimized","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_line","","Wether this annotation is a vertical line placeholder.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multiline","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_label","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"registry","rustc_errors","",null,null],[3,"Registry","rustc_errors::registry","",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"registry"}}],[11,"new","","",20,null],[11,"find_description","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[0,"styled_buffer","rustc_errors","",null,null],[3,"StyledBuffer","rustc_errors::styled_buffer","",null,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"styledbuffer"}}],[11,"copy_tabs","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"render","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"putc","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"char"},{"name":"style"}],"output":null}],[11,"puts","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"set_style","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"style"}],"output":null}],[11,"prepend","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"append","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"num_lines","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"CodeMapper","rustc_errors","",null,null],[10,"lookup_char_pos","","",22,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[10,"span_to_lines","","",22,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[10,"span_to_string","","",22,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[10,"span_to_filename","","",22,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[10,"macro_backtrace","","",22,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"vec"}}],[10,"merge_spans","","",22,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"renderspan"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"renderspan"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"renderspan"}],"output":{"name":"bool"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"codesuggestion"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"splice_lines","","Returns the assembled code suggestion.",0,{"inputs":[{"name":"self"},{"name":"codemapper"}],"output":{"name":"string"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"with_tty_emitter","","",1,{"inputs":[{"name":"colorconfig"},{"name":"bool"},{"name":"bool"},{"name":"option"}],"output":{"name":"handler"}}],[11,"with_emitter","","",1,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"struct_dummy","","",1,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"cancel","","",1,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"span_fatal","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"mut_span_err","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_err_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_warn","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_warn_with_code","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_bug","","",1,null],[11,"delay_span_bug","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_bug_no_panic","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_note_without_error","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",1,null],[11,"fatal","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"warn","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"note_without_error","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"bug","","",1,null],[11,"unimpl","","",1,null],[11,"bump_err_count","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"err_count","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"emit","","",1,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"level"}],"output":null}],[11,"emit_with_code","","",1,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"str"},{"name":"level"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"color","","",3,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"to_str","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"CodeSuggestion"],[3,"Handler"],[4,"RenderSpan"],[4,"Level"],[3,"Diagnostic"],[3,"SubDiagnostic"],[3,"DiagnosticBuilder"],[4,"ColorConfig"],[4,"Destination"],[8,"Emitter"],[3,"EmitterWriter"],[3,"BufferedWriter"],[3,"Line"],[3,"MultilineAnnotation"],[3,"Annotation"],[3,"StyledString"],[4,"AnnotationType"],[4,"Style"],[3,"SnippetData"],[3,"FileInfo"],[3,"Registry"],[3,"StyledBuffer"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["rustc_incremental"] = {"doc":"Support for serializing the dep-graph and reloading it.","items":[[3,"IncrementalHashesMap","rustc_incremental","",null,null],[12,"prev_metadata_hashes","","",0,null],[5,"assert_dep_graph","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"compute_incremental_hashes_map","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"incrementalhashesmap"}}],[5,"load_dep_graph","","If we are in incremental mode, and a previous dep-graph exists, then load up those nodes/edges that are still valid into the dep-graph for this session. (This is assumed to be running very early in compilation, before we've really done any work, but actually it doesn't matter all that much.) See `README.md` for more general overview.",null,{"inputs":[{"name":"tyctxt"},{"name":"incrementalhashesmap"}],"output":null}],[5,"save_dep_graph","","",null,{"inputs":[{"name":"tyctxt"},{"name":"incrementalhashesmap"},{"name":"svh"}],"output":null}],[5,"save_trans_partition","","",null,null],[5,"save_work_products","","",null,{"inputs":[{"name":"session"}],"output":null}],[5,"in_incr_comp_dir","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"finalize_session_directory","","This function finalizes and thus 'publishes' the session directory by renaming it to `s-{timestamp}-{svh}` and releasing the file lock. If there have been compilation errors, however, this function will just delete the presumably invalid session directory.",null,{"inputs":[{"name":"session"},{"name":"svh"}],"output":null}],[5,"delete_workproduct_files","","",null,{"inputs":[{"name":"session"},{"name":"workproduct"}],"output":null}],[11,"new","","",0,{"inputs":[],"output":{"name":"incrementalhashesmap"}}],[11,"insert","","",0,{"inputs":[{"name":"self"},{"name":"depnode"},{"name":"fingerprint"}],"output":{"name":"option"}}],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"fingerprint"}}],[0,"ich","","",null,null],[3,"Fingerprint","rustc_incremental::ich","",null,null],[12,"0","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"fingerprint"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fingerprint"}}],[11,"zero","","",1,{"inputs":[],"output":{"name":"fingerprint"}}],[11,"from_smaller_hash","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"fingerprint"}}],[11,"to_smaller_hash","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_hex","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"finish","","",1,{"inputs":[{"name":"stablehasher"}],"output":{"name":"self"}}],[6,"IchHasher","rustc_incremental","",null,null]],"paths":[[3,"IncrementalHashesMap"],[3,"Fingerprint"]]};
searchIndex["rustc_lint"] = {"doc":"Lints in the Rust compiler.","items":[[0,"lint","rustc_lint","Lints, aka compiler warnings.",null,null],[3,"Lint","rustc_lint::lint","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",0,null],[12,"default_level","","Default level for the lint.",0,null],[12,"desc","","Description of the lint or the issue it detects.",0,null],[6,"LintArray","","",null,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",1,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_body","","",2,null],[11,"check_body_post","","",2,null],[11,"check_name","","",2,null],[11,"check_crate","","",2,null],[11,"check_crate_post","","",2,null],[11,"check_mod","","",2,null],[11,"check_mod_post","","",2,null],[11,"check_foreign_item","","",2,null],[11,"check_foreign_item_post","","",2,null],[11,"check_item","","",2,null],[11,"check_item_post","","",2,null],[11,"check_local","","",2,null],[11,"check_block","","",2,null],[11,"check_block_post","","",2,null],[11,"check_stmt","","",2,null],[11,"check_arm","","",2,null],[11,"check_pat","","",2,null],[11,"check_decl","","",2,null],[11,"check_expr","","",2,null],[11,"check_expr_post","","",2,null],[11,"check_ty","","",2,null],[11,"check_generics","","",2,null],[11,"check_fn","","",2,null],[11,"check_fn_post","","",2,null],[11,"check_trait_item","","",2,null],[11,"check_trait_item_post","","",2,null],[11,"check_impl_item","","",2,null],[11,"check_impl_item_post","","",2,null],[11,"check_struct_def","","",2,null],[11,"check_struct_def_post","","",2,null],[11,"check_struct_field","","",2,null],[11,"check_variant","","",2,null],[11,"check_variant_post","","",2,null],[11,"check_lifetime","","",2,null],[11,"check_lifetime_def","","",2,null],[11,"check_path","","",2,null],[11,"check_attribute","","",2,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",2,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",2,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",3,null],[11,"check_crate","","",3,null],[11,"check_crate_post","","",3,null],[11,"check_mod","","",3,null],[11,"check_mod_post","","",3,null],[11,"check_foreign_item","","",3,null],[11,"check_foreign_item_post","","",3,null],[11,"check_item","","",3,null],[11,"check_item_post","","",3,null],[11,"check_local","","",3,null],[11,"check_block","","",3,null],[11,"check_block_post","","",3,null],[11,"check_stmt","","",3,null],[11,"check_arm","","",3,null],[11,"check_pat","","",3,null],[11,"check_expr","","",3,null],[11,"check_expr_post","","",3,null],[11,"check_ty","","",3,null],[11,"check_generics","","",3,null],[11,"check_fn","","",3,null],[11,"check_fn_post","","",3,null],[11,"check_trait_item","","",3,null],[11,"check_trait_item_post","","",3,null],[11,"check_impl_item","","",3,null],[11,"check_impl_item_post","","",3,null],[11,"check_struct_def","","",3,null],[11,"check_struct_def_post","","",3,null],[11,"check_struct_field","","",3,null],[11,"check_variant","","",3,null],[11,"check_variant_post","","",3,null],[11,"check_lifetime","","",3,null],[11,"check_lifetime_def","","",3,null],[11,"check_path","","",3,null],[11,"check_path_list_item","","",3,null],[11,"check_attribute","","",3,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",3,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",3,null],[6,"EarlyLintPassObject","","A lint pass boxed up as a trait object.",null,null],[6,"LateLintPassObject","","",null,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",4,null],[13,"Warn","","",4,null],[13,"Deny","","",4,null],[13,"Forbid","","",4,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared in rustc or a plugin.",5,null],[13,"Node","","Lint level was set by an attribute.",5,null],[13,"CommandLine","","Lint level was set by a command-line flag.",5,null],[6,"LevelSource","","",null,null],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[7,"CONST_ERR","rustc_lint::lint::builtin","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"UNREACHABLE_PATTERNS","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"LIFETIME_UNDERSCORE","","",null,null],[7,"RESOLVE_TRAIT_ON_DEFAULTED_UNIT","","",null,null],[7,"SAFE_EXTERN_STATICS","","",null,null],[7,"PATTERNS_IN_FNS_WITHOUT_BODY","","",null,null],[7,"EXTRA_REQUIREMENT_IN_IMPL","","",null,null],[7,"LEGACY_DIRECTORY_OWNERSHIP","","",null,null],[7,"LEGACY_IMPORTS","","",null,null],[7,"LEGACY_CONSTRUCTOR_VISIBILITY","","",null,null],[7,"MISSING_FRAGMENT_SPECIFIER","","",null,null],[7,"DEPRECATED","","",null,null],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s which are used by other parts of the compiler.",null,null],[8,"LintContext","rustc_lint::lint","",null,null],[10,"sess","","",6,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[10,"lints","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"mut_lints","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"level_stack","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"enter_attrs","","",6,null],[10,"exit_attrs","","",6,null],[11,"current_level","","Get the level of `lint` at the current position of the lint traversal.",6,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"level"}}],[11,"level_src","","",6,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"option"}}],[11,"lookup_and_emit","","",6,null],[11,"lookup","","",6,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",6,null],[11,"early_lint","","",6,null],[11,"struct_span_lint","","",6,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",6,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",6,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",6,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the current lint context, call the provided function, then reset the lints in effect to their previous state.",6,null],[8,"IntoEarlyLint","","",null,null],[10,"into_early_lint","","",7,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"earlylint"}}],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to HIR.",null,null],[12,"sess","","Type context we're checking in.",8,null],[12,"krate","","The crate being checked.",8,null],[3,"EarlyLint","","When you call `add_lint` on the session, you wind up storing one of these, which records a \"potential lint\" at a particular point.",null,null],[12,"id","","what lint is this? (e.g., `dead_code`)",9,null],[12,"diagnostic","","the main message",9,null],[3,"LateContext","","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we're checking in.",10,null],[12,"tables","","Side-tables for the body we are in.",10,null],[12,"krate","","The crate being checked.",10,null],[12,"access_levels","","Items accessible from the crate being checked.",10,null],[5,"check_ast_crate","","",null,null],[3,"LintTable","","",null,null],[5,"check_crate","","Perform lint checking on a crate.",null,null],[3,"FutureIncompatibleInfo","","Extra information for a future incompatibility lint. See the call to `register_future_incompatible` in `librustc_lint/lib.rs` for guidelines.",null,null],[12,"id","","",11,null],[12,"reference","","",11,null],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all) according to `level`.",null,null],[5,"raw_struct_lint","","",null,null],[3,"LintStore","","Information about the registered lints.",null,null],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint attributes. Writing this as an iterator is an enormous mess.",null,null],[0,"middle","rustc_lint","",null,null],[0,"expr_use_visitor","rustc_lint::middle","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_lint::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",12,null],[10,"matched_pat","","",12,null],[10,"consume_pat","","",12,null],[10,"borrow","","",12,null],[10,"decl_without_init","","",12,null],[10,"mutate","","",12,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",13,null],[13,"AddrOf","","",13,null],[13,"AutoRef","","",13,null],[13,"AutoUnsafe","","",13,null],[13,"RefBinding","","",13,null],[13,"OverloadedOperator","","",13,null],[13,"ClosureInvocation","","",13,null],[13,"ForLoop","","",13,null],[13,"MatchDiscriminant","","",13,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",14,null],[13,"Move","","",14,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",15,null],[13,"PatBindingMove","","",15,null],[13,"CaptureMove","","",15,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",16,null],[13,"BorrowingMatch","","",16,null],[13,"CopyingMatch","","",16,null],[13,"MovingMatch","","",16,null],[4,"MutateMode","","",null,null],[13,"Init","","",17,null],[13,"JustWrite","","",17,null],[13,"WriteAndRead","","",17,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_lint::middle","",null,null],[4,"ConstVal","rustc_lint::middle::const_val","",null,null],[13,"Float","","",18,null],[13,"Integral","","",18,null],[13,"Str","","",18,null],[13,"ByteStr","","",18,null],[13,"Bool","","",18,null],[13,"Function","","",18,null],[13,"Struct","","",18,null],[13,"Tuple","","",18,null],[13,"Array","","",18,null],[13,"Repeat","","",18,null],[13,"Char","","",18,null],[4,"ConstInt","","",null,null],[13,"I8","","",19,null],[13,"I16","","",19,null],[13,"I32","","",19,null],[13,"I64","","",19,null],[13,"I128","","",19,null],[13,"Isize","","",19,null],[13,"U8","","",19,null],[13,"U16","","",19,null],[13,"U32","","",19,null],[13,"U64","","",19,null],[13,"U128","","",19,null],[13,"Usize","","",19,null],[0,"cstore","rustc_lint::middle","",null,null],[3,"LinkMeta","rustc_lint::middle::cstore","",null,null],[12,"crate_name","","",20,null],[12,"crate_hash","","",20,null],[3,"CrateSource","","",null,null],[12,"dylib","","",21,null],[12,"rlib","","",21,null],[12,"rmeta","","",21,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",22,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",22,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",22,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",22,null],[4,"LibSource","","",null,null],[13,"Some","","",23,null],[13,"MetadataOnly","","",23,null],[13,"None","","",23,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",24,null],[13,"RequireStatic","","",24,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",25,null],[13,"NativeStaticNobundle","","",25,null],[13,"NativeFramework","","",25,null],[13,"NativeUnknown","","",25,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",26,null],[12,"name","","",26,null],[12,"cfg","","",26,null],[12,"foreign_items","","",26,null],[4,"LoadedMacro","","",null,null],[13,"MacroDef","","",27,null],[13,"ProcMacro","","",27,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",28,null],[12,"span","","span of the extern crate that caused this to be loaded",28,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",28,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",28,null],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"crate_data_as_rc_any","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[10,"describe_def","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"def_span","","",29,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[10,"stability","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"deprecation","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"visibility","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"visible_parent_map","","",29,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[10,"item_generics_cloned","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"item_attrs","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"fn_arg_names","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"inherent_implementations_for_type","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"implementations_of_trait","","",29,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[10,"impl_polarity","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[10,"impl_parent","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"trait_of_item","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"associated_item_cloned","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[10,"is_const_fn","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_default_impl","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_foreign_item","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_dllimport_foreign_item","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_statically_included_foreign_item","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_exported_symbol","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"dylib_dependency_formats","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"dep_kind","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"export_macros","","",29,null],[10,"lang_items","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"missing_lang_items","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_staged_api","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_allocator","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_panic_runtime","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_compiler_builtins","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_sanitizer_runtime","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"panic_strategy","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[10,"extern_crate","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"crate_name","","The name of the crate as it is referred to in source code of the current crate.",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"original_crate_name","","The name of the crate as it is stored in the crate's metadata.",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"crate_disambiguator","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"plugin_registrar_fn","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"derive_registrar_fn","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"native_libraries","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"exported_symbols","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_no_builtins","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"retrace_path","","",29,null],[10,"def_key","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"struct_field_names","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"load_macro","","",29,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"maybe_get_item_body","","",29,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"item_body_nested_bodies","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[10,"const_is_rvalue_promotable_to_static","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_item_mir_available","","",29,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"crates","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_libraries","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_link_args","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"metadata_filename","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"metadata_section_name","","",29,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[10,"used_crates","","",29,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[10,"used_crate_source","","",29,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[10,"extern_mod_stmt_cnum","","",29,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"encode_metadata","","",29,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[10,"metadata_encoding_version","","",29,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",30,null],[10,"postprocess","","",30,null],[0,"dataflow","rustc_lint::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_lint::middle::dataflow","",null,null],[13,"Entry","","",31,null],[13,"Exit","","",31,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",34,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",34,null],[0,"dead","rustc_lint::middle","",null,null],[5,"check_crate","rustc_lint::middle::dead","",null,null],[0,"dependency_format","rustc_lint::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_lint::middle::dependency_format","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",35,null],[13,"IncludedFromDylib","","",35,null],[13,"Static","","",35,null],[13,"Dynamic","","",35,null],[5,"calculate","","",null,null],[0,"effect","rustc_lint::middle","Enforces the Rust effect system. Currently there is just one effect, `unsafe`.",null,null],[5,"check_crate","rustc_lint::middle::effect","",null,null],[0,"entry","rustc_lint::middle","",null,null],[5,"find_entry_point","rustc_lint::middle::entry","",null,null],[0,"free_region","rustc_lint::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_lint::middle::free_region","",null,null],[0,"intrinsicck","rustc_lint::middle","",null,null],[5,"check_crate","rustc_lint::middle::intrinsicck","",null,null],[0,"lang_items","rustc_lint::middle","",null,null],[4,"LangItem","rustc_lint::middle::lang_items","",null,null],[13,"CharImplItem","","",36,null],[13,"StrImplItem","","",36,null],[13,"SliceImplItem","","",36,null],[13,"ConstPtrImplItem","","",36,null],[13,"MutPtrImplItem","","",36,null],[13,"I8ImplItem","","",36,null],[13,"I16ImplItem","","",36,null],[13,"I32ImplItem","","",36,null],[13,"I64ImplItem","","",36,null],[13,"I128ImplItem","","",36,null],[13,"IsizeImplItem","","",36,null],[13,"U8ImplItem","","",36,null],[13,"U16ImplItem","","",36,null],[13,"U32ImplItem","","",36,null],[13,"U64ImplItem","","",36,null],[13,"U128ImplItem","","",36,null],[13,"UsizeImplItem","","",36,null],[13,"F32ImplItem","","",36,null],[13,"F64ImplItem","","",36,null],[13,"SendTraitLangItem","","",36,null],[13,"SizedTraitLangItem","","",36,null],[13,"UnsizeTraitLangItem","","",36,null],[13,"CopyTraitLangItem","","",36,null],[13,"SyncTraitLangItem","","",36,null],[13,"DropTraitLangItem","","",36,null],[13,"CoerceUnsizedTraitLangItem","","",36,null],[13,"AddTraitLangItem","","",36,null],[13,"SubTraitLangItem","","",36,null],[13,"MulTraitLangItem","","",36,null],[13,"DivTraitLangItem","","",36,null],[13,"RemTraitLangItem","","",36,null],[13,"NegTraitLangItem","","",36,null],[13,"NotTraitLangItem","","",36,null],[13,"BitXorTraitLangItem","","",36,null],[13,"BitAndTraitLangItem","","",36,null],[13,"BitOrTraitLangItem","","",36,null],[13,"ShlTraitLangItem","","",36,null],[13,"ShrTraitLangItem","","",36,null],[13,"AddAssignTraitLangItem","","",36,null],[13,"SubAssignTraitLangItem","","",36,null],[13,"MulAssignTraitLangItem","","",36,null],[13,"DivAssignTraitLangItem","","",36,null],[13,"RemAssignTraitLangItem","","",36,null],[13,"BitXorAssignTraitLangItem","","",36,null],[13,"BitAndAssignTraitLangItem","","",36,null],[13,"BitOrAssignTraitLangItem","","",36,null],[13,"ShlAssignTraitLangItem","","",36,null],[13,"ShrAssignTraitLangItem","","",36,null],[13,"IndexTraitLangItem","","",36,null],[13,"IndexMutTraitLangItem","","",36,null],[13,"UnsafeCellTypeLangItem","","",36,null],[13,"DerefTraitLangItem","","",36,null],[13,"DerefMutTraitLangItem","","",36,null],[13,"FnTraitLangItem","","",36,null],[13,"FnMutTraitLangItem","","",36,null],[13,"FnOnceTraitLangItem","","",36,null],[13,"EqTraitLangItem","","",36,null],[13,"OrdTraitLangItem","","",36,null],[13,"StrEqFnLangItem","","",36,null],[13,"PanicFnLangItem","","",36,null],[13,"PanicBoundsCheckFnLangItem","","",36,null],[13,"PanicFmtLangItem","","",36,null],[13,"ExchangeMallocFnLangItem","","",36,null],[13,"BoxFreeFnLangItem","","",36,null],[13,"StrDupUniqFnLangItem","","",36,null],[13,"StartFnLangItem","","",36,null],[13,"EhPersonalityLangItem","","",36,null],[13,"EhUnwindResumeLangItem","","",36,null],[13,"MSVCTryFilterLangItem","","",36,null],[13,"OwnedBoxLangItem","","",36,null],[13,"PhantomDataItem","","",36,null],[13,"CovariantTypeItem","","",36,null],[13,"ContravariantTypeItem","","",36,null],[13,"InvariantTypeItem","","",36,null],[13,"CovariantLifetimeItem","","",36,null],[13,"ContravariantLifetimeItem","","",36,null],[13,"InvariantLifetimeItem","","",36,null],[13,"NoCopyItem","","",36,null],[13,"NonZeroItem","","",36,null],[13,"DebugTraitLangItem","","",36,null],[3,"LanguageItems","","",null,null],[12,"items","","",37,null],[12,"missing","","",37,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_lint::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc_lint::middle::liveness","",null,null],[0,"mem_categorization","rustc_lint::middle","Categorization",null,null],[4,"Categorization","rustc_lint::middle::mem_categorization","",null,null],[13,"Rvalue","","",38,null],[13,"StaticItem","","",38,null],[13,"Upvar","","",38,null],[13,"Local","","",38,null],[13,"Deref","","",38,null],[13,"Interior","","",38,null],[13,"Downcast","","",38,null],[3,"Upvar","","",null,null],[12,"id","","",39,null],[12,"kind","","",39,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",40,null],[13,"BorrowedPtr","","`&T`",40,null],[13,"UnsafePtr","","`*T`",40,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",40,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",41,null],[13,"InteriorElement","","",41,null],[4,"FieldName","","",null,null],[13,"NamedField","","",42,null],[13,"PositionalField","","",42,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",43,null],[13,"Pattern","","",43,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",44,null],[13,"OtherElement","","",44,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",45,null],[13,"McDeclared","","",45,null],[13,"McInherited","","",45,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",46,null],[13,"NoteUpvarRef","","",46,null],[13,"NoteNone","","",46,null],[3,"cmt_","","",null,null],[12,"id","","",47,null],[12,"span","","",47,null],[12,"cat","","",47,null],[12,"mutbl","","",47,null],[12,"ty","","",47,null],[12,"note","","",47,null],[6,"cmt","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",48,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",48,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",49,null],[3,"MemCategorizationOptions","","",null,null],[12,"during_closure_kind_inference","","",50,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",51,null],[13,"NonAliasable","","",51,null],[13,"ImmutableUnique","","",51,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",52,null],[13,"AliasableClosure","","",52,null],[13,"AliasableOther","","",52,null],[13,"UnaliasableImmutable","","",52,null],[13,"AliasableStatic","","",52,null],[13,"AliasableStaticMut","","",52,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_lint::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_lint::middle::privacy","",null,null],[13,"Reachable","","",53,null],[13,"Exported","","",53,null],[13,"Public","","",53,null],[3,"AccessLevels","","",null,null],[12,"map","","",54,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[0,"reachable","rustc_lint::middle","",null,null],[5,"find_reachable","rustc_lint::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_lint::middle","This file actually contains two passes related to regions.  The first pass builds up the `scope_map`, which describes the parent links in the region hierarchy.  The second pass infers which types must be region parameterized.",null,null],[3,"CodeExtent","rustc_lint::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling instead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be used to bound the lifetime/region for values.",null,null],[13,"Misc","","",55,null],[13,"CallSiteScope","","",55,null],[12,"fn_id","rustc_lint::middle::region::CodeExtentData","",55,null],[12,"body_id","","",55,null],[13,"ParameterScope","rustc_lint::middle::region","",55,null],[12,"fn_id","rustc_lint::middle::region::CodeExtentData","",55,null],[12,"body_id","","",55,null],[13,"DestructionScope","rustc_lint::middle::region","",55,null],[13,"Remainder","","",55,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",56,null],[12,"body_id","","",56,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",57,null],[12,"first_statement_index","","",57,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[0,"recursion_limit","rustc_lint::middle","",null,null],[5,"update_limits","rustc_lint::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_lint::middle","Name resolution for lifetimes.",null,null],[4,"Region","rustc_lint::middle::resolve_lifetime","",null,null],[13,"Static","","",58,null],[13,"EarlyBound","","",58,null],[13,"LateBound","","",58,null],[13,"LateBoundAnon","","",58,null],[13,"Free","","",58,null],[4,"Set1","","A set containing, at most, one known element. If two distinct values are inserted into a set, then it becomes `Many`, which can be used to detect ambiguities.",null,null],[13,"Empty","","",59,null],[13,"One","","",59,null],[13,"Many","","",59,null],[6,"ObjectLifetimeDefault","","",null,null],[3,"NamedRegionMap","","",null,null],[12,"defs","","",60,null],[12,"late_bound","","",60,null],[12,"issue_32330","","",60,null],[12,"object_lifetime_defaults","","",60,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[0,"stability","rustc_lint::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_lint::middle::stability","",null,null],[13,"Unstable","","",61,null],[13,"Stable","","",61,null],[3,"DeprecationEntry","","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",62,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,null],[0,"weak_lang_items","rustc_lint::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_lint::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"session","rustc_lint","",null,null],[0,"config","rustc_lint::session","Contains infrastructure for configuring the compiler, including parsing command line options.",null,null],[3,"Config","rustc_lint::session::config","",null,null],[12,"target","","",63,null],[12,"int_type","","",63,null],[12,"uint_type","","",63,null],[4,"Sanitizer","","",null,null],[13,"Address","","",64,null],[13,"Leak","","",64,null],[13,"Memory","","",64,null],[13,"Thread","","",64,null],[4,"OptLevel","","",null,null],[13,"No","","",65,null],[13,"Less","","",65,null],[13,"Default","","",65,null],[13,"Aggressive","","",65,null],[13,"Size","","",65,null],[13,"SizeMin","","",65,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",66,null],[13,"LimitedDebugInfo","","",66,null],[13,"FullDebugInfo","","",66,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",67,null],[13,"Assembly","","",67,null],[13,"LlvmAssembly","","",67,null],[13,"Metadata","","",67,null],[13,"Object","","",67,null],[13,"Exe","","",67,null],[13,"DepInfo","","",67,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",68,null],[13,"Json","","",68,null],[3,"OutputTypes","","",null,null],[3,"Externs","","",null,null],[3,"Options","","",null,null],[12,"crate_types","","",69,null],[12,"optimize","","",69,null],[12,"debug_assertions","","",69,null],[12,"debuginfo","","",69,null],[12,"lint_opts","","",69,null],[12,"lint_cap","","",69,null],[12,"describe_lints","","",69,null],[12,"output_types","","",69,null],[12,"search_paths","","",69,null],[12,"libs","","",69,null],[12,"maybe_sysroot","","",69,null],[12,"target_triple","","",69,null],[12,"test","","",69,null],[12,"error_format","","",69,null],[12,"incremental","","",69,null],[12,"debugging_opts","","",69,null],[12,"prints","","",69,null],[12,"cg","","",69,null],[12,"externs","","",69,null],[12,"crate_name","","",69,null],[12,"alt_std_name","","",69,null],[12,"unstable_features","","",69,null],[12,"actually_rustdoc","","",69,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",70,null],[13,"Sysroot","","",70,null],[13,"CrateName","","",70,null],[13,"Cfg","","",70,null],[13,"TargetList","","",70,null],[13,"TargetCPUs","","",70,null],[13,"TargetFeatures","","",70,null],[13,"RelocationModels","","",70,null],[13,"CodeModels","","",70,null],[13,"TargetSpec","","",70,null],[4,"Input","","",null,null],[13,"File","","Load source from file",71,null],[13,"Str","","",71,null],[12,"name","rustc_lint::session::config::Input","String that is shown in place of a filename",71,null],[12,"input","","Anonymous source string",71,null],[3,"OutputFilenames","rustc_lint::session::config","",null,null],[12,"out_directory","","",72,null],[12,"out_filestem","","",72,null],[12,"single_output_file","","",72,null],[12,"extra","","",72,null],[12,"outputs","","",72,null],[17,"NUMBERED_CODEGEN_UNIT_MARKER","","Codegen unit names generated by the numbered naming scheme will contain this marker right before the index of the codegen unit.",null,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[4,"EntryFnType","","",null,null],[13,"EntryMain","","",73,null],[13,"EntryStart","","",73,null],[13,"EntryNone","","",73,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",74,null],[13,"CrateTypeDylib","","",74,null],[13,"CrateTypeRlib","","",74,null],[13,"CrateTypeStaticlib","","",74,null],[13,"CrateTypeCdylib","","",74,null],[13,"CrateTypeProcMacro","","",74,null],[4,"Passes","","",null,null],[13,"SomePasses","","",75,null],[13,"AllPasses","","",75,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",76,null],[12,"linker","","",76,null],[12,"link_arg","","",76,null],[12,"link_args","","",76,null],[12,"link_dead_code","","",76,null],[12,"lto","","",76,null],[12,"target_cpu","","",76,null],[12,"target_feature","","",76,null],[12,"passes","","",76,null],[12,"llvm_args","","",76,null],[12,"save_temps","","",76,null],[12,"rpath","","",76,null],[12,"overflow_checks","","",76,null],[12,"no_prepopulate_passes","","",76,null],[12,"no_vectorize_loops","","",76,null],[12,"no_vectorize_slp","","",76,null],[12,"soft_float","","",76,null],[12,"prefer_dynamic","","",76,null],[12,"no_integrated_as","","",76,null],[12,"no_redzone","","",76,null],[12,"relocation_model","","",76,null],[12,"code_model","","",76,null],[12,"metadata","","",76,null],[12,"extra_filename","","",76,null],[12,"codegen_units","","",76,null],[12,"remark","","",76,null],[12,"no_stack_check","","",76,null],[12,"debuginfo","","",76,null],[12,"opt_level","","",76,null],[12,"debug_assertions","","",76,null],[12,"inline_threshold","","",76,null],[12,"panic","","",76,null],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[6,"CodegenSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",77,null],[12,"time_passes","","",77,null],[12,"count_llvm_insns","","",77,null],[12,"time_llvm_passes","","",77,null],[12,"input_stats","","",77,null],[12,"trans_stats","","",77,null],[12,"asm_comments","","",77,null],[12,"no_verify","","",77,null],[12,"borrowck_stats","","",77,null],[12,"no_landing_pads","","",77,null],[12,"debug_llvm","","",77,null],[12,"meta_stats","","",77,null],[12,"print_link_args","","",77,null],[12,"print_llvm_passes","","",77,null],[12,"ast_json","","",77,null],[12,"ast_json_noexpand","","",77,null],[12,"ls","","",77,null],[12,"save_analysis","","",77,null],[12,"save_analysis_csv","","",77,null],[12,"save_analysis_api","","",77,null],[12,"print_move_fragments","","",77,null],[12,"flowgraph_print_loans","","",77,null],[12,"flowgraph_print_moves","","",77,null],[12,"flowgraph_print_assigns","","",77,null],[12,"flowgraph_print_all","","",77,null],[12,"print_region_graph","","",77,null],[12,"parse_only","","",77,null],[12,"no_trans","","",77,null],[12,"treat_err_as_bug","","",77,null],[12,"continue_parse_after_error","","",77,null],[12,"incremental","","",77,null],[12,"incremental_cc","","",77,null],[12,"incremental_info","","",77,null],[12,"incremental_dump_hash","","",77,null],[12,"dump_dep_graph","","",77,null],[12,"query_dep_graph","","",77,null],[12,"no_analysis","","",77,null],[12,"extra_plugins","","",77,null],[12,"unstable_options","","",77,null],[12,"force_overflow_checks","","",77,null],[12,"trace_macros","","",77,null],[12,"debug_macros","","",77,null],[12,"enable_nonzeroing_move_hints","","",77,null],[12,"keep_hygiene_data","","",77,null],[12,"keep_ast","","",77,null],[12,"show_span","","",77,null],[12,"print_type_sizes","","",77,null],[12,"print_trans_items","","",77,null],[12,"mir_opt_level","","",77,null],[12,"dump_mir","","",77,null],[12,"dump_mir_dir","","",77,null],[12,"perf_stats","","",77,null],[12,"hir_stats","","",77,null],[12,"mir_stats","","",77,null],[12,"always_encode_mir","","",77,null],[12,"osx_rpath_install_name","","",77,null],[12,"sanitizer","","",77,null],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[6,"DebuggingSetter","","",null,null],[17,"DB_OPTIONS","","",null,null],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"hashset"}}],[5,"build_configuration","","",null,{"inputs":[{"name":"session"},{"name":"hashset"}],"output":{"name":"hashset"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[4,"OptionStability","","",null,null],[13,"Stable","","",78,null],[13,"UnstableButNotReally","","",78,null],[13,"Unstable","","",78,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",79,null],[12,"stability","","",79,null],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"hashset"}}],[5,"build_session_options_and_crate_config","","",null,null],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc_lint::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[0,"filesearch","rustc_lint::session","",null,null],[4,"FileMatch","rustc_lint::session::filesearch","",null,null],[13,"FileMatches","","",80,null],[13,"FileDoesntMatch","","",80,null],[3,"FileSearch","","",null,null],[12,"sysroot","","",81,null],[12,"search_paths","","",81,null],[12,"triple","","",81,null],[12,"kind","","",81,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[0,"search_paths","rustc_lint::session","",null,null],[3,"SearchPaths","rustc_lint::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",82,null],[13,"Crate","","",82,null],[13,"Dependency","","",82,null],[13,"Framework","","",82,null],[13,"ExternFlag","","",82,null],[13,"All","","",82,null],[3,"Session","rustc_lint::session","",null,null],[12,"dep_graph","","",83,null],[12,"target","","",83,null],[12,"host","","",83,null],[12,"opts","","",83,null],[12,"cstore","","",83,null],[12,"parse_sess","","",83,null],[12,"entry_fn","","",83,null],[12,"entry_type","","",83,null],[12,"plugin_registrar_fn","","",83,null],[12,"derive_registrar_fn","","",83,null],[12,"default_sysroot","","",83,null],[12,"local_crate_source_file","","",83,null],[12,"working_dir","","",83,null],[12,"lint_store","","",83,null],[12,"lints","","",83,null],[12,"one_time_diagnostics","","Set of (LintId, span, message) tuples tracking lint (sub)diagnostics that have been set once, but should not be set again, in order to avoid redundantly verbose output (Issue #24690).",83,null],[12,"plugin_llvm_passes","","",83,null],[12,"mir_passes","","",83,null],[12,"plugin_attributes","","",83,null],[12,"crate_types","","",83,null],[12,"dependency_formats","","",83,null],[12,"crate_disambiguator","","",83,null],[12,"features","","",83,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization.",83,null],[12,"type_length_limit","","The maximum length of types during monomorphization.",83,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime dependency if it didn't already find one, and this tracks what was injected.",83,null],[12,"injected_panic_runtime","","",83,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of the localized span for the macro body) to the macro name and defintion span in the source crate.",83,null],[12,"perf_stats","","Some measurements that are being gathered during compilation.",83,null],[12,"code_stats","","Data about code being compiled, gathered during compilation.",83,null],[3,"PerfStats","","",null,null],[12,"svh_time","","",84,null],[12,"incr_comp_hashes_time","","",84,null],[12,"incr_comp_hashes_count","","",84,null],[12,"incr_comp_bytes_hashed","","",84,null],[12,"symbol_hash_time","","",84,null],[12,"decode_def_path_tables_time","","",84,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"},{"name":"option"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[4,"IncrCompSession","","Holds data on the current incremental compilation session, if there is one.",null,null],[13,"NotInitialized","","",85,null],[13,"Active","","",85,null],[12,"session_directory","rustc_lint::session::IncrCompSession","",85,null],[12,"lock_file","","",85,null],[13,"Finalized","rustc_lint::session","",85,null],[12,"session_directory","rustc_lint::session::IncrCompSession","",85,null],[13,"InvalidBecauseOfErrors","rustc_lint::session","",85,null],[12,"session_directory","rustc_lint::session::IncrCompSession","",85,null],[5,"early_error","rustc_lint::session","",null,null],[5,"early_warn","","",null,null],[6,"CompileResult","","",null,null],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[3,"TypeSizeInfo","","",null,null],[12,"kind","","",86,null],[12,"type_description","","",86,null],[12,"align","","",86,null],[12,"overall_size","","",86,null],[12,"opt_discr_size","","",86,null],[12,"variants","","",86,null],[3,"CodeStats","","",null,null],[4,"SizeKind","","",null,null],[13,"Exact","","",87,null],[13,"Min","","",87,null],[3,"FieldInfo","","",null,null],[12,"name","","",88,null],[12,"offset","","",88,null],[12,"size","","",88,null],[12,"align","","",88,null],[3,"VariantInfo","","",null,null],[12,"name","","",89,null],[12,"kind","","",89,null],[12,"size","","",89,null],[12,"align","","",89,null],[12,"fields","","",89,null],[4,"DataTypeKind","","",null,null],[13,"Struct","","",90,null],[13,"Union","","",90,null],[13,"Enum","","",90,null],[13,"Closure","","",90,null],[0,"util","rustc_lint","",null,null],[0,"common","rustc_lint::util","",null,null],[17,"FN_OUTPUT_NAME","rustc_lint::util::common","",null,null],[3,"ErrorReported","","",null,null],[5,"time_depth","","Read the current depth of `time()` calls. This is used to encourage indentation across threads.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"set_time_depth","","Set the current depth of `time()` calls. The idea is to call `set_time_depth()` with the result from `time_depth()` in the parent thread.",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"duration_to_secs_str","","",null,{"inputs":[{"name":"duration"}],"output":{"name":"string"}}],[5,"to_readable_str","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"record_time","","",null,{"inputs":[{"name":"cell"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[3,"Indenter","","",null,null],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[8,"MemoizationMap","","",null,null],[16,"Key","","",91,null],[16,"Value","","",91,null],[10,"memoize","","If `key` is present in the map, return the valuee, otherwise invoke `op` and store the value in the map.",91,null],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[0,"ppaux","rustc_lint::util","",null,null],[5,"verbose","rustc_lint::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"parameterized","","",null,null],[0,"nodemap","rustc_lint::util","An efficient hash map for node IDs",null,null],[6,"NodeMap","rustc_lint::util::nodemap","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[6,"FxHashMap","","",null,null],[6,"FxHashSet","","",null,null],[0,"fs","rustc_lint::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc_lint::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[4,"LinkOrCopy","","",null,null],[13,"Link","","",92,null],[13,"Copy","","",92,null],[5,"link_or_copy","","Copy `p` into `q`, preferring to use hard-linking if possible. If `q` already exists, it is removed first. The result indicates which of the two operations has been performed.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[4,"RenameOrCopyRemove","","",null,null],[13,"Rename","","",93,null],[13,"CopyRemove","","",93,null],[5,"rename_or_copy_remove","","Rename `p` into `q`, preferring to use `rename` if possible. If `rename` fails (rename may fail for reasons such as crossing filesystem), fallback to copy & remove",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"create_dir_racy","","",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"register_builtins","rustc_lint","Tell the `LintStore` about all the built-in lints (the ones defined in this crate and the ones defined in `rustc::lint::builtin`).",null,{"inputs":[{"name":"lintstore"},{"name":"option"}],"output":null}],[11,"name_lower","rustc_lint::lint","Get the lint's name, with ASCII letters converted to lowercase.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"neg","rustc_lint::middle::const_val","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitxor","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"option"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"not","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitor","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"bitand","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"shl","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"shr","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"ordering"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_lints","rustc_lint::lint::builtin","",94,null],[11,"decode","rustc_lint::lint","",95,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::cstore","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::free_region","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::lang_items","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::region","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::resolve_lifetime","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::middle::stability","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_lint::session::config","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","rustc_lint::lint","",4,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::middle::cstore","",22,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::middle::privacy","",53,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::middle::region","",98,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"lt","","",98,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"le","","",98,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"gt","","",98,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ge","","",98,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_lint::middle::stability","",61,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::session::config","",67,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_lint::session::search_paths","",82,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"option"}}],[11,"visit_item","rustc_lint::lint","",8,null],[11,"visit_foreign_item","","",8,null],[11,"visit_pat","","",8,null],[11,"visit_expr","","",8,null],[11,"visit_stmt","","",8,null],[11,"visit_fn","","",8,null],[11,"visit_variant_data","","",8,null],[11,"visit_struct_field","","",8,null],[11,"visit_variant","","",8,null],[11,"visit_ty","","",8,null],[11,"visit_ident","","",8,null],[11,"visit_mod","","",8,null],[11,"visit_local","","",8,null],[11,"visit_block","","",8,null],[11,"visit_arm","","",8,null],[11,"visit_expr_post","","",8,null],[11,"visit_generics","","",8,null],[11,"visit_trait_item","","",8,null],[11,"visit_impl_item","","",8,null],[11,"visit_lifetime","","",8,null],[11,"visit_lifetime_def","","",8,null],[11,"visit_path","","",8,null],[11,"visit_path_list_item","","",8,null],[11,"visit_attribute","","",8,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::expr_use_visitor","",13,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::cstore","",21,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::dataflow","",34,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::dependency_format","",35,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::lang_items","",36,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::mem_categorization","",38,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"elementkind"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::privacy","",53,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::region","",98,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::resolve_lifetime","",58,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::middle::stability","",61,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::session","",89,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"sizekind"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"datatypekind"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::session::config","",65,{"inputs":[{"name":"self"},{"name":"optlevel"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"debuginfolevel"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"printrequest"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"entryfntype"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"optionstability"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"eq","rustc_lint::session::search_paths","",82,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"bool"}}],[11,"hash","rustc_lint::lint","",95,null],[11,"hash","","",4,null],[11,"hash","rustc_lint::middle::const_val","",18,null],[11,"hash","rustc_lint::middle::cstore","",25,null],[11,"hash","","",26,null],[11,"hash","rustc_lint::middle::lang_items","",36,null],[11,"hash","rustc_lint::middle::mem_categorization","",40,null],[11,"hash","","",41,null],[11,"hash","","",42,null],[11,"hash","","",43,null],[11,"hash","","",44,null],[11,"hash","","",45,null],[11,"hash","rustc_lint::middle::region","",98,null],[11,"hash","","",55,null],[11,"hash","","",56,null],[11,"hash","","",57,null],[11,"hash","rustc_lint::middle::resolve_lifetime","",58,null],[11,"hash","rustc_lint::middle::stability","",61,null],[11,"hash","rustc_lint::session","",89,null],[11,"hash","","",87,null],[11,"hash","","",88,null],[11,"hash","","",90,null],[11,"hash","","",86,null],[11,"hash","rustc_lint::session::config","",64,null],[11,"hash","","",65,null],[11,"hash","","",66,null],[11,"hash","","",67,null],[11,"hash","","",100,null],[11,"hash","","",101,null],[11,"hash","","",74,null],[11,"hash","","",75,null],[11,"hash","rustc_lint::session::search_paths","",82,null],[11,"crate_data_as_rc_any","rustc_lint::middle::cstore","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"describe_def","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",102,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"visible_parent_map","","",102,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"item_generics_cloned","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"fn_arg_names","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",102,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"impl_polarity","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"impl_parent","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item_cloned","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"is_const_fn","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_exported_symbol","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"lang_items","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"dep_kind","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",102,null],[11,"is_allocator","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"extern_crate","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_name","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",102,null],[11,"def_key","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",102,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",102,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_item_mir_available","","",102,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",102,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",102,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",102,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",102,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",102,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",102,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",102,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",102,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",102,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",102,null],[11,"default","rustc_lint::middle::privacy","",54,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"default","rustc_lint::session::config","",68,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"default","rustc_lint::middle::mem_categorization","",50,{"inputs":[],"output":{"name":"memcategorizationoptions"}}],[11,"drop","rustc_lint::util::common","",103,null],[11,"sess","rustc_lint::lint","Get the overall compiler `Session` object.",10,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",10,null],[11,"exit_attrs","","",10,null],[11,"sess","","Get the overall compiler `Session` object.",8,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",8,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",8,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",8,null],[11,"exit_attrs","","",8,null],[11,"fmt","rustc_lint::middle::mem_categorization","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session::config","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::lint","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::mem_categorization","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::privacy","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::region","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::lint","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::expr_use_visitor","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::cstore","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::dataflow","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::dependency_format","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::mem_categorization","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::privacy","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::region","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::resolve_lifetime","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::middle::stability","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session::config","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session::search_paths","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::session","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::util::common","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_lint::util::fs","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nested","rustc_lint::middle::dataflow","",107,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",107,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"clone","rustc_lint::lint","",0,{"inputs":[{"name":"self"}],"output":{"name":"lint"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"lintid"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lintsource"}}],[11,"clone","rustc_lint::lint::builtin","",94,{"inputs":[{"name":"self"}],"output":{"name":"hardwiredlints"}}],[11,"clone","rustc_lint::middle::expr_use_visitor","",13,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"clone","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"clone","rustc_lint::middle::cstore","",20,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"clone","rustc_lint::middle::dataflow","",31,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"clone","rustc_lint::middle::dependency_format","",35,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"clone","rustc_lint::middle::free_region","",97,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"clone","rustc_lint::middle::lang_items","",36,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"clone","rustc_lint::middle::mem_categorization","",38,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"elementkind"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationoptions"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"clone","rustc_lint::middle::privacy","",53,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"clone","rustc_lint::middle::region","",98,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"codeextentdata"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"callsitescopedata"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","rustc_lint::middle::resolve_lifetime","",58,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"set1"}}],[11,"clone","rustc_lint::middle::stability","",61,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"clone","rustc_lint::session","",89,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"sizekind"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"fieldinfo"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"datatypekind"}}],[11,"clone","rustc_lint::session::config","",64,{"inputs":[{"name":"self"}],"output":{"name":"sanitizer"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"optlevel"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"debuginfolevel"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"outputtype"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"erroroutputtype"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"outputtypes"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"externs"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"printrequest"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"outputfilenames"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"entryfntype"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"cratetype"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"passes"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptions"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"debuggingoptions"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"optionstability"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"rustcoptgroup"}}],[11,"clone","rustc_lint::session::filesearch","",80,{"inputs":[{"name":"self"}],"output":{"name":"filematch"}}],[11,"clone","rustc_lint::session::search_paths","",105,{"inputs":[{"name":"self"}],"output":{"name":"searchpaths"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"pathkind"}}],[11,"clone","rustc_lint::util::common","",106,{"inputs":[{"name":"self"}],"output":{"name":"errorreported"}}],[11,"from","rustc_lint::session","",90,{"inputs":[{"name":"adtkind"}],"output":{"name":"datatypekind"}}],[11,"next","rustc_lint::session::search_paths","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nested_visit_map","rustc_lint::lint","Because lints are scoped lexically, we want to walk nested items in the context of the outer item, so enable deep-walking.",10,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_id","","",10,null],[11,"visit_nested_body","","",10,null],[11,"visit_body","","",10,null],[11,"visit_item","","",10,null],[11,"visit_foreign_item","","",10,null],[11,"visit_pat","","",10,null],[11,"visit_expr","","",10,null],[11,"visit_stmt","","",10,null],[11,"visit_fn","","",10,null],[11,"visit_variant_data","","",10,null],[11,"visit_struct_field","","",10,null],[11,"visit_variant","","",10,null],[11,"visit_ty","","",10,null],[11,"visit_name","","",10,null],[11,"visit_mod","","",10,null],[11,"visit_local","","",10,null],[11,"visit_block","","",10,null],[11,"visit_arm","","",10,null],[11,"visit_decl","","",10,null],[11,"visit_generics","","",10,null],[11,"visit_trait_item","","",10,null],[11,"visit_impl_item","","",10,null],[11,"visit_lifetime","","",10,null],[11,"visit_lifetime_def","","",10,null],[11,"visit_path","","",10,null],[11,"visit_attribute","","",10,null],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::cstore","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::free_region","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::lang_items","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::region","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::resolve_lifetime","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::middle::stability","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_lint::session::config","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","rustc_lint::lint","",4,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::middle::cstore","",22,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::middle::privacy","",53,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::middle::region","",98,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"ordering"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"ordering"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"ordering"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::session::config","",67,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"ordering"}}],[11,"cmp","","",74,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_lint::session::search_paths","",82,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"ordering"}}],[11,"super_fold_with","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"constval"}}],[11,"of","rustc_lint::lint","Get the `LintId` for a `Lint`.",95,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"to_string","","Get the name of the lint.",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_str","","Convert a level to a lower-case string.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","Convert a lower-case string to a level.",4,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",96,{"inputs":[],"output":{"name":"linttable"}}],[11,"add_lint","","",96,null],[11,"add_lint_diagnostic","","",96,null],[11,"get","","",96,null],[11,"take","","",96,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"vec"}}],[11,"transfer","","",96,null],[11,"get_any","","Returns the first (id, lint) pair that is non-empty. Used to implement a sanity check in lints that all node-ids are visited.",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",109,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",109,null],[11,"get_lint_groups","","",109,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_early_pass","","",109,null],[11,"register_late_pass","","",109,null],[11,"register_future_incompatible","","",109,null],[11,"future_incompatible","","",109,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"option"}}],[11,"register_group","","",109,null],[11,"register_renamed","","",109,null],[11,"register_removed","","",109,null],[11,"process_command_line","","",109,null],[11,"new","rustc_lint::middle::expr_use_visitor","",110,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"with_options","","",110,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"exprusevisitor"}}],[11,"consume_body","","",110,null],[11,"consume_expr","","",110,null],[11,"walk_expr","","",110,null],[11,"description","rustc_lint::middle::const_val","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_const_int","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new_unsigned","","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",19,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"new_signed","","Creates a new signed ConstInt with matching type while also checking that overflow does not happen.",19,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"option"}}],[11,"new_unsigned_truncating","","Creates a new unsigned ConstInt with matching type.",19,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"constint"}}],[11,"new_signed_truncating","","Creates a new signed ConstInt with matching type.",19,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"constint"}}],[11,"description","","Description of the type, not the value",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_u128_unchecked","","Erases the type and returns a u128. This is not the same as `-5i8 as u128` but as `-5i8 as i128 as u128`",19,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u32","","Converts the value to a `u32` if it's in the range 0...std::u32::MAX",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","Converts the value to a `u64` if it's in the range 0...std::u64::MAX",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u128","","Converts the value to a `u128` if it's in the range 0...std::u128::MAX",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_negative","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",19,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",19,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"int_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"macros_only","rustc_lint::middle::cstore","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_some","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rustc_lint::middle::dataflow","",107,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",107,null],[11,"add_kill","","Indicates that `id` kills `bit`",107,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",107,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",107,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",107,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",107,null],[11,"propagate","","Performs the data flow analysis.",107,null],[11,"new","rustc_lint::middle::free_region","",97,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"is_empty","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"relate_free_regions_from_implied_bounds","","",97,null],[11,"relate_free_regions_from_predicates","","",97,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship by walking the graph encoded in `map`.  Note that it is possible that `sub != sup` and `sub <= sup` and `sup <= sub` (that is, the user can give two different names to the same lifetime).",97,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",97,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"region"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after inference* and sadly the logic is somewhat duplicated with the code in infer.rs.",97,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"is_static","","Determines whether this free-region is required to be 'static",97,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"from_u32","rustc_lint::middle::lang_items","",36,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",37,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",37,null],[11,"item_name","","",37,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",37,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"require_owned_box","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",37,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_eq_fn","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strdup_uniq_fn","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_type","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_lifetime","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_lifetime","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_lifetime","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_copy_bound","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_mutbl","rustc_lint::middle::mem_categorization","",45,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",45,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",45,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",45,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_field","","",47,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"option"}}],[11,"get_field_name","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_arg_if_immutable","","",47,{"inputs":[{"name":"self"},{"name":"map"}],"output":{"name":"option"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",47,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",47,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",47,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"new","","",49,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_options","","",49,{"inputs":[{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",49,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_expr_autoderefd","","",49,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cat_expr_unadjusted","","",49,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_def","","",49,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"},{"name":"def"}],"output":{"name":"result"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",49,null],[11,"cat_rvalue_node","","",49,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_rvalue","","",49,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"region"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_field","","",49,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"symbol"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_tup_field","","",49,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"usize"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",49,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"interioroffsetkind"}],"output":{"name":"result"}}],[11,"cat_imm_interior","","",49,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"interiorkind"}],"output":{"name":"rc"}}],[11,"cat_downcast","","",49,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"cat_pattern","","",49,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"pat"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_reachable","rustc_lint::middle::privacy","",54,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",54,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",54,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"node_id","rustc_lint::middle::region","",98,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this CodeExtent.  Note that in general the returned span may not correspond to the span of any node id in the AST.",98,{"inputs":[{"name":"self"},{"name":"regionmaps"},{"name":"map"}],"output":{"name":"option"}}],[11,"node_id","","Returns a node id associated with this scope.",55,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"to_code_extent","","",56,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"codeextent"}}],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody really cares about the contents of these.",111,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"lookup_code_extent","","",111,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"node_extent","","",111,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"item_extent","","",111,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"call_site_extent","","",111,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"opt_destruction_extent","","",111,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"intern_code_extent","","",111,{"inputs":[{"name":"self"},{"name":"codeextentdata"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"intern_node","","",111,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"code_extent_data","","",111,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextentdata"}}],[11,"each_encl_scope","","",111,null],[11,"each_var_scope","","",111,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",111,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",111,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",111,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"temporary_scope2","","",111,null],[11,"old_and_new_temporary_scope","","",111,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",111,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",111,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"scopes_intersect","","",111,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",111,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",111,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"insert","rustc_lint::middle::resolve_lifetime","",59,null],[11,"from_attr_level","rustc_lint::middle::stability","",61,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"same_origin","","",62,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"build","","Construct the stability index for a crate being compiled.",112,null],[11,"new","","",112,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"extension","rustc_lint::session::config","",67,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",100,null],[11,"get","","",100,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"contains_key","","",100,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"keys","","",100,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","",100,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"should_trans","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",101,{"inputs":[{"name":"btreemap"}],"output":{"name":"externs"}}],[11,"get","","",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",101,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"single_codegen_unit","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dep_tracking_hash","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"filestem","","",71,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"path","","",72,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"pathbuf"}}],[11,"temp_path","","Get the path where a compilation artifact of the given type for the given codegen unit should be placed on disk. If codegen_unit_name is None, a path distinct from those of any codegen unit will be generated.",72,{"inputs":[{"name":"self"},{"name":"outputtype"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"temp_path_ext","","Like temp_path, but also supports things where there is no corresponding OutputType, like no-opt-bitcode or lto-bitcode.",72,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"filestem","","",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_empty","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stable","","",79,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",79,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"for_each_lib_search_path","rustc_lint::session::filesearch","",81,null],[11,"get_lib_path","","",81,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"search","","",81,null],[11,"new","","",81,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",81,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tools_search_paths","","",81,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","rustc_lint::session::search_paths","",105,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",105,null],[11,"iter","","",105,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"iter"}}],[11,"local_crate_disambiguator","rustc_lint::session","",83,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"struct_span_warn","","",83,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",83,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",83,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",83,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",83,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",83,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",83,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",83,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",83,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",83,null],[11,"span_fatal_with_code","","",83,null],[11,"fatal","","",83,null],[11,"span_err_or_warn","","",83,null],[11,"span_err","","",83,null],[11,"span_err_with_code","","",83,null],[11,"err","","",83,null],[11,"err_count","","",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",83,null],[11,"track_errors","","",83,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"span_warn","","",83,null],[11,"span_warn_with_code","","",83,null],[11,"warn","","",83,null],[11,"opt_span_warn","","",83,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",83,null],[11,"note_without_error","","",83,null],[11,"span_note_without_error","","",83,null],[11,"span_unimpl","","",83,null],[11,"unimpl","","",83,null],[11,"add_lint","","",83,null],[11,"add_lint_diagnostic","","",83,null],[11,"reserve_node_ids","","",83,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"next_node_id","","",83,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"diagnostic","","",83,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"diag_span_note_once","","Analogous to calling `.span_note` on the given DiagnosticBuilder, but deduplicates on lint ID, span, and message for this `Session` if we're not outputting in JSON mode.",83,null],[11,"codemap","","",83,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"verbose","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_passes","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"count_llvm_insns","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_llvm_passes","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trans_stats","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta_stats","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"asm_comments","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"no_verify","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrowck_stats","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_llvm_passes","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lto","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","Returns the panic strategy for this compile session. If the user explicitly selected one using '-C panic', use that, otherwise use the panic strategy defined by the target.",83,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"no_landing_pads","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unstable_options","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"nonzeroing_move_hints","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"overflow_checks","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"must_not_eliminate_frame_pointers","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate_plugin_registrar_symbol","","Returns the symbol name for the registrar function, given the crate Svh and the function DefIndex.",83,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"generate_derive_registrar_symbol","","",83,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"sysroot","","",83,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"target_filesearch","","",83,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"host_filesearch","","",83,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"init_incr_comp_session","","",83,null],[11,"finalize_incr_comp_session","","",83,null],[11,"mark_incr_comp_session_as_invalid","","",83,null],[11,"incr_comp_session_dir","","",83,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"incr_comp_session_dir_opt","","",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_perf_stats","","",83,null],[11,"new","","",99,{"inputs":[],"output":{"name":"codestats"}}],[11,"record_type_size","","",99,null],[11,"print_type_sizes","","",99,null]],"paths":[[3,"Lint"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[4,"Level"],[4,"LintSource"],[8,"LintContext"],[8,"IntoEarlyLint"],[3,"EarlyContext"],[3,"EarlyLint"],[3,"LateContext"],[3,"FutureIncompatibleInfo"],[8,"Delegate"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[4,"ConstVal"],[4,"ConstInt"],[3,"LinkMeta"],[3,"CrateSource"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"NativeLibrary"],[4,"LoadedMacro"],[3,"ExternCrate"],[8,"CrateStore"],[8,"CrateLoader"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[4,"KillFrom"],[4,"Linkage"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[8,"ast_node"],[3,"MemCategorizationContext"],[3,"MemCategorizationOptions"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"Region"],[4,"Set1"],[3,"NamedRegionMap"],[4,"StabilityLevel"],[3,"DeprecationEntry"],[3,"Config"],[4,"Sanitizer"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[4,"PathKind"],[3,"Session"],[3,"PerfStats"],[4,"IncrCompSession"],[3,"TypeSizeInfo"],[4,"SizeKind"],[3,"FieldInfo"],[3,"VariantInfo"],[4,"DataTypeKind"],[8,"MemoizationMap"],[4,"LinkOrCopy"],[4,"RenameOrCopyRemove"],[3,"HardwiredLints"],[3,"LintId"],[3,"LintTable"],[3,"FreeRegionMap"],[3,"CodeExtent"],[3,"CodeStats"],[3,"OutputTypes"],[3,"Externs"],[3,"DummyCrateStore"],[3,"Indenter"],[3,"Context"],[3,"SearchPaths"],[3,"ErrorReported"],[3,"DataFlowContext"],[3,"Iter"],[3,"LintStore"],[3,"ExprUseVisitor"],[3,"RegionMaps"],[3,"Index"]]};
searchIndex["rustc_llvm"] = {"doc":"","items":[[3,"TargetData","rustc_llvm","",null,null],[12,"lltd","","",0,null],[3,"ObjectFile","","",null,null],[12,"llof","","",1,null],[3,"SectionIter","","",null,null],[12,"llsi","","",2,null],[3,"OperandBundleDef","","",null,null],[4,"AttributePlace","","",null,null],[13,"Argument","","",3,null],[13,"Function","","",3,null],[4,"CodeGenOptSize","","",null,null],[13,"CodeGenOptSizeNone","","",4,null],[13,"CodeGenOptSizeDefault","","",4,null],[13,"CodeGenOptSizeAggressive","","",4,null],[4,"RustString_opaque","","",null,null],[5,"AddFunctionAttrStringValue","","",null,{"inputs":[{"name":"valueref"},{"name":"attributeplace"},{"name":"cstr"},{"name":"cstr"}],"output":null}],[5,"LLVMRustStringWriteImpl","","Appending to a Rust string -- used by RawRustStringOstream.",null,null],[5,"SetInstructionCallConv","","",null,{"inputs":[{"name":"valueref"},{"name":"callconv"}],"output":null}],[5,"SetFunctionCallConv","","",null,{"inputs":[{"name":"valueref"},{"name":"callconv"}],"output":null}],[5,"SetUniqueComdat","","",null,{"inputs":[{"name":"moduleref"},{"name":"valueref"}],"output":null}],[5,"UnsetComdat","","",null,{"inputs":[{"name":"valueref"}],"output":null}],[5,"SetUnnamedAddr","","",null,{"inputs":[{"name":"valueref"},{"name":"bool"}],"output":null}],[5,"set_thread_local","","",null,{"inputs":[{"name":"valueref"},{"name":"bool"}],"output":null}],[5,"mk_target_data","","",null,{"inputs":[{"name":"str"}],"output":{"name":"targetdata"}}],[5,"mk_section_iter","","",null,{"inputs":[{"name":"objectfileref"}],"output":{"name":"sectioniter"}}],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun.",null,{"inputs":[{"name":"valueref"},{"name":"c_uint"}],"output":{"name":"valueref"}}],[5,"get_params","","",null,{"inputs":[{"name":"valueref"}],"output":{"name":"vec"}}],[5,"build_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"option"}}],[5,"twine_to_string","","",null,{"inputs":[{"name":"twineref"}],"output":{"name":"string"}}],[5,"debug_loc_to_string","","",null,{"inputs":[{"name":"contextref"},{"name":"debuglocref"}],"output":{"name":"string"}}],[5,"initialize_available_targets","","",null,{"inputs":[],"output":null}],[5,"last_error","","",null,{"inputs":[],"output":{"name":"option"}}],[0,"archive_ro","","A wrapper around LLVM's archive (.a) code",null,null],[3,"ArchiveRO","rustc_llvm::archive_ro","",null,null],[3,"Iter","","",null,null],[3,"Child","","",null,null],[11,"open","","Opens a static archive for read-only purposes. This is more optimized than the `open` method because it uses LLVM's internal `Archive` class rather than shelling out to `ar` for everything.",5,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"raw","","",5,{"inputs":[{"name":"self"}],"output":{"name":"archiveref"}}],[11,"iter","","",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"data","","",7,null],[11,"raw","","",7,{"inputs":[{"name":"self"}],"output":{"name":"archivechildref"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[0,"diagnostic","rustc_llvm","LLVM diagnostic reports.",null,null],[3,"OptimizationDiagnostic","rustc_llvm::diagnostic","",null,null],[12,"kind","","",8,null],[12,"pass_name","","",8,null],[12,"function","","",8,null],[12,"debug_loc","","",8,null],[12,"message","","",8,null],[3,"InlineAsmDiagnostic","","",null,null],[12,"cookie","","",9,null],[12,"message","","",9,null],[12,"instruction","","",9,null],[4,"OptimizationDiagnosticKind","","",null,null],[13,"OptimizationRemark","","",10,null],[13,"OptimizationMissed","","",10,null],[13,"OptimizationAnalysis","","",10,null],[13,"OptimizationAnalysisFPCommute","","",10,null],[13,"OptimizationAnalysisAliasing","","",10,null],[13,"OptimizationFailure","","",10,null],[13,"OptimizationRemarkOther","","",10,null],[4,"Diagnostic","","",null,null],[13,"Optimization","","",11,null],[13,"InlineAsm","","",11,null],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",11,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"optimizationdiagnostickind"}}],[11,"describe","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmdiagnostic"}}],[11,"unpack","","",11,{"inputs":[{"name":"diagnosticinforef"}],"output":{"name":"diagnostic"}}],[0,"ffi","rustc_llvm","",null,null],[4,"LLVMRustResult","rustc_llvm::ffi","",null,null],[13,"Success","","",12,null],[13,"Failure","","",12,null],[4,"CallConv","","LLVM CallingConv::ID. Should we wrap this?",null,null],[13,"CCallConv","","",13,null],[13,"FastCallConv","","",13,null],[13,"ColdCallConv","","",13,null],[13,"X86StdcallCallConv","","",13,null],[13,"X86FastcallCallConv","","",13,null],[13,"ArmAapcsCallConv","","",13,null],[13,"Msp430Intr","","",13,null],[13,"PtxKernel","","",13,null],[13,"X86_64_SysV","","",13,null],[13,"X86_64_Win64","","",13,null],[13,"X86_VectorCall","","",13,null],[13,"X86_Intr","","",13,null],[4,"Linkage","","LLVMRustLinkage",null,null],[13,"ExternalLinkage","","",14,null],[13,"AvailableExternallyLinkage","","",14,null],[13,"LinkOnceAnyLinkage","","",14,null],[13,"LinkOnceODRLinkage","","",14,null],[13,"WeakAnyLinkage","","",14,null],[13,"WeakODRLinkage","","",14,null],[13,"AppendingLinkage","","",14,null],[13,"InternalLinkage","","",14,null],[13,"PrivateLinkage","","",14,null],[13,"ExternalWeakLinkage","","",14,null],[13,"CommonLinkage","","",14,null],[4,"Visibility","","",null,null],[13,"Default","","",15,null],[13,"Hidden","","",15,null],[13,"Protected","","",15,null],[4,"DiagnosticSeverity","","LLVMDiagnosticSeverity",null,null],[13,"Error","","",16,null],[13,"Warning","","",16,null],[13,"Remark","","",16,null],[13,"Note","","",16,null],[4,"DLLStorageClass","","LLVMDLLStorageClass",null,null],[13,"Default","","",17,null],[13,"DllImport","","",17,null],[13,"DllExport","","",17,null],[4,"Attribute","","Matches LLVMRustAttribute in rustllvm.h Semantically a subset of the C++ enum llvm::Attribute::AttrKind, though it is not ABI compatible (since it's a C++ enum)",null,null],[13,"AlwaysInline","","",18,null],[13,"ByVal","","",18,null],[13,"Cold","","",18,null],[13,"InlineHint","","",18,null],[13,"MinSize","","",18,null],[13,"Naked","","",18,null],[13,"NoAlias","","",18,null],[13,"NoCapture","","",18,null],[13,"NoInline","","",18,null],[13,"NonNull","","",18,null],[13,"NoRedZone","","",18,null],[13,"NoReturn","","",18,null],[13,"NoUnwind","","",18,null],[13,"OptimizeForSize","","",18,null],[13,"ReadOnly","","",18,null],[13,"SExt","","",18,null],[13,"StructRet","","",18,null],[13,"UWTable","","",18,null],[13,"ZExt","","",18,null],[13,"InReg","","",18,null],[13,"SanitizeThread","","",18,null],[13,"SanitizeAddress","","",18,null],[13,"SanitizeMemory","","",18,null],[4,"IntPredicate","","LLVMIntPredicate",null,null],[13,"IntEQ","","",19,null],[13,"IntNE","","",19,null],[13,"IntUGT","","",19,null],[13,"IntUGE","","",19,null],[13,"IntULT","","",19,null],[13,"IntULE","","",19,null],[13,"IntSGT","","",19,null],[13,"IntSGE","","",19,null],[13,"IntSLT","","",19,null],[13,"IntSLE","","",19,null],[4,"RealPredicate","","LLVMRealPredicate",null,null],[13,"RealPredicateFalse","","",20,null],[13,"RealOEQ","","",20,null],[13,"RealOGT","","",20,null],[13,"RealOGE","","",20,null],[13,"RealOLT","","",20,null],[13,"RealOLE","","",20,null],[13,"RealONE","","",20,null],[13,"RealORD","","",20,null],[13,"RealUNO","","",20,null],[13,"RealUEQ","","",20,null],[13,"RealUGT","","",20,null],[13,"RealUGE","","",20,null],[13,"RealULT","","",20,null],[13,"RealULE","","",20,null],[13,"RealUNE","","",20,null],[13,"RealPredicateTrue","","",20,null],[4,"TypeKind","","LLVMTypeKind",null,null],[13,"Void","","",21,null],[13,"Half","","",21,null],[13,"Float","","",21,null],[13,"Double","","",21,null],[13,"X86_FP80","","",21,null],[13,"FP128","","",21,null],[13,"PPC_FP128","","",21,null],[13,"Label","","",21,null],[13,"Integer","","",21,null],[13,"Function","","",21,null],[13,"Struct","","",21,null],[13,"Array","","",21,null],[13,"Pointer","","",21,null],[13,"Vector","","",21,null],[13,"Metadata","","",21,null],[13,"X86_MMX","","",21,null],[13,"Token","","",21,null],[4,"AtomicRmwBinOp","","LLVMAtomicRmwBinOp",null,null],[13,"AtomicXchg","","",22,null],[13,"AtomicAdd","","",22,null],[13,"AtomicSub","","",22,null],[13,"AtomicAnd","","",22,null],[13,"AtomicNand","","",22,null],[13,"AtomicOr","","",22,null],[13,"AtomicXor","","",22,null],[13,"AtomicMax","","",22,null],[13,"AtomicMin","","",22,null],[13,"AtomicUMax","","",22,null],[13,"AtomicUMin","","",22,null],[4,"AtomicOrdering","","LLVMAtomicOrdering",null,null],[13,"NotAtomic","","",23,null],[13,"Unordered","","",23,null],[13,"Monotonic","","",23,null],[13,"Acquire","","",23,null],[13,"Release","","",23,null],[13,"AcquireRelease","","",23,null],[13,"SequentiallyConsistent","","",23,null],[4,"SynchronizationScope","","LLVMRustSynchronizationScope",null,null],[13,"Other","","",24,null],[13,"SingleThread","","",24,null],[13,"CrossThread","","",24,null],[4,"FileType","","LLVMRustFileType",null,null],[13,"Other","","",25,null],[13,"AssemblyFile","","",25,null],[13,"ObjectFile","","",25,null],[4,"MetadataType","","LLVMMetadataType",null,null],[13,"MD_dbg","","",26,null],[13,"MD_tbaa","","",26,null],[13,"MD_prof","","",26,null],[13,"MD_fpmath","","",26,null],[13,"MD_range","","",26,null],[13,"MD_tbaa_struct","","",26,null],[13,"MD_invariant_load","","",26,null],[13,"MD_alias_scope","","",26,null],[13,"MD_noalias","","",26,null],[13,"MD_nontemporal","","",26,null],[13,"MD_mem_parallel_loop_access","","",26,null],[13,"MD_nonnull","","",26,null],[4,"AsmDialect","","LLVMRustAsmDialect",null,null],[13,"Other","","",27,null],[13,"Att","","",27,null],[13,"Intel","","",27,null],[4,"CodeGenOptLevel","","LLVMRustCodeGenOptLevel",null,null],[13,"Other","","",28,null],[13,"None","","",28,null],[13,"Less","","",28,null],[13,"Default","","",28,null],[13,"Aggressive","","",28,null],[4,"RelocMode","","LLVMRelocMode",null,null],[13,"Default","","",29,null],[13,"Static","","",29,null],[13,"PIC","","",29,null],[13,"DynamicNoPic","","",29,null],[4,"CodeModel","","LLVMRustCodeModel",null,null],[13,"Other","","",30,null],[13,"Default","","",30,null],[13,"JITDefault","","",30,null],[13,"Small","","",30,null],[13,"Kernel","","",30,null],[13,"Medium","","",30,null],[13,"Large","","",30,null],[4,"DiagnosticKind","","LLVMRustDiagnosticKind",null,null],[13,"Other","","",31,null],[13,"InlineAsm","","",31,null],[13,"StackSize","","",31,null],[13,"DebugMetadataVersion","","",31,null],[13,"SampleProfile","","",31,null],[13,"OptimizationRemark","","",31,null],[13,"OptimizationRemarkMissed","","",31,null],[13,"OptimizationRemarkAnalysis","","",31,null],[13,"OptimizationRemarkAnalysisFPCommute","","",31,null],[13,"OptimizationRemarkAnalysisAliasing","","",31,null],[13,"OptimizationRemarkOther","","",31,null],[13,"OptimizationFailure","","",31,null],[4,"ArchiveKind","","LLVMRustArchiveKind",null,null],[13,"Other","","",32,null],[13,"K_GNU","","",32,null],[13,"K_MIPS64","","",32,null],[13,"K_BSD","","",32,null],[13,"K_COFF","","",32,null],[4,"PassKind","","LLVMRustPassKind",null,null],[13,"Other","","",33,null],[13,"Function","","",33,null],[13,"Module","","",33,null],[4,"Module_opaque","","",null,null],[4,"Context_opaque","","",null,null],[4,"Type_opaque","","",null,null],[4,"Value_opaque","","",null,null],[4,"Metadata_opaque","","",null,null],[4,"BasicBlock_opaque","","",null,null],[4,"Builder_opaque","","",null,null],[4,"ExecutionEngine_opaque","","",null,null],[4,"MemoryBuffer_opaque","","",null,null],[4,"PassManager_opaque","","",null,null],[4,"PassManagerBuilder_opaque","","",null,null],[4,"Use_opaque","","",null,null],[4,"TargetData_opaque","","",null,null],[4,"ObjectFile_opaque","","",null,null],[4,"SectionIterator_opaque","","",null,null],[4,"Pass_opaque","","",null,null],[4,"TargetMachine_opaque","","",null,null],[4,"Archive_opaque","","",null,null],[4,"ArchiveIterator_opaque","","",null,null],[4,"ArchiveChild_opaque","","",null,null],[4,"Twine_opaque","","",null,null],[4,"DiagnosticInfo_opaque","","",null,null],[4,"DebugLoc_opaque","","",null,null],[4,"SMDiagnostic_opaque","","",null,null],[4,"RustArchiveMember_opaque","","",null,null],[4,"OperandBundleDef_opaque","","",null,null],[5,"LLVMContextCreate","","",null,null],[5,"LLVMContextDispose","","",null,null],[5,"LLVMGetMDKindIDInContext","","",null,null],[5,"LLVMModuleCreateWithNameInContext","","",null,null],[5,"LLVMGetModuleContext","","",null,null],[5,"LLVMCloneModule","","",null,null],[5,"LLVMDisposeModule","","",null,null],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout.",null,null],[5,"LLVMSetDataLayout","","",null,null],[5,"LLVMDumpModule","","See Module::dump.",null,null],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm.",null,null],[5,"LLVMRustGetTypeKind","","See llvm::LLVMTypeKind::getTypeID.",null,null],[5,"LLVMRustGetValueContext","","See llvm::Value::getContext",null,null],[5,"LLVMInt1TypeInContext","","",null,null],[5,"LLVMInt8TypeInContext","","",null,null],[5,"LLVMInt16TypeInContext","","",null,null],[5,"LLVMInt32TypeInContext","","",null,null],[5,"LLVMInt64TypeInContext","","",null,null],[5,"LLVMIntTypeInContext","","",null,null],[5,"LLVMGetIntTypeWidth","","",null,null],[5,"LLVMFloatTypeInContext","","",null,null],[5,"LLVMDoubleTypeInContext","","",null,null],[5,"LLVMFunctionType","","",null,null],[5,"LLVMGetReturnType","","",null,null],[5,"LLVMCountParamTypes","","",null,null],[5,"LLVMGetParamTypes","","",null,null],[5,"LLVMStructTypeInContext","","",null,null],[5,"LLVMCountStructElementTypes","","",null,null],[5,"LLVMGetStructElementTypes","","",null,null],[5,"LLVMIsPackedStruct","","",null,null],[5,"LLVMRustArrayType","","",null,null],[5,"LLVMPointerType","","",null,null],[5,"LLVMVectorType","","",null,null],[5,"LLVMGetElementType","","",null,null],[5,"LLVMGetArrayLength","","",null,null],[5,"LLVMGetVectorSize","","",null,null],[5,"LLVMVoidTypeInContext","","",null,null],[5,"LLVMRustMetadataTypeInContext","","",null,null],[5,"LLVMTypeOf","","",null,null],[5,"LLVMGetValueName","","",null,null],[5,"LLVMSetValueName","","",null,null],[5,"LLVMReplaceAllUsesWith","","",null,null],[5,"LLVMSetMetadata","","",null,null],[5,"LLVMGetFirstUse","","",null,null],[5,"LLVMGetNextUse","","",null,null],[5,"LLVMGetUser","","",null,null],[5,"LLVMGetOperand","","",null,null],[5,"LLVMConstNull","","",null,null],[5,"LLVMConstICmp","","",null,null],[5,"LLVMConstFCmp","","",null,null],[5,"LLVMGetUndef","","",null,null],[5,"LLVMIsNull","","",null,null],[5,"LLVMIsUndef","","",null,null],[5,"LLVMMDNodeInContext","","",null,null],[5,"LLVMConstInt","","",null,null],[5,"LLVMConstIntOfArbitraryPrecision","","",null,null],[5,"LLVMConstReal","","",null,null],[5,"LLVMConstIntGetZExtValue","","",null,null],[5,"LLVMConstIntGetSExtValue","","",null,null],[5,"LLVMRustConstInt128Get","","",null,null],[5,"LLVMConstStringInContext","","",null,null],[5,"LLVMConstStructInContext","","",null,null],[5,"LLVMConstArray","","",null,null],[5,"LLVMConstVector","","",null,null],[5,"LLVMSizeOf","","",null,null],[5,"LLVMConstNeg","","",null,null],[5,"LLVMConstFNeg","","",null,null],[5,"LLVMConstNot","","",null,null],[5,"LLVMConstAdd","","",null,null],[5,"LLVMConstFAdd","","",null,null],[5,"LLVMConstSub","","",null,null],[5,"LLVMConstFSub","","",null,null],[5,"LLVMConstMul","","",null,null],[5,"LLVMConstFMul","","",null,null],[5,"LLVMConstUDiv","","",null,null],[5,"LLVMConstSDiv","","",null,null],[5,"LLVMConstFDiv","","",null,null],[5,"LLVMConstURem","","",null,null],[5,"LLVMConstSRem","","",null,null],[5,"LLVMConstFRem","","",null,null],[5,"LLVMConstAnd","","",null,null],[5,"LLVMConstOr","","",null,null],[5,"LLVMConstXor","","",null,null],[5,"LLVMConstShl","","",null,null],[5,"LLVMConstLShr","","",null,null],[5,"LLVMConstAShr","","",null,null],[5,"LLVMConstTrunc","","",null,null],[5,"LLVMConstZExt","","",null,null],[5,"LLVMConstUIToFP","","",null,null],[5,"LLVMConstSIToFP","","",null,null],[5,"LLVMConstFPToUI","","",null,null],[5,"LLVMConstFPToSI","","",null,null],[5,"LLVMConstPtrToInt","","",null,null],[5,"LLVMConstIntToPtr","","",null,null],[5,"LLVMConstBitCast","","",null,null],[5,"LLVMConstPointerCast","","",null,null],[5,"LLVMConstIntCast","","",null,null],[5,"LLVMConstFPCast","","",null,null],[5,"LLVMConstExtractValue","","",null,null],[5,"LLVMConstInlineAsm","","",null,null],[5,"LLVMGetGlobalParent","","",null,null],[5,"LLVMIsDeclaration","","",null,null],[5,"LLVMRustGetLinkage","","",null,null],[5,"LLVMRustSetLinkage","","",null,null],[5,"LLVMGetSection","","",null,null],[5,"LLVMSetSection","","",null,null],[5,"LLVMRustGetVisibility","","",null,null],[5,"LLVMRustSetVisibility","","",null,null],[5,"LLVMGetAlignment","","",null,null],[5,"LLVMSetAlignment","","",null,null],[5,"LLVMSetDLLStorageClass","","",null,null],[5,"LLVMIsAGlobalVariable","","",null,null],[5,"LLVMAddGlobal","","",null,null],[5,"LLVMGetNamedGlobal","","",null,null],[5,"LLVMRustGetOrInsertGlobal","","",null,null],[5,"LLVMGetFirstGlobal","","",null,null],[5,"LLVMGetNextGlobal","","",null,null],[5,"LLVMDeleteGlobal","","",null,null],[5,"LLVMGetInitializer","","",null,null],[5,"LLVMSetInitializer","","",null,null],[5,"LLVMSetThreadLocal","","",null,null],[5,"LLVMIsGlobalConstant","","",null,null],[5,"LLVMSetGlobalConstant","","",null,null],[5,"LLVMRustGetNamedValue","","",null,null],[5,"LLVMAddFunction","","",null,null],[5,"LLVMGetNamedFunction","","",null,null],[5,"LLVMGetFirstFunction","","",null,null],[5,"LLVMGetNextFunction","","",null,null],[5,"LLVMRustGetOrInsertFunction","","",null,null],[5,"LLVMSetFunctionCallConv","","",null,null],[5,"LLVMRustAddDereferenceableAttr","","",null,null],[5,"LLVMRustAddFunctionAttribute","","",null,null],[5,"LLVMRustAddFunctionAttrStringValue","","",null,null],[5,"LLVMRustRemoveFunctionAttributes","","",null,null],[5,"LLVMCountParams","","",null,null],[5,"LLVMGetParam","","",null,null],[5,"LLVMBasicBlockAsValue","","",null,null],[5,"LLVMGetBasicBlockParent","","",null,null],[5,"LLVMAppendBasicBlockInContext","","",null,null],[5,"LLVMDeleteBasicBlock","","",null,null],[5,"LLVMGetInstructionParent","","",null,null],[5,"LLVMGetFirstBasicBlock","","",null,null],[5,"LLVMGetFirstInstruction","","",null,null],[5,"LLVMInstructionEraseFromParent","","",null,null],[5,"LLVMSetInstructionCallConv","","",null,null],[5,"LLVMRustAddCallSiteAttribute","","",null,null],[5,"LLVMRustAddDereferenceableCallSiteAttr","","",null,null],[5,"LLVMSetVolatile","","",null,null],[5,"LLVMAddIncoming","","",null,null],[5,"LLVMCreateBuilderInContext","","",null,null],[5,"LLVMPositionBuilder","","",null,null],[5,"LLVMPositionBuilderBefore","","",null,null],[5,"LLVMPositionBuilderAtEnd","","",null,null],[5,"LLVMGetInsertBlock","","",null,null],[5,"LLVMDisposeBuilder","","",null,null],[5,"LLVMSetCurrentDebugLocation","","",null,null],[5,"LLVMGetCurrentDebugLocation","","",null,null],[5,"LLVMSetInstDebugLocation","","",null,null],[5,"LLVMBuildRetVoid","","",null,null],[5,"LLVMBuildRet","","",null,null],[5,"LLVMBuildAggregateRet","","",null,null],[5,"LLVMBuildBr","","",null,null],[5,"LLVMBuildCondBr","","",null,null],[5,"LLVMBuildSwitch","","",null,null],[5,"LLVMBuildIndirectBr","","",null,null],[5,"LLVMRustBuildInvoke","","",null,null],[5,"LLVMRustBuildLandingPad","","",null,null],[5,"LLVMBuildResume","","",null,null],[5,"LLVMBuildUnreachable","","",null,null],[5,"LLVMRustBuildCleanupPad","","",null,null],[5,"LLVMRustBuildCleanupRet","","",null,null],[5,"LLVMRustBuildCatchPad","","",null,null],[5,"LLVMRustBuildCatchRet","","",null,null],[5,"LLVMRustBuildCatchSwitch","","",null,null],[5,"LLVMRustAddHandler","","",null,null],[5,"LLVMSetPersonalityFn","","",null,null],[5,"LLVMAddCase","","",null,null],[5,"LLVMAddClause","","",null,null],[5,"LLVMSetCleanup","","",null,null],[5,"LLVMBuildAdd","","",null,null],[5,"LLVMBuildNSWAdd","","",null,null],[5,"LLVMBuildNUWAdd","","",null,null],[5,"LLVMBuildFAdd","","",null,null],[5,"LLVMBuildSub","","",null,null],[5,"LLVMBuildNSWSub","","",null,null],[5,"LLVMBuildNUWSub","","",null,null],[5,"LLVMBuildFSub","","",null,null],[5,"LLVMBuildMul","","",null,null],[5,"LLVMBuildNSWMul","","",null,null],[5,"LLVMBuildNUWMul","","",null,null],[5,"LLVMBuildFMul","","",null,null],[5,"LLVMBuildUDiv","","",null,null],[5,"LLVMBuildSDiv","","",null,null],[5,"LLVMBuildExactSDiv","","",null,null],[5,"LLVMBuildFDiv","","",null,null],[5,"LLVMBuildURem","","",null,null],[5,"LLVMBuildSRem","","",null,null],[5,"LLVMBuildFRem","","",null,null],[5,"LLVMBuildShl","","",null,null],[5,"LLVMBuildLShr","","",null,null],[5,"LLVMBuildAShr","","",null,null],[5,"LLVMBuildAnd","","",null,null],[5,"LLVMBuildOr","","",null,null],[5,"LLVMBuildXor","","",null,null],[5,"LLVMBuildBinOp","","",null,null],[5,"LLVMBuildNeg","","",null,null],[5,"LLVMBuildNSWNeg","","",null,null],[5,"LLVMBuildNUWNeg","","",null,null],[5,"LLVMBuildFNeg","","",null,null],[5,"LLVMBuildNot","","",null,null],[5,"LLVMRustSetHasUnsafeAlgebra","","",null,null],[5,"LLVMBuildAlloca","","",null,null],[5,"LLVMBuildFree","","",null,null],[5,"LLVMBuildLoad","","",null,null],[5,"LLVMBuildStore","","",null,null],[5,"LLVMBuildGEP","","",null,null],[5,"LLVMBuildInBoundsGEP","","",null,null],[5,"LLVMBuildStructGEP","","",null,null],[5,"LLVMBuildGlobalString","","",null,null],[5,"LLVMBuildGlobalStringPtr","","",null,null],[5,"LLVMBuildTrunc","","",null,null],[5,"LLVMBuildZExt","","",null,null],[5,"LLVMBuildSExt","","",null,null],[5,"LLVMBuildFPToUI","","",null,null],[5,"LLVMBuildFPToSI","","",null,null],[5,"LLVMBuildUIToFP","","",null,null],[5,"LLVMBuildSIToFP","","",null,null],[5,"LLVMBuildFPTrunc","","",null,null],[5,"LLVMBuildFPExt","","",null,null],[5,"LLVMBuildPtrToInt","","",null,null],[5,"LLVMBuildIntToPtr","","",null,null],[5,"LLVMBuildBitCast","","",null,null],[5,"LLVMBuildZExtOrBitCast","","",null,null],[5,"LLVMBuildSExtOrBitCast","","",null,null],[5,"LLVMBuildTruncOrBitCast","","",null,null],[5,"LLVMBuildCast","","",null,null],[5,"LLVMBuildPointerCast","","",null,null],[5,"LLVMRustBuildIntCast","","",null,null],[5,"LLVMBuildFPCast","","",null,null],[5,"LLVMBuildICmp","","",null,null],[5,"LLVMBuildFCmp","","",null,null],[5,"LLVMBuildPhi","","",null,null],[5,"LLVMRustBuildCall","","",null,null],[5,"LLVMBuildSelect","","",null,null],[5,"LLVMBuildVAArg","","",null,null],[5,"LLVMBuildExtractElement","","",null,null],[5,"LLVMBuildInsertElement","","",null,null],[5,"LLVMBuildShuffleVector","","",null,null],[5,"LLVMBuildExtractValue","","",null,null],[5,"LLVMBuildInsertValue","","",null,null],[5,"LLVMBuildIsNull","","",null,null],[5,"LLVMBuildIsNotNull","","",null,null],[5,"LLVMBuildPtrDiff","","",null,null],[5,"LLVMRustBuildAtomicLoad","","",null,null],[5,"LLVMRustBuildAtomicStore","","",null,null],[5,"LLVMRustBuildAtomicCmpXchg","","",null,null],[5,"LLVMBuildAtomicRMW","","",null,null],[5,"LLVMRustBuildAtomicFence","","",null,null],[5,"LLVMIsATerminatorInst","","",null,null],[5,"LLVMIsAStoreInst","","",null,null],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success.",null,null],[5,"LLVMCreateTargetData","","Creates target data from a target layout string.",null,null],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T.",null,null],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding.",null,null],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type.",null,null],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type.",null,null],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a target.",null,null],[5,"LLVMDisposeTargetData","","Disposes target data.",null,null],[5,"LLVMCreatePassManager","","Creates a pass manager.",null,null],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager",null,null],[5,"LLVMDisposePassManager","","Disposes a pass manager.",null,null],[5,"LLVMRunPassManager","","Runs a pass manager on a module.",null,null],[5,"LLVMInitializePasses","","",null,null],[5,"LLVMPassManagerBuilderCreate","","",null,null],[5,"LLVMPassManagerBuilderDispose","","",null,null],[5,"LLVMPassManagerBuilderSetSizeLevel","","",null,null],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","","",null,null],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","","",null,null],[5,"LLVMPassManagerBuilderPopulateModulePassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","","",null,null],[5,"LLVMCreateObjectFile","","Opens an object file.",null,null],[5,"LLVMDisposeObjectFile","","Closes an object file.",null,null],[5,"LLVMGetSections","","Enumerates the sections in an object file.",null,null],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator.",null,null],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section list:",null,null],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section.",null,null],[5,"LLVMGetSectionSize","","Returns the current section size.",null,null],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer.",null,null],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use LLVMDisposeMemoryBuffer() to get rid of it.",null,null],[5,"LLVMStartMultithreaded","","",null,null],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call.",null,null],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up.",null,null],[5,"LLVMStructCreateNamed","","",null,null],[5,"LLVMStructSetBody","","",null,null],[5,"LLVMConstNamedStruct","","",null,null],[5,"LLVMRustSetDebug","","Enables LLVM debug output.",null,null],[5,"LLVMRustInlineAsm","","Prepares inline assembly.",null,null],[5,"LLVMRustDebugMetadataVersion","","",null,null],[5,"LLVMRustVersionMajor","","",null,null],[5,"LLVMRustVersionMinor","","",null,null],[5,"LLVMRustAddModuleFlag","","",null,null],[5,"LLVMRustDIBuilderCreate","","",null,null],[5,"LLVMRustDIBuilderDispose","","",null,null],[5,"LLVMRustDIBuilderFinalize","","",null,null],[5,"LLVMRustDIBuilderCreateCompileUnit","","",null,null],[5,"LLVMRustDIBuilderCreateFile","","",null,null],[5,"LLVMRustDIBuilderCreateSubroutineType","","",null,null],[5,"LLVMRustDIBuilderCreateFunction","","",null,null],[5,"LLVMRustDIBuilderCreateBasicType","","",null,null],[5,"LLVMRustDIBuilderCreatePointerType","","",null,null],[5,"LLVMRustDIBuilderCreateStructType","","",null,null],[5,"LLVMRustDIBuilderCreateMemberType","","",null,null],[5,"LLVMRustDIBuilderCreateLexicalBlock","","",null,null],[5,"LLVMRustDIBuilderCreateLexicalBlockFile","","",null,null],[5,"LLVMRustDIBuilderCreateStaticVariable","","",null,null],[5,"LLVMRustDIBuilderCreateVariable","","",null,null],[5,"LLVMRustDIBuilderCreateArrayType","","",null,null],[5,"LLVMRustDIBuilderCreateVectorType","","",null,null],[5,"LLVMRustDIBuilderGetOrCreateSubrange","","",null,null],[5,"LLVMRustDIBuilderGetOrCreateArray","","",null,null],[5,"LLVMRustDIBuilderInsertDeclareAtEnd","","",null,null],[5,"LLVMRustDIBuilderCreateEnumerator","","",null,null],[5,"LLVMRustDIBuilderCreateEnumerationType","","",null,null],[5,"LLVMRustDIBuilderCreateUnionType","","",null,null],[5,"LLVMSetUnnamedAddr","","",null,null],[5,"LLVMRustDIBuilderCreateTemplateTypeParameter","","",null,null],[5,"LLVMRustDIBuilderCreateNameSpace","","",null,null],[5,"LLVMRustDICompositeTypeSetTypeArray","","",null,null],[5,"LLVMRustDIBuilderCreateDebugLocation","","",null,null],[5,"LLVMRustDIBuilderCreateOpDeref","","",null,null],[5,"LLVMRustDIBuilderCreateOpPlus","","",null,null],[5,"LLVMRustWriteTypeToString","","",null,null],[5,"LLVMRustWriteValueToString","","",null,null],[5,"LLVMIsAConstantInt","","",null,null],[5,"LLVMRustPassKind","","",null,null],[5,"LLVMRustFindAndCreatePass","","",null,null],[5,"LLVMRustAddPass","","",null,null],[5,"LLVMRustHasFeature","","",null,null],[5,"LLVMRustPrintTargetCPUs","","",null,null],[5,"LLVMRustPrintTargetFeatures","","",null,null],[5,"LLVMRustCreateTargetMachine","","",null,null],[5,"LLVMRustDisposeTargetMachine","","",null,null],[5,"LLVMRustAddAnalysisPasses","","",null,null],[5,"LLVMRustAddBuilderLibraryInfo","","",null,null],[5,"LLVMRustConfigurePassManagerBuilder","","",null,null],[5,"LLVMRustAddLibraryInfo","","",null,null],[5,"LLVMRustRunFunctionPassManager","","",null,null],[5,"LLVMRustWriteOutputFile","","",null,null],[5,"LLVMRustPrintModule","","",null,null],[5,"LLVMRustSetLLVMOptions","","",null,null],[5,"LLVMRustPrintPasses","","",null,null],[5,"LLVMRustSetNormalizedTarget","","",null,null],[5,"LLVMRustAddAlwaysInlinePass","","",null,null],[5,"LLVMRustLinkInExternalBitcode","","",null,null],[5,"LLVMRustRunRestrictionPass","","",null,null],[5,"LLVMRustMarkAllFunctionsNounwind","","",null,null],[5,"LLVMRustOpenArchive","","",null,null],[5,"LLVMRustArchiveIteratorNew","","",null,null],[5,"LLVMRustArchiveIteratorNext","","",null,null],[5,"LLVMRustArchiveChildName","","",null,null],[5,"LLVMRustArchiveChildData","","",null,null],[5,"LLVMRustArchiveChildFree","","",null,null],[5,"LLVMRustArchiveIteratorFree","","",null,null],[5,"LLVMRustDestroyArchive","","",null,null],[5,"LLVMRustGetSectionName","","",null,null],[5,"LLVMRustWriteTwineToString","","",null,null],[5,"LLVMContextSetDiagnosticHandler","","",null,null],[5,"LLVMRustUnpackOptimizationDiagnostic","","",null,null],[5,"LLVMRustUnpackInlineAsmDiagnostic","","",null,null],[5,"LLVMRustWriteDiagnosticInfoToString","","",null,null],[5,"LLVMRustGetDiagInfoKind","","",null,null],[5,"LLVMRustWriteDebugLocToString","","",null,null],[5,"LLVMRustSetInlineAsmDiagnosticHandler","","",null,null],[5,"LLVMRustWriteSMDiagnosticToString","","",null,null],[5,"LLVMRustWriteArchive","","",null,null],[5,"LLVMRustArchiveMemberNew","","",null,null],[5,"LLVMRustArchiveMemberFree","","",null,null],[5,"LLVMRustSetDataLayoutFromTargetMachine","","",null,null],[5,"LLVMRustGetModuleDataLayout","","",null,null],[5,"LLVMRustBuildOperandBundleDef","","",null,null],[5,"LLVMRustFreeOperandBundleDef","","",null,null],[5,"LLVMRustPositionBuilderAtStart","","",null,null],[5,"LLVMRustSetComdat","","",null,null],[5,"LLVMRustUnsetComdat","","",null,null],[5,"LLVMRustSetModulePIELevel","","",null,null],[0,"debuginfo","","",null,null],[3,"DIFlags","rustc_llvm::ffi::debuginfo","",null,null],[4,"DIBuilder_opaque","","",null,null],[6,"DIBuilderRef","","",null,null],[6,"DIDescriptor","","",null,null],[6,"DIScope","","",null,null],[6,"DILocation","","",null,null],[6,"DIFile","","",null,null],[6,"DILexicalBlock","","",null,null],[6,"DISubprogram","","",null,null],[6,"DINameSpace","","",null,null],[6,"DIType","","",null,null],[6,"DIBasicType","","",null,null],[6,"DIDerivedType","","",null,null],[6,"DICompositeType","","",null,null],[6,"DIVariable","","",null,null],[6,"DIGlobalVariable","","",null,null],[6,"DIArray","","",null,null],[6,"DISubrange","","",null,null],[6,"DIEnumerator","","",null,null],[6,"DITemplateTypeParameter","","",null,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"diflags"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"ordering"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"diflags"}}],[18,"FlagZero","","",34,null],[18,"FlagPrivate","","",34,null],[18,"FlagProtected","","",34,null],[18,"FlagPublic","","",34,null],[18,"FlagFwdDecl","","",34,null],[18,"FlagAppleBlock","","",34,null],[18,"FlagBlockByrefStruct","","",34,null],[18,"FlagVirtual","","",34,null],[18,"FlagArtificial","","",34,null],[18,"FlagExplicit","","",34,null],[18,"FlagPrototyped","","",34,null],[18,"FlagObjcClassComplete","","",34,null],[18,"FlagObjectPointer","","",34,null],[18,"FlagVector","","",34,null],[18,"FlagStaticMember","","",34,null],[18,"FlagLValueReference","","",34,null],[18,"FlagRValueReference","","",34,null],[18,"FlagMainSubprogram","","",34,null],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[],"output":{"name":"diflags"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[],"output":{"name":"diflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"uint32_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",34,{"inputs":[{"name":"uint32_t"}],"output":{"name":"diflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if all of the flags in `other` are contained within `self`.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"diflags"}],"output":{"name":"diflags"}}],[11,"not","","Returns the complement of this set of flags.",34,{"inputs":[{"name":"self"}],"output":{"name":"diflags"}}],[6,"Opcode","rustc_llvm::ffi","",null,null],[6,"Bool","","",null,null],[6,"ModuleRef","","",null,null],[6,"ContextRef","","",null,null],[6,"TypeRef","","",null,null],[6,"ValueRef","","",null,null],[6,"MetadataRef","","",null,null],[6,"BasicBlockRef","","",null,null],[6,"BuilderRef","","",null,null],[6,"ExecutionEngineRef","","",null,null],[6,"MemoryBufferRef","","",null,null],[6,"PassManagerRef","","",null,null],[6,"PassManagerBuilderRef","","",null,null],[6,"UseRef","","",null,null],[6,"TargetDataRef","","",null,null],[6,"ObjectFileRef","","",null,null],[6,"SectionIteratorRef","","",null,null],[6,"PassRef","","",null,null],[6,"TargetMachineRef","","",null,null],[6,"ArchiveRef","","",null,null],[6,"ArchiveIteratorRef","","",null,null],[6,"ArchiveChildRef","","",null,null],[6,"TwineRef","","",null,null],[6,"DiagnosticInfoRef","","",null,null],[6,"DebugLocRef","","",null,null],[6,"SMDiagnosticRef","","",null,null],[6,"RustArchiveMemberRef","","",null,null],[6,"OperandBundleDefRef","","",null,null],[6,"DiagnosticHandler","","",null,null],[6,"InlineAsmDiagHandler","","",null,null],[17,"True","","",null,null],[17,"False","","",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"llvmrustresult"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"llvmrustresult"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"callconv"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"callconv"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticseverity"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"dllstorageclass"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"intpredicate"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"realpredicate"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"typekind"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"atomicrmwbinop"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"atomicordering"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"synchronizationscope"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"metadatatype"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"asmdialect"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptlevel"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"codegenoptlevel"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"relocmode"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"relocmode"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"codemodel"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"diagnostickind"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"archivekind"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"passkind"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"passkind"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"RustStringRef","rustc_llvm","",null,null],[11,"into_result","rustc_llvm::ffi","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","rustc_llvm","",3,{"inputs":[{"name":"self"}],"output":{"name":"attributeplace"}}],[11,"ReturnValue","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"as_uint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptsize"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"codegenoptsize"}],"output":{"name":"bool"}}],[11,"from_str","rustc_llvm::ffi","",32,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"apply_llfn","","",18,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"}],"output":null}],[11,"apply_callsite","","",18,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"}],"output":null}],[11,"unapply_llfn","","",18,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"}],"output":null}],[11,"toggle_llfn","","",18,{"inputs":[{"name":"self"},{"name":"attributeplace"},{"name":"valueref"},{"name":"bool"}],"output":null}],[11,"drop","rustc_llvm","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[{"name":"memorybufferref"}],"output":{"name":"option"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",35,null],[11,"raw","","",35,{"inputs":[{"name":"self"}],"output":{"name":"operandbundledefref"}}],[11,"drop","","",35,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[4,"AttributePlace"],[4,"CodeGenOptSize"],[3,"ArchiveRO"],[3,"Iter"],[3,"Child"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"LLVMRustResult"],[4,"CallConv"],[4,"Linkage"],[4,"Visibility"],[4,"DiagnosticSeverity"],[4,"DLLStorageClass"],[4,"Attribute"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"TypeKind"],[4,"AtomicRmwBinOp"],[4,"AtomicOrdering"],[4,"SynchronizationScope"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[4,"CodeModel"],[4,"DiagnosticKind"],[4,"ArchiveKind"],[4,"PassKind"],[3,"DIFlags"],[3,"OperandBundleDef"]]};
searchIndex["rustc_metadata"] = {"doc":"","items":[[0,"middle","rustc_metadata","",null,null],[0,"expr_use_visitor","rustc_metadata::middle","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_metadata::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",0,null],[10,"matched_pat","","",0,null],[10,"consume_pat","","",0,null],[10,"borrow","","",0,null],[10,"decl_without_init","","",0,null],[10,"mutate","","",0,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",1,null],[13,"AddrOf","","",1,null],[13,"AutoRef","","",1,null],[13,"AutoUnsafe","","",1,null],[13,"RefBinding","","",1,null],[13,"OverloadedOperator","","",1,null],[13,"ClosureInvocation","","",1,null],[13,"ForLoop","","",1,null],[13,"MatchDiscriminant","","",1,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",2,null],[13,"Move","","",2,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",3,null],[13,"PatBindingMove","","",3,null],[13,"CaptureMove","","",3,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",4,null],[13,"BorrowingMatch","","",4,null],[13,"CopyingMatch","","",4,null],[13,"MovingMatch","","",4,null],[4,"MutateMode","","",null,null],[13,"Init","","",5,null],[13,"JustWrite","","",5,null],[13,"WriteAndRead","","",5,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_metadata::middle","",null,null],[4,"ConstVal","rustc_metadata::middle::const_val","",null,null],[13,"Float","","",6,null],[13,"Integral","","",6,null],[13,"Str","","",6,null],[13,"ByteStr","","",6,null],[13,"Bool","","",6,null],[13,"Function","","",6,null],[13,"Struct","","",6,null],[13,"Tuple","","",6,null],[13,"Array","","",6,null],[13,"Repeat","","",6,null],[13,"Char","","",6,null],[4,"ConstInt","","",null,null],[13,"I8","","",7,null],[13,"I16","","",7,null],[13,"I32","","",7,null],[13,"I64","","",7,null],[13,"I128","","",7,null],[13,"Isize","","",7,null],[13,"U8","","",7,null],[13,"U16","","",7,null],[13,"U32","","",7,null],[13,"U64","","",7,null],[13,"U128","","",7,null],[13,"Usize","","",7,null],[0,"cstore","rustc_metadata::middle","",null,null],[3,"LinkMeta","rustc_metadata::middle::cstore","",null,null],[12,"crate_name","","",8,null],[12,"crate_hash","","",8,null],[3,"CrateSource","","",null,null],[12,"dylib","","",9,null],[12,"rlib","","",9,null],[12,"rmeta","","",9,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",10,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",10,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",10,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",10,null],[4,"LibSource","","",null,null],[13,"Some","","",11,null],[13,"MetadataOnly","","",11,null],[13,"None","","",11,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",12,null],[13,"RequireStatic","","",12,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",13,null],[13,"NativeStaticNobundle","","",13,null],[13,"NativeFramework","","",13,null],[13,"NativeUnknown","","",13,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",14,null],[12,"name","","",14,null],[12,"cfg","","",14,null],[12,"foreign_items","","",14,null],[4,"LoadedMacro","","",null,null],[13,"MacroDef","","",15,null],[13,"ProcMacro","","",15,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",16,null],[12,"span","","span of the extern crate that caused this to be loaded",16,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",16,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",16,null],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"crate_data_as_rc_any","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[10,"describe_def","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"def_span","","",17,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[10,"stability","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"deprecation","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"visibility","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"visible_parent_map","","",17,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[10,"item_generics_cloned","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"item_attrs","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"fn_arg_names","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"inherent_implementations_for_type","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"implementations_of_trait","","",17,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[10,"impl_polarity","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[10,"impl_parent","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"trait_of_item","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"associated_item_cloned","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[10,"is_const_fn","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_default_impl","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_foreign_item","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_dllimport_foreign_item","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_statically_included_foreign_item","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_exported_symbol","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"dylib_dependency_formats","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"dep_kind","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"export_macros","","",17,null],[10,"lang_items","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"missing_lang_items","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_staged_api","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_allocator","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_panic_runtime","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_compiler_builtins","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_sanitizer_runtime","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"panic_strategy","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[10,"extern_crate","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"crate_name","","The name of the crate as it is referred to in source code of the current crate.",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"original_crate_name","","The name of the crate as it is stored in the crate's metadata.",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"crate_disambiguator","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"plugin_registrar_fn","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"derive_registrar_fn","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"native_libraries","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"exported_symbols","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_no_builtins","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"retrace_path","","",17,null],[10,"def_key","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"struct_field_names","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"load_macro","","",17,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"maybe_get_item_body","","",17,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"item_body_nested_bodies","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[10,"const_is_rvalue_promotable_to_static","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_item_mir_available","","",17,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"crates","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_libraries","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_link_args","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"metadata_filename","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"metadata_section_name","","",17,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[10,"used_crates","","",17,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[10,"used_crate_source","","",17,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[10,"extern_mod_stmt_cnum","","",17,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"encode_metadata","","",17,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[10,"metadata_encoding_version","","",17,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",18,null],[10,"postprocess","","",18,null],[0,"dataflow","rustc_metadata::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_metadata::middle::dataflow","",null,null],[13,"Entry","","",19,null],[13,"Exit","","",19,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",22,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",22,null],[0,"dead","rustc_metadata::middle","",null,null],[5,"check_crate","rustc_metadata::middle::dead","",null,null],[0,"dependency_format","rustc_metadata::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_metadata::middle::dependency_format","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",23,null],[13,"IncludedFromDylib","","",23,null],[13,"Static","","",23,null],[13,"Dynamic","","",23,null],[5,"calculate","","",null,null],[0,"effect","rustc_metadata::middle","Enforces the Rust effect system. Currently there is just one effect, `unsafe`.",null,null],[5,"check_crate","rustc_metadata::middle::effect","",null,null],[0,"entry","rustc_metadata::middle","",null,null],[5,"find_entry_point","rustc_metadata::middle::entry","",null,null],[0,"free_region","rustc_metadata::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_metadata::middle::free_region","",null,null],[0,"intrinsicck","rustc_metadata::middle","",null,null],[5,"check_crate","rustc_metadata::middle::intrinsicck","",null,null],[0,"lang_items","rustc_metadata::middle","",null,null],[4,"LangItem","rustc_metadata::middle::lang_items","",null,null],[13,"CharImplItem","","",24,null],[13,"StrImplItem","","",24,null],[13,"SliceImplItem","","",24,null],[13,"ConstPtrImplItem","","",24,null],[13,"MutPtrImplItem","","",24,null],[13,"I8ImplItem","","",24,null],[13,"I16ImplItem","","",24,null],[13,"I32ImplItem","","",24,null],[13,"I64ImplItem","","",24,null],[13,"I128ImplItem","","",24,null],[13,"IsizeImplItem","","",24,null],[13,"U8ImplItem","","",24,null],[13,"U16ImplItem","","",24,null],[13,"U32ImplItem","","",24,null],[13,"U64ImplItem","","",24,null],[13,"U128ImplItem","","",24,null],[13,"UsizeImplItem","","",24,null],[13,"F32ImplItem","","",24,null],[13,"F64ImplItem","","",24,null],[13,"SendTraitLangItem","","",24,null],[13,"SizedTraitLangItem","","",24,null],[13,"UnsizeTraitLangItem","","",24,null],[13,"CopyTraitLangItem","","",24,null],[13,"SyncTraitLangItem","","",24,null],[13,"DropTraitLangItem","","",24,null],[13,"CoerceUnsizedTraitLangItem","","",24,null],[13,"AddTraitLangItem","","",24,null],[13,"SubTraitLangItem","","",24,null],[13,"MulTraitLangItem","","",24,null],[13,"DivTraitLangItem","","",24,null],[13,"RemTraitLangItem","","",24,null],[13,"NegTraitLangItem","","",24,null],[13,"NotTraitLangItem","","",24,null],[13,"BitXorTraitLangItem","","",24,null],[13,"BitAndTraitLangItem","","",24,null],[13,"BitOrTraitLangItem","","",24,null],[13,"ShlTraitLangItem","","",24,null],[13,"ShrTraitLangItem","","",24,null],[13,"AddAssignTraitLangItem","","",24,null],[13,"SubAssignTraitLangItem","","",24,null],[13,"MulAssignTraitLangItem","","",24,null],[13,"DivAssignTraitLangItem","","",24,null],[13,"RemAssignTraitLangItem","","",24,null],[13,"BitXorAssignTraitLangItem","","",24,null],[13,"BitAndAssignTraitLangItem","","",24,null],[13,"BitOrAssignTraitLangItem","","",24,null],[13,"ShlAssignTraitLangItem","","",24,null],[13,"ShrAssignTraitLangItem","","",24,null],[13,"IndexTraitLangItem","","",24,null],[13,"IndexMutTraitLangItem","","",24,null],[13,"UnsafeCellTypeLangItem","","",24,null],[13,"DerefTraitLangItem","","",24,null],[13,"DerefMutTraitLangItem","","",24,null],[13,"FnTraitLangItem","","",24,null],[13,"FnMutTraitLangItem","","",24,null],[13,"FnOnceTraitLangItem","","",24,null],[13,"EqTraitLangItem","","",24,null],[13,"OrdTraitLangItem","","",24,null],[13,"StrEqFnLangItem","","",24,null],[13,"PanicFnLangItem","","",24,null],[13,"PanicBoundsCheckFnLangItem","","",24,null],[13,"PanicFmtLangItem","","",24,null],[13,"ExchangeMallocFnLangItem","","",24,null],[13,"BoxFreeFnLangItem","","",24,null],[13,"StrDupUniqFnLangItem","","",24,null],[13,"StartFnLangItem","","",24,null],[13,"EhPersonalityLangItem","","",24,null],[13,"EhUnwindResumeLangItem","","",24,null],[13,"MSVCTryFilterLangItem","","",24,null],[13,"OwnedBoxLangItem","","",24,null],[13,"PhantomDataItem","","",24,null],[13,"CovariantTypeItem","","",24,null],[13,"ContravariantTypeItem","","",24,null],[13,"InvariantTypeItem","","",24,null],[13,"CovariantLifetimeItem","","",24,null],[13,"ContravariantLifetimeItem","","",24,null],[13,"InvariantLifetimeItem","","",24,null],[13,"NoCopyItem","","",24,null],[13,"NonZeroItem","","",24,null],[13,"DebugTraitLangItem","","",24,null],[3,"LanguageItems","","",null,null],[12,"items","","",25,null],[12,"missing","","",25,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_metadata::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc_metadata::middle::liveness","",null,null],[0,"mem_categorization","rustc_metadata::middle","Categorization",null,null],[4,"Categorization","rustc_metadata::middle::mem_categorization","",null,null],[13,"Rvalue","","",26,null],[13,"StaticItem","","",26,null],[13,"Upvar","","",26,null],[13,"Local","","",26,null],[13,"Deref","","",26,null],[13,"Interior","","",26,null],[13,"Downcast","","",26,null],[3,"Upvar","","",null,null],[12,"id","","",27,null],[12,"kind","","",27,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",28,null],[13,"BorrowedPtr","","`&T`",28,null],[13,"UnsafePtr","","`*T`",28,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",28,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",29,null],[13,"InteriorElement","","",29,null],[4,"FieldName","","",null,null],[13,"NamedField","","",30,null],[13,"PositionalField","","",30,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",31,null],[13,"Pattern","","",31,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",32,null],[13,"OtherElement","","",32,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",33,null],[13,"McDeclared","","",33,null],[13,"McInherited","","",33,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",34,null],[13,"NoteUpvarRef","","",34,null],[13,"NoteNone","","",34,null],[3,"cmt_","","",null,null],[12,"id","","",35,null],[12,"span","","",35,null],[12,"cat","","",35,null],[12,"mutbl","","",35,null],[12,"ty","","",35,null],[12,"note","","",35,null],[6,"cmt","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",36,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",36,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",37,null],[3,"MemCategorizationOptions","","",null,null],[12,"during_closure_kind_inference","","",38,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",39,null],[13,"NonAliasable","","",39,null],[13,"ImmutableUnique","","",39,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",40,null],[13,"AliasableClosure","","",40,null],[13,"AliasableOther","","",40,null],[13,"UnaliasableImmutable","","",40,null],[13,"AliasableStatic","","",40,null],[13,"AliasableStaticMut","","",40,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_metadata::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_metadata::middle::privacy","",null,null],[13,"Reachable","","",41,null],[13,"Exported","","",41,null],[13,"Public","","",41,null],[3,"AccessLevels","","",null,null],[12,"map","","",42,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[0,"reachable","rustc_metadata::middle","",null,null],[5,"find_reachable","rustc_metadata::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_metadata::middle","This file actually contains two passes related to regions.  The first pass builds up the `scope_map`, which describes the parent links in the region hierarchy.  The second pass infers which types must be region parameterized.",null,null],[3,"CodeExtent","rustc_metadata::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling instead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be used to bound the lifetime/region for values.",null,null],[13,"Misc","","",43,null],[13,"CallSiteScope","","",43,null],[12,"fn_id","rustc_metadata::middle::region::CodeExtentData","",43,null],[12,"body_id","","",43,null],[13,"ParameterScope","rustc_metadata::middle::region","",43,null],[12,"fn_id","rustc_metadata::middle::region::CodeExtentData","",43,null],[12,"body_id","","",43,null],[13,"DestructionScope","rustc_metadata::middle::region","",43,null],[13,"Remainder","","",43,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",44,null],[12,"body_id","","",44,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",45,null],[12,"first_statement_index","","",45,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[0,"recursion_limit","rustc_metadata::middle","",null,null],[5,"update_limits","rustc_metadata::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_metadata::middle","Name resolution for lifetimes.",null,null],[4,"Region","rustc_metadata::middle::resolve_lifetime","",null,null],[13,"Static","","",46,null],[13,"EarlyBound","","",46,null],[13,"LateBound","","",46,null],[13,"LateBoundAnon","","",46,null],[13,"Free","","",46,null],[4,"Set1","","A set containing, at most, one known element. If two distinct values are inserted into a set, then it becomes `Many`, which can be used to detect ambiguities.",null,null],[13,"Empty","","",47,null],[13,"One","","",47,null],[13,"Many","","",47,null],[6,"ObjectLifetimeDefault","","",null,null],[3,"NamedRegionMap","","",null,null],[12,"defs","","",48,null],[12,"late_bound","","",48,null],[12,"issue_32330","","",48,null],[12,"object_lifetime_defaults","","",48,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[0,"stability","rustc_metadata::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_metadata::middle::stability","",null,null],[13,"Unstable","","",49,null],[13,"Stable","","",49,null],[3,"DeprecationEntry","","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",50,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,null],[0,"weak_lang_items","rustc_metadata::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_metadata::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"creader","rustc_metadata","Validates all used crates and extern libraries and loads their metadata",null,null],[3,"Library","rustc_metadata::creader","",null,null],[12,"dylib","","",51,null],[12,"rlib","","",51,null],[12,"rmeta","","",51,null],[12,"metadata","","",51,null],[3,"CrateLoader","","",null,null],[12,"sess","","",52,null],[11,"new","","",52,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"str"}],"output":{"name":"self"}}],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path, crate SVH and DefIndex of the registrar function.",52,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"option"}}],[11,"preprocess","","",52,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"postprocess","","",52,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"process_item","","",52,{"inputs":[{"name":"self"},{"name":"item"},{"name":"definitions"}],"output":null}],[0,"cstore","rustc_metadata","",null,null],[3,"NativeLibrary","rustc_metadata::cstore","",null,null],[12,"kind","","",14,null],[12,"name","","",14,null],[12,"cfg","","",14,null],[12,"foreign_items","","",14,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",13,null],[13,"NativeStaticNobundle","","",13,null],[13,"NativeFramework","","",13,null],[13,"NativeUnknown","","",13,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",12,null],[13,"RequireStatic","","",12,null],[3,"CrateSource","","",null,null],[12,"dylib","","",9,null],[12,"rlib","","",9,null],[12,"rmeta","","",9,null],[3,"LinkMeta","","",null,null],[12,"crate_name","","",8,null],[12,"crate_hash","","",8,null],[4,"LibSource","","",null,null],[13,"Some","","",11,null],[13,"MetadataOnly","","",11,null],[13,"None","","",11,null],[3,"ImportedFileMap","","Holds information about a syntax_pos::FileMap imported from another crate. See `imported_filemaps()` for more information.",null,null],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",53,null],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",53,null],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",53,null],[3,"CrateMetadata","","",null,null],[12,"name","","",54,null],[12,"extern_crate","","Information about the extern crate that caused this crate to be loaded. If this is `None`, then the crate was injected (e.g., by the allocator)",54,null],[12,"blob","","",54,null],[12,"cnum_map","","",54,null],[12,"cnum","","",54,null],[12,"codemap_import_info","","",54,null],[12,"root","","",54,null],[12,"def_path_table","","For each public item in this crate, we encode a key.  When the crate is loaded, we read all the keys and put them in this hashmap, which gives the reverse mapping.  This allows us to quickly retrace a `DefPath`, which is needed for incremental compilation support.",54,null],[12,"exported_symbols","","",54,null],[12,"dep_kind","","",54,null],[12,"source","","",54,null],[12,"proc_macros","","",54,null],[12,"dllimport_foreign_items","","",54,null],[3,"CStore","","",null,null],[12,"dep_graph","","",55,null],[12,"dllimport_foreign_items","","",55,null],[12,"visible_parent_map","","",55,null],[4,"MetadataBlob","","",null,null],[13,"Inflated","","",56,null],[13,"Archive","","",56,null],[13,"Raw","","",56,null],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[6,"CrateNumMap","","",null,null],[11,"new","","",55,{"inputs":[{"name":"depgraph"}],"output":{"name":"cstore"}}],[11,"next_crate_num","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"get_crate_data","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"get_crate_hash","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"set_crate_data","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"},{"name":"rc"}],"output":null}],[11,"iter_crate_data","","",55,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"reset","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"crate_dependencies_in_rpo","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"push_dependencies_in_postorder","","",55,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"cratenum"}],"output":null}],[11,"do_get_used_crates","","",55,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"add_used_library","","",55,{"inputs":[{"name":"self"},{"name":"nativelibrary"}],"output":null}],[11,"get_used_libraries","","",55,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"add_used_link_args","","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get_used_link_args","","",55,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"add_extern_mod_stmt_cnum","","",55,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"cratenum"}],"output":null}],[11,"add_statically_included_foreign_item","","",55,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":null}],[11,"do_is_statically_included_foreign_item","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"do_extern_mod_stmt_cnum","","",55,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"name","","",54,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"hash","","",54,{"inputs":[{"name":"self"}],"output":{"name":"svh"}}],[11,"disambiguator","","",54,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"is_staged_api","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_allocator","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_allocator","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"needs_panic_runtime","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_no_builtins","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",54,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[0,"locator","rustc_metadata","Finds crate binaries and loads their metadata",null,null],[3,"CrateMismatch","rustc_metadata::locator","",null,null],[3,"Context","","",null,null],[12,"sess","","",57,null],[12,"span","","",57,null],[12,"ident","","",57,null],[12,"crate_name","","",57,null],[12,"hash","","",57,null],[12,"target","","",57,null],[12,"triple","","",57,null],[12,"filesearch","","",57,null],[12,"root","","",57,null],[12,"rejected_via_hash","","",57,null],[12,"rejected_via_triple","","",57,null],[12,"rejected_via_kind","","",57,null],[12,"rejected_via_version","","",57,null],[12,"rejected_via_filename","","",57,null],[12,"should_match_name","","",57,null],[12,"is_proc_macro","","",57,null],[3,"ArchiveMetadata","","",null,null],[3,"CratePaths","","",null,null],[12,"ident","","",58,null],[12,"dylib","","",58,null],[12,"rlib","","",58,null],[12,"rmeta","","",58,null],[5,"note_crate_name","","",null,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":null}],[5,"meta_section_name","","",null,{"inputs":[{"name":"target"}],"output":{"name":"str"}}],[5,"read_meta_section_name","","",null,{"inputs":[{"name":"target"}],"output":{"name":"str"}}],[5,"list_file_metadata","","",null,{"inputs":[{"name":"target"},{"name":"path"},{"name":"write"}],"output":{"name":"result"}}],[17,"METADATA_FILENAME","","",null,null],[11,"maybe_load_library_crate","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"load_library_crate","","",57,{"inputs":[{"name":"self"}],"output":{"name":"library"}}],[11,"report_errs","","",57,null],[11,"as_slice","","",59,null],[17,"DIAGNOSTICS","rustc_metadata","",null,null],[11,"neg","rustc_metadata::middle::const_val","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitxor","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"option"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"not","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitor","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"bitand","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"shl","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"shr","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"ordering"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::cstore","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::cstore","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::free_region","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::lang_items","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::region","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::resolve_lifetime","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"decode","rustc_metadata::middle::stability","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","rustc_metadata::middle::cstore","",10,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_metadata::cstore","",13,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_metadata::middle::privacy","",41,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_metadata::middle::region","",61,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_metadata::middle::stability","",49,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"eq","rustc_metadata::middle::expr_use_visitor","",1,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::cstore","",9,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::cstore","",10,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::cstore","",11,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::dataflow","",22,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::dependency_format","",23,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::lang_items","",24,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::mem_categorization","",26,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"elementkind"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::privacy","",41,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::region","",61,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::resolve_lifetime","",46,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"eq","rustc_metadata::middle::stability","",49,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"hash","rustc_metadata::middle::const_val","",6,null],[11,"hash","rustc_metadata::cstore","",13,null],[11,"hash","","",14,null],[11,"hash","rustc_metadata::middle::lang_items","",24,null],[11,"hash","rustc_metadata::middle::mem_categorization","",28,null],[11,"hash","","",29,null],[11,"hash","","",30,null],[11,"hash","","",31,null],[11,"hash","","",32,null],[11,"hash","","",33,null],[11,"hash","rustc_metadata::middle::region","",61,null],[11,"hash","","",43,null],[11,"hash","","",44,null],[11,"hash","","",45,null],[11,"hash","rustc_metadata::middle::resolve_lifetime","",46,null],[11,"hash","rustc_metadata::middle::stability","",49,null],[11,"crate_data_as_rc_any","rustc_metadata::middle::cstore","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"describe_def","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",62,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"visible_parent_map","","",62,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"item_generics_cloned","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"fn_arg_names","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",62,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"impl_polarity","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"impl_parent","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item_cloned","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"is_const_fn","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_exported_symbol","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"lang_items","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"dep_kind","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",62,null],[11,"is_allocator","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"extern_crate","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_name","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",62,null],[11,"def_key","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",62,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",62,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_item_mir_available","","",62,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",62,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",62,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",62,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",62,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",62,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",62,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",62,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",62,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",62,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",62,null],[11,"default","rustc_metadata::middle::privacy","",42,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"default","rustc_metadata::middle::mem_categorization","",38,{"inputs":[],"output":{"name":"memcategorizationoptions"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::privacy","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::region","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::expr_use_visitor","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::cstore","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::cstore","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::cstore","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::cstore","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::dataflow","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::dependency_format","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::mem_categorization","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::privacy","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::region","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::resolve_lifetime","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_metadata::middle::stability","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nested","rustc_metadata::middle::dataflow","",64,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",64,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"clone","rustc_metadata::middle::expr_use_visitor","",1,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"clone","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"clone","rustc_metadata::cstore","",8,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"clone","rustc_metadata::middle::cstore","",10,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"clone","rustc_metadata::cstore","",11,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"clone","rustc_metadata::middle::cstore","",16,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"clone","rustc_metadata::middle::dataflow","",19,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"clone","rustc_metadata::middle::dependency_format","",23,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"clone","rustc_metadata::middle::free_region","",60,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"clone","rustc_metadata::middle::lang_items","",24,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"clone","rustc_metadata::middle::mem_categorization","",26,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"elementkind"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationoptions"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"clone","rustc_metadata::middle::privacy","",41,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"clone","rustc_metadata::middle::region","",61,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"codeextentdata"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"callsitescopedata"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","rustc_metadata::middle::resolve_lifetime","",46,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"set1"}}],[11,"clone","rustc_metadata::middle::stability","",49,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"encode","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::cstore","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::cstore","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::free_region","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::lang_items","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::region","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::resolve_lifetime","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"encode","rustc_metadata::middle::stability","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","rustc_metadata::middle::cstore","",10,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_metadata::cstore","",13,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_metadata::middle::privacy","",41,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_metadata::middle::region","",61,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"ordering"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"ordering"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"ordering"}}],[11,"cmp","","",45,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"new","rustc_metadata::middle::expr_use_visitor","",65,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"with_options","","",65,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"exprusevisitor"}}],[11,"consume_body","","",65,null],[11,"consume_expr","","",65,null],[11,"walk_expr","","",65,null],[11,"description","rustc_metadata::middle::const_val","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_const_int","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new_unsigned","","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",7,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"new_signed","","Creates a new signed ConstInt with matching type while also checking that overflow does not happen.",7,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"option"}}],[11,"new_unsigned_truncating","","Creates a new unsigned ConstInt with matching type.",7,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"constint"}}],[11,"new_signed_truncating","","Creates a new signed ConstInt with matching type.",7,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"constint"}}],[11,"description","","Description of the type, not the value",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_u128_unchecked","","Erases the type and returns a u128. This is not the same as `-5i8 as u128` but as `-5i8 as i128 as u128`",7,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u32","","Converts the value to a `u32` if it's in the range 0...std::u32::MAX",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","Converts the value to a `u64` if it's in the range 0...std::u64::MAX",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u128","","Converts the value to a `u128` if it's in the range 0...std::u128::MAX",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",7,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64","","",7,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_negative","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",7,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",7,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"int_type","","",7,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"macros_only","rustc_metadata::middle::cstore","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_some","rustc_metadata::cstore","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rustc_metadata::middle::dataflow","",64,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",64,null],[11,"add_kill","","Indicates that `id` kills `bit`",64,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",64,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",64,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",64,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",64,null],[11,"propagate","","Performs the data flow analysis.",64,null],[11,"new","rustc_metadata::middle::free_region","",60,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"is_empty","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"relate_free_regions_from_implied_bounds","","",60,null],[11,"relate_free_regions_from_predicates","","",60,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship by walking the graph encoded in `map`.  Note that it is possible that `sub != sup` and `sub <= sup` and `sup <= sub` (that is, the user can give two different names to the same lifetime).",60,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",60,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"region"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after inference* and sadly the logic is somewhat duplicated with the code in infer.rs.",60,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"is_static","","Determines whether this free-region is required to be 'static",60,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"from_u32","rustc_metadata::middle::lang_items","",24,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",25,null],[11,"item_name","","",25,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",25,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"require_owned_box","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",25,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_eq_fn","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strdup_uniq_fn","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_type","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_type","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_type","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_lifetime","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_lifetime","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_lifetime","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_copy_bound","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_mutbl","rustc_metadata::middle::mem_categorization","",33,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",33,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",33,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_field","","",35,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"option"}}],[11,"get_field_name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_arg_if_immutable","","",35,{"inputs":[{"name":"self"},{"name":"map"}],"output":{"name":"option"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",35,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",35,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",35,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"new","","",37,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_options","","",37,{"inputs":[{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",37,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_expr_autoderefd","","",37,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cat_expr_unadjusted","","",37,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_def","","",37,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"},{"name":"def"}],"output":{"name":"result"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",37,null],[11,"cat_rvalue_node","","",37,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_rvalue","","",37,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"region"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_field","","",37,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"symbol"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_tup_field","","",37,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"usize"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",37,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"interioroffsetkind"}],"output":{"name":"result"}}],[11,"cat_imm_interior","","",37,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"interiorkind"}],"output":{"name":"rc"}}],[11,"cat_downcast","","",37,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"cat_pattern","","",37,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"pat"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_reachable","rustc_metadata::middle::privacy","",42,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",42,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",42,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"node_id","rustc_metadata::middle::region","",61,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this CodeExtent.  Note that in general the returned span may not correspond to the span of any node id in the AST.",61,{"inputs":[{"name":"self"},{"name":"regionmaps"},{"name":"map"}],"output":{"name":"option"}}],[11,"node_id","","Returns a node id associated with this scope.",43,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"to_code_extent","","",44,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"codeextent"}}],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody really cares about the contents of these.",66,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"lookup_code_extent","","",66,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"node_extent","","",66,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"item_extent","","",66,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"call_site_extent","","",66,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"opt_destruction_extent","","",66,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"intern_code_extent","","",66,{"inputs":[{"name":"self"},{"name":"codeextentdata"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"intern_node","","",66,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"code_extent_data","","",66,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextentdata"}}],[11,"each_encl_scope","","",66,null],[11,"each_var_scope","","",66,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",66,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",66,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",66,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"temporary_scope2","","",66,null],[11,"old_and_new_temporary_scope","","",66,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",66,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",66,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"scopes_intersect","","",66,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",66,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",66,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"insert","rustc_metadata::middle::resolve_lifetime","",47,null],[11,"from_attr_level","rustc_metadata::middle::stability","",49,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"same_origin","","",50,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"build","","Construct the stability index for a crate being compiled.",67,null],[11,"new","","",67,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"is_compatible","rustc_metadata::cstore","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_rustc_version","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_root","","",56,{"inputs":[{"name":"self"}],"output":{"name":"crateroot"}}],[11,"list_crate_metadata","","",56,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"get_def","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_span","","",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"session"}],"output":{"name":"span"}}],[11,"get_trait_def","","",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"traitdef"}}],[11,"get_adt_def","","",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"adtdef"}}],[11,"get_predicates","","",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[11,"get_super_predicates","","",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[11,"get_generics","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"generics"}}],[11,"get_type","","",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"ty"}}],[11,"get_stability","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_deprecation","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_visibility","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"visibility"}}],[11,"get_parent_impl","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_impl_polarity","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"implpolarity"}}],[11,"get_custom_coerce_unsized_kind","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_impl_trait","","",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"option"}}],[11,"get_lang_items","","Iterates over the language items in the given crate.",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"each_child_of_item","","Iterates over each child of the given item.",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"f"}],"output":null}],[11,"maybe_get_item_body","","",54,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"item_body_tables","","",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"typecktables"}}],[11,"item_body_nested_bodies","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_item_mir_available","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"maybe_get_item_mir","","",54,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"mir_const_qualif","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"u8"}}],[11,"get_associated_item","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"associateditem"}}],[11,"get_item_variances","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_ctor_kind","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"ctorkind"}}],[11,"get_struct_ctor_def_id","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_item_attrs","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_struct_field_names","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_inherent_implementations_for_type","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_implementations_for_trait","","",54,{"inputs":[{"name":"self"},{"name":"option"},{"name":"vec"}],"output":null}],[11,"get_trait_of_item","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"get_native_libraries","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_dylib_dependency_formats","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_missing_lang_items","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_fn_arg_names","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"vec"}}],[11,"get_exported_symbols","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_macro","","",54,null],[11,"is_const_fn","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"closure_kind","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"closurekind"}}],[11,"closure_ty","","",54,{"inputs":[{"name":"self"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"polyfnsig"}}],[11,"def_key","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_path","","",54,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpath"}}],[11,"imported_filemaps","","Imports the codemap from an external crate into the codemap of the crate currently being compiled (the \"local crate\").",54,{"inputs":[{"name":"self"},{"name":"codemap"}],"output":{"name":"ref"}}],[11,"crate_data_as_rc_any","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"describe_def","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",55,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"item_generics_cloned","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"fn_arg_names","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",55,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"impl_polarity","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"impl_parent","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item_cloned","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"is_const_fn","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_exported_symbol","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"dep_kind","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":null}],[11,"lang_items","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_allocator","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"crate_name","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"extern_crate","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_hash","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",55,null],[11,"def_key","","Returns the `DefKey` for a given `DefId`. This indicates the parent `DefId` as well as some idea of what kind of data the `DefId` refers to.",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",55,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",55,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_item_mir_available","","",55,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",55,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",55,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",55,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",55,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",55,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"exportmap"},{"name":"linkmeta"},{"name":"nodeset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",55,null],[11,"visible_parent_map","","Returns a map from a sufficiently visible external item (i.e. an external item that is visible from at least one local module) to a sufficiently visible parent (considering modules that re-export the external item to be parents).",55,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}]],"paths":[[8,"Delegate"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[4,"ConstVal"],[4,"ConstInt"],[3,"LinkMeta"],[3,"CrateSource"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"NativeLibrary"],[4,"LoadedMacro"],[3,"ExternCrate"],[8,"CrateStore"],[8,"CrateLoader"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[4,"KillFrom"],[4,"Linkage"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[8,"ast_node"],[3,"MemCategorizationContext"],[3,"MemCategorizationOptions"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"Region"],[4,"Set1"],[3,"NamedRegionMap"],[4,"StabilityLevel"],[3,"DeprecationEntry"],[3,"Library"],[3,"CrateLoader"],[3,"ImportedFileMap"],[3,"CrateMetadata"],[3,"CStore"],[4,"MetadataBlob"],[3,"Context"],[3,"CratePaths"],[3,"ArchiveMetadata"],[3,"FreeRegionMap"],[3,"CodeExtent"],[3,"DummyCrateStore"],[3,"Context"],[3,"DataFlowContext"],[3,"ExprUseVisitor"],[3,"RegionMaps"],[3,"Index"]]};
searchIndex["rustc_mir"] = {"doc":"Rust MIR: a lowered representation of Rust. Also: an experiment!","items":[[5,"provide","rustc_mir","",null,{"inputs":[{"name":"providers"}],"output":null}],[0,"diagnostics","","",null,null],[0,"build","","",null,null],[3,"Builder","rustc_mir::build","",null,null],[3,"ScopeId","","",null,null],[3,"BlockAnd","","The `BlockAnd` \"monad\" packages up the new basic block along with a produced value (sometimes just unit, of course). The `unpack!` macro (and methods below) makes working with `BlockAnd` much more convenient.",null,null],[5,"construct_fn","","the main entry point for building MIR for a function",null,{"inputs":[{"name":"cx"},{"name":"nodeid"},{"name":"a"},{"name":"abi"},{"name":"ty"},{"name":"body"}],"output":{"name":"mir"}}],[5,"construct_const","","",null,{"inputs":[{"name":"cx"},{"name":"bodyid"}],"output":{"name":"mir"}}],[5,"construct_error","","",null,{"inputs":[{"name":"cx"},{"name":"bodyid"}],"output":{"name":"mir"}}],[11,"ast_block","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"basicblock"},{"name":"block"}],"output":{"name":"blockand"}}],[11,"as_constant","","Compile `expr`, yielding a compile-time constant. Assumes that `expr` is a valid compile-time constant!",0,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"constant"}}],[11,"as_lvalue","","Compile `expr`, yielding an lvalue that we can move from etc.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"as_local_rvalue","","See comment on `as_local_operand`",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"as_rvalue","","Compile `expr`, yielding an rvalue.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"option"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"build_binary_op","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"binop"},{"name":"span"},{"name":"ty"},{"name":"operand"},{"name":"operand"}],"output":{"name":"blockand"}}],[11,"as_local_operand","","Returns an operand suitable for use until the end of the current scope expression.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"as_operand","","Compile `expr` into a value that can be used as an operand. If `expr` is an lvalue like `x`, this will introduce a temporary `tmp = x`, so that we capture the value of `x` at this time.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"option"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"as_temp","","Compile `expr` into a fresh temporary. This is used when building up rvalues so as to freeze the value that will be consumed.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"option"},{"name":"m"}],"output":{"name":"blockand"}}],[11,"into_expr","","Compile `expr`, storing the result into `destination`, which is assumed to be uninitialized.",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"basicblock"},{"name":"expr"}],"output":{"name":"blockand"}}],[11,"stmt_expr","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"expr"}],"output":{"name":"blockand"}}],[11,"into","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"basicblock"},{"name":"e"}],"output":{"name":"blockand"}}],[11,"simplify_candidate","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"candidate"}],"output":{"name":"blockand"}}],[11,"test","","Identifies what test is needed to decide if `match_pair` is applicable.",0,{"inputs":[{"name":"self"},{"name":"matchpair"}],"output":{"name":"test"}}],[11,"add_cases_to_switch","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"candidate"},{"name":"ty"},{"name":"vec"},{"name":"fxhashmap"}],"output":{"name":"bool"}}],[11,"add_variants_to_switch","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"candidate"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"perform_test","","Generates the code to perform a test.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"lvalue"},{"name":"test"}],"output":{"name":"vec"}}],[11,"sort_candidate","","Given that we are performing `test` against `test_lvalue`, this job sorts out what the status of `candidate` will be after the test. The `resulting_candidates` vector stores, for each possible outcome of `test`, a vector of the candidates that will result. This fn should add a (possibly modified) clone of candidate into `resulting_candidates` wherever appropriate.",0,null],[11,"field_match_pairs","","",0,null],[11,"prefix_slice_suffix","","",0,null],[11,"match_expr","","",0,{"inputs":[{"name":"self"},{"name":"lvalue"},{"name":"span"},{"name":"basicblock"},{"name":"exprref"},{"name":"vec"}],"output":{"name":"blockand"}}],[11,"expr_into_pattern","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"pattern"},{"name":"exprref"}],"output":{"name":"blockand"}}],[11,"lvalue_into_pattern","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"pattern"},{"name":"lvalue"}],"output":{"name":"blockand"}}],[11,"declare_bindings","","Declares the bindings of the given pattern and returns the visibility scope for the bindings in this patterns, if such a scope had to be created. NOTE: Declaring the bindings should always be done in their drop scope.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"span"},{"name":"pattern"}],"output":{"name":"option"}}],[11,"storage_live_binding","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"nodeid"},{"name":"span"}],"output":{"name":"lvalue"}}],[11,"schedule_drop_for_binding","","",0,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_bindings","","",0,{"inputs":[{"name":"self"},{"name":"pattern"},{"name":"f"}],"output":null}],[11,"temp","","Add a new temporary value of type `ty` storing the result of evaluating `expr`.",0,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"lvalue"}}],[11,"literal_operand","","",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"literal"}],"output":{"name":"operand"}}],[11,"unit_rvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rvalue"}}],[11,"zero_literal","","",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"}],"output":{"name":"operand"}}],[11,"push_usize","","",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"sourceinfo"},{"name":"u64"}],"output":{"name":"lvalue"}}],[11,"in_loop_scope","","Start a loop scope, which tracks where `continue` and `break` should branch to. See module comment for more details.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"basicblock"},{"name":"lvalue"},{"name":"f"}],"output":null}],[11,"in_scope","","Convenience wrapper that pushes a scope and then executes `f` to build its contents, popping the scope afterwards.",0,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"basicblock"},{"name":"f"}],"output":{"name":"blockand"}}],[11,"push_scope","","Push a scope onto the stack. You can then build code in this scope and call `pop_scope` afterwards. Note that these two calls must be paired; using `in_scope` as a convenience wrapper maybe preferable.",0,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":null}],[11,"pop_scope","","Pops a scope, which should have extent `extent`, adding any drops onto the end of `block` that are needed.  This must match 1-to-1 with `push_scope`.",0,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"basicblock"}],"output":{"name":"blockand"}}],[11,"exit_scope","","Branch out of `block` to `target`, exiting all scopes up to and including `extent`.  This will insert whatever drops are needed, as well as tracking this exit for the SEME region. See module comment for details.",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"codeextent"},{"name":"basicblock"},{"name":"basicblock"}],"output":null}],[11,"new_visibility_scope","","Creates a new visibility scope, nested in the current one.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"visibilityscope"}}],[11,"find_loop_scope","","Finds the loop scope for a given label. This is used for resolving `break` and `continue`.",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"codeextent"}],"output":{"name":"loopscope"}}],[11,"source_info","","Given a span and the current visibility scope, make a SourceInfo.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"sourceinfo"}}],[11,"extent_of_return_scope","","Returns the extent of the scope which should be exited by a return.",0,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"topmost_scope","","Returns the topmost active scope, which is known to be alive until the next scope expression.",0,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"schedule_drop","","Indicates that `lvalue` should be dropped on exit from `extent`.",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"codeextent"},{"name":"lvalue"},{"name":"ty"}],"output":null}],[11,"schedule_box_free","","Schedule dropping of a not-yet-fully-initialised box.",0,{"inputs":[{"name":"self"},{"name":"span"},{"name":"codeextent"},{"name":"lvalue"},{"name":"ty"}],"output":null}],[11,"diverge_cleanup","","Creates a path that performs all required cleanup for unwinding.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"build_drop","","Utility function for *non*-scope code to build their own drops",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"span"},{"name":"lvalue"},{"name":"ty"}],"output":{"name":"blockand"}}],[11,"build_drop_and_replace","","Utility function for *non*-scope code to build their own drops",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"span"},{"name":"lvalue"},{"name":"operand"}],"output":{"name":"blockand"}}],[11,"assert","","Create an Assert terminator and return the success block. If the boolean condition operand is not the expected value, a runtime panic will be caused with the given message.",0,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"operand"},{"name":"bool"},{"name":"assertmessage"},{"name":"span"}],"output":{"name":"basicblock"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"scopeid"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"scopeid"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"scopeid"}],"output":{"name":"bool"}}],[11,"new","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"scopeid"}}],[11,"index","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"callgraph","rustc_mir","MIR-based callgraph.",null,null],[3,"CallGraph","rustc_mir::callgraph","",null,null],[3,"SCCIterator","","Iterator over strongly-connected-components using Tarjan's algorithm[1]",null,null],[11,"build","","",2,{"inputs":[{"name":"tyctxt"}],"output":{"name":"callgraph"}}],[11,"scc_iter","","",2,{"inputs":[{"name":"self"}],"output":{"name":"scciterator"}}],[11,"def_id","","",2,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"defid"}}],[11,"new","","",3,{"inputs":[{"name":"graph"}],"output":{"name":"scciterator"}}],[11,"with_entry","","",3,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"scciterator"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"def_use","rustc_mir","Def-use analysis.",null,null],[3,"DefUseAnalysis","rustc_mir::def_use","",null,null],[3,"Info","","",null,null],[12,"defs_and_uses","","",4,null],[3,"Use","","",null,null],[12,"context","","",5,null],[12,"location","","",5,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"new","","",6,{"inputs":[{"name":"mir"}],"output":{"name":"defuseanalysis"}}],[11,"analyze","","",6,{"inputs":[{"name":"self"},{"name":"mir"}],"output":null}],[11,"local_info","","",6,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"info"}}],[11,"local_info_mut","","",6,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"info"}}],[11,"replace_all_defs_and_uses_with","","FIXME(pcwalton): This should update the def-use chains.",6,{"inputs":[{"name":"self"},{"name":"local"},{"name":"mir"},{"name":"lvalue"}],"output":null}],[11,"def_count","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"def_count_not_including_drop","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"use_count","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"graphviz","rustc_mir","",null,null],[5,"write_mir_graphviz","rustc_mir::graphviz","Write a graphviz DOT graph of a list of MIRs.",null,{"inputs":[{"name":"tyctxt"},{"name":"i"},{"name":"w"}],"output":{"name":"result"}}],[5,"write_node_label","","Write a graphviz HTML-styled label for the given basic block, with all necessary escaping already performed. (This is suitable for emitting directly, as is done in this module, or for use with the LabelText::HtmlStr from libgraphviz.)",null,{"inputs":[{"name":"basicblock"},{"name":"mir"},{"name":"w"},{"name":"u32"},{"name":"init"},{"name":"fini"}],"output":{"name":"result"}}],[0,"mir_map","rustc_mir","An experimental pass that scources for `#[rustc_mir]` attributes, builds the resulting MIR, and dumps it out into a file for inspection.",null,null],[5,"build_mir_for_crate","rustc_mir::mir_map","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[0,"pretty","rustc_mir","",null,null],[5,"dump_mir","rustc_mir::pretty","If the session is properly configured, dumps a human-readable representation of the mir into:",null,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"display"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[5,"write_mir_pretty","","Write out a human-readable textual representation for the given MIR.",null,{"inputs":[{"name":"tyctxt"},{"name":"i"},{"name":"write"}],"output":{"name":"result"}}],[5,"write_mir_fn","","",null,{"inputs":[{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"},{"name":"write"}],"output":{"name":"result"}}],[0,"transform","rustc_mir","",null,null],[0,"simplify_branches","rustc_mir::transform","A pass that simplifies branches when their condition is known.",null,null],[3,"SimplifyBranches","rustc_mir::transform::simplify_branches","",null,null],[11,"new","","",7,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"run_pass","","",7,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"disambiguator","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[0,"simplify","rustc_mir::transform","A number of passes which remove various redundancies in the CFG.",null,null],[3,"SimplifyCfg","rustc_mir::transform::simplify","",null,null],[3,"CfgSimplifier","","",null,null],[3,"SimplifyLocals","","",null,null],[5,"remove_dead_blocks","","",null,{"inputs":[{"name":"mir"}],"output":null}],[11,"new","","",8,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"run_pass","","",8,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"disambiguator","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name","","",8,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"new","","",9,{"inputs":[{"name":"mir"}],"output":{"name":"self"}}],[11,"simplify","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"run_pass","","",10,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"erase_regions","rustc_mir::transform","This pass erases all early-bound regions from the types occuring in the MIR. We want to do this once just before trans, so trans does not have to take care erasing regions all over the place.",null,null],[3,"EraseRegions","rustc_mir::transform::erase_regions","",null,null],[11,"run_pass","","",11,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"no_landing_pads","rustc_mir::transform","This pass removes the unwind branch of all the terminators when the no-landing-pads option is specified.",null,null],[3,"NoLandingPads","rustc_mir::transform::no_landing_pads","",null,null],[11,"visit_terminator","","",12,{"inputs":[{"name":"self"},{"name":"basicblock"},{"name":"terminator"},{"name":"location"}],"output":null}],[11,"run_pass","","",12,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"type_check","rustc_mir::transform","This pass type-checks the MIR to ensure it is not broken.",null,null],[3,"TypeChecker","rustc_mir::transform::type_check","",null,null],[3,"TypeckMir","","",null,null],[11,"register_infer_ok_obligations","","",13,{"inputs":[{"name":"self"},{"name":"inferok"}],"output":{"name":"t"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"run_pass","","",14,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"add_call_guards","rustc_mir::transform","",null,null],[3,"AddCallGuards","rustc_mir::transform::add_call_guards","",null,null],[11,"run_pass","","",15,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"promote_consts","rustc_mir::transform","A pass that promotes borrows of constant rvalues.",null,null],[4,"TempState","rustc_mir::transform::promote_consts","State of a temporary during collection and promotion.",null,null],[13,"Undefined","","No references to this temp.",16,null],[13,"Defined","","One direct assignment and any number of direct uses. A borrow of this temp is promotable if the assigned value is qualified as constant.",16,null],[12,"location","rustc_mir::transform::promote_consts::TempState","",16,null],[12,"uses","","",16,null],[13,"Unpromotable","rustc_mir::transform::promote_consts","Any other combination of assignments/uses.",16,null],[13,"PromotedOut","","This temp was part of an rvalue which got extracted during promotion and needs cleanup.",16,null],[4,"Candidate","","A \"root candidate\" for promotion, which will become the returned value in a promoted MIR, unless it's a subset of a larger candidate.",null,null],[13,"Ref","","Borrow of a constant temporary.",17,null],[13,"ShuffleIndices","","Array of indices found in the third argument of a call to one of the simd_shuffleN intrinsics.",17,null],[5,"collect_temps","","",null,{"inputs":[{"name":"mir"},{"name":"reversepostorder"}],"output":{"name":"indexvec"}}],[5,"promote_candidates","","",null,{"inputs":[{"name":"mir"},{"name":"tyctxt"},{"name":"indexvec"},{"name":"vec"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"tempstate"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"tempstate"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"tempstate"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_promotable","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"qualify_consts","rustc_mir::transform","A pass that qualifies constness of temporaries in constants, static initializers and functions and also drives promotion.",null,null],[3,"Qualif","rustc_mir::transform::qualify_consts","",null,null],[3,"QualifyAndPromoteConstants","","",null,null],[5,"is_const_fn","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"bool"}}],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"qualif"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"ordering"}}],[11,"hash","","",18,null],[18,"MUTABLE_INTERIOR","","",18,null],[18,"NEEDS_DROP","","",18,null],[18,"FN_ARGUMENT","","",18,null],[18,"STATIC","","",18,null],[18,"STATIC_REF","","",18,null],[18,"NOT_CONST","","",18,null],[18,"NOT_PROMOTABLE","","",18,null],[18,"NEVER_PROMOTE","","",18,null],[18,"CONST_ERROR","","",18,null],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"qualif"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"qualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,{"inputs":[{"name":"u8"}],"output":{"name":"qualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"qualif"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"qualif"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"qualif"}}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"qualif"}],"output":{"name":"qualif"}}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"self"}],"output":{"name":"qualif"}}],[11,"run_pass","","",19,null],[0,"dump_mir","rustc_mir::transform","This pass just dumps MIR at a specified point.",null,null],[3,"Marker","rustc_mir::transform::dump_mir","",null,null],[12,"0","","",20,null],[3,"Disambiguator","","",null,null],[3,"DumpMir","","",null,null],[11,"run_pass","","",20,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"on_mir_pass","","",22,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"},{"name":"pass"},{"name":"bool"}],"output":null}],[0,"deaggregator","rustc_mir::transform","",null,null],[3,"Deaggregator","rustc_mir::transform::deaggregator","",null,null],[11,"run_pass","","",23,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"instcombine","rustc_mir::transform","Performs various peephole optimizations.",null,null],[3,"InstCombine","rustc_mir::transform::instcombine","",null,null],[11,"new","","",24,{"inputs":[],"output":{"name":"instcombine"}}],[11,"run_pass","","",24,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[11,"visit_rvalue","","",24,{"inputs":[{"name":"self"},{"name":"rvalue"},{"name":"location"}],"output":null}],[0,"copy_prop","rustc_mir::transform","Trivial copy propagation pass.",null,null],[3,"CopyPropagation","rustc_mir::transform::copy_prop","",null,null],[11,"run_pass","","",25,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"}],"output":null}],[0,"inline","rustc_mir::transform","Inlining pass for MIR functions",null,null],[3,"Inline","rustc_mir::transform::inline","",null,null],[11,"run_pass","","",26,null]],"paths":[[3,"Builder"],[3,"ScopeId"],[3,"CallGraph"],[3,"SCCIterator"],[3,"Info"],[3,"Use"],[3,"DefUseAnalysis"],[3,"SimplifyBranches"],[3,"SimplifyCfg"],[3,"CfgSimplifier"],[3,"SimplifyLocals"],[3,"EraseRegions"],[3,"NoLandingPads"],[3,"TypeChecker"],[3,"TypeckMir"],[3,"AddCallGuards"],[4,"TempState"],[4,"Candidate"],[3,"Qualif"],[3,"QualifyAndPromoteConstants"],[3,"Marker"],[3,"Disambiguator"],[3,"DumpMir"],[3,"Deaggregator"],[3,"InstCombine"],[3,"CopyPropagation"],[3,"Inline"]]};
searchIndex["rustc_passes"] = {"doc":"Various checks","items":[[0,"diagnostics","rustc_passes","",null,null],[0,"ast_validation","","",null,null],[5,"check_crate","rustc_passes::ast_validation","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"consts","rustc_passes","",null,null],[5,"check_crate","rustc_passes::consts","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"hir_stats","rustc_passes","",null,null],[5,"print_hir_stats","rustc_passes::hir_stats","",null,{"inputs":[{"name":"crate"}],"output":null}],[5,"print_ast_stats","","",null,{"inputs":[{"name":"crate"},{"name":"str"}],"output":null}],[0,"loops","rustc_passes","",null,null],[5,"check_crate","rustc_passes::loops","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":null}],[0,"mir_stats","rustc_passes","",null,null],[5,"print_mir_stats","rustc_passes::mir_stats","",null,{"inputs":[{"name":"tyctxt"},{"name":"str"}],"output":null}],[0,"no_asm","rustc_passes","",null,null],[5,"check_crate","rustc_passes::no_asm","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"rvalues","rustc_passes","",null,null],[5,"check_crate","rustc_passes::rvalues","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"static_recursion","rustc_passes","",null,null],[5,"check_crate","rustc_passes::static_recursion","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"compileresult"}}]],"paths":[]};
searchIndex["rustc_platform_intrinsics"] = {"doc":"","items":[[3,"Intrinsic","rustc_platform_intrinsics","",null,null],[12,"inputs","","",0,null],[12,"output","","",0,null],[12,"definition","","",0,null],[4,"Type","","",null,null],[13,"Void","","",1,null],[13,"Integer","","",1,null],[13,"Float","","",1,null],[13,"Pointer","","",1,null],[13,"Vector","","",1,null],[13,"Aggregate","","",1,null],[4,"IntrinsicDef","","",null,null],[13,"Named","","",2,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"find","","",0,{"inputs":[{"name":"str"}],"output":{"name":"option"}}]],"paths":[[3,"Intrinsic"],[4,"Type"],[4,"IntrinsicDef"]]};
searchIndex["rustc_plugin"] = {"doc":"Infrastructure for compiler plugins.","items":[[0,"diagnostics","rustc_plugin","",null,null],[0,"registry","","Used by plugin crates to tell `rustc` about the plugins they provide.",null,null],[3,"Registry","rustc_plugin::registry","Structure used to register plugins.",null,null],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages from the plugin registrar.",0,null],[11,"args","","Get the plugin's arguments, if any.",0,null],[11,"register_syntax_extension","","Register a syntax extension of any kind.",0,{"inputs":[{"name":"self"},{"name":"name"},{"name":"syntaxextension"}],"output":null}],[11,"register_custom_derive","","This can be used in place of `register_syntax_extension` to register legacy custom derives (i.e. attribute syntax extensions whose name begins with `derive_`). Legacy custom derives defined by this function do not trigger deprecation warnings when used.",0,{"inputs":[{"name":"self"},{"name":"name"},{"name":"syntaxextension"}],"output":null}],[11,"take_whitelisted_custom_derives","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_macro","","Register a macro of the usual kind.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"macroexpanderfn"}],"output":null}],[11,"register_early_lint_pass","","Register a compiler lint pass.",0,{"inputs":[{"name":"self"},{"name":"earlylintpassobject"}],"output":null}],[11,"register_late_lint_pass","","Register a compiler lint pass.",0,{"inputs":[{"name":"self"},{"name":"latelintpassobject"}],"output":null}],[11,"register_lint_group","","Register a lint group.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"vec"}],"output":null}],[11,"register_llvm_pass","","Register an LLVM pass.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"register_attribute","","Register an attribute with an attribute type.",0,{"inputs":[{"name":"self"},{"name":"string"},{"name":"attributetype"}],"output":null}],[0,"load","rustc_plugin","Used by `rustc` when loading a plugin.",null,null],[3,"PluginRegistrar","rustc_plugin::load","",null,null],[12,"fun","","",1,null],[12,"args","","",1,null],[5,"load_plugins","","Read plugin metadata and dynamically load registrar functions.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crate"},{"name":"str"},{"name":"option"}],"output":{"name":"vec"}}],[6,"PluginRegistrarFun","","Pointer to a registrar function.",null,null],[0,"build","rustc_plugin","Used by `rustc` when compiling a plugin crate.",null,null],[5,"find_plugin_registrar","rustc_plugin::build","Find the function marked with `#[plugin_registrar]`, if any.",null,{"inputs":[{"name":"handler"},{"name":"map"}],"output":{"name":"option"}}]],"paths":[[3,"Registry"],[3,"PluginRegistrar"]]};
searchIndex["rustc_privacy"] = {"doc":"","items":[[5,"check_crate","rustc_privacy","",null,{"inputs":[{"name":"tyctxt"},{"name":"exportmap"}],"output":{"name":"accesslevels"}}],[0,"diagnostics","","",null,null],[17,"DIAGNOSTICS","","",null,null]],"paths":[]};
searchIndex["rustc_resolve"] = {"doc":"","items":[[3,"PerNS","rustc_resolve","",null,null],[3,"ModuleData","","One node in the tree of modules.",null,null],[3,"NameBinding","","",null,null],[3,"Resolver","","The main resolver class.",null,null],[12,"definitions","","",0,null],[12,"freevars","","",0,null],[12,"export_map","","",0,null],[12,"trait_map","","",0,null],[12,"make_glob_map","","",0,null],[12,"glob_map","","",0,null],[12,"maybe_unused_trait_imports","","",0,null],[12,"whitelisted_legacy_custom_derives","","",0,null],[12,"found_unresolved_macro","","",0,null],[3,"ResolverArenas","","",null,null],[4,"Namespace","","",null,null],[13,"TypeNS","","",1,null],[13,"ValueNS","","",1,null],[13,"MacroNS","","",1,null],[4,"MakeGlobMap","","",null,null],[13,"Yes","","",2,null],[13,"No","","",2,null],[11,"next_node_id","","",0,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"get_module_scope","","",0,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[11,"eliminate_crate_var","","",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"is_whitelisted_legacy_custom_derive","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"visit_expansion","","",0,null],[11,"add_builtin","","",0,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"rc"}],"output":null}],[11,"resolve_imports","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"find_legacy_attr_invoc","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"resolve_invoc","","",0,{"inputs":[{"name":"self"},{"name":"invocation"},{"name":"mark"},{"name":"bool"}],"output":{"name":"result"}}],[11,"resolve_macro","","",0,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"macrokind"},{"name":"bool"}],"output":{"name":"result"}}],[11,"resolve_lexical_macro_path_segment","","",0,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"namespace"},{"name":"option"}],"output":{"name":"result"}}],[11,"resolve_legacy_scope","","",0,{"inputs":[{"name":"self"},{"name":"cell"},{"name":"name"},{"name":"bool"}],"output":{"name":"option"}}],[11,"finalize_current_module_macro_resolutions","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"define_macro","","",0,{"inputs":[{"name":"self"},{"name":"item"},{"name":"legacyscope"}],"output":null}],[11,"macro_def_scope","","",0,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"module"}}],[11,"get_macro","","",0,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"rc"}}],[11,"populate_module_if_necessary","","Ensures that the reduced graph rooted at the given external module is built, building it if it is not.",0,{"inputs":[{"name":"self"},{"name":"module"}],"output":null}],[11,"resolve_ident_in_module","","Attempts to resolve `ident` in namespaces `ns` of `module`. Invariant: if `record_used` is `Some`, import resolution must be complete.",0,{"inputs":[{"name":"self"},{"name":"module"},{"name":"ident"},{"name":"namespace"},{"name":"bool"},{"name":"option"}],"output":{"name":"result"}}],[11,"add_import_directive","","",0,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"importdirectivesubclass"},{"name":"span"},{"name":"nodeid"},{"name":"visibility"},{"name":"mark"}],"output":null}],[11,"import","","",0,{"inputs":[{"name":"self"},{"name":"namebinding"},{"name":"importdirective"}],"output":{"name":"namebinding"}}],[11,"try_define","","",0,{"inputs":[{"name":"self"},{"name":"module"},{"name":"ident"},{"name":"namespace"},{"name":"namebinding"}],"output":{"name":"result"}}],[11,"ambiguity","","",0,{"inputs":[{"name":"self"},{"name":"namebinding"},{"name":"namebinding"}],"output":{"name":"namebinding"}}],[6,"ErrorMessage","","",null,null],[6,"Module","","",null,null],[17,"DIAGNOSTICS","","",null,null],[8,"ToNameBinding","","",null,null],[10,"to_name_binding","","",3,{"inputs":[{"name":"self"},{"name":"resolverarenas"}],"output":{"name":"namebinding"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"perns"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"perns"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"t"}}],[11,"index_mut","","",4,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"t"}}],[11,"visit_item","","",0,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_arm","","",0,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_block","","",0,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_expr","","",0,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_local","","",0,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_ty","","",0,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_poly_trait_ref","","",0,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant","","",0,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",0,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_fn","","",0,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_generics","","",0,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"namebinding"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"resolve_hir_path","","",0,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":null}],[11,"get_resolution","","",0,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"definitions","","",0,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"new","","",0,{"inputs":[{"name":"session"},{"name":"crate"},{"name":"makeglobmap"},{"name":"crateloader"},{"name":"resolverarenas"}],"output":{"name":"resolver"}}],[11,"arenas","","",0,{"inputs":[],"output":{"name":"resolverarenas"}}],[11,"resolve_crate","","Entry point to crate resolution.",0,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"with_module_lexical_scope","","",0,{"inputs":[{"name":"self"},{"name":"module"},{"name":"f"}],"output":{"name":"t"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"makeglobmap"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"makeglobmap"}}]],"paths":[[3,"Resolver"],[4,"Namespace"],[4,"MakeGlobMap"],[8,"ToNameBinding"],[3,"PerNS"],[3,"ModuleData"],[3,"NameBinding"]]};
searchIndex["rustc_save_analysis"] = {"doc":"","items":[[3,"CsvDumper","rustc_save_analysis","",null,null],[3,"JsonApiDumper","","",null,null],[3,"JsonDumper","","",null,null],[3,"CrateData","","",null,null],[12,"name","","",0,null],[12,"number","","",0,null],[12,"span","","",0,null],[3,"CratePreludeData","","Data for the prelude of a crate.",null,null],[12,"crate_name","","",1,null],[12,"crate_root","","",1,null],[12,"external_crates","","",1,null],[12,"span","","",1,null],[3,"ExternalCrateData","","Data for external crates in the prelude of a crate.",null,null],[12,"name","","",2,null],[12,"num","","",2,null],[12,"file_name","","",2,null],[3,"EnumData","","Data for enum declarations.",null,null],[12,"id","","",3,null],[12,"name","","",3,null],[12,"value","","",3,null],[12,"qualname","","",3,null],[12,"span","","",3,null],[12,"scope","","",3,null],[12,"variants","","",3,null],[12,"visibility","","",3,null],[12,"docs","","",3,null],[12,"sig","","",3,null],[12,"attributes","","",3,null],[3,"ExternCrateData","","Data for extern crates.",null,null],[12,"id","","",4,null],[12,"name","","",4,null],[12,"crate_num","","",4,null],[12,"location","","",4,null],[12,"span","","",4,null],[12,"scope","","",4,null],[3,"FunctionCallData","","Data about a function call.",null,null],[12,"span","","",5,null],[12,"scope","","",5,null],[12,"ref_id","","",5,null],[3,"FunctionData","","Data for all kinds of functions and methods.",null,null],[12,"id","","",6,null],[12,"name","","",6,null],[12,"qualname","","",6,null],[12,"declaration","","",6,null],[12,"span","","",6,null],[12,"scope","","",6,null],[12,"value","","",6,null],[12,"visibility","","",6,null],[12,"parent","","",6,null],[12,"docs","","",6,null],[12,"sig","","",6,null],[12,"attributes","","",6,null],[3,"FunctionRefData","","Data about a function call.",null,null],[12,"span","","",7,null],[12,"scope","","",7,null],[12,"ref_id","","",7,null],[3,"ImplData","","",null,null],[12,"id","","",8,null],[12,"span","","",8,null],[12,"scope","","",8,null],[12,"trait_ref","","",8,null],[12,"self_ref","","",8,null],[3,"ImplData2","","",null,null],[12,"id","","",9,null],[12,"span","","",9,null],[12,"scope","","",9,null],[12,"trait_ref","","",9,null],[12,"self_ref","","",9,null],[3,"InheritanceData","","",null,null],[12,"span","","",10,null],[12,"base_id","","",10,null],[12,"deriv_id","","",10,null],[3,"MacroData","","Data about a macro declaration.",null,null],[12,"span","","",11,null],[12,"name","","",11,null],[12,"qualname","","",11,null],[12,"docs","","",11,null],[3,"MacroUseData","","Data about a macro use.",null,null],[12,"span","","",12,null],[12,"name","","",12,null],[12,"qualname","","",12,null],[12,"callee_span","","",12,null],[12,"scope","","",12,null],[12,"imported","","",12,null],[3,"MethodCallData","","Data about a method call.",null,null],[12,"span","","",13,null],[12,"scope","","",13,null],[12,"ref_id","","",13,null],[12,"decl_id","","",13,null],[3,"MethodData","","Data for method declarations (methods with a body are treated as functions).",null,null],[12,"id","","",14,null],[12,"name","","",14,null],[12,"qualname","","",14,null],[12,"span","","",14,null],[12,"scope","","",14,null],[12,"value","","",14,null],[12,"decl_id","","",14,null],[12,"parent","","",14,null],[12,"visibility","","",14,null],[12,"docs","","",14,null],[12,"sig","","",14,null],[12,"attributes","","",14,null],[3,"ModData","","Data for modules.",null,null],[12,"id","","",15,null],[12,"name","","",15,null],[12,"qualname","","",15,null],[12,"span","","",15,null],[12,"scope","","",15,null],[12,"filename","","",15,null],[12,"items","","",15,null],[12,"visibility","","",15,null],[12,"docs","","",15,null],[12,"sig","","",15,null],[12,"attributes","","",15,null],[3,"ModRefData","","Data for a reference to a module.",null,null],[12,"span","","",16,null],[12,"scope","","",16,null],[12,"ref_id","","",16,null],[12,"qualname","","",16,null],[3,"StructData","","",null,null],[12,"span","","",17,null],[12,"name","","",17,null],[12,"id","","",17,null],[12,"ctor_id","","",17,null],[12,"qualname","","",17,null],[12,"scope","","",17,null],[12,"value","","",17,null],[12,"fields","","",17,null],[12,"visibility","","",17,null],[12,"docs","","",17,null],[12,"sig","","",17,null],[12,"attributes","","",17,null],[3,"StructVariantData","","",null,null],[12,"span","","",18,null],[12,"name","","",18,null],[12,"id","","",18,null],[12,"qualname","","",18,null],[12,"type_value","","",18,null],[12,"value","","",18,null],[12,"scope","","",18,null],[12,"parent","","",18,null],[12,"docs","","",18,null],[12,"sig","","",18,null],[12,"attributes","","",18,null],[3,"TraitData","","",null,null],[12,"span","","",19,null],[12,"id","","",19,null],[12,"name","","",19,null],[12,"qualname","","",19,null],[12,"scope","","",19,null],[12,"value","","",19,null],[12,"items","","",19,null],[12,"visibility","","",19,null],[12,"docs","","",19,null],[12,"sig","","",19,null],[12,"attributes","","",19,null],[3,"TupleVariantData","","",null,null],[12,"span","","",20,null],[12,"id","","",20,null],[12,"name","","",20,null],[12,"qualname","","",20,null],[12,"type_value","","",20,null],[12,"value","","",20,null],[12,"scope","","",20,null],[12,"parent","","",20,null],[12,"docs","","",20,null],[12,"sig","","",20,null],[12,"attributes","","",20,null],[3,"TypeDefData","","Data for a typedef.",null,null],[12,"id","","",21,null],[12,"name","","",21,null],[12,"span","","",21,null],[12,"qualname","","",21,null],[12,"value","","",21,null],[12,"visibility","","",21,null],[12,"parent","","",21,null],[12,"docs","","",21,null],[12,"sig","","",21,null],[12,"attributes","","",21,null],[3,"TypeRefData","","Data for a reference to a type or trait.",null,null],[12,"span","","",22,null],[12,"scope","","",22,null],[12,"ref_id","","",22,null],[12,"qualname","","",22,null],[3,"UseData","","",null,null],[12,"id","","",23,null],[12,"span","","",23,null],[12,"name","","",23,null],[12,"mod_id","","",23,null],[12,"scope","","",23,null],[12,"visibility","","",23,null],[3,"UseGlobData","","",null,null],[12,"id","","",24,null],[12,"span","","",24,null],[12,"names","","",24,null],[12,"scope","","",24,null],[12,"visibility","","",24,null],[3,"VariableData","","Data for local and global variables (consts and statics).",null,null],[12,"id","","",25,null],[12,"kind","","",25,null],[12,"name","","",25,null],[12,"qualname","","",25,null],[12,"span","","",25,null],[12,"scope","","",25,null],[12,"parent","","",25,null],[12,"value","","",25,null],[12,"type_value","","",25,null],[12,"visibility","","",25,null],[12,"docs","","",25,null],[12,"sig","","",25,null],[12,"attributes","","",25,null],[3,"VariableRefData","","Data for the use of some item (e.g., the use of a local variable, which will refer to that variables declaration (by ref_id)).",null,null],[12,"name","","",26,null],[12,"span","","",26,null],[12,"scope","","",26,null],[12,"ref_id","","",26,null],[3,"Signature","","Encodes information about the signature of a definition. This should have enough information to create a nice display about a definition without access to the source code.",null,null],[12,"span","","",27,null],[12,"text","","",27,null],[12,"ident_start","","",27,null],[12,"ident_end","","",27,null],[12,"defs","","",27,null],[12,"refs","","",27,null],[3,"SigElement","","An element of a signature. `start` and `end` are byte offsets into the `text` of the parent `Signature`.",null,null],[12,"id","","",28,null],[12,"start","","",28,null],[12,"end","","",28,null],[3,"DumpVisitor","","",null,null],[3,"SaveContext","","",null,null],[4,"Data","","Data for any entity in the Rust language. The actual data contained varies with the kind of entity being queried. See the nested structs for details.",null,null],[13,"EnumData","","Data for Enums.",29,null],[13,"ExternCrateData","","Data for extern crates.",29,null],[13,"FunctionCallData","","Data about a function call.",29,null],[13,"FunctionData","","Data for all kinds of functions and methods.",29,null],[13,"FunctionRefData","","Data about a function ref.",29,null],[13,"ImplData","","Data for impls.",29,null],[13,"InheritanceData","","Data for trait inheritance.",29,null],[13,"MacroData","","Data about a macro declaration.",29,null],[13,"MacroUseData","","Data about a macro use.",29,null],[13,"MethodCallData","","Data about a method call.",29,null],[13,"MethodData","","Data for method declarations (methods with a body are treated as functions).",29,null],[13,"ModData","","Data for modules.",29,null],[13,"ModRefData","","Data for a reference to a module.",29,null],[13,"StructData","","Data for a struct declaration.",29,null],[13,"StructVariantDat","","Data for a struct variant.",29,null],[13,"TraitData","","Data for a trait declaration.",29,null],[13,"TupleVariantData","","Data for a tuple variant.",29,null],[13,"TypeDefData","","Data for a typedef.",29,null],[13,"TypeRefData","","Data for a reference to a type or trait.",29,null],[13,"UseData","","Data for a use statement.",29,null],[13,"UseGlobData","","Data for a global use statement.",29,null],[13,"VariableData","","Data for local and global variables (consts and statics), and fields.",29,null],[13,"VariableRefData","","Data for the use of some variable (e.g., the use of a local variable, which will refere to that variables declaration).",29,null],[4,"Visibility","","",null,null],[13,"Public","","",30,null],[13,"Restricted","","",30,null],[13,"Inherited","","",30,null],[4,"VariableKind","","",null,null],[13,"Static","","",31,null],[13,"Const","","",31,null],[13,"Local","","",31,null],[13,"Field","","",31,null],[4,"Format","","",null,null],[13,"Csv","","",32,null],[13,"Json","","",32,null],[13,"JsonApi","","",32,null],[5,"process_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"crate"},{"name":"crateanalysis"},{"name":"str"},{"name":"option"},{"name":"format"}],"output":null}],[5,"generated_code","","",null,{"inputs":[{"name":"span"}],"output":{"name":"bool"}}],[11,"new","","",33,{"inputs":[{"name":"w"}],"output":{"name":"csvdumper"}}],[11,"crate_prelude","","",33,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"enum_data","","",33,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"extern_crate","","",33,{"inputs":[{"name":"self"},{"name":"externcratedata"}],"output":null}],[11,"impl_data","","",33,{"inputs":[{"name":"self"},{"name":"impldata"}],"output":null}],[11,"inheritance","","",33,{"inputs":[{"name":"self"},{"name":"inheritancedata"}],"output":null}],[11,"function","","",33,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"function_ref","","",33,{"inputs":[{"name":"self"},{"name":"functionrefdata"}],"output":null}],[11,"function_call","","",33,{"inputs":[{"name":"self"},{"name":"functioncalldata"}],"output":null}],[11,"method","","",33,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"method_call","","",33,{"inputs":[{"name":"self"},{"name":"methodcalldata"}],"output":null}],[11,"macro_data","","",33,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"macro_use","","",33,{"inputs":[{"name":"self"},{"name":"macrousedata"}],"output":null}],[11,"mod_data","","",33,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"mod_ref","","",33,{"inputs":[{"name":"self"},{"name":"modrefdata"}],"output":null}],[11,"struct_data","","",33,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"struct_variant","","",33,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"trait_data","","",33,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"tuple_variant","","",33,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"type_ref","","",33,{"inputs":[{"name":"self"},{"name":"typerefdata"}],"output":null}],[11,"typedef","","",33,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"use_data","","",33,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",33,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"variable","","",33,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"variable_ref","","",33,{"inputs":[{"name":"self"},{"name":"variablerefdata"}],"output":null}],[11,"new","","",34,{"inputs":[{"name":"w"}],"output":{"name":"jsonapidumper"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"crate_prelude","","",34,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"use_data","","",34,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",34,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"enum_data","","",34,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"tuple_variant","","",34,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"struct_variant","","",34,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"struct_data","","",34,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"trait_data","","",34,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"function","","",34,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"method","","",34,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"macro_data","","",34,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"mod_data","","",34,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"typedef","","",34,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"variable","","",34,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"impl_data","","",34,{"inputs":[{"name":"self"},{"name":"impldata"}],"output":null}],[11,"inheritance","","",34,{"inputs":[{"name":"self"},{"name":"inheritancedata"}],"output":null}],[11,"new","","",35,{"inputs":[{"name":"w"}],"output":{"name":"jsondumper"}}],[11,"drop","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"crate_prelude","","",35,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"extern_crate","","",35,{"inputs":[{"name":"self"},{"name":"externcratedata"}],"output":null}],[11,"use_data","","",35,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",35,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"enum_data","","",35,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"tuple_variant","","",35,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"struct_variant","","",35,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"struct_data","","",35,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"trait_data","","",35,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"function","","",35,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"method","","",35,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"macro_data","","",35,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"typedef","","",35,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"variable","","",35,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"function_ref","","",35,{"inputs":[{"name":"self"},{"name":"functionrefdata"}],"output":null}],[11,"function_call","","",35,{"inputs":[{"name":"self"},{"name":"functioncalldata"}],"output":null}],[11,"method_call","","",35,{"inputs":[{"name":"self"},{"name":"methodcalldata"}],"output":null}],[11,"mod_ref","","",35,{"inputs":[{"name":"self"},{"name":"modrefdata"}],"output":null}],[11,"type_ref","","",35,{"inputs":[{"name":"self"},{"name":"typerefdata"}],"output":null}],[11,"variable_ref","","",35,{"inputs":[{"name":"self"},{"name":"variablerefdata"}],"output":null}],[11,"macro_use","","",35,{"inputs":[{"name":"self"},{"name":"macrousedata"}],"output":null}],[11,"mod_data","","",35,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"impl_data","","",35,{"inputs":[{"name":"self"},{"name":"impldata"}],"output":null}],[11,"inheritance","","",35,{"inputs":[{"name":"self"},{"name":"inheritancedata"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"from","","",30,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"enumdata"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"functiondata"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"methoddata"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"typerefdata"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"sigelement"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","",36,{"inputs":[{"name":"savecontext"},{"name":"d"}],"output":{"name":"dumpvisitor"}}],[11,"dump_crate_info","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"crate"}],"output":null}],[11,"visit_item","","",36,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_generics","","",36,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty","","",36,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_expr","","",36,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_mac","","",36,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_pat","","",36,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_arm","","",36,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_path","","",36,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_stmt","","",36,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_local","","",36,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[0,"external_data","","",null,null],[3,"SpanData","rustc_save_analysis::external_data","",null,null],[12,"file_name","","",37,null],[12,"byte_start","","",37,null],[12,"byte_end","","",37,null],[12,"line_start","","1-based.",37,null],[12,"line_end","","",37,null],[12,"column_start","","1-based, character offset.",37,null],[12,"column_end","","",37,null],[3,"Attribute","","Represent an arbitrary attribute on a code element",null,null],[3,"CratePreludeData","","",null,null],[12,"crate_name","","",38,null],[12,"crate_root","","",38,null],[12,"external_crates","","",38,null],[12,"span","","",38,null],[3,"EnumData","","Data for enum declarations.",null,null],[12,"id","","",39,null],[12,"value","","",39,null],[12,"name","","",39,null],[12,"qualname","","",39,null],[12,"span","","",39,null],[12,"scope","","",39,null],[12,"variants","","",39,null],[12,"visibility","","",39,null],[12,"docs","","",39,null],[12,"sig","","",39,null],[12,"attributes","","",39,null],[3,"ExternCrateData","","Data for extern crates.",null,null],[12,"id","","",40,null],[12,"name","","",40,null],[12,"crate_num","","",40,null],[12,"location","","",40,null],[12,"span","","",40,null],[12,"scope","","",40,null],[3,"FunctionCallData","","Data about a function call.",null,null],[12,"span","","",41,null],[12,"scope","","",41,null],[12,"ref_id","","",41,null],[3,"FunctionData","","Data for all kinds of functions and methods.",null,null],[12,"id","","",42,null],[12,"name","","",42,null],[12,"qualname","","",42,null],[12,"declaration","","",42,null],[12,"span","","",42,null],[12,"scope","","",42,null],[12,"value","","",42,null],[12,"visibility","","",42,null],[12,"parent","","",42,null],[12,"docs","","",42,null],[12,"sig","","",42,null],[12,"attributes","","",42,null],[3,"FunctionRefData","","Data about a function call.",null,null],[12,"span","","",43,null],[12,"scope","","",43,null],[12,"ref_id","","",43,null],[3,"ImplData","","",null,null],[12,"id","","",44,null],[12,"span","","",44,null],[12,"scope","","",44,null],[12,"trait_ref","","",44,null],[12,"self_ref","","",44,null],[3,"InheritanceData","","",null,null],[12,"span","","",45,null],[12,"base_id","","",45,null],[12,"deriv_id","","",45,null],[3,"MacroData","","Data about a macro declaration.",null,null],[12,"span","","",46,null],[12,"name","","",46,null],[12,"qualname","","",46,null],[12,"docs","","",46,null],[3,"MacroUseData","","Data about a macro use.",null,null],[12,"span","","",47,null],[12,"name","","",47,null],[12,"qualname","","",47,null],[12,"callee_span","","",47,null],[12,"scope","","",47,null],[3,"MethodCallData","","Data about a method call.",null,null],[12,"span","","",48,null],[12,"scope","","",48,null],[12,"ref_id","","",48,null],[12,"decl_id","","",48,null],[3,"MethodData","","Data for method declarations (methods with a body are treated as functions).",null,null],[12,"id","","",49,null],[12,"name","","",49,null],[12,"qualname","","",49,null],[12,"span","","",49,null],[12,"scope","","",49,null],[12,"value","","",49,null],[12,"decl_id","","",49,null],[12,"visibility","","",49,null],[12,"parent","","",49,null],[12,"docs","","",49,null],[12,"sig","","",49,null],[12,"attributes","","",49,null],[3,"ModData","","Data for modules.",null,null],[12,"id","","",50,null],[12,"name","","",50,null],[12,"qualname","","",50,null],[12,"span","","",50,null],[12,"scope","","",50,null],[12,"filename","","",50,null],[12,"items","","",50,null],[12,"visibility","","",50,null],[12,"docs","","",50,null],[12,"sig","","",50,null],[12,"attributes","","",50,null],[3,"ModRefData","","Data for a reference to a module.",null,null],[12,"span","","",51,null],[12,"scope","","",51,null],[12,"ref_id","","",51,null],[12,"qualname","","",51,null],[3,"StructData","","",null,null],[12,"span","","",52,null],[12,"name","","",52,null],[12,"id","","",52,null],[12,"ctor_id","","",52,null],[12,"qualname","","",52,null],[12,"scope","","",52,null],[12,"value","","",52,null],[12,"fields","","",52,null],[12,"visibility","","",52,null],[12,"docs","","",52,null],[12,"sig","","",52,null],[12,"attributes","","",52,null],[3,"StructVariantData","","",null,null],[12,"span","","",53,null],[12,"name","","",53,null],[12,"id","","",53,null],[12,"qualname","","",53,null],[12,"type_value","","",53,null],[12,"value","","",53,null],[12,"scope","","",53,null],[12,"parent","","",53,null],[12,"docs","","",53,null],[12,"sig","","",53,null],[12,"attributes","","",53,null],[3,"TraitData","","",null,null],[12,"span","","",54,null],[12,"name","","",54,null],[12,"id","","",54,null],[12,"qualname","","",54,null],[12,"scope","","",54,null],[12,"value","","",54,null],[12,"items","","",54,null],[12,"visibility","","",54,null],[12,"docs","","",54,null],[12,"sig","","",54,null],[12,"attributes","","",54,null],[3,"TupleVariantData","","",null,null],[12,"span","","",55,null],[12,"id","","",55,null],[12,"name","","",55,null],[12,"qualname","","",55,null],[12,"type_value","","",55,null],[12,"value","","",55,null],[12,"scope","","",55,null],[12,"parent","","",55,null],[12,"docs","","",55,null],[12,"sig","","",55,null],[12,"attributes","","",55,null],[3,"TypeDefData","","Data for a typedef.",null,null],[12,"id","","",56,null],[12,"name","","",56,null],[12,"span","","",56,null],[12,"qualname","","",56,null],[12,"value","","",56,null],[12,"visibility","","",56,null],[12,"parent","","",56,null],[12,"docs","","",56,null],[12,"sig","","",56,null],[12,"attributes","","",56,null],[3,"TypeRefData","","Data for a reference to a type or trait.",null,null],[12,"span","","",57,null],[12,"scope","","",57,null],[12,"ref_id","","",57,null],[12,"qualname","","",57,null],[3,"UseData","","",null,null],[12,"id","","",58,null],[12,"span","","",58,null],[12,"name","","",58,null],[12,"mod_id","","",58,null],[12,"scope","","",58,null],[12,"visibility","","",58,null],[3,"UseGlobData","","",null,null],[12,"id","","",59,null],[12,"span","","",59,null],[12,"names","","",59,null],[12,"scope","","",59,null],[12,"visibility","","",59,null],[3,"VariableData","","Data for local and global variables (consts and statics).",null,null],[12,"id","","",60,null],[12,"name","","",60,null],[12,"kind","","",60,null],[12,"qualname","","",60,null],[12,"span","","",60,null],[12,"scope","","",60,null],[12,"value","","",60,null],[12,"type_value","","",60,null],[12,"parent","","",60,null],[12,"visibility","","",60,null],[12,"docs","","",60,null],[12,"sig","","",60,null],[12,"attributes","","",60,null],[3,"VariableRefData","","Data for the use of some item (e.g., the use of a local variable, which will refer to that variables declaration (by ref_id)).",null,null],[12,"name","","",61,null],[12,"span","","",61,null],[12,"scope","","",61,null],[12,"ref_id","","",61,null],[3,"Signature","","",null,null],[12,"span","","",62,null],[12,"text","","",62,null],[12,"ident_start","","",62,null],[12,"ident_end","","",62,null],[12,"defs","","",62,null],[12,"refs","","",62,null],[5,"make_def_id","","",null,{"inputs":[{"name":"nodeid"},{"name":"map"}],"output":{"name":"defid"}}],[5,"null_def_id","","",null,{"inputs":[],"output":{"name":"defid"}}],[8,"Lower","","",null,null],[16,"Target","","",63,null],[10,"lower","","",63,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_span","","",37,{"inputs":[{"name":"span"},{"name":"codemap"}],"output":{"name":"spandata"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",1,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"cratepreludedata"}}],[11,"clone","rustc_save_analysis::external_data","",39,{"inputs":[{"name":"self"}],"output":{"name":"enumdata"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",3,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"enumdata"}}],[11,"fmt","rustc_save_analysis::external_data","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",4,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"externcratedata"}}],[11,"fmt","rustc_save_analysis::external_data","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",5,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"functioncalldata"}}],[11,"clone","rustc_save_analysis::external_data","",42,{"inputs":[{"name":"self"}],"output":{"name":"functiondata"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",6,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"functiondata"}}],[11,"fmt","rustc_save_analysis::external_data","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",7,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"functionrefdata"}}],[11,"fmt","rustc_save_analysis::external_data","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",8,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"impldata"}}],[11,"fmt","rustc_save_analysis::external_data","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",10,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"inheritancedata"}}],[11,"fmt","rustc_save_analysis::external_data","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",11,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"macrodata"}}],[11,"fmt","rustc_save_analysis::external_data","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",12,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"macrousedata"}}],[11,"fmt","rustc_save_analysis::external_data","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",13,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"methodcalldata"}}],[11,"clone","rustc_save_analysis::external_data","",49,{"inputs":[{"name":"self"}],"output":{"name":"methoddata"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",14,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"methoddata"}}],[11,"fmt","rustc_save_analysis::external_data","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",15,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"moddata"}}],[11,"fmt","rustc_save_analysis::external_data","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",16,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"modrefdata"}}],[11,"fmt","rustc_save_analysis::external_data","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",17,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"structdata"}}],[11,"fmt","rustc_save_analysis::external_data","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",18,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"structvariantdata"}}],[11,"fmt","rustc_save_analysis::external_data","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",19,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"traitdata"}}],[11,"fmt","rustc_save_analysis::external_data","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",20,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"tuplevariantdata"}}],[11,"fmt","rustc_save_analysis::external_data","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",21,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"typedefdata"}}],[11,"clone","rustc_save_analysis::external_data","",57,{"inputs":[{"name":"self"}],"output":{"name":"typerefdata"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",22,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"typerefdata"}}],[11,"fmt","rustc_save_analysis::external_data","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",23,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"usedata"}}],[11,"fmt","rustc_save_analysis::external_data","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",24,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"useglobdata"}}],[11,"fmt","rustc_save_analysis::external_data","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",25,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"variabledata"}}],[11,"fmt","rustc_save_analysis::external_data","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",26,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"variablerefdata"}}],[11,"clone","rustc_save_analysis::external_data","",62,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"lower","rustc_save_analysis","",27,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"signature"}}],[0,"span_utils","","",null,null],[3,"SpanUtils","rustc_save_analysis::span_utils","",null,null],[12,"sess","","",65,null],[12,"err_count","","",65,null],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"spanutils"}}],[11,"new","","",65,{"inputs":[{"name":"session"}],"output":{"name":"spanutils"}}],[11,"make_path_string","","",65,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"snippet","","",65,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"retokenise_span","","",65,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"stringreader"}}],[11,"span_for_last_ident","","",65,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_for_first_ident","","",65,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"sub_span_for_meth_name","","",65,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"sub_span_for_type_name","","",65,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"spans_with_brackets","","",65,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"},{"name":"isize"}],"output":{"name":"vec"}}],[11,"signature_string_for_span","","`span` must be the span for an item such as a function or struct. This function returns the program text from the start of the span until the end of the 'signature' part, that is up to, but not including an opening brace or semicolon.",65,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"sub_span_before_token","","",65,{"inputs":[{"name":"self"},{"name":"span"},{"name":"token"}],"output":{"name":"option"}}],[11,"sub_span_of_token","","",65,{"inputs":[{"name":"self"},{"name":"span"},{"name":"token"}],"output":{"name":"option"}}],[11,"sub_span_after_keyword","","",65,{"inputs":[{"name":"self"},{"name":"span"},{"name":"keyword"}],"output":{"name":"option"}}],[11,"sub_span_after_token","","",65,{"inputs":[{"name":"self"},{"name":"span"},{"name":"token"}],"output":{"name":"option"}}],[11,"spans_for_path_segments","","",65,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"vec"}}],[11,"spans_for_ty_params","","",65,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"vec"}}],[11,"report_span_err","","",65,{"inputs":[{"name":"self"},{"name":"str"},{"name":"span"}],"output":null}],[11,"span_for_macro_def_name","","",65,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_for_macro_use_name","","",65,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"filter_generated","","Return true if the span is generated code, and it is not a subspan of the root callsite.",65,{"inputs":[{"name":"self"},{"name":"option"},{"name":"span"}],"output":{"name":"bool"}}],[0,"recorder","rustc_save_analysis","",null,null],[4,"Row","rustc_save_analysis::recorder","",null,null],[13,"TypeRef","","",66,null],[13,"ModRef","","",66,null],[13,"VarRef","","",66,null],[13,"FnRef","","",66,null],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[8,"Dump","rustc_save_analysis","",null,null],[11,"crate_prelude","","",67,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"enum_data","","",67,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"extern_crate","","",67,{"inputs":[{"name":"self"},{"name":"externcratedata"}],"output":null}],[11,"impl_data","","",67,{"inputs":[{"name":"self"},{"name":"impldata"}],"output":null}],[11,"inheritance","","",67,{"inputs":[{"name":"self"},{"name":"inheritancedata"}],"output":null}],[11,"function","","",67,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"function_ref","","",67,{"inputs":[{"name":"self"},{"name":"functionrefdata"}],"output":null}],[11,"function_call","","",67,{"inputs":[{"name":"self"},{"name":"functioncalldata"}],"output":null}],[11,"method","","",67,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"method_call","","",67,{"inputs":[{"name":"self"},{"name":"methodcalldata"}],"output":null}],[11,"macro_data","","",67,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"macro_use","","",67,{"inputs":[{"name":"self"},{"name":"macrousedata"}],"output":null}],[11,"mod_data","","",67,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"mod_ref","","",67,{"inputs":[{"name":"self"},{"name":"modrefdata"}],"output":null}],[11,"struct_data","","",67,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"struct_variant","","",67,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"trait_data","","",67,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"tuple_variant","","",67,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"type_ref","","",67,{"inputs":[{"name":"self"},{"name":"typerefdata"}],"output":null}],[11,"typedef","","",67,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"use_data","","",67,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",67,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"variable","","",67,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"variable_ref","","",67,{"inputs":[{"name":"self"},{"name":"variablerefdata"}],"output":null}],[11,"get_external_crates","","",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_item_data","","",68,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"option"}}],[11,"get_field_data","","",68,{"inputs":[{"name":"self"},{"name":"structfield"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_method_data","","",68,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"name"},{"name":"span"}],"output":{"name":"option"}}],[11,"get_trait_ref_data","","",68,{"inputs":[{"name":"self"},{"name":"traitref"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_expr_data","","",68,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"option"}}],[11,"get_path_def","","",68,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"def"}}],[11,"get_path_data","","",68,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"path"}],"output":{"name":"option"}}],[11,"get_field_ref_data","","",68,{"inputs":[{"name":"self"},{"name":"field"},{"name":"variantdef"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_macro_use_data","","Attempt to return MacroUseData for any AST node.",68,{"inputs":[{"name":"self"},{"name":"span"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_data_for_id","","",68,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"data"}}],[11,"enclosing_scope","","",68,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"crate_prelude","","",67,{"inputs":[{"name":"self"},{"name":"cratepreludedata"}],"output":null}],[11,"enum_data","","",67,{"inputs":[{"name":"self"},{"name":"enumdata"}],"output":null}],[11,"extern_crate","","",67,{"inputs":[{"name":"self"},{"name":"externcratedata"}],"output":null}],[11,"impl_data","","",67,{"inputs":[{"name":"self"},{"name":"impldata"}],"output":null}],[11,"inheritance","","",67,{"inputs":[{"name":"self"},{"name":"inheritancedata"}],"output":null}],[11,"function","","",67,{"inputs":[{"name":"self"},{"name":"functiondata"}],"output":null}],[11,"function_ref","","",67,{"inputs":[{"name":"self"},{"name":"functionrefdata"}],"output":null}],[11,"function_call","","",67,{"inputs":[{"name":"self"},{"name":"functioncalldata"}],"output":null}],[11,"method","","",67,{"inputs":[{"name":"self"},{"name":"methoddata"}],"output":null}],[11,"method_call","","",67,{"inputs":[{"name":"self"},{"name":"methodcalldata"}],"output":null}],[11,"macro_data","","",67,{"inputs":[{"name":"self"},{"name":"macrodata"}],"output":null}],[11,"macro_use","","",67,{"inputs":[{"name":"self"},{"name":"macrousedata"}],"output":null}],[11,"mod_data","","",67,{"inputs":[{"name":"self"},{"name":"moddata"}],"output":null}],[11,"mod_ref","","",67,{"inputs":[{"name":"self"},{"name":"modrefdata"}],"output":null}],[11,"struct_data","","",67,{"inputs":[{"name":"self"},{"name":"structdata"}],"output":null}],[11,"struct_variant","","",67,{"inputs":[{"name":"self"},{"name":"structvariantdata"}],"output":null}],[11,"trait_data","","",67,{"inputs":[{"name":"self"},{"name":"traitdata"}],"output":null}],[11,"tuple_variant","","",67,{"inputs":[{"name":"self"},{"name":"tuplevariantdata"}],"output":null}],[11,"type_ref","","",67,{"inputs":[{"name":"self"},{"name":"typerefdata"}],"output":null}],[11,"typedef","","",67,{"inputs":[{"name":"self"},{"name":"typedefdata"}],"output":null}],[11,"use_data","","",67,{"inputs":[{"name":"self"},{"name":"usedata"}],"output":null}],[11,"use_glob","","",67,{"inputs":[{"name":"self"},{"name":"useglobdata"}],"output":null}],[11,"variable","","",67,{"inputs":[{"name":"self"},{"name":"variabledata"}],"output":null}],[11,"variable_ref","","",67,{"inputs":[{"name":"self"},{"name":"variablerefdata"}],"output":null}]],"paths":[[3,"CrateData"],[3,"CratePreludeData"],[3,"ExternalCrateData"],[3,"EnumData"],[3,"ExternCrateData"],[3,"FunctionCallData"],[3,"FunctionData"],[3,"FunctionRefData"],[3,"ImplData"],[3,"ImplData2"],[3,"InheritanceData"],[3,"MacroData"],[3,"MacroUseData"],[3,"MethodCallData"],[3,"MethodData"],[3,"ModData"],[3,"ModRefData"],[3,"StructData"],[3,"StructVariantData"],[3,"TraitData"],[3,"TupleVariantData"],[3,"TypeDefData"],[3,"TypeRefData"],[3,"UseData"],[3,"UseGlobData"],[3,"VariableData"],[3,"VariableRefData"],[3,"Signature"],[3,"SigElement"],[4,"Data"],[4,"Visibility"],[4,"VariableKind"],[4,"Format"],[3,"CsvDumper"],[3,"JsonApiDumper"],[3,"JsonDumper"],[3,"DumpVisitor"],[3,"SpanData"],[3,"CratePreludeData"],[3,"EnumData"],[3,"ExternCrateData"],[3,"FunctionCallData"],[3,"FunctionData"],[3,"FunctionRefData"],[3,"ImplData"],[3,"InheritanceData"],[3,"MacroData"],[3,"MacroUseData"],[3,"MethodCallData"],[3,"MethodData"],[3,"ModData"],[3,"ModRefData"],[3,"StructData"],[3,"StructVariantData"],[3,"TraitData"],[3,"TupleVariantData"],[3,"TypeDefData"],[3,"TypeRefData"],[3,"UseData"],[3,"UseGlobData"],[3,"VariableData"],[3,"VariableRefData"],[3,"Signature"],[8,"Lower"],[3,"Attribute"],[3,"SpanUtils"],[4,"Row"],[8,"Dump"],[3,"SaveContext"]]};
searchIndex["rustc_trans"] = {"doc":"The Rust compiler.","items":[[0,"session","rustc_trans","",null,null],[0,"config","rustc_trans::session","Contains infrastructure for configuring the compiler, including parsing command line options.",null,null],[3,"Config","rustc_trans::session::config","",null,null],[12,"target","","",0,null],[12,"int_type","","",0,null],[12,"uint_type","","",0,null],[4,"Sanitizer","","",null,null],[13,"Address","","",1,null],[13,"Leak","","",1,null],[13,"Memory","","",1,null],[13,"Thread","","",1,null],[4,"OptLevel","","",null,null],[13,"No","","",2,null],[13,"Less","","",2,null],[13,"Default","","",2,null],[13,"Aggressive","","",2,null],[13,"Size","","",2,null],[13,"SizeMin","","",2,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",3,null],[13,"LimitedDebugInfo","","",3,null],[13,"FullDebugInfo","","",3,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",4,null],[13,"Assembly","","",4,null],[13,"LlvmAssembly","","",4,null],[13,"Metadata","","",4,null],[13,"Object","","",4,null],[13,"Exe","","",4,null],[13,"DepInfo","","",4,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",5,null],[13,"Json","","",5,null],[3,"OutputTypes","","",null,null],[3,"Externs","","",null,null],[3,"Options","","",null,null],[12,"crate_types","","",6,null],[12,"optimize","","",6,null],[12,"debug_assertions","","",6,null],[12,"debuginfo","","",6,null],[12,"lint_opts","","",6,null],[12,"lint_cap","","",6,null],[12,"describe_lints","","",6,null],[12,"output_types","","",6,null],[12,"search_paths","","",6,null],[12,"libs","","",6,null],[12,"maybe_sysroot","","",6,null],[12,"target_triple","","",6,null],[12,"test","","",6,null],[12,"error_format","","",6,null],[12,"incremental","","",6,null],[12,"debugging_opts","","",6,null],[12,"prints","","",6,null],[12,"cg","","",6,null],[12,"externs","","",6,null],[12,"crate_name","","",6,null],[12,"alt_std_name","","",6,null],[12,"unstable_features","","",6,null],[12,"actually_rustdoc","","",6,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",7,null],[13,"Sysroot","","",7,null],[13,"CrateName","","",7,null],[13,"Cfg","","",7,null],[13,"TargetList","","",7,null],[13,"TargetCPUs","","",7,null],[13,"TargetFeatures","","",7,null],[13,"RelocationModels","","",7,null],[13,"CodeModels","","",7,null],[13,"TargetSpec","","",7,null],[4,"Input","","",null,null],[13,"File","","Load source from file",8,null],[13,"Str","","",8,null],[12,"name","rustc_trans::session::config::Input","String that is shown in place of a filename",8,null],[12,"input","","Anonymous source string",8,null],[3,"OutputFilenames","rustc_trans::session::config","",null,null],[12,"out_directory","","",9,null],[12,"out_filestem","","",9,null],[12,"single_output_file","","",9,null],[12,"extra","","",9,null],[12,"outputs","","",9,null],[17,"NUMBERED_CODEGEN_UNIT_MARKER","","Codegen unit names generated by the numbered naming scheme will contain this marker right before the index of the codegen unit.",null,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[4,"EntryFnType","","",null,null],[13,"EntryMain","","",10,null],[13,"EntryStart","","",10,null],[13,"EntryNone","","",10,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",11,null],[13,"CrateTypeDylib","","",11,null],[13,"CrateTypeRlib","","",11,null],[13,"CrateTypeStaticlib","","",11,null],[13,"CrateTypeCdylib","","",11,null],[13,"CrateTypeProcMacro","","",11,null],[4,"Passes","","",null,null],[13,"SomePasses","","",12,null],[13,"AllPasses","","",12,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",13,null],[12,"linker","","",13,null],[12,"link_arg","","",13,null],[12,"link_args","","",13,null],[12,"link_dead_code","","",13,null],[12,"lto","","",13,null],[12,"target_cpu","","",13,null],[12,"target_feature","","",13,null],[12,"passes","","",13,null],[12,"llvm_args","","",13,null],[12,"save_temps","","",13,null],[12,"rpath","","",13,null],[12,"overflow_checks","","",13,null],[12,"no_prepopulate_passes","","",13,null],[12,"no_vectorize_loops","","",13,null],[12,"no_vectorize_slp","","",13,null],[12,"soft_float","","",13,null],[12,"prefer_dynamic","","",13,null],[12,"no_integrated_as","","",13,null],[12,"no_redzone","","",13,null],[12,"relocation_model","","",13,null],[12,"code_model","","",13,null],[12,"metadata","","",13,null],[12,"extra_filename","","",13,null],[12,"codegen_units","","",13,null],[12,"remark","","",13,null],[12,"no_stack_check","","",13,null],[12,"debuginfo","","",13,null],[12,"opt_level","","",13,null],[12,"debug_assertions","","",13,null],[12,"inline_threshold","","",13,null],[12,"panic","","",13,null],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[6,"CodegenSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",14,null],[12,"time_passes","","",14,null],[12,"count_llvm_insns","","",14,null],[12,"time_llvm_passes","","",14,null],[12,"input_stats","","",14,null],[12,"trans_stats","","",14,null],[12,"asm_comments","","",14,null],[12,"no_verify","","",14,null],[12,"borrowck_stats","","",14,null],[12,"no_landing_pads","","",14,null],[12,"debug_llvm","","",14,null],[12,"meta_stats","","",14,null],[12,"print_link_args","","",14,null],[12,"print_llvm_passes","","",14,null],[12,"ast_json","","",14,null],[12,"ast_json_noexpand","","",14,null],[12,"ls","","",14,null],[12,"save_analysis","","",14,null],[12,"save_analysis_csv","","",14,null],[12,"save_analysis_api","","",14,null],[12,"print_move_fragments","","",14,null],[12,"flowgraph_print_loans","","",14,null],[12,"flowgraph_print_moves","","",14,null],[12,"flowgraph_print_assigns","","",14,null],[12,"flowgraph_print_all","","",14,null],[12,"print_region_graph","","",14,null],[12,"parse_only","","",14,null],[12,"no_trans","","",14,null],[12,"treat_err_as_bug","","",14,null],[12,"continue_parse_after_error","","",14,null],[12,"incremental","","",14,null],[12,"incremental_cc","","",14,null],[12,"incremental_info","","",14,null],[12,"incremental_dump_hash","","",14,null],[12,"dump_dep_graph","","",14,null],[12,"query_dep_graph","","",14,null],[12,"no_analysis","","",14,null],[12,"extra_plugins","","",14,null],[12,"unstable_options","","",14,null],[12,"force_overflow_checks","","",14,null],[12,"trace_macros","","",14,null],[12,"debug_macros","","",14,null],[12,"enable_nonzeroing_move_hints","","",14,null],[12,"keep_hygiene_data","","",14,null],[12,"keep_ast","","",14,null],[12,"show_span","","",14,null],[12,"print_type_sizes","","",14,null],[12,"print_trans_items","","",14,null],[12,"mir_opt_level","","",14,null],[12,"dump_mir","","",14,null],[12,"dump_mir_dir","","",14,null],[12,"perf_stats","","",14,null],[12,"hir_stats","","",14,null],[12,"mir_stats","","",14,null],[12,"always_encode_mir","","",14,null],[12,"osx_rpath_install_name","","",14,null],[12,"sanitizer","","",14,null],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[6,"DebuggingSetter","","",null,null],[17,"DB_OPTIONS","","",null,null],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"hashset"}}],[5,"build_configuration","","",null,{"inputs":[{"name":"session"},{"name":"hashset"}],"output":{"name":"hashset"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[4,"OptionStability","","",null,null],[13,"Stable","","",15,null],[13,"UnstableButNotReally","","",15,null],[13,"Unstable","","",15,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",16,null],[12,"stability","","",16,null],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"hashset"}}],[5,"build_session_options_and_crate_config","","",null,null],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc_trans::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[0,"filesearch","rustc_trans::session","",null,null],[4,"FileMatch","rustc_trans::session::filesearch","",null,null],[13,"FileMatches","","",17,null],[13,"FileDoesntMatch","","",17,null],[3,"FileSearch","","",null,null],[12,"sysroot","","",18,null],[12,"search_paths","","",18,null],[12,"triple","","",18,null],[12,"kind","","",18,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[0,"search_paths","rustc_trans::session","",null,null],[3,"SearchPaths","rustc_trans::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",19,null],[13,"Crate","","",19,null],[13,"Dependency","","",19,null],[13,"Framework","","",19,null],[13,"ExternFlag","","",19,null],[13,"All","","",19,null],[3,"Session","rustc_trans::session","",null,null],[12,"dep_graph","","",20,null],[12,"target","","",20,null],[12,"host","","",20,null],[12,"opts","","",20,null],[12,"cstore","","",20,null],[12,"parse_sess","","",20,null],[12,"entry_fn","","",20,null],[12,"entry_type","","",20,null],[12,"plugin_registrar_fn","","",20,null],[12,"derive_registrar_fn","","",20,null],[12,"default_sysroot","","",20,null],[12,"local_crate_source_file","","",20,null],[12,"working_dir","","",20,null],[12,"lint_store","","",20,null],[12,"lints","","",20,null],[12,"one_time_diagnostics","","Set of (LintId, span, message) tuples tracking lint (sub)diagnostics that have been set once, but should not be set again, in order to avoid redundantly verbose output (Issue #24690).",20,null],[12,"plugin_llvm_passes","","",20,null],[12,"mir_passes","","",20,null],[12,"plugin_attributes","","",20,null],[12,"crate_types","","",20,null],[12,"dependency_formats","","",20,null],[12,"crate_disambiguator","","",20,null],[12,"features","","",20,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization.",20,null],[12,"type_length_limit","","The maximum length of types during monomorphization.",20,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime dependency if it didn't already find one, and this tracks what was injected.",20,null],[12,"injected_panic_runtime","","",20,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of the localized span for the macro body) to the macro name and defintion span in the source crate.",20,null],[12,"perf_stats","","Some measurements that are being gathered during compilation.",20,null],[12,"code_stats","","Data about code being compiled, gathered during compilation.",20,null],[3,"PerfStats","","",null,null],[12,"svh_time","","",21,null],[12,"incr_comp_hashes_time","","",21,null],[12,"incr_comp_hashes_count","","",21,null],[12,"incr_comp_bytes_hashed","","",21,null],[12,"symbol_hash_time","","",21,null],[12,"decode_def_path_tables_time","","",21,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"},{"name":"option"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[4,"IncrCompSession","","Holds data on the current incremental compilation session, if there is one.",null,null],[13,"NotInitialized","","",22,null],[13,"Active","","",22,null],[12,"session_directory","rustc_trans::session::IncrCompSession","",22,null],[12,"lock_file","","",22,null],[13,"Finalized","rustc_trans::session","",22,null],[12,"session_directory","rustc_trans::session::IncrCompSession","",22,null],[13,"InvalidBecauseOfErrors","rustc_trans::session","",22,null],[12,"session_directory","rustc_trans::session::IncrCompSession","",22,null],[5,"early_error","rustc_trans::session","",null,null],[5,"early_warn","","",null,null],[6,"CompileResult","","",null,null],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[3,"TypeSizeInfo","","",null,null],[12,"kind","","",23,null],[12,"type_description","","",23,null],[12,"align","","",23,null],[12,"overall_size","","",23,null],[12,"opt_discr_size","","",23,null],[12,"variants","","",23,null],[3,"CodeStats","","",null,null],[4,"SizeKind","","",null,null],[13,"Exact","","",24,null],[13,"Min","","",24,null],[3,"FieldInfo","","",null,null],[12,"name","","",25,null],[12,"offset","","",25,null],[12,"size","","",25,null],[12,"align","","",25,null],[3,"VariantInfo","","",null,null],[12,"name","","",26,null],[12,"kind","","",26,null],[12,"size","","",26,null],[12,"align","","",26,null],[12,"fields","","",26,null],[4,"DataTypeKind","","",null,null],[13,"Struct","","",27,null],[13,"Union","","",27,null],[13,"Enum","","",27,null],[13,"Closure","","",27,null],[0,"middle","rustc_trans","",null,null],[0,"expr_use_visitor","rustc_trans::middle","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_trans::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",28,null],[10,"matched_pat","","",28,null],[10,"consume_pat","","",28,null],[10,"borrow","","",28,null],[10,"decl_without_init","","",28,null],[10,"mutate","","",28,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",29,null],[13,"AddrOf","","",29,null],[13,"AutoRef","","",29,null],[13,"AutoUnsafe","","",29,null],[13,"RefBinding","","",29,null],[13,"OverloadedOperator","","",29,null],[13,"ClosureInvocation","","",29,null],[13,"ForLoop","","",29,null],[13,"MatchDiscriminant","","",29,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",30,null],[13,"Move","","",30,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",31,null],[13,"PatBindingMove","","",31,null],[13,"CaptureMove","","",31,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",32,null],[13,"BorrowingMatch","","",32,null],[13,"CopyingMatch","","",32,null],[13,"MovingMatch","","",32,null],[4,"MutateMode","","",null,null],[13,"Init","","",33,null],[13,"JustWrite","","",33,null],[13,"WriteAndRead","","",33,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_trans::middle","",null,null],[4,"ConstVal","rustc_trans::middle::const_val","",null,null],[13,"Float","","",34,null],[13,"Integral","","",34,null],[13,"Str","","",34,null],[13,"ByteStr","","",34,null],[13,"Bool","","",34,null],[13,"Function","","",34,null],[13,"Struct","","",34,null],[13,"Tuple","","",34,null],[13,"Array","","",34,null],[13,"Repeat","","",34,null],[13,"Char","","",34,null],[4,"ConstInt","","",null,null],[13,"I8","","",35,null],[13,"I16","","",35,null],[13,"I32","","",35,null],[13,"I64","","",35,null],[13,"I128","","",35,null],[13,"Isize","","",35,null],[13,"U8","","",35,null],[13,"U16","","",35,null],[13,"U32","","",35,null],[13,"U64","","",35,null],[13,"U128","","",35,null],[13,"Usize","","",35,null],[0,"cstore","rustc_trans::middle","",null,null],[3,"LinkMeta","rustc_trans::middle::cstore","",null,null],[12,"crate_name","","",36,null],[12,"crate_hash","","",36,null],[3,"CrateSource","","",null,null],[12,"dylib","","",37,null],[12,"rlib","","",37,null],[12,"rmeta","","",37,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",38,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",38,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",38,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",38,null],[4,"LibSource","","",null,null],[13,"Some","","",39,null],[13,"MetadataOnly","","",39,null],[13,"None","","",39,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",40,null],[13,"RequireStatic","","",40,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",41,null],[13,"NativeStaticNobundle","","",41,null],[13,"NativeFramework","","",41,null],[13,"NativeUnknown","","",41,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",42,null],[12,"name","","",42,null],[12,"cfg","","",42,null],[12,"foreign_items","","",42,null],[4,"LoadedMacro","","",null,null],[13,"MacroDef","","",43,null],[13,"ProcMacro","","",43,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",44,null],[12,"span","","span of the extern crate that caused this to be loaded",44,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",44,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",44,null],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"crate_data_as_rc_any","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[10,"describe_def","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"def_span","","",45,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[10,"stability","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"deprecation","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"visibility","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"visible_parent_map","","",45,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[10,"item_generics_cloned","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"item_attrs","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"fn_arg_names","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"inherent_implementations_for_type","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"implementations_of_trait","","",45,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[10,"impl_polarity","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[10,"impl_parent","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"trait_of_item","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"associated_item_cloned","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[10,"is_const_fn","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_default_impl","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_foreign_item","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_dllimport_foreign_item","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_statically_included_foreign_item","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_exported_symbol","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"dylib_dependency_formats","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"dep_kind","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"export_macros","","",45,null],[10,"lang_items","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"missing_lang_items","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_staged_api","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_allocator","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_panic_runtime","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_compiler_builtins","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_sanitizer_runtime","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"panic_strategy","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[10,"extern_crate","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"crate_name","","The name of the crate as it is referred to in source code of the current crate.",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"original_crate_name","","The name of the crate as it is stored in the crate's metadata.",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"crate_disambiguator","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"plugin_registrar_fn","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"derive_registrar_fn","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"native_libraries","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"exported_symbols","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_no_builtins","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"retrace_path","","",45,null],[10,"def_key","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"struct_field_names","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"load_macro","","",45,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"maybe_get_item_body","","",45,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"item_body_nested_bodies","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[10,"const_is_rvalue_promotable_to_static","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_item_mir_available","","",45,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"crates","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_libraries","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_link_args","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"metadata_filename","","",45,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"metadata_section_name","","",45,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[10,"used_crates","","",45,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[10,"used_crate_source","","",45,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[10,"extern_mod_stmt_cnum","","",45,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"encode_metadata","","",45,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[10,"metadata_encoding_version","","",45,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",46,null],[10,"postprocess","","",46,null],[0,"dataflow","rustc_trans::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_trans::middle::dataflow","",null,null],[13,"Entry","","",47,null],[13,"Exit","","",47,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",48,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",50,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",50,null],[0,"dead","rustc_trans::middle","",null,null],[5,"check_crate","rustc_trans::middle::dead","",null,null],[0,"dependency_format","rustc_trans::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_trans::middle::dependency_format","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",51,null],[13,"IncludedFromDylib","","",51,null],[13,"Static","","",51,null],[13,"Dynamic","","",51,null],[5,"calculate","","",null,null],[0,"effect","rustc_trans::middle","Enforces the Rust effect system. Currently there is just one effect, `unsafe`.",null,null],[5,"check_crate","rustc_trans::middle::effect","",null,null],[0,"entry","rustc_trans::middle","",null,null],[5,"find_entry_point","rustc_trans::middle::entry","",null,null],[0,"free_region","rustc_trans::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_trans::middle::free_region","",null,null],[0,"intrinsicck","rustc_trans::middle","",null,null],[5,"check_crate","rustc_trans::middle::intrinsicck","",null,null],[0,"lang_items","rustc_trans::middle","",null,null],[4,"LangItem","rustc_trans::middle::lang_items","",null,null],[13,"CharImplItem","","",52,null],[13,"StrImplItem","","",52,null],[13,"SliceImplItem","","",52,null],[13,"ConstPtrImplItem","","",52,null],[13,"MutPtrImplItem","","",52,null],[13,"I8ImplItem","","",52,null],[13,"I16ImplItem","","",52,null],[13,"I32ImplItem","","",52,null],[13,"I64ImplItem","","",52,null],[13,"I128ImplItem","","",52,null],[13,"IsizeImplItem","","",52,null],[13,"U8ImplItem","","",52,null],[13,"U16ImplItem","","",52,null],[13,"U32ImplItem","","",52,null],[13,"U64ImplItem","","",52,null],[13,"U128ImplItem","","",52,null],[13,"UsizeImplItem","","",52,null],[13,"F32ImplItem","","",52,null],[13,"F64ImplItem","","",52,null],[13,"SendTraitLangItem","","",52,null],[13,"SizedTraitLangItem","","",52,null],[13,"UnsizeTraitLangItem","","",52,null],[13,"CopyTraitLangItem","","",52,null],[13,"SyncTraitLangItem","","",52,null],[13,"DropTraitLangItem","","",52,null],[13,"CoerceUnsizedTraitLangItem","","",52,null],[13,"AddTraitLangItem","","",52,null],[13,"SubTraitLangItem","","",52,null],[13,"MulTraitLangItem","","",52,null],[13,"DivTraitLangItem","","",52,null],[13,"RemTraitLangItem","","",52,null],[13,"NegTraitLangItem","","",52,null],[13,"NotTraitLangItem","","",52,null],[13,"BitXorTraitLangItem","","",52,null],[13,"BitAndTraitLangItem","","",52,null],[13,"BitOrTraitLangItem","","",52,null],[13,"ShlTraitLangItem","","",52,null],[13,"ShrTraitLangItem","","",52,null],[13,"AddAssignTraitLangItem","","",52,null],[13,"SubAssignTraitLangItem","","",52,null],[13,"MulAssignTraitLangItem","","",52,null],[13,"DivAssignTraitLangItem","","",52,null],[13,"RemAssignTraitLangItem","","",52,null],[13,"BitXorAssignTraitLangItem","","",52,null],[13,"BitAndAssignTraitLangItem","","",52,null],[13,"BitOrAssignTraitLangItem","","",52,null],[13,"ShlAssignTraitLangItem","","",52,null],[13,"ShrAssignTraitLangItem","","",52,null],[13,"IndexTraitLangItem","","",52,null],[13,"IndexMutTraitLangItem","","",52,null],[13,"UnsafeCellTypeLangItem","","",52,null],[13,"DerefTraitLangItem","","",52,null],[13,"DerefMutTraitLangItem","","",52,null],[13,"FnTraitLangItem","","",52,null],[13,"FnMutTraitLangItem","","",52,null],[13,"FnOnceTraitLangItem","","",52,null],[13,"EqTraitLangItem","","",52,null],[13,"OrdTraitLangItem","","",52,null],[13,"StrEqFnLangItem","","",52,null],[13,"PanicFnLangItem","","",52,null],[13,"PanicBoundsCheckFnLangItem","","",52,null],[13,"PanicFmtLangItem","","",52,null],[13,"ExchangeMallocFnLangItem","","",52,null],[13,"BoxFreeFnLangItem","","",52,null],[13,"StrDupUniqFnLangItem","","",52,null],[13,"StartFnLangItem","","",52,null],[13,"EhPersonalityLangItem","","",52,null],[13,"EhUnwindResumeLangItem","","",52,null],[13,"MSVCTryFilterLangItem","","",52,null],[13,"OwnedBoxLangItem","","",52,null],[13,"PhantomDataItem","","",52,null],[13,"CovariantTypeItem","","",52,null],[13,"ContravariantTypeItem","","",52,null],[13,"InvariantTypeItem","","",52,null],[13,"CovariantLifetimeItem","","",52,null],[13,"ContravariantLifetimeItem","","",52,null],[13,"InvariantLifetimeItem","","",52,null],[13,"NoCopyItem","","",52,null],[13,"NonZeroItem","","",52,null],[13,"DebugTraitLangItem","","",52,null],[3,"LanguageItems","","",null,null],[12,"items","","",53,null],[12,"missing","","",53,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_trans::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc_trans::middle::liveness","",null,null],[0,"mem_categorization","rustc_trans::middle","Categorization",null,null],[4,"Categorization","rustc_trans::middle::mem_categorization","",null,null],[13,"Rvalue","","",54,null],[13,"StaticItem","","",54,null],[13,"Upvar","","",54,null],[13,"Local","","",54,null],[13,"Deref","","",54,null],[13,"Interior","","",54,null],[13,"Downcast","","",54,null],[3,"Upvar","","",null,null],[12,"id","","",55,null],[12,"kind","","",55,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",56,null],[13,"BorrowedPtr","","`&T`",56,null],[13,"UnsafePtr","","`*T`",56,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",56,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",57,null],[13,"InteriorElement","","",57,null],[4,"FieldName","","",null,null],[13,"NamedField","","",58,null],[13,"PositionalField","","",58,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",59,null],[13,"Pattern","","",59,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",60,null],[13,"OtherElement","","",60,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",61,null],[13,"McDeclared","","",61,null],[13,"McInherited","","",61,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",62,null],[13,"NoteUpvarRef","","",62,null],[13,"NoteNone","","",62,null],[3,"cmt_","","",null,null],[12,"id","","",63,null],[12,"span","","",63,null],[12,"cat","","",63,null],[12,"mutbl","","",63,null],[12,"ty","","",63,null],[12,"note","","",63,null],[6,"cmt","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",64,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",64,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",65,null],[3,"MemCategorizationOptions","","",null,null],[12,"during_closure_kind_inference","","",66,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",67,null],[13,"NonAliasable","","",67,null],[13,"ImmutableUnique","","",67,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",68,null],[13,"AliasableClosure","","",68,null],[13,"AliasableOther","","",68,null],[13,"UnaliasableImmutable","","",68,null],[13,"AliasableStatic","","",68,null],[13,"AliasableStaticMut","","",68,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_trans::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_trans::middle::privacy","",null,null],[13,"Reachable","","",69,null],[13,"Exported","","",69,null],[13,"Public","","",69,null],[3,"AccessLevels","","",null,null],[12,"map","","",70,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[0,"reachable","rustc_trans::middle","",null,null],[5,"find_reachable","rustc_trans::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_trans::middle","This file actually contains two passes related to regions.  The first pass builds up the `scope_map`, which describes the parent links in the region hierarchy.  The second pass infers which types must be region parameterized.",null,null],[3,"CodeExtent","rustc_trans::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling instead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be used to bound the lifetime/region for values.",null,null],[13,"Misc","","",71,null],[13,"CallSiteScope","","",71,null],[12,"fn_id","rustc_trans::middle::region::CodeExtentData","",71,null],[12,"body_id","","",71,null],[13,"ParameterScope","rustc_trans::middle::region","",71,null],[12,"fn_id","rustc_trans::middle::region::CodeExtentData","",71,null],[12,"body_id","","",71,null],[13,"DestructionScope","rustc_trans::middle::region","",71,null],[13,"Remainder","","",71,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",72,null],[12,"body_id","","",72,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",73,null],[12,"first_statement_index","","",73,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[0,"recursion_limit","rustc_trans::middle","",null,null],[5,"update_limits","rustc_trans::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_trans::middle","Name resolution for lifetimes.",null,null],[4,"Region","rustc_trans::middle::resolve_lifetime","",null,null],[13,"Static","","",74,null],[13,"EarlyBound","","",74,null],[13,"LateBound","","",74,null],[13,"LateBoundAnon","","",74,null],[13,"Free","","",74,null],[4,"Set1","","A set containing, at most, one known element. If two distinct values are inserted into a set, then it becomes `Many`, which can be used to detect ambiguities.",null,null],[13,"Empty","","",75,null],[13,"One","","",75,null],[13,"Many","","",75,null],[6,"ObjectLifetimeDefault","","",null,null],[3,"NamedRegionMap","","",null,null],[12,"defs","","",76,null],[12,"late_bound","","",76,null],[12,"issue_32330","","",76,null],[12,"object_lifetime_defaults","","",76,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[0,"stability","rustc_trans::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_trans::middle::stability","",null,null],[13,"Unstable","","",77,null],[13,"Stable","","",77,null],[3,"DeprecationEntry","","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",78,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,null],[0,"weak_lang_items","rustc_trans::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_trans::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"lint","rustc_trans","Lints, aka compiler warnings.",null,null],[3,"Lint","rustc_trans::lint","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",79,null],[12,"default_level","","Default level for the lint.",79,null],[12,"desc","","Description of the lint or the issue it detects.",79,null],[6,"LintArray","","",null,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",80,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_body","","",81,null],[11,"check_body_post","","",81,null],[11,"check_name","","",81,null],[11,"check_crate","","",81,null],[11,"check_crate_post","","",81,null],[11,"check_mod","","",81,null],[11,"check_mod_post","","",81,null],[11,"check_foreign_item","","",81,null],[11,"check_foreign_item_post","","",81,null],[11,"check_item","","",81,null],[11,"check_item_post","","",81,null],[11,"check_local","","",81,null],[11,"check_block","","",81,null],[11,"check_block_post","","",81,null],[11,"check_stmt","","",81,null],[11,"check_arm","","",81,null],[11,"check_pat","","",81,null],[11,"check_decl","","",81,null],[11,"check_expr","","",81,null],[11,"check_expr_post","","",81,null],[11,"check_ty","","",81,null],[11,"check_generics","","",81,null],[11,"check_fn","","",81,null],[11,"check_fn_post","","",81,null],[11,"check_trait_item","","",81,null],[11,"check_trait_item_post","","",81,null],[11,"check_impl_item","","",81,null],[11,"check_impl_item_post","","",81,null],[11,"check_struct_def","","",81,null],[11,"check_struct_def_post","","",81,null],[11,"check_struct_field","","",81,null],[11,"check_variant","","",81,null],[11,"check_variant_post","","",81,null],[11,"check_lifetime","","",81,null],[11,"check_lifetime_def","","",81,null],[11,"check_path","","",81,null],[11,"check_attribute","","",81,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",81,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",81,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",82,null],[11,"check_crate","","",82,null],[11,"check_crate_post","","",82,null],[11,"check_mod","","",82,null],[11,"check_mod_post","","",82,null],[11,"check_foreign_item","","",82,null],[11,"check_foreign_item_post","","",82,null],[11,"check_item","","",82,null],[11,"check_item_post","","",82,null],[11,"check_local","","",82,null],[11,"check_block","","",82,null],[11,"check_block_post","","",82,null],[11,"check_stmt","","",82,null],[11,"check_arm","","",82,null],[11,"check_pat","","",82,null],[11,"check_expr","","",82,null],[11,"check_expr_post","","",82,null],[11,"check_ty","","",82,null],[11,"check_generics","","",82,null],[11,"check_fn","","",82,null],[11,"check_fn_post","","",82,null],[11,"check_trait_item","","",82,null],[11,"check_trait_item_post","","",82,null],[11,"check_impl_item","","",82,null],[11,"check_impl_item_post","","",82,null],[11,"check_struct_def","","",82,null],[11,"check_struct_def_post","","",82,null],[11,"check_struct_field","","",82,null],[11,"check_variant","","",82,null],[11,"check_variant_post","","",82,null],[11,"check_lifetime","","",82,null],[11,"check_lifetime_def","","",82,null],[11,"check_path","","",82,null],[11,"check_path_list_item","","",82,null],[11,"check_attribute","","",82,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",82,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",82,null],[6,"EarlyLintPassObject","","A lint pass boxed up as a trait object.",null,null],[6,"LateLintPassObject","","",null,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",83,null],[13,"Warn","","",83,null],[13,"Deny","","",83,null],[13,"Forbid","","",83,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared in rustc or a plugin.",84,null],[13,"Node","","Lint level was set by an attribute.",84,null],[13,"CommandLine","","Lint level was set by a command-line flag.",84,null],[6,"LevelSource","","",null,null],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[7,"CONST_ERR","rustc_trans::lint::builtin","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"UNREACHABLE_PATTERNS","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"LIFETIME_UNDERSCORE","","",null,null],[7,"RESOLVE_TRAIT_ON_DEFAULTED_UNIT","","",null,null],[7,"SAFE_EXTERN_STATICS","","",null,null],[7,"PATTERNS_IN_FNS_WITHOUT_BODY","","",null,null],[7,"EXTRA_REQUIREMENT_IN_IMPL","","",null,null],[7,"LEGACY_DIRECTORY_OWNERSHIP","","",null,null],[7,"LEGACY_IMPORTS","","",null,null],[7,"LEGACY_CONSTRUCTOR_VISIBILITY","","",null,null],[7,"MISSING_FRAGMENT_SPECIFIER","","",null,null],[7,"DEPRECATED","","",null,null],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s which are used by other parts of the compiler.",null,null],[8,"LintContext","rustc_trans::lint","",null,null],[10,"sess","","",85,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[10,"lints","","",85,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"mut_lints","","",85,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"level_stack","","",85,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"enter_attrs","","",85,null],[10,"exit_attrs","","",85,null],[11,"current_level","","Get the level of `lint` at the current position of the lint traversal.",85,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"level"}}],[11,"level_src","","",85,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"option"}}],[11,"lookup_and_emit","","",85,null],[11,"lookup","","",85,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",85,null],[11,"early_lint","","",85,null],[11,"struct_span_lint","","",85,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",85,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",85,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",85,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the current lint context, call the provided function, then reset the lints in effect to their previous state.",85,null],[8,"IntoEarlyLint","","",null,null],[10,"into_early_lint","","",86,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"earlylint"}}],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to HIR.",null,null],[12,"sess","","Type context we're checking in.",87,null],[12,"krate","","The crate being checked.",87,null],[3,"EarlyLint","","When you call `add_lint` on the session, you wind up storing one of these, which records a \"potential lint\" at a particular point.",null,null],[12,"id","","what lint is this? (e.g., `dead_code`)",88,null],[12,"diagnostic","","the main message",88,null],[3,"LateContext","","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we're checking in.",89,null],[12,"tables","","Side-tables for the body we are in.",89,null],[12,"krate","","The crate being checked.",89,null],[12,"access_levels","","Items accessible from the crate being checked.",89,null],[5,"check_ast_crate","","",null,null],[3,"LintTable","","",null,null],[5,"check_crate","","Perform lint checking on a crate.",null,null],[3,"FutureIncompatibleInfo","","Extra information for a future incompatibility lint. See the call to `register_future_incompatible` in `librustc_lint/lib.rs` for guidelines.",null,null],[12,"id","","",90,null],[12,"reference","","",90,null],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all) according to `level`.",null,null],[5,"raw_struct_lint","","",null,null],[3,"LintStore","","Information about the registered lints.",null,null],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint attributes. Writing this as an iterator is an enormous mess.",null,null],[0,"util","rustc_trans","",null,null],[0,"common","rustc_trans::util","",null,null],[17,"FN_OUTPUT_NAME","rustc_trans::util::common","",null,null],[3,"ErrorReported","","",null,null],[5,"time_depth","","Read the current depth of `time()` calls. This is used to encourage indentation across threads.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"set_time_depth","","Set the current depth of `time()` calls. The idea is to call `set_time_depth()` with the result from `time_depth()` in the parent thread.",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"duration_to_secs_str","","",null,{"inputs":[{"name":"duration"}],"output":{"name":"string"}}],[5,"to_readable_str","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"record_time","","",null,{"inputs":[{"name":"cell"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[3,"Indenter","","",null,null],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[8,"MemoizationMap","","",null,null],[16,"Key","","",91,null],[16,"Value","","",91,null],[10,"memoize","","If `key` is present in the map, return the valuee, otherwise invoke `op` and store the value in the map.",91,null],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[0,"ppaux","rustc_trans::util","",null,null],[5,"verbose","rustc_trans::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"parameterized","","",null,null],[0,"nodemap","rustc_trans::util","An efficient hash map for node IDs",null,null],[6,"NodeMap","rustc_trans::util::nodemap","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[6,"FxHashMap","","",null,null],[6,"FxHashSet","","",null,null],[0,"fs","rustc_trans::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc_trans::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[4,"LinkOrCopy","","",null,null],[13,"Link","","",92,null],[13,"Copy","","",92,null],[5,"link_or_copy","","Copy `p` into `q`, preferring to use hard-linking if possible. If `q` already exists, it is removed first. The result indicates which of the two operations has been performed.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[4,"RenameOrCopyRemove","","",null,null],[13,"Rename","","",93,null],[13,"CopyRemove","","",93,null],[5,"rename_or_copy_remove","","Rename `p` into `q`, preferring to use `rename` if possible. If `rename` fails (rename may fail for reasons such as crossing filesystem), fallback to copy & remove",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"create_dir_racy","","",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[3,"Disr","rustc_trans","",null,null],[12,"0","","",94,null],[3,"ModuleTranslation","","",null,null],[12,"name","","The name of the module. When the crate may be saved between compilations, incremental compilation requires that name be unique amongst **all** crates.  Therefore, it should contain something unique to this crate (e.g., a module path) as well as the crate name and disambiguator.",95,null],[12,"symbol_name_hash","","",95,null],[12,"source","","",95,null],[3,"ModuleLlvm","","",null,null],[12,"llcx","","",96,null],[12,"llmod","","",96,null],[3,"CrateTranslation","","",null,null],[12,"modules","","",97,null],[12,"metadata_module","","",97,null],[12,"link","","",97,null],[12,"metadata","","",97,null],[12,"exported_symbols","","",97,null],[12,"no_builtins","","",97,null],[12,"windows_subsystem","","",97,null],[12,"linker_info","","",97,null],[4,"ModuleSource","","",null,null],[13,"Preexisting","","Copy the `.o` files or whatever from the incr. comp. directory.",98,null],[13,"Translated","","Rebuild from this LLVM module.",98,null],[5,"trans_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"crateanalysis"},{"name":"incrementalhashesmap"}],"output":{"name":"cratetranslation"}}],[0,"back","","",null,null],[0,"svh","rustc_trans::back","Calculation and management of a Strict Version Hash for crates",null,null],[3,"Svh","rustc_trans::back::svh","",null,null],[0,"archive","rustc_trans::back","A helper class for dealing with static archives",null,null],[3,"ArchiveConfig","rustc_trans::back::archive","",null,null],[12,"sess","","",99,null],[12,"dst","","",99,null],[12,"src","","",99,null],[12,"lib_search_paths","","",99,null],[12,"ar_prog","","",99,null],[12,"command_path","","",99,null],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of `ar`.",null,null],[5,"find_library","","",null,null],[11,"new","","Create a new static archive, ready for modifying the archive specified by `config`.",100,{"inputs":[{"name":"archiveconfig"}],"output":{"name":"archivebuilder"}}],[11,"remove_file","","Removes a file from this archive",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"src_files","","Lists all files in an archive",100,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will search in the relevant locations for a library named `name`.",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this archive.",100,{"inputs":[{"name":"self"},{"name":"path"},{"name":"str"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"add_file","","Adds an arbitrary file to this archive",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in the archive (run 'ar s' over it).",100,{"inputs":[{"name":"self"}],"output":null}],[11,"build","","Combine the provided files, rlibs, and native libraries into a single `Archive`.",100,{"inputs":[{"name":"self"}],"output":null}],[0,"linker","rustc_trans::back","",null,null],[3,"LinkerInfo","rustc_trans::back::linker","For all the linkers we support, and information they might need out of the shared crate context before we get rid of it.",null,null],[3,"GnuLinker","","",null,null],[3,"MsvcLinker","","",null,null],[3,"EmLinker","","",null,null],[8,"Linker","","Linker abstraction used by back::link to build up the command to invoke a linker.",null,null],[10,"link_dylib","","",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"link_rust_dylib","","",101,{"inputs":[{"name":"self"},{"name":"str"},{"name":"path"}],"output":null}],[10,"link_framework","","",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"link_staticlib","","",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"link_rlib","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"link_whole_rlib","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"link_whole_staticlib","","",101,null],[10,"include_path","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"framework_path","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"output_filename","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"add_object","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"gc_sections","","",101,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"position_independent_executable","","",101,{"inputs":[{"name":"self"}],"output":null}],[10,"optimize","","",101,{"inputs":[{"name":"self"}],"output":null}],[10,"debuginfo","","",101,{"inputs":[{"name":"self"}],"output":null}],[10,"no_default_libraries","","",101,{"inputs":[{"name":"self"}],"output":null}],[10,"build_dylib","","",101,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[10,"args","","",101,null],[10,"hint_static","","",101,{"inputs":[{"name":"self"}],"output":null}],[10,"hint_dynamic","","",101,{"inputs":[{"name":"self"}],"output":null}],[10,"whole_archives","","",101,{"inputs":[{"name":"self"}],"output":null}],[10,"no_whole_archives","","",101,{"inputs":[{"name":"self"}],"output":null}],[10,"export_symbols","","",101,{"inputs":[{"name":"self"},{"name":"path"},{"name":"cratetype"}],"output":null}],[10,"subsystem","","",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"new","","",102,{"inputs":[{"name":"sharedcratecontext"},{"name":"exportedsymbols"}],"output":{"name":"linkerinfo"}}],[11,"to_linker","","",102,{"inputs":[{"name":"self"},{"name":"command"},{"name":"session"}],"output":{"name":"box"}}],[11,"link_dylib","","",103,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_staticlib","","",103,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_rlib","","",103,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"include_path","","",103,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"framework_path","","",103,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"output_filename","","",103,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"add_object","","",103,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"position_independent_executable","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"args","","",103,null],[11,"link_rust_dylib","","",103,{"inputs":[{"name":"self"},{"name":"str"},{"name":"path"}],"output":null}],[11,"link_framework","","",103,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_whole_staticlib","","",103,null],[11,"link_whole_rlib","","",103,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"gc_sections","","",103,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"optimize","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"debuginfo","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"no_default_libraries","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"build_dylib","","",103,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"whole_archives","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"no_whole_archives","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_static","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_dynamic","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"export_symbols","","",103,{"inputs":[{"name":"self"},{"name":"path"},{"name":"cratetype"}],"output":null}],[11,"subsystem","","",103,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_rlib","","",104,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"add_object","","",104,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"args","","",104,null],[11,"build_dylib","","",104,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"gc_sections","","",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"link_dylib","","",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_rust_dylib","","",104,{"inputs":[{"name":"self"},{"name":"str"},{"name":"path"}],"output":null}],[11,"link_staticlib","","",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"position_independent_executable","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"no_default_libraries","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"include_path","","",104,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"output_filename","","",104,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"framework_path","","",104,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"link_framework","","",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_whole_staticlib","","",104,null],[11,"link_whole_rlib","","",104,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"optimize","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"debuginfo","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"whole_archives","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"no_whole_archives","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_static","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_dynamic","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"export_symbols","","",104,{"inputs":[{"name":"self"},{"name":"path"},{"name":"cratetype"}],"output":null}],[11,"subsystem","","",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"include_path","","",105,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"link_staticlib","","",105,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"output_filename","","",105,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"add_object","","",105,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"link_dylib","","",105,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"link_whole_staticlib","","",105,null],[11,"link_whole_rlib","","",105,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"link_rust_dylib","","",105,{"inputs":[{"name":"self"},{"name":"str"},{"name":"path"}],"output":null}],[11,"link_rlib","","",105,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"position_independent_executable","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"args","","",105,null],[11,"framework_path","","",105,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"link_framework","","",105,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"gc_sections","","",105,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"optimize","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"debuginfo","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"no_default_libraries","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"build_dylib","","",105,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"whole_archives","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"no_whole_archives","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_static","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"hint_dynamic","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"export_symbols","","",105,{"inputs":[{"name":"self"},{"name":"path"},{"name":"cratetype"}],"output":null}],[11,"subsystem","","",105,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[0,"link","rustc_trans::back","",null,null],[5,"find_crate_name","rustc_trans::back::link","",null,null],[5,"build_link_meta","","",null,{"inputs":[{"name":"incrementalhashesmap"},{"name":"str"}],"output":{"name":"linkmeta"}}],[5,"get_linker","","",null,null],[5,"get_ar_prog","","",null,{"inputs":[{"name":"session"}],"output":{"name":"string"}}],[5,"remove","","",null,{"inputs":[{"name":"session"},{"name":"path"}],"output":null}],[5,"link_binary","","Perform the linkage portion of the compilation phase. This will generate all of the requested outputs for this compilation session.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"},{"name":"str"}],"output":{"name":"vec"}}],[5,"default_output_for_target","","Returns default crate type for target",null,{"inputs":[{"name":"session"}],"output":{"name":"cratetype"}}],[5,"invalid_output_for_target","","Checks if target supports crate_type as output",null,{"inputs":[{"name":"session"},{"name":"cratetype"}],"output":{"name":"bool"}}],[5,"filename_for_input","","",null,{"inputs":[{"name":"session"},{"name":"cratetype"},{"name":"str"},{"name":"outputfilenames"}],"output":{"name":"pathbuf"}}],[5,"each_linked_rlib","","",null,{"inputs":[{"name":"session"},{"name":"fnmut"}],"output":null}],[17,"METADATA_MODULE_NAME","","The LLVM module name containing crate-metadata. This includes a `.` on purpose, so it cannot clash with the name of a user-defined module.",null,null],[17,"METADATA_OBJ_NAME","","The name of the crate-metadata object file the compiler generates. Must match up with `METADATA_MODULE_NAME`.",null,null],[17,"RLIB_BYTECODE_OBJECT_MAGIC","","",null,null],[17,"RLIB_BYTECODE_OBJECT_VERSION","","",null,null],[17,"RLIB_BYTECODE_OBJECT_VERSION_OFFSET","","",null,null],[17,"RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET","","",null,null],[17,"RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET","","",null,null],[0,"lto","rustc_trans::back","",null,null],[5,"crate_type_allows_lto","rustc_trans::back::lto","",null,{"inputs":[{"name":"cratetype"}],"output":{"name":"bool"}}],[5,"run","","",null,{"inputs":[{"name":"session"},{"name":"moduleref"},{"name":"targetmachineref"},{"name":"exportedsymbols"},{"name":"moduleconfig"},{"name":"path"}],"output":null}],[0,"symbol_export","rustc_trans::back","",null,null],[3,"ExportedSymbols","rustc_trans::back::symbol_export","The set of symbols exported from each crate in the crate graph.",null,null],[4,"SymbolExportLevel","","The SymbolExportLevel of a symbols specifies from which kinds of crates the symbol will be exported. `C` symbols will be exported from any kind of crate, including cdylibs which export very few things. `Rust` will only be exported if the crate produced is a Rust dylib.",null,null],[13,"C","","",106,null],[13,"Rust","","",106,null],[5,"crate_export_threshold","","",null,{"inputs":[{"name":"cratetype"}],"output":{"name":"symbolexportlevel"}}],[5,"crates_export_threshold","","",null,null],[5,"is_below_threshold","","",null,{"inputs":[{"name":"symbolexportlevel"},{"name":"symbolexportlevel"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"symbolexportlevel"}],"output":{"name":"bool"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"symbolexportlevel"}}],[11,"empty","","",107,{"inputs":[],"output":{"name":"exportedsymbols"}}],[11,"compute_from","","",107,{"inputs":[{"name":"sharedcratecontext"},{"name":"symbolmap"}],"output":{"name":"exportedsymbols"}}],[11,"exported_symbols","","",107,null],[11,"for_each_exported_symbol","","",107,{"inputs":[{"name":"self"},{"name":"cratenum"},{"name":"symbolexportlevel"},{"name":"f"}],"output":null}],[0,"symbol_names","rustc_trans::back","The Rust Linkage Model and Symbol Names =======================================",null,null],[5,"exported_name_from_type_and_prefix","rustc_trans::back::symbol_names","",null,{"inputs":[{"name":"sharedcratecontext"},{"name":"ty"},{"name":"str"}],"output":{"name":"string"}}],[5,"sanitize","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"write","rustc_trans::back","",null,null],[3,"ModuleConfig","rustc_trans::back::write","Module-specific configuration for `optimize_and_codegen`.",null,null],[5,"llvm_err","","",null,null],[5,"write_output_file","","",null,{"inputs":[{"name":"handler"},{"name":"targetmachineref"},{"name":"passmanagerref"},{"name":"moduleref"},{"name":"path"},{"name":"filetype"}],"output":null}],[5,"create_target_machine","","",null,{"inputs":[{"name":"session"}],"output":{"name":"targetmachineref"}}],[5,"cleanup_llvm","","",null,{"inputs":[{"name":"cratetranslation"}],"output":null}],[5,"run_passes","","",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputtypes"},{"name":"outputfilenames"}],"output":null}],[5,"run_assembler","","",null,{"inputs":[{"name":"session"},{"name":"outputfilenames"}],"output":null}],[5,"with_llvm_pmb","","",null,{"inputs":[{"name":"moduleref"},{"name":"moduleconfig"},{"name":"fnmut"}],"output":null}],[17,"RELOC_MODEL_ARGS","","",null,null],[17,"CODE_GEN_MODEL_ARGS","","",null,null],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"moduleconfig"}}],[0,"msvc","rustc_trans::back","MSVC-specific logic for linkers and such.",null,null],[5,"link_exe_cmd","rustc_trans::back::msvc","",null,null],[0,"rpath","rustc_trans::back","",null,null],[3,"RPathConfig","rustc_trans::back::rpath","",null,null],[12,"used_crates","","",109,null],[12,"out_filename","","",109,null],[12,"is_like_osx","","",109,null],[12,"has_rpath","","",109,null],[12,"linker_is_gnu","","",109,null],[12,"get_install_prefix_lib_path","","",109,null],[5,"get_rpath_flags","","",null,{"inputs":[{"name":"rpathconfig"}],"output":{"name":"vec"}}],[0,"diagnostics","rustc_trans","",null,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"disr"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"disr"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"disr"}}],[11,"for_variant","","",94,{"inputs":[{"name":"tyctxt"},{"name":"adtdef"},{"name":"usize"}],"output":{"name":"self"}}],[11,"wrapping_add","","",94,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",94,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",94,{"inputs":[{"name":"constint"}],"output":{"name":"disr"}}],[11,"from","","",94,{"inputs":[{"name":"usize"}],"output":{"name":"disr"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"self"},{"name":"disr"}],"output":{"name":"option"}}],[11,"cmp","","",94,{"inputs":[{"name":"self"},{"name":"disr"}],"output":{"name":"ordering"}}],[17,"DIAGNOSTICS","","",null,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"moduletranslation"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"modulesource"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"modulellvm"}}],[11,"get_lints","rustc_trans::lint::builtin","",110,null],[11,"decode","rustc_trans::back::svh","",111,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::lint","",112,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::const_val","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::cstore","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::free_region","",114,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::lang_items","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::region","",115,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::resolve_lifetime","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::middle::stability","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_trans::session::config","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","rustc_trans::lint","",83,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::middle::cstore","",38,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::middle::privacy","",69,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::middle::region","",115,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"lt","","",115,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"le","","",115,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"gt","","",115,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ge","","",115,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"option"}}],[11,"lt","","",72,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"le","","",72,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"gt","","",72,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ge","","",72,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_trans::middle::stability","",77,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::session::config","",4,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_trans::session::search_paths","",19,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"option"}}],[11,"visit_item","rustc_trans::lint","",87,null],[11,"visit_foreign_item","","",87,null],[11,"visit_pat","","",87,null],[11,"visit_expr","","",87,null],[11,"visit_stmt","","",87,null],[11,"visit_fn","","",87,null],[11,"visit_variant_data","","",87,null],[11,"visit_struct_field","","",87,null],[11,"visit_variant","","",87,null],[11,"visit_ty","","",87,null],[11,"visit_ident","","",87,null],[11,"visit_mod","","",87,null],[11,"visit_local","","",87,null],[11,"visit_block","","",87,null],[11,"visit_arm","","",87,null],[11,"visit_expr_post","","",87,null],[11,"visit_generics","","",87,null],[11,"visit_trait_item","","",87,null],[11,"visit_impl_item","","",87,null],[11,"visit_lifetime","","",87,null],[11,"visit_lifetime_def","","",87,null],[11,"visit_path","","",87,null],[11,"visit_path_list_item","","",87,null],[11,"visit_attribute","","",87,null],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::back::svh","",111,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::lint","",83,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::expr_use_visitor","",29,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::const_val","",34,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::cstore","",37,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::dataflow","",50,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::dependency_format","",51,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::lang_items","",52,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::mem_categorization","",54,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"elementkind"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::privacy","",69,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::region","",115,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::resolve_lifetime","",74,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::middle::stability","",77,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::session","",26,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"sizekind"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"datatypekind"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::session::config","",2,{"inputs":[{"name":"self"},{"name":"optlevel"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"debuginfolevel"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"printrequest"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"entryfntype"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"optionstability"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"eq","rustc_trans::session::search_paths","",19,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"bool"}}],[11,"hash","rustc_trans::back::svh","",111,null],[11,"hash","rustc_trans::lint","",112,null],[11,"hash","","",83,null],[11,"hash","rustc_trans::middle::const_val","",34,null],[11,"hash","rustc_trans::middle::cstore","",41,null],[11,"hash","","",42,null],[11,"hash","rustc_trans::middle::lang_items","",52,null],[11,"hash","rustc_trans::middle::mem_categorization","",56,null],[11,"hash","","",57,null],[11,"hash","","",58,null],[11,"hash","","",59,null],[11,"hash","","",60,null],[11,"hash","","",61,null],[11,"hash","rustc_trans::middle::region","",115,null],[11,"hash","","",71,null],[11,"hash","","",72,null],[11,"hash","","",73,null],[11,"hash","rustc_trans::middle::resolve_lifetime","",74,null],[11,"hash","rustc_trans::middle::stability","",77,null],[11,"hash","rustc_trans::session","",26,null],[11,"hash","","",24,null],[11,"hash","","",25,null],[11,"hash","","",27,null],[11,"hash","","",23,null],[11,"hash","rustc_trans::session::config","",1,null],[11,"hash","","",2,null],[11,"hash","","",3,null],[11,"hash","","",4,null],[11,"hash","","",117,null],[11,"hash","","",118,null],[11,"hash","","",11,null],[11,"hash","","",12,null],[11,"hash","rustc_trans::session::search_paths","",19,null],[11,"crate_data_as_rc_any","rustc_trans::middle::cstore","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"describe_def","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",119,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"visible_parent_map","","",119,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"item_generics_cloned","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"fn_arg_names","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",119,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"impl_polarity","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"impl_parent","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item_cloned","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"is_const_fn","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_exported_symbol","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"lang_items","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"dep_kind","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",119,null],[11,"is_allocator","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"extern_crate","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_name","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",119,null],[11,"def_key","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",119,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",119,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_item_mir_available","","",119,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",119,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",119,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",119,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",119,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",119,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",119,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",119,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",119,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",119,null],[11,"default","rustc_trans::middle::privacy","",70,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"default","rustc_trans::session::config","",5,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"default","rustc_trans::middle::mem_categorization","",66,{"inputs":[],"output":{"name":"memcategorizationoptions"}}],[11,"drop","rustc_trans::util::common","",120,null],[11,"sess","rustc_trans::lint","Get the overall compiler `Session` object.",89,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",89,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",89,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",89,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",89,null],[11,"exit_attrs","","",89,null],[11,"sess","","Get the overall compiler `Session` object.",87,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",87,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",87,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",87,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",87,null],[11,"exit_attrs","","",87,null],[11,"fmt","rustc_trans::back::svh","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::mem_categorization","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session::config","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::lint","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::mem_categorization","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::privacy","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::region","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::back::svh","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::lint","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::expr_use_visitor","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::const_val","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::cstore","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::dataflow","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::dependency_format","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::mem_categorization","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::privacy","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::region","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::resolve_lifetime","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::middle::stability","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session::config","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session::search_paths","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::session","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::util::common","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_trans::util::fs","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nested","rustc_trans::middle::dataflow","",124,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",124,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"clone","rustc_trans::back::svh","",111,{"inputs":[{"name":"self"}],"output":{"name":"svh"}}],[11,"clone","rustc_trans::lint","",79,{"inputs":[{"name":"self"}],"output":{"name":"lint"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"lintid"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"lintsource"}}],[11,"clone","rustc_trans::lint::builtin","",110,{"inputs":[{"name":"self"}],"output":{"name":"hardwiredlints"}}],[11,"clone","rustc_trans::middle::expr_use_visitor","",29,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"clone","rustc_trans::middle::const_val","",34,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"clone","rustc_trans::middle::cstore","",36,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"clone","rustc_trans::middle::dataflow","",47,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"clone","rustc_trans::middle::dependency_format","",51,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"clone","rustc_trans::middle::free_region","",114,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"clone","rustc_trans::middle::lang_items","",52,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"clone","rustc_trans::middle::mem_categorization","",54,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"elementkind"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationoptions"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"clone","rustc_trans::middle::privacy","",69,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"clone","rustc_trans::middle::region","",115,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"codeextentdata"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"callsitescopedata"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","rustc_trans::middle::resolve_lifetime","",74,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"set1"}}],[11,"clone","rustc_trans::middle::stability","",77,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"clone","rustc_trans::session","",26,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sizekind"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"fieldinfo"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"datatypekind"}}],[11,"clone","rustc_trans::session::config","",1,{"inputs":[{"name":"self"}],"output":{"name":"sanitizer"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"optlevel"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"debuginfolevel"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"outputtype"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"erroroutputtype"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"outputtypes"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"externs"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"printrequest"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"outputfilenames"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"entryfntype"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"cratetype"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"passes"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptions"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"debuggingoptions"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"optionstability"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"rustcoptgroup"}}],[11,"clone","rustc_trans::session::filesearch","",17,{"inputs":[{"name":"self"}],"output":{"name":"filematch"}}],[11,"clone","rustc_trans::session::search_paths","",122,{"inputs":[{"name":"self"}],"output":{"name":"searchpaths"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"pathkind"}}],[11,"clone","rustc_trans::util::common","",123,{"inputs":[{"name":"self"}],"output":{"name":"errorreported"}}],[11,"from","rustc_trans::session","",27,{"inputs":[{"name":"adtkind"}],"output":{"name":"datatypekind"}}],[11,"next","rustc_trans::session::search_paths","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nested_visit_map","rustc_trans::lint","Because lints are scoped lexically, we want to walk nested items in the context of the outer item, so enable deep-walking.",89,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_id","","",89,null],[11,"visit_nested_body","","",89,null],[11,"visit_body","","",89,null],[11,"visit_item","","",89,null],[11,"visit_foreign_item","","",89,null],[11,"visit_pat","","",89,null],[11,"visit_expr","","",89,null],[11,"visit_stmt","","",89,null],[11,"visit_fn","","",89,null],[11,"visit_variant_data","","",89,null],[11,"visit_struct_field","","",89,null],[11,"visit_variant","","",89,null],[11,"visit_ty","","",89,null],[11,"visit_name","","",89,null],[11,"visit_mod","","",89,null],[11,"visit_local","","",89,null],[11,"visit_block","","",89,null],[11,"visit_arm","","",89,null],[11,"visit_decl","","",89,null],[11,"visit_generics","","",89,null],[11,"visit_trait_item","","",89,null],[11,"visit_impl_item","","",89,null],[11,"visit_lifetime","","",89,null],[11,"visit_lifetime_def","","",89,null],[11,"visit_path","","",89,null],[11,"visit_attribute","","",89,null],[11,"encode","rustc_trans::back::svh","",111,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::lint","",112,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",113,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::const_val","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::cstore","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::free_region","",114,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::lang_items","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::region","",115,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::resolve_lifetime","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::middle::stability","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_trans::session::config","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","rustc_trans::lint","",83,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::middle::cstore","",38,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::middle::privacy","",69,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::middle::region","",115,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"ordering"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"ordering"}}],[11,"cmp","","",72,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"ordering"}}],[11,"cmp","","",73,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::session::config","",4,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"ordering"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_trans::session::search_paths","",19,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"ordering"}}],[11,"super_fold_with","rustc_trans::middle::const_val","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"constval"}}],[11,"neg","","",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitxor","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"option"}}],[11,"sub","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"not","","",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitor","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"div","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"bitand","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"shl","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"add","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"rem","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"shr","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"mul","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"ordering"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extension","rustc_trans::session::config","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",117,null],[11,"get","","",117,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"contains_key","","",117,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"keys","","",117,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","",117,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"should_trans","","",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",118,{"inputs":[{"name":"btreemap"}],"output":{"name":"externs"}}],[11,"get","","",118,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",118,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"single_codegen_unit","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dep_tracking_hash","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"filestem","","",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"path","","",9,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"pathbuf"}}],[11,"temp_path","","Get the path where a compilation artifact of the given type for the given codegen unit should be placed on disk. If codegen_unit_name is None, a path distinct from those of any codegen unit will be generated.",9,{"inputs":[{"name":"self"},{"name":"outputtype"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"temp_path_ext","","Like temp_path, but also supports things where there is no corresponding OutputType, like no-opt-bitcode or lto-bitcode.",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"filestem","","",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_empty","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stable","","",16,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",16,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"for_each_lib_search_path","rustc_trans::session::filesearch","",18,null],[11,"get_lib_path","","",18,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"search","","",18,null],[11,"new","","",18,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tools_search_paths","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","rustc_trans::session::search_paths","",122,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",122,null],[11,"iter","","",122,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"iter"}}],[11,"local_crate_disambiguator","rustc_trans::session","",20,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"struct_span_warn","","",20,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",20,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",20,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",20,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",20,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",20,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",20,null],[11,"span_fatal_with_code","","",20,null],[11,"fatal","","",20,null],[11,"span_err_or_warn","","",20,null],[11,"span_err","","",20,null],[11,"span_err_with_code","","",20,null],[11,"err","","",20,null],[11,"err_count","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",20,null],[11,"track_errors","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"span_warn","","",20,null],[11,"span_warn_with_code","","",20,null],[11,"warn","","",20,null],[11,"opt_span_warn","","",20,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",20,null],[11,"note_without_error","","",20,null],[11,"span_note_without_error","","",20,null],[11,"span_unimpl","","",20,null],[11,"unimpl","","",20,null],[11,"add_lint","","",20,null],[11,"add_lint_diagnostic","","",20,null],[11,"reserve_node_ids","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"next_node_id","","",20,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"diagnostic","","",20,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"diag_span_note_once","","Analogous to calling `.span_note` on the given DiagnosticBuilder, but deduplicates on lint ID, span, and message for this `Session` if we're not outputting in JSON mode.",20,null],[11,"codemap","","",20,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"verbose","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_passes","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"count_llvm_insns","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_llvm_passes","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trans_stats","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta_stats","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"asm_comments","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"no_verify","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrowck_stats","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_llvm_passes","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lto","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","Returns the panic strategy for this compile session. If the user explicitly selected one using '-C panic', use that, otherwise use the panic strategy defined by the target.",20,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"no_landing_pads","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unstable_options","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"nonzeroing_move_hints","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"overflow_checks","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"must_not_eliminate_frame_pointers","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate_plugin_registrar_symbol","","Returns the symbol name for the registrar function, given the crate Svh and the function DefIndex.",20,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"generate_derive_registrar_symbol","","",20,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"sysroot","","",20,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"target_filesearch","","",20,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"host_filesearch","","",20,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"init_incr_comp_session","","",20,null],[11,"finalize_incr_comp_session","","",20,null],[11,"mark_incr_comp_session_as_invalid","","",20,null],[11,"incr_comp_session_dir","","",20,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"incr_comp_session_dir_opt","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_perf_stats","","",20,null],[11,"new","","",116,{"inputs":[],"output":{"name":"codestats"}}],[11,"record_type_size","","",116,null],[11,"print_type_sizes","","",116,null],[11,"new","rustc_trans::middle::expr_use_visitor","",126,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"with_options","","",126,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"exprusevisitor"}}],[11,"consume_body","","",126,null],[11,"consume_expr","","",126,null],[11,"walk_expr","","",126,null],[11,"description","rustc_trans::middle::const_val","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_const_int","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new_unsigned","","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",35,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"new_signed","","Creates a new signed ConstInt with matching type while also checking that overflow does not happen.",35,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"option"}}],[11,"new_unsigned_truncating","","Creates a new unsigned ConstInt with matching type.",35,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"constint"}}],[11,"new_signed_truncating","","Creates a new signed ConstInt with matching type.",35,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"constint"}}],[11,"description","","Description of the type, not the value",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_u128_unchecked","","Erases the type and returns a u128. This is not the same as `-5i8 as u128` but as `-5i8 as i128 as u128`",35,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u32","","Converts the value to a `u32` if it's in the range 0...std::u32::MAX",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","Converts the value to a `u64` if it's in the range 0...std::u64::MAX",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u128","","Converts the value to a `u128` if it's in the range 0...std::u128::MAX",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",35,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64","","",35,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_negative","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",35,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",35,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"int_type","","",35,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"macros_only","rustc_trans::middle::cstore","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_some","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rustc_trans::middle::dataflow","",124,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",124,null],[11,"add_kill","","Indicates that `id` kills `bit`",124,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",124,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",124,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",124,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",124,null],[11,"propagate","","Performs the data flow analysis.",124,null],[11,"new","rustc_trans::middle::free_region","",114,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"is_empty","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"relate_free_regions_from_implied_bounds","","",114,null],[11,"relate_free_regions_from_predicates","","",114,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship by walking the graph encoded in `map`.  Note that it is possible that `sub != sup` and `sub <= sup` and `sup <= sub` (that is, the user can give two different names to the same lifetime).",114,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",114,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"region"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after inference* and sadly the logic is somewhat duplicated with the code in infer.rs.",114,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"is_static","","Determines whether this free-region is required to be 'static",114,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"from_u32","rustc_trans::middle::lang_items","",52,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",53,null],[11,"item_name","","",53,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",53,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"require_owned_box","","",53,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",53,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_eq_fn","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strdup_uniq_fn","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_type","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_type","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_type","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_lifetime","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_lifetime","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_lifetime","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_copy_bound","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_mutbl","rustc_trans::middle::mem_categorization","",61,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",61,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",61,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",61,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_field","","",63,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"option"}}],[11,"get_field_name","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_arg_if_immutable","","",63,{"inputs":[{"name":"self"},{"name":"map"}],"output":{"name":"option"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",63,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",63,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",63,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"new","","",65,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_options","","",65,{"inputs":[{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",65,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_expr_autoderefd","","",65,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cat_expr_unadjusted","","",65,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_def","","",65,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"},{"name":"def"}],"output":{"name":"result"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",65,null],[11,"cat_rvalue_node","","",65,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_rvalue","","",65,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"region"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_field","","",65,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"symbol"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_tup_field","","",65,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"usize"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",65,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"interioroffsetkind"}],"output":{"name":"result"}}],[11,"cat_imm_interior","","",65,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"interiorkind"}],"output":{"name":"rc"}}],[11,"cat_downcast","","",65,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"cat_pattern","","",65,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"pat"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_reachable","rustc_trans::middle::privacy","",70,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",70,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",70,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"node_id","rustc_trans::middle::region","",115,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this CodeExtent.  Note that in general the returned span may not correspond to the span of any node id in the AST.",115,{"inputs":[{"name":"self"},{"name":"regionmaps"},{"name":"map"}],"output":{"name":"option"}}],[11,"node_id","","Returns a node id associated with this scope.",71,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"to_code_extent","","",72,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"codeextent"}}],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody really cares about the contents of these.",127,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"lookup_code_extent","","",127,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"node_extent","","",127,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"item_extent","","",127,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"call_site_extent","","",127,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"opt_destruction_extent","","",127,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"intern_code_extent","","",127,{"inputs":[{"name":"self"},{"name":"codeextentdata"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"intern_node","","",127,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"code_extent_data","","",127,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextentdata"}}],[11,"each_encl_scope","","",127,null],[11,"each_var_scope","","",127,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",127,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",127,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",127,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"temporary_scope2","","",127,null],[11,"old_and_new_temporary_scope","","",127,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",127,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",127,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"scopes_intersect","","",127,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",127,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",127,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"insert","rustc_trans::middle::resolve_lifetime","",75,null],[11,"from_attr_level","rustc_trans::middle::stability","",77,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"same_origin","","",78,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"build","","Construct the stability index for a crate being compiled.",128,null],[11,"new","","",128,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"name_lower","rustc_trans::lint","Get the lint's name, with ASCII letters converted to lowercase.",79,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"of","","Get the `LintId` for a `Lint`.",112,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"to_string","","Get the name of the lint.",112,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_str","","Convert a level to a lower-case string.",83,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","Convert a lower-case string to a level.",83,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",113,{"inputs":[],"output":{"name":"linttable"}}],[11,"add_lint","","",113,null],[11,"add_lint_diagnostic","","",113,null],[11,"get","","",113,null],[11,"take","","",113,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"vec"}}],[11,"transfer","","",113,null],[11,"get_any","","Returns the first (id, lint) pair that is non-empty. Used to implement a sanity check in lints that all node-ids are visited.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",129,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",129,null],[11,"get_lint_groups","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_early_pass","","",129,null],[11,"register_late_pass","","",129,null],[11,"register_future_incompatible","","",129,null],[11,"future_incompatible","","",129,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"option"}}],[11,"register_group","","",129,null],[11,"register_renamed","","",129,null],[11,"register_removed","","",129,null],[11,"process_command_line","","",129,null],[11,"new","rustc_trans::back::svh","Create a new `Svh` given the hash. If you actually want to compute the SVH from some HIR, you want the `calculate_svh` function found in `librustc_incremental`.",111,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_u64","","",111,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_string","","",111,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"Config"],[4,"Sanitizer"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[4,"PathKind"],[3,"Session"],[3,"PerfStats"],[4,"IncrCompSession"],[3,"TypeSizeInfo"],[4,"SizeKind"],[3,"FieldInfo"],[3,"VariantInfo"],[4,"DataTypeKind"],[8,"Delegate"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[4,"ConstVal"],[4,"ConstInt"],[3,"LinkMeta"],[3,"CrateSource"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"NativeLibrary"],[4,"LoadedMacro"],[3,"ExternCrate"],[8,"CrateStore"],[8,"CrateLoader"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[4,"KillFrom"],[4,"Linkage"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[8,"ast_node"],[3,"MemCategorizationContext"],[3,"MemCategorizationOptions"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"Region"],[4,"Set1"],[3,"NamedRegionMap"],[4,"StabilityLevel"],[3,"DeprecationEntry"],[3,"Lint"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[4,"Level"],[4,"LintSource"],[8,"LintContext"],[8,"IntoEarlyLint"],[3,"EarlyContext"],[3,"EarlyLint"],[3,"LateContext"],[3,"FutureIncompatibleInfo"],[8,"MemoizationMap"],[4,"LinkOrCopy"],[4,"RenameOrCopyRemove"],[3,"Disr"],[3,"ModuleTranslation"],[3,"ModuleLlvm"],[3,"CrateTranslation"],[4,"ModuleSource"],[3,"ArchiveConfig"],[3,"ArchiveBuilder"],[8,"Linker"],[3,"LinkerInfo"],[3,"GnuLinker"],[3,"MsvcLinker"],[3,"EmLinker"],[4,"SymbolExportLevel"],[3,"ExportedSymbols"],[3,"ModuleConfig"],[3,"RPathConfig"],[3,"HardwiredLints"],[3,"Svh"],[3,"LintId"],[3,"LintTable"],[3,"FreeRegionMap"],[3,"CodeExtent"],[3,"CodeStats"],[3,"OutputTypes"],[3,"Externs"],[3,"DummyCrateStore"],[3,"Indenter"],[3,"Context"],[3,"SearchPaths"],[3,"ErrorReported"],[3,"DataFlowContext"],[3,"Iter"],[3,"ExprUseVisitor"],[3,"RegionMaps"],[3,"Index"],[3,"LintStore"]]};
searchIndex["rustc_typeck"] = {"doc":"typeck.rs, an introduction","items":[[0,"dep_graph","rustc_typeck","",null,null],[0,"debug","rustc_typeck::dep_graph","Code for debugging the dep-graph.",null,null],[3,"DepNodeFilter","rustc_typeck::dep_graph::debug","A dep-node filter goes from a user-defined string to a query over nodes. Right now the format is like this:",null,null],[3,"EdgeFilter","","A filter like `F -> G` where `F` and `G` are valid dep-node filters. This can be used to test the source/target independently.",null,null],[12,"source","","",0,null],[12,"target","","",0,null],[5,"visit_all_item_likes_in_krate","rustc_typeck::dep_graph","Visit all the items in the krate in some order. When visiting a particular item, first create a dep-node by calling `dep_node_fn` and push that onto the dep-graph stack of tasks, and also create a read edge from the corresponding AST node. This is used in compiler passes to automatically record the item that they are working on.",null,null],[3,"WorkProductId","","A \"work product\" corresponds to a `.o` (or other) file that we save in between runs. These ids do not have a DefId but rather some independent path or string that persists between runs without the need to be mapped or unmapped. (This ensures we can serialize them even in the absence of a tcx.)",null,null],[12,"0","","",1,null],[8,"DepTrackingMapConfig","","",null,null],[16,"Key","","",2,null],[16,"Value","","",2,null],[10,"to_dep_node","","",2,null],[3,"AssertDepGraphSafe","","A convenient override that lets you pass arbitrary state into a task. Every use should be accompanied by a comment explaining why it makes sense (or how it could be refactored away in the future).",null,null],[12,"0","","",3,null],[3,"DepTask","","",null,null],[4,"DepNode","","",null,null],[13,"Krate","","",4,null],[13,"Hir","","",4,null],[13,"HirBody","","",4,null],[13,"MetaData","","",4,null],[13,"WorkProduct","","",4,null],[13,"CollectLanguageItems","","",4,null],[13,"CheckStaticRecursion","","",4,null],[13,"ResolveLifetimes","","",4,null],[13,"RegionResolveCrate","","",4,null],[13,"CheckLoops","","",4,null],[13,"PluginRegistrar","","",4,null],[13,"StabilityIndex","","",4,null],[13,"CollectItem","","",4,null],[13,"CollectItemSig","","",4,null],[13,"Coherence","","",4,null],[13,"EffectCheck","","",4,null],[13,"Liveness","","",4,null],[13,"Resolve","","",4,null],[13,"EntryPoint","","",4,null],[13,"CheckEntryFn","","",4,null],[13,"CoherenceCheckTrait","","",4,null],[13,"CoherenceCheckImpl","","",4,null],[13,"CoherenceOverlapCheck","","",4,null],[13,"CoherenceOverlapCheckSpecial","","",4,null],[13,"CoherenceOverlapInherentCheck","","",4,null],[13,"CoherenceOrphanCheck","","",4,null],[13,"Variance","","",4,null],[13,"WfCheck","","",4,null],[13,"TypeckItemType","","",4,null],[13,"UnusedTraitCheck","","",4,null],[13,"CheckConst","","",4,null],[13,"Privacy","","",4,null],[13,"IntrinsicCheck","","",4,null],[13,"MatchCheck","","",4,null],[13,"MirKrate","","",4,null],[13,"Mir","","",4,null],[13,"BorrowCheckKrate","","",4,null],[13,"BorrowCheck","","",4,null],[13,"RvalueCheck","","",4,null],[13,"Reachability","","",4,null],[13,"DeadCheck","","",4,null],[13,"StabilityCheck","","",4,null],[13,"LateLintCheck","","",4,null],[13,"TransCrate","","",4,null],[13,"TransCrateItem","","",4,null],[13,"TransInlinedItem","","",4,null],[13,"TransWriteMetadata","","",4,null],[13,"LinkBinary","","",4,null],[13,"AssociatedItems","","",4,null],[13,"ItemSignature","","",4,null],[13,"TypeParamPredicates","","",4,null],[13,"SizedConstraint","","",4,null],[13,"AdtDestructor","","",4,null],[13,"AssociatedItemDefIds","","",4,null],[13,"InherentImpls","","",4,null],[13,"TypeckBodiesKrate","","",4,null],[13,"TypeckTables","","",4,null],[13,"UsedTraitImports","","",4,null],[13,"MonomorphicConstEval","","",4,null],[13,"TraitImpls","","",4,null],[13,"TraitItems","","",4,null],[13,"ReprHints","","",4,null],[13,"TraitSelect","","",4,null],[12,"trait_def_id","rustc_typeck::dep_graph::DepNode","",4,null],[12,"input_def_id","","",4,null],[13,"ProjectionCache","rustc_typeck::dep_graph","",4,null],[12,"def_ids","rustc_typeck::dep_graph::DepNode","",4,null],[3,"DepTrackingMap","rustc_typeck::dep_graph","A DepTrackingMap offers a subset of the `Map` API and ensures that we make calls to `read` and `write` as appropriate. We key the maps with a unique type for brevity.",null,null],[3,"DepGraphQuery","","",null,null],[12,"graph","","",5,null],[12,"indices","","",5,null],[5,"visit_all_bodies_in_krate","","",null,null],[8,"DepGraphSafe","","The `DepGraphSafe` trait is used to specify what kinds of values are safe to \"leak\" into a task. The idea is that this should be only be implemented for things like the tcx as well as various id types, which will create reads in the dep-graph whenever the trait loads anything that might depend on the input program.",null,null],[3,"DepGraph","","",null,null],[3,"WorkProduct","","A \"work product\" is an intermediate result that we save into the incremental directory for later re-use. The primary example are the object files that we save for each partition at code generation time.",null,null],[12,"input_hash","","Extra hash used to decide if work-product is still suitable; note that this is *not* a hash of the work-product itself. See documentation on `WorkProduct` type for an example.",6,null],[12,"saved_files","","Saved files associated with this CGU",6,null],[0,"hir","rustc_typeck","",null,null],[6,"HirVec","rustc_typeck::hir","HIR doesn't commit to a concrete storage type and have its own alias for a vector. It can be `Vec`, `P<[T]>` or potentially `Box<[T]>`, or some other container with similar behavior. Unlike AST, HIR is mostly a static structure, so we can use an owned slice instead of `Vec` to avoid keeping extra capacity.",null,null],[0,"check_attr","","",null,null],[5,"check_crate","rustc_typeck::hir::check_attr","",null,null],[0,"def","rustc_typeck::hir","",null,null],[4,"CtorKind","rustc_typeck::hir::def","",null,null],[13,"Fn","","",7,null],[13,"Const","","",7,null],[13,"Fictive","","",7,null],[4,"Def","","",null,null],[13,"Mod","","",8,null],[13,"Struct","","",8,null],[13,"Union","","",8,null],[13,"Enum","","",8,null],[13,"Variant","","",8,null],[13,"Trait","","",8,null],[13,"TyAlias","","",8,null],[13,"AssociatedTy","","",8,null],[13,"PrimTy","","",8,null],[13,"TyParam","","",8,null],[13,"SelfTy","","",8,null],[13,"Fn","","",8,null],[13,"Const","","",8,null],[13,"Static","","",8,null],[13,"StructCtor","","",8,null],[13,"VariantCtor","","",8,null],[13,"Method","","",8,null],[13,"AssociatedConst","","",8,null],[13,"Local","","",8,null],[13,"Upvar","","",8,null],[13,"Label","","",8,null],[13,"Macro","","",8,null],[13,"Err","","",8,null],[3,"PathResolution","","The result of resolving a path before lowering to HIR. `base_def` is definition of resolved part of the path, `unresolved_segments` is the number of unresolved segments.     module::Type::AssocX::AssocY::MethodOrAssocType     ^~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     base_def      unresolved_segments = 3",null,null],[6,"DefMap","","",null,null],[6,"ExportMap","","",null,null],[3,"Export","","",null,null],[12,"name","","",9,null],[12,"def","","",9,null],[0,"def_id","rustc_typeck::hir","",null,null],[3,"CrateNum","rustc_typeck::hir::def_id","",null,null],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum LOCAL_CRATE in their DefId.",null,null],[17,"BUILTIN_MACROS_CRATE","","Virtual crate for builtin macros",null,null],[3,"DefIndex","","A DefIndex is an index into the hir-map for a crate, identifying a particular definition. It should really be considered an interned shorthand for a particular DefPath.",null,null],[17,"CRATE_DEF_INDEX","","The crate root is always assigned index 0 by the AST Map code, thanks to `NodeCollector::new`.",null,null],[3,"DefId","","A DefId identifies a particular *definition*, by combining a crate index and a def index.",null,null],[12,"krate","","",10,null],[12,"index","","",10,null],[0,"intravisit","rustc_typeck::hir","HIR walker for walking the contents of nodes.",null,null],[4,"FnKind","rustc_typeck::hir::intravisit","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",11,null],[13,"Method","","fn foo(&self)",11,null],[13,"Closure","","|x, y| {}",11,null],[4,"NestedVisitorMap","","Specifies what nested things a visitor wants to visit. The most common choice is `OnlyBodies`, which will cause the visitor to visit fn bodies for fns that it encounters, but skip over nested item-like things.",null,null],[13,"None","","Do not visit any nested things. When you add a new \"non-nested\" thing, you will want to audit such uses to see if they remain valid.",12,null],[13,"OnlyBodies","","Do not visit nested item-like things, but visit nested things that are inside of an item-like.",12,null],[13,"All","","Visit all nested things, including item-likes.",12,null],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `intravisit::walk_mod`.",null,null],[10,"nested_visit_map","","The default versions of the `visit_nested_XXX` routines invoke this method to get a map to use. By selecting an enum variant, you control which kinds of nested HIR are visited; see `NestedVisitorMap` for details. By \"nested HIR\", we are referring to bits of HIR that are not directly embedded within one another but rather indirectly, through a table in the crate. This is done to control dependencies during incremental compilation: the non-inline bits of HIR can be tracked and hashed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_nested_item","","Invoked when a nested item is encountered. By default does nothing unless you override `nested_visit_map` to return `Some(_)`, in which case it will walk the item. **You probably don't want to override this method** -- instead, override `nested_visit_map` or use the \"shallow\" or \"deep\" visit patterns described on `itemlikevisit::ItemLikeVisitor`. The only reason to override this method is if you want a nested pattern but cannot supply a `Map`; see `nested_visit_map` for advice.",13,null],[11,"visit_nested_trait_item","","Like `visit_nested_item()`, but for trait items. See `visit_nested_item()` for advice on when to override this method.",13,null],[11,"visit_nested_impl_item","","Like `visit_nested_item()`, but for impl items. See `visit_nested_item()` for advice on when to override this method.",13,null],[11,"visit_nested_body","","Invoked to visit the body of a function, method or closure. Like visit_nested_item, does nothing by default unless you override `nested_visit_map` to return `Some(_)`, in which case it will walk the body.",13,null],[11,"visit_item","","Visit the top-level item and (optionally) nested items / impl items. See `visit_nested_item` for details.",13,null],[11,"visit_body","","",13,null],[11,"as_deep_visitor","","When invoking `visit_all_item_likes()`, you need to supply an item-like visitor.  This method converts a \"intra-visit\" visitor into an item-like visitor that walks the entire tree. If you use this, you probably don't want to process the contents of nested item-like things, since the outer loop will visit them as well.",13,{"inputs":[{"name":"self"}],"output":{"name":"deepvisitor"}}],[11,"visit_id","","",13,null],[11,"visit_def_mention","","",13,null],[11,"visit_name","","",13,null],[11,"visit_mod","","",13,null],[11,"visit_foreign_item","","",13,null],[11,"visit_local","","",13,null],[11,"visit_block","","",13,null],[11,"visit_stmt","","",13,null],[11,"visit_arm","","",13,null],[11,"visit_pat","","",13,null],[11,"visit_decl","","",13,null],[11,"visit_expr","","",13,null],[11,"visit_ty","","",13,null],[11,"visit_generics","","",13,null],[11,"visit_where_predicate","","",13,null],[11,"visit_fn_decl","","",13,null],[11,"visit_fn","","",13,null],[11,"visit_trait_item","","",13,null],[11,"visit_trait_item_ref","","",13,null],[11,"visit_impl_item","","",13,null],[11,"visit_impl_item_ref","","",13,null],[11,"visit_trait_ref","","",13,null],[11,"visit_ty_param_bound","","",13,null],[11,"visit_poly_trait_ref","","",13,null],[11,"visit_variant_data","","",13,null],[11,"visit_struct_field","","",13,null],[11,"visit_enum_def","","",13,null],[11,"visit_variant","","",13,null],[11,"visit_lifetime","","",13,null],[11,"visit_lifetime_def","","",13,null],[11,"visit_qpath","","",13,null],[11,"visit_path","","",13,null],[11,"visit_path_segment","","",13,null],[11,"visit_path_parameters","","",13,null],[11,"visit_assoc_type_binding","","",13,null],[11,"visit_attribute","","",13,null],[11,"visit_macro_def","","",13,null],[11,"visit_vis","","",13,null],[11,"visit_associated_item_kind","","",13,null],[11,"visit_defaultness","","",13,null],[5,"walk_opt_name","","",null,null],[5,"walk_opt_sp_name","","",null,null],[5,"walk_crate","","Walks the contents of a crate. See also `Crate::visit_all_items`.",null,null],[5,"walk_macro_def","","",null,null],[5,"walk_mod","","",null,null],[5,"walk_body","","",null,null],[5,"walk_local","","",null,null],[5,"walk_lifetime","","",null,null],[5,"walk_lifetime_def","","",null,null],[5,"walk_poly_trait_ref","","",null,null],[5,"walk_trait_ref","","",null,null],[5,"walk_item","","",null,null],[5,"walk_enum_def","","",null,null],[5,"walk_variant","","",null,null],[5,"walk_ty","","",null,null],[5,"walk_qpath","","",null,null],[5,"walk_path","","",null,null],[5,"walk_path_segment","","",null,null],[5,"walk_path_parameters","","",null,null],[5,"walk_assoc_type_binding","","",null,null],[5,"walk_pat","","",null,null],[5,"walk_foreign_item","","",null,null],[5,"walk_ty_param_bound","","",null,null],[5,"walk_generics","","",null,null],[5,"walk_where_predicate","","",null,null],[5,"walk_fn_ret_ty","","",null,null],[5,"walk_fn_decl","","",null,null],[5,"walk_fn_kind","","",null,null],[5,"walk_fn","","",null,null],[5,"walk_trait_item","","",null,null],[5,"walk_trait_item_ref","","",null,null],[5,"walk_impl_item","","",null,null],[5,"walk_impl_item_ref","","",null,null],[5,"walk_struct_def","","",null,null],[5,"walk_struct_field","","",null,null],[5,"walk_block","","",null,null],[5,"walk_stmt","","",null,null],[5,"walk_decl","","",null,null],[5,"walk_expr","","",null,null],[5,"walk_arm","","",null,null],[5,"walk_vis","","",null,null],[5,"walk_associated_item_kind","","",null,null],[5,"walk_defaultness","","",null,null],[3,"IdRange","","",null,null],[12,"min","","",14,null],[12,"max","","",14,null],[3,"IdRangeComputingVisitor","","",null,null],[0,"itemlikevisit","rustc_typeck::hir","",null,null],[8,"ItemLikeVisitor","rustc_typeck::hir::itemlikevisit","The \"item-like visitor\" visitor defines only the top-level methods that can be invoked by `Crate::visit_all_item_likes()`. Whether this trait is the right one to implement will depend on the overall pattern you need. Here are the three available patterns, in roughly the order of desirability:",null,null],[10,"visit_item","","",15,null],[10,"visit_trait_item","","",15,null],[10,"visit_impl_item","","",15,null],[3,"DeepVisitor","","",null,null],[0,"lowering","rustc_typeck::hir","",null,null],[3,"LoweringContext","rustc_typeck::hir::lowering","",null,null],[8,"Resolver","","",null,null],[10,"resolve_hir_path","","",16,null],[10,"get_resolution","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"definitions","","",16,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[5,"lower_crate","","",null,{"inputs":[{"name":"session"},{"name":"crate"},{"name":"resolver"}],"output":{"name":"crate"}}],[0,"map","rustc_typeck::hir","",null,null],[0,"blocks","rustc_typeck::hir::map","This module provides a simplified abstraction for working with code blocks identified by their integer node-id.  In particular, it captures a common set of attributes that all \"function-like things\" (represented by `FnLike` instances) share.  For example, all `FnLike` instances have a type signature (be it explicit or inferred).  And all `FnLike` instances have a body, i.e. the code that is run when the function-like thing it represents is invoked.",null,null],[3,"FnLikeNode","rustc_typeck::hir::map::blocks","An FnLikeNode is a Node that is like a fn, in that it has a decl and a body (as well as a NodeId, a span, etc).",null,null],[8,"MaybeFnLike","","MaybeFnLike wraps a method that indicates if an object corresponds to some FnLikeNode.",null,null],[10,"is_fn_like","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"Code","","Carries either an FnLikeNode or a Expr, as these are the two constructs that correspond to \"code\" (as in, something from which we can construct a control-flow graph).",null,null],[13,"FnLike","","",18,null],[13,"Expr","","",18,null],[0,"definitions","rustc_typeck::hir::map","For each definition, we track the following data.  A definition here is defined somewhat circularly as \"something with a def-id\", but it generally corresponds to things like structs, enums, etc. There are also some rather random cases (like const initializer expressions) that are mostly just leftovers.",null,null],[3,"DefPathTable","rustc_typeck::hir::map::definitions","The DefPathTable maps DefIndexes to DefKeys and vice versa. Internally the DefPathTable holds a tree of DefKeys, where each DefKey stores the DefIndex of its parent. There is one DefPathTable for each crate.",null,null],[3,"Definitions","","The definition table containing node definitions. It holds the DefPathTable for local DefIds/DefPaths and it also stores a mapping from NodeIds to local DefIds.",null,null],[3,"DefKey","","A unique identifier that we can use to lookup a definition precisely. It combines the index of the definition's parent (if any) with a `DisambiguatedDefPathData`.",null,null],[12,"parent","","Parent path.",19,null],[12,"disambiguated_data","","Identifier of this node.",19,null],[3,"DisambiguatedDefPathData","","Pair of `DefPathData` and an integer disambiguator. The integer is normally 0, but in the event that there are multiple defs with the same `parent` and `data`, we use this field to disambiguate between them. This introduces some artificial ordering dependency but means that if you have (e.g.) two impls for the same type in the same module, they do get distinct def-ids.",null,null],[12,"data","","",20,null],[12,"disambiguator","","",20,null],[3,"DefPath","","",null,null],[12,"data","","the path leading from the crate root to the item",21,null],[12,"krate","","what krate root is this path relative to?",21,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","The crate root (marker)",22,null],[13,"Misc","","",22,null],[13,"Impl","","An impl",22,null],[13,"TypeNs","","Something in the type NS",22,null],[13,"ValueNs","","Something in the value NS",22,null],[13,"Module","","A module declaration",22,null],[13,"MacroDef","","A macro rule",22,null],[13,"ClosureExpr","","A closure expression",22,null],[13,"TypeParam","","A type parameter (generic parameter)",22,null],[13,"LifetimeDef","","A lifetime definition",22,null],[13,"EnumVariant","","A variant of a enum",22,null],[13,"Field","","A struct field",22,null],[13,"StructCtor","","Implicit ctor for a tuple-like struct",22,null],[13,"Initializer","","Initializer for a const",22,null],[13,"Binding","","Pattern binding",22,null],[13,"ImplTrait","","An `impl Trait` type node.",22,null],[13,"Typeof","","A `typeof` type node.",22,null],[4,"Node","rustc_typeck::hir::map","",null,null],[13,"NodeItem","","",23,null],[13,"NodeForeignItem","","",23,null],[13,"NodeTraitItem","","",23,null],[13,"NodeImplItem","","",23,null],[13,"NodeVariant","","",23,null],[13,"NodeField","","",23,null],[13,"NodeExpr","","",23,null],[13,"NodeStmt","","",23,null],[13,"NodeTy","","",23,null],[13,"NodeTraitRef","","",23,null],[13,"NodeLocal","","",23,null],[13,"NodePat","","",23,null],[13,"NodeBlock","","",23,null],[13,"NodeStructCtor","","NodeStructCtor represents a tuple struct.",23,null],[13,"NodeLifetime","","",23,null],[13,"NodeTyParam","","",23,null],[13,"NodeVisibility","","",23,null],[3,"Forest","","Stores a crate and any number of inlined items from other crates.",null,null],[12,"dep_graph","","",24,null],[3,"Map","","Represents a mapping from Node IDs to AST elements and their parent Node IDs",null,null],[12,"forest","","The backing storage for all the AST nodes.",25,null],[12,"dep_graph","","Same as the dep_graph in forest, just available with one fewer deref. This is a gratuitious micro-optimization.",25,null],[3,"NodesMatchingSuffix","","",null,null],[5,"map_crate","","",null,{"inputs":[{"name":"forest"},{"name":"definitions"}],"output":{"name":"map"}}],[3,"DisambiguatedDefPathData","","Pair of `DefPathData` and an integer disambiguator. The integer is normally 0, but in the event that there are multiple defs with the same `parent` and `data`, we use this field to disambiguate between them. This introduces some artificial ordering dependency but means that if you have (e.g.) two impls for the same type in the same module, they do get distinct def-ids.",null,null],[12,"data","","",20,null],[12,"disambiguator","","",20,null],[3,"MacroInvocationData","","",null,null],[12,"mark","","",26,null],[12,"def_index","","",26,null],[12,"const_expr","","",26,null],[3,"DefCollector","","Creates def ids for nodes in the AST.",null,null],[12,"visit_macro_invoc","","",27,null],[3,"Definitions","","The definition table containing node definitions. It holds the DefPathTable for local DefIds/DefPaths and it also stores a mapping from NodeIds to local DefIds.",null,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","The crate root (marker)",22,null],[13,"Misc","","",22,null],[13,"Impl","","An impl",22,null],[13,"TypeNs","","Something in the type NS",22,null],[13,"ValueNs","","Something in the value NS",22,null],[13,"Module","","A module declaration",22,null],[13,"MacroDef","","A macro rule",22,null],[13,"ClosureExpr","","A closure expression",22,null],[13,"TypeParam","","A type parameter (generic parameter)",22,null],[13,"LifetimeDef","","A lifetime definition",22,null],[13,"EnumVariant","","A variant of a enum",22,null],[13,"Field","","A struct field",22,null],[13,"StructCtor","","Implicit ctor for a tuple-like struct",22,null],[13,"Initializer","","Initializer for a const",22,null],[13,"Binding","","Pattern binding",22,null],[13,"ImplTrait","","An `impl Trait` type node.",22,null],[13,"Typeof","","A `typeof` type node.",22,null],[3,"DefKey","","A unique identifier that we can use to lookup a definition precisely. It combines the index of the definition's parent (if any) with a `DisambiguatedDefPathData`.",null,null],[12,"parent","","Parent path.",19,null],[12,"disambiguated_data","","Identifier of this node.",19,null],[3,"DefPath","","",null,null],[12,"data","","the path leading from the crate root to the item",21,null],[12,"krate","","what krate root is this path relative to?",21,null],[0,"pat_util","rustc_typeck::hir","",null,null],[3,"EnumerateAndAdjust","rustc_typeck::hir::pat_util","",null,null],[8,"EnumerateAndAdjustIterator","","",null,null],[10,"enumerate_and_adjust","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"option"}],"output":{"name":"enumerateandadjust"}}],[0,"print","rustc_typeck::hir","",null,null],[4,"AnnNode","rustc_typeck::hir::print","",null,null],[13,"NodeName","","",29,null],[13,"NodeBlock","","",29,null],[13,"NodeItem","","",29,null],[13,"NodeSubItem","","",29,null],[13,"NodeExpr","","",29,null],[13,"NodePat","","",29,null],[4,"Nested","","",null,null],[13,"Item","","",30,null],[13,"TraitItem","","",30,null],[13,"ImplItem","","",30,null],[13,"Body","","",30,null],[13,"BodyArgPat","","",30,null],[8,"PpAnn","","",null,null],[11,"nested","","",31,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",31,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",31,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[3,"NoAnn","","",null,null],[17,"NO_ANN","","",null,null],[3,"State","","",null,null],[12,"s","","",32,null],[17,"indent_unit","","",null,null],[17,"default_columns","","",null,null],[5,"print_crate","","Requires you to pass an input filename and reader so that it can scan the input text for comments and literals to copy forward.",null,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"ppann"},{"name":"f"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[0,"svh","rustc_typeck::hir","Calculation and management of a Strict Version Hash for crates",null,null],[3,"Svh","rustc_typeck::hir::svh","",null,null],[3,"Lifetime","rustc_typeck::hir","",null,null],[12,"id","","",33,null],[12,"span","","",33,null],[12,"name","","Either \"'a\", referring to a named lifetime definition, or \"\" (aka keywords::Invalid), for elision placeholders.",33,null],[3,"LifetimeDef","","A lifetime definition, eg `'a: 'b+'c+'d`",null,null],[12,"lifetime","","",34,null],[12,"bounds","","",34,null],[12,"pure_wrt_drop","","",34,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name; for instance: std::cmp::PartialEq  .  It's represented as a sequence of identifiers, along with a bunch of supporting information.",null,null],[12,"span","","",35,null],[12,"def","","The definition that the path resolved to.",35,null],[12,"segments","","The segments in the path: the things separated by `::`.",35,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"name","","The identifier portion of this path segment.",36,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",36,null],[4,"PathParameters","","",null,null],[13,"AngleBracketedParameters","","The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`",37,null],[13,"ParenthesizedParameters","","The `(A,B)` and `C` in `Foo(A,B) -> C`",37,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",38,null],[12,"types","","The type parameters for this path segment, if present.",38,null],[12,"infer_types","","Whether to infer remaining type parameters, if any. This only applies to expression and pattern paths, and out of those only the segments with no type parameters to begin with, e.g. `Vec::new` is `<Vec<..>>::new::<..>`.",38,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present. E.g., `Foo<A=Bar>`.",38,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"span","","Overall span",39,null],[12,"inputs","","`(A,B)`",39,null],[12,"output","","`C`",39,null],[4,"TyParamBound","","The AST represents all type param bounds as types. typeck::collect::compute_bounds matches these against the \"special\" built-in traits (see middle::lang_items) and detects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",40,null],[13,"RegionTyParamBound","","",40,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",41,null],[13,"Maybe","","",41,null],[6,"TyParamBounds","","",null,null],[3,"TyParam","","",null,null],[12,"name","","",42,null],[12,"id","","",42,null],[12,"bounds","","",42,null],[12,"default","","",42,null],[12,"span","","",42,null],[12,"pure_wrt_drop","","",42,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",43,null],[12,"ty_params","","",43,null],[12,"where_clause","","",43,null],[12,"span","","",43,null],[4,"UnsafeGeneric","","",null,null],[13,"Region","","",44,null],[13,"Type","","",44,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",45,null],[12,"predicates","","",45,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, eg `for<'c> Foo: Send+Clone+'c`",46,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",46,null],[13,"EqPredicate","","An equality predicate (unsupported)",46,null],[3,"WhereBoundPredicate","","A type bound, eg `for<'c> Foo: Send+Clone+'c`",null,null],[12,"span","","",47,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",47,null],[12,"bounded_ty","","The type being bounded",47,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",47,null],[3,"WhereRegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",null,null],[12,"span","","",48,null],[12,"lifetime","","",48,null],[12,"bounds","","",48,null],[3,"WhereEqPredicate","","An equality predicate (unsupported), e.g. `T=int`",null,null],[12,"id","","",49,null],[12,"span","","",49,null],[12,"lhs_ty","","",49,null],[12,"rhs_ty","","",49,null],[6,"CrateConfig","","",null,null],[3,"Crate","","",null,null],[12,"module","","",50,null],[12,"attrs","","",50,null],[12,"span","","",50,null],[12,"exported_macros","","",50,null],[12,"items","","",50,null],[12,"trait_items","","",50,null],[12,"impl_items","","",50,null],[12,"bodies","","",50,null],[12,"trait_impls","","",50,null],[12,"trait_default_impl","","",50,null],[12,"body_ids","","A list of the body ids written out in the order in which they appear in the crate. If you're going to process all the bodies in the crate, you should iterate over this list rather than the keys of bodies.",50,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"name","","",51,null],[12,"attrs","","",51,null],[12,"id","","",51,null],[12,"span","","",51,null],[12,"body","","",51,null],[3,"Block","","",null,null],[12,"stmts","","Statements in a block",52,null],[12,"expr","","An expression at the end of the block without a semicolon, if any",52,null],[12,"id","","",52,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",52,null],[12,"span","","",52,null],[3,"Pat","","",null,null],[12,"id","","",53,null],[12,"node","","",53,null],[12,"span","","",53,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"name","","The identifier for the field",54,null],[12,"pat","","The pattern the field is destructured to",54,null],[12,"is_shorthand","","",54,null],[4,"BindingMode","","",null,null],[13,"BindByRef","","",55,null],[13,"BindByValue","","",55,null],[4,"RangeEnd","","",null,null],[13,"Included","","",56,null],[13,"Excluded","","",56,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",57,null],[13,"Binding","","A fresh binding `ref mut binding @ OPT_SUBPATTERN`. The `DefId` is for the definition of the variable being bound.",57,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",57,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",57,null],[13,"Path","","A path pattern for an unit struct/variant or a (maybe-associated) constant.",57,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",57,null],[13,"Box","","A `box` pattern",57,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",57,null],[13,"Lit","","A literal",57,null],[13,"Range","","A range pattern, e.g. `1...2` or `1..2`",57,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `PatKind::Slice(box [a, b], Some(i), box [y, z])`",57,null],[4,"Mutability","","",null,null],[13,"MutMutable","","",58,null],[13,"MutImmutable","","",58,null],[4,"BinOp_","","",null,null],[13,"BiAdd","","The `+` operator (addition)",59,null],[13,"BiSub","","The `-` operator (subtraction)",59,null],[13,"BiMul","","The `*` operator (multiplication)",59,null],[13,"BiDiv","","The `/` operator (division)",59,null],[13,"BiRem","","The `%` operator (modulus)",59,null],[13,"BiAnd","","The `&&` operator (logical and)",59,null],[13,"BiOr","","The `||` operator (logical or)",59,null],[13,"BiBitXor","","The `^` operator (bitwise xor)",59,null],[13,"BiBitAnd","","The `&` operator (bitwise and)",59,null],[13,"BiBitOr","","The `|` operator (bitwise or)",59,null],[13,"BiShl","","The `<<` operator (shift left)",59,null],[13,"BiShr","","The `>>` operator (shift right)",59,null],[13,"BiEq","","The `==` operator (equality)",59,null],[13,"BiLt","","The `<` operator (less than)",59,null],[13,"BiLe","","The `<=` operator (less than or equal to)",59,null],[13,"BiNe","","The `!=` operator (not equal to)",59,null],[13,"BiGe","","The `>=` operator (greater than or equal to)",59,null],[13,"BiGt","","The `>` operator (greater than)",59,null],[6,"BinOp","","",null,null],[4,"UnOp","","",null,null],[13,"UnDeref","","The `*` operator for dereferencing",60,null],[13,"UnNot","","The `!` operator for logical inversion",60,null],[13,"UnNeg","","The `-` operator for negation",60,null],[6,"Stmt","","A statement",null,null],[4,"Stmt_","","",null,null],[13,"StmtDecl","","Could be an item or a local (let) binding:",61,null],[13,"StmtExpr","","Expr without trailing semi-colon (must have unit type):",61,null],[13,"StmtSemi","","Expr with trailing semi-colon (may have any type):",61,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",62,null],[12,"ty","","",62,null],[12,"init","","Initializer expression to set the value, if any",62,null],[12,"id","","",62,null],[12,"span","","",62,null],[12,"attrs","","",62,null],[6,"Decl","","",null,null],[4,"Decl_","","",null,null],[13,"DeclLocal","","A local (let) binding:",63,null],[13,"DeclItem","","An item binding:",63,null],[3,"Arm","","represents one arm of a 'match'",null,null],[12,"attrs","","",64,null],[12,"pats","","",64,null],[12,"guard","","",64,null],[12,"body","","",64,null],[3,"Field","","",null,null],[12,"name","","",65,null],[12,"expr","","",65,null],[12,"span","","",65,null],[12,"is_shorthand","","",65,null],[4,"BlockCheckMode","","",null,null],[13,"DefaultBlock","","",66,null],[13,"UnsafeBlock","","",66,null],[13,"PushUnsafeBlock","","",66,null],[13,"PopUnsafeBlock","","",66,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",67,null],[13,"UserProvided","","",67,null],[3,"BodyId","","",null,null],[12,"node_id","","",68,null],[3,"Body","","The body of a function or constant value.",null,null],[12,"arguments","","",69,null],[12,"value","","",69,null],[3,"Expr","","An expression",null,null],[12,"id","","",70,null],[12,"span","","",70,null],[12,"node","","",70,null],[12,"attrs","","",70,null],[4,"Expr_","","",null,null],[13,"ExprBox","","A `box x` expression.",71,null],[13,"ExprArray","","An array (`[a, b, c, d]`)",71,null],[13,"ExprCall","","A function call",71,null],[13,"ExprMethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",71,null],[13,"ExprTup","","A tuple (`(a, b, c ,d)`)",71,null],[13,"ExprBinary","","A binary operation (For example: `a + b`, `a * b`)",71,null],[13,"ExprUnary","","A unary operation (For example: `!x`, `*x`)",71,null],[13,"ExprLit","","A literal (For example: `1`, `\"foo\"`)",71,null],[13,"ExprCast","","A cast (`foo as f64`)",71,null],[13,"ExprType","","",71,null],[13,"ExprIf","","An `if` block, with an optional else block",71,null],[13,"ExprWhile","","A while loop, with an optional label",71,null],[13,"ExprLoop","","Conditionless loop (can be exited with break, continue, or return)",71,null],[13,"ExprMatch","","A `match` block, with a source that indicates whether or not it is the result of a desugaring, and if so, which kind.",71,null],[13,"ExprClosure","","A closure (for example, `move |a, b, c| {a + b + c}`).",71,null],[13,"ExprBlock","","A block (`{ ... }`)",71,null],[13,"ExprAssign","","An assignment (`a = foo()`)",71,null],[13,"ExprAssignOp","","An assignment with an operator",71,null],[13,"ExprField","","Access of a named struct field (`obj.foo`)",71,null],[13,"ExprTupField","","Access of an unnamed field of a struct or tuple-struct",71,null],[13,"ExprIndex","","An indexing operation (`foo[2]`)",71,null],[13,"ExprPath","","Path to a definition, possibly containing lifetime or type parameters.",71,null],[13,"ExprAddrOf","","A referencing operation (`&a` or `&mut a`)",71,null],[13,"ExprBreak","","A `break`, with an optional label to break",71,null],[13,"ExprAgain","","A `continue`, with an optional label",71,null],[13,"ExprRet","","A `return`, with an optional value to be returned",71,null],[13,"ExprInlineAsm","","Inline assembly (from `asm!`), with its outputs and inputs.",71,null],[13,"ExprStruct","","A struct or struct-like variant literal expression.",71,null],[13,"ExprRepeat","","An array literal constructed from one repeated element.",71,null],[4,"QPath","","Optionally `Self`-qualified value/type path or associated extension.",null,null],[13,"Resolved","","Path to a definition, optionally \"fully-qualified\" with a `Self` type, if the path points to an associated item in a trait.",72,null],[13,"TypeRelative","","Type-related paths, e.g. `<T>::default` or `<T>::Output`. Will be resolved by type-checking to an associated item.",72,null],[4,"MatchSource","","Hints at the original code for a `match _ { .. }`",null,null],[13,"Normal","","A `match _ { .. }`",73,null],[13,"IfLetDesugar","","An `if let _ = _ { .. }` (optionally with `else { .. }`)",73,null],[12,"contains_else_clause","rustc_typeck::hir::MatchSource","",73,null],[13,"WhileLetDesugar","rustc_typeck::hir","A `while let _ = _ { .. }` (which was desugared to a `loop { match _ { .. } }`)",73,null],[13,"ForLoopDesugar","","A desugared `for _ in _ { .. }` loop",73,null],[13,"TryDesugar","","A desugared `?` operator",73,null],[4,"LoopSource","","The loop type that yielded an ExprLoop",null,null],[13,"Loop","","A `loop { .. }` loop",74,null],[13,"WhileLet","","A `while let _ = _ { .. }` loop",74,null],[13,"ForLoop","","A `for _ in _ { .. }` loop",74,null],[4,"LoopIdError","","",null,null],[13,"OutsideLoopScope","","",75,null],[13,"UnlabeledCfInWhileCondition","","",75,null],[13,"UnresolvedLabel","","",75,null],[4,"LoopIdResult","","",null,null],[13,"Ok","","",76,null],[13,"Err","","",76,null],[3,"Destination","","",null,null],[12,"ident","","",77,null],[12,"loop_id","","",77,null],[4,"CaptureClause","","",null,null],[13,"CaptureByValue","","",78,null],[13,"CaptureByRef","","",78,null],[3,"MutTy","","",null,null],[12,"ty","","",79,null],[12,"mutbl","","",79,null],[3,"MethodSig","","Represents a method's signature in a trait declaration or implementation.",null,null],[12,"unsafety","","",80,null],[12,"constness","","",80,null],[12,"abi","","",80,null],[12,"decl","","",80,null],[12,"generics","","",80,null],[3,"TraitItemId","","",null,null],[12,"node_id","","",81,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",82,null],[12,"name","","",82,null],[12,"attrs","","",82,null],[12,"node","","",82,null],[12,"span","","",82,null],[4,"TraitMethod","","A trait method's body (or just argument names).",null,null],[13,"Required","","No default body in the trait, just a signature.",83,null],[13,"Provided","","Both signature and body are provided in the trait.",83,null],[4,"TraitItemKind","","Represents a trait method or associated constant or type",null,null],[13,"Const","","An associated constant with an optional value (otherwise `impl`s must contain a value)",84,null],[13,"Method","","A method with an optional body",84,null],[13,"Type","","An associated type with (possibly empty) bounds and optional concrete type",84,null],[3,"ImplItemId","","",null,null],[12,"node_id","","",85,null],[3,"ImplItem","","Represents anything within an `impl` block",null,null],[12,"id","","",86,null],[12,"name","","",86,null],[12,"vis","","",86,null],[12,"defaultness","","",86,null],[12,"attrs","","",86,null],[12,"node","","",86,null],[12,"span","","",86,null],[4,"ImplItemKind","","Represents different contents within `impl`s",null,null],[13,"Const","","An associated constant of the given type, set to the constant result of the expression",87,null],[13,"Method","","A method implementation with the given signature and body",87,null],[13,"Type","","An associated type",87,null],[3,"TypeBinding","","",null,null],[12,"id","","",88,null],[12,"name","","",88,null],[12,"ty","","",88,null],[12,"span","","",88,null],[3,"Ty","","",null,null],[12,"id","","",89,null],[12,"node","","",89,null],[12,"span","","",89,null],[4,"PrimTy","","Not represented directly in the AST, referred to by name through a ty_path.",null,null],[13,"TyInt","","",90,null],[13,"TyUint","","",90,null],[13,"TyFloat","","",90,null],[13,"TyStr","","",90,null],[13,"TyBool","","",90,null],[13,"TyChar","","",90,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",91,null],[12,"abi","","",91,null],[12,"lifetimes","","",91,null],[12,"decl","","",91,null],[4,"Ty_","","The different kinds of types recognized by the compiler",null,null],[13,"TySlice","","A variable length slice (`[T]`)",92,null],[13,"TyArray","","A fixed length array (`[T; n]`)",92,null],[13,"TyPtr","","A raw pointer (`*const T` or `*mut T`)",92,null],[13,"TyRptr","","A reference (`&'a T` or `&'a mut T`)",92,null],[13,"TyBareFn","","A bare function (e.g. `fn(usize) -> bool`)",92,null],[13,"TyNever","","The never type (`!`)",92,null],[13,"TyTup","","A tuple (`(A, B, C, D,...)`)",92,null],[13,"TyPath","","A path to a type definition (`module::module::...::Type`), or an associated type, e.g. `<Vec<T> as Trait>::Type` or `<T>::Target`.",92,null],[13,"TyTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",92,null],[13,"TyImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",92,null],[13,"TyTypeof","","Unused for now",92,null],[13,"TyInfer","","TyInfer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",92,null],[3,"InlineAsmOutput","","",null,null],[12,"constraint","","",93,null],[12,"is_rw","","",93,null],[12,"is_indirect","","",93,null],[3,"InlineAsm","","",null,null],[12,"asm","","",94,null],[12,"asm_str_style","","",94,null],[12,"outputs","","",94,null],[12,"inputs","","",94,null],[12,"clobbers","","",94,null],[12,"volatile","","",94,null],[12,"alignstack","","",94,null],[12,"dialect","","",94,null],[12,"expn_id","","",94,null],[3,"Arg","","represents an argument in a function header",null,null],[12,"pat","","",95,null],[12,"id","","",95,null],[3,"FnDecl","","Represents the header (not the body) of a function declaration",null,null],[12,"inputs","","",96,null],[12,"output","","",96,null],[12,"variadic","","",96,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",97,null],[13,"Normal","","",97,null],[4,"Constness","","",null,null],[13,"Const","","",98,null],[13,"NotConst","","",98,null],[4,"Defaultness","","",null,null],[13,"Default","","",99,null],[12,"has_value","rustc_typeck::hir::Defaultness","",99,null],[13,"Final","rustc_typeck::hir","",99,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",100,null],[13,"Negative","","`impl !Trait for Type`",100,null],[4,"FunctionRetTy","","",null,null],[13,"DefaultReturn","","Return type is not specified.",101,null],[13,"Return","","Everything else",101,null],[3,"Mod","","",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`. For `mod foo;`, the inner span ranges from the first token to the last token in the external file.",102,null],[12,"item_ids","","",102,null],[3,"ForeignMod","","",null,null],[12,"abi","","",103,null],[12,"items","","",103,null],[3,"EnumDef","","",null,null],[12,"variants","","",104,null],[3,"Variant_","","",null,null],[12,"name","","",105,null],[12,"attrs","","",105,null],[12,"data","","",105,null],[12,"disr_expr","","Explicit discriminant, eg `Foo = 1`",105,null],[6,"Variant","","",null,null],[4,"UseKind","","",null,null],[13,"Single","","One import, e.g. `use foo::bar` or `use foo::bar as baz`. Also produced for each element of a list `use`, e.g.",106,null],[13,"Glob","","Glob import, e.g. `use foo::*`.",106,null],[13,"ListStem","","Degenerate list import, e.g. `use foo::{a, b}` produces an additional `use foo::{}` for performing checks such as unstable feature gating. May be removed in the future.",106,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",107,null],[12,"ref_id","","",107,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",108,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",108,null],[12,"span","","",108,null],[4,"Visibility","","",null,null],[13,"Public","","",109,null],[13,"Crate","","",109,null],[13,"Restricted","","",109,null],[12,"path","rustc_typeck::hir::Visibility","",109,null],[12,"id","","",109,null],[13,"Inherited","rustc_typeck::hir","",109,null],[3,"StructField","","",null,null],[12,"span","","",110,null],[12,"name","","",110,null],[12,"vis","","",110,null],[12,"id","","",110,null],[12,"ty","","",110,null],[12,"attrs","","",110,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","",111,null],[13,"Tuple","","",111,null],[13,"Unit","","",111,null],[3,"ItemId","","",null,null],[12,"id","","",112,null],[3,"Item","","An item",null,null],[12,"name","","",113,null],[12,"attrs","","",113,null],[12,"id","","",113,null],[12,"node","","",113,null],[12,"vis","","",113,null],[12,"span","","",113,null],[4,"Item_","","",null,null],[13,"ItemExternCrate","","An`extern crate` item, with optional original crate name,",114,null],[13,"ItemUse","","`use foo::bar::*;` or `use foo::bar::baz as quux;`",114,null],[13,"ItemStatic","","A `static` item",114,null],[13,"ItemConst","","A `const` item",114,null],[13,"ItemFn","","A function declaration",114,null],[13,"ItemMod","","A module",114,null],[13,"ItemForeignMod","","An external module",114,null],[13,"ItemTy","","A type alias, e.g. `type Foo = Bar<u8>`",114,null],[13,"ItemEnum","","An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`",114,null],[13,"ItemStruct","","A struct definition, e.g. `struct Foo<A> {x: A}`",114,null],[13,"ItemUnion","","A union definition, e.g. `union Foo<A, B> {x: A, y: B}`",114,null],[13,"ItemTrait","","Represents a Trait Declaration",114,null],[13,"ItemDefaultImpl","","",114,null],[13,"ItemImpl","","An implementation, eg `impl<A> Trait for Foo { .. }`",114,null],[3,"TraitItemRef","","A reference from an trait to one of its associated items. This contains the item's id, naturally, but also the item's name and some other high-level details (like whether it is an associated type or method, and whether it is public). This allows other passes to find the impl they want without loading the id (which means fewer edges in the incremental compilation graph).",null,null],[12,"id","","",115,null],[12,"name","","",115,null],[12,"kind","","",115,null],[12,"span","","",115,null],[12,"defaultness","","",115,null],[3,"ImplItemRef","","A reference from an impl to one of its associated items. This contains the item's id, naturally, but also the item's name and some other high-level details (like whether it is an associated type or method, and whether it is public). This allows other passes to find the impl they want without loading the id (which means fewer edges in the incremental compilation graph).",null,null],[12,"id","","",116,null],[12,"name","","",116,null],[12,"kind","","",116,null],[12,"span","","",116,null],[12,"vis","","",116,null],[12,"defaultness","","",116,null],[4,"AssociatedItemKind","","",null,null],[13,"Const","","",117,null],[13,"Method","","",117,null],[12,"has_self","rustc_typeck::hir::AssociatedItemKind","",117,null],[13,"Type","rustc_typeck::hir","",117,null],[3,"ForeignItem","","",null,null],[12,"name","","",118,null],[12,"attrs","","",118,null],[12,"node","","",118,null],[12,"id","","",118,null],[12,"span","","",118,null],[12,"vis","","",118,null],[4,"ForeignItem_","","An item within an `extern` block",null,null],[13,"ForeignItemFn","","A foreign function",119,null],[13,"ForeignItemStatic","","A foreign static item (`static ext: u8`), with optional mutability (the boolean is true when mutable)",119,null],[3,"Freevar","","A free variable referred to in a function.",null,null],[12,"def","","The variable being accessed free.",120,null],[12,"span","","",120,null],[6,"FreevarMap","","",null,null],[6,"CaptureModeMap","","",null,null],[3,"TraitCandidate","","",null,null],[12,"def_id","","",121,null],[12,"import_id","","",121,null],[6,"TraitMap","","",null,null],[6,"GlobMap","","",null,null],[0,"lint","rustc_typeck","Lints, aka compiler warnings.",null,null],[3,"Lint","rustc_typeck::lint","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",122,null],[12,"default_level","","Default level for the lint.",122,null],[12,"desc","","Description of the lint or the issue it detects.",122,null],[6,"LintArray","","",null,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",123,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_body","","",124,null],[11,"check_body_post","","",124,null],[11,"check_name","","",124,null],[11,"check_crate","","",124,null],[11,"check_crate_post","","",124,null],[11,"check_mod","","",124,null],[11,"check_mod_post","","",124,null],[11,"check_foreign_item","","",124,null],[11,"check_foreign_item_post","","",124,null],[11,"check_item","","",124,null],[11,"check_item_post","","",124,null],[11,"check_local","","",124,null],[11,"check_block","","",124,null],[11,"check_block_post","","",124,null],[11,"check_stmt","","",124,null],[11,"check_arm","","",124,null],[11,"check_pat","","",124,null],[11,"check_decl","","",124,null],[11,"check_expr","","",124,null],[11,"check_expr_post","","",124,null],[11,"check_ty","","",124,null],[11,"check_generics","","",124,null],[11,"check_fn","","",124,null],[11,"check_fn_post","","",124,null],[11,"check_trait_item","","",124,null],[11,"check_trait_item_post","","",124,null],[11,"check_impl_item","","",124,null],[11,"check_impl_item_post","","",124,null],[11,"check_struct_def","","",124,null],[11,"check_struct_def_post","","",124,null],[11,"check_struct_field","","",124,null],[11,"check_variant","","",124,null],[11,"check_variant_post","","",124,null],[11,"check_lifetime","","",124,null],[11,"check_lifetime_def","","",124,null],[11,"check_path","","",124,null],[11,"check_attribute","","",124,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",124,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",124,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",125,null],[11,"check_crate","","",125,null],[11,"check_crate_post","","",125,null],[11,"check_mod","","",125,null],[11,"check_mod_post","","",125,null],[11,"check_foreign_item","","",125,null],[11,"check_foreign_item_post","","",125,null],[11,"check_item","","",125,null],[11,"check_item_post","","",125,null],[11,"check_local","","",125,null],[11,"check_block","","",125,null],[11,"check_block_post","","",125,null],[11,"check_stmt","","",125,null],[11,"check_arm","","",125,null],[11,"check_pat","","",125,null],[11,"check_expr","","",125,null],[11,"check_expr_post","","",125,null],[11,"check_ty","","",125,null],[11,"check_generics","","",125,null],[11,"check_fn","","",125,null],[11,"check_fn_post","","",125,null],[11,"check_trait_item","","",125,null],[11,"check_trait_item_post","","",125,null],[11,"check_impl_item","","",125,null],[11,"check_impl_item_post","","",125,null],[11,"check_struct_def","","",125,null],[11,"check_struct_def_post","","",125,null],[11,"check_struct_field","","",125,null],[11,"check_variant","","",125,null],[11,"check_variant_post","","",125,null],[11,"check_lifetime","","",125,null],[11,"check_lifetime_def","","",125,null],[11,"check_path","","",125,null],[11,"check_path_list_item","","",125,null],[11,"check_attribute","","",125,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such as `#[allow(...)]`. Called with *all* the attributes of that node.",125,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",125,null],[6,"EarlyLintPassObject","","A lint pass boxed up as a trait object.",null,null],[6,"LateLintPassObject","","",null,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",126,null],[13,"Warn","","",126,null],[13,"Deny","","",126,null],[13,"Forbid","","",126,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared in rustc or a plugin.",127,null],[13,"Node","","Lint level was set by an attribute.",127,null],[13,"CommandLine","","Lint level was set by a command-line flag.",127,null],[6,"LevelSource","","",null,null],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[7,"CONST_ERR","rustc_typeck::lint::builtin","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"UNREACHABLE_PATTERNS","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"LIFETIME_UNDERSCORE","","",null,null],[7,"RESOLVE_TRAIT_ON_DEFAULTED_UNIT","","",null,null],[7,"SAFE_EXTERN_STATICS","","",null,null],[7,"PATTERNS_IN_FNS_WITHOUT_BODY","","",null,null],[7,"EXTRA_REQUIREMENT_IN_IMPL","","",null,null],[7,"LEGACY_DIRECTORY_OWNERSHIP","","",null,null],[7,"LEGACY_IMPORTS","","",null,null],[7,"LEGACY_CONSTRUCTOR_VISIBILITY","","",null,null],[7,"MISSING_FRAGMENT_SPECIFIER","","",null,null],[7,"DEPRECATED","","",null,null],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s which are used by other parts of the compiler.",null,null],[8,"LintContext","rustc_typeck::lint","",null,null],[10,"sess","","",128,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[10,"lints","","",128,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"mut_lints","","",128,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[10,"level_stack","","",128,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"enter_attrs","","",128,null],[10,"exit_attrs","","",128,null],[11,"current_level","","Get the level of `lint` at the current position of the lint traversal.",128,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"level"}}],[11,"level_src","","",128,{"inputs":[{"name":"self"},{"name":"lint"}],"output":{"name":"option"}}],[11,"lookup_and_emit","","",128,null],[11,"lookup","","",128,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",128,null],[11,"early_lint","","",128,null],[11,"struct_span_lint","","",128,{"inputs":[{"name":"self"},{"name":"lint"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",128,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",128,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",128,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the current lint context, call the provided function, then reset the lints in effect to their previous state.",128,null],[8,"IntoEarlyLint","","",null,null],[10,"into_early_lint","","",129,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"earlylint"}}],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to HIR.",null,null],[12,"sess","","Type context we're checking in.",130,null],[12,"krate","","The crate being checked.",130,null],[3,"EarlyLint","","When you call `add_lint` on the session, you wind up storing one of these, which records a \"potential lint\" at a particular point.",null,null],[12,"id","","what lint is this? (e.g., `dead_code`)",131,null],[12,"diagnostic","","the main message",131,null],[3,"LateContext","","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we're checking in.",132,null],[12,"tables","","Side-tables for the body we are in.",132,null],[12,"krate","","The crate being checked.",132,null],[12,"access_levels","","Items accessible from the crate being checked.",132,null],[5,"check_ast_crate","","",null,null],[3,"LintTable","","",null,null],[5,"check_crate","","Perform lint checking on a crate.",null,null],[3,"FutureIncompatibleInfo","","Extra information for a future incompatibility lint. See the call to `register_future_incompatible` in `librustc_lint/lib.rs` for guidelines.",null,null],[12,"id","","",133,null],[12,"reference","","",133,null],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all) according to `level`.",null,null],[5,"raw_struct_lint","","",null,null],[3,"LintStore","","Information about the registered lints.",null,null],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint attributes. Writing this as an iterator is an enormous mess.",null,null],[0,"middle","rustc_typeck","",null,null],[0,"expr_use_visitor","rustc_typeck::middle","A different sort of visitor for walking fn bodies.  Unlike the normal visitor, which just walks the entire body in one shot, the `ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_typeck::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when employing the ExprUseVisitor.",null,null],[10,"consume","","",134,null],[10,"matched_pat","","",134,null],[10,"consume_pat","","",134,null],[10,"borrow","","",134,null],[10,"decl_without_init","","",134,null],[10,"mutate","","",134,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",135,null],[13,"AddrOf","","",135,null],[13,"AutoRef","","",135,null],[13,"AutoUnsafe","","",135,null],[13,"RefBinding","","",135,null],[13,"OverloadedOperator","","",135,null],[13,"ClosureInvocation","","",135,null],[13,"ForLoop","","",135,null],[13,"MatchDiscriminant","","",135,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",136,null],[13,"Move","","",136,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",137,null],[13,"PatBindingMove","","",137,null],[13,"CaptureMove","","",137,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",138,null],[13,"BorrowingMatch","","",138,null],[13,"CopyingMatch","","",138,null],[13,"MovingMatch","","",138,null],[4,"MutateMode","","",null,null],[13,"Init","","",139,null],[13,"JustWrite","","",139,null],[13,"WriteAndRead","","",139,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_typeck::middle","",null,null],[4,"ConstVal","rustc_typeck::middle::const_val","",null,null],[13,"Float","","",140,null],[13,"Integral","","",140,null],[13,"Str","","",140,null],[13,"ByteStr","","",140,null],[13,"Bool","","",140,null],[13,"Function","","",140,null],[13,"Struct","","",140,null],[13,"Tuple","","",140,null],[13,"Array","","",140,null],[13,"Repeat","","",140,null],[13,"Char","","",140,null],[4,"ConstInt","","",null,null],[13,"I8","","",141,null],[13,"I16","","",141,null],[13,"I32","","",141,null],[13,"I64","","",141,null],[13,"I128","","",141,null],[13,"Isize","","",141,null],[13,"U8","","",141,null],[13,"U16","","",141,null],[13,"U32","","",141,null],[13,"U64","","",141,null],[13,"U128","","",141,null],[13,"Usize","","",141,null],[0,"cstore","rustc_typeck::middle","",null,null],[3,"LinkMeta","rustc_typeck::middle::cstore","",null,null],[12,"crate_name","","",142,null],[12,"crate_hash","","",142,null],[3,"CrateSource","","",null,null],[12,"dylib","","",143,null],[12,"rlib","","",143,null],[12,"rmeta","","",143,null],[4,"DepKind","","",null,null],[13,"UnexportedMacrosOnly","","A dependency that is only used for its macros, none of which are visible from other crates. These are included in the metadata only as placeholders and are ignored when decoding.",144,null],[13,"MacrosOnly","","A dependency that is only used for its macros.",144,null],[13,"Implicit","","A dependency that is always injected into the dependency list and so doesn't need to be linked to an rlib, e.g. the injected allocator.",144,null],[13,"Explicit","","A dependency that is required by an rlib version of this crate. Ordinary `extern crate`s result in `Explicit` dependencies.",144,null],[4,"LibSource","","",null,null],[13,"Some","","",145,null],[13,"MetadataOnly","","",145,null],[13,"None","","",145,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",146,null],[13,"RequireStatic","","",146,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",147,null],[13,"NativeStaticNobundle","","",147,null],[13,"NativeFramework","","",147,null],[13,"NativeUnknown","","",147,null],[3,"NativeLibrary","","",null,null],[12,"kind","","",148,null],[12,"name","","",148,null],[12,"cfg","","",148,null],[12,"foreign_items","","",148,null],[4,"LoadedMacro","","",null,null],[13,"MacroDef","","",149,null],[13,"ProcMacro","","",149,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused this crate to be loaded; note that there could be multiple such ids",150,null],[12,"span","","span of the extern crate that caused this to be loaded",150,null],[12,"direct","","If true, then this crate is the crate named by the extern crate referenced above. If false, then this crate is a dep of the crate.",150,null],[12,"path_len","","Number of links to reach the extern crate `def_id` declaration; used to select the extern crate with the shortest path",150,null],[8,"CrateStore","","A store of Rust crates, through with their metadata can be accessed.",null,null],[10,"crate_data_as_rc_any","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[10,"describe_def","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"def_span","","",151,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[10,"stability","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"deprecation","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"visibility","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[10,"visible_parent_map","","",151,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[10,"item_generics_cloned","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[10,"item_attrs","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"fn_arg_names","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"inherent_implementations_for_type","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"implementations_of_trait","","",151,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[10,"impl_polarity","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[10,"impl_parent","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"trait_of_item","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[10,"associated_item_cloned","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[10,"is_const_fn","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_default_impl","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_foreign_item","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_dllimport_foreign_item","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_statically_included_foreign_item","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_exported_symbol","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"dylib_dependency_formats","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"dep_kind","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[10,"export_macros","","",151,null],[10,"lang_items","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"missing_lang_items","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_staged_api","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_allocator","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_panic_runtime","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_compiler_builtins","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"is_sanitizer_runtime","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"panic_strategy","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[10,"extern_crate","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"crate_name","","The name of the crate as it is referred to in source code of the current crate.",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"original_crate_name","","The name of the crate as it is stored in the crate's metadata.",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"crate_hash","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[10,"crate_disambiguator","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[10,"plugin_registrar_fn","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"derive_registrar_fn","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[10,"native_libraries","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"exported_symbols","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[10,"is_no_builtins","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[10,"retrace_path","","",151,null],[10,"def_key","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[10,"def_path","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[10,"struct_field_names","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"item_children","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[10,"load_macro","","",151,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[10,"maybe_get_item_body","","",151,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[10,"item_body_nested_bodies","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[10,"const_is_rvalue_promotable_to_static","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"is_item_mir_available","","",151,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[10,"crates","","",151,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_libraries","","",151,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"used_link_args","","",151,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"metadata_filename","","",151,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"metadata_section_name","","",151,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[10,"used_crates","","",151,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[10,"used_crate_source","","",151,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[10,"extern_mod_stmt_cnum","","",151,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[10,"encode_metadata","","",151,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[10,"metadata_encoding_version","","",151,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates, for test purposes.",null,null],[8,"CrateLoader","","",null,null],[10,"process_item","","",152,null],[10,"postprocess","","",152,null],[0,"dataflow","rustc_typeck::middle","A module for propagating forward dataflow information. The analysis assumes that the items to be propagated can be represented as bits and thus uses bitvectors. Your job is simply to specify the so-called GEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_typeck::middle::dataflow","",null,null],[13,"Entry","","",153,null],[13,"Exit","","",153,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",154,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill takes effect only when control flows directly through the node in question, or if the kill's effect is associated with any control-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control flow goes over the node. A kill associated with the end of the scope of a variable declaration `let x;` is an example of a `ScopeEnd` kill.",156,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control flow goes through the node to completion. A kill associated with an assignment statement `x = expr;` is an example of an `Execution` kill.",156,null],[0,"dead","rustc_typeck::middle","",null,null],[5,"check_crate","rustc_typeck::middle::dead","",null,null],[0,"dependency_format","rustc_typeck::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_typeck::middle::dependency_format","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",157,null],[13,"IncludedFromDylib","","",157,null],[13,"Static","","",157,null],[13,"Dynamic","","",157,null],[5,"calculate","","",null,null],[0,"effect","rustc_typeck::middle","Enforces the Rust effect system. Currently there is just one effect, `unsafe`.",null,null],[5,"check_crate","rustc_typeck::middle::effect","",null,null],[0,"entry","rustc_typeck::middle","",null,null],[5,"find_entry_point","rustc_typeck::middle::entry","",null,null],[0,"free_region","rustc_typeck::middle","This file handles the relationships between free regions -- meaning lifetime parameters. Ordinarily, free regions are unrelated to one another, but they can be related via implied or explicit bounds.  In that case, we track the bounds using the `TransitiveRelation` type and use that to decide when one free region outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_typeck::middle::free_region","",null,null],[0,"intrinsicck","rustc_typeck::middle","",null,null],[5,"check_crate","rustc_typeck::middle::intrinsicck","",null,null],[0,"lang_items","rustc_typeck::middle","",null,null],[4,"LangItem","rustc_typeck::middle::lang_items","",null,null],[13,"CharImplItem","","",158,null],[13,"StrImplItem","","",158,null],[13,"SliceImplItem","","",158,null],[13,"ConstPtrImplItem","","",158,null],[13,"MutPtrImplItem","","",158,null],[13,"I8ImplItem","","",158,null],[13,"I16ImplItem","","",158,null],[13,"I32ImplItem","","",158,null],[13,"I64ImplItem","","",158,null],[13,"I128ImplItem","","",158,null],[13,"IsizeImplItem","","",158,null],[13,"U8ImplItem","","",158,null],[13,"U16ImplItem","","",158,null],[13,"U32ImplItem","","",158,null],[13,"U64ImplItem","","",158,null],[13,"U128ImplItem","","",158,null],[13,"UsizeImplItem","","",158,null],[13,"F32ImplItem","","",158,null],[13,"F64ImplItem","","",158,null],[13,"SendTraitLangItem","","",158,null],[13,"SizedTraitLangItem","","",158,null],[13,"UnsizeTraitLangItem","","",158,null],[13,"CopyTraitLangItem","","",158,null],[13,"SyncTraitLangItem","","",158,null],[13,"DropTraitLangItem","","",158,null],[13,"CoerceUnsizedTraitLangItem","","",158,null],[13,"AddTraitLangItem","","",158,null],[13,"SubTraitLangItem","","",158,null],[13,"MulTraitLangItem","","",158,null],[13,"DivTraitLangItem","","",158,null],[13,"RemTraitLangItem","","",158,null],[13,"NegTraitLangItem","","",158,null],[13,"NotTraitLangItem","","",158,null],[13,"BitXorTraitLangItem","","",158,null],[13,"BitAndTraitLangItem","","",158,null],[13,"BitOrTraitLangItem","","",158,null],[13,"ShlTraitLangItem","","",158,null],[13,"ShrTraitLangItem","","",158,null],[13,"AddAssignTraitLangItem","","",158,null],[13,"SubAssignTraitLangItem","","",158,null],[13,"MulAssignTraitLangItem","","",158,null],[13,"DivAssignTraitLangItem","","",158,null],[13,"RemAssignTraitLangItem","","",158,null],[13,"BitXorAssignTraitLangItem","","",158,null],[13,"BitAndAssignTraitLangItem","","",158,null],[13,"BitOrAssignTraitLangItem","","",158,null],[13,"ShlAssignTraitLangItem","","",158,null],[13,"ShrAssignTraitLangItem","","",158,null],[13,"IndexTraitLangItem","","",158,null],[13,"IndexMutTraitLangItem","","",158,null],[13,"UnsafeCellTypeLangItem","","",158,null],[13,"DerefTraitLangItem","","",158,null],[13,"DerefMutTraitLangItem","","",158,null],[13,"FnTraitLangItem","","",158,null],[13,"FnMutTraitLangItem","","",158,null],[13,"FnOnceTraitLangItem","","",158,null],[13,"EqTraitLangItem","","",158,null],[13,"OrdTraitLangItem","","",158,null],[13,"StrEqFnLangItem","","",158,null],[13,"PanicFnLangItem","","",158,null],[13,"PanicBoundsCheckFnLangItem","","",158,null],[13,"PanicFmtLangItem","","",158,null],[13,"ExchangeMallocFnLangItem","","",158,null],[13,"BoxFreeFnLangItem","","",158,null],[13,"StrDupUniqFnLangItem","","",158,null],[13,"StartFnLangItem","","",158,null],[13,"EhPersonalityLangItem","","",158,null],[13,"EhUnwindResumeLangItem","","",158,null],[13,"MSVCTryFilterLangItem","","",158,null],[13,"OwnedBoxLangItem","","",158,null],[13,"PhantomDataItem","","",158,null],[13,"CovariantTypeItem","","",158,null],[13,"ContravariantTypeItem","","",158,null],[13,"InvariantTypeItem","","",158,null],[13,"CovariantLifetimeItem","","",158,null],[13,"ContravariantLifetimeItem","","",158,null],[13,"InvariantLifetimeItem","","",158,null],[13,"NoCopyItem","","",158,null],[13,"NonZeroItem","","",158,null],[13,"DebugTraitLangItem","","",158,null],[3,"LanguageItems","","",null,null],[12,"items","","",159,null],[12,"missing","","",159,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_typeck::middle","A classic liveness analysis based on dataflow over the AST.  Computes, for each local variable in a function, whether that variable is live at a given point.  Program execution points are identified by their id.",null,null],[5,"check_crate","rustc_typeck::middle::liveness","",null,null],[0,"mem_categorization","rustc_typeck::middle","Categorization",null,null],[4,"Categorization","rustc_typeck::middle::mem_categorization","",null,null],[13,"Rvalue","","",160,null],[13,"StaticItem","","",160,null],[13,"Upvar","","",160,null],[13,"Local","","",160,null],[13,"Deref","","",160,null],[13,"Interior","","",160,null],[13,"Downcast","","",160,null],[3,"Upvar","","",null,null],[12,"id","","",161,null],[12,"kind","","",161,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box<T>`",162,null],[13,"BorrowedPtr","","`&T`",162,null],[13,"UnsafePtr","","`*T`",162,null],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",162,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",163,null],[13,"InteriorElement","","",163,null],[4,"FieldName","","",null,null],[13,"NamedField","","",164,null],[13,"PositionalField","","",164,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",165,null],[13,"Pattern","","",165,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",166,null],[13,"OtherElement","","",166,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",167,null],[13,"McDeclared","","",167,null],[13,"McInherited","","",167,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",168,null],[13,"NoteUpvarRef","","",168,null],[13,"NoteNone","","",168,null],[3,"cmt_","","",null,null],[12,"id","","",169,null],[12,"span","","",169,null],[12,"cat","","",169,null],[12,"mutbl","","",169,null],[12,"ty","","",169,null],[12,"note","","",169,null],[6,"cmt","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",170,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"span","","",170,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",171,null],[3,"MemCategorizationOptions","","",null,null],[12,"during_closure_kind_inference","","",172,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",173,null],[13,"NonAliasable","","",173,null],[13,"ImmutableUnique","","",173,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",174,null],[13,"AliasableClosure","","",174,null],[13,"AliasableOther","","",174,null],[13,"UnaliasableImmutable","","",174,null],[13,"AliasableStatic","","",174,null],[13,"AliasableStaticMut","","",174,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_typeck::middle","A pass that checks to make sure private fields and methods aren't used outside their scopes. This pass will also generate a set of exported items which are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_typeck::middle::privacy","",null,null],[13,"Reachable","","",175,null],[13,"Exported","","",175,null],[13,"Public","","",175,null],[3,"AccessLevels","","",null,null],[12,"map","","",176,null],[6,"ExternalExports","","A set containing all exported definitions from external crates. The set does not contain any entries from local crates.",null,null],[0,"reachable","rustc_typeck::middle","",null,null],[5,"find_reachable","rustc_typeck::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_typeck::middle","This file actually contains two passes related to regions.  The first pass builds up the `scope_map`, which describes the parent links in the region hierarchy.  The second pass infers which types must be region parameterized.",null,null],[3,"CodeExtent","rustc_typeck::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling instead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be used to bound the lifetime/region for values.",null,null],[13,"Misc","","",177,null],[13,"CallSiteScope","","",177,null],[12,"fn_id","rustc_typeck::middle::region::CodeExtentData","",177,null],[12,"body_id","","",177,null],[13,"ParameterScope","rustc_typeck::middle::region","",177,null],[12,"fn_id","rustc_typeck::middle::region::CodeExtentData","",177,null],[12,"body_id","","",177,null],[13,"DestructionScope","rustc_typeck::middle::region","",177,null],[13,"Remainder","","",177,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",178,null],[12,"body_id","","",178,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced by `block.stmts[first_statement_index]`. Such subscopes represent a suffix of the block. Note that each subscope does not include the initializer expression, if any, for the statement indexed by `first_statement_index`.",null,null],[12,"block","","",179,null],[12,"first_statement_index","","",179,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[0,"recursion_limit","rustc_typeck::middle","",null,null],[5,"update_limits","rustc_typeck::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_typeck::middle","Name resolution for lifetimes.",null,null],[4,"Region","rustc_typeck::middle::resolve_lifetime","",null,null],[13,"Static","","",180,null],[13,"EarlyBound","","",180,null],[13,"LateBound","","",180,null],[13,"LateBoundAnon","","",180,null],[13,"Free","","",180,null],[4,"Set1","","A set containing, at most, one known element. If two distinct values are inserted into a set, then it becomes `Many`, which can be used to detect ambiguities.",null,null],[13,"Empty","","",181,null],[13,"One","","",181,null],[13,"Many","","",181,null],[6,"ObjectLifetimeDefault","","",null,null],[3,"NamedRegionMap","","",null,null],[12,"defs","","",182,null],[12,"late_bound","","",182,null],[12,"issue_32330","","",182,null],[12,"object_lifetime_defaults","","",182,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"result"}}],[0,"stability","rustc_typeck::middle","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_typeck::middle::stability","",null,null],[13,"Unstable","","",183,null],[13,"Stable","","",183,null],[3,"DeprecationEntry","","An entry in the `depr_map`.",null,null],[12,"attr","","The metadata of the attribute associated with this entry.",184,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled features and possibly prints errors.",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that were expected to be library features), and the list of features used from libraries, identify activated features that don't exist and error about them.",null,null],[0,"weak_lang_items","rustc_typeck::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_typeck::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the language items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"session","rustc_typeck","",null,null],[0,"config","rustc_typeck::session","Contains infrastructure for configuring the compiler, including parsing command line options.",null,null],[3,"Config","rustc_typeck::session::config","",null,null],[12,"target","","",185,null],[12,"int_type","","",185,null],[12,"uint_type","","",185,null],[4,"Sanitizer","","",null,null],[13,"Address","","",186,null],[13,"Leak","","",186,null],[13,"Memory","","",186,null],[13,"Thread","","",186,null],[4,"OptLevel","","",null,null],[13,"No","","",187,null],[13,"Less","","",187,null],[13,"Default","","",187,null],[13,"Aggressive","","",187,null],[13,"Size","","",187,null],[13,"SizeMin","","",187,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",188,null],[13,"LimitedDebugInfo","","",188,null],[13,"FullDebugInfo","","",188,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",189,null],[13,"Assembly","","",189,null],[13,"LlvmAssembly","","",189,null],[13,"Metadata","","",189,null],[13,"Object","","",189,null],[13,"Exe","","",189,null],[13,"DepInfo","","",189,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",190,null],[13,"Json","","",190,null],[3,"OutputTypes","","",null,null],[3,"Externs","","",null,null],[3,"Options","","",null,null],[12,"crate_types","","",191,null],[12,"optimize","","",191,null],[12,"debug_assertions","","",191,null],[12,"debuginfo","","",191,null],[12,"lint_opts","","",191,null],[12,"lint_cap","","",191,null],[12,"describe_lints","","",191,null],[12,"output_types","","",191,null],[12,"search_paths","","",191,null],[12,"libs","","",191,null],[12,"maybe_sysroot","","",191,null],[12,"target_triple","","",191,null],[12,"test","","",191,null],[12,"error_format","","",191,null],[12,"incremental","","",191,null],[12,"debugging_opts","","",191,null],[12,"prints","","",191,null],[12,"cg","","",191,null],[12,"externs","","",191,null],[12,"crate_name","","",191,null],[12,"alt_std_name","","",191,null],[12,"unstable_features","","",191,null],[12,"actually_rustdoc","","",191,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",192,null],[13,"Sysroot","","",192,null],[13,"CrateName","","",192,null],[13,"Cfg","","",192,null],[13,"TargetList","","",192,null],[13,"TargetCPUs","","",192,null],[13,"TargetFeatures","","",192,null],[13,"RelocationModels","","",192,null],[13,"CodeModels","","",192,null],[13,"TargetSpec","","",192,null],[4,"Input","","",null,null],[13,"File","","Load source from file",193,null],[13,"Str","","",193,null],[12,"name","rustc_typeck::session::config::Input","String that is shown in place of a filename",193,null],[12,"input","","Anonymous source string",193,null],[3,"OutputFilenames","rustc_typeck::session::config","",null,null],[12,"out_directory","","",194,null],[12,"out_filestem","","",194,null],[12,"single_output_file","","",194,null],[12,"extra","","",194,null],[12,"outputs","","",194,null],[17,"NUMBERED_CODEGEN_UNIT_MARKER","","Codegen unit names generated by the numbered naming scheme will contain this marker right before the index of the codegen unit.",null,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[4,"EntryFnType","","",null,null],[13,"EntryMain","","",195,null],[13,"EntryStart","","",195,null],[13,"EntryNone","","",195,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",196,null],[13,"CrateTypeDylib","","",196,null],[13,"CrateTypeRlib","","",196,null],[13,"CrateTypeStaticlib","","",196,null],[13,"CrateTypeCdylib","","",196,null],[13,"CrateTypeProcMacro","","",196,null],[4,"Passes","","",null,null],[13,"SomePasses","","",197,null],[13,"AllPasses","","",197,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",198,null],[12,"linker","","",198,null],[12,"link_arg","","",198,null],[12,"link_args","","",198,null],[12,"link_dead_code","","",198,null],[12,"lto","","",198,null],[12,"target_cpu","","",198,null],[12,"target_feature","","",198,null],[12,"passes","","",198,null],[12,"llvm_args","","",198,null],[12,"save_temps","","",198,null],[12,"rpath","","",198,null],[12,"overflow_checks","","",198,null],[12,"no_prepopulate_passes","","",198,null],[12,"no_vectorize_loops","","",198,null],[12,"no_vectorize_slp","","",198,null],[12,"soft_float","","",198,null],[12,"prefer_dynamic","","",198,null],[12,"no_integrated_as","","",198,null],[12,"no_redzone","","",198,null],[12,"relocation_model","","",198,null],[12,"code_model","","",198,null],[12,"metadata","","",198,null],[12,"extra_filename","","",198,null],[12,"codegen_units","","",198,null],[12,"remark","","",198,null],[12,"no_stack_check","","",198,null],[12,"debuginfo","","",198,null],[12,"opt_level","","",198,null],[12,"debug_assertions","","",198,null],[12,"inline_threshold","","",198,null],[12,"panic","","",198,null],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[6,"CodegenSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",199,null],[12,"time_passes","","",199,null],[12,"count_llvm_insns","","",199,null],[12,"time_llvm_passes","","",199,null],[12,"input_stats","","",199,null],[12,"trans_stats","","",199,null],[12,"asm_comments","","",199,null],[12,"no_verify","","",199,null],[12,"borrowck_stats","","",199,null],[12,"no_landing_pads","","",199,null],[12,"debug_llvm","","",199,null],[12,"meta_stats","","",199,null],[12,"print_link_args","","",199,null],[12,"print_llvm_passes","","",199,null],[12,"ast_json","","",199,null],[12,"ast_json_noexpand","","",199,null],[12,"ls","","",199,null],[12,"save_analysis","","",199,null],[12,"save_analysis_csv","","",199,null],[12,"save_analysis_api","","",199,null],[12,"print_move_fragments","","",199,null],[12,"flowgraph_print_loans","","",199,null],[12,"flowgraph_print_moves","","",199,null],[12,"flowgraph_print_assigns","","",199,null],[12,"flowgraph_print_all","","",199,null],[12,"print_region_graph","","",199,null],[12,"parse_only","","",199,null],[12,"no_trans","","",199,null],[12,"treat_err_as_bug","","",199,null],[12,"continue_parse_after_error","","",199,null],[12,"incremental","","",199,null],[12,"incremental_cc","","",199,null],[12,"incremental_info","","",199,null],[12,"incremental_dump_hash","","",199,null],[12,"dump_dep_graph","","",199,null],[12,"query_dep_graph","","",199,null],[12,"no_analysis","","",199,null],[12,"extra_plugins","","",199,null],[12,"unstable_options","","",199,null],[12,"force_overflow_checks","","",199,null],[12,"trace_macros","","",199,null],[12,"debug_macros","","",199,null],[12,"enable_nonzeroing_move_hints","","",199,null],[12,"keep_hygiene_data","","",199,null],[12,"keep_ast","","",199,null],[12,"show_span","","",199,null],[12,"print_type_sizes","","",199,null],[12,"print_trans_items","","",199,null],[12,"mir_opt_level","","",199,null],[12,"dump_mir","","",199,null],[12,"dump_mir_dir","","",199,null],[12,"perf_stats","","",199,null],[12,"hir_stats","","",199,null],[12,"mir_stats","","",199,null],[12,"always_encode_mir","","",199,null],[12,"osx_rpath_install_name","","",199,null],[12,"sanitizer","","",199,null],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[6,"DebuggingSetter","","",null,null],[17,"DB_OPTIONS","","",null,null],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"hashset"}}],[5,"build_configuration","","",null,{"inputs":[{"name":"session"},{"name":"hashset"}],"output":{"name":"hashset"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[4,"OptionStability","","",null,null],[13,"Stable","","",200,null],[13,"UnstableButNotReally","","",200,null],[13,"Unstable","","",200,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",201,null],[12,"stability","","",201,null],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"hashset"}}],[5,"build_session_options_and_crate_config","","",null,null],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc_typeck::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[0,"filesearch","rustc_typeck::session","",null,null],[4,"FileMatch","rustc_typeck::session::filesearch","",null,null],[13,"FileMatches","","",202,null],[13,"FileDoesntMatch","","",202,null],[3,"FileSearch","","",null,null],[12,"sysroot","","",203,null],[12,"search_paths","","",203,null],[12,"triple","","",203,null],[12,"kind","","",203,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[0,"search_paths","rustc_typeck::session","",null,null],[3,"SearchPaths","rustc_typeck::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",204,null],[13,"Crate","","",204,null],[13,"Dependency","","",204,null],[13,"Framework","","",204,null],[13,"ExternFlag","","",204,null],[13,"All","","",204,null],[3,"Session","rustc_typeck::session","",null,null],[12,"dep_graph","","",205,null],[12,"target","","",205,null],[12,"host","","",205,null],[12,"opts","","",205,null],[12,"cstore","","",205,null],[12,"parse_sess","","",205,null],[12,"entry_fn","","",205,null],[12,"entry_type","","",205,null],[12,"plugin_registrar_fn","","",205,null],[12,"derive_registrar_fn","","",205,null],[12,"default_sysroot","","",205,null],[12,"local_crate_source_file","","",205,null],[12,"working_dir","","",205,null],[12,"lint_store","","",205,null],[12,"lints","","",205,null],[12,"one_time_diagnostics","","Set of (LintId, span, message) tuples tracking lint (sub)diagnostics that have been set once, but should not be set again, in order to avoid redundantly verbose output (Issue #24690).",205,null],[12,"plugin_llvm_passes","","",205,null],[12,"mir_passes","","",205,null],[12,"plugin_attributes","","",205,null],[12,"crate_types","","",205,null],[12,"dependency_formats","","",205,null],[12,"crate_disambiguator","","",205,null],[12,"features","","",205,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization.",205,null],[12,"type_length_limit","","The maximum length of types during monomorphization.",205,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime dependency if it didn't already find one, and this tracks what was injected.",205,null],[12,"injected_panic_runtime","","",205,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of the localized span for the macro body) to the macro name and defintion span in the source crate.",205,null],[12,"perf_stats","","Some measurements that are being gathered during compilation.",205,null],[12,"code_stats","","Data about code being compiled, gathered during compilation.",205,null],[3,"PerfStats","","",null,null],[12,"svh_time","","",206,null],[12,"incr_comp_hashes_time","","",206,null],[12,"incr_comp_hashes_count","","",206,null],[12,"incr_comp_bytes_hashed","","",206,null],[12,"symbol_hash_time","","",206,null],[12,"decode_def_path_tables_time","","",206,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"},{"name":"option"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"depgraph"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[4,"IncrCompSession","","Holds data on the current incremental compilation session, if there is one.",null,null],[13,"NotInitialized","","",207,null],[13,"Active","","",207,null],[12,"session_directory","rustc_typeck::session::IncrCompSession","",207,null],[12,"lock_file","","",207,null],[13,"Finalized","rustc_typeck::session","",207,null],[12,"session_directory","rustc_typeck::session::IncrCompSession","",207,null],[13,"InvalidBecauseOfErrors","rustc_typeck::session","",207,null],[12,"session_directory","rustc_typeck::session::IncrCompSession","",207,null],[5,"early_error","rustc_typeck::session","",null,null],[5,"early_warn","","",null,null],[6,"CompileResult","","",null,null],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[3,"TypeSizeInfo","","",null,null],[12,"kind","","",208,null],[12,"type_description","","",208,null],[12,"align","","",208,null],[12,"overall_size","","",208,null],[12,"opt_discr_size","","",208,null],[12,"variants","","",208,null],[3,"CodeStats","","",null,null],[4,"SizeKind","","",null,null],[13,"Exact","","",209,null],[13,"Min","","",209,null],[3,"FieldInfo","","",null,null],[12,"name","","",210,null],[12,"offset","","",210,null],[12,"size","","",210,null],[12,"align","","",210,null],[3,"VariantInfo","","",null,null],[12,"name","","",211,null],[12,"kind","","",211,null],[12,"size","","",211,null],[12,"align","","",211,null],[12,"fields","","",211,null],[4,"DataTypeKind","","",null,null],[13,"Struct","","",212,null],[13,"Union","","",212,null],[13,"Enum","","",212,null],[13,"Closure","","",212,null],[0,"util","rustc_typeck","",null,null],[0,"common","rustc_typeck::util","",null,null],[17,"FN_OUTPUT_NAME","rustc_typeck::util::common","",null,null],[3,"ErrorReported","","",null,null],[5,"time_depth","","Read the current depth of `time()` calls. This is used to encourage indentation across threads.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"set_time_depth","","Set the current depth of `time()` calls. The idea is to call `set_time_depth()` with the result from `time_depth()` in the parent thread.",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"duration_to_secs_str","","",null,{"inputs":[{"name":"duration"}],"output":{"name":"string"}}],[5,"to_readable_str","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"record_time","","",null,{"inputs":[{"name":"cell"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[3,"Indenter","","",null,null],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[8,"MemoizationMap","","",null,null],[16,"Key","","",213,null],[16,"Value","","",213,null],[10,"memoize","","If `key` is present in the map, return the valuee, otherwise invoke `op` and store the value in the map.",213,null],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[0,"ppaux","rustc_typeck::util","",null,null],[5,"verbose","rustc_typeck::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"parameterized","","",null,null],[0,"nodemap","rustc_typeck::util","An efficient hash map for node IDs",null,null],[6,"NodeMap","rustc_typeck::util::nodemap","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[6,"FxHashMap","","",null,null],[6,"FxHashSet","","",null,null],[0,"fs","rustc_typeck::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc_typeck::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[4,"LinkOrCopy","","",null,null],[13,"Link","","",214,null],[13,"Copy","","",214,null],[5,"link_or_copy","","Copy `p` into `q`, preferring to use hard-linking if possible. If `q` already exists, it is removed first. The result indicates which of the two operations has been performed.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[4,"RenameOrCopyRemove","","",null,null],[13,"Rename","","",215,null],[13,"CopyRemove","","",215,null],[5,"rename_or_copy_remove","","Rename `p` into `q`, preferring to use `rename` if possible. If `rename` fails (rename may fail for reasons such as crossing filesystem), fallback to copy & remove",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"create_dir_racy","","",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[3,"TypeAndSubsts","rustc_typeck","",null,null],[12,"substs","","",216,null],[12,"ty","","",216,null],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"result"}}],[0,"diagnostics","","",null,null],[0,"check","","",null,null],[3,"Inherited","rustc_typeck::check","closures defined within the function.  For example:",null,null],[3,"UnsafetyState","","",null,null],[12,"def","","",217,null],[12,"unsafety","","",217,null],[12,"unsafe_push_count","","",217,null],[3,"LoopCtxt","","",null,null],[3,"EnclosingLoops","","",null,null],[3,"FnCtxt","","",null,null],[3,"InheritedBuilder","","Helper type of a temporary returned by Inherited::build(...). Necessary because we can't write the following bound: F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(Inherited<'b, 'gcx, 'tcx>).",null,null],[4,"Expectation","","When type-checking an expression, we propagate downward whatever type hint we are able in the form of an `Expectation`.",null,null],[13,"NoExpectation","","We know nothing about what type this expression should have.",218,null],[13,"ExpectHasType","","This expression should have the type given (or some subtype)",218,null],[13,"ExpectCastableToType","","This expression will be cast to the `Ty`",218,null],[13,"ExpectRvalueLikeUnsized","","This rvalue expression will be wrapped in `&` or `Box` and coerced to `&Ty` or `Box<Ty>`, respectively. `Ty` is `[A]` or `Trait`.",218,null],[5,"compare_impl_method","","Checks that a method from an impl conforms to the signature of the same method as declared in the trait.",null,{"inputs":[{"name":"tyctxt"},{"name":"associateditem"},{"name":"span"},{"name":"nodeid"},{"name":"associateditem"},{"name":"traitref"},{"name":"option"},{"name":"bool"}],"output":null}],[5,"compare_const_impl","","",null,{"inputs":[{"name":"tyctxt"},{"name":"associateditem"},{"name":"span"},{"name":"associateditem"},{"name":"traitref"}],"output":null}],[5,"check_wf_new","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"compileresult"}}],[5,"check_item_types","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"compileresult"}}],[5,"check_item_bodies","","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"compileresult"}}],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"check_item_type","","",null,{"inputs":[{"name":"tyctxt"},{"name":"item"}],"output":null}],[5,"check_simd","","",null,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"defid"}],"output":null}],[5,"check_enum","","",null,null],[5,"check_bounds_are_used","","",null,{"inputs":[{"name":"tyctxt"},{"name":"generics"},{"name":"ty"}],"output":null}],[11,"autoderef","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"}],"output":{"name":"autoderef"}}],[11,"try_overloaded_deref","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"},{"name":"ty"},{"name":"lvaluepreference"}],"output":{"name":"option"}}],[0,"dropck","","",null,null],[5,"check_drop_impl","rustc_typeck::check::dropck","check_drop_impl confirms that the Drop implementation identfied by `drop_impl_did` is not any more specialized than the type it is attached to (Issue #8142).",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"result"}}],[5,"check_safety_of_destructor_if_necessary","","check_safety_of_destructor_if_necessary confirms that the type expression `typ` conforms to the \"Drop Check Rule\" from the Sound Generic Drop (RFC 769).",null,{"inputs":[{"name":"regionctxt"},{"name":"ty"},{"name":"span"},{"name":"codeextent"}],"output":null}],[0,"_match","rustc_typeck::check","",null,null],[11,"check_pat","","",219,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"ty"}],"output":null}],[11,"check_pat_arg","","The `is_arg` argument indicates whether this pattern is the *outermost* pattern in an argument (e.g., in `fn foo(&x: &u32)`, it is true for the `&x` pattern but not `x`). This is used to tailor error reporting.",219,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"ty"},{"name":"bool"}],"output":null}],[11,"check_dereferencable","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"check_match","","",219,null],[0,"writeback","","",null,null],[11,"resolve_type_vars_in_body","","",219,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"typecktables"}}],[0,"regionck","","The region check is a final pass that runs over the AST after we have inferred the type constraints but before we have actually finalized the types.  Its purpose is to embed a variety of region constraints. Inserting these constraints as a separate pass is good because (1) it localizes the code that has to do with region inference and (2) often we cannot know what constraints are needed until the basic types have been inferred.",null,null],[3,"RegionCtxt","rustc_typeck::check::regionck","",null,null],[12,"fcx","","",220,null],[3,"RepeatingScope","","",null,null],[3,"Subject","","",null,null],[11,"regionck_expr","rustc_typeck::check","",219,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"regionck_item","","Region checking during the WF phase for items. `wf_tys` are the types from which we should derive implied bounds, if any.",219,null],[11,"regionck_fn","","",219,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"body"}],"output":null}],[11,"deref","rustc_typeck::check::regionck","",220,null],[11,"new","","",220,{"inputs":[{"name":"fnctxt"},{"name":"repeatingscope"},{"name":"nodeid"},{"name":"subject"}],"output":{"name":"regionctxt"}}],[11,"resolve_type","","Try to resolve the type for the given node, returning t_err if an error results.  Note that we never care about the details of the error, the same error will be detected and reported in the writeback phase.",220,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"resolve_expr_type_adjusted","","Try to resolve the type for the given node.",220,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"nested_visit_map","","",220,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_fn","","",220,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"bodyid"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_arm","","",220,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_local","","",220,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_expr","","",220,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"mk_subregion_due_to_dereference","","",220,{"inputs":[{"name":"self"},{"name":"span"},{"name":"region"},{"name":"region"}],"output":null}],[11,"type_must_outlive","","Ensures that type is well-formed in `region`, which implies (among other things) that all borrowed data reachable via `ty` outlives `region`.",220,{"inputs":[{"name":"self"},{"name":"subregionorigin"},{"name":"ty"},{"name":"region"}],"output":null}],[0,"coercion","rustc_typeck::check","Type Coercion",null,null],[11,"try_coerce","","Attempt to coerce an expression to a type, and return the adjusted type of the expression, if successful. Adjustments are only recorded if the coercion succeeded. The expressions *must not* have any pre-existing adjustments.",219,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[11,"try_find_coercion_lub","","Given some expressions, their known unified type and another expression, tries to unify the types, potentially inserting coercions on any of the provided expressions and returns their LUB (aka \"common supertype\").",219,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"e"},{"name":"ty"},{"name":"expr"},{"name":"ty"}],"output":{"name":"relateresult"}}],[0,"demand","","",null,null],[11,"demand_suptype","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"ty"}],"output":null}],[11,"demand_eqtype","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"ty"}],"output":null}],[11,"demand_eqtype_diag","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"ty"}],"output":{"name":"option"}}],[11,"demand_eqtype_with_origin","","",219,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"ty"},{"name":"ty"}],"output":{"name":"option"}}],[11,"demand_coerce","","",219,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"ty"},{"name":"ty"}],"output":null}],[0,"method","","Method lookup: the secret sauce of Rust. See `README.md`.",null,null],[3,"NoMatchData","rustc_typeck::check::method","",null,null],[12,"static_candidates","","",221,null],[12,"unsatisfied_predicates","","",221,null],[12,"out_of_scope_traits","","",221,null],[12,"mode","","",221,null],[4,"MethodError","","",null,null],[13,"NoMatch","","",222,null],[13,"Ambiguity","","",222,null],[13,"ClosureAmbiguity","","",222,null],[13,"PrivateMatch","","",222,null],[4,"CandidateSource","","",null,null],[13,"ImplSource","","",223,null],[13,"TraitSource","","",223,null],[11,"confirm_method","rustc_typeck::check","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"expr"},{"name":"expr"},{"name":"ty"},{"name":"pick"},{"name":"vec"}],"output":{"name":"methodcallee"}}],[0,"probe","rustc_typeck::check::method","",null,null],[3,"IsSuggestion","rustc_typeck::check::method::probe","Boolean flag used to indicate if this search is for a suggestion or not.  If true, we can allow ambiguity and so forth.",null,null],[12,"0","","",224,null],[3,"Pick","","",null,null],[12,"item","","",225,null],[12,"kind","","",225,null],[12,"import_id","","",225,null],[12,"autoderefs","","",225,null],[12,"autoref","","",225,null],[12,"unsize","","",225,null],[4,"LookingFor","","",null,null],[13,"MethodName","","looking for methods with the given name; this is the normal case",226,null],[13,"ReturnType","","looking for methods that return a given type; this is used to assemble suggestions",226,null],[4,"PickKind","","",null,null],[13,"InherentImplPick","","",227,null],[13,"ExtensionImplPick","","",227,null],[13,"ObjectPick","","",227,null],[13,"TraitPick","","",227,null],[13,"WhereClausePick","","",227,null],[4,"Mode","","",null,null],[13,"MethodCall","","",228,null],[13,"Path","","",228,null],[6,"PickResult","","",null,null],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"pickkind"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"probe_for_return_type","rustc_typeck::check","This is used to offer suggestions to users. It returns methods that could have been called which have the desired return type. Some effort is made to rule out methods that, if called, would result in an error (basically, the same criteria we would use to decide if a method is a plausible fit for ambiguity purposes).",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"mode"},{"name":"ty"},{"name":"ty"},{"name":"nodeid"}],"output":{"name":"vec"}}],[11,"probe_for_name","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"mode"},{"name":"name"},{"name":"issuggestion"},{"name":"ty"},{"name":"nodeid"}],"output":{"name":"pickresult"}}],[11,"report_method_error","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"},{"name":"name"},{"name":"option"},{"name":"methoderror"},{"name":"option"}],"output":null}],[6,"AllTraitsVec","rustc_typeck::check::method","",null,null],[11,"new","","",221,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"mode"}],"output":{"name":"self"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"candidatesource"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",223,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"ordering"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",223,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"option"}}],[11,"lt","","",223,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"le","","",223,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"gt","","",223,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"ge","","",223,{"inputs":[{"name":"self"},{"name":"candidatesource"}],"output":{"name":"bool"}}],[11,"method_exists","rustc_typeck::check","Determines whether the type `self_ty` supports a method name `method_name` or not.",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"ty"},{"name":"nodeid"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"lookup_method","","Performs method lookup. If lookup is successful, it will return the callee and store an appropriate adjustment for the self-expr. In some cases it may report an error (e.g., invoking the `drop` method).",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"ty"},{"name":"vec"},{"name":"expr"},{"name":"expr"}],"output":{"name":"result"}}],[11,"lookup_method_in_trait","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"},{"name":"name"},{"name":"defid"},{"name":"ty"},{"name":"option"}],"output":{"name":"option"}}],[11,"lookup_method_in_trait_adjusted","","`lookup_in_trait_adjusted` is used for overloaded operators. It does a very narrow slice of what the normal probe/confirm path does. In particular, it doesn't really do any probing: it simply constructs an obligation for aparticular trait with the given self-type and checks whether that trait is implemented.",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"},{"name":"name"},{"name":"defid"},{"name":"usize"},{"name":"bool"},{"name":"ty"},{"name":"option"}],"output":{"name":"option"}}],[11,"resolve_ufcs","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"ty"},{"name":"nodeid"}],"output":{"name":"result"}}],[11,"associated_item","","Find item with name `item_name` defined in impl/trait `def_id` and return it, or `None`, if no such item was defined there.",219,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"name"}],"output":{"name":"option"}}],[11,"closure_analyze","","",219,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"check_expr_closure","","",219,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"captureclause"},{"name":"fndecl"},{"name":"bodyid"},{"name":"expectation"}],"output":{"name":"ty"}}],[11,"check_call","","",219,null],[11,"check_binop_assign","","Check a `a <op>= b`",219,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"binop"},{"name":"expr"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"check_binop","","Check a potentially overloaded binary operator.",219,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"binop"},{"name":"expr"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"check_user_unop","","",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"option"},{"name":"expr"},{"name":"expr"},{"name":"ty"},{"name":"unop"}],"output":{"name":"ty"}}],[11,"deref","","",229,null],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"expectation"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"unsafetystate"}}],[11,"function","","",217,{"inputs":[{"name":"unsafety"},{"name":"nodeid"}],"output":{"name":"unsafetystate"}}],[11,"recurse","","",217,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"unsafetystate"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"loopctxt"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"enclosingloops"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"fnctxt"}}],[11,"deref","","",219,null],[11,"build","","",229,{"inputs":[{"name":"tyctxt"},{"name":"nodeid"}],"output":{"name":"inheritedbuilder"}}],[11,"new","","",229,{"inputs":[{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"new","","",219,{"inputs":[{"name":"inherited"},{"name":"option"},{"name":"nodeid"}],"output":{"name":"fnctxt"}}],[11,"sess","","",219,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"err_count_since_creation","","",219,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cause","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",219,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"obligationcause"}}],[11,"tag","","",219,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"local_ty","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"nodeid"}],"output":{"name":"ty"}}],[11,"write_ty","","",219,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"ty"}],"output":null}],[11,"write_substs","","",219,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"itemsubsts"}],"output":null}],[11,"write_autoderef_adjustment","","",219,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"usize"},{"name":"ty"}],"output":null}],[11,"write_adjustment","","",219,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"adjustment"}],"output":null}],[11,"write_nil","","",219,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"write_error","","",219,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":null}],[11,"require_type_meets","","",219,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"},{"name":"obligationcausecode"},{"name":"defid"}],"output":null}],[11,"require_type_is_sized","","",219,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"},{"name":"obligationcausecode"}],"output":null}],[11,"register_bound","","",219,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"defid"},{"name":"obligationcause"}],"output":null}],[11,"register_predicate","","",219,{"inputs":[{"name":"self"},{"name":"predicateobligation"}],"output":null}],[11,"register_predicates","","",219,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"register_infer_ok_obligations","","",219,{"inputs":[{"name":"self"},{"name":"inferok"}],"output":{"name":"t"}}],[11,"to_ty","","",219,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"node_ty","","",219,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ty"}}],[11,"opt_node_ty_substs","","",219,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":null}],[11,"register_region_obligation","","Registers an obligation for checking later, during regionck, that the type `ty` must outlive the region `r`.",219,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"region"},{"name":"obligationcause"}],"output":null}],[11,"register_wf_obligation","","Registers an obligation for checking later, during regionck, that the type `ty` must outlive the region `r`.",219,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"},{"name":"obligationcausecode"}],"output":null}],[11,"register_old_wf_obligation","","",219,{"inputs":[{"name":"self"},{"name":"ty"},{"name":"span"},{"name":"obligationcausecode"}],"output":null}],[11,"add_wf_bounds","","Registers obligations that all types appearing in `substs` are well-formed.",219,{"inputs":[{"name":"self"},{"name":"substs"},{"name":"expr"}],"output":null}],[11,"add_obligations_for_parameters","","Given a fully substituted set of bounds (`generic_bounds`), and the values with which each type/region parameter was instantiated (`substs`), creates and registers suitable trait/region obligations.",219,{"inputs":[{"name":"self"},{"name":"obligationcause"},{"name":"instantiatedpredicates"}],"output":null}],[11,"field_ty","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"fielddef"},{"name":"substs"}],"output":{"name":"ty"}}],[11,"check_expr_has_type","","",219,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"ty"}],"output":{"name":"ty"}}],[11,"impl_self_ty","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"defid"}],"output":{"name":"typeandsubsts"}}],[11,"check_struct_path","","",219,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"resolve_ty_and_def_ufcs","","",219,null],[11,"check_decl_initializer","","",219,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"ty"}}],[11,"check_decl_local","","",219,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"check_stmt","","",219,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"check_block_no_value","","",219,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"instantiate_value_path","","",219,null],[11,"structurally_resolved_type","","",219,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ty"}],"output":{"name":"ty"}}],[0,"check_unused","rustc_typeck","",null,null],[5,"check_crate","rustc_typeck::check_unused","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"collect","rustc_typeck","",null,null],[4,"SizedByDefault","rustc_typeck::collect","",null,null],[13,"Yes","","",232,null],[13,"No","","",232,null],[5,"collect_item_types","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"provide","","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"compute_bounds","","Translate the AST's notion of ty param bounds (which are an enum consisting of a newtyped Ty or a region) to ty's notion of ty param bounds, which can either be user-defined traits, or the built-in trait (formerly known as kind): Send.",null,null],[0,"coherence","rustc_typeck","",null,null],[5,"provide","rustc_typeck::coherence","",null,{"inputs":[{"name":"providers"}],"output":null}],[5,"check_coherence","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"variance","rustc_typeck","Module for inferring the variance of type and lifetime parameters. See README.md for details.",null,null],[5,"infer_variance","rustc_typeck::variance","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[17,"DIAGNOSTICS","rustc_typeck","",null,null],[11,"new","rustc_typeck::dep_graph::debug","",233,{"inputs":[{"name":"str"}],"output":{"name":"depnodefilter"}}],[11,"accepts_all","","True if all nodes always pass the filter.",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"test","","Tests whether `node` meets the filter, returning true if so.",233,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"neg","rustc_typeck::middle::const_val","",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitxor","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",141,null],[11,"decode","","",141,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"option"}}],[11,"sub","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"not","","",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitor","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"div","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"bitand","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"shl","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"add","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"rem","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"shr","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"mul","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"bool"}}],[11,"encode","","",141,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"ordering"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"super_fold_with","","",140,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"constval"}}],[11,"get_lints","rustc_typeck::lint::builtin","",234,null],[11,"decode","rustc_typeck::hir::map::definitions","",235,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::lint","",237,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::dep_graph","",4,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::def","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::def_id","",238,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::intravisit","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir::map","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::hir","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",114,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",115,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",116,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",117,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",118,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",119,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",120,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::lint","",131,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",239,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::const_val","",140,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::cstore","",144,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",146,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",147,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",148,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::free_region","",240,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::lang_items","",158,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::region","",241,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",178,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",179,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::resolve_lifetime","",180,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",181,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::middle::stability","",183,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","rustc_typeck::session::config","",189,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","rustc_typeck::dep_graph","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"lt","","",242,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"le","","",242,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"gt","","",242,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"ge","","",242,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",238,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"option"}}],[11,"lt","","",238,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"le","","",238,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"gt","","",238,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"ge","","",238,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_typeck::hir","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_typeck::lint","",126,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::middle::cstore","",144,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"option"}}],[11,"partial_cmp","","",147,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::middle::privacy","",175,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::middle::region","",241,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"lt","","",241,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"le","","",241,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"gt","","",241,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ge","","",241,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",177,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"option"}}],[11,"lt","","",177,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"le","","",177,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"gt","","",177,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ge","","",177,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",178,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"option"}}],[11,"lt","","",178,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"le","","",178,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"gt","","",178,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ge","","",178,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",179,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"option"}}],[11,"lt","","",179,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"le","","",179,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"gt","","",179,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ge","","",179,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"partial_cmp","rustc_typeck::middle::stability","",183,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::session::config","",189,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"partial_cmp","","",196,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"option"}}],[11,"partial_cmp","rustc_typeck::session::search_paths","",204,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"option"}}],[11,"visit_item","rustc_typeck::hir::itemlikevisit","",243,null],[11,"visit_trait_item","","",243,null],[11,"visit_impl_item","","",243,null],[11,"to_parts","rustc_typeck::hir","",68,null],[11,"index","rustc_typeck::dep_graph","",244,null],[11,"visit_item","rustc_typeck::hir::map","",27,null],[11,"visit_foreign_item","","",27,null],[11,"visit_generics","","",27,null],[11,"visit_trait_item","","",27,null],[11,"visit_impl_item","","",27,null],[11,"visit_pat","","",27,null],[11,"visit_expr","","",27,null],[11,"visit_ty","","",27,null],[11,"visit_lifetime_def","","",27,null],[11,"visit_stmt","","",27,null],[11,"visit_item","rustc_typeck::lint","",130,null],[11,"visit_foreign_item","","",130,null],[11,"visit_pat","","",130,null],[11,"visit_expr","","",130,null],[11,"visit_stmt","","",130,null],[11,"visit_fn","","",130,null],[11,"visit_variant_data","","",130,null],[11,"visit_struct_field","","",130,null],[11,"visit_variant","","",130,null],[11,"visit_ty","","",130,null],[11,"visit_ident","","",130,null],[11,"visit_mod","","",130,null],[11,"visit_local","","",130,null],[11,"visit_block","","",130,null],[11,"visit_arm","","",130,null],[11,"visit_expr_post","","",130,null],[11,"visit_generics","","",130,null],[11,"visit_trait_item","","",130,null],[11,"visit_impl_item","","",130,null],[11,"visit_lifetime","","",130,null],[11,"visit_lifetime_def","","",130,null],[11,"visit_path","","",130,null],[11,"visit_path_list_item","","",130,null],[11,"visit_attribute","","",130,null],[11,"id","rustc_typeck::hir","",70,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"span","","",70,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"id","","",53,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"span","","",53,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","rustc_typeck::lint","",237,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::dep_graph","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::def","",7,{"inputs":[{"name":"self"},{"name":"ctorkind"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"ne","","",242,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"ne","","",238,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::intravisit","",11,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"idrange"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"idrange"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::map","",19,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"disambiguateddefpathdata"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"disambiguateddefpathdata"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"defpath"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"defpath"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"defpathdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"defpathdata"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"self"},{"name":"svh"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::hir","",33,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"qpath"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"qpath"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"loopsource"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"loopiderror"}],"output":{"name":"bool"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"loopidresult"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"loopidresult"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"destination"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"destination"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"traitmethod"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"traitmethod"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"usekind"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"itemid"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"traititemref"}],"output":{"name":"bool"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"implitemref"}],"output":{"name":"bool"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"associateditemkind"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::lint","",126,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"lintsource"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"earlylint"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::expr_use_visitor","",135,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"loancause"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"consumemode"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"movereason"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"matchmode"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"mutatemode"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::const_val","",140,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"constval"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::cstore","",143,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"cratesource"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"bool"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"libsource"}],"output":{"name":"bool"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"bool"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::dataflow","",156,{"inputs":[{"name":"self"},{"name":"killfrom"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::dependency_format","",157,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::lang_items","",158,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::mem_categorization","",160,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"categorization"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"upvar"}],"output":{"name":"bool"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"pointerkind"}],"output":{"name":"bool"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"interiorkind"}],"output":{"name":"bool"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"interioroffsetkind"}],"output":{"name":"bool"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"elementkind"}],"output":{"name":"bool"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"mutabilitycategory"}],"output":{"name":"bool"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"note"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"cmt_"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::privacy","",175,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::region","",241,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"bool"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"bool"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::resolve_lifetime","",180,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"set1"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::middle::stability","",183,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::session","",211,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"sizekind"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"self"},{"name":"fieldinfo"}],"output":{"name":"bool"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"datatypekind"}],"output":{"name":"bool"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"typesizeinfo"}],"output":{"name":"bool"}}],[11,"eq","","",245,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"ne","","",245,{"inputs":[{"name":"self"},{"name":"codestats"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::session::config","",187,{"inputs":[{"name":"self"},{"name":"optlevel"}],"output":{"name":"bool"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"debuginfolevel"}],"output":{"name":"bool"}}],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"self"},{"name":"erroroutputtype"}],"output":{"name":"bool"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"printrequest"}],"output":{"name":"bool"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"entryfntype"}],"output":{"name":"bool"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"optionstability"}],"output":{"name":"bool"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"self"},{"name":"rustcoptgroup"}],"output":{"name":"bool"}}],[11,"eq","rustc_typeck::session::search_paths","",204,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"bool"}}],[11,"relate","rustc_typeck::hir","",97,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"writer","rustc_typeck::hir::print","",32,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[11,"boxes","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"comments","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",32,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"usize"}],"output":{"name":"cratenum"}}],[11,"index","","",242,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"hash","rustc_typeck::hir::svh","",236,null],[11,"hash","rustc_typeck::lint","",237,null],[11,"hash","rustc_typeck::dep_graph","",4,null],[11,"hash","","",1,null],[11,"hash","rustc_typeck::hir::def","",7,null],[11,"hash","","",8,null],[11,"hash","rustc_typeck::hir::def_id","",242,null],[11,"hash","","",238,null],[11,"hash","","",10,null],[11,"hash","rustc_typeck::hir::map","",19,null],[11,"hash","","",20,null],[11,"hash","","",21,null],[11,"hash","","",22,null],[11,"hash","rustc_typeck::hir","",33,null],[11,"hash","","",34,null],[11,"hash","","",35,null],[11,"hash","","",36,null],[11,"hash","","",37,null],[11,"hash","","",38,null],[11,"hash","","",39,null],[11,"hash","","",40,null],[11,"hash","","",41,null],[11,"hash","","",42,null],[11,"hash","","",43,null],[11,"hash","","",45,null],[11,"hash","","",46,null],[11,"hash","","",47,null],[11,"hash","","",48,null],[11,"hash","","",49,null],[11,"hash","","",51,null],[11,"hash","","",52,null],[11,"hash","","",53,null],[11,"hash","","",54,null],[11,"hash","","",55,null],[11,"hash","","",56,null],[11,"hash","","",57,null],[11,"hash","","",58,null],[11,"hash","","",59,null],[11,"hash","","",60,null],[11,"hash","","",61,null],[11,"hash","","",62,null],[11,"hash","","",63,null],[11,"hash","","",64,null],[11,"hash","","",65,null],[11,"hash","","",66,null],[11,"hash","","",67,null],[11,"hash","","",68,null],[11,"hash","","",69,null],[11,"hash","","",70,null],[11,"hash","","",71,null],[11,"hash","","",72,null],[11,"hash","","",73,null],[11,"hash","","",74,null],[11,"hash","","",75,null],[11,"hash","","",76,null],[11,"hash","","",77,null],[11,"hash","","",78,null],[11,"hash","","",79,null],[11,"hash","","",80,null],[11,"hash","","",81,null],[11,"hash","","",82,null],[11,"hash","","",83,null],[11,"hash","","",84,null],[11,"hash","","",85,null],[11,"hash","","",86,null],[11,"hash","","",87,null],[11,"hash","","",88,null],[11,"hash","","",89,null],[11,"hash","","",90,null],[11,"hash","","",91,null],[11,"hash","","",92,null],[11,"hash","","",93,null],[11,"hash","","",94,null],[11,"hash","","",95,null],[11,"hash","","",96,null],[11,"hash","","",97,null],[11,"hash","","",98,null],[11,"hash","","",99,null],[11,"hash","","",100,null],[11,"hash","","",101,null],[11,"hash","","",102,null],[11,"hash","","",103,null],[11,"hash","","",104,null],[11,"hash","","",105,null],[11,"hash","","",106,null],[11,"hash","","",107,null],[11,"hash","","",108,null],[11,"hash","","",109,null],[11,"hash","","",110,null],[11,"hash","","",111,null],[11,"hash","","",112,null],[11,"hash","","",113,null],[11,"hash","","",114,null],[11,"hash","","",115,null],[11,"hash","","",116,null],[11,"hash","","",117,null],[11,"hash","","",118,null],[11,"hash","","",119,null],[11,"hash","rustc_typeck::lint","",126,null],[11,"hash","rustc_typeck::middle::const_val","",140,null],[11,"hash","rustc_typeck::middle::cstore","",147,null],[11,"hash","","",148,null],[11,"hash","rustc_typeck::middle::lang_items","",158,null],[11,"hash","rustc_typeck::middle::mem_categorization","",162,null],[11,"hash","","",163,null],[11,"hash","","",164,null],[11,"hash","","",165,null],[11,"hash","","",166,null],[11,"hash","","",167,null],[11,"hash","rustc_typeck::middle::region","",241,null],[11,"hash","","",177,null],[11,"hash","","",178,null],[11,"hash","","",179,null],[11,"hash","rustc_typeck::middle::resolve_lifetime","",180,null],[11,"hash","rustc_typeck::middle::stability","",183,null],[11,"hash","rustc_typeck::session","",211,null],[11,"hash","","",209,null],[11,"hash","","",210,null],[11,"hash","","",212,null],[11,"hash","","",208,null],[11,"hash","rustc_typeck::session::config","",186,null],[11,"hash","","",187,null],[11,"hash","","",188,null],[11,"hash","","",189,null],[11,"hash","","",246,null],[11,"hash","","",247,null],[11,"hash","","",196,null],[11,"hash","","",197,null],[11,"hash","rustc_typeck::session::search_paths","",204,null],[11,"crate_data_as_rc_any","rustc_typeck::middle::cstore","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"rc"}}],[11,"describe_def","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"def_span","","",248,{"inputs":[{"name":"self"},{"name":"session"},{"name":"defid"}],"output":{"name":"span"}}],[11,"stability","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"deprecation","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"visibility","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"visibility"}}],[11,"visible_parent_map","","",248,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"item_generics_cloned","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"generics"}}],[11,"item_attrs","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"fn_arg_names","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"inherent_implementations_for_type","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"implementations_of_trait","","",248,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"vec"}}],[11,"impl_polarity","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"implpolarity"}}],[11,"impl_parent","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_of_item","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"associated_item_cloned","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"associateditem"}}],[11,"is_const_fn","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_default_impl","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_foreign_item","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_dllimport_foreign_item","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_statically_included_foreign_item","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_exported_symbol","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"dylib_dependency_formats","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"lang_items","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"missing_lang_items","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_staged_api","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"dep_kind","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"depkind"}}],[11,"export_macros","","",248,null],[11,"is_allocator","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_panic_runtime","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_compiler_builtins","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"is_sanitizer_runtime","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"panic_strategy","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"panicstrategy"}}],[11,"extern_crate","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"crate_name","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"original_crate_name","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"crate_hash","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"svh"}}],[11,"crate_disambiguator","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"symbol"}}],[11,"plugin_registrar_fn","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"derive_registrar_fn","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"option"}}],[11,"native_libraries","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"exported_symbols","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"vec"}}],[11,"is_no_builtins","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"bool"}}],[11,"retrace_path","","",248,null],[11,"def_key","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"struct_field_names","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"item_children","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"vec"}}],[11,"load_macro","","",248,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"session"}],"output":{"name":"loadedmacro"}}],[11,"maybe_get_item_body","","",248,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[11,"item_body_nested_bodies","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"btreemap"}}],[11,"const_is_rvalue_promotable_to_static","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"is_item_mir_available","","",248,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"crates","","",248,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_libraries","","",248,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"used_link_args","","",248,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"metadata_filename","","",248,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"metadata_section_name","","",248,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"str"}}],[11,"used_crates","","",248,{"inputs":[{"name":"self"},{"name":"linkagepreference"}],"output":{"name":"vec"}}],[11,"used_crate_source","","",248,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"cratesource"}}],[11,"extern_mod_stmt_cnum","","",248,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"encode_metadata","","",248,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"hashmap"},{"name":"linkmeta"},{"name":"hashset"}],"output":{"name":"vec"}}],[11,"metadata_encoding_version","","",248,null],[11,"default","rustc_typeck::middle::privacy","",176,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"default","rustc_typeck::session::config","",190,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"default","rustc_typeck::middle::mem_categorization","",172,{"inputs":[],"output":{"name":"memcategorizationoptions"}}],[11,"drop","rustc_typeck::dep_graph","",249,null],[11,"drop","rustc_typeck::util::common","",250,null],[11,"sess","rustc_typeck::lint","Get the overall compiler `Session` object.",132,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",132,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",132,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",132,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",132,null],[11,"exit_attrs","","",132,null],[11,"sess","","Get the overall compiler `Session` object.",130,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"lints","","",130,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"mut_lints","","",130,{"inputs":[{"name":"self"}],"output":{"name":"lintstore"}}],[11,"level_stack","","",130,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"enter_attrs","","",130,null],[11,"exit_attrs","","",130,null],[11,"is_fn_like","rustc_typeck::hir","",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::mem_categorization","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session::config","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::def_id","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::lint","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::mem_categorization","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::privacy","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::region","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::dep_graph::debug","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::dep_graph","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::def","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::intravisit","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::map::blocks","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::map","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::hir","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::lint","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::expr_use_visitor","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::const_val","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::cstore","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::dataflow","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::dependency_format","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::mem_categorization","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::privacy","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::region","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::resolve_lifetime","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::middle::stability","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session::config","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session::search_paths","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::session","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::util::common","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_typeck::util::fs","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_encode","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"nested","rustc_typeck::hir::map","",25,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"nested","rustc_typeck::hir","",50,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"nested","rustc_typeck::middle::dataflow","",256,{"inputs":[{"name":"self"},{"name":"state"},{"name":"nested"}],"output":{"name":"result"}}],[11,"pre","","",256,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"clone","rustc_typeck::dep_graph","",4,{"inputs":[{"name":"self"}],"output":{"name":"depnode"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"workproductid"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"depgraph"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"workproduct"}}],[11,"clone","rustc_typeck::hir::def","",7,{"inputs":[{"name":"self"}],"output":{"name":"ctorkind"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"pathresolution"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"export"}}],[11,"clone","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"self"}],"output":{"name":"cratenum"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"defindex"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"clone","rustc_typeck::hir::intravisit","",11,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"idrange"}}],[11,"clone","rustc_typeck::hir::map::blocks","",252,{"inputs":[{"name":"self"}],"output":{"name":"fnlikenode"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"clone","rustc_typeck::hir::map::definitions","",235,{"inputs":[{"name":"self"}],"output":{"name":"defpathtable"}}],[11,"clone","rustc_typeck::hir::map","",258,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"defkey"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"disambiguateddefpathdata"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"defpath"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"defpathdata"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"clone","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"}],"output":{"name":"svh"}}],[11,"clone","rustc_typeck::hir","",33,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"macrodef"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"rangeend"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"binop_"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stmt_"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"decl_"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"unsafesource"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"expr_"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"qpath"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"matchsource"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"loopsource"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"loopiderror"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"loopidresult"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"destination"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"captureclause"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"traititemid"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"traitmethod"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"implitemid"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"primty"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"ty_"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmoutput"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"inlineasm"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"variant_"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usekind"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"structfield"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"itemid"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"item_"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"traititemref"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"implitemref"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"associateditemkind"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem_"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"freevar"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"traitcandidate"}}],[11,"clone","rustc_typeck::lint","",122,{"inputs":[{"name":"self"}],"output":{"name":"lint"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"lintid"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"lintsource"}}],[11,"clone","rustc_typeck::lint::builtin","",234,{"inputs":[{"name":"self"}],"output":{"name":"hardwiredlints"}}],[11,"clone","rustc_typeck::middle::expr_use_visitor","",135,{"inputs":[{"name":"self"}],"output":{"name":"loancause"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"consumemode"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"movereason"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"matchmode"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"mutatemode"}}],[11,"clone","rustc_typeck::middle::const_val","",140,{"inputs":[{"name":"self"}],"output":{"name":"constval"}}],[11,"clone","rustc_typeck::middle::cstore","",142,{"inputs":[{"name":"self"}],"output":{"name":"linkmeta"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"cratesource"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"depkind"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"libsource"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"linkagepreference"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrarykind"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"nativelibrary"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"externcrate"}}],[11,"clone","rustc_typeck::middle::dataflow","",153,{"inputs":[{"name":"self"}],"output":{"name":"entryorexit"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"dataflowcontext"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"killfrom"}}],[11,"clone","rustc_typeck::middle::dependency_format","",157,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"clone","rustc_typeck::middle::free_region","",240,{"inputs":[{"name":"self"}],"output":{"name":"freeregionmap"}}],[11,"clone","rustc_typeck::middle::lang_items","",158,{"inputs":[{"name":"self"}],"output":{"name":"langitem"}}],[11,"clone","rustc_typeck::middle::mem_categorization","",160,{"inputs":[{"name":"self"}],"output":{"name":"categorization"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"upvar"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"pointerkind"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"interiorkind"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"interioroffsetkind"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"elementkind"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"note"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"cmt_"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationcontext"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"memcategorizationoptions"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"aliasablereason"}}],[11,"clone","rustc_typeck::middle::privacy","",175,{"inputs":[{"name":"self"}],"output":{"name":"accesslevel"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"accesslevels"}}],[11,"clone","rustc_typeck::middle::region","",241,{"inputs":[{"name":"self"}],"output":{"name":"codeextent"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"codeextentdata"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"callsitescopedata"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"blockremainder"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","rustc_typeck::middle::resolve_lifetime","",180,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"set1"}}],[11,"clone","rustc_typeck::middle::stability","",183,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"deprecationentry"}}],[11,"clone","rustc_typeck::session","",211,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"sizekind"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"fieldinfo"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"datatypekind"}}],[11,"clone","rustc_typeck::session::config","",186,{"inputs":[{"name":"self"}],"output":{"name":"sanitizer"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"optlevel"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"debuginfolevel"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"outputtype"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"erroroutputtype"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"outputtypes"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"externs"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"printrequest"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"outputfilenames"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"entryfntype"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"cratetype"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"passes"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"codegenoptions"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"debuggingoptions"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"optionstability"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"rustcoptgroup"}}],[11,"clone","rustc_typeck::session::filesearch","",202,{"inputs":[{"name":"self"}],"output":{"name":"filematch"}}],[11,"clone","rustc_typeck::session::search_paths","",254,{"inputs":[{"name":"self"}],"output":{"name":"searchpaths"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"pathkind"}}],[11,"clone","rustc_typeck::util::common","",255,{"inputs":[{"name":"self"}],"output":{"name":"errorreported"}}],[11,"from","rustc_typeck::hir","",76,{"inputs":[{"name":"result"}],"output":{"name":"loopidresult"}}],[11,"from","rustc_typeck::session","",212,{"inputs":[{"name":"adtkind"}],"output":{"name":"datatypekind"}}],[11,"default_decode","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"into","rustc_typeck::hir","",76,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","rustc_typeck::hir::map","",259,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","rustc_typeck::hir::pat_util","",260,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","rustc_typeck::session::search_paths","",261,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nested_visit_map","rustc_typeck::hir::intravisit","",262,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_id","","",262,null],[11,"nested_visit_map","rustc_typeck::lint","Because lints are scoped lexically, we want to walk nested items in the context of the outer item, so enable deep-walking.",132,{"inputs":[{"name":"self"}],"output":{"name":"nestedvisitormap"}}],[11,"visit_id","","",132,null],[11,"visit_nested_body","","",132,null],[11,"visit_body","","",132,null],[11,"visit_item","","",132,null],[11,"visit_foreign_item","","",132,null],[11,"visit_pat","","",132,null],[11,"visit_expr","","",132,null],[11,"visit_stmt","","",132,null],[11,"visit_fn","","",132,null],[11,"visit_variant_data","","",132,null],[11,"visit_struct_field","","",132,null],[11,"visit_variant","","",132,null],[11,"visit_ty","","",132,null],[11,"visit_name","","",132,null],[11,"visit_mod","","",132,null],[11,"visit_local","","",132,null],[11,"visit_block","","",132,null],[11,"visit_arm","","",132,null],[11,"visit_decl","","",132,null],[11,"visit_generics","","",132,null],[11,"visit_trait_item","","",132,null],[11,"visit_impl_item","","",132,null],[11,"visit_lifetime","","",132,null],[11,"visit_lifetime_def","","",132,null],[11,"visit_path","","",132,null],[11,"visit_attribute","","",132,null],[11,"encode","rustc_typeck::hir::map::definitions","",235,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::svh","",236,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::lint","",237,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::dep_graph","",4,{"inputs":[{"name":"self"},{"name":"__sd"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::def","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::def_id","",238,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::intravisit","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir::map","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::hir","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",102,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",103,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",104,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",106,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",107,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",108,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",109,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",110,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",111,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",112,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",113,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",114,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",115,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",116,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",117,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",118,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",119,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",120,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::lint","",131,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",239,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::const_val","",140,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::cstore","",144,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",146,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",147,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",148,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::free_region","",240,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::lang_items","",158,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::region","",241,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",178,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",179,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::resolve_lifetime","",180,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",181,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::middle::stability","",183,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","rustc_typeck::session::config","",189,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"super_fold_with","rustc_typeck::hir","",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"unsafety"}}],[11,"super_visit_with","","",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"cmp","rustc_typeck::dep_graph","",4,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"ordering"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"workproductid"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":{"name":"ordering"}}],[11,"cmp","","",238,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::hir","",68,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"ordering"}}],[11,"cmp","","",81,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"ordering"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::lint","",126,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::middle::cstore","",144,{"inputs":[{"name":"self"},{"name":"depkind"}],"output":{"name":"ordering"}}],[11,"cmp","","",147,{"inputs":[{"name":"self"},{"name":"nativelibrarykind"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::middle::privacy","",175,{"inputs":[{"name":"self"},{"name":"accesslevel"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::middle::region","",241,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"ordering"}}],[11,"cmp","","",177,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"ordering"}}],[11,"cmp","","",178,{"inputs":[{"name":"self"},{"name":"callsitescopedata"}],"output":{"name":"ordering"}}],[11,"cmp","","",179,{"inputs":[{"name":"self"},{"name":"blockremainder"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::session::config","",189,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"ordering"}}],[11,"cmp","","",196,{"inputs":[{"name":"self"},{"name":"cratetype"}],"output":{"name":"ordering"}}],[11,"cmp","rustc_typeck::session::search_paths","",204,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"ordering"}}],[11,"new","rustc_typeck::dep_graph::debug","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"test","","",0,{"inputs":[{"name":"self"},{"name":"depnode"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"new","rustc_typeck::dep_graph","",249,{"inputs":[{"name":"depgraphthreaddata"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"from_label_string","","Used in testing",4,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",4,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"new","","",244,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",244,null],[11,"insert","","",244,null],[11,"entry","","",244,null],[11,"contains_key","","",244,null],[11,"keys","","",244,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"push","","Append `elem` to the vector stored for `k`, creating a new vector if needed. This is considered a write to `k`.",244,null],[11,"new","","",5,null],[11,"contains_node","","",5,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"bool"}}],[11,"nodes","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"edges","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"transitive_successors","","All nodes reachable from `node`. In other words, things that will have to be recomputed if `node` changes.",5,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"transitive_predecessors","","All nodes that can reach `node`.",5,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"immediate_successors","","Just the outgoing edges from `node`.",5,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"vec"}}],[11,"new","","",257,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"is_fully_enabled","","True if we are actually building the full dep-graph.",257,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"query","","",257,{"inputs":[{"name":"self"}],"output":{"name":"depgraphquery"}}],[11,"in_ignore","","",257,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"in_task","","",257,{"inputs":[{"name":"self"},{"name":"depnode"}],"output":{"name":"option"}}],[11,"with_ignore","","",257,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"with_task","","Starts a new dep-graph task. Dep-graph tasks are specified using a free function (`task`) and **not** a closure -- this is intentional because we want to exercise tight control over what state they have access to. In particular, we want to prevent implicit 'leaks' of tracked state into the task (which could then be read without generating correct edges in the dep-graph -- see the [README] for more details on the dep-graph). To this end, the task function gets exactly two pieces of state: the context `cx` and an argument `arg`. Both of these bits of state must be of some type that implements `DepGraphSafe` and hence does not leak.",257,null],[11,"read","","",257,null],[11,"write","","",257,null],[11,"insert_previous_work_product","","Indicates that a previous work product exists for `v`. This is invoked during initial start-up based on what nodes are clean (and what files exist in the incr. directory).",257,null],[11,"insert_work_product","","Indicates that we created the given work-product in this run for `v`. This record will be preserved and loaded in the next run.",257,null],[11,"previous_work_product","","Check whether a previous work product exists for `v` and, if so, return the path that leads to it. Used to skip doing work.",257,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"option"}}],[11,"work_products","","Access the map of work-products created during this run. Only used during saving of the dep-graph.",257,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"previous_work_products","","Access the map of work-products created during the cached run. Only used during saving of the dep-graph.",257,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"from_ast","rustc_typeck::hir::def","",7,{"inputs":[{"name":"variantdata"}],"output":{"name":"ctorkind"}}],[11,"from_hir","","",7,{"inputs":[{"name":"variantdata"}],"output":{"name":"ctorkind"}}],[11,"def_id","","",8,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"kind_name","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",251,{"inputs":[{"name":"def"}],"output":{"name":"pathresolution"}}],[11,"with_unresolved_segments","","",251,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"pathresolution"}}],[11,"base_def","","",251,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"unresolved_segments","","",251,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind_name","","",251,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","rustc_typeck::hir::def_id","",242,{"inputs":[{"name":"usize"}],"output":{"name":"cratenum"}}],[11,"from_u32","","",242,{"inputs":[{"name":"u32"}],"output":{"name":"cratenum"}}],[11,"as_usize","","",242,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",242,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","",238,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",238,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",238,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"local","","",10,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attrs","rustc_typeck::hir::intravisit","",11,null],[11,"intra","","Returns the map to use for an \"intra item-like\" thing (if any). e.g., function body.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inter","","Returns the map to use for an \"item-like\" thing (if any). e.g., item, impl-item.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",14,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",14,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"add","","",14,null],[11,"new","","",262,{"inputs":[{"name":"map"}],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",262,{"inputs":[{"name":"self"}],"output":{"name":"idrange"}}],[11,"new","rustc_typeck::hir::itemlikevisit","",243,{"inputs":[{"name":"v"}],"output":{"name":"deepvisitor"}}],[11,"lower_item","rustc_typeck::hir::lowering","",263,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"option"}}],[11,"from_node","rustc_typeck::hir::map::blocks","Attempts to construct a FnLikeNode from presumed FnLike node input.",252,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"body","","",252,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"decl","","",252,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"span","","",252,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"id","","",252,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"constness","","",252,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"kind","","",252,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"id","","",18,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Expr node input.",18,{"inputs":[{"name":"map"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"def_key","rustc_typeck::hir::map::definitions","",235,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_index_for_def_key","","",235,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"option"}}],[11,"contains_key","","",235,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"bool"}}],[11,"retrace_path","","",235,null],[11,"new","rustc_typeck::hir::map","Create new empty definition map.",258,{"inputs":[],"output":{"name":"definitions"}}],[11,"def_path_table","","",258,{"inputs":[{"name":"self"}],"output":{"name":"defpathtable"}}],[11,"len","","Get the number of definitions.",258,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"def_key","","",258,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defkey"}}],[11,"def_index_for_def_key","","",258,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"option"}}],[11,"def_path","","Returns the path from the crate root to `index`. The root nodes are not included in the path (i.e., this will be an empty vector for the crate root). For an inlined item, this will be the path of the item in the external crate (but the path will begin with the path to the external crate).",258,{"inputs":[{"name":"self"},{"name":"defindex"}],"output":{"name":"defpath"}}],[11,"opt_def_index","","",258,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"opt_local_def_id","","",258,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"local_def_id","","",258,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"as_local_node_id","","",258,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"create_def_with_parent","","Add a definition with a parent definition.",258,{"inputs":[{"name":"self"},{"name":"option"},{"name":"nodeid"},{"name":"defpathdata"}],"output":{"name":"defindex"}}],[11,"is_local","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"make","","",21,{"inputs":[{"name":"cratenum"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"to_string","","",21,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"deterministic_hash","","",21,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"u64"}}],[11,"deterministic_hash_to","","",21,null],[11,"get_opt_name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_interned_str","","",22,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"to_string","","",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","",24,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",24,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"read","","Registers a read in the dependency graph of the AST node with the given `id`. This needs to be called each time a public function returns the HIR for a node -- in other words, when it \"reveals\" the content of a node to the caller (who might not otherwise have had access to those contents, and hence needs a read recorded). If the function just returns a DefId or NodeId, no actual content was returned, so no read is needed.",25,null],[11,"num_local_def_ids","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"definitions","","",25,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"def_key","","",25,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defkey"}}],[11,"def_path_from_id","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"def_path","","",25,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"defpath"}}],[11,"def_index_for_def_key","","",25,{"inputs":[{"name":"self"},{"name":"defkey"}],"output":{"name":"option"}}],[11,"local_def_id","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"opt_local_def_id","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"as_local_node_id","","",25,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"krate","","",25,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"trait_item","","",25,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"traititem"}}],[11,"impl_item","","",25,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"implitem"}}],[11,"body","","",25,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"body"}}],[11,"body_owner","","Returns the `NodeId` that corresponds to the definition of which this is the body of, i.e. a `fn`, `const` or `static` item (possibly associated), or a closure, or the body itself for embedded constant expressions (e.g. `N` in `[T; N]`).",25,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"nodeid"}}],[11,"body_owner_def_id","","",25,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"defid"}}],[11,"ty_param_owner","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"ty_param_name","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"symbol"}}],[11,"trait_impls","","",25,null],[11,"trait_default_impl","","",25,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"trait_is_auto","","",25,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to invoking `krate.attrs` because it registers a tighter dep-graph access.",25,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot be found.",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"node"}}],[11,"get_if_local","","",25,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"find","","Retrieve the Node corresponding to `id`, returning None if cannot be found.",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no parent. This function returns the immediate parent in the AST, whereas get_parent returns the enclosing item. Note that this might not be the actual parent node in the AST - some kinds of nodes are not in the map and these will never appear as the parent_node. So you can always walk the parent_nodes from a node to the root of the ast (unless you get the same id back here that can happen if the id is not in the map itself or is just weird).",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose immediate parent is an item or a closure.",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"get_parent","","Retrieve the NodeId for `id`'s parent item, or `id` itself if no parent item is in this map. The \"parent item\" is the closest parent node in the AST which is recorded by the map and is an item, either an item in a module, trait, or impl.",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"get_module_parent","","Returns the NodeId of `id`'s nearest module parent, or `id` itself if no module parent is in this map.",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block. FIXME it is not clear to me that all items qualify as scopes - statics and associated types probably shouldn't, for example. Behaviour in this regard should be expected to be highly unstable.",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"get_parent_did","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"defid"}}],[11,"get_foreign_abi","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"abi"}}],[11,"expect_item","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"item"}}],[11,"expect_impl_item","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"implitem"}}],[11,"expect_trait_item","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"traititem"}}],[11,"expect_variant_data","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"variantdata"}}],[11,"expect_variant","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"spanned"}}],[11,"expect_foreign_item","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"foreignitem"}}],[11,"expect_expr","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"expr"}}],[11,"get_inlined_body","","",25,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"intern_inlined_body","","",25,{"inputs":[{"name":"self"},{"name":"defid"},{"name":"body"}],"output":{"name":"body"}}],[11,"name","","Returns the name associated with the given NodeId's AST.",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"symbol"}}],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST corresponding to the Node ID",25,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id's with paths that match `parts`.  (Requires `parts` is non-empty.)",25,null],[11,"span","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"span"}}],[11,"span_if_local","","",25,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"node_to_string","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"node_to_user_string","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"node_to_pretty_string","","",25,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"string"}}],[11,"new","","",27,{"inputs":[{"name":"definitions"}],"output":{"name":"defcollector"}}],[11,"collect_root","","",27,null],[11,"with_parent","","",27,null],[11,"visit_const_expr","","",27,null],[11,"print_node","rustc_typeck::hir::print","",32,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"result"}}],[11,"new_from_input","","",32,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",32,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"nbsp","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"word_nbsp","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bclose_","","",32,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",32,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",32,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"space_if_not_bol","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"break_offset_if_not_bol","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",32,null],[11,"commasep_exprs","","",32,null],[11,"print_mod","","",32,null],[11,"print_foreign_mod","","",32,null],[11,"print_opt_lifetime","","",32,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_type","","",32,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",32,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",32,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_trait_ref","","",32,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"print_enum_def","","",32,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"symbol"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",32,null],[11,"print_visibility","","",32,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"generics"},{"name":"symbol"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_variant","","",32,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_method_sig","","",32,null],[11,"print_trait_item","","",32,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",32,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",32,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_block","","",32,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",32,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_indent","","",32,{"inputs":[{"name":"self"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",32,null],[11,"print_block_maybe_unclosed","","",32,null],[11,"print_if","","",32,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",32,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_expr_maybe_paren","","",32,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",32,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",32,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_decl","","",32,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_usize","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",32,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"result"}}],[11,"print_for_decl","","",32,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_path","","",32,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_qpath","","",32,{"inputs":[{"name":"self"},{"name":"qpath"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_pat","","",32,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",32,null],[11,"print_capture_clause","","",32,{"inputs":[{"name":"self"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"print_bounds","","",32,null],[11,"print_lifetime","","",32,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_def","","",32,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"result"}}],[11,"print_generics","","",32,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",32,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",32,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_mutability","","",32,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",32,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_fn_output","","",32,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",32,{"inputs":[{"name":"self"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",32,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",32,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",32,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",32,{"inputs":[{"name":"self"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",32,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"new","rustc_typeck::hir::svh","Create a new `Svh` given the hash. If you actually want to compute the SVH from some HIR, you want the `calculate_svh` function found in `librustc_incremental`.",236,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_u64","","",236,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_string","","",236,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_elided","rustc_typeck::hir","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_name","","Convert an identifier to the corresponding segment.",36,{"inputs":[{"name":"symbol"}],"output":{"name":"pathsegment"}}],[11,"none","","",37,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type parameters in the parenthesized case.",37,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"lifetimes","","",37,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"bindings","","",37,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"empty","","",43,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"carries_unsafe_attr","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"attr_name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"item","","",50,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"item"}}],[11,"trait_item","","",50,{"inputs":[{"name":"self"},{"name":"traititemid"}],"output":{"name":"traititem"}}],[11,"impl_item","","",50,{"inputs":[{"name":"self"},{"name":"implitemid"}],"output":{"name":"implitem"}}],[11,"visit_all_item_likes","","Visits all items in the crate in some determinstic (but unspecified) order. If you just need to process every item, but don't care about nesting, this method is the best choice.",50,null],[11,"body","","",50,{"inputs":[{"name":"self"},{"name":"bodyid"}],"output":{"name":"body"}}],[11,"is_refutable","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_const","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"each_binding","","Call `f` on every \"binding\" in a pattern, e.g., on `a` in `match foo() { Some(a) => (), None => () }`",53,null],[11,"contains_bindings","","Checks if the pattern contains any patterns that bind something to an ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to an ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"simple_name","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"necessary_variants","","Return variants that are necessary to exist for the pattern to match.",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"contains_ref_binding","","Checks if the pattern contains any `ref` or `ref mut` bindings, and if yes whether its containing mutable ones or just immutables ones.",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"walk","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"as_str","","",59,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_lazy","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shift","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_comparison","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",60,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attrs","","",61,null],[11,"id","","",61,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"attrs","","",63,null],[11,"contains_ref_binding","","Checks if the patterns for this arm contain any `ref` or `ref mut` bindings, and if yes whether its containing mutable ones or just immutables ones.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"id","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bodyid"}}],[11,"has_value","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_final","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_default","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",101,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_positional","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fields","","",111,null],[11,"id","","",111,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"descriptive_variant","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"descriptive_variant","","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_lower","rustc_typeck::lint","Get the lint's name, with ASCII letters converted to lowercase.",122,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"of","","Get the `LintId` for a `Lint`.",237,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"to_string","","Get the name of the lint.",237,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_str","","Convert a level to a lower-case string.",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","Convert a lower-case string to a level.",126,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",239,{"inputs":[],"output":{"name":"linttable"}}],[11,"add_lint","","",239,null],[11,"add_lint_diagnostic","","",239,null],[11,"get","","",239,null],[11,"take","","",239,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"vec"}}],[11,"transfer","","",239,null],[11,"get_any","","Returns the first (id, lint) pair that is non-empty. Used to implement a sanity check in lints that all node-ids are visited.",239,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",264,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",264,null],[11,"get_lint_groups","","",264,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"register_early_pass","","",264,null],[11,"register_late_pass","","",264,null],[11,"register_future_incompatible","","",264,null],[11,"future_incompatible","","",264,{"inputs":[{"name":"self"},{"name":"lintid"}],"output":{"name":"option"}}],[11,"register_group","","",264,null],[11,"register_renamed","","",264,null],[11,"register_removed","","",264,null],[11,"process_command_line","","",264,null],[11,"new","rustc_typeck::middle::expr_use_visitor","",265,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"with_options","","",265,{"inputs":[{"name":"delegate"},{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"exprusevisitor"}}],[11,"consume_body","","",265,null],[11,"consume_expr","","",265,null],[11,"walk_expr","","",265,null],[11,"description","rustc_typeck::middle::const_val","",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_const_int","","",140,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new_unsigned","","Creates a new unsigned ConstInt with matching type while also checking that overflow does not happen.",141,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"option"}}],[11,"new_signed","","Creates a new signed ConstInt with matching type while also checking that overflow does not happen.",141,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"option"}}],[11,"new_unsigned_truncating","","Creates a new unsigned ConstInt with matching type.",141,{"inputs":[{"name":"u128"},{"name":"uintty"},{"name":"uintty"}],"output":{"name":"constint"}}],[11,"new_signed_truncating","","Creates a new signed ConstInt with matching type.",141,{"inputs":[{"name":"i128"},{"name":"intty"},{"name":"intty"}],"output":{"name":"constint"}}],[11,"description","","Description of the type, not the value",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_u128_unchecked","","Erases the type and returns a u128. This is not the same as `-5i8 as u128` but as `-5i8 as i128 as u128`",141,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_u32","","Converts the value to a `u32` if it's in the range 0...std::u32::MAX",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","Converts the value to a `u64` if it's in the range 0...std::u64::MAX",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u128","","Converts the value to a `u128` if it's in the range 0...std::u128::MAX",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",141,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64","","",141,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_negative","","",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_cmp","","Compares the values if they are of the same type",141,{"inputs":[{"name":"self"},{"name":"constint"}],"output":{"name":"result"}}],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",141,{"inputs":[{"name":"self"}],"output":{"name":"constint"}}],[11,"int_type","","",141,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"macros_only","rustc_typeck::middle::cstore","",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_some","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"option","","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rustc_typeck::middle::dataflow","",256,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",256,null],[11,"add_kill","","Indicates that `id` kills `bit`",256,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`. Only useful after `propagate()` has been called.",256,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`. Only useful after `propagate()` has been called.",256,{"inputs":[{"name":"self"},{"name":"entryorexit"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",256,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"f"}],"output":{"name":"bool"}}],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow exits through any number of enclosing scopes on its way to the new destination. This function infers the kill bits of those control operators based on the kill bits associated with those scopes.",256,null],[11,"propagate","","Performs the data flow analysis.",256,null],[11,"new","rustc_typeck::middle::free_region","",240,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"is_empty","","",240,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"relate_free_regions_from_implied_bounds","","",240,null],[11,"relate_free_regions_from_predicates","","",240,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship by walking the graph encoded in `map`.  Note that it is possible that `sub != sup` and `sub <= sup` and `sup <= sub` (that is, the user can give two different names to the same lifetime).",240,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"lub_free_regions","","",240,{"inputs":[{"name":"self"},{"name":"freeregion"},{"name":"freeregion"}],"output":{"name":"region"}}],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after inference* and sadly the logic is somewhat duplicated with the code in infer.rs.",240,{"inputs":[{"name":"self"},{"name":"tyctxt"},{"name":"region"},{"name":"region"}],"output":{"name":"bool"}}],[11,"is_static","","Determines whether this free-region is required to be 'static",240,{"inputs":[{"name":"self"},{"name":"freeregion"}],"output":{"name":"bool"}}],[11,"from_u32","rustc_typeck::middle::lang_items","",158,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",159,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",159,null],[11,"item_name","","",159,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",159,{"inputs":[{"name":"self"},{"name":"langitem"}],"output":{"name":"result"}}],[11,"require_owned_box","","",159,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fn_trait_kind","","",159,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"char_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"slice_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"const_ptr_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mut_ptr_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i8_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i16_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i32_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i64_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"i128_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"isize_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u8_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u32_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u64_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u128_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"usize_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f32_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"f64_impl","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sized_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsize_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"copy_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sync_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"coerce_unsized_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"not_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"add_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"div_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitxor_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shl_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shr_assign_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index_mut_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unsafe_cell_type","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_mut_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fn_once_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ord_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"str_eq_fn","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fn","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_bounds_check_fn","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"panic_fmt","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"exchange_malloc_fn","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"box_free_fn","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strdup_uniq_fn","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_fn","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_personality","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eh_unwind_resume","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"msvc_try_filter","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"owned_box","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"phantom_data","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_type","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_type","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_type","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"covariant_lifetime","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contravariant_lifetime","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invariant_lifetime","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_copy_bound","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"non_zero","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"debug_trait","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_mutbl","rustc_typeck::middle::mem_categorization","",167,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",167,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",167,{"inputs":[{"name":"self"}],"output":{"name":"mutabilitycategory"}}],[11,"is_mutable","","",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_immutable","","",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_user_str","","",167,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_field","","",169,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"option"}}],[11,"get_field_name","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_arg_if_immutable","","",169,{"inputs":[{"name":"self"},{"name":"map"}],"output":{"name":"option"}}],[11,"guarantor","","Returns `self` after stripping away any derefs or interior content. The return value is basically the `cmt` which determines how long the value in `self` remains live.",169,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",169,{"inputs":[{"name":"self"}],"output":{"name":"aliasability"}}],[11,"upvar","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"descriptive_string","","",169,{"inputs":[{"name":"self"},{"name":"tyctxt"}],"output":{"name":"string"}}],[11,"new","","",171,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"with_options","","",171,{"inputs":[{"name":"inferctxt"},{"name":"memcategorizationoptions"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",171,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_expr_autoderefd","","",171,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"cat_expr_unadjusted","","",171,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"cat_def","","",171,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"},{"name":"def"}],"output":{"name":"result"}}],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`. This could be `'static` if `id` is part of a constant expression.",171,null],[11,"cat_rvalue_node","","",171,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_rvalue","","",171,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"span"},{"name":"region"},{"name":"region"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_field","","",171,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"symbol"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_tup_field","","",171,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"usize"},{"name":"tys"}],"output":{"name":"rc"}}],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",171,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"interioroffsetkind"}],"output":{"name":"result"}}],[11,"cat_imm_interior","","",171,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"interiorkind"}],"output":{"name":"rc"}}],[11,"cat_downcast","","",171,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rc"},{"name":"tys"},{"name":"defid"}],"output":{"name":"rc"}}],[11,"cat_pattern","","",171,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"pat"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_reachable","rustc_typeck::middle::privacy","",176,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_exported","","",176,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"is_public","","",176,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"node_id","rustc_typeck::middle::region","",241,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"nodeid"}}],[11,"span","","Returns the span of this CodeExtent.  Note that in general the returned span may not correspond to the span of any node id in the AST.",241,{"inputs":[{"name":"self"},{"name":"regionmaps"},{"name":"map"}],"output":{"name":"option"}}],[11,"node_id","","Returns a node id associated with this scope.",177,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"to_code_extent","","",178,{"inputs":[{"name":"self"},{"name":"regionmaps"}],"output":{"name":"codeextent"}}],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody really cares about the contents of these.",266,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"lookup_code_extent","","",266,{"inputs":[{"name":"self"},{"name":"codeextentdata"}],"output":{"name":"codeextent"}}],[11,"node_extent","","",266,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"item_extent","","",266,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"call_site_extent","","",266,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"opt_destruction_extent","","",266,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"intern_code_extent","","",266,{"inputs":[{"name":"self"},{"name":"codeextentdata"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"intern_node","","",266,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"code_extent_data","","",266,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextentdata"}}],[11,"each_encl_scope","","",266,null],[11,"each_var_scope","","",266,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",266,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"option"}}],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",266,{"inputs":[{"name":"self"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",266,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"codeextent"}}],[11,"temporary_scope2","","",266,null],[11,"old_and_new_temporary_scope","","",266,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",266,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"var_region","","Returns the lifetime of the variable `id`.",266,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"region"}}],[11,"scopes_intersect","","",266,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false otherwise.",266,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"bool"}}],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest scope which is greater than or equal to both `scope_a` and `scope_b`.",266,{"inputs":[{"name":"self"},{"name":"codeextent"},{"name":"codeextent"}],"output":{"name":"codeextent"}}],[11,"insert","rustc_typeck::middle::resolve_lifetime","",181,null],[11,"from_attr_level","rustc_typeck::middle::stability","",183,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"same_origin","","",184,{"inputs":[{"name":"self"},{"name":"deprecationentry"}],"output":{"name":"bool"}}],[11,"build","","Construct the stability index for a crate being compiled.",267,null],[11,"new","","",267,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"extension","rustc_typeck::session::config","",189,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",246,null],[11,"get","","",246,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"option"}}],[11,"contains_key","","",246,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"bool"}}],[11,"keys","","",246,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","",246,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"should_trans","","",246,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",247,{"inputs":[{"name":"btreemap"}],"output":{"name":"externs"}}],[11,"get","","",247,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",247,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",191,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"single_codegen_unit","","",191,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dep_tracking_hash","","",191,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"filestem","","",193,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"path","","",194,{"inputs":[{"name":"self"},{"name":"outputtype"}],"output":{"name":"pathbuf"}}],[11,"temp_path","","Get the path where a compilation artifact of the given type for the given codegen unit should be placed on disk. If codegen_unit_name is None, a path distinct from those of any codegen unit will be generated.",194,{"inputs":[{"name":"self"},{"name":"outputtype"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"temp_path_ext","","Like temp_path, but also supports things where there is no corresponding OutputType, like no-opt-bitcode or lto-bitcode.",194,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","",194,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"filestem","","",194,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_empty","","",197,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",201,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stable","","",201,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",201,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"for_each_lib_search_path","rustc_typeck::session::filesearch","",203,null],[11,"get_lib_path","","",203,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"search","","",203,null],[11,"new","","",203,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",203,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tools_search_paths","","",203,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","rustc_typeck::session::search_paths","",254,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",254,null],[11,"iter","","",254,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"iter"}}],[11,"local_crate_disambiguator","rustc_typeck::session","",205,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"struct_span_warn","","",205,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",205,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",205,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",205,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",205,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",205,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",205,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",205,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",205,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",205,null],[11,"span_fatal_with_code","","",205,null],[11,"fatal","","",205,null],[11,"span_err_or_warn","","",205,null],[11,"span_err","","",205,null],[11,"span_err_with_code","","",205,null],[11,"err","","",205,null],[11,"err_count","","",205,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",205,null],[11,"track_errors","","",205,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"span_warn","","",205,null],[11,"span_warn_with_code","","",205,null],[11,"warn","","",205,null],[11,"opt_span_warn","","",205,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",205,null],[11,"note_without_error","","",205,null],[11,"span_note_without_error","","",205,null],[11,"span_unimpl","","",205,null],[11,"unimpl","","",205,null],[11,"add_lint","","",205,null],[11,"add_lint_diagnostic","","",205,null],[11,"reserve_node_ids","","",205,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"next_node_id","","",205,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"diagnostic","","",205,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"diag_span_note_once","","Analogous to calling `.span_note` on the given DiagnosticBuilder, but deduplicates on lint ID, span, and message for this `Session` if we're not outputting in JSON mode.",205,null],[11,"codemap","","",205,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"verbose","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_passes","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"count_llvm_insns","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"time_llvm_passes","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trans_stats","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta_stats","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"asm_comments","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"no_verify","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrowck_stats","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print_llvm_passes","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lto","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"panic_strategy","","Returns the panic strategy for this compile session. If the user explicitly selected one using '-C panic', use that, otherwise use the panic strategy defined by the target.",205,{"inputs":[{"name":"self"}],"output":{"name":"panicstrategy"}}],[11,"no_landing_pads","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unstable_options","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"nonzeroing_move_hints","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"overflow_checks","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"must_not_eliminate_frame_pointers","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate_plugin_registrar_symbol","","Returns the symbol name for the registrar function, given the crate Svh and the function DefIndex.",205,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"generate_derive_registrar_symbol","","",205,{"inputs":[{"name":"self"},{"name":"svh"},{"name":"defindex"}],"output":{"name":"string"}}],[11,"sysroot","","",205,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"target_filesearch","","",205,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"host_filesearch","","",205,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"init_incr_comp_session","","",205,null],[11,"finalize_incr_comp_session","","",205,null],[11,"mark_incr_comp_session_as_invalid","","",205,null],[11,"incr_comp_session_dir","","",205,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"incr_comp_session_dir_opt","","",205,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_perf_stats","","",205,null],[11,"new","","",245,{"inputs":[],"output":{"name":"codestats"}}],[11,"record_type_size","","",245,null],[11,"print_type_sizes","","",245,null]],"paths":[[3,"EdgeFilter"],[3,"WorkProductId"],[8,"DepTrackingMapConfig"],[3,"AssertDepGraphSafe"],[4,"DepNode"],[3,"DepGraphQuery"],[3,"WorkProduct"],[4,"CtorKind"],[4,"Def"],[3,"Export"],[3,"DefId"],[4,"FnKind"],[4,"NestedVisitorMap"],[8,"Visitor"],[3,"IdRange"],[8,"ItemLikeVisitor"],[8,"Resolver"],[8,"MaybeFnLike"],[4,"Code"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefPath"],[4,"DefPathData"],[4,"Node"],[3,"Forest"],[3,"Map"],[3,"MacroInvocationData"],[3,"DefCollector"],[8,"EnumerateAndAdjustIterator"],[4,"AnnNode"],[4,"Nested"],[8,"PpAnn"],[3,"State"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"Generics"],[4,"UnsafeGeneric"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"RangeEnd"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[3,"Local"],[4,"Decl_"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[3,"BodyId"],[3,"Body"],[3,"Expr"],[4,"Expr_"],[4,"QPath"],[4,"MatchSource"],[4,"LoopSource"],[4,"LoopIdError"],[4,"LoopIdResult"],[3,"Destination"],[4,"CaptureClause"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItemId"],[3,"TraitItem"],[4,"TraitMethod"],[4,"TraitItemKind"],[3,"ImplItemId"],[3,"ImplItem"],[4,"ImplItemKind"],[3,"TypeBinding"],[3,"Ty"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"UseKind"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField"],[4,"VariantData"],[3,"ItemId"],[3,"Item"],[4,"Item_"],[3,"TraitItemRef"],[3,"ImplItemRef"],[4,"AssociatedItemKind"],[3,"ForeignItem"],[4,"ForeignItem_"],[3,"Freevar"],[3,"TraitCandidate"],[3,"Lint"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[4,"Level"],[4,"LintSource"],[8,"LintContext"],[8,"IntoEarlyLint"],[3,"EarlyContext"],[3,"EarlyLint"],[3,"LateContext"],[3,"FutureIncompatibleInfo"],[8,"Delegate"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[4,"ConstVal"],[4,"ConstInt"],[3,"LinkMeta"],[3,"CrateSource"],[4,"DepKind"],[4,"LibSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"NativeLibrary"],[4,"LoadedMacro"],[3,"ExternCrate"],[8,"CrateStore"],[8,"CrateLoader"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[4,"KillFrom"],[4,"Linkage"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[8,"ast_node"],[3,"MemCategorizationContext"],[3,"MemCategorizationOptions"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"Region"],[4,"Set1"],[3,"NamedRegionMap"],[4,"StabilityLevel"],[3,"DeprecationEntry"],[3,"Config"],[4,"Sanitizer"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[4,"PathKind"],[3,"Session"],[3,"PerfStats"],[4,"IncrCompSession"],[3,"TypeSizeInfo"],[4,"SizeKind"],[3,"FieldInfo"],[3,"VariantInfo"],[4,"DataTypeKind"],[8,"MemoizationMap"],[4,"LinkOrCopy"],[4,"RenameOrCopyRemove"],[3,"TypeAndSubsts"],[3,"UnsafetyState"],[4,"Expectation"],[3,"FnCtxt"],[3,"RegionCtxt"],[3,"NoMatchData"],[4,"MethodError"],[4,"CandidateSource"],[3,"IsSuggestion"],[3,"Pick"],[4,"LookingFor"],[4,"PickKind"],[4,"Mode"],[3,"Inherited"],[3,"LoopCtxt"],[3,"EnclosingLoops"],[4,"SizedByDefault"],[3,"DepNodeFilter"],[3,"HardwiredLints"],[3,"DefPathTable"],[3,"Svh"],[3,"LintId"],[3,"DefIndex"],[3,"LintTable"],[3,"FreeRegionMap"],[3,"CodeExtent"],[3,"CrateNum"],[3,"DeepVisitor"],[3,"DepTrackingMap"],[3,"CodeStats"],[3,"OutputTypes"],[3,"Externs"],[3,"DummyCrateStore"],[3,"DepTask"],[3,"Indenter"],[3,"PathResolution"],[3,"FnLikeNode"],[3,"Context"],[3,"SearchPaths"],[3,"ErrorReported"],[3,"DataFlowContext"],[3,"DepGraph"],[3,"Definitions"],[3,"NodesMatchingSuffix"],[3,"EnumerateAndAdjust"],[3,"Iter"],[3,"IdRangeComputingVisitor"],[3,"LoweringContext"],[3,"LintStore"],[3,"ExprUseVisitor"],[3,"RegionMaps"],[3,"Index"]]};
searchIndex["rustdoc"] = {"doc":"","items":[[5,"main","rustdoc","",null,{"inputs":[],"output":null}],[5,"opts","","",null,{"inputs":[],"output":{"name":"vec"}}],[5,"usage","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"main_args","","",null,null],[0,"externalfiles","","",null,null],[3,"ExternalHtml","rustdoc::externalfiles","",null,null],[12,"in_header","","Content that will be included inline in the <head> section of a rendered Markdown file or generated documentation",0,null],[12,"before_content","","Content that will be included inline between <body> and the content of a rendered Markdown file or generated documentation",0,null],[12,"after_content","","Content that will be included inline between the content and </body> of a rendered Markdown file or generated documentation",0,null],[4,"LoadStringError","","",null,null],[13,"ReadFail","","",1,null],[13,"BadUtf8","","",1,null],[5,"load_string","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"externalhtml"}}],[11,"load","","",0,null],[0,"clean","rustdoc","This module contains the \"cleaned\" pieces of the AST, and the functions that clean them.",null,null],[3,"Crate","rustdoc::clean","",null,null],[12,"name","","",2,null],[12,"src","","",2,null],[12,"module","","",2,null],[12,"externs","","",2,null],[12,"primitives","","",2,null],[12,"access_levels","","",2,null],[12,"external_traits","","",2,null],[3,"ExternalCrate","","",null,null],[12,"name","","",3,null],[12,"src","","",3,null],[12,"attrs","","",3,null],[12,"primitives","","",3,null],[3,"Item","","Anything with a source location and set of attributes and, optionally, a name. That is, anything that can be documented. This doesn't correspond directly to the AST's concept of an item; it's a strict superset.",null,null],[12,"source","","Stringified span",4,null],[12,"name","","Not everything has a name. E.g., impls",4,null],[12,"attrs","","",4,null],[12,"inner","","",4,null],[12,"visibility","","",4,null],[12,"def_id","","",4,null],[12,"stability","","",4,null],[12,"deprecation","","",4,null],[3,"Module","","",null,null],[12,"items","","",5,null],[12,"is_crate","","",5,null],[3,"ListAttributesIter","","",null,null],[3,"Attributes","","",null,null],[12,"doc_strings","","",6,null],[12,"other_attrs","","",6,null],[12,"span","","",6,null],[3,"TyParam","","",null,null],[12,"name","","",7,null],[12,"did","","",7,null],[12,"bounds","","",7,null],[12,"default","","",7,null],[3,"Lifetime","","",null,null],[3,"Generics","","",null,null],[12,"lifetimes","","",8,null],[12,"type_params","","",8,null],[12,"where_predicates","","",8,null],[3,"Method","","",null,null],[12,"generics","","",9,null],[12,"unsafety","","",9,null],[12,"constness","","",9,null],[12,"decl","","",9,null],[12,"abi","","",9,null],[3,"TyMethod","","",null,null],[12,"unsafety","","",10,null],[12,"decl","","",10,null],[12,"generics","","",10,null],[12,"abi","","",10,null],[3,"Function","","",null,null],[12,"decl","","",11,null],[12,"generics","","",11,null],[12,"unsafety","","",11,null],[12,"constness","","",11,null],[12,"abi","","",11,null],[3,"FnDecl","","",null,null],[12,"inputs","","",12,null],[12,"output","","",12,null],[12,"variadic","","",12,null],[12,"attrs","","",12,null],[3,"Arguments","","",null,null],[12,"values","","",13,null],[3,"Argument","","",null,null],[12,"type_","","",14,null],[12,"name","","",14,null],[3,"Trait","","",null,null],[12,"unsafety","","",15,null],[12,"items","","",15,null],[12,"generics","","",15,null],[12,"bounds","","",15,null],[3,"PolyTrait","","A trait reference, which may have higher ranked lifetimes.",null,null],[12,"trait_","","",16,null],[12,"lifetimes","","",16,null],[3,"Struct","","",null,null],[12,"struct_type","","",17,null],[12,"generics","","",17,null],[12,"fields","","",17,null],[12,"fields_stripped","","",17,null],[3,"Union","","",null,null],[12,"struct_type","","",18,null],[12,"generics","","",18,null],[12,"fields","","",18,null],[12,"fields_stripped","","",18,null],[3,"VariantStruct","","This is a more limited form of the standard Struct, different in that it lacks the things most items have (name, id, parameterization). Found only as a variant in an enum.",null,null],[12,"struct_type","","",19,null],[12,"fields","","",19,null],[12,"fields_stripped","","",19,null],[3,"Enum","","",null,null],[12,"variants","","",20,null],[12,"generics","","",20,null],[12,"variants_stripped","","",20,null],[3,"Variant","","",null,null],[12,"kind","","",21,null],[3,"Span","","",null,null],[12,"filename","","",22,null],[12,"loline","","",22,null],[12,"locol","","",22,null],[12,"hiline","","",22,null],[12,"hicol","","",22,null],[3,"Path","","",null,null],[12,"global","","",23,null],[12,"def","","",23,null],[12,"segments","","",23,null],[3,"PathSegment","","",null,null],[12,"name","","",24,null],[12,"params","","",24,null],[3,"Typedef","","",null,null],[12,"type_","","",25,null],[12,"generics","","",25,null],[3,"BareFunctionDecl","","",null,null],[12,"unsafety","","",26,null],[12,"generics","","",26,null],[12,"decl","","",26,null],[12,"abi","","",26,null],[3,"Static","","",null,null],[12,"type_","","",27,null],[12,"mutability","","",27,null],[12,"expr","","It's useful to have the value of a static documented, but I have no desire to represent expressions (that'd basically be all of the AST, which is huge!). So, have a string.",27,null],[3,"Constant","","",null,null],[12,"type_","","",28,null],[12,"expr","","",28,null],[3,"Impl","","",null,null],[12,"unsafety","","",29,null],[12,"generics","","",29,null],[12,"provided_trait_methods","","",29,null],[12,"trait_","","",29,null],[12,"for_","","",29,null],[12,"items","","",29,null],[12,"polarity","","",29,null],[3,"DefaultImpl","","",null,null],[12,"unsafety","","",30,null],[12,"trait_","","",30,null],[3,"ImportSource","","",null,null],[12,"path","","",31,null],[12,"did","","",31,null],[3,"Macro","","",null,null],[12,"source","","",32,null],[12,"imported_from","","",32,null],[3,"Stability","","",null,null],[12,"level","","",33,null],[12,"feature","","",33,null],[12,"since","","",33,null],[12,"deprecated_since","","",33,null],[12,"deprecated_reason","","",33,null],[12,"unstable_reason","","",33,null],[12,"issue","","",33,null],[3,"Deprecation","","",null,null],[12,"since","","",34,null],[12,"note","","",34,null],[3,"TypeBinding","","An equality constraint on an associated type, e.g. `A=Bar` in `Foo<A=Bar>`",null,null],[12,"name","","",35,null],[12,"ty","","",35,null],[4,"ItemEnum","","",null,null],[13,"ExternCrateItem","","",36,null],[13,"ImportItem","","",36,null],[13,"StructItem","","",36,null],[13,"UnionItem","","",36,null],[13,"EnumItem","","",36,null],[13,"FunctionItem","","",36,null],[13,"ModuleItem","","",36,null],[13,"TypedefItem","","",36,null],[13,"StaticItem","","",36,null],[13,"ConstantItem","","",36,null],[13,"TraitItem","","",36,null],[13,"ImplItem","","",36,null],[13,"TyMethodItem","","A method signature only. Used for required methods in traits (ie, non-default-methods).",36,null],[13,"MethodItem","","A method with a body.",36,null],[13,"StructFieldItem","","",36,null],[13,"VariantItem","","",36,null],[13,"ForeignFunctionItem","","`fn`s from an extern block",36,null],[13,"ForeignStaticItem","","`static`s from an extern block",36,null],[13,"MacroItem","","",36,null],[13,"PrimitiveItem","","",36,null],[13,"AssociatedConstItem","","",36,null],[13,"AssociatedTypeItem","","",36,null],[13,"DefaultImplItem","","",36,null],[13,"StrippedItem","","An item that has been stripped by a rustdoc pass",36,null],[4,"TyParamBound","","",null,null],[13,"RegionBound","","",37,null],[13,"TraitBound","","",37,null],[4,"WherePredicate","","",null,null],[13,"BoundPredicate","","",38,null],[12,"ty","rustdoc::clean::WherePredicate","",38,null],[12,"bounds","","",38,null],[13,"RegionPredicate","rustdoc::clean","",38,null],[12,"lifetime","rustdoc::clean::WherePredicate","",38,null],[12,"bounds","","",38,null],[13,"EqPredicate","rustdoc::clean","",38,null],[12,"lhs","rustdoc::clean::WherePredicate","",38,null],[12,"rhs","","",38,null],[4,"SelfTy","rustdoc::clean","",null,null],[13,"SelfValue","","",39,null],[13,"SelfBorrowed","","",39,null],[13,"SelfExplicit","","",39,null],[4,"FunctionRetTy","","",null,null],[13,"Return","","",40,null],[13,"DefaultReturn","","",40,null],[4,"Type","","A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original type out of the AST/TyCtxt given one of these, if more information is needed. Most importantly it does not preserve mutability or boxes.",null,null],[13,"ResolvedPath","","structs/enums/traits (most that'd be an hir::TyPath)",41,null],[12,"path","rustdoc::clean::Type","",41,null],[12,"typarams","","",41,null],[12,"did","","",41,null],[12,"is_generic","","true if is a `T::Name` path for associated types",41,null],[13,"Generic","rustdoc::clean","For parameterized types, so the consumer of the JSON don't go looking for types which don't exist anywhere.",41,null],[13,"Primitive","","Primitives are the fixed-size numeric types (plus int/usize/float), char, arrays, slices, and tuples.",41,null],[13,"BareFunction","","extern \"ABI\" fn",41,null],[13,"Tuple","","",41,null],[13,"Vector","","",41,null],[13,"FixedVector","","",41,null],[13,"Never","","",41,null],[13,"Unique","","",41,null],[13,"RawPointer","","",41,null],[13,"BorrowedRef","","",41,null],[12,"lifetime","rustdoc::clean::Type","",41,null],[12,"mutability","","",41,null],[12,"type_","","",41,null],[13,"QPath","rustdoc::clean","",41,null],[12,"name","rustdoc::clean::Type","",41,null],[12,"self_type","","",41,null],[12,"trait_","","",41,null],[13,"Infer","rustdoc::clean","",41,null],[13,"ImplTrait","","",41,null],[4,"PrimitiveType","","",null,null],[13,"Isize","","",42,null],[13,"I8","","",42,null],[13,"I16","","",42,null],[13,"I32","","",42,null],[13,"I64","","",42,null],[13,"I128","","",42,null],[13,"Usize","","",42,null],[13,"U8","","",42,null],[13,"U16","","",42,null],[13,"U32","","",42,null],[13,"U64","","",42,null],[13,"U128","","",42,null],[13,"F32","","",42,null],[13,"F64","","",42,null],[13,"Char","","",42,null],[13,"Bool","","",42,null],[13,"Str","","",42,null],[13,"Slice","","",42,null],[13,"Array","","",42,null],[13,"Tuple","","",42,null],[13,"RawPointer","","",42,null],[4,"TypeKind","","",null,null],[13,"Enum","","",43,null],[13,"Function","","",43,null],[13,"Module","","",43,null],[13,"Const","","",43,null],[13,"Static","","",43,null],[13,"Struct","","",43,null],[13,"Union","","",43,null],[13,"Trait","","",43,null],[13,"Variant","","",43,null],[13,"Typedef","","",43,null],[4,"Visibility","","",null,null],[13,"Public","","",44,null],[13,"Inherited","","",44,null],[4,"VariantKind","","",null,null],[13,"CLike","","",45,null],[13,"Tuple","","",45,null],[13,"Struct","","",45,null],[4,"PathParameters","","",null,null],[13,"AngleBracketed","","",46,null],[12,"lifetimes","rustdoc::clean::PathParameters","",46,null],[12,"types","","",46,null],[12,"bindings","","",46,null],[13,"Parenthesized","rustdoc::clean","",46,null],[12,"inputs","rustdoc::clean::PathParameters","",46,null],[12,"output","","",46,null],[4,"Mutability","rustdoc::clean","",null,null],[13,"Mutable","","",47,null],[13,"Immutable","","",47,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","",48,null],[13,"Negative","","",48,null],[4,"Import","","",null,null],[13,"Simple","","",49,null],[13,"Glob","","",49,null],[0,"inline","","Support for inlining external documentation into the current AST.",null,null],[5,"try_inline","rustdoc::clean::inline","Attempt to inline a definition into this AST.",null,{"inputs":[{"name":"doccontext"},{"name":"def"},{"name":"option"}],"output":{"name":"option"}}],[5,"load_attrs","","",null,{"inputs":[{"name":"doccontext"},{"name":"defid"}],"output":{"name":"attributes"}}],[5,"record_extern_fqn","","Record an external fully qualified name in the external_paths cache.",null,{"inputs":[{"name":"doccontext"},{"name":"defid"},{"name":"typekind"}],"output":null}],[5,"build_external_trait","","",null,{"inputs":[{"name":"doccontext"},{"name":"defid"}],"output":{"name":"trait"}}],[5,"build_impls","","",null,{"inputs":[{"name":"doccontext"},{"name":"defid"}],"output":{"name":"vec"}}],[5,"build_impl","","",null,{"inputs":[{"name":"doccontext"},{"name":"defid"},{"name":"vec"}],"output":null}],[8,"Clean","rustdoc::clean","",null,null],[10,"clean","","",50,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"t"}}],[8,"AttributesExt","","",null,null],[10,"lists","","Finds an attribute as List and returns the list of attributes nested inside.",51,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"listattributesiter"}}],[8,"NestedAttributesExt","","",null,null],[10,"has_word","","Returns whether the attribute list contains a specific `Word`",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[8,"GetDefId","","",null,null],[10,"def_id","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"externalcrate"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"doc_value","","Finds the `doc` attribute as a NameValue and returns the corresponding value found.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_crate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mod","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_trait","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_struct","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_enum","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fn","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_associated_type","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_associated_const","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_method","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ty_method","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_primitive","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stripped","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_stripped_fields","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stability_class","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stable_since","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"type_","","Returns a documentation-level item type from the item.",4,{"inputs":[{"name":"self"}],"output":{"name":"itemtype"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"itemenum"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"generics","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"module"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"attributes"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"attributes"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"attributes"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"attributes"}}],[11,"from_ast","","",6,null],[11,"doc_value","","Finds the `doc` attribute as a NameValue and returns the corresponding value found.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lists","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"listattributesiter"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"statik","","",55,{"inputs":[],"output":{"name":"lifetime"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tymethod"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_self","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"self_type","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"argument"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"selfty"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"selfty"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"selfty"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_self","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"polytrait"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"polytrait"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"polytrait"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"typekind"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"primitive_type","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_generic","","",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_self_type","","",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"def_id","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_url_str","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",42,{"inputs":[{"name":"intty"}],"output":{"name":"primitivetype"}}],[11,"from","","",42,{"inputs":[{"name":"uintty"}],"output":{"name":"primitivetype"}}],[11,"from","","",42,{"inputs":[{"name":"floatty"}],"output":{"name":"primitivetype"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"variantstruct"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"variantkind"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"singleton","","",23,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"last_name","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"typedef"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"barefunctiondecl"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"barefunctiondecl"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"barefunctiondecl"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"defaultimpl"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"import"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"importsource"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"deprecation"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"core","rustdoc","",null,null],[4,"Input","rustdoc::core","",null,null],[13,"File","","Load source from file",56,null],[13,"Str","","",56,null],[12,"name","rustdoc::core::Input","String that is shown in place of a filename",56,null],[12,"input","","Anonymous source string",56,null],[3,"SearchPaths","rustdoc::core","",null,null],[3,"DocContext","","",null,null],[12,"tcx","","",57,null],[12,"populated_all_crate_impls","","",57,null],[12,"access_levels","","Later on moved into `clean::Crate`",57,null],[12,"renderinfo","","Later on moved into `html::render::CACHE_KEY`",57,null],[12,"external_traits","","Later on moved through `clean::Crate` into `html::render::CACHE_KEY`",57,null],[12,"ty_substs","","Table type parameter definition -> substituted type",57,null],[12,"lt_substs","","Table node id of lifetime parameter definition -> substituted lifetime",57,null],[12,"export_map","","",57,null],[5,"run_core","","",null,null],[6,"ExternalPaths","","",null,null],[8,"DocAccessLevels","","",null,null],[10,"is_doc_reachable","","",58,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"sess","","",57,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"enter_alias","","Call the closure with the given parameters set as the substitutions for a type alias' RHS.",57,{"inputs":[{"name":"self"},{"name":"fxhashmap"},{"name":"fxhashmap"},{"name":"f"}],"output":{"name":"r"}}],[0,"doctree","rustdoc","This module is used to store stuff from Rust's AST in a more convenient manner (and with prettier names) before cleaning.",null,null],[3,"Module","rustdoc::doctree","",null,null],[12,"name","","",59,null],[12,"attrs","","",59,null],[12,"where_outer","","",59,null],[12,"where_inner","","",59,null],[12,"extern_crates","","",59,null],[12,"imports","","",59,null],[12,"structs","","",59,null],[12,"unions","","",59,null],[12,"enums","","",59,null],[12,"fns","","",59,null],[12,"mods","","",59,null],[12,"id","","",59,null],[12,"typedefs","","",59,null],[12,"statics","","",59,null],[12,"constants","","",59,null],[12,"traits","","",59,null],[12,"vis","","",59,null],[12,"stab","","",59,null],[12,"depr","","",59,null],[12,"impls","","",59,null],[12,"def_traits","","",59,null],[12,"foreigns","","",59,null],[12,"macros","","",59,null],[12,"is_crate","","",59,null],[3,"Struct","","",null,null],[12,"vis","","",60,null],[12,"stab","","",60,null],[12,"depr","","",60,null],[12,"id","","",60,null],[12,"struct_type","","",60,null],[12,"name","","",60,null],[12,"generics","","",60,null],[12,"attrs","","",60,null],[12,"fields","","",60,null],[12,"whence","","",60,null],[3,"Union","","",null,null],[12,"vis","","",61,null],[12,"stab","","",61,null],[12,"depr","","",61,null],[12,"id","","",61,null],[12,"struct_type","","",61,null],[12,"name","","",61,null],[12,"generics","","",61,null],[12,"attrs","","",61,null],[12,"fields","","",61,null],[12,"whence","","",61,null],[3,"Enum","","",null,null],[12,"vis","","",62,null],[12,"stab","","",62,null],[12,"depr","","",62,null],[12,"variants","","",62,null],[12,"generics","","",62,null],[12,"attrs","","",62,null],[12,"id","","",62,null],[12,"whence","","",62,null],[12,"name","","",62,null],[3,"Variant","","",null,null],[12,"name","","",63,null],[12,"attrs","","",63,null],[12,"def","","",63,null],[12,"stab","","",63,null],[12,"depr","","",63,null],[12,"whence","","",63,null],[3,"Function","","",null,null],[12,"decl","","",64,null],[12,"attrs","","",64,null],[12,"id","","",64,null],[12,"name","","",64,null],[12,"vis","","",64,null],[12,"stab","","",64,null],[12,"depr","","",64,null],[12,"unsafety","","",64,null],[12,"constness","","",64,null],[12,"whence","","",64,null],[12,"generics","","",64,null],[12,"abi","","",64,null],[12,"body","","",64,null],[3,"Typedef","","",null,null],[12,"ty","","",65,null],[12,"gen","","",65,null],[12,"name","","",65,null],[12,"id","","",65,null],[12,"attrs","","",65,null],[12,"whence","","",65,null],[12,"vis","","",65,null],[12,"stab","","",65,null],[12,"depr","","",65,null],[3,"Static","","",null,null],[12,"type_","","",66,null],[12,"mutability","","",66,null],[12,"expr","","",66,null],[12,"name","","",66,null],[12,"attrs","","",66,null],[12,"vis","","",66,null],[12,"stab","","",66,null],[12,"depr","","",66,null],[12,"id","","",66,null],[12,"whence","","",66,null],[3,"Constant","","",null,null],[12,"type_","","",67,null],[12,"expr","","",67,null],[12,"name","","",67,null],[12,"attrs","","",67,null],[12,"vis","","",67,null],[12,"stab","","",67,null],[12,"depr","","",67,null],[12,"id","","",67,null],[12,"whence","","",67,null],[3,"Trait","","",null,null],[12,"unsafety","","",68,null],[12,"name","","",68,null],[12,"items","","",68,null],[12,"generics","","",68,null],[12,"bounds","","",68,null],[12,"attrs","","",68,null],[12,"id","","",68,null],[12,"whence","","",68,null],[12,"vis","","",68,null],[12,"stab","","",68,null],[12,"depr","","",68,null],[3,"Impl","","",null,null],[12,"unsafety","","",69,null],[12,"polarity","","",69,null],[12,"generics","","",69,null],[12,"trait_","","",69,null],[12,"for_","","",69,null],[12,"items","","",69,null],[12,"attrs","","",69,null],[12,"whence","","",69,null],[12,"vis","","",69,null],[12,"stab","","",69,null],[12,"depr","","",69,null],[12,"id","","",69,null],[3,"DefaultImpl","","",null,null],[12,"unsafety","","",70,null],[12,"trait_","","",70,null],[12,"id","","",70,null],[12,"attrs","","",70,null],[12,"whence","","",70,null],[3,"Macro","","",null,null],[12,"name","","",71,null],[12,"def_id","","",71,null],[12,"attrs","","",71,null],[12,"whence","","",71,null],[12,"matchers","","",71,null],[12,"stab","","",71,null],[12,"depr","","",71,null],[12,"imported_from","","",71,null],[3,"ExternCrate","","",null,null],[12,"name","","",72,null],[12,"cnum","","",72,null],[12,"path","","",72,null],[12,"vis","","",72,null],[12,"attrs","","",72,null],[12,"whence","","",72,null],[3,"Import","","",null,null],[12,"name","","",73,null],[12,"id","","",73,null],[12,"vis","","",73,null],[12,"attrs","","",73,null],[12,"path","","",73,null],[12,"glob","","",73,null],[12,"whence","","",73,null],[4,"StructType","","",null,null],[13,"Plain","","A braced struct",74,null],[13,"Tuple","","A tuple struct",74,null],[13,"Unit","","A unit struct",74,null],[4,"TypeBound","","",null,null],[13,"RegionBound","","",75,null],[13,"TraitBound","","",75,null],[5,"struct_type_from_def","","",null,{"inputs":[{"name":"variantdata"}],"output":{"name":"structtype"}}],[11,"new","","",59,{"inputs":[{"name":"option"}],"output":{"name":"module"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"structtype"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fold","rustdoc","",null,null],[4,"FoldItem","rustdoc::fold","",null,null],[13,"Retain","","",76,null],[13,"Strip","","",76,null],[13,"Erase","","",76,null],[8,"DocFolder","","",null,null],[11,"fold_item","","",77,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"option"}}],[11,"fold_inner_recur","","don't override!",77,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":{"name":"itemenum"}}],[11,"fold_item_recur","","don't override!",77,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"option"}}],[11,"fold_mod","","",77,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"module"}}],[11,"fold_crate","","",77,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"html","rustdoc","",null,null],[0,"highlight","rustdoc::html","Basic syntax highlighting functionality.",null,null],[3,"Classifier","rustdoc::html::highlight","Processes a program (nested in the internal `lexer`), classifying strings of text by highlighting category (`Class`). Calls out to a `Writer` to write each span of text in sequence.",null,null],[4,"Class","","How a span of text is classified. Mostly corresponds to token kinds.",null,null],[13,"None","","",78,null],[13,"Comment","","",78,null],[13,"DocComment","","",78,null],[13,"Attribute","","",78,null],[13,"KeyWord","","",78,null],[13,"RefKeyWord","","",78,null],[13,"Self_","","",78,null],[13,"Op","","",78,null],[13,"Macro","","",78,null],[13,"MacroNonTerminal","","",78,null],[13,"String","","",78,null],[13,"Number","","",78,null],[13,"Bool","","",78,null],[13,"Ident","","",78,null],[13,"Lifetime","","",78,null],[13,"PreludeTy","","",78,null],[13,"PreludeVal","","",78,null],[13,"QuestionMark","","",78,null],[5,"render_with_highlighting","","Highlights `src`, returning the HTML output.",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"string"}}],[5,"render_inner_with_highlighting","","Highlights `src`, returning the HTML output. Returns only the inner html to be inserted into an element. C.f., `render_with_highlighting` which includes an enclosing `<pre>` block.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Writer","","Trait that controls writing the output of syntax highlighting. Users should implement this trait to customise writing output.",null,null],[10,"enter_span","","Called when we start processing a span of text that should be highlighted. The `Class` argument specifies how it should be highlighted.",79,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"result"}}],[10,"exit_span","","Called at the end of a span of highlighted text.",79,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"string","","Called for a span of text, usually, but not always, a single token. If the string of text (`T`) does correspond to a token, then the token will also be passed. If the text should be highlighted differently from the surrounding text, then the `Class` argument will be a value other than `None`. The following sequences of callbacks are equivalent: ```plain     enter_span(Foo), string(\"text\", None), exit_span()     string(\"text\", Foo) ``` The latter can be thought of as a shorthand for the former, which is more flexible.",79,{"inputs":[{"name":"self"},{"name":"t"},{"name":"class"},{"name":"option"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"new","","",80,{"inputs":[{"name":"stringreader"},{"name":"codemap"}],"output":{"name":"classifier"}}],[11,"write_source","","Exhausts the `lexer` writing the output into `out`.",80,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"rustdoc_class","","Returns the css class expected by rustdoc for each `Class`.",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"escape","rustdoc::html","HTML Escaping",null,null],[3,"Escape","rustdoc::html::escape","Wrapper struct which will emit the HTML-escaped version of the contained string when passed to a format string.",null,null],[12,"0","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"item_type","rustdoc::html","Item types.",null,null],[4,"ItemType","rustdoc::html::item_type","Item type. Corresponds to `clean::ItemEnum` variants.",null,null],[13,"Module","","",82,null],[13,"ExternCrate","","",82,null],[13,"Import","","",82,null],[13,"Struct","","",82,null],[13,"Enum","","",82,null],[13,"Function","","",82,null],[13,"Typedef","","",82,null],[13,"Static","","",82,null],[13,"Trait","","",82,null],[13,"Impl","","",82,null],[13,"TyMethod","","",82,null],[13,"Method","","",82,null],[13,"StructField","","",82,null],[13,"Variant","","",82,null],[13,"Macro","","",82,null],[13,"Primitive","","",82,null],[13,"AssociatedType","","",82,null],[13,"Constant","","",82,null],[13,"AssociatedConst","","",82,null],[13,"Union","","",82,null],[4,"NameSpace","","",null,null],[13,"Type","","",83,null],[13,"Value","","",83,null],[13,"Macro","","",83,null],[17,"NAMESPACE_TYPE","","",null,null],[17,"NAMESPACE_VALUE","","",null,null],[17,"NAMESPACE_MACRO","","",null,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"itemtype"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"from","","",82,{"inputs":[{"name":"item"}],"output":{"name":"itemtype"}}],[11,"from","","",82,{"inputs":[{"name":"typekind"}],"output":{"name":"itemtype"}}],[11,"css_class","","",82,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_space","","",82,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_static_str","","",83,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"format","rustdoc::html","HTML formatting module",null,null],[3,"VisSpace","rustdoc::html::format","Helper to render an optional visibility with a space after it (if the visibility is preset)",null,null],[12,"0","","",84,null],[3,"UnsafetySpace","","Similarly to VisSpace, this structure is used to render a function style with a space after it.",null,null],[12,"0","","",85,null],[3,"ConstnessSpace","","Similarly to VisSpace, this structure is used to render a function constness with a space after it.",null,null],[12,"0","","",86,null],[3,"Method","","Wrapper struct for properly emitting a method declaration.",null,null],[12,"0","","",87,null],[12,"1","","",87,null],[3,"MutableSpace","","Similar to VisSpace, but used for mutability",null,null],[12,"0","","",88,null],[3,"RawMutableSpace","","Similar to VisSpace, but used for mutability",null,null],[12,"0","","",89,null],[3,"WhereClause","","Wrapper struct for emitting a where clause from Generics.",null,null],[12,"0","","",90,null],[12,"1","","",90,null],[3,"TyParamBounds","","Wrapper struct for emitting type parameter bounds.",null,null],[12,"0","","",91,null],[3,"CommaSep","","Wrapper struct for emitting a comma-separated list of items",null,null],[12,"0","","",92,null],[3,"AbiSpace","","",null,null],[12,"0","","",93,null],[3,"HRef","","",null,null],[12,"did","","",94,null],[12,"text","","",94,null],[5,"href","","",null,{"inputs":[{"name":"defid"}],"output":{"name":"option"}}],[5,"fmt_impl_for_trait_page","","",null,{"inputs":[{"name":"impl"},{"name":"formatter"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"visspace"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unsafetyspace"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"constnessspace"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"mutablespace"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"rawmutablespace"}}],[11,"get","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"get","","",86,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustdoc::clean","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustdoc::html::format","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustdoc::clean","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","rustdoc::html::format","",94,{"inputs":[{"name":"defid"},{"name":"str"}],"output":{"name":"href"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustdoc::clean","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustdoc::html::format","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustdoc::clean","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustdoc::html::format","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"layout","rustdoc::html","",null,null],[3,"Layout","rustdoc::html::layout","",null,null],[12,"logo","","",95,null],[12,"favicon","","",95,null],[12,"external_html","","",95,null],[12,"krate","","",95,null],[3,"Page","","",null,null],[12,"title","","",96,null],[12,"css_class","","",96,null],[12,"root_path","","",96,null],[12,"description","","",96,null],[12,"keywords","","",96,null],[5,"render","","",null,{"inputs":[{"name":"write"},{"name":"layout"},{"name":"page"},{"name":"s"},{"name":"t"},{"name":"bool"}],"output":{"name":"result"}}],[5,"redirect","","",null,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[0,"markdown","rustdoc::html","Markdown formatting for rustdoc",null,null],[3,"Markdown","rustdoc::html::markdown","A unit struct which has the `fmt::Display` trait implemented. When formatted, this struct will emit the HTML corresponding to the rendered version of the contained markdown string.",null,null],[12,"0","","",97,null],[3,"MarkdownWithToc","","A unit struct like `Markdown`, that renders the markdown with a table of contents.",null,null],[12,"0","","",98,null],[3,"MarkdownHtml","","A unit struct like `Markdown`, that renders the markdown escaping HTML tags.",null,null],[12,"0","","",99,null],[5,"render","","",null,{"inputs":[{"name":"formatter"},{"name":"str"},{"name":"bool"},{"name":"c_uint"}],"output":{"name":"result"}}],[5,"find_testable_code","","",null,{"inputs":[{"name":"str"},{"name":"collector"},{"name":"span"}],"output":null}],[5,"plain_summary_line","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[7,"PLAYGROUND","","",null,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"render","rustdoc::html","Rustdoc's HTML Rendering module",null,null],[3,"Context","rustdoc::html::render","Major driving force in all rustdoc rendering. This contains information about where in the tree-like hierarchy rendering is occurring and controls how the current page is being rendered.",null,null],[12,"current","","Current hierarchy of components leading down to what's currently being rendered",100,null],[12,"dst","","The current destination folder of where HTML artifacts should be placed. This changes as the context descends into the module hierarchy.",100,null],[12,"render_redirect_pages","","A flag, which when `true`, will render pages which redirect to the real location of an item. This is used to allow external links to publicly reused items to redirect to the right location.",100,null],[12,"shared","","",100,null],[3,"SharedContext","","",null,null],[12,"src_root","","The path to the crate root source minus the file name. Used for simplifying paths to the highlighted source code files.",101,null],[12,"layout","","This describes the layout of each page, and is not modified after creation of the context (contains info like the favicon and added html).",101,null],[12,"include_sources","","This flag indicates whether [src] links should be generated or not. If the source files are present in the html rendering, then this will be `true`.",101,null],[12,"local_sources","","The local file sources we've emitted and their respective url-paths.",101,null],[12,"passes","","All the passes that were run on this crate.",101,null],[12,"issue_tracker_base_url","","The base-URL of the issue tracker for when an item has been tagged with an issue number.",101,null],[12,"css_file_extension","","The given user css file which allow to customize the generated documentation theme.",101,null],[3,"Implementor","","Metadata about an implementor of a trait.",null,null],[12,"def_id","","",102,null],[12,"stability","","",102,null],[12,"impl_","","",102,null],[3,"Impl","","Metadata about implementations for a type.",null,null],[12,"impl_item","","",103,null],[3,"Error","","",null,null],[3,"Cache","","This cache is used to store information about the `clean::Crate` being rendered in order to provide more useful documentation. This contains information like all implementors of a trait, all traits a type implements, documentation for all known traits, etc.",null,null],[12,"typarams","","Mapping of typaram ids to the name of the type parameter. This is used when pretty-printing a type (so pretty printing doesn't have to painfully maintain a context like this)",104,null],[12,"impls","","Maps a type id to all known implementations for that type. This is only recognized for intra-crate `ResolvedPath` types, and is used to print out extra documentation on the page of an enum/struct.",104,null],[12,"paths","","Maintains a mapping of local crate node ids to the fully qualified name and \"short type description\" of that node. This is used when generating URLs when a type is being linked to. External paths are not located in this map because the `External` type itself has all the information necessary.",104,null],[12,"external_paths","","Similar to `paths`, but only holds external paths. This is only used for generating explicit hyperlinks to other crates.",104,null],[12,"traits","","This map contains information about all known traits of this crate. Implementations of a crate should inherit the documentation of the parent trait if no extra documentation is specified, and default methods should show up in documentation about trait implementations.",104,null],[12,"implementors","","When rendering traits, it's often useful to be able to list all implementors of the trait, and this mapping is exactly, that: a mapping of trait ids to the list of known implementors of the trait",104,null],[12,"extern_locations","","Cache of where external crate documentation can be found.",104,null],[12,"primitive_locations","","Cache of where documentation for primitives can be found.",104,null],[12,"access_levels","","",104,null],[3,"RenderInfo","","Temporary storage for data obtained during `RustdocVisitor::clean()`. Later on moved into `CACHE_KEY`.",null,null],[12,"inlined","","",105,null],[12,"external_paths","","",105,null],[12,"external_typarams","","",105,null],[12,"deref_trait_did","","",105,null],[12,"deref_mut_trait_did","","",105,null],[4,"ExternalLocation","","Indicates where an external crate can be found.",null,null],[13,"Remote","","Remote URL root of the external crate",106,null],[13,"Local","","This external crate can be found in the local doc/ folder",106,null],[13,"Unknown","","The external crate could not be found.",106,null],[5,"reset_ids","","This method resets the local table of used ID attributes. This is typically used at the beginning of rendering an entire HTML page to reset from the previous state (if any).",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"derive_id","","",null,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[5,"run","","Generates the documentation for `crate` into the directory `dst`",null,{"inputs":[{"name":"crate"},{"name":"externalhtml"},{"name":"option"},{"name":"pathbuf"},{"name":"fxhashset"},{"name":"option"},{"name":"renderinfo"}],"output":{"name":"result"}}],[5,"cache","","",null,{"inputs":[],"output":{"name":"arc"}}],[6,"NameDoc","","A pair of name and its optional document.",null,null],[7,"CURRENT_LOCATION_KEY","","",null,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",107,{"inputs":[{"name":"error"},{"name":"path"}],"output":{"name":"error"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"cache"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"renderinfo"}}],[11,"fold_item","","",104,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"option"}}],[0,"toc","rustdoc::html","Table-of-contents creation.",null,null],[3,"Toc","rustdoc::html::toc","A (recursive) table of contents",null,null],[3,"TocEntry","","",null,null],[3,"TocBuilder","","Progressive construction of a table of contents.",null,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"toc"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"toc"}],"output":{"name":"bool"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"tocentry"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"tocentry"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"tocbuilder"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"tocbuilder"}],"output":{"name":"bool"}}],[11,"new","","",110,{"inputs":[],"output":{"name":"tocbuilder"}}],[11,"into_toc","","Convert into a true `Toc` struct.",110,{"inputs":[{"name":"self"}],"output":{"name":"toc"}}],[11,"push","","Push a level `level` heading into the appropriate place in the hierarchy, returning a string containing the section number in `<num>.<num>.<num>` format.",110,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"string"},{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"markdown","rustdoc","",null,null],[5,"render","rustdoc::markdown","Render `input` (e.g. \"foo.md\") into an HTML file in `output` (e.g. output = \"bar\" => \"bar/foo.html\").",null,{"inputs":[{"name":"str"},{"name":"pathbuf"},{"name":"matches"},{"name":"externalhtml"},{"name":"bool"}],"output":{"name":"isize"}}],[5,"test","","Run any tests/code examples in the markdown file `input`.",null,{"inputs":[{"name":"str"},{"name":"vec"},{"name":"searchpaths"},{"name":"externs"},{"name":"vec"},{"name":"option"}],"output":{"name":"isize"}}],[0,"passes","rustdoc","",null,null],[5,"collapse_docs","rustdoc::passes","",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[5,"strip_hidden","","Strip items marked `#[doc(hidden)]`",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[5,"strip_private","","Strip private items from the point of view of a crate or externally from a crate, specified by the `xcrate` flag.",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[5,"strip_priv_imports","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[5,"unindent_comments","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[11,"collapse_doc_comments","rustdoc::clean","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"unindent_doc_comments","","",6,{"inputs":[{"name":"self"}],"output":null}],[17,"PASSES","rustdoc::passes","",null,null],[17,"DEFAULT_PASSES","","",null,null],[0,"plugins","rustdoc","",null,null],[3,"PluginManager","rustdoc::plugins","Manages loading and running of plugins",null,null],[12,"prefix","","The directory plugins will be loaded from",111,null],[6,"PluginResult","","",null,null],[6,"PluginCallback","","",null,null],[11,"new","","Create a new plugin manager",111,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pluginmanager"}}],[11,"load_plugin","","Load a plugin with the given name.",111,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"add_plugin","","Load a normal Rust function as a plugin.",111,{"inputs":[{"name":"self"},{"name":"plugincallback"}],"output":null}],[11,"run_plugins","","Run all the loaded plugins over the crate, returning their results",111,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[0,"visit_ast","rustdoc","Rust AST Visitor. Extracts useful information and massages it into a form usable for clean",null,null],[3,"RustdocVisitor","rustdoc::visit_ast","",null,null],[12,"module","","",112,null],[12,"attrs","","",112,null],[12,"cx","","",112,null],[11,"new","","",112,{"inputs":[{"name":"doccontext"}],"output":{"name":"rustdocvisitor"}}],[11,"visit","","",112,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"visit_variant_data","","",112,{"inputs":[{"name":"self"},{"name":"item"},{"name":"name"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"struct"}}],[11,"visit_union_data","","",112,{"inputs":[{"name":"self"},{"name":"item"},{"name":"name"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"union"}}],[11,"visit_enum_def","","",112,{"inputs":[{"name":"self"},{"name":"item"},{"name":"name"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"enum"}}],[11,"visit_fn","","",112,{"inputs":[{"name":"self"},{"name":"item"},{"name":"name"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"generics"},{"name":"bodyid"}],"output":{"name":"function"}}],[11,"visit_mod_contents","","",112,{"inputs":[{"name":"self"},{"name":"span"},{"name":"hirvec"},{"name":"visibility"},{"name":"nodeid"},{"name":"mod"},{"name":"option"}],"output":{"name":"module"}}],[11,"visit_item","","",112,{"inputs":[{"name":"self"},{"name":"item"},{"name":"option"},{"name":"module"}],"output":null}],[0,"visit_lib","rustdoc","",null,null],[3,"LibEmbargoVisitor","rustdoc::visit_lib","Similar to `librustc_privacy::EmbargoVisitor`, but also takes specific rustdoc annotations into account (i.e. `doc(hidden)`)",null,null],[11,"new","","",113,{"inputs":[{"name":"doccontext"}],"output":{"name":"libembargovisitor"}}],[11,"visit_lib","","",113,{"inputs":[{"name":"self"},{"name":"cratenum"}],"output":null}],[11,"visit_mod","","",113,{"inputs":[{"name":"self"},{"name":"defid"}],"output":null}],[0,"test","rustdoc","",null,null],[3,"TestOptions","rustdoc::test","",null,null],[12,"no_crate_inject","","",114,null],[12,"attrs","","",114,null],[3,"Collector","","",null,null],[12,"tests","","",115,null],[5,"run","","",null,{"inputs":[{"name":"str"},{"name":"vec"},{"name":"searchpaths"},{"name":"externs"},{"name":"vec"},{"name":"option"},{"name":"option"}],"output":{"name":"isize"}}],[5,"maketest","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"bool"},{"name":"testoptions"}],"output":{"name":"string"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"testoptions"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"testoptions"}}],[11,"new","","",115,{"inputs":[{"name":"string"},{"name":"vec"},{"name":"searchpaths"},{"name":"externs"},{"name":"bool"},{"name":"testoptions"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"collector"}}],[11,"add_test","","",115,{"inputs":[{"name":"self"},{"name":"string"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"vec"},{"name":"usize"},{"name":"string"}],"output":null}],[11,"get_line","","",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_position","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"get_filename","","",115,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"register_header","","",115,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":null}],[11,"clean","rustdoc::visit_ast","",112,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"crate"}}],[11,"clean","rustdoc::doctree","",59,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",64,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",68,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",60,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",61,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",62,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",63,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",65,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",66,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",67,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",69,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"vec"}}],[11,"clean","","",70,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",72,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"clean","","",73,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"vec"}}],[11,"clean","","",71,{"inputs":[{"name":"self"},{"name":"doccontext"}],"output":{"name":"item"}}],[11,"filestem","rustdoc::core","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"searchpaths"}}],[11,"new","","",116,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",116,null],[11,"iter","","",116,{"inputs":[{"name":"self"},{"name":"pathkind"}],"output":{"name":"iter"}}]],"paths":[[3,"ExternalHtml"],[4,"LoadStringError"],[3,"Crate"],[3,"ExternalCrate"],[3,"Item"],[3,"Module"],[3,"Attributes"],[3,"TyParam"],[3,"Generics"],[3,"Method"],[3,"TyMethod"],[3,"Function"],[3,"FnDecl"],[3,"Arguments"],[3,"Argument"],[3,"Trait"],[3,"PolyTrait"],[3,"Struct"],[3,"Union"],[3,"VariantStruct"],[3,"Enum"],[3,"Variant"],[3,"Span"],[3,"Path"],[3,"PathSegment"],[3,"Typedef"],[3,"BareFunctionDecl"],[3,"Static"],[3,"Constant"],[3,"Impl"],[3,"DefaultImpl"],[3,"ImportSource"],[3,"Macro"],[3,"Stability"],[3,"Deprecation"],[3,"TypeBinding"],[4,"ItemEnum"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"SelfTy"],[4,"FunctionRetTy"],[4,"Type"],[4,"PrimitiveType"],[4,"TypeKind"],[4,"Visibility"],[4,"VariantKind"],[4,"PathParameters"],[4,"Mutability"],[4,"ImplPolarity"],[4,"Import"],[8,"Clean"],[8,"AttributesExt"],[8,"NestedAttributesExt"],[8,"GetDefId"],[3,"ListAttributesIter"],[3,"Lifetime"],[4,"Input"],[3,"DocContext"],[8,"DocAccessLevels"],[3,"Module"],[3,"Struct"],[3,"Union"],[3,"Enum"],[3,"Variant"],[3,"Function"],[3,"Typedef"],[3,"Static"],[3,"Constant"],[3,"Trait"],[3,"Impl"],[3,"DefaultImpl"],[3,"Macro"],[3,"ExternCrate"],[3,"Import"],[4,"StructType"],[4,"TypeBound"],[4,"FoldItem"],[8,"DocFolder"],[4,"Class"],[8,"Writer"],[3,"Classifier"],[3,"Escape"],[4,"ItemType"],[4,"NameSpace"],[3,"VisSpace"],[3,"UnsafetySpace"],[3,"ConstnessSpace"],[3,"Method"],[3,"MutableSpace"],[3,"RawMutableSpace"],[3,"WhereClause"],[3,"TyParamBounds"],[3,"CommaSep"],[3,"AbiSpace"],[3,"HRef"],[3,"Layout"],[3,"Page"],[3,"Markdown"],[3,"MarkdownWithToc"],[3,"MarkdownHtml"],[3,"Context"],[3,"SharedContext"],[3,"Implementor"],[3,"Impl"],[3,"Cache"],[3,"RenderInfo"],[4,"ExternalLocation"],[3,"Error"],[3,"Toc"],[3,"TocEntry"],[3,"TocBuilder"],[3,"PluginManager"],[3,"RustdocVisitor"],[3,"LibEmbargoVisitor"],[3,"TestOptions"],[3,"Collector"],[3,"SearchPaths"]]};
searchIndex["serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"hex","serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",0,null],[13,"InvalidHexLength","","The input had an invalid length",0,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"json","serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of compact data",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",3,null],[13,"U64","","",3,null],[13,"F64","","",3,null],[13,"String","","",3,null],[13,"Boolean","","",3,null],[13,"Array","","",3,null],[13,"Object","","",3,null],[13,"Null","","",3,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",4,null],[13,"InvalidNumber","","",4,null],[13,"EOFWhileParsingObject","","",4,null],[13,"EOFWhileParsingArray","","",4,null],[13,"EOFWhileParsingValue","","",4,null],[13,"EOFWhileParsingString","","",4,null],[13,"KeyMustBeAString","","",4,null],[13,"ExpectedColon","","",4,null],[13,"TrailingCharacters","","",4,null],[13,"TrailingComma","","",4,null],[13,"InvalidEscape","","",4,null],[13,"InvalidUnicodeCodePoint","","",4,null],[13,"LoneLeadingSurrogateInHexEscape","","",4,null],[13,"UnexpectedEndOfHexEscape","","",4,null],[13,"UnrecognizedHex","","",4,null],[13,"NotFourDigit","","",4,null],[13,"NotUtf8","","",4,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",5,null],[13,"IoError","","",5,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",6,null],[13,"ExpectedError","","",6,null],[13,"MissingFieldError","","",6,null],[13,"UnknownVariantError","","",6,null],[13,"ApplicationError","","",6,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",7,null],[13,"BadHashmapKey","","",7,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",8,null],[13,"ObjectEnd","","",8,null],[13,"ArrayStart","","",8,null],[13,"ArrayEnd","","",8,null],[13,"BooleanValue","","",8,null],[13,"I64Value","","",8,null],[13,"U64Value","","",8,null],[13,"F64Value","","",8,null],[13,"StringValue","","",8,null],[13,"NullValue","","",8,null],[13,"Error","","",8,null],[4,"StackElement","","StackElements compose a Stack. For example, StackElement::Key(\"foo\"), StackElement::Key(\"bar\"), StackElement::Index(3) and StackElement::Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",9,null],[13,"Key","","",9,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[5,"from_reader","","Decodes a json value from an `&mut io::Read`",null,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[5,"from_str","","Decodes a json value from a string",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",10,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"parsererror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"decodererror"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"encodererror"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",7,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new","","Creates a new JSON encoder whose output will be written to the writer specified.",11,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",11,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",11,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",11,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",11,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",11,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",11,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",11,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",11,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",11,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",11,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",11,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",11,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",11,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",11,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"new","","Creates a new encoder whose output will be written to the specified writer",12,{"inputs":[{"name":"write"}],"output":{"name":"prettyencoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"emit_nil","","",12,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",12,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",12,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",12,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",12,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",12,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",12,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",12,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",12,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",12,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",12,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",12,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",12,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",12,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",3,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",3,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"jsonevent"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",13,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",13,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",13,null],[11,"top","","Returns the top-most element (if any).",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",14,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",15,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",16,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u128","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i128","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",16,null],[11,"read_enum_variant_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",16,null],[11,"read_enum_struct_variant_field","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",3,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"opaque","serialize","",null,null],[3,"Encoder","serialize::opaque","",null,null],[12,"cursor","","",20,null],[3,"Decoder","","",null,null],[12,"data","","",21,null],[6,"EncodeResult","","",null,null],[11,"new","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",20,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",20,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",20,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",20,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",20,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",20,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",20,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",20,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",20,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",20,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",21,null],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u128","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i128","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"error","","",21,null],[0,"leb128","serialize","",null,null],[5,"write_unsigned_leb128_to","serialize::leb128","encodes an integer using unsigned leb128 encoding and stores the result using a callback function.",null,{"inputs":[{"name":"u128"},{"name":"w"}],"output":{"name":"usize"}}],[5,"write_unsigned_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"u128"}],"output":{"name":"usize"}}],[5,"read_unsigned_leb128","","",null,null],[5,"write_signed_leb128_to","","encodes an integer using signed leb128 encoding and stores the result using a callback function.",null,{"inputs":[{"name":"i128"},{"name":"w"}],"output":{"name":"usize"}}],[5,"write_signed_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"i128"}],"output":{"name":"usize"}}],[5,"read_signed_leb128","","",null,null],[8,"Decoder","serialize","",null,null],[16,"Error","","",22,null],[10,"read_nil","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u128","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i128","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_enum","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",22,null],[11,"read_enum_variant_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",22,null],[11,"read_enum_struct_variant_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",22,null],[8,"Encoder","","",null,null],[16,"Error","","",23,null],[10,"emit_nil","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u128","","",23,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[10,"emit_u64","","",23,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",23,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",23,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",23,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i128","","",23,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[10,"emit_i64","","",23,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",23,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",23,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",23,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",23,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",23,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",23,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",24,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"SpecializationError","","Implement this trait on your `{Encodable,Decodable}::Error` types to override the default panic behavior for missing specializations.",null,null],[10,"not_found","","Create an error for a missing method specialization. Defaults to panicking with type, trait & method names. `S` is the encoder/decoder state type, `T` is the type being encoded/decoded, and the arguments are the names of the trait and method that should've been overriden.",26,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[8,"SpecializedEncoder","","Implement this trait on encoders, with `T` being the type you want to encode (employing `UseSpecializedEncodable`), using a strategy specific to the encoder.",null,null],[10,"specialized_encode","","Encode the value in a manner specific to this encoder state.",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SpecializedDecoder","","Implement this trait on decoders, with `T` being the type you want to decode (employing `UseSpecializedDecodable`), using a strategy specific to the decoder.",null,null],[10,"specialized_decode","","Decode a value in a manner specific to this decoder state.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"UseSpecializedEncodable","","Implement this trait on your type to get an `Encodable` implementation which goes through `SpecializedEncoder`.",null,null],[11,"default_encode","","Defaults to returning an error (see `SpecializationError`).",29,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[8,"UseSpecializedDecodable","","Implement this trait on your type to get an `Decodable` implementation which goes through `SpecializedDecoder`.",null,null],[11,"default_decode","","Defaults to returning an error (see `SpecializationError`).",30,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"emit_enum","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",22,null],[11,"read_enum_variant_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",22,null],[11,"read_enum_struct_variant_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"default_encode","","Defaults to returning an error (see `SpecializationError`).",29,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"default_decode","","Defaults to returning an error (see `SpecializationError`).",30,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"PrettyEncoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"Encoder"],[3,"Decoder"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"SpecializationError"],[8,"SpecializedEncoder"],[8,"SpecializedDecoder"],[8,"UseSpecializedEncodable"],[8,"UseSpecializedDecodable"]]};
searchIndex["std"] = {"doc":"The Rust Standard Library","items":[[0,"any","std","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",null,null],[8,"Any","std::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"cell","std","Shareable mutable containers.",null,null],[3,"Cell","std::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",1,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",1,null],[13,"Unused","","There are no outstanding borrows on this cell.",1,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","std::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",2,null],[0,"cmp","std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","std::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",3,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",3,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",4,null],[13,"Equal","","An ordering where a compared value is equal [to another].",4,null],[13,"Greater","","An ordering where a compared value is greater [than another].",4,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"convert","std","Traits for conversions between types.",null,null],[8,"AsRef","std::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",11,null],[10,"try_into","","Performs the conversion.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",12,null],[10,"try_from","","Performs the conversion.",12,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"default","std","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",13,{"inputs":[],"output":{"name":"self"}}],[0,"hash","std","Generic hashing support.",null,null],[8,"Hash","std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",14,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",14,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",15,null],[11,"write_u8","","Write a single `u8` into this hasher.",15,null],[11,"write_u16","","Writes a single `u16` into this hasher.",15,null],[11,"write_u32","","Writes a single `u32` into this hasher.",15,null],[11,"write_u64","","Writes a single `u64` into this hasher.",15,null],[11,"write_u128","","Writes a single `u128` into this hasher.",15,null],[11,"write_usize","","Writes a single `usize` into this hasher.",15,null],[11,"write_i8","","Writes a single `i8` into this hasher.",15,null],[11,"write_i16","","Writes a single `i16` into this hasher.",15,null],[11,"write_i32","","Writes a single `i32` into this hasher.",15,null],[11,"write_i64","","Writes a single `i64` into this hasher.",15,null],[11,"write_i128","","Writes a single `i128` into this hasher.",15,null],[11,"write_isize","","Writes a single `isize` into this hasher.",15,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher` which a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",16,null],[10,"build_hasher","","Creates a new hasher.",16,null],[3,"BuildHasherDefault","","The `BuildHasherDefault` structure is used in scenarios where one has a type that implements [`Hasher`] and [`Default`], but needs that type to implement [`BuildHasher`].",null,null],[3,"SipHasher13","","An implementation of SipHash 1-3.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[0,"intrinsics","std","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","std::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange`.",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, `AtomicBool::compare_exchange_weak`.",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",null,null],[0,"iter","std","Composable external iteration.",null,null],[3,"Rev","std::iter","A double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",17,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between_by_one","","Same as `steps_between`, but with a `by` of 1",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[10,"is_negative","","Tests whether this step is negative or not (going backwards)",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",18,null],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",19,null],[10,"next","","Advances the iterator and returns the next value.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",19,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",19,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",19,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",19,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",19,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",19,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",19,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",19,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",19,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",19,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",19,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",19,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",21,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",23,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",23,null],[10,"into_iter","","Creates an iterator from a value.",23,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",25,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"marker","std","Primitive traits and types representing basic properties of types.",null,null],[8,"Send","std::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[0,"mem","std","Basic functions for dealing with memory.",null,null],[5,"forget","std::mem","Leaks a value: takes ownership and \"forgets\" about the value **without running its destructor**.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","std","Overloadable operators.",null,null],[8,"Drop","std::ops","The `Drop` trait is used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",26,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",27,null],[10,"add","","The method for the `+` operator",27,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",28,null],[10,"sub","","The method for the `-` operator",28,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",29,null],[10,"mul","","The method for the `*` operator",29,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",30,null],[10,"div","","The method for the `/` operator",30,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",31,null],[10,"rem","","The method for the `%` operator",31,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",32,null],[10,"neg","","The method for the unary `-` operator",32,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",33,null],[10,"not","","The method for the unary `!` operator",33,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",34,null],[10,"bitand","","The method for the `&` operator",34,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",35,null],[10,"bitor","","The method for the `|` operator",35,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",36,null],[10,"bitxor","","The method for the `^` operator",36,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",37,null],[10,"shl","","The method for the `<<` operator",37,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",38,null],[10,"shr","","The method for the `>>` operator",38,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",39,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",40,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",41,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",42,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",43,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&=` operator",44,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",45,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",46,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",47,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",48,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations like `container[index]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",49,null],[10,"index","","The method for the indexing (`container[index]`) operation",49,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing operations like `container[index]` when used in a mutable context.",null,null],[10,"index_mut","","The method for the mutable indexing (`container[index]`) operation",50,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start <= x < end }. Use `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",51,null],[12,"end","","The upper bound of the range (exclusive).",51,null],[3,"RangeFrom","","A range which is only bounded below: { x | start <= x }. Use `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",52,null],[3,"RangeTo","","A range which is only bounded above: { x | x < end }. Use `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",53,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start <= x <= end }. Use `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",54,null],[12,"at","std::ops::RangeInclusive","The point at which iteration finished",54,null],[13,"NonEmpty","std::ops","Non-empty range (iteration will yield value(s))",54,null],[12,"start","std::ops::RangeInclusive","The lower bound of the range (inclusive).",54,null],[12,"end","","The upper bound of the range (inclusive).",54,null],[3,"RangeToInclusive","std::ops","An inclusive range which is only bounded above: { x | x <= end }. Use `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",55,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",56,null],[10,"deref","","The method called to dereference a value",56,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing mutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",57,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",58,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",59,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",60,null],[10,"call_once","","This is called when the call operator is used.",60,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",61,null],[8,"Placer","","Interface to implementations of  `PLACE <- EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the uninitialized state for `Data`.",62,null],[10,"make_place","","Creates a fresh place from `self`.",62,null],[8,"InPlace","","Specialization of `Place` trait supporting `PLACE <- EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `PLACE <- EXPR`",63,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",63,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",64,null],[16,"Place","","The place that will negotiate the storage of the data.",64,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",64,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",65,{"inputs":[],"output":{"name":"self"}}],[8,"Carrier","","A trait for types which have success and error states and are meant to work with the question mark operator. When the `?` operator is used with a value, whether the value is in the success or error state is determined by calling `translate`.",null,null],[16,"Success","","The type of the value when computation succeeds.",66,null],[16,"Error","","The type of the value when computation errors out.",66,null],[10,"from_success","","Create a `Carrier` from a success value.",66,null],[10,"from_error","","Create a `Carrier` from an error value.",66,null],[10,"translate","","Translate this `Carrier` to another implementation of `Carrier` with the same associated types.",66,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"ptr","std","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","std::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old value, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",null,null],[5,"eq","","Compare raw pointers for equality.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper owns the referent. This in turn implies that the `Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw `*mut T` (which conveys no particular ownership semantics).  It also implies that the referent of the pointer should not be modified without a unique path to the `Unique` reference. Useful for building abstractions like `Vec<T>` or `Box<T>`, which internally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper has shared ownership of the referent. Useful for building abstractions like `Rc<T>` or `Arc<T>`, which internally use raw pointers to manage the memory that they own.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may *not* overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"TraitObject","std::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",67,null],[12,"vtable","","",67,null],[0,"result","std","Error handling with the `Result` type.",null,null],[4,"Result","std::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",68,null],[13,"Err","","Contains the error value",68,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[0,"option","std","Optional values.",null,null],[4,"Option","std::option","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",69,null],[13,"Some","","Some value `T`",69,null],[3,"Iter","","An iterator over a reference of the contained item in an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an [`Option`].",null,null],[3,"IntoIter","","An iterator over the item contained inside an [`Option`].",null,null],[0,"isize","std","The pointer-sized signed integer type.",null,null],[17,"MIN","std::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","std","The 8-bit signed integer type.",null,null],[17,"MIN","std::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","std","The 16-bit signed integer type.",null,null],[17,"MIN","std::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","std","The 32-bit signed integer type.",null,null],[17,"MIN","std::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","std","The 64-bit signed integer type.",null,null],[17,"MIN","std::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i128","std","The 128-bit signed integer type.",null,null],[17,"MIN","std::i128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","std","The pointer-sized unsigned integer type.",null,null],[17,"MIN","std::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","std","The 8-bit unsigned integer type.",null,null],[17,"MIN","std::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","std","The 16-bit unsigned integer type.",null,null],[17,"MIN","std::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","std","The 32-bit unsigned integer type.",null,null],[17,"MIN","std::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","std","The 64-bit unsigned integer type.",null,null],[17,"MIN","std::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"boxed","std","A pointer type for heap allocation.",null,null],[17,"HEAP","std::boxed","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",70,null],[10,"call_box","","",70,null],[0,"rc","std","Single-threaded reference-counting pointers.",null,null],[3,"Rc","std::rc","A single-threaded reference-counting pointer.",null,null],[3,"Weak","","A weak version of [`Rc`][rc].",null,null],[0,"borrow","std","A module for working with borrowed data.",null,null],[8,"ToOwned","std::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",71,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",71,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",72,null],[13,"Owned","","Owned data.",72,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",73,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",74,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"fmt","std","Utilities for formatting and printing `String`s",null,null],[5,"format","std::fmt","The format function takes a precompiled format string and a list of arguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string, and a list of arguments. The arguments will be formatted according to the specified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",84,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",84,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",84,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[0,"slice","std","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","std::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",85,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",85,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",85,null],[10,"connect","","",85,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a time).",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",86,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",86,null],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",86,null],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",86,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",86,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",86,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",86,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[0,"str","std","Unicode string slices.",null,null],[3,"EncodeUtf16","std::str","External iterator for a string's UTF-16 code units.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Lines","","Created with the method [`lines`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Bytes","","External iterator for a string's bytes. Use with the `std::iter` module.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",87,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",87,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",88,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",88,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending the iteration.",88,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",89,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",90,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"Utf8Error","std::str","Errors which can occur when attempting to interpret a sequence of `u8` as a string.",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",91,null],[10,"from_str","","Parses a string `s` to return a value of this type.",91,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[0,"string","std","A UTF-8 encoded, growable string.",null,null],[3,"String","std::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","std","A contiguous growable array type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'",null,null],[3,"Vec","std::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[0,"char","std","A character type.",null,null],[3,"ToLowercase","std::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[17,"UNICODE_VERSION","","The version of Unicode that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[0,"u128","std","The 128-bit unsigned integer type.",null,null],[17,"MIN","std::u128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"prelude","std","The Rust Prelude.",null,null],[0,"v1","std::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[0,"f32","std","The 32-bit floating point type.",null,null],[17,"RADIX","std::f32","The radix or base of the internal representation of `f32`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f32::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log<sub>2</sub>(e)",null,null],[17,"LOG10_E","","log<sub>10</sub>(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[0,"f64","std","The 64-bit floating point type.",null,null],[17,"RADIX","std::f64","The radix or base of the internal representation of `f64`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f64::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log<sub>2</sub>(e)",null,null],[17,"LOG10_E","","log<sub>10</sub>(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[0,"thread","std","Native threads.",null,null],[3,"LocalKey","std::thread","A thread local storage key which owns its contents.",null,null],[3,"Builder","","Thread configuration. Provides detailed control over the properties and behavior of new threads.",null,null],[3,"ThreadId","","A unique identifier for a running thread.",null,null],[3,"Thread","","A handle to a thread.",null,null],[3,"JoinHandle","","An owned permission to join on a thread (block on its termination).",null,null],[4,"LocalKeyState","","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will transition to the `Valid` state once the first call to `with` happens and the initialization expression succeeds.",93,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid` state. Keys in the `Valid` state will remain so until the thread exits, at which point the destructor will be run and the key will enter the `Destroyed` state.",93,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if necessary). While a destructor is running, and possibly after a destructor has run, a key is in the `Destroyed` state.",93,null],[5,"spawn","","Spawns a new thread, returning a [`JoinHandle`] for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,{"inputs":[],"output":null}],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,{"inputs":[{"name":"duration"}],"output":null}],[5,"park","","Blocks unless or until the current thread's token is made available.",null,{"inputs":[],"output":null}],[5,"park_timeout_ms","","Use [park_timeout].",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"park_timeout","","Blocks unless or until the current thread's token is made available or the specified duration has been reached (may wake spuriously).",null,{"inputs":[{"name":"duration"}],"output":null}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"localkeystate"}}],[11,"with","","Acquires a reference to the value in this TLS key.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",94,{"inputs":[{"name":"self"}],"output":{"name":"localkeystate"}}],[6,"Result","","Indicates the manner in which a thread exited.",null,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Generates the base configuration for spawning a thread, from which configuration methods can be chained.",95,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack (in bytes) for the new thread.",95,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",95,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"threadid"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"threadid"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"threadid"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",97,{"inputs":[{"name":"self"}],"output":null}],[11,"id","","Gets the thread's unique identifier.",97,{"inputs":[{"name":"self"}],"output":{"name":"threadid"}}],[11,"name","","Gets the thread's name.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"thread","","Extracts a handle to the underlying thread.",98,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ascii","std","Operations on ASCII strings and characters.",null,null],[3,"EscapeDefault","std::ascii","An iterator over the escaped version of a byte, constructed via `std::ascii::escape_default`.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[8,"AsciiExt","","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",99,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",99,null],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",99,null],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",99,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",99,{"inputs":[{"name":"self"}],"output":null}],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",99,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character: U+0041 'A' ... U+005A 'Z' or U+0061 'a' ... U+007A 'z'. For strings, true if all characters in the string are ASCII alphabetic.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character: U+0041 'A' ... U+005A 'Z'. For strings, true if all characters in the string are ASCII uppercase.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character: U+0061 'a' ... U+007A 'z'. For strings, true if all characters in the string are ASCII lowercase.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character: U+0041 'A' ... U+005A 'Z', U+0061 'a' ... U+007A 'z', or U+0030 '0' ... U+0039 '9'. For strings, true if all characters in the string are ASCII alphanumeric.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 '0' ... U+0039 '9'. For strings, true if all characters in the string are ASCII digits.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit: U+0030 '0' ... U+0039 '9', U+0041 'A' ... U+0046 'F', or U+0061 'a' ... U+0066 'f'. For strings, true if all characters in the string are ASCII hex digits.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character: U+0021 ... U+002F `! \" # $ % & ' ( ) * + , - . /` U+003A ... U+0040 `: ; < = > ? @` U+005B ... U+0060 `[ \\ ] ^ _ `` U+007B ... U+007E `{ | } ~` For strings, true if all characters in the string are ASCII punctuation.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021 '@' ... U+007E '~'. For strings, true if all characters in the string are ASCII punctuation.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character: U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED, U+000C FORM FEED, or U+000D CARRIAGE RETURN. For strings, true if all characters in the string are ASCII whitespace.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000 NUL ... U+001F UNIT SEPARATOR, or U+007F DELETE. Note that most ASCII whitespace characters are control characters, but SPACE is not.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"collections","std","Collection types.",null,null],[4,"Bound","std::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",101,null],[13,"Excluded","","An exclusive bound.",101,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",101,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a double-ended queue efficiently.",null,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","A container object that represents the result of the [`peek_mut`] method on `BinaryHeap`. See its documentation for details.",null,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[3,"BinaryHeapPlace","","",null,null],[0,"btree_map","std::collections","A map based on a B-Tree.",null,null],[3,"IntoIter","std::collections::btree_map","An owning iterator over a BTreeMap's entries.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"Range","","An iterator over a sub-range of BTreeMap's entries.",null,null],[3,"IterMut","","A mutable iterator over a BTreeMap's entries.",null,null],[3,"Values","","An iterator over a BTreeMap's values.",null,null],[3,"Keys","","An iterator over a BTreeMap's keys.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries.",null,null],[3,"Iter","","An iterator over a BTreeMap's entries.",null,null],[3,"ValuesMut","","A mutable iterator over a BTreeMap's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`BTreeMap`].",null,null],[13,"Vacant","","A vacant Entry",102,null],[13,"Occupied","","An occupied Entry",102,null],[0,"btree_set","std::collections","A set based on a B-Tree.",null,null],[3,"Union","std::collections::btree_set","A lazy iterator producing elements in the set union (in-order).",null,null],[3,"IntoIter","","An owning iterator over a `BTreeSet`'s items.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"Range","","An iterator over a sub-range of `BTreeSet`'s items.",null,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"Iter","","An iterator over a `BTreeSet`'s items.",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[0,"linked_list","std::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","std::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over references to the elements of a `LinkedList`.",null,null],[3,"IterMut","","An iterator over mutable references to the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[0,"vec_deque","std::collections","VecDeque is a double-ended queue, which is implemented with the help of a growing ring buffer.",null,null],[3,"VecDeque","std::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended queue efficiently.",null,null],[3,"Iter","","`VecDeque` iterator.",null,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[3,"Drain","","A draining VecDeque iterator",null,null],[3,"PlaceBack","","A place for insertion at the back of a `VecDeque`.",null,null],[3,"PlaceFront","","A place for insertion at the front of a `VecDeque`.",null,null],[0,"range","std::collections","Range syntax.",null,null],[8,"RangeArgument","std::collections::range","**RangeArgument** is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound",103,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound",103,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[3,"HashMap","std::collections","A hash map implementation which uses linear probing with Robin Hood bucket stealing.",null,null],[3,"HashSet","","An implementation of a hash set using the underlying representation of a HashMap where the value is ().",null,null],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty `HashMap`.",104,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",104,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",104,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hasher` to hash the keys.",104,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map's hasher.",104,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",104,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",104,{"inputs":[{"name":"self"}],"output":null}],[11,"keys","","An iterator visiting all keys in arbitrary order. Iterator element type is `&'a K`.",104,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. Iterator element type is `&'a V`.",104,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. Iterator element type is `&'a mut V`.",104,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. Iterator element type is `(&'a K, &'a V)`.",104,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. Iterator element type is `(&'a K, &'a mut V)`.",104,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",104,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",104,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",104,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",104,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",104,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",104,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",104,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",104,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",104,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",104,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",104,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",104,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",104,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",104,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",105,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",105,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",105,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with with the specified capacity, using `hasher` to hash the keys.",105,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set's hasher.",105,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",105,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","An iterator visiting all elements in arbitrary order. Iterator element type is &'a T.",105,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference, i.e. the values that are in `self` but not in `other`.",105,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",105,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection, i.e. the values that are both in `self` and `other`.",105,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",105,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",105,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",105,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",105,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",105,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",105,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",105,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",105,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",105,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",105,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[0,"hash_map","","A hash map implementation which uses linear probing with Robin Hood bucket stealing.",null,null],[3,"HashMap","std::collections::hash_map","A hash map implementation which uses linear probing with Robin Hood bucket stealing.",null,null],[3,"Iter","","HashMap iterator.",null,null],[3,"IterMut","","HashMap mutable values iterator.",null,null],[3,"IntoIter","","HashMap move iterator.",null,null],[3,"Keys","","HashMap keys iterator.",null,null],[3,"Values","","HashMap values iterator.",null,null],[3,"Drain","","HashMap drain iterator.",null,null],[3,"ValuesMut","","Mutable HashMap values iterator.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap. It is part of the [`Entry`] enum.",null,null],[3,"VacantEntry","","A view into a single empty location in a HashMap. It is part of the [`Entry`] enum.",null,null],[3,"EntryPlace","","A place for insertion to a `Entry`.",null,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied. This enum is constructed from the [`entry`] method on [`HashMap`].",null,null],[13,"Occupied","","An occupied Entry.",106,null],[13,"Vacant","","A vacant Entry.",106,null],[0,"hash_set","std::collections","An implementation of a hash set using the underlying representation of a HashMap where the value is ().",null,null],[3,"HashSet","std::collections::hash_set","An implementation of a hash set using the underlying representation of a HashMap where the value is ().",null,null],[3,"Iter","","HashSet iterator",null,null],[3,"IntoIter","","HashSet move iterator",null,null],[3,"Drain","","HashSet drain iterator",null,null],[3,"Intersection","","Intersection iterator",null,null],[3,"Difference","","Difference iterator",null,null],[3,"SymmetricDifference","","Symmetric difference iterator.",null,null],[3,"Union","","Set union iterator.",null,null],[0,"env","std","Inspection and manipulation of the process's environment.",null,null],[3,"Vars","std::env","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"SplitPaths","","An iterator over `PathBuf` instances for parsing an environment variable according to platform-specific conventions.",null,null],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be joined.",null,null],[3,"Args","","An iterator over the arguments of a process, yielding a [`String`] value for each argument.",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an [`OsString`] value for each argument.",null,null],[4,"VarError","","Possible errors from the [`env::var`] function.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current process's environment.",107,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain valid unicode data. The found data is returned as a payload of this variant.",107,null],[5,"current_dir","","Returns the current working directory as a [`PathBuf`].",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path, returning whether the change was completed successfully or not.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning [`None`] if the variable isn't set.",null,{"inputs":[{"name":"k"}],"output":{"name":"option"}}],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running process.",null,{"inputs":[{"name":"k"},{"name":"v"}],"output":null}],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,{"inputs":[{"name":"k"}],"output":null}],[5,"split_paths","","Parses input according to platform conventions for the `PATH` environment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[5,"join_paths","","Joins a collection of [`Path`]s appropriately for the `PATH` environment variable.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"home_dir","","Returns the path of the current user's home directory if known.",null,{"inputs":[],"output":{"name":"option"}}],[5,"temp_dir","","Returns the path of a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path of the current running executable.",null,{"inputs":[],"output":{"name":"result"}}],[5,"args","","Returns the arguments which this program was started with (normally passed via the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed via the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","std::env::consts","A string describing the architecture of the CPU that is currently in use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use. Example value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this platform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this platform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this platform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this platform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries on this platform. Example value is `exe`.",null,null],[11,"next","std::env","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"varerror"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"len","","",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"len","","",113,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","std","Traits for working with Errors.",null,null],[8,"Error","std::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","std::boxed","",115,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",115,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",115,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",115,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",115,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",115,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","std::str","",116,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::string","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::char","",121,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::boxed","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","std::fmt","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::cell","",123,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::char","",125,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is","std::error","Returns true if the boxed type is the same as `T`",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",114,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",114,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",114,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[0,"ffi","std","Utilities related to FFI bindings.",null,null],[3,"CString","std::ffi","A type representing an owned C-compatible string",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found in the vector provided.",null,null],[3,"IntoStringError","","An error returned from `CString::into_string` to indicate that a UTF-8 error was encountered during the conversion.",null,null],[3,"FromBytesWithNulError","","An error returned from `CStr::from_bytes_with_nul` to indicate that a nul byte was found too early in the slice provided or one wasn't found at all.",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings.",null,null],[3,"OsStr","","Slices into OS strings (see [`OsString`]).",null,null],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",126,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",126,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",126,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",126,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"cmp","","",126,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"hash","","",126,null],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"hash","","",127,null],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"nulerror"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"frombyteswithnulerror"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"intostringerror"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",126,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for interior 0 bytes.",126,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",126,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",126,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",126,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector includes the trailing nul byte.",126,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",126,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice includes the trailing nul byte.",126,null],[11,"into_boxed_c_str","","Converts this `CString` into a boxed `CStr`.",126,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"drop","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",126,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::vec","",131,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `CString`.",126,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",126,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"from","std::boxed","",115,{"inputs":[{"name":"cstr"}],"output":{"name":"box"}}],[11,"from","std::ffi","",126,{"inputs":[{"name":"box"}],"output":{"name":"cstring"}}],[11,"into","","",126,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","std::boxed","",115,{"inputs":[],"output":{"name":"box"}}],[11,"nul_position","std::ffi","Returns the position of the nul byte in the slice that was provided to `CString::new`.",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which generated the error in the first place.",128,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"description","","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",129,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_cstring","","Consumes this error, returning original `CString` which generated the error.",130,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",130,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"description","","",130,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",127,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",127,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",127,null],[11,"as_ptr","","Returns the inner pointer to this C string.",127,null],[11,"to_bytes","","Converts this C string to a byte slice.",127,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",127,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",127,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",127,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"into_c_string","","Converts a `Box<CStr>` into a `CString` without copying or allocating.",127,{"inputs":[{"name":"box"}],"output":{"name":"cstring"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",127,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",127,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"from","","",126,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",126,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",127,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",126,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",132,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an [`OsStr`] slice.",132,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a [`String`] if it contains valid Unicode data.",132,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given [`&OsStr`] slice.",132,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",132,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",132,{"inputs":[{"name":"self"}],"output":null}],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted in the given `OsString`.",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the given `OsString`. Does nothing if the capacity is already sufficient.",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the `OsString` to match its length.",132,{"inputs":[{"name":"self"}],"output":null}],[11,"into_boxed_os_str","","Converts this `OsString` into a boxed `OsStr`.",132,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"from","","",132,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",132,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",132,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"deref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"default","","Constructs an empty `OsString`.",132,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",132,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",132,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Coerces into an `OsStr` slice.",133,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `OsStr` is valid Unicode.",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.",133,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned [`OsString`].",133,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"is_empty","","Checks whether the `OsStr` is empty.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this `OsStr`.",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_os_string","","Converts a `Box<OsStr>` into an `OsString` without copying or allocating.",133,{"inputs":[{"name":"box"}],"output":{"name":"osstring"}}],[11,"from","std::boxed","",115,{"inputs":[{"name":"osstr"}],"output":{"name":"box"}}],[11,"from","std::ffi","",132,{"inputs":[{"name":"box"}],"output":{"name":"osstring"}}],[11,"into","","",132,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","std::boxed","",115,{"inputs":[],"output":{"name":"box"}}],[11,"eq","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",133,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",133,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",133,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",133,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",132,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",132,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"hash","","",133,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",132,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_owned","","",133,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"as_ref","","",133,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[0,"fs","std","Filesystem manipulation operations.",null,null],[3,"File","std::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the [`ReadDir`] iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","A structure representing a type of file with accessors for each file type. It is returned by [`Metadata::file_type`] method.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file, directory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also copy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components normalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they are missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use carefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"metadata"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"hash","","",139,null],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",141,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",141,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to [`sync_all`], except that it may not synchronize file metadata to the filesystem.",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of this file to become `size`.",141,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_permissions","","Changes the permissions on the underlying file.",141,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",141,null],[11,"read_to_end","","",141,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",141,null],[11,"flush","","",141,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",141,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",137,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",137,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",137,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",137,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",137,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",137,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","Sets the option to always create a new file.",137,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",137,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",135,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",135,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"modified","","Returns the last modification time listed in this metadata.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accessed","","Returns the last access time of this metadata.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"created","","Returns the creation time listed in the this metadata.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",138,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",138,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dir","","Test whether this file type represents a directory.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",142,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",142,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",142,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other leading path component.",142,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new set of options with default mode/security settings for all platforms and also non-recursive.",140,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating all parent directories if they do not exist with the same security and permissions settings.",140,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"create","","Create the specified directory with the options configured in this builder.",140,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[0,"io","std","Traits, helpers, and type definitions for core I/O functionality.",null,null],[3,"BufReader","std::io","The `BufReader` struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline (`0x0a`, `'\\n'`) is detected.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a [`Seek`] implementation.",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and associated traits.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a particular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",143,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",143,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",143,null],[13,"ConnectionReset","","The connection was reset by the remote server.",143,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",143,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",143,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",143,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",143,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",143,null],[13,"AlreadyExists","","An entity already exists, often a file.",143,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",143,null],[13,"InvalidInput","","A parameter was incorrect.",143,null],[13,"InvalidData","","Data not valid for the operation were encountered.",143,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",143,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",143,null],[13,"Interrupted","","This operation was interrupted.",143,null],[13,"Other","","Any I/O error not part of this list.",143,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",143,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",144,null],[13,"End","","Set the offset to the size of this object plus the specified number of bytes.",144,null],[13,"Current","","Set the offset to the current position plus the specified number of bytes.",144,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars` adapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully but it did not contain valid utf8 data.",145,null],[13,"Other","","Variant representing that an I/O error occurred.",145,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[0,"prelude","","The I/O Prelude",null,null],[11,"new","","Creates a new `BufReader` with a default buffer capacity.",146,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",146,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",146,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",146,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",146,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",146,null],[11,"fill_buf","","",146,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",146,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",148,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",148,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",148,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",148,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",148,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",148,null],[11,"flush","","",148,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",148,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",148,{"inputs":[{"name":"self"}],"output":null}],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",147,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",147,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"from","","",149,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","","",147,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",150,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal buffer.",150,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",150,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",150,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",150,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",150,null],[11,"flush","","",150,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",151,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",151,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",151,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",151,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",151,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",151,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"seek","","",151,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",151,null],[11,"fill_buf","","",151,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",151,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",151,null],[11,"flush","","",151,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",151,null],[11,"flush","","",151,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",151,null],[11,"flush","","",151,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",143,null],[11,"cmp","","",143,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",143,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"option"}}],[11,"from","","",149,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",149,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",149,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",149,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",149,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",149,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","std::boxed","",115,null],[11,"read_to_end","","",115,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",115,null],[11,"write","","",115,null],[11,"flush","","",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",115,null],[11,"write_fmt","","",115,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",115,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",115,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","",115,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","std::vec","",131,null],[11,"write_all","","",131,null],[11,"flush","","",131,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","std::io","",152,null],[11,"fill_buf","","",152,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",152,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",154,null],[11,"flush","","",154,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard input stream, returning a readable guard.",155,{"inputs":[{"name":"self"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",155,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",155,null],[11,"read_to_end","","",155,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",155,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",155,null],[11,"read","","",156,null],[11,"read_to_end","","",156,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",156,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",156,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard output stream, returning a writable guard.",157,{"inputs":[{"name":"self"}],"output":{"name":"stdoutlock"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",157,null],[11,"flush","","",157,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",157,null],[11,"write_fmt","","",157,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",158,null],[11,"flush","","",158,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable guard.",159,{"inputs":[{"name":"self"}],"output":{"name":"stderrlock"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",159,null],[11,"flush","","",159,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",159,null],[11,"write_fmt","","",159,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",160,null],[11,"flush","","",160,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",161,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",161,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",161,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",161,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",161,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",161,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",161,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",161,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",161,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",162,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",162,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",162,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",162,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",162,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of bytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",163,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it to perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",164,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer, so they should no longer be returned in calls to `read`.",164,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` or EOF is reached.",164,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append them to the provided buffer.",164,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte `byte`.",164,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",164,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"seekfrom"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",165,null],[11,"fill_buf","","",165,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",165,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"limit","","Returns the number of bytes that can be read before this instance will return EOF.",166,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","","Consumes the `Take`, returning the wrapped reader.",166,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","",166,null],[11,"fill_buf","","",166,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",166,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",145,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",145,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"net","std","Networking primitives for TCP/UDP communication.",null,null],[3,"Ipv4Addr","std::net","Representation of an IPv4 address.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"SocketAddrV4","","An IPv4 socket address which is a (ip, port) combination.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a remote socket.",null,null],[3,"TcpListener","","A structure representing a socket server.",null,null],[3,"Incoming","","An infinite iterator over the connections from a `TcpListener`.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[3,"AddrParseError","","An error returned when parsing an IP address or a socket address.",null,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[4,"IpAddr","","An IP address, either an IPv4 or IPv6 address.",null,null],[13,"V4","","Representation of an IPv4 address.",171,null],[13,"V6","","Representation of an IPv6 address.",171,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",172,null],[13,"LinkLocal","","",172,null],[13,"RealmLocal","","",172,null],[13,"AdminLocal","","",172,null],[13,"SiteLocal","","",172,null],[13,"OrganizationLocal","","",172,null],[13,"Global","","",172,null],[4,"SocketAddr","","Representation of a socket address for networking applications.",null,null],[13,"V4","","An IPv4 socket address which is a (ip, port) combination.",173,null],[13,"V6","","An IPv6 socket address.",173,null],[4,"Shutdown","","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut down. All currently blocked and future reads will return `Ok(0)`.",174,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut down. All currently blocked and future writes will return an error.",174,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",174,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",171,null],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"cmp","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"ipv6multicastscope"}}],[11,"hash","","",172,null],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unspecified","","Returns true for the special 'unspecified' address ([IPv4], [IPv6]).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address ([IPv4], [IPv6]).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable ([IPv4], [IPv6]).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address ([IPv4], [IPv6]).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation ([IPv4], [IPv6]).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv4","","Returns true if this address is a valid IPv4 address, false if it's a valid IPv6 address.",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns true if this address is a valid IPv6 address, false if it's a valid IPv4 address.",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",175,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",175,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address (0.0.0.0).",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address (224.0.0.0/4).",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address (255.255.255.255).",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",175,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",175,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",171,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipaddr"}}],[11,"from","","",171,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",175,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",175,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",175,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"cmp","","",175,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",175,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",175,null],[11,"from","","",171,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",176,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",176,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address (::).",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (fc00::/7).",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (fec0::/10).",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this is an address reserved for documentation (2001:db8::/32).",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address (ff00::/8).",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is neither IPv4-compatible or IPv4-mapped.",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",176,null],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",176,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",176,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",176,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"cmp","","",176,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"from","","",176,{"inputs":[{"name":"u128"}],"output":{"name":"ipv6addr"}}],[11,"from","","",176,null],[11,"from","","",176,null],[11,"from","","",171,null],[11,"from","","",171,null],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"hash","","",173,null],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",173,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",173,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"set_ip","","Change the IP address associated with this socket address.",173,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",173,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Change the port number associated with this socket address.",173,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"is_ipv4","","Returns true if the IP in this `SocketAddr` is a valid IPv4 address, false if it's a valid IPv6 address.",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns true if the IP in this `SocketAddr` is a valid IPv6 address, false if it's a valid IPv4 address.",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",177,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",177,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"set_ip","","Change the IP address associated with this socket address.",177,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",177,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Change the port number associated with this socket address.",177,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id components.",178,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",178,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"set_ip","","Change the IP address associated with this socket address.",178,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",178,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Change the port number associated with this socket address.",178,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"flowinfo","","Returns the flow information associated with this address, corresponding to the `sin6_flowinfo` field in C.",178,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_flowinfo","","Change the flow information associated with this socket address.",178,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"scope_id","","Returns the scope ID associated with this address, corresponding to the `sin6_scope_id` field in C.",178,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_scope_id","","Change the scope ID associated with this socket address.",178,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from","","",173,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddr"}}],[11,"from","","",173,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddr"}}],[11,"from","","",173,null],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",177,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",178,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_socket_addrs","","",173,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",177,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",178,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","std::net","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Opens a TCP connection to a remote host.",180,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",180,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",180,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",180,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","Receives data on the socket from the remote adress to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",180,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",180,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",180,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",180,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"read","","",180,null],[11,"read_to_end","","",180,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",180,null],[11,"flush","","",180,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified address.",181,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this listener.",181,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",181,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_only_v6","","",181,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",181,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"next","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a UDP socket from the given address.",182,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",182,null],[11,"peek_from","","Receives data from the socket, without removing it from the queue.",182,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",182,null],[11,"local_addr","","Returns the socket address that this socket was created from.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",182,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",182,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",182,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",182,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",182,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",182,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",182,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",182,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",182,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"send","","Sends data on the socket to the remote address to which it is connected.",182,null],[11,"recv","","Receives data on the socket from the remote address to which it is connected.",182,null],[11,"peek","","Receives data on the socket from the remote adress to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",182,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",171,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",175,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",176,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",177,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",178,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",173,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"addrparseerror"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",183,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more `SocketAddr` values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond to.",184,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",185,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"num","std","Additional functionality for numerics.",null,null],[8,"Zero","std::num","Types that have a \"zero\" value.",null,null],[10,"zero","","The \"zero\" (usually, additive identity) for this type.",186,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a \"one\" value.",null,null],[10,"one","","The \"one\" (usually, multiplicative identity) for this type.",187,{"inputs":[],"output":{"name":"self"}}],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",188,null],[13,"Infinite","","Positive or negative infinity.",188,null],[13,"Zero","","Positive or negative zero.",188,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",188,null],[13,"Normal","","A regular floating point number.",188,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",189,null],[0,"os","std","OS-specific functionality.",null,null],[0,"unix","std::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","std::os::unix","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","std::os::unix::io","Raw file descriptors.",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying object.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",190,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file descriptor.",null,null],[10,"from_raw_fd","","Constructs a new instance of `Self` from the given raw file descriptor.",191,{"inputs":[{"name":"rawfd"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of its raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",192,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[0,"ffi","std::os::unix","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","std::os::unix::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an [`OsString`] from a byte vector.",193,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this [`OsString`].",193,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","Creates an [`OsStr`] from a byte slice.",194,null],[10,"as_bytes","","Gets the underlying byte view of the [`OsStr`] slice.",194,null],[0,"fs","std::os::unix","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[5,"symlink","std::os::unix::fs","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"FileExt","","Unix-specific extensions to `File`",null,null],[10,"read_at","","Reads a number of bytes starting from a given offset.",195,null],[10,"write_at","","Writes a number of bytes starting from a given offset.",195,null],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix permissions for this file.",196,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",196,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix permission bits.",196,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",197,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",197,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"ino","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"mode","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nlink","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"uid","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"gid","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rdev","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"size","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"atime","","",198,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",198,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime","","",198,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",198,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime","","",198,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",198,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"blksize","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"blocks","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",200,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"DirBuilderExt","","An extension trait for `fs::DirBuilder` for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to 0o777.",201,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"process","std::os::unix","Unix-specific extensions to primitives in the `std::process` module.",null,null],[8,"CommandExt","std::os::unix::process","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process's user id. This translates to a `setuid` call in the child process. Failure in the `setuid` call will cause the spawn to fail.",202,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has the same semantics as the `uid` field.",202,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is invoked.",202,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling the `execvp` syscall.",202,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32` return value of a process.",203,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[10,"signal","","If the process was terminated by a signal, returns that signal.",203,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"raw","std::os::unix","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","std::os::unix::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"pthread_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[0,"thread","std::os::unix","Unix-specific extensions to primitives in the `std::thread` module.",null,null],[6,"RawPthread","std::os::unix::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",204,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",204,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[0,"net","std::os::unix","Unix-specific networking functionality",null,null],[3,"SocketAddr","std::os::unix::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a [`UnixListener`].",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"prelude","std::os::unix","A prelude for conveniently writing platform-specific code.",null,null],[0,"macos","std::os","macOS-specific definitions",null,null],[0,"raw","std::os::macos","macOS-specific raw type definitions",null,null],[3,"stat","std::os::macos::raw","",null,null],[12,"st_dev","","",205,null],[12,"st_mode","","",205,null],[12,"st_nlink","","",205,null],[12,"st_ino","","",205,null],[12,"st_uid","","",205,null],[12,"st_gid","","",205,null],[12,"st_rdev","","",205,null],[12,"st_atime","","",205,null],[12,"st_atime_nsec","","",205,null],[12,"st_mtime","","",205,null],[12,"st_mtime_nsec","","",205,null],[12,"st_ctime","","",205,null],[12,"st_ctime_nsec","","",205,null],[12,"st_birthtime","","",205,null],[12,"st_birthtime_nsec","","",205,null],[12,"st_size","","",205,null],[12,"st_blocks","","",205,null],[12,"st_blksize","","",205,null],[12,"st_flags","","",205,null],[12,"st_gen","","",205,null],[12,"st_lspare","","",205,null],[12,"st_qspare","","",205,null],[6,"blkcnt_t","","",null,null],[6,"blksize_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[6,"time_t","","",null,null],[6,"pthread_t","","",null,null],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[0,"fs","std::os::macos","",null,null],[8,"MetadataExt","std::os::macos::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains the raw information returned by the OS.",206,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[10,"st_dev","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_ino","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_mode","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_nlink","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_uid","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_gid","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_rdev","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_size","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_atime","","",206,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_atime_nsec","","",206,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_mtime","","",206,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_mtime_nsec","","",206,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_ctime","","",206,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_ctime_nsec","","",206,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_birthtime","","",206,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_birthtime_nsec","","",206,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_blksize","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_blocks","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_flags","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_gen","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_lspare","","",206,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_qspare","","",206,null],[11,"as_raw_stat","std::fs","",135,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"st_dev","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_ino","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_mode","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_nlink","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_uid","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_gid","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_rdev","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_size","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_atime","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_atime_nsec","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_mtime","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_mtime_nsec","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_ctime","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_ctime_nsec","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_birthtime","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_birthtime_nsec","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_blksize","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_blocks","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_gen","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_flags","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_lspare","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_qspare","","",135,null],[0,"raw","std::os","Raw OS-specific types for the current platform/architecture",null,null],[4,"c_void","std::os::raw","Type used to construct void pointers for use with C.",null,null],[6,"c_char","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"panic","std","Panic support in the standard library",null,null],[3,"PanicInfo","std::panic","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is unwind safe.",null,null],[12,"0","","",208,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"name":"box"}}],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,{"inputs":[{"name":"box"}],"output":null}],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic hook.",null,null],[8,"UnwindSafe","","A marker trait which represents \"panic safe\" types in Rust.",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered unwind safe.",null,null],[11,"deref","","",208,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",208,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"call_once","","",208,null],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"path","std","Cross-platform path manipulation.",null,null],[3,"PrefixComponent","std::path","A Windows path prefix, e.g. `C:` or `\\server\\share`.",null,null],[3,"Components","","The core iterator giving the components of a path.",null,null],[3,"Iter","","An iterator over the components of a path, as [`OsStr`] slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to [`String`]).",null,null],[3,"Path","","A slice of a path (akin to [`str`]).",null,null],[3,"StripPrefixError","","An error returned from the [`Path::strip_prefix`] method indicating that the prefix was not found in `self`.",null,null],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`",null,null],[4,"Prefix","","Path prefixes (Windows only).",null,null],[13,"Verbatim","","Prefix `\\?`, together with the given component immediately following it.",209,null],[13,"VerbatimUNC","","Prefix `\\?\\UNC`, with the \"server\" and \"share\" components following it.",209,null],[13,"VerbatimDisk","","Prefix like `\\?\\C:`, for the given drive letter",209,null],[13,"DeviceNS","","Prefix `\\.`, together with the given component immediately following it.",209,null],[13,"UNC","","Prefix `\\server\\share`, with the given \"server\" and \"share\" components.",209,null],[13,"Disk","","Prefix `C:` for the given disk drive.",209,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\server\\share`.",210,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",210,null],[13,"CurDir","","A reference to the current directory, i.e. `.`",210,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",210,null],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",210,null],[5,"is_separator","","Determines whether the character is one of the permitted path separators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator of path components for the current platform.",null,null],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",209,null],[11,"partial_cmp","","",209,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",209,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",209,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",209,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",209,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",209,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\?`.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"prefixcomponent"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","The parsed prefix data.",211,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",211,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",211,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",211,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",211,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"component"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",210,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",210,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",210,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",210,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"cmp","","",210,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"hash","","",210,null],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice.",210,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",212,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",212,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",212,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",213,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",213,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",213,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"next","","",213,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",213,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",212,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",212,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",212,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",212,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",214,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a [`Path`] slice.",214,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",214,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Truncate `self` to [`self.parent`].",214,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates [`self.file_name`] to `file_name`.",214,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"set_extension","","Updates [`self.extension`] to `extension`.",214,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal [`OsString`] storage.",214,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"into_boxed_path","","Converts this `PathBuf` into a boxed `Path`.",214,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"from","std::boxed","",115,{"inputs":[{"name":"path"}],"output":{"name":"box"}}],[11,"from","std::path","",214,{"inputs":[{"name":"box"}],"output":{"name":"pathbuf"}}],[11,"into","","",214,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"from","","",214,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",214,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","std::ffi","",132,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","std::path","",214,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",214,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",214,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",214,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"borrow","","",214,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"default","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"from","std::borrow","",72,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",72,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",215,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",214,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",214,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",214,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",214,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"stripprefixerror"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",216,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",215,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying [`OsStr`] slice.",215,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `Path` is valid unicode.",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a [`Cow<str>`].",215,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned [`PathBuf`].",215,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",215,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",215,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",215,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of [`self.file_name`].",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of [`self.file_name`], if possible.",215,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"join","","Creates an owned [`PathBuf`] with `path` adjoined to `self`.",215,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned [`PathBuf`] like `self` but with the given file name.",215,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned [`PathBuf`] like `self` but with the given extension.",215,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",215,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as [`OsStr`] slices.",215,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements [`Display`] for safely printing paths that may contain non-Unicode data.",215,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"metadata","","Query the file system to get information about a file, directory, etc.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components normalized and symbolic links resolved.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_dir","","Returns an iterator over the entries within a directory.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"exists","","Returns whether the path points at an existing entity.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether the path is pointing at a regular file.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_dir","","Returns whether the path is pointing at a directory.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_path_buf","","Converts a `Box<Path>` into a `PathBuf` without copying or allocating.",215,{"inputs":[{"name":"box"}],"output":{"name":"pathbuf"}}],[11,"as_ref","","",215,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",215,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",215,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",215,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",215,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi","",133,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi","",132,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",214,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",214,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","","",215,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",214,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",215,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",215,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",214,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",214,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",214,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",214,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",214,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",214,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",214,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",132,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",214,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",132,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",215,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",215,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",215,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",215,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",215,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",215,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",132,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",215,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",132,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::ffi","",132,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",132,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi","",132,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","std::path","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",216,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"process","std","A module for working with processes.",null,null],[3,"Child","std::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child's stdin, if it has been captured",218,null],[12,"stdout","","The handle for reading from the child's stdout, if it has been captured",218,null],[12,"stderr","","The handle for reading from the child's stderr, if it has been captured",218,null],[3,"ChildStdin","","A handle to a child process's stdin. This struct is used in the [`stdin`] field on [`Child`].",null,null],[3,"ChildStdout","","A handle to a child process's stdout. This struct is used in the [`stdout`] field on [`Child`].",null,null],[3,"ChildStderr","","A handle to a child process's stderr. This struct is used in the [`stderr`] field on [`Child`].",null,null],[3,"Command","","A process builder, providing fine-grained control over how a new process should be spawned.",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",219,null],[12,"stdout","","The data that the process wrote to stdout.",219,null],[12,"stderr","","The data that the process wrote to stderr.",219,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process.",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,null],[5,"abort","","Terminates the process in an abnormal fashion.",null,null],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",220,null],[11,"flush","","",220,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",221,null],[11,"read_to_end","","",221,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",222,null],[11,"read_to_end","","",222,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Command` for launching the program at path `program`, with the following default configuration:",223,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",223,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"command"}}],[11,"env","","Inserts or updates an environment variable mapping.",223,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"envs","","Add or update multiple environment variable mappings.",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",223,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",223,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",223,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",223,{"inputs":[{"name":"self"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",223,{"inputs":[{"name":"self"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",223,{"inputs":[{"name":"self"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",223,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and collecting all of its output.",223,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and collecting its exit status.",223,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any non-utf8 data is lossily converted using the utf8 replacement character.",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"output"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",224,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",224,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the stream to `/dev/null`",224,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"exitstatus"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"success","","Was termination successful? Signal termination not considered a success, and success is defined as a zero exit status.",225,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a SIGKILL on unix platforms.",218,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",218,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it exited with. This function will continue to have the same return value after it has been called at least once.",218,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_wait","","Attempts to collect the exit status of the child if it has already exited.",218,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining output on the stdout/stderr handles, returning an `Output` instance.",218,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"sync","std","Useful synchronization primitives.",null,null],[3,"Arc","std::sync","A thread-safe reference-counting pointer.",null,null],[3,"Weak","","A weak version of [`Arc`][arc].",null,null],[0,"atomic","","Atomic types",null,null],[3,"AtomicBool","std::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM's `Monotonic` ordering.",226,null],[13,"Release","","When coupled with a store, all previous writes become visible to the other threads that perform a load with `Acquire` ordering on the same value.",226,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data written before a store with `Release` ordering on the same value in other threads.",226,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store `Release` ordering.",226,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all sequentially consistent operations in the same order.",226,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[3,"Barrier","std::sync","A barrier enables multiple threads to synchronize the beginning of some computation.",null,null],[3,"BarrierWaitResult","","A result returned from wait.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the `ONCE_INIT` value.",null,null],[3,"OnceState","","State yielded to the `call_once_force` method which can be used to query whether the `Once` was previously poisoned or not.",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the `try_lock` method.",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding the lock.",227,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would otherwise block.",227,null],[0,"mpsc","","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Select","std::sync::mpsc","The \"receiver set\" of the select interface. This structure is used to manage a set of receivers which are being selected over.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of receivers.  This handle is used to keep the receiver in the set as well as interact with the underlying receiver.",null,null],[3,"Receiver","","The receiving-half of Rust's channel type. This half can only be owned by one thread",null,null],[3,"Iter","","An iterator over messages on a receiver, this iterator will block whenever `next` is called, waiting for a new message, and `None` will be returned when the corresponding channel has hung up.",null,null],[3,"TryIter","","An iterator that attempts to yield all pending values for a receiver. `None` will be returned when there are no pending values remaining or if the corresponding channel has hung up.",null,null],[3,"IntoIter","","An owning iterator over messages on a receiver, this iterator will block whenever `next` is called, waiting for a new message, and `None` will be returned when the corresponding channel has hung up.",null,null],[3,"Sender","","The sending-half of Rust's asynchronous channel type. This half can only be owned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust's synchronous channel type. This half can only be owned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SendError","","An error returned from the `send` function on channels.",null,null],[12,"0","","",228,null],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`.",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that `try_recv` could not return data when called.",null,null],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet disconnected, so data may yet become available.",229,null],[13,"Disconnected","","This channel's sending half has become disconnected, and there will never be any more data received on this channel",229,null],[4,"RecvTimeoutError","","This enumeration is the list of possible errors that `recv_timeout` could not return data when called.",null,null],[13,"Timeout","","This channel is currently empty, but the sender(s) have not yet disconnected, so data may yet become available.",230,null],[13,"Disconnected","","This channel's sending half has become disconnected, and there will never be any more data received on this channel",230,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the `SyncSender::try_send` method.",null,null],[13,"Full","","The data could not be sent on the channel because it would require that the callee block to send the data.",231,null],[13,"Disconnected","","This channel's receiving half has disconnected, so the data could not be sent. The data is returned back to the callee in this case.",231,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves. All data sent on the sender will become available on the receiver, and no send will block the calling thread (this channel has an \"infinite buffer\").",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel.",null,null],[11,"new","","Creates a new selection structure. This set is initially empty.",232,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note that this does *not* add the receiver to the receiver set, for that you must call the `add` method on the handle itself.",232,{"inputs":[{"name":"self"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an index, but rather an id. This id can be queried against any active `Handle` structures (each one has an `id` method). The handle with the matching `id` will have some sort of event available on it. The event could either be that data is available or the corresponding channel has been closed.",232,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",233,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on success or `None` if the channel disconnects. This function has the same semantics as `Receiver.recv`",233,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This method can be called multiple times, but it has no effect if `add` was called previously.",233,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because it has no guarantee that the `Handle` was not moved since `add` was called.",233,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",232,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",233,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",237,{"inputs":[{"name":"self"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"recverror"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"tryrecverror"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"recvtimeouterror"}],"output":{"name":"bool"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"recvtimeouterror"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",231,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could not be sent.",238,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",238,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value on this synchronous channel.",239,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",239,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"syncsender"}}],[11,"drop","","",239,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",240,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the corresponding channel has hung up.",240,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning an error if the corresponding channel has hung up, or if it waits more than `timeout`.",240,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never `panic!`. It will return `None` when the channel has hung up.",240,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"try_iter","","Returns an iterator that will attempt to yield all pending values. It will return `None` if there are no more pending values or if the channel has hung up. The iterator will never `panic!` or block the user by waiting for values.",240,{"inputs":[{"name":"self"}],"output":{"name":"tryiter"}}],[11,"next","","",234,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",235,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",236,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",240,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drop","","",240,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",228,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",231,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",231,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",237,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",229,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",230,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",230,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","std::sync","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new barrier that can block a given number of threads.",241,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",241,{"inputs":[{"name":"self"}],"output":{"name":"barrierwaitresult"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_leader","","Returns whether this thread from [`wait`] is the \"leader thread\".",242,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",243,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",243,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",244,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",244,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":{"name":"lockresult"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a specified duration.",244,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"lockresult"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a specified duration.",244,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"lockresult"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",244,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",244,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a `Condvar` which is ready to be waited on and notified.",244,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",244,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",245,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",245,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"try_lock","","Attempts to acquire this lock.",245,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",245,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",245,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",245,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"drop","","",245,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates a `Mutex<T>`, with the `Default` value for T.",245,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",246,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",246,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",246,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Once` value.",248,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will *not* be invoked.",248,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",248,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",247,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",249,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",249,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",249,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",249,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",249,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",249,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",249,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",249,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"drop","","",249,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a new `RwLock<T>`, with the `Default` value for T.",249,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",250,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",251,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",251,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",250,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",251,{"inputs":[{"name":"self"}],"output":null}],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method.",null,null],[6,"LockResult","","A type alias for the result of a lock method which can be poisoned.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[0,"time","std","Temporal quantification.",null,null],[3,"Duration","std::time","A `Duration` type to represent a span of time, typically used for system timeouts.",null,null],[3,"Instant","","A measurement of a monotonically increasing clock. Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to external entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` and `elapsed` methods on `SystemTime`, used to learn how far in the opposite direction a system time lies.",null,null],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",252,null],[11,"default","","",252,{"inputs":[],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and additional nanosecond precision.",252,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",252,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",252,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this `Duration`.",252,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this `Duration`.",252,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`, returning [`None`] if overflow occurred.",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`, returning [`None`] if the result would be negative or if underflow occurred.",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self * other`, returning [`None`] if overflow occurred.",252,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_div","","Checked `Duration` division. Computes `self / other`, returning [`None`] if `other == 0`.",252,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"add","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add_assign","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub_assign","","",252,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"mul","","",252,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"mul_assign","","",252,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div","","",252,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div_assign","","",252,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sum","","",252,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[11,"sum","","",252,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.",null,null],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"eq","","",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"cmp","","",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"eq","","",254,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",254,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",254,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",254,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",254,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",254,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",254,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"cmp","","",254,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"systemtimeerror"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns an instant corresponding to \"now\".",253,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",253,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",253,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"add_assign","","",253,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",253,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_assign","","",253,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",253,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",254,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",254,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",254,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add","","",254,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"add_assign","","",254,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",254,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_assign","","",254,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the second system time was from the first.",255,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"description","","",255,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",256,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",256,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the underlying guard to allow access regardless.",256,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a reference to the underlying guard to allow access regardless.",256,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a mutable reference to the underlying guard to allow access regardless.",256,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",227,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",227,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_raw_fd","std::fs","",141,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",141,{"inputs":[{"name":"rawfd"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",141,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","std::net","",180,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",181,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",182,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",180,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",181,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","","",182,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","","",180,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",181,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",182,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_vec","std::ffi","",132,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",132,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_bytes","","",133,null],[11,"as_bytes","","",133,null],[11,"read_at","std::fs","",141,null],[11,"write_at","","",141,null],[11,"mode","","",138,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_mode","","",138,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from_mode","","",138,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",137,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"custom_flags","","",137,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"dev","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ino","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"mode","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nlink","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"uid","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"gid","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rdev","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"size","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"atime","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"mtime","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"ctime","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",135,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"blksize","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"blocks","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_block_device","","",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_char_device","","",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fifo","","",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_socket","","",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ino","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"mode","","",140,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[11,"before_exec","","",223,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"command"}}],[11,"exec","","",223,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"from_raw","","",225,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"signal","","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",224,{"inputs":[{"name":"rawfd"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",220,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",221,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",222,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",220,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",221,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",222,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_pthread_t","std::thread","",98,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[11,"into_pthread_t","","",98,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[11,"clone","std::os::unix::net","",257,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"is_unnamed","","Returns true if and only if the address is unnamed.",257,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",257,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Connects to the socket named by `path`.",258,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",258,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout for the socket.",258,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout for the socket.",258,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",258,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",258,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"read","","",258,null],[11,"read_to_end","","",258,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",258,null],[11,"flush","","",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",258,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",258,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",258,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",259,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",259,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",259,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",259,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",259,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",259,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",259,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"as_raw_fd","","",259,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",259,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",259,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",260,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",260,null],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a Unix datagram socket bound to the given path.",261,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",261,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",261,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",261,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",261,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the address of this socket.",261,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the address of this socket's peer.",261,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket.",261,null],[11,"recv","","Receives data from the socket.",261,null],[11,"send_to","","Sends data on the socket to the specified address.",261,null],[11,"send","","Sends data on the socket to the socket's peer.",261,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",261,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout for the socket.",261,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",261,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",261,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",261,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",261,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",261,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",261,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",261,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",261,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","std::panic","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"payload","","Returns the payload associated with the panic.",262,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated, if available.",262,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"file","","Returns the name of the source file from which the panic originated.",263,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",263,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[14,"format","std","Use the syntax described in `std::fmt` to create a value of type `String`. See [`std::fmt`][fmt] for more information.",null,null],[14,"vec","","Creates a `Vec` containing the arguments.",null,null],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"write","","Write formatted data into a buffer",null,null],[14,"unimplemented","","A standardized placeholder for marking unfinished code. It panics with the message `\"not yet implemented\"` when executed.",null,null],[14,"unreachable","","A utility macro for indicating unreachable code.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"panic","","The entry point for panic of Rust threads.",null,null],[14,"print","","Macro for printing to the standard output.",null,null],[14,"println","","Macro for printing to the standard output, with a newline. On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone (no additional CARRIAGE RETURN (`\\r`/`U+000D`).",null,null],[14,"select","","A macro to select an event from a number of receivers.",null,null],[14,"format_args","","The core macro for formatted string creation & output.",null,null],[14,"env","","Inspect an environment variable at compile time.",null,null],[14,"option_env","","Optionally inspect an environment variable at compile time.",null,null],[14,"concat_idents","","Concatenate identifiers into one identifier.",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"line","","A macro which expands to the line number on which it was invoked.",null,null],[14,"column","","A macro which expands to the column number on which it was invoked.",null,null],[14,"file","","A macro which expands to the file name from which it was invoked.",null,null],[14,"stringify","","A macro which stringifies its argument.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"cfg","","Boolean evaluation of configuration flags.",null,null],[14,"include","","Parse a file as an expression or an item according to the context.",null,null],[14,"thread_local","","Declare a new thread local storage key of type `std::thread::LocalKey`.",null,null],[15,"bool","","The boolean type.",null,null],[15,"char","","A character type.",null,null],[15,"pointer","","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[15,"array","","A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the non-negative compile-time constant size, `N`.",null,null],[15,"slice","","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[15,"str","","String slices.",null,null],[15,"tuple","","A finite heterogeneous sequence, `(T, U, ..)`.",null,null],[15,"f32","","The 32-bit floating point type.",null,null],[15,"f64","","The 64-bit floating point type.",null,null],[15,"i8","","The 8-bit signed integer type.",null,null],[15,"i16","","The 16-bit signed integer type.",null,null],[15,"i32","","The 32-bit signed integer type.",null,null],[15,"i64","","The 64-bit signed integer type.",null,null],[15,"i128","","The 128-bit signed integer type.",null,null],[15,"u8","","The 8-bit unsigned integer type.",null,null],[15,"u16","","The 16-bit unsigned integer type.",null,null],[15,"u32","","The 32-bit unsigned integer type.",null,null],[15,"u64","","The 64-bit unsigned integer type.",null,null],[15,"u128","","The 128-bit unsigned integer type.",null,null],[15,"isize","","The pointer-sized signed integer type.",null,null],[15,"usize","","The pointer-sized unsigned integer type.",null,null],[11,"is","std::any","Returns true if the boxed type is the same as `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut","std::collections::binary_heap","",264,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","std::vec","",131,null],[11,"pointer","std::collections::binary_heap","",265,null],[11,"pointer","std::collections::linked_list","",266,null],[11,"pointer","","",267,null],[11,"pointer","std::vec","",268,null],[11,"pointer","std::collections::vec_deque","",269,null],[11,"pointer","","",270,null],[11,"borrow","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"borrow","std::vec","",131,null],[11,"borrow","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"add","std::borrow","",72,null],[11,"add","","",72,null],[11,"add","std::string","",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"to_owned","std","",271,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_owned","","",272,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","std::collections::binary_heap","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::linked_list","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::vec","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::vec_deque","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::binary_heap","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_map","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::btree_set","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::vec","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections::vec_deque","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::collections","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"concat","std","",271,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"join","","",271,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"connect","","",271,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"concat","","",271,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"join","","",271,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"connect","","",271,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"start","std::ops","",309,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",309,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","std","",310,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",310,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",310,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",310,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"cmp","std::collections::btree_map","",284,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::linked_list","",294,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"cmp","std::vec","",131,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::vec_deque","",303,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::btree_set","",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","std::string","",134,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"fmt","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::string","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","std::collections::linked_list","",266,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"make_place","","",267,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"make_place","std::vec","",268,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","std::collections::vec_deque","",269,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","","",270,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"from_iter","std::collections::binary_heap","",273,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from_iter","std::collections::btree_map","",284,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","std::collections::btree_set","",290,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"from_iter","std::collections::linked_list","",294,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"from_iter","std::string","",134,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",134,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",134,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",134,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::borrow","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","std::vec","",131,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","std::borrow","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","std::collections::vec_deque","",303,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"next","std::collections::binary_heap","",274,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",274,null],[11,"next","","",275,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",275,null],[11,"next","","",304,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",304,null],[11,"next","std::collections::btree_map","",276,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",276,null],[11,"next","","",305,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",305,null],[11,"next","","",277,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",277,null],[11,"next","","",278,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"next","","",279,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",279,null],[11,"next","","",280,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",306,null],[11,"next","","",281,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::collections::btree_set","",285,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",285,null],[11,"next","","",307,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",307,null],[11,"next","","",308,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",286,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"next","","",287,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",287,null],[11,"next","","",288,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",288,null],[11,"next","","",289,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",289,null],[11,"next","std::collections::linked_list","",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",291,null],[11,"next","","",292,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",292,null],[11,"next","","",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",293,null],[11,"next","std::str","",295,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",295,null],[11,"next","std::string","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",296,null],[11,"next","std::vec","",297,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",297,null],[11,"count","","",297,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",298,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",298,null],[11,"next","std::collections::vec_deque","",299,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",299,null],[11,"fold","","",299,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",300,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",300,null],[11,"fold","","",300,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",301,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",301,null],[11,"next","","",302,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",302,null],[11,"hash","std::collections::btree_map","",284,null],[11,"hash","std::borrow","",72,null],[11,"hash","std::collections::linked_list","",294,null],[11,"hash","std::string","",134,null],[11,"hash","std::vec","",131,null],[11,"hash","std::collections::vec_deque","",303,null],[11,"hash","std::collections::btree_set","",290,null],[11,"hash","std::collections","",101,null],[11,"add_assign","std::borrow","",72,null],[11,"add_assign","","",72,null],[11,"add_assign","std::string","",134,null],[11,"finalize","std::collections::binary_heap","",265,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::collections::linked_list","",266,null],[11,"finalize","","",267,null],[11,"finalize","std::vec","",268,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::collections::vec_deque","",269,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","","",270,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","std::vec","",131,null],[11,"drop","std::collections::binary_heap","",264,null],[11,"drop","std::collections::btree_map","",284,null],[11,"drop","","",277,null],[11,"drop","std::collections::linked_list","",294,null],[11,"drop","std::string","",296,null],[11,"drop","std::vec","",131,null],[11,"drop","","",297,null],[11,"drop","","",298,null],[11,"drop","std::collections::vec_deque","",303,null],[11,"drop","","",302,null],[11,"as_mut","std::vec","",131,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",131,null],[11,"from_str","std::string","",134,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_string","std","",272,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","std::collections::btree_map","",284,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::collections::linked_list","",294,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","std::string","",134,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",303,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","std::collections::btree_set","",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","std::string","",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std","",272,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::string","",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std","",272,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std","",272,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std","",272,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::string","",134,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",131,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","std::borrow","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"eq","std::collections::vec_deque","",303,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","","",303,null],[11,"eq","std::collections","",101,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"default","std::collections::binary_heap","Creates an empty `BinaryHeap<T>`.",273,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"default","std::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",284,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","std::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",290,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","std::borrow","Creates an owned Cow<'a, B> with the default value for the contained owned value.",72,{"inputs":[],"output":{"name":"cow"}}],[11,"default","std::collections::linked_list","Creates an empty `LinkedList<T>`.",294,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"default","std::string","Creates an empty `String`.",134,{"inputs":[],"output":{"name":"string"}}],[11,"default","std::vec","Creates an empty `Vec<T>`.",131,{"inputs":[],"output":{"name":"vec"}}],[11,"default","std::collections::vec_deque","Creates an empty `VecDeque<T>`.",303,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"clone","std::collections::binary_heap","",273,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",273,null],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::collections::btree_map","",284,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",278,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",279,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","","",280,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","std::collections::btree_set","",285,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",308,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",286,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"clone","","",288,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","","",289,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone","std::collections::linked_list","",291,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",294,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"clone","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",134,null],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","std::vec","",131,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",131,null],[11,"clone","","",297,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::collections::vec_deque","",303,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::collections::binary_heap","",275,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::collections::btree_set","",290,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","std::collections::linked_list","",293,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::str","",295,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","std::collections::vec_deque","",301,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::collections","",101,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"extend","std::collections::binary_heap","",273,null],[11,"extend","","",273,null],[11,"extend","std::collections::btree_map","",284,null],[11,"extend","","",284,null],[11,"extend","std::collections::btree_set","",290,null],[11,"extend","","",290,null],[11,"extend","std::collections::linked_list","",294,null],[11,"extend","","",294,null],[11,"extend","std::string","",134,null],[11,"extend","","",134,null],[11,"extend","","",134,null],[11,"extend","","",134,null],[11,"extend","std::vec","",131,null],[11,"extend","","",131,null],[11,"extend","std::collections::vec_deque","",303,null],[11,"extend","","",303,null],[11,"next_back","std::collections::binary_heap","",274,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",275,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",304,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",276,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",305,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",277,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",278,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",279,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",280,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",281,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_set","",285,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",307,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",308,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::linked_list","",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",292,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::string","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::vec","",297,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",298,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::vec_deque","",299,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",300,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",301,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",302,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","std::collections::btree_map","",284,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","std::string","",134,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",134,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",134,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",134,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",134,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",134,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","std::vec","",131,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",131,null],[11,"index","","",131,null],[11,"index","","",131,null],[11,"index","","",131,null],[11,"index","","",131,null],[11,"index","","",131,null],[11,"index","std::collections::vec_deque","",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","std::string","",134,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",134,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",134,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",134,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",134,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",134,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","std::vec","",131,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",131,null],[11,"index_mut","","",131,null],[11,"index_mut","","",131,null],[11,"index_mut","","",131,null],[11,"index_mut","","",131,null],[11,"index_mut","","",131,null],[11,"index_mut","std::collections::vec_deque","",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"deref","std::collections::binary_heap","",264,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"len","std","Returns the length of `self`.",272,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if this slice has a length of zero bytes.",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_char_boundary","","Checks that `index`-th byte lies at the start and/or end of a UTF-8 code point sequence.",272,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"as_bytes","","Converts a string slice to a byte slice.",272,null],[11,"as_ptr","","Converts a string slice to a raw pointer.",272,null],[11,"slice_unchecked","","Creates a string slice from another string slice, bypassing safety checks.",272,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[11,"slice_mut_unchecked","","Creates a string slice from another string slice, bypassing safety checks.",272,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[11,"split_at","","Divide one string slice into two at an index.",272,null],[11,"split_at_mut","","Divide one mutable string slice into two at an index.",272,null],[11,"chars","","Returns an iterator over the `char`s of a string slice.",272,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"char_indices","","Returns an iterator over the [`char`]s of a string slice, and their positions.",272,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"bytes","","An iterator over the bytes of a string slice.",272,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"split_whitespace","","Split a string slice by whitespace.",272,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"lines","","An iterator over the lines of a string, as string slices.",272,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"lines_any","","An iterator over the lines of a string.",272,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"encode_utf16","","Returns an iterator of `u16` over the string encoded as UTF-16.",272,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"contains","","Returns `true` if the given pattern matches a sub-slice of this string slice.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"starts_with","","Returns `true` if the given pattern matches a prefix of this string slice.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Returns `true` if the given pattern matches a suffix of this string slice.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the byte index of the first character of this string slice that matches the pattern.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rfind","","Returns the byte index of the last character of this string slice that matches the pattern.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"split","","An iterator over substrings of this string slice, separated by characters matched by a pattern.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"rsplit","","An iterator over substrings of the given string slice, separated by characters matched by a pattern and yielded in reverse order.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplit"}}],[11,"split_terminator","","An iterator over substrings of the given string slice, separated by characters matched by a pattern.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"rsplit_terminator","","An iterator over substrings of `self`, separated by characters matched by a pattern and yielded in reverse order.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplitterminator"}}],[11,"splitn","","An iterator over substrings of the given string slice, separated by a pattern, restricted to returning at most `n` items.",272,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[11,"rsplitn","","An iterator over substrings of this string slice, separated by a pattern, starting from the end of the string, restricted to returning at most `n` items.",272,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[11,"matches","","An iterator over the matches of a pattern within the given string slice.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"matches"}}],[11,"rmatches","","An iterator over the matches of a pattern within this string slice, yielded in reverse order.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rmatches"}}],[11,"match_indices","","An iterator over the disjoint matches of a pattern within this string slice as well as the index that the match starts at.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"matchindices"}}],[11,"rmatch_indices","","An iterator over the disjoint matches of a pattern within `self`, yielded in reverse order along with the index of the match.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rmatchindices"}}],[11,"trim","","Returns a string slice with leading and trailing whitespace removed.",272,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_left","","Returns a string slice with leading whitespace removed.",272,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_right","","Returns a string slice with trailing whitespace removed.",272,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_matches","","Returns a string slice with all prefixes and suffixes that match a pattern repeatedly removed.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"str"}}],[11,"trim_left_matches","","Returns a string slice with all prefixes that match a pattern repeatedly removed.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"str"}}],[11,"trim_right_matches","","Returns a string slice with all suffixes that match a pattern repeatedly removed.",272,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"str"}}],[11,"parse","","Parses this string slice into another type.",272,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"replace","","Replaces all matches of a pattern with another string.",272,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":{"name":"string"}}],[11,"replacen","","Replaces first N matches of a pattern with another string.",272,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[11,"to_lowercase","","Returns the lowercase equivalent of this string slice, as a new [`String`].",272,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_uppercase","","Returns the uppercase equivalent of this string slice, as a new [`String`].",272,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"escape_debug","","Escapes each char in `s` with `char::escape_debug`.",272,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"escape_default","","Escapes each char in `s` with `char::escape_default`.",272,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",272,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"into_string","","Converts a `Box<str>` into a [`String`] without copying or allocating.",272,{"inputs":[{"name":"box"}],"output":{"name":"string"}}],[11,"repeat","","Create a [`String`] by repeating a string `n` times.",272,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"deref","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"len","std","Returns the number of elements in the slice.",271,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the slice has a length of 0.",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"first","","Returns the first element of a slice, or `None` if it is empty.",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"first_mut","","Returns a mutable pointer to the first element of a slice, or `None` if it is empty.",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first","","Returns the first and all the rest of the elements of a slice.",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first_mut","","Returns the first and all the rest of the elements of a slice.",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last","","Returns the last and all the rest of the elements of a slice.",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last_mut","","Returns the last and all the rest of the elements of a slice.",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","Returns the last element of a slice, or `None` if it is empty.",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last_mut","","Returns a mutable pointer to the last item in the slice.",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a reference to an element or subslice depending on the type of index.",271,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to an element or subslice depending on the type of index (see [`get`]) or `None` if the index is out of bounds.",271,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_unchecked","","Returns a reference to an element or subslice, without doing bounds checking. So use it very carefully!",271,null],[11,"get_unchecked_mut","","Returns a mutable reference to an element or subslice, without doing bounds checking. So use it very carefully!",271,null],[11,"as_ptr","","Returns a raw pointer to the slice's buffer.",271,null],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the slice's buffer.",271,null],[11,"swap","","Swaps two elements in a slice.",271,null],[11,"reverse","","Reverses the order of elements in a slice, in place.",271,null],[11,"iter","","Returns an iterator over the slice.",271,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator that allows modifying each value.",271,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"windows","","Returns an iterator over all contiguous windows of length `size`. The windows overlap. If the slice is shorter than `size`, the iterator returns no values.",271,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"chunks","","Returns an iterator over `size` elements of the slice at a time. The chunks are slices and do not overlap. If `size` does not divide the length of the slice, then the last chunk will not have length `size`.",271,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time. The chunks are mutable slices, and do not overlap. If `chunk_size` does not divide the length of the slice, then the last chunk will not have length `chunk_size`.",271,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"split_at","","Divides one slice into two at an index.",271,null],[11,"split_at_mut","","Divides one `&mut` into two at an index.",271,null],[11,"split","","Returns an iterator over subslices separated by elements that match `pred`. The matched element is not contained in the subslices.",271,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"split"}}],[11,"split_mut","","Returns an iterator over mutable subslices separated by elements that match `pred`. The matched element is not contained in the subslices.",271,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"splitmut"}}],[11,"splitn","","Returns an iterator over subslices separated by elements that match `pred`, limited to returning at most `n` items. The matched element is not contained in the subslices.",271,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"splitn"}}],[11,"splitn_mut","","Returns an iterator over subslices separated by elements that match `pred`, limited to returning at most `n` items. The matched element is not contained in the subslices.",271,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"splitnmut"}}],[11,"rsplitn","","Returns an iterator over subslices separated by elements that match `pred` limited to returning at most `n` items. This starts at the end of the slice and works backwards.  The matched element is not contained in the subslices.",271,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"rsplitn"}}],[11,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match `pred` limited to returning at most `n` items. This starts at the end of the slice and works backwards. The matched element is not contained in the subslices.",271,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"rsplitnmut"}}],[11,"contains","","Returns `true` if the slice contains an element with the given value.",271,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"starts_with","","Returns `true` if `needle` is a prefix of the slice.",271,null],[11,"ends_with","","Returns `true` if `needle` is a suffix of the slice.",271,null],[11,"binary_search","","Binary search a sorted slice for a given element.",271,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"binary_search_by","","Binary search a sorted slice with a comparator function.",271,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"binary_search_by_key","","Binary search a sorted slice with a key extraction function.",271,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"sort","","Sorts the slice.",271,null],[11,"sort_by_key","","Sorts the slice using `f` to extract a key to compare elements by.",271,null],[11,"sort_by","","Sorts the slice using `compare` to compare elements.",271,null],[11,"clone_from_slice","","Copies the elements from `src` into `self`.",271,null],[11,"copy_from_slice","","Copies all elements from `src` into `self`, using a memcpy.",271,null],[11,"to_vec","","Copies `self` into a new `Vec`.",271,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_vec","","Converts `self` into a vector without clones or allocation.",271,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"deref","std::vec","",131,null],[11,"into_iter","std::collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",273,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::btree_map","",284,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::btree_set","Gets an iterator for moving out the BtreeSet's contents.",290,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::linked_list","Consumes the list into an iterator yielding elements by value.",294,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::vec","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",131,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::vec_deque","Consumes the list into a front-to-back iterator yielding elements by value.",303,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"into","std::vec","",131,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"write_str","std::string","",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",134,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"from","std::collections::binary_heap","",273,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","std::vec","",131,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","std::string","",134,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",134,{"inputs":[{"name":"box"}],"output":{"name":"string"}}],[11,"from","","",134,{"inputs":[{"name":"cow"}],"output":{"name":"string"}}],[11,"from","std::borrow","",72,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",72,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from","std::vec","",131,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"from","","",131,null],[11,"from","","",131,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",131,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","","",131,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","std::borrow","",72,null],[11,"from","","",72,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","std::collections::vec_deque","",303,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","std::vec","",131,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"partial_cmp","std::collections::btree_map","",284,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"partial_cmp","std::borrow","",72,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","std::collections::linked_list","",294,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"partial_cmp","std::vec","",131,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"partial_cmp","std::collections::vec_deque","",303,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"partial_cmp","std::collections::btree_set","",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::string","",134,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",134,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",134,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",134,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",134,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"as_ref","std::borrow","",72,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::string","",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",134,null],[11,"as_ref","std::vec","",131,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",131,null],[11,"is_empty","std::collections::binary_heap","",274,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",275,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_map","",276,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",305,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",277,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",278,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",279,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::collections::btree_set","",285,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",307,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::vec","",297,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",298,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::collections::vec_deque","",299,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",301,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::boxed","",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"pointer","","",311,null],[11,"finalize","","",115,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"borrow","","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","std::sync","",312,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","std::rc","",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"make_place","std::boxed","",311,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","std::boxed","",115,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","std::sync","Comparison for two `Arc`s.",312,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"cmp","std::rc","Comparison for two `Rc`s.",313,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"fmt","std::boxed","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","std::boxed","",316,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"hash","","",115,null],[11,"hash","std::sync","",312,null],[11,"hash","std::rc","",313,null],[11,"next","std::boxed","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"nth","","",115,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"finalize","","",311,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"borrow_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",311,null],[11,"drop","","",115,null],[11,"drop","std::sync","Drops the `Arc`.",312,null],[11,"drop","","Drops the `Weak` pointer.",314,null],[11,"drop","std::rc","Drops the `Rc`.",313,null],[11,"drop","","Drops the `Weak` pointer.",315,null],[11,"call_once","std::boxed","",115,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",115,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"as_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","std::sync","Equality for two `Arc`s.",312,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc`s.",312,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","std::rc","Equality for two `Rc`s.",313,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",313,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"default","std::boxed","Creates a `Box<T>`, with the `Default` value for T.",115,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"box"}}],[11,"default","std::sync","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",314,{"inputs":[],"output":{"name":"weak"}}],[11,"default","","Creates a new `Arc<T>`, with the `Default` value for `T`.",312,{"inputs":[],"output":{"name":"arc"}}],[11,"default","std::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",313,{"inputs":[],"output":{"name":"rc"}}],[11,"default","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",315,{"inputs":[],"output":{"name":"weak"}}],[11,"clone","std::boxed","Returns a new box with a `clone()` of this box's contents.",115,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",115,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","std::sync","Makes a clone of the `Arc` pointer.",312,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"clone","","Makes a clone of the `Weak` pointer.",314,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","std::rc","Makes a clone of the `Rc` pointer.",313,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"clone","","Makes a clone of the `Weak` pointer.",315,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","std::boxed","",316,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"next_back","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::sync","",312,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::rc","",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","std::boxed","",115,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","","",115,null],[11,"from","","",115,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","std::sync","",312,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"from","std::rc","",313,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"partial_cmp","std::boxed","",115,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",115,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",115,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",115,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",115,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::sync","Partial comparison for two `Arc`s.",312,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc`s.",312,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",312,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc`s.",312,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",312,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::rc","Partial comparison for two `Rc`s.",313,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",313,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",313,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",313,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",313,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"fmt","std::boxed","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::rc","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","std::boxed","",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::sync","",312,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::rc","",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","std::char","",317,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",317,null],[11,"count","","",317,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",317,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",318,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",318,null],[11,"count","","",318,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",318,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",318,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",319,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",319,null],[11,"next","","",320,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",321,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",321,null],[11,"next","","",321,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",321,null],[11,"next","","",321,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",321,null],[11,"next","std::ops","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next","std::iter","",322,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",322,null],[11,"next","","",323,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",323,null],[11,"next","","",324,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",324,null],[11,"next","","",325,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",325,null],[11,"next","","",326,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",326,null],[11,"fold","","",326,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",327,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",327,null],[11,"next","","",328,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",328,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold","","",328,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",328,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",328,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",328,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",328,null],[11,"next","","",329,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",329,null],[11,"next","","",330,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",330,null],[11,"fold","","",330,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","","",331,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",331,null],[11,"count","","",331,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",332,null],[11,"next","","Overflow Behavior",333,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",333,null],[11,"nth","","",333,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",333,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",334,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",334,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",334,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",334,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",334,null],[11,"next","","",335,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",335,null],[11,"next","","",336,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",336,null],[11,"next","","",337,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",337,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",337,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",337,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",337,null],[11,"next","","",338,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",338,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",338,null],[11,"next","","",339,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",339,null],[11,"next","","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",340,null],[11,"next","","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",341,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",341,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",341,null],[11,"next","","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",341,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",341,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",341,null],[11,"next","","",342,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",342,null],[11,"next","std::option","",343,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",343,null],[11,"next","","",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",344,null],[11,"next","","",345,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",345,null],[11,"next","std::result","",346,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"next","","",347,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"next","","",348,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"next","std::slice","",349,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"next","","",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"next","","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"count","","",351,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",351,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",352,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"count","","",352,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",352,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",352,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"count","","",353,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",353,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::str","",354,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",354,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",354,null],[11,"last","","",354,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",355,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",355,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",355,null],[11,"last","","",355,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",356,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",356,null],[11,"count","","",356,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",356,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",356,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",357,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",357,null],[11,"next","","",358,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",358,null],[11,"next","std::slice","",359,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",359,null],[11,"count","","",359,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",359,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",359,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",359,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",359,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",359,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",359,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",359,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",360,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",360,null],[11,"count","","",360,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",360,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",360,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all","","",360,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",360,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",360,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"position","","",360,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rposition","","",360,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",361,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",361,null],[11,"next","","",362,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",362,null],[11,"next","","",363,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",363,null],[11,"next","","",364,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",364,null],[11,"next","std::str","",365,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",366,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",367,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",368,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",369,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",370,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",371,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",373,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",374,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sum","std::result","",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"sum","std","",375,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"sum","","",375,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"sum","","",376,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"sum","","",376,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"sum","","",377,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"sum","","",377,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"sum","","",378,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"sum","","",378,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"sum","","",379,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"sum","","",379,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"sum","","",380,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"sum","","",380,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"sum","","",381,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"sum","","",381,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"sum","","",382,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"sum","","",382,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"sum","","",383,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"sum","","",383,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"sum","","",384,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"sum","","",384,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"sum","std::num","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"sum","std","",385,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"sum","","",385,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"sum","","",386,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"sum","","",386,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"rem","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","","",189,null],[11,"rem","std","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"rem","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"rem","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"rem","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"rem","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"rem","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"rem","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"rem","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"rem","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"rem","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"rem","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"rem","","",384,null],[11,"rem","","",384,null],[11,"rem","","",384,null],[11,"rem","","",380,null],[11,"rem","","",380,null],[11,"rem","","",380,null],[11,"rem","","",381,null],[11,"rem","","",381,null],[11,"rem","","",381,null],[11,"rem","","",382,null],[11,"rem","","",382,null],[11,"rem","","",382,null],[11,"rem","","",383,null],[11,"rem","","",383,null],[11,"rem","","",383,null],[11,"rem","","",387,null],[11,"rem","","",387,null],[11,"rem","","",387,null],[11,"rem","","",379,null],[11,"rem","","",379,null],[11,"rem","","",379,null],[11,"rem","","",375,null],[11,"rem","","",375,null],[11,"rem","","",375,null],[11,"rem","","",376,null],[11,"rem","","",376,null],[11,"rem","","",376,null],[11,"rem","","",377,null],[11,"rem","","",377,null],[11,"rem","","",377,null],[11,"rem","","",378,null],[11,"rem","","",378,null],[11,"rem","","",378,null],[11,"rem","","",388,null],[11,"rem","","",388,null],[11,"rem","","",388,null],[11,"rem","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"rem","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"rem","","",385,null],[11,"rem","","",385,null],[11,"rem","","",385,null],[11,"rem","","",386,null],[11,"rem","","",386,null],[11,"rem","","",386,null],[11,"write","std::hash","",389,null],[11,"finish","","",389,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",390,null],[11,"finish","","",390,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",391,null],[11,"finish","","",391,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"shr","std::num","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","std","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u8"}}],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",380,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u16"}}],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",381,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u32"}}],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",382,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u64"}}],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",383,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u128"}}],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",387,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"usize"}}],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",384,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i8"}}],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",375,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i16"}}],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",376,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i32"}}],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",377,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i64"}}],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",378,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i128"}}],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",388,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"shr","","",379,null],[11,"from","std::cell","",392,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"from","","",393,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"from","","",394,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"from","std","",382,{"inputs":[{"name":"char"}],"output":{"name":"u32"}}],[11,"from","","",395,{"inputs":[{"name":"u8"}],"output":{"name":"char"}}],[11,"from","std::option","",69,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","std","",381,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[11,"from","","",382,{"inputs":[{"name":"u8"}],"output":{"name":"u32"}}],[11,"from","","",383,{"inputs":[{"name":"u8"}],"output":{"name":"u64"}}],[11,"from","","",387,{"inputs":[{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","","",384,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[11,"from","","",382,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[11,"from","","",383,{"inputs":[{"name":"u16"}],"output":{"name":"u64"}}],[11,"from","","",387,{"inputs":[{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","","",383,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[11,"from","","",387,{"inputs":[{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","","",387,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from","","",376,{"inputs":[{"name":"i8"}],"output":{"name":"i16"}}],[11,"from","","",377,{"inputs":[{"name":"i8"}],"output":{"name":"i32"}}],[11,"from","","",378,{"inputs":[{"name":"i8"}],"output":{"name":"i64"}}],[11,"from","","",388,{"inputs":[{"name":"i8"}],"output":{"name":"i128"}}],[11,"from","","",379,{"inputs":[{"name":"i8"}],"output":{"name":"isize"}}],[11,"from","","",377,{"inputs":[{"name":"i16"}],"output":{"name":"i32"}}],[11,"from","","",378,{"inputs":[{"name":"i16"}],"output":{"name":"i64"}}],[11,"from","","",388,{"inputs":[{"name":"i16"}],"output":{"name":"i128"}}],[11,"from","","",378,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[11,"from","","",388,{"inputs":[{"name":"i32"}],"output":{"name":"i128"}}],[11,"from","","",388,{"inputs":[{"name":"i64"}],"output":{"name":"i128"}}],[11,"from","","",376,{"inputs":[{"name":"u8"}],"output":{"name":"i16"}}],[11,"from","","",377,{"inputs":[{"name":"u8"}],"output":{"name":"i32"}}],[11,"from","","",378,{"inputs":[{"name":"u8"}],"output":{"name":"i64"}}],[11,"from","","",388,{"inputs":[{"name":"u8"}],"output":{"name":"i128"}}],[11,"from","","",377,{"inputs":[{"name":"u16"}],"output":{"name":"i32"}}],[11,"from","","",378,{"inputs":[{"name":"u16"}],"output":{"name":"i64"}}],[11,"from","","",388,{"inputs":[{"name":"u16"}],"output":{"name":"i128"}}],[11,"from","","",378,{"inputs":[{"name":"u32"}],"output":{"name":"i64"}}],[11,"from","","",388,{"inputs":[{"name":"u32"}],"output":{"name":"i128"}}],[11,"from","","",388,{"inputs":[{"name":"u64"}],"output":{"name":"i128"}}],[11,"from","","",385,{"inputs":[{"name":"i8"}],"output":{"name":"f32"}}],[11,"from","","",386,{"inputs":[{"name":"i8"}],"output":{"name":"f64"}}],[11,"from","","",385,{"inputs":[{"name":"i16"}],"output":{"name":"f32"}}],[11,"from","","",386,{"inputs":[{"name":"i16"}],"output":{"name":"f64"}}],[11,"from","","",386,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[11,"from","","",385,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[11,"from","","",386,{"inputs":[{"name":"u8"}],"output":{"name":"f64"}}],[11,"from","","",385,{"inputs":[{"name":"u16"}],"output":{"name":"f32"}}],[11,"from","","",386,{"inputs":[{"name":"u16"}],"output":{"name":"f64"}}],[11,"from","","",386,{"inputs":[{"name":"u32"}],"output":{"name":"f64"}}],[11,"from","","",386,{"inputs":[{"name":"f32"}],"output":{"name":"f64"}}],[11,"fmt","std::ptr","",396,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",397,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",271,null],[11,"as_ref","","",272,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","std::slice","",359,null],[11,"as_ref","std","",272,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"as_ref","","",399,null],[11,"fmt","std::num","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","std::str::pattern","",400,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",400,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",400,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",401,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",401,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",401,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",402,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",402,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",402,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",403,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",403,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","std::num","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::mem","",404,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::ops","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::any","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",405,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",406,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",323,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",335,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",336,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",339,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",340,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",342,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",359,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",360,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",349,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",361,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",362,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",363,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",364,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str::pattern","",402,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::hash","",407,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",409,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",395,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::marker","",410,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",392,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",393,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",411,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",412,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",394,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",413,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",414,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",415,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::any","",416,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::sync::atomic","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",417,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",418,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",422,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",424,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",425,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",426,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::iter","",321,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",324,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",325,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",328,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",333,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",337,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",341,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::option","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",343,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",344,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",345,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::result","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",346,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",347,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",348,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::slice","",351,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",352,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",353,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str::pattern","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",400,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",401,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",403,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",355,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",365,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",366,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",368,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",370,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",373,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",374,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",357,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",358,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::hash","",390,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",391,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",389,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_null","","Returns true if the pointer is null.",398,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to the value wrapped in `Some`.",398,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a `count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",398,null],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic. `count` is in units of T; e.g. a `count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",398,null],[11,"deref","std::ptr","",396,null],[11,"deref","","",397,null],[11,"deref","std::cell","",411,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",412,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_searcher","std","",395,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"charsearcher"}}],[11,"is_contained_in","","",395,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","",395,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","",395,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"into_searcher","","",271,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"charslicesearcher"}}],[11,"is_contained_in","","",271,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","",271,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","",271,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"into_searcher","","",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"strsearcher"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"shl_assign","std::num","",189,null],[11,"shl_assign","","",189,null],[11,"shl_assign","","",189,null],[11,"shl_assign","","",189,null],[11,"shl_assign","","",189,null],[11,"shl_assign","","",189,null],[11,"shl_assign","","",189,null],[11,"shl_assign","","",189,null],[11,"shl_assign","","",189,null],[11,"shl_assign","","",189,null],[11,"shl_assign","std","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",380,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",381,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",382,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",383,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",387,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",384,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",375,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",376,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",377,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",378,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",388,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"shl_assign","","",379,null],[11,"add","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add","std","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"add","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"add","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"add","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"add","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"add","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"add","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"add","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"add","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"add","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"add","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"add","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"add","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"add","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"add","","",384,null],[11,"add","","",384,null],[11,"add","","",384,null],[11,"add","","",380,null],[11,"add","","",380,null],[11,"add","","",380,null],[11,"add","","",381,null],[11,"add","","",381,null],[11,"add","","",381,null],[11,"add","","",382,null],[11,"add","","",382,null],[11,"add","","",382,null],[11,"add","","",383,null],[11,"add","","",383,null],[11,"add","","",383,null],[11,"add","","",387,null],[11,"add","","",387,null],[11,"add","","",387,null],[11,"add","","",379,null],[11,"add","","",379,null],[11,"add","","",379,null],[11,"add","","",375,null],[11,"add","","",375,null],[11,"add","","",375,null],[11,"add","","",376,null],[11,"add","","",376,null],[11,"add","","",376,null],[11,"add","","",377,null],[11,"add","","",377,null],[11,"add","","",377,null],[11,"add","","",378,null],[11,"add","","",378,null],[11,"add","","",378,null],[11,"add","","",388,null],[11,"add","","",388,null],[11,"add","","",388,null],[11,"add","","",385,null],[11,"add","","",385,null],[11,"add","","",385,null],[11,"add","","",386,null],[11,"add","","",386,null],[11,"add","","",386,null],[11,"bitxor_assign","std::num","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","","",189,null],[11,"bitxor_assign","std","",409,null],[11,"bitxor_assign","","",384,null],[11,"bitxor_assign","","",380,null],[11,"bitxor_assign","","",381,null],[11,"bitxor_assign","","",382,null],[11,"bitxor_assign","","",383,null],[11,"bitxor_assign","","",387,null],[11,"bitxor_assign","","",379,null],[11,"bitxor_assign","","",375,null],[11,"bitxor_assign","","",376,null],[11,"bitxor_assign","","",377,null],[11,"bitxor_assign","","",378,null],[11,"bitxor_assign","","",388,null],[11,"bitor_assign","std::num","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","","",189,null],[11,"bitor_assign","std","",409,null],[11,"bitor_assign","","",384,null],[11,"bitor_assign","","",380,null],[11,"bitor_assign","","",381,null],[11,"bitor_assign","","",382,null],[11,"bitor_assign","","",383,null],[11,"bitor_assign","","",387,null],[11,"bitor_assign","","",379,null],[11,"bitor_assign","","",375,null],[11,"bitor_assign","","",376,null],[11,"bitor_assign","","",377,null],[11,"bitor_assign","","",378,null],[11,"bitor_assign","","",388,null],[11,"bitand_assign","std::num","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","","",189,null],[11,"bitand_assign","std","",409,null],[11,"bitand_assign","","",384,null],[11,"bitand_assign","","",380,null],[11,"bitand_assign","","",381,null],[11,"bitand_assign","","",382,null],[11,"bitand_assign","","",383,null],[11,"bitand_assign","","",387,null],[11,"bitand_assign","","",379,null],[11,"bitand_assign","","",375,null],[11,"bitand_assign","","",376,null],[11,"bitand_assign","","",377,null],[11,"bitand_assign","","",378,null],[11,"bitand_assign","","",388,null],[11,"bitand","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","","",189,null],[11,"bitand","std","",409,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"bitand","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bitand","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"bitand","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"bitand","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"bitand","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitand","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitand","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"bitand","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"bitand","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"bitand","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"bitand","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"bitand","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"bitand","","",409,null],[11,"bitand","","",409,null],[11,"bitand","","",409,null],[11,"bitand","","",384,null],[11,"bitand","","",384,null],[11,"bitand","","",384,null],[11,"bitand","","",380,null],[11,"bitand","","",380,null],[11,"bitand","","",380,null],[11,"bitand","","",381,null],[11,"bitand","","",381,null],[11,"bitand","","",381,null],[11,"bitand","","",382,null],[11,"bitand","","",382,null],[11,"bitand","","",382,null],[11,"bitand","","",383,null],[11,"bitand","","",383,null],[11,"bitand","","",383,null],[11,"bitand","","",387,null],[11,"bitand","","",387,null],[11,"bitand","","",387,null],[11,"bitand","","",379,null],[11,"bitand","","",379,null],[11,"bitand","","",379,null],[11,"bitand","","",375,null],[11,"bitand","","",375,null],[11,"bitand","","",375,null],[11,"bitand","","",376,null],[11,"bitand","","",376,null],[11,"bitand","","",376,null],[11,"bitand","","",377,null],[11,"bitand","","",377,null],[11,"bitand","","",377,null],[11,"bitand","","",378,null],[11,"bitand","","",378,null],[11,"bitand","","",378,null],[11,"bitand","","",388,null],[11,"bitand","","",388,null],[11,"bitand","","",388,null],[11,"rem_assign","std::num","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","","",189,null],[11,"rem_assign","std","",384,null],[11,"rem_assign","","",380,null],[11,"rem_assign","","",381,null],[11,"rem_assign","","",382,null],[11,"rem_assign","","",383,null],[11,"rem_assign","","",387,null],[11,"rem_assign","","",379,null],[11,"rem_assign","","",375,null],[11,"rem_assign","","",376,null],[11,"rem_assign","","",377,null],[11,"rem_assign","","",378,null],[11,"rem_assign","","",388,null],[11,"rem_assign","","",385,null],[11,"rem_assign","","",386,null],[11,"div_assign","std::num","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","","",189,null],[11,"div_assign","std","",384,null],[11,"div_assign","","",380,null],[11,"div_assign","","",381,null],[11,"div_assign","","",382,null],[11,"div_assign","","",383,null],[11,"div_assign","","",387,null],[11,"div_assign","","",379,null],[11,"div_assign","","",375,null],[11,"div_assign","","",376,null],[11,"div_assign","","",377,null],[11,"div_assign","","",378,null],[11,"div_assign","","",388,null],[11,"div_assign","","",385,null],[11,"div_assign","","",386,null],[11,"cmp","","",398,null],[11,"cmp","","",398,null],[11,"cmp","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","std","",310,null],[11,"cmp","","",409,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"ordering"}}],[11,"cmp","std::cell","",392,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"cmp","","",393,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"cmp","std","",271,null],[11,"cmp","","",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ordering"}}],[11,"cmp","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"cmp","std::marker","",410,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"cmp","std","",395,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"ordering"}}],[11,"cmp","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"ordering"}}],[11,"cmp","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"ordering"}}],[11,"cmp","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"ordering"}}],[11,"cmp","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"ordering"}}],[11,"cmp","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"ordering"}}],[11,"cmp","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"cmp","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"ordering"}}],[11,"cmp","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"ordering"}}],[11,"cmp","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"ordering"}}],[11,"cmp","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ordering"}}],[11,"cmp","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"ordering"}}],[11,"cmp","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"ordering"}}],[11,"cmp","std::any","",416,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"ordering"}}],[11,"cmp","std","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","","",399,null],[11,"cmp","std::option","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","std::result","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"cmp","std::fmt","",122,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"cmp","std","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"cmp","","",310,null],[11,"neg","std::num","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"neg","std","",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"neg","","",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"neg","","",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"neg","","",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"neg","","",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"neg","","",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"neg","","",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"neg","","",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"neg","","",379,null],[11,"neg","","",375,null],[11,"neg","","",376,null],[11,"neg","","",377,null],[11,"neg","","",378,null],[11,"neg","","",388,null],[11,"neg","","",385,null],[11,"neg","","",386,null],[11,"mul_assign","std::num","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","","",189,null],[11,"mul_assign","std","",384,null],[11,"mul_assign","","",380,null],[11,"mul_assign","","",381,null],[11,"mul_assign","","",382,null],[11,"mul_assign","","",383,null],[11,"mul_assign","","",387,null],[11,"mul_assign","","",379,null],[11,"mul_assign","","",375,null],[11,"mul_assign","","",376,null],[11,"mul_assign","","",377,null],[11,"mul_assign","","",378,null],[11,"mul_assign","","",388,null],[11,"mul_assign","","",385,null],[11,"mul_assign","","",386,null],[11,"clone","std::mem","",404,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","std","",398,null],[11,"clone","","",398,null],[11,"clone","std::ptr","",397,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"clone","std::cell","",392,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"clone","","",393,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"clone","std::iter","",323,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"clone","std::option","",343,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::result","",346,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::slice","",359,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",349,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",351,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","","",352,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","std::hash","",407,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","std::num","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"clone","","",413,{"inputs":[{"name":"self"}],"output":{"name":"parsefloaterror"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"clone","","",414,{"inputs":[{"name":"self"}],"output":{"name":"tryfrominterror"}}],[11,"clone","","",415,{"inputs":[{"name":"self"}],"output":{"name":"parseinterror"}}],[11,"clone","std::marker","",410,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"clone","std::ops","",309,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"clone","std::cmp","",4,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","std","Returns a deep copy of the value.",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"clone","","Returns a deep copy of the value.",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"clone","","Returns a deep copy of the value.",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"clone","","Returns a deep copy of the value.",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clone","","Returns a deep copy of the value.",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clone","","Returns a deep copy of the value.",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"clone","","Returns a deep copy of the value.",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","Returns a deep copy of the value.",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"clone","","Returns a deep copy of the value.",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"clone","","Returns a deep copy of the value.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","Returns a deep copy of the value.",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","Returns a deep copy of the value.",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"clone","","Returns a deep copy of the value.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"clone","","Returns a deep copy of the value.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clone","","Returns a deep copy of the value.",310,null],[11,"clone","","Returns a deep copy of the value.",409,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","Returns a deep copy of the value.",395,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"clone","std::any","",416,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"clone","std","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","","",399,null],[11,"clone","std::sync::atomic","",226,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","std::cell","",1,{"inputs":[{"name":"self"}],"output":{"name":"borrowstate"}}],[11,"clone","std::char","",125,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"clone","","",317,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",318,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"clone","","",319,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"clone","","",320,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"clone","std::iter","",321,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"clone","","",322,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"clone","","",324,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"clone","","",325,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"clone","","",326,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"clone","","",327,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"clone","","",328,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"clone","","",329,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","","",330,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"clone","","",331,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","","",332,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"clone","","",333,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"clone","","",334,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"clone","","",335,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"clone","","",336,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"clone","","",337,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"clone","","",338,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"clone","","",339,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"clone","","",340,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"clone","","",341,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","","",342,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"clone","std::option","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",345,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::raw","",67,{"inputs":[{"name":"self"}],"output":{"name":"traitobject"}}],[11,"clone","std::result","",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","std::str::pattern","",88,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","","",400,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","","",401,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","","",402,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","","",403,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","std::str","",116,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","","",354,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","","",355,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","","",356,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",365,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",366,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","","",367,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","","",368,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",369,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","","",370,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","","",371,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","","",372,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","","",373,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","","",374,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","","",357,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","","",358,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","std::hash","",390,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"clone","","",391,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"clone","","",389,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"clone","std::fmt","",122,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","","",408,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","std","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"clone","","",310,null],[11,"sub_assign","std::num","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","","",189,null],[11,"sub_assign","std","",384,null],[11,"sub_assign","","",380,null],[11,"sub_assign","","",381,null],[11,"sub_assign","","",382,null],[11,"sub_assign","","",383,null],[11,"sub_assign","","",387,null],[11,"sub_assign","","",379,null],[11,"sub_assign","","",375,null],[11,"sub_assign","","",376,null],[11,"sub_assign","","",377,null],[11,"sub_assign","","",378,null],[11,"sub_assign","","",388,null],[11,"sub_assign","","",385,null],[11,"sub_assign","","",386,null],[11,"step","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"steps_between","","",384,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"is_negative","","",384,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"replace_zero","","",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_one","","",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"sub_one","","",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steps_between_by_one","","",384,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"steps_between","","",380,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"option"}}],[11,"is_negative","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"replace_zero","","",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"add_one","","",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"sub_one","","",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"steps_between_by_one","","",380,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"option"}}],[11,"step","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"steps_between","","",381,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"option"}}],[11,"is_negative","","",381,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"replace_zero","","",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"add_one","","",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"sub_one","","",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"steps_between_by_one","","",381,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"option"}}],[11,"step","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"steps_between","","",382,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"is_negative","","",382,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"replace_zero","","",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"add_one","","",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"sub_one","","",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"steps_between_by_one","","",382,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"step","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"steps_between","","",379,{"inputs":[{"name":"isize"},{"name":"isize"},{"name":"isize"}],"output":{"name":"option"}}],[11,"is_negative","","",379,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"replace_zero","","",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"add_one","","",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"sub_one","","",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"steps_between_by_one","","",379,{"inputs":[{"name":"isize"},{"name":"isize"}],"output":{"name":"option"}}],[11,"step","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"steps_between","","",375,{"inputs":[{"name":"i8"},{"name":"i8"},{"name":"i8"}],"output":{"name":"option"}}],[11,"is_negative","","",375,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"replace_zero","","",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"add_one","","",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"sub_one","","",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"steps_between_by_one","","",375,{"inputs":[{"name":"i8"},{"name":"i8"}],"output":{"name":"option"}}],[11,"step","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"steps_between","","",376,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"option"}}],[11,"is_negative","","",376,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"replace_zero","","",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"add_one","","",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"sub_one","","",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"steps_between_by_one","","",376,{"inputs":[{"name":"i16"},{"name":"i16"}],"output":{"name":"option"}}],[11,"step","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"steps_between","","",377,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[11,"is_negative","","",377,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"replace_zero","","",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"add_one","","",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"sub_one","","",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"steps_between_by_one","","",377,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[11,"step","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"steps_between","","",383,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"is_negative","","",383,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"replace_zero","","",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"add_one","","",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"sub_one","","",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"steps_between_by_one","","",383,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"step","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"steps_between","","",378,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"option"}}],[11,"is_negative","","",378,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"replace_zero","","",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"add_one","","",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"sub_one","","",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"steps_between_by_one","","",378,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"option"}}],[11,"step","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"steps_between","","",387,{"inputs":[{"name":"u128"},{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"is_negative","","",387,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"replace_zero","","",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"add_one","","",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"sub_one","","",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"steps_between_by_one","","",387,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"step","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"steps_between","","",388,{"inputs":[{"name":"i128"},{"name":"i128"},{"name":"i128"}],"output":{"name":"option"}}],[11,"is_negative","","",388,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace_one","","",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"replace_zero","","",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"add_one","","",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"sub_one","","",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"steps_between_by_one","","",388,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"option"}}],[11,"add_assign","std::num","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","","",189,null],[11,"add_assign","std","",384,null],[11,"add_assign","","",380,null],[11,"add_assign","","",381,null],[11,"add_assign","","",382,null],[11,"add_assign","","",383,null],[11,"add_assign","","",387,null],[11,"add_assign","","",379,null],[11,"add_assign","","",375,null],[11,"add_assign","","",376,null],[11,"add_assign","","",377,null],[11,"add_assign","","",378,null],[11,"add_assign","","",388,null],[11,"add_assign","","",385,null],[11,"add_assign","","",386,null],[11,"hash","std::mem","",404,null],[11,"hash","std","",409,null],[11,"hash","","",395,null],[11,"hash","","",272,null],[11,"hash","","",271,null],[11,"hash","","",398,null],[11,"hash","","",398,null],[11,"hash","std::num","",189,null],[11,"hash","std::marker","",410,null],[11,"hash","std::ops","",309,null],[11,"hash","","",51,null],[11,"hash","","",52,null],[11,"hash","","",53,null],[11,"hash","","",54,null],[11,"hash","","",55,null],[11,"hash","std::cmp","",4,null],[11,"hash","std::any","",416,null],[11,"hash","std","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","","",399,null],[11,"hash","std::option","",69,null],[11,"hash","std::result","",68,null],[11,"hash","std","",380,null],[11,"hash_slice","","",380,null],[11,"hash","","",381,null],[11,"hash_slice","","",381,null],[11,"hash","","",382,null],[11,"hash_slice","","",382,null],[11,"hash","","",383,null],[11,"hash_slice","","",383,null],[11,"hash","","",384,null],[11,"hash_slice","","",384,null],[11,"hash","","",375,null],[11,"hash_slice","","",375,null],[11,"hash","","",376,null],[11,"hash_slice","","",376,null],[11,"hash","","",377,null],[11,"hash_slice","","",377,null],[11,"hash","","",378,null],[11,"hash_slice","","",378,null],[11,"hash","","",379,null],[11,"hash_slice","","",379,null],[11,"hash","","",387,null],[11,"hash_slice","","",387,null],[11,"hash","","",388,null],[11,"hash_slice","","",388,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","","",310,null],[11,"hash","std::fmt","",122,null],[11,"shr_assign","std::num","",189,null],[11,"shr_assign","","",189,null],[11,"shr_assign","","",189,null],[11,"shr_assign","","",189,null],[11,"shr_assign","","",189,null],[11,"shr_assign","","",189,null],[11,"shr_assign","","",189,null],[11,"shr_assign","","",189,null],[11,"shr_assign","","",189,null],[11,"shr_assign","","",189,null],[11,"shr_assign","std","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",380,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",381,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",382,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",383,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",387,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",384,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",375,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",376,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",377,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",378,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",388,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"shr_assign","","",379,null],[11,"sub","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","std","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"sub","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"sub","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"sub","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"sub","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"sub","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"sub","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"sub","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"sub","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"sub","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"sub","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"sub","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"sub","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sub","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sub","","",384,null],[11,"sub","","",384,null],[11,"sub","","",384,null],[11,"sub","","",380,null],[11,"sub","","",380,null],[11,"sub","","",380,null],[11,"sub","","",381,null],[11,"sub","","",381,null],[11,"sub","","",381,null],[11,"sub","","",382,null],[11,"sub","","",382,null],[11,"sub","","",382,null],[11,"sub","","",383,null],[11,"sub","","",383,null],[11,"sub","","",383,null],[11,"sub","","",387,null],[11,"sub","","",387,null],[11,"sub","","",387,null],[11,"sub","","",379,null],[11,"sub","","",379,null],[11,"sub","","",379,null],[11,"sub","","",375,null],[11,"sub","","",375,null],[11,"sub","","",375,null],[11,"sub","","",376,null],[11,"sub","","",376,null],[11,"sub","","",376,null],[11,"sub","","",377,null],[11,"sub","","",377,null],[11,"sub","","",377,null],[11,"sub","","",378,null],[11,"sub","","",378,null],[11,"sub","","",378,null],[11,"sub","","",388,null],[11,"sub","","",388,null],[11,"sub","","",388,null],[11,"sub","","",385,null],[11,"sub","","",385,null],[11,"sub","","",385,null],[11,"sub","","",386,null],[11,"sub","","",386,null],[11,"sub","","",386,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"borrow_mut","","",399,null],[11,"write_str","std::fmt","",427,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",427,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",427,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","std","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitor","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","","",189,null],[11,"bitor","std","",409,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"bitor","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bitor","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"bitor","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"bitor","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"bitor","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitor","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitor","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"bitor","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"bitor","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"bitor","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"bitor","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"bitor","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"bitor","","",409,null],[11,"bitor","","",409,null],[11,"bitor","","",409,null],[11,"bitor","","",384,null],[11,"bitor","","",384,null],[11,"bitor","","",384,null],[11,"bitor","","",380,null],[11,"bitor","","",380,null],[11,"bitor","","",380,null],[11,"bitor","","",381,null],[11,"bitor","","",381,null],[11,"bitor","","",381,null],[11,"bitor","","",382,null],[11,"bitor","","",382,null],[11,"bitor","","",382,null],[11,"bitor","","",383,null],[11,"bitor","","",383,null],[11,"bitor","","",383,null],[11,"bitor","","",387,null],[11,"bitor","","",387,null],[11,"bitor","","",387,null],[11,"bitor","","",379,null],[11,"bitor","","",379,null],[11,"bitor","","",379,null],[11,"bitor","","",375,null],[11,"bitor","","",375,null],[11,"bitor","","",375,null],[11,"bitor","","",376,null],[11,"bitor","","",376,null],[11,"bitor","","",376,null],[11,"bitor","","",377,null],[11,"bitor","","",377,null],[11,"bitor","","",377,null],[11,"bitor","","",378,null],[11,"bitor","","",378,null],[11,"bitor","","",378,null],[11,"bitor","","",388,null],[11,"bitor","","",388,null],[11,"bitor","","",388,null],[11,"default","std::sync::atomic","Creates an `AtomicBool` initialized to `false`.",405,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","Creates a null `AtomicPtr<T>`.",406,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"default","std::cell","Creates a `Cell<T>`, with the `Default` value for T.",392,{"inputs":[],"output":{"name":"cell"}}],[11,"default","","Creates a `RefCell<T>`, with the `Default` value for T.",393,{"inputs":[],"output":{"name":"refcell"}}],[11,"default","","Creates an `UnsafeCell`, with the `Default` value for T.",394,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"default","std::iter","",323,{"inputs":[],"output":{"name":"empty"}}],[11,"default","std::option","Returns None.",69,{"inputs":[],"output":{"name":"option"}}],[11,"default","std","Creates an empty slice.",271,null],[11,"default","","Creates a mutable empty slice.",271,null],[11,"default","","Creates an empty str",272,{"inputs":[],"output":{"name":"str"}}],[11,"default","std::hash","",407,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"default","std::num","",189,{"inputs":[],"output":{"name":"wrapping"}}],[11,"default","std::marker","",410,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"default","std","",310,null],[11,"default","","",409,{"inputs":[],"output":{"name":"bool"}}],[11,"default","","",395,{"inputs":[],"output":{"name":"char"}}],[11,"default","","",384,{"inputs":[],"output":{"name":"usize"}}],[11,"default","","",380,{"inputs":[],"output":{"name":"u8"}}],[11,"default","","",381,{"inputs":[],"output":{"name":"u16"}}],[11,"default","","",382,{"inputs":[],"output":{"name":"u32"}}],[11,"default","","",383,{"inputs":[],"output":{"name":"u64"}}],[11,"default","","",387,{"inputs":[],"output":{"name":"u128"}}],[11,"default","","",379,{"inputs":[],"output":{"name":"isize"}}],[11,"default","","",375,{"inputs":[],"output":{"name":"i8"}}],[11,"default","","",376,{"inputs":[],"output":{"name":"i16"}}],[11,"default","","",377,{"inputs":[],"output":{"name":"i32"}}],[11,"default","","",378,{"inputs":[],"output":{"name":"i64"}}],[11,"default","","",388,{"inputs":[],"output":{"name":"i128"}}],[11,"default","","",385,{"inputs":[],"output":{"name":"f32"}}],[11,"default","","",386,{"inputs":[],"output":{"name":"f64"}}],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","","",399,null],[11,"default","std::sync::atomic","",417,{"inputs":[],"output":{"name":"atomici8"}}],[11,"default","","",418,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"default","","",419,{"inputs":[],"output":{"name":"atomici16"}}],[11,"default","","",420,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"default","","",421,{"inputs":[],"output":{"name":"atomici32"}}],[11,"default","","",422,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"default","","",423,{"inputs":[],"output":{"name":"atomici64"}}],[11,"default","","",424,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"default","","",425,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",426,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","std::hash","",390,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"default","","",391,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"default","","",389,{"inputs":[],"output":{"name":"siphasher"}}],[11,"default","std::fmt","",122,{"inputs":[],"output":{"name":"error"}}],[11,"default","std","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"default","","",310,null],[11,"fmt","std::num","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",398,null],[11,"lt","","",398,null],[11,"le","","",398,null],[11,"gt","","",398,null],[11,"ge","","",398,null],[11,"partial_cmp","","",398,null],[11,"lt","","",398,null],[11,"le","","",398,null],[11,"gt","","",398,null],[11,"ge","","",398,null],[11,"partial_cmp","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"partial_cmp","std","",310,null],[11,"partial_cmp","","",409,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"option"}}],[11,"partial_cmp","std::cell","",392,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"option"}}],[11,"lt","","",392,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",392,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",392,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",392,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",393,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"option"}}],[11,"lt","","",393,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",393,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",393,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",393,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",271,null],[11,"partial_cmp","","",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"partial_cmp","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::marker","",410,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"partial_cmp","std","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"option"}}],[11,"lt","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"le","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"ge","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"gt","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"option"}}],[11,"lt","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"le","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"ge","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"gt","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",395,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"option"}}],[11,"lt","","",395,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"le","","",395,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ge","","",395,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"gt","","",395,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"lt","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"le","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"ge","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gt","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"lt","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"le","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"ge","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"gt","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"lt","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"le","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"ge","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"gt","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"lt","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"le","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"ge","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gt","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"lt","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"le","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"ge","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"gt","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"lt","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"le","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ge","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"gt","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"lt","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"le","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"ge","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"gt","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"lt","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"le","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"ge","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"gt","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"lt","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"le","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"ge","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"gt","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"lt","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"le","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"ge","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"gt","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"lt","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"le","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"ge","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"gt","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"lt","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"le","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"ge","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"gt","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::any","",416,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"option"}}],[11,"lt","","",416,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"le","","",416,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"gt","","",416,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ge","","",416,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","","",399,null],[11,"lt","","",399,null],[11,"le","","",399,null],[11,"ge","","",399,null],[11,"gt","","",399,null],[11,"partial_cmp","std::option","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::result","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::fmt","",122,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"option"}}],[11,"partial_cmp","std","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"partial_cmp","","",310,null],[11,"lt","","",310,null],[11,"le","","",310,null],[11,"ge","","",310,null],[11,"gt","","",310,null],[11,"not","std::num","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","","",189,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"not","std","",409,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"not","","",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"not","","",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"not","","",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"not","","",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"not","","",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"not","","",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"not","","",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"not","","",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"not","","",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"not","","",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"not","","",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"not","","",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"not","","",409,null],[11,"not","","",384,null],[11,"not","","",380,null],[11,"not","","",381,null],[11,"not","","",382,null],[11,"not","","",383,null],[11,"not","","",387,null],[11,"not","","",379,null],[11,"not","","",375,null],[11,"not","","",376,null],[11,"not","","",377,null],[11,"not","","",378,null],[11,"not","","",388,null],[11,"next_back","std::ops","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",322,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",323,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",324,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",325,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",326,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",328,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",329,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",330,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",331,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",333,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",337,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",342,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::option","",343,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",345,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::result","",346,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",347,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",348,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",349,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",352,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",354,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",355,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",356,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",357,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",358,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",359,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",360,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",365,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",366,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",367,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",368,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",371,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",373,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",374,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","std::num","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index_mut","","",271,null],[11,"index_mut","","",272,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",272,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",272,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",272,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",272,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",272,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"zero","","",380,{"inputs":[],"output":{"name":"u8"}}],[11,"zero","","",381,{"inputs":[],"output":{"name":"u16"}}],[11,"zero","","",382,{"inputs":[],"output":{"name":"u32"}}],[11,"zero","","",383,{"inputs":[],"output":{"name":"u64"}}],[11,"zero","","",387,{"inputs":[],"output":{"name":"u128"}}],[11,"zero","","",384,{"inputs":[],"output":{"name":"usize"}}],[11,"zero","","",375,{"inputs":[],"output":{"name":"i8"}}],[11,"zero","","",376,{"inputs":[],"output":{"name":"i16"}}],[11,"zero","","",377,{"inputs":[],"output":{"name":"i32"}}],[11,"zero","","",378,{"inputs":[],"output":{"name":"i64"}}],[11,"zero","","",388,{"inputs":[],"output":{"name":"i128"}}],[11,"zero","","",379,{"inputs":[],"output":{"name":"isize"}}],[11,"zero","","",385,{"inputs":[],"output":{"name":"f32"}}],[11,"zero","","",386,{"inputs":[],"output":{"name":"f64"}}],[11,"index","","",271,null],[11,"index","","",272,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",272,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",272,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",272,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",272,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",272,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"try_from","","",395,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",380,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",381,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",382,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",383,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"u128"}],"output":{"name":"result"}}],[11,"try_from","","",387,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",375,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",376,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",377,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",378,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",388,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"i128"}],"output":{"name":"result"}}],[11,"try_from","","",379,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",384,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"mul","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","","",189,null],[11,"mul","std","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"mul","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"mul","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"mul","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"mul","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"mul","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"mul","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"mul","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"mul","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"mul","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"mul","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"mul","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"mul","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"mul","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"mul","","",384,null],[11,"mul","","",384,null],[11,"mul","","",384,null],[11,"mul","","",380,null],[11,"mul","","",380,null],[11,"mul","","",380,null],[11,"mul","","",381,null],[11,"mul","","",381,null],[11,"mul","","",381,null],[11,"mul","","",382,null],[11,"mul","","",382,null],[11,"mul","","",382,null],[11,"mul","","",383,null],[11,"mul","","",383,null],[11,"mul","","",383,null],[11,"mul","","",387,null],[11,"mul","","",387,null],[11,"mul","","",387,null],[11,"mul","","",379,null],[11,"mul","","",379,null],[11,"mul","","",379,null],[11,"mul","","",375,null],[11,"mul","","",375,null],[11,"mul","","",375,null],[11,"mul","","",376,null],[11,"mul","","",376,null],[11,"mul","","",376,null],[11,"mul","","",377,null],[11,"mul","","",377,null],[11,"mul","","",377,null],[11,"mul","","",378,null],[11,"mul","","",378,null],[11,"mul","","",378,null],[11,"mul","","",388,null],[11,"mul","","",388,null],[11,"mul","","",388,null],[11,"mul","","",385,null],[11,"mul","","",385,null],[11,"mul","","",385,null],[11,"mul","","",386,null],[11,"mul","","",386,null],[11,"mul","","",386,null],[11,"split_at","","",271,null],[11,"iter","","",271,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"split","","",271,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"splitn","","",271,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[11,"rsplitn","","",271,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[11,"windows","","",271,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"chunks","","",271,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"get","","",271,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"first","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_unchecked","","",271,null],[11,"as_ptr","","",271,null],[11,"binary_search_by","","",271,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",271,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_mut","","",271,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"split_at_mut","","",271,null],[11,"iter_mut","","",271,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"last_mut","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"first_mut","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first_mut","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last_mut","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_mut","","",271,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"splitn_mut","","",271,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[11,"rsplitn_mut","","",271,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[11,"chunks_mut","","",271,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"swap","","",271,null],[11,"reverse","","",271,null],[11,"get_unchecked_mut","","",271,null],[11,"as_mut_ptr","","",271,null],[11,"contains","","",271,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"starts_with","","",271,null],[11,"ends_with","","",271,null],[11,"binary_search","","",271,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"result"}}],[11,"clone_from_slice","","",271,null],[11,"copy_from_slice","","",271,null],[11,"binary_search_by_key","","",271,{"inputs":[{"name":"self"},{"name":"q"},{"name":"f"}],"output":{"name":"result"}}],[11,"from_str","","Parse a `bool` from a string.",409,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","Converts a string in base 10 to a float. Accepts an optional decimal exponent.",385,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","Converts a string in base 10 to a float. Accepts an optional decimal exponent.",386,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",379,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",375,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",376,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",377,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",378,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",388,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",384,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",380,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",381,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",382,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",383,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",387,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::mem","",404,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"eq","std","",398,null],[11,"eq","","",398,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","std::cell","",392,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"eq","","",393,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"eq","std","",271,null],[11,"ne","","",271,null],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",413,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",413,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"eq","","",415,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",415,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"eq","std::marker","",410,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"eq","std::ops","",309,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"eq","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","std","",409,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"ne","","",409,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"eq","","",395,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ne","","",395,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"eq","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"ne","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"ne","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"ne","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"ne","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"ne","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"eq","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"ne","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"ne","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"ne","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"ne","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"ne","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"ne","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"eq","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"ne","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"ne","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","std::any","",416,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",416,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"eq","std","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"eq","std::cell","",1,{"inputs":[{"name":"self"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"eq","std::char","",125,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"eq","std::option","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","std::result","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","std::str::pattern","",88,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","std::str","",116,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","std::fmt","",122,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","std","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"get","","",384,null],[11,"get_mut","","",384,null],[11,"get_unchecked","","",384,null],[11,"get_unchecked_mut","","",384,null],[11,"index","","",384,null],[11,"index_mut","","",384,null],[11,"get","std::ops","",51,null],[11,"get_mut","","",51,null],[11,"get_unchecked","","",51,null],[11,"get_unchecked_mut","","",51,null],[11,"index","","",51,null],[11,"index_mut","","",51,null],[11,"get","","",53,null],[11,"get_mut","","",53,null],[11,"get_unchecked","","",53,null],[11,"get_unchecked_mut","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"get","","",52,null],[11,"get_mut","","",52,null],[11,"get_unchecked","","",52,null],[11,"get_unchecked_mut","","",52,null],[11,"index","","",52,null],[11,"index_mut","","",52,null],[11,"get","","",309,null],[11,"get_mut","","",309,null],[11,"get_unchecked","","",309,null],[11,"get_unchecked_mut","","",309,null],[11,"index","","",309,null],[11,"index_mut","","",309,null],[11,"get","","",54,null],[11,"get_mut","","",54,null],[11,"get_unchecked","","",54,null],[11,"get_unchecked_mut","","",54,null],[11,"index","","",54,null],[11,"index_mut","","",54,null],[11,"get","","",55,null],[11,"get_mut","","",55,null],[11,"get_unchecked","","",55,null],[11,"get_unchecked_mut","","",55,null],[11,"index","","",55,null],[11,"index_mut","","",55,null],[11,"bitxor","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","","",189,null],[11,"bitxor","std","",409,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"bitxor","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bitxor","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"bitxor","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"bitxor","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"bitxor","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitxor","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitxor","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"bitxor","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"bitxor","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"bitxor","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"bitxor","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"bitxor","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"bitxor","","",409,null],[11,"bitxor","","",409,null],[11,"bitxor","","",409,null],[11,"bitxor","","",384,null],[11,"bitxor","","",384,null],[11,"bitxor","","",384,null],[11,"bitxor","","",380,null],[11,"bitxor","","",380,null],[11,"bitxor","","",380,null],[11,"bitxor","","",381,null],[11,"bitxor","","",381,null],[11,"bitxor","","",381,null],[11,"bitxor","","",382,null],[11,"bitxor","","",382,null],[11,"bitxor","","",382,null],[11,"bitxor","","",383,null],[11,"bitxor","","",383,null],[11,"bitxor","","",383,null],[11,"bitxor","","",387,null],[11,"bitxor","","",387,null],[11,"bitxor","","",387,null],[11,"bitxor","","",379,null],[11,"bitxor","","",379,null],[11,"bitxor","","",379,null],[11,"bitxor","","",375,null],[11,"bitxor","","",375,null],[11,"bitxor","","",375,null],[11,"bitxor","","",376,null],[11,"bitxor","","",376,null],[11,"bitxor","","",376,null],[11,"bitxor","","",377,null],[11,"bitxor","","",377,null],[11,"bitxor","","",377,null],[11,"bitxor","","",378,null],[11,"bitxor","","",378,null],[11,"bitxor","","",378,null],[11,"bitxor","","",388,null],[11,"bitxor","","",388,null],[11,"bitxor","","",388,null],[11,"len","std::char","",317,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",318,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::iter","",323,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",324,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",325,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",325,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",326,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",326,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",330,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",330,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",333,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",333,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",341,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",341,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",342,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",342,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::slice","",359,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",360,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::str","",356,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",356,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_success","std::result","",68,{"inputs":[{"name":"u"}],"output":{"name":"result"}}],[11,"from_error","","",68,{"inputs":[{"name":"v"}],"output":{"name":"result"}}],[11,"translate","","",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_iter","std::option","Returns a consuming iterator over the possibly contained value.",69,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::result","Returns a consuming iterator over the possibly contained value.",68,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std","",271,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",271,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",399,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"div","std::num","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","","",189,null],[11,"div","std","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"div","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"div","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"div","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"div","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"div","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"div","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"div","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"div","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"div","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"div","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"div","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"div","","",384,null],[11,"div","","",384,null],[11,"div","","",384,null],[11,"div","","",380,null],[11,"div","","",380,null],[11,"div","","",380,null],[11,"div","","",381,null],[11,"div","","",381,null],[11,"div","","",381,null],[11,"div","","",382,null],[11,"div","","",382,null],[11,"div","","",382,null],[11,"div","","",383,null],[11,"div","","",383,null],[11,"div","","",383,null],[11,"div","","",387,null],[11,"div","","",387,null],[11,"div","","",387,null],[11,"div","","",379,null],[11,"div","","",379,null],[11,"div","","",379,null],[11,"div","","",375,null],[11,"div","","",375,null],[11,"div","","",375,null],[11,"div","","",376,null],[11,"div","","",376,null],[11,"div","","",376,null],[11,"div","","",377,null],[11,"div","","",377,null],[11,"div","","",377,null],[11,"div","","",378,null],[11,"div","","",378,null],[11,"div","","",378,null],[11,"div","","",388,null],[11,"div","","",388,null],[11,"div","","",388,null],[11,"div","","",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"div","","",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"div","","",385,null],[11,"div","","",385,null],[11,"div","","",385,null],[11,"div","","",386,null],[11,"div","","",386,null],[11,"div","","",386,null],[11,"product","std::result","",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","std","",375,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"product","","",375,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"product","","",376,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"product","","",376,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"product","","",377,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"product","","",377,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"product","","",378,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"product","","",378,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"product","","",379,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"product","","",379,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"product","","",380,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"product","","",380,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"product","","",381,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"product","","",381,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"product","","",382,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"product","","",382,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"product","","",383,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"product","","",383,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"product","","",384,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"product","","",384,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"product","std::num","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","","",189,{"inputs":[{"name":"i"}],"output":{"name":"wrapping"}}],[11,"product","std","",385,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"product","","",385,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"product","","",386,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"product","","",386,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"build_hasher","std::hash","",407,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"shl","std::num","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","std","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u8"}}],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",380,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u16"}}],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",381,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u32"}}],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",382,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u64"}}],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",383,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u128"}}],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",387,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"usize"}}],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",384,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i8"}}],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",375,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i16"}}],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",376,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i32"}}],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",377,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i64"}}],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",378,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",379,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i128"}}],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"shl","","",388,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"borrow","","",399,null],[11,"as_mut","","",271,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"as_mut","","",399,null],[11,"fmt","","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::num","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref_mut","std::cell","",412,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","std::num","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",413,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",414,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",415,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::cell","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::char","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::str","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::fmt","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std","",409,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",395,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","std::str::pattern","",400,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",400,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",400,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",400,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",401,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",401,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",401,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",401,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",402,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",402,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",402,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",402,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",403,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",403,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",403,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"one","std","",380,{"inputs":[],"output":{"name":"u8"}}],[11,"one","","",381,{"inputs":[],"output":{"name":"u16"}}],[11,"one","","",382,{"inputs":[],"output":{"name":"u32"}}],[11,"one","","",383,{"inputs":[],"output":{"name":"u64"}}],[11,"one","","",387,{"inputs":[],"output":{"name":"u128"}}],[11,"one","","",384,{"inputs":[],"output":{"name":"usize"}}],[11,"one","","",375,{"inputs":[],"output":{"name":"i8"}}],[11,"one","","",376,{"inputs":[],"output":{"name":"i16"}}],[11,"one","","",377,{"inputs":[],"output":{"name":"i32"}}],[11,"one","","",378,{"inputs":[],"output":{"name":"i64"}}],[11,"one","","",388,{"inputs":[],"output":{"name":"i128"}}],[11,"one","","",379,{"inputs":[],"output":{"name":"isize"}}],[11,"one","","",385,{"inputs":[],"output":{"name":"f32"}}],[11,"one","","",386,{"inputs":[],"output":{"name":"f64"}}],[11,"from_iter","std::option","Takes each element in the `Iterator`: if it is `None`, no further elements are taken, and the `None` is returned. Should no `None` occur, a container with the values of each `Option` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"from_iter","std::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"eq","std::char","",121,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"split_whitespace","std","",272,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"is_whitespace","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trim","","",272,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_left","","",272,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_right","","",272,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","std::char","",428,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16error"}}],[11,"next_back","std::str","",429,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","std::char","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",431,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","std::str","",429,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::char","",430,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",431,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",428,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",428,null],[11,"min_value","std","Returns the smallest value that can be represented by this integer type.",379,{"inputs":[],"output":{"name":"isize"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",379,{"inputs":[],"output":{"name":"isize"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",379,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",379,{"inputs":[{"name":"isize"}],"output":{"name":"isize"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",379,{"inputs":[{"name":"isize"}],"output":{"name":"isize"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",379,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",379,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",379,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",379,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",379,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",379,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",379,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",379,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",379,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",379,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",379,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",379,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"abs","","Computes the absolute value of `self`.",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"signum","","Returns a number representing sign of `self`.",379,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",379,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",379,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",375,{"inputs":[],"output":{"name":"i8"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",375,{"inputs":[],"output":{"name":"i8"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",375,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",375,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",375,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",375,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",375,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",375,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",375,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",375,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",375,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",375,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",375,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",375,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",375,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",375,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",375,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"abs","","Computes the absolute value of `self`.",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"signum","","Returns a number representing sign of `self`.",375,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",375,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",375,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",376,{"inputs":[],"output":{"name":"i16"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",376,{"inputs":[],"output":{"name":"i16"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",376,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",376,{"inputs":[{"name":"i16"}],"output":{"name":"i16"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",376,{"inputs":[{"name":"i16"}],"output":{"name":"i16"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",376,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",376,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",376,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",376,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",376,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",376,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",376,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",376,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",376,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",376,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"abs","","Computes the absolute value of `self`.",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"signum","","Returns a number representing sign of `self`.",376,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",376,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",376,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",377,{"inputs":[],"output":{"name":"i32"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",377,{"inputs":[],"output":{"name":"i32"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",377,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",377,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",377,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",377,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",377,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",377,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",377,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",377,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",377,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",377,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",377,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",377,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",377,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",377,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",377,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",377,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",377,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",377,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",377,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",377,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",377,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",377,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"abs","","Computes the absolute value of `self`.",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"signum","","Returns a number representing sign of `self`.",377,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",377,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",377,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",378,{"inputs":[],"output":{"name":"i64"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",378,{"inputs":[],"output":{"name":"i64"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",378,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",378,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",378,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",378,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",378,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",378,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",378,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",378,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",378,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",378,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",378,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",378,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",378,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",378,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",378,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"abs","","Computes the absolute value of `self`.",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"signum","","Returns a number representing sign of `self`.",378,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",378,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",378,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",388,{"inputs":[],"output":{"name":"i128"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",388,{"inputs":[],"output":{"name":"i128"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",388,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",388,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",388,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",388,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",388,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of the type.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of the type.",388,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",388,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",388,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",388,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",388,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",388,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",388,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",388,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",388,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",388,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"abs","","Computes the absolute value of `self`.",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"signum","","Returns a number representing sign of `self`.",388,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",388,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",388,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",384,{"inputs":[],"output":{"name":"usize"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",384,{"inputs":[],"output":{"name":"usize"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",384,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",384,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",384,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",384,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",384,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",384,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",384,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",384,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",384,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",384,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",384,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",384,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",384,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. Unspecified behavior on overflow.",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",384,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",380,{"inputs":[],"output":{"name":"u8"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",380,{"inputs":[],"output":{"name":"u8"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",380,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",380,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",380,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",380,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",380,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",380,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",380,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",380,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",380,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",380,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",380,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",380,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. Unspecified behavior on overflow.",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",380,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",381,{"inputs":[],"output":{"name":"u16"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",381,{"inputs":[],"output":{"name":"u16"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",381,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",381,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",381,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",381,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",381,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",381,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",381,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",381,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",381,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",381,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",381,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",381,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",381,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",381,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",381,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",381,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",381,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",381,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",381,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",381,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",381,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. Unspecified behavior on overflow.",381,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",381,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",382,{"inputs":[],"output":{"name":"u32"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",382,{"inputs":[],"output":{"name":"u32"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",382,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",382,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",382,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",382,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",382,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",382,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",382,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",382,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",382,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",382,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",382,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",382,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",382,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. Unspecified behavior on overflow.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",382,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",383,{"inputs":[],"output":{"name":"u64"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",383,{"inputs":[],"output":{"name":"u64"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",383,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",383,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",383,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",383,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",383,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",383,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",383,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",383,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",383,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",383,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",383,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",383,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",383,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",383,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. Unspecified behavior on overflow.",383,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",383,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",387,{"inputs":[],"output":{"name":"u128"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",387,{"inputs":[],"output":{"name":"u128"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",387,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",387,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",387,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",387,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",387,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None` if underflow occurred.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or overflow occurred.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the operation results in underflow or overflow.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",387,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",387,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",387,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds instead of overflowing.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds instead of overflowing.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric bounds instead of overflowing.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",387,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",387,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",387,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",387,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",387,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",387,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",387,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",387,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",387,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",387,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",387,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",387,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",387,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. Unspecified behavior on overflow.",387,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",387,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_digit","","Checks if a `char` is a digit in the given radix.",395,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_digit","","Converts a `char` to a digit in the given radix.",395,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character as `char`s.",395,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"escape_debug","","Returns an iterator that yields the literal escape code of a character as `char`s.",395,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"escape_default","","Returns an iterator that yields the literal escape code of a character as `char`s.",395,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"len_utf8","","Returns the number of bytes this `char` would need if encoded in UTF-8.",395,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len_utf16","","Returns the number of 16-bit code units this `char` would need if encoded in UTF-16.",395,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer, and then returns the subslice of the buffer that contains the encoded character.",395,null],[11,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer, and then returns the subslice of the buffer that contains the encoded character.",395,null],[11,"is_alphabetic","","Returns true if this `char` is an alphabetic code point, and false if not.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_xid_start","","Returns true if this `char` satisfies the 'XID_Start' Unicode property, and false otherwise.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_xid_continue","","Returns true if this `char` satisfies the 'XID_Continue' Unicode property, and false otherwise.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lowercase","","Returns true if this `char` is lowercase, and false otherwise.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uppercase","","Returns true if this `char` is uppercase, and false otherwise.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_whitespace","","Returns true if this `char` is whitespace, and false otherwise.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","Returns true if this `char` is alphanumeric, and false otherwise.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_control","","Returns true if this `char` is a control code point, and false otherwise.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_numeric","","Returns true if this `char` is numeric, and false otherwise.",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_lowercase","","Returns an iterator that yields the lowercase equivalent of a `char` as one or more `char`s.",395,{"inputs":[{"name":"self"}],"output":{"name":"tolowercase"}}],[11,"to_uppercase","","Returns an iterator that yields the uppercase equivalent of a `char` as one or more `char`s.",395,{"inputs":[{"name":"self"}],"output":{"name":"touppercase"}}],[11,"is_null","","Returns true if the pointer is null.",398,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to the value wrapped in `Some`.",398,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a `count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",398,null],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic. `count` is in units of T; e.g. a `count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",398,null],[11,"as_mut","","Returns `None` if the pointer is null, or else returns a mutable reference to the value wrapped in `Some`.",398,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"of","std::any","Returns the `TypeId` of the type this generic function has been instantiated with.",416,{"inputs":[],"output":{"name":"typeid"}}],[11,"get","std::cell","Returns a copy of the contained value.",392,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `Cell` containing the given value.",392,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",392,{"inputs":[{"name":"self"}],"output":{"name":"unsafecell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",392,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",392,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",392,null],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",392,null],[11,"replace","","Replaces the contained value.",392,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps the value.",392,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",392,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `RefCell` containing `value`.",393,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",393,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",393,{"inputs":[{"name":"self"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",393,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",393,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",393,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",393,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",393,{"inputs":[{"name":"self"}],"output":{"name":"unsafecell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",393,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",393,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",411,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",411,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",412,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",394,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",394,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",394,null],[11,"reverse","std::cmp","Reverse the `Ordering`.",4,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"new","std::hash","Creates a new `SipHasher13` with the two initial keys set to 0.",390,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",390,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",389,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",389,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",391,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",391,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"peek","std::iter","Returns a reference to the next() value without advancing the iterator.",334,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains","std::ops","Examples",51,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the given amount at each iteration.",51,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","Examples",52,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",52,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","Examples",53,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Examples",54,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the given amount at each iteration.",54,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","Examples",55,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"new","std::ptr","Creates a new `Unique`.",396,null],[11,"get","","Dereferences the content.",396,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",396,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `Shared`.",397,null],[11,"as_mut_ptr","","Acquires the underlying pointer as a `*mut` pointer.",397,null],[11,"is_ok","std::result","Returns true if the result is `Ok`.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value, leaving an `Err` value untouched.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value, leaving an `Ok` value untouched.",68,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",68,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`. Else, it returns `optb`.",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`. If the value is an `Err` then it calls `op` with its value.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an `Err`.",68,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_some","std::option","Returns `true` if the option is a `Some` value.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a `default` (if not).",69,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a `default` (if not).",69,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err)`][Err].",69,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err())`][Err].",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",69,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the wrapped value and returns the result.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value.",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value.",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","std::boxed","Allocates memory on the heap and then places `x` into it.",115,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",115,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",115,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","std::rc","Constructs a new `Rc<T>`.",313,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",313,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks whether [`Rc::try_unwrap`][try_unwrap] would return [`Ok`].",313,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",313,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",313,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",313,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",313,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",313,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or [`Weak`][weak] pointers to this inner value.",313,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",313,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",313,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",313,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",315,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades the `Weak` pointer to an [`Rc`][rc], if possible.",315,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_mut","std::borrow","Acquires a mutable reference to the owned form of the data.",72,null],[11,"into_owned","","Extracts the owned data.",72,null],[11,"entry","std::fmt","Adds a new entry to the set output.",432,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",432,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",432,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should *not* contain the sign for the integer, that will be added by this method.",427,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",427,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",427,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",427,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",427,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",427,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",427,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",427,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",427,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",427,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",427,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",427,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",427,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of `fmt::Debug` implementations for structs.",427,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",427,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",427,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",427,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",427,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"field","","Adds a new field to the generated struct output.",433,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",433,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",434,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",434,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",435,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",435,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",435,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",436,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",436,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",436,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_slice","std::slice","View the underlying data as a subslice of the original data.",360,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",359,null],[11,"valid_up_to","std::str","Returns the index in the given string up to which valid UTF-8 was verified.",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",355,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",354,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","std::string","Creates a new empty `String`.",134,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",134,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",134,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",134,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err` if `v` contains any invalid data.",134,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing invalid data with the replacement character (U+FFFD).",134,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",134,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",134,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",134,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",134,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",134,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",134,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",134,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",134,null],[11,"push","","Appends the given `char` to the end of this `String`.",134,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",134,null],[11,"truncate","","Shortens this `String` to the specified length.",134,null],[11,"pop","","Removes the last character from the string buffer and returns it.",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",134,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",134,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",134,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",134,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",134,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",134,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",134,null],[11,"drain","","Create a draining iterator that removes the specified range in the string and yields the removed chars.",134,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",134,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",118,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",118,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"new","std::vec","Constructs a new, empty `Vec<T>`.",131,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",131,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",131,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",131,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",131,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",131,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",131,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",131,null],[11,"as_slice","","Extracts a slice containing the entire vector.",131,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",131,null],[11,"set_len","","Sets the length of a vector.",131,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing it with the last element.",131,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",131,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",131,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",131,null],[11,"dedup_by_key","","Removes consecutive elements in the vector that resolve to the same key.",131,null],[11,"dedup_by","","Removes consecutive elements in the vector according to a predicate.",131,null],[11,"push","","Appends an element to the back of a collection.",131,null],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",131,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items.",131,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",131,null],[11,"len","","Returns the number of elements in the vector.",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",131,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",131,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",131,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",131,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"dedup","","Removes consecutive repeated elements in the vector.",131,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",131,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",297,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",297,null],[11,"unpaired_surrogate","std::char","Returns the unpaired surrogate which caused this error.",121,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"is_nan","std","Returns `true` if this value is `NaN` and false otherwise.",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",385,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",385,null],[11,"floor","","Returns the largest integer less than or equal to a number.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"trunc","","Returns the integer part of a number.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fract","","Returns the fractional part of a number.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if the number is `NAN`.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"signum","","Returns a number that represents the sign of `self`.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"is_sign_positive","","Returns `true` if `self`'s sign bit is positive, including `+0.0` and `INFINITY`.",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sign_negative","","Returns `true` if `self`'s sign is negative, including `-0.0` and `NEG_INFINITY`.",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",385,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"powi","","Raises a number to an integer power.",385,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f32"}}],[11,"powf","","Raises a number to a floating point power.",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sqrt","","Takes the square root of a number.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"exp","","Returns `e^(self)`, (the exponential function).",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"exp2","","Returns `2^(self)`.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ln","","Returns the natural logarithm of the number.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"log","","Returns the logarithm of the number with respect to an arbitrary base.",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"log2","","Returns the base 2 logarithm of the number.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"log10","","Returns the base 10 logarithm of the number.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_degrees","","Converts radians to degrees.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_radians","","Converts degrees to radians.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ldexp","","Constructs a floating point number of `x*2^exp`.",385,{"inputs":[{"name":"f32"},{"name":"isize"}],"output":{"name":"f32"}}],[11,"frexp","","Breaks the number into a normalized fraction and a base-2 exponent, satisfying:",385,null],[11,"next_after","","Returns the next representable floating-point value in the direction of `other`.",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"max","","Returns the maximum of the two numbers.",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"min","","Returns the minimum of the two numbers.",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"abs_sub","","The positive difference of two numbers.",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"cbrt","","Takes the cubic root of a number.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sin","","Computes the sine of a number (in radians).",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"cos","","Computes the cosine of a number (in radians).",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"tan","","Computes the tangent of a number (in radians).",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",385,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",385,null],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"sinh","","Hyperbolic sine function.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"cosh","","Hyperbolic cosine function.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"tanh","","Hyperbolic tangent function.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"asinh","","Inverse hyperbolic sine function.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"acosh","","Inverse hyperbolic cosine function.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"atanh","","Inverse hyperbolic tangent function.",385,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",386,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",386,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",386,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",386,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",386,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",386,null],[11,"floor","","Returns the largest integer less than or equal to a number.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"trunc","","Returns the integer part of a number.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fract","","Returns the fractional part of a number.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if the number is `NAN`.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"signum","","Returns a number that represents the sign of `self`.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_sign_positive","","Returns `true` if `self`'s sign bit is positive, including `+0.0` and `INFINITY`.",386,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_positive","","",386,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sign_negative","","Returns `true` if `self`'s sign is negative, including `-0.0` and `NEG_INFINITY`.",386,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",386,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",386,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"powi","","Raises a number to an integer power.",386,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f64"}}],[11,"powf","","Raises a number to a floating point power.",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sqrt","","Takes the square root of a number.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"exp","","Returns `e^(self)`, (the exponential function).",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"exp2","","Returns `2^(self)`.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ln","","Returns the natural logarithm of the number.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"log","","Returns the logarithm of the number with respect to an arbitrary base.",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"log2","","Returns the base 2 logarithm of the number.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"log10","","Returns the base 10 logarithm of the number.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_degrees","","Converts radians to degrees.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_radians","","Converts degrees to radians.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ldexp","","Constructs a floating point number of `x*2^exp`.",386,{"inputs":[{"name":"f64"},{"name":"isize"}],"output":{"name":"f64"}}],[11,"frexp","","Breaks the number into a normalized fraction and a base-2 exponent, satisfying:",386,null],[11,"next_after","","Returns the next representable floating-point value in the direction of `other`.",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"max","","Returns the maximum of the two numbers.",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"min","","Returns the minimum of the two numbers.",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"abs_sub","","The positive difference of two numbers.",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"cbrt","","Takes the cubic root of a number.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sin","","Computes the sine of a number (in radians).",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"cos","","Computes the cosine of a number (in radians).",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"tan","","Computes the tangent of a number (in radians).",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",386,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",386,null],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"sinh","","Hyperbolic sine function.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"cosh","","Hyperbolic cosine function.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"tanh","","Hyperbolic tangent function.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"asinh","","Inverse hyperbolic sine function.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"acosh","","Inverse hyperbolic cosine function.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"atanh","","Inverse hyperbolic tangent function.",386,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_ascii","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",272,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_ascii_lowercase","","",272,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq_ignore_ascii_case","","",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",272,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",272,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",271,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_ascii_lowercase","","",271,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"eq_ignore_ascii_case","","",271,null],[11,"make_ascii_uppercase","","",271,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",271,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_ascii_lowercase","","",380,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"eq_ignore_ascii_case","","",380,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",380,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",380,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",380,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",395,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"to_ascii_lowercase","","",395,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"eq_ignore_ascii_case","","",395,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",395,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",395,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","std::collections::binary_heap","Creates an empty `BinaryHeap` as a max-heap.",273,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",273,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",273,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",273,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",273,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",273,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",273,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",273,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",273,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",273,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",273,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in an optimized fashion.",273,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in an optimized fashion. The push is done regardless of whether the binary heap was empty.",273,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",273,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",273,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",273,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",273,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",273,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",273,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",273,null],[11,"new","std::collections::btree_map","Makes a new empty BTreeMap with a reasonable choice for B.",284,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",284,null],[11,"get","","Returns a reference to the value corresponding to the key.",284,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",284,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",284,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",284,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",284,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",284,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",284,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",284,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",284,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",284,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",284,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",284,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",284,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",284,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",284,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",284,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",284,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","std::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",290,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",290,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",290,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",290,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",290,null],[11,"contains","","Returns `true` if the set contains a value.",290,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",290,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",290,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",290,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",290,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",290,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",290,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",290,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",290,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}],[11,"new","std::collections::linked_list","Creates an empty `LinkedList`.",294,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",294,null],[11,"iter","","Provides a forward iterator.",294,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",294,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",294,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",294,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",294,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",294,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",294,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",294,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",294,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",294,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"new","std::collections::vec_deque","Creates an empty `VecDeque`.",303,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",303,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",303,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",303,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",303,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",303,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",303,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",303,null],[11,"iter","","Returns a front-to-back iterator.",303,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",303,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",303,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",303,null],[11,"len","","Returns the number of elements in the `VecDeque`.",303,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",303,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",303,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",303,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the sequence is empty.",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the sequence is empty.",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is empty.",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the sequence is empty.",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is empty.",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",303,null],[11,"push_back","","Appends an element to the back of a buffer",303,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if it is empty.",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",303,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",303,null],[11,"retain","","Retains only the elements specified by the predicate.",303,null],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",303,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",303,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements or by appending clones of `value` to the back.",303,null],[11,"pop","std::collections::binary_heap","Removes the peeked value from the heap and returns it.",264,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"key","std::collections::btree_map","Gets a reference to the key in the entry.",283,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_pair","","Deprecated, renamed to `remove_entry`",283,null],[11,"remove_entry","","Take ownership of the key and value from the map.",283,null],[11,"get","","Gets a reference to the value in the entry.",283,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",283,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",283,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",283,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",283,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",282,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",282,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",282,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",102,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",102,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",102,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert_next","std::collections::linked_list","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",292,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",292,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash_map","",437,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",437,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",438,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"fmt","","",438,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",439,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"fmt","","",439,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",440,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",441,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",437,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",437,null],[11,"len","","",437,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",442,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",442,null],[11,"len","","",442,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",442,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",443,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",443,null],[11,"len","","",443,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",443,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",438,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",438,null],[11,"len","","",438,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",439,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",439,null],[11,"len","","",439,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",444,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",444,null],[11,"len","","",444,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",444,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",445,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",445,null],[11,"len","","",445,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",445,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",446,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",446,{"inputs":[{"name":"self"}],"output":null}],[11,"make_place","","",106,{"inputs":[{"name":"self"}],"output":{"name":"entryplace"}}],[11,"pointer","","",446,null],[11,"finalize","","",446,{"inputs":[{"name":"self"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",106,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"key","","Gets a reference to the key in the entry.",440,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_pair","","Deprecated, renamed to `remove_entry`",440,null],[11,"remove_entry","","Take the ownership of the key and value from the map.",440,null],[11,"get","","Gets a reference to the value in the entry.",440,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",440,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself.",440,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",440,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it.",440,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the `VacantEntry`.",441,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",441,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",441,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"clone","","",447,{"inputs":[{"name":"self"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",447,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",447,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"fmt","","",448,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DefaultHasher`.",448,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"default","","Creates a new `DefaultHasher` using [`DefaultHasher::new`]. See [`DefaultHasher::new`] documentation for more information.",448,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"write","","",448,null],[11,"finish","","",448,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"default","","Constructs a new `RandomState`.",447,{"inputs":[],"output":{"name":"randomstate"}}],[11,"fmt","","",447,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash_set","",449,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",449,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",449,null],[11,"len","","",449,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",449,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",450,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",450,null],[11,"len","","",450,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",450,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",451,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",451,null],[11,"len","","",451,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",451,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",452,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"next","","",452,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",452,null],[11,"fmt","","",452,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",453,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"next","","",453,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",453,null],[11,"fmt","","",453,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",454,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",454,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",454,null],[11,"fmt","","",454,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",455,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"fmt","","",455,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",455,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",455,null],[11,"description","std::num","",415,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",414,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",413,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","std::io","",149,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"eq","std","",272,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"as_ref","","",272,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"read","","",271,null],[11,"read_exact","","",271,null],[11,"fill_buf","","",271,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",271,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",271,null],[11,"write_all","","",271,null],[11,"flush","","",271,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",382,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"u32"}}],[11,"from","","",387,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"u128"}}],[11,"to_socket_addrs","","",310,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",310,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",310,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",310,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",272,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",271,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",272,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"new","std::sync","Constructs a new `Arc<T>`.",312,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Returns the contained value, if the `Arc` has exactly one strong reference.",312,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",312,null],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",312,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",312,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",312,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this value.",312,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"ptr_eq","","Returns true if the two `Arc`s point to the same value (not just values that compare as equal).",312,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",312,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Arc` or [`Weak`][weak] pointers to the same value.",312,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Weak<T>`, without an accompanying instance of `T`.",314,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades the `Weak` pointer to an [`Arc`][arc], if possible.",314,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","std::sync::atomic","Creates a new `AtomicBool`.",405,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"get_mut","","Returns a mutable reference to the underlying `bool`.",405,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",405,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"load","","Loads a value from the bool.",405,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",405,null],[11,"swap","","Stores a value into the bool, returning the old value.",405,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",405,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",405,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",405,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",405,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",405,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",405,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",405,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",406,null],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",406,null],[11,"into_inner","","Consumes the atomic and returns the contained value.",406,null],[11,"load","","Loads a value from the pointer.",406,null],[11,"store","","Stores a value into the pointer.",406,null],[11,"swap","","Stores a value into the pointer, returning the old value.",406,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",406,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",406,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",406,null],[11,"new","","Creates a new atomic integer.",417,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",417,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",417,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"load","","Loads a value from the atomic integer.",417,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",417,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",417,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",417,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",417,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",417,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",417,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",417,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",417,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",417,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",417,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"new","","Creates a new atomic integer.",418,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",418,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",418,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"load","","Loads a value from the atomic integer.",418,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",418,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",418,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",418,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",418,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",418,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",418,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",418,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",418,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",418,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",418,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"new","","Creates a new atomic integer.",419,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",419,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",419,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"load","","Loads a value from the atomic integer.",419,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",419,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",419,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",419,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",419,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",419,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",419,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",419,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",419,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",419,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",419,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"new","","Creates a new atomic integer.",420,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",420,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",420,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"load","","Loads a value from the atomic integer.",420,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",420,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",420,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",420,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",420,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",420,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",420,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",420,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",420,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",420,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",420,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"new","","Creates a new atomic integer.",421,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",421,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",421,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"load","","Loads a value from the atomic integer.",421,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",421,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",421,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",421,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",421,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",421,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",421,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",421,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",421,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",421,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",421,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"new","","Creates a new atomic integer.",422,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",422,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",422,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"load","","Loads a value from the atomic integer.",422,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",422,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",422,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",422,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",422,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",422,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",422,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",422,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",422,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",422,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",422,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"new","","Creates a new atomic integer.",423,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",423,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",423,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"load","","Loads a value from the atomic integer.",423,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",423,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",423,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",423,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",423,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",423,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",423,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",423,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",423,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",423,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",423,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"new","","Creates a new atomic integer.",424,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",424,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",424,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load","","Loads a value from the atomic integer.",424,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",424,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",424,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",424,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",424,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",424,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",424,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",424,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",424,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",424,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",424,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"new","","Creates a new atomic integer.",425,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",425,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",425,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"load","","Loads a value from the atomic integer.",425,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",425,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",425,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",425,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",425,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",425,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",425,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",425,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",425,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",425,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",425,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new atomic integer.",426,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",426,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",426,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"load","","Loads a value from the atomic integer.",426,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",426,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",426,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",426,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",426,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",426,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",426,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",426,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",426,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",426,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",426,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}]],"paths":[[8,"Any"],[4,"BorrowState"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Step"],[8,"Extend"],[8,"Iterator"],[8,"Product"],[8,"Sum"],[8,"ExactSizeIterator"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"FromIterator"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"Carrier"],[3,"TraitObject"],[4,"Result"],[4,"Option"],[8,"FnBox"],[8,"ToOwned"],[4,"Cow"],[8,"BorrowMut"],[8,"Borrow"],[8,"Binary"],[8,"LowerExp"],[8,"UpperHex"],[8,"LowerHex"],[8,"Octal"],[8,"UpperExp"],[8,"Display"],[8,"Debug"],[8,"Pointer"],[8,"Write"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"ToString"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Builder"],[3,"ThreadId"],[3,"Thread"],[3,"JoinHandle"],[8,"AsciiExt"],[3,"EscapeDefault"],[4,"Bound"],[4,"Entry"],[8,"RangeArgument"],[3,"HashMap"],[3,"HashSet"],[4,"Entry"],[4,"VarError"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[8,"Error"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"Error"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"CharTryFromError"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Vec"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"ReadDir"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"DirBuilder"],[3,"File"],[3,"DirEntry"],[4,"ErrorKind"],[4,"SeekFrom"],[4,"CharsError"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"Error"],[3,"LineWriter"],[3,"Cursor"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[8,"Read"],[8,"Write"],[8,"Seek"],[8,"BufRead"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[4,"SocketAddr"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"Incoming"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"AddrParseError"],[8,"ToSocketAddrs"],[3,"LookupHost"],[8,"Zero"],[8,"One"],[4,"FpCategory"],[3,"Wrapping"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[3,"stat"],[8,"MetadataExt"],[4,"c_void"],[3,"AssertUnwindSafe"],[4,"Prefix"],[4,"Component"],[3,"PrefixComponent"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Child"],[3,"Output"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Command"],[3,"Stdio"],[3,"ExitStatus"],[4,"Ordering"],[4,"TryLockError"],[3,"SendError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Select"],[3,"Handle"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"RecvError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"OnceState"],[3,"Once"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"PanicInfo"],[3,"Location"],[3,"PeekMut"],[3,"BinaryHeapPlace"],[3,"FrontPlace"],[3,"BackPlace"],[3,"PlaceBack"],[3,"PlaceBack"],[3,"PlaceFront"],[15,"slice"],[15,"str"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeMap"],[3,"Iter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"BTreeSet"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"LinkedList"],[3,"EncodeUtf16"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Drain"],[3,"IterMut"],[3,"ValuesMut"],[3,"IntoIter"],[3,"Range"],[3,"RangeFull"],[15,"tuple"],[3,"IntermediateBox"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"Weak"],[3,"ExchangeHeapSingleton"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"DecodeUtf8"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Split"],[3,"SplitMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Lines"],[3,"LinesAny"],[3,"Iter"],[3,"IterMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[15,"i8"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"isize"],[15,"u8"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"usize"],[15,"f32"],[15,"f64"],[15,"u128"],[15,"i128"],[3,"SipHasher"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"Cell"],[3,"RefCell"],[3,"UnsafeCell"],[15,"char"],[3,"Unique"],[3,"Shared"],[15,"pointer"],[15,"array"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Discriminant"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"BuildHasherDefault"],[3,"Arguments"],[15,"bool"],[3,"PhantomData"],[3,"Ref"],[3,"RefMut"],[3,"ParseFloatError"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"TypeId"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Formatter"],[3,"DecodeUtf16"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugMap"],[3,"DebugList"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[3,"EntryPlace"],[3,"RandomState"],[3,"DefaultHasher"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]};
searchIndex["std_unicode"] = {"doc":"The Unicode Library","items":[[0,"char","std_unicode","A character type.",null,null],[17,"MAX","std_unicode::char","The highest valid code point a `char` can have.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"UNICODE_VERSION","","The version of Unicode that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",null,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16error"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",3,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"str","std_unicode","",null,null],[3,"SplitWhitespace","std_unicode::str","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"Utf16Encoder","","Iterator adaptor for encoding `char`s to UTF-16.",null,null],[8,"UnicodeStr","","Methods for Unicode string slices",null,null],[10,"split_whitespace","","",4,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[10,"is_whitespace","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_alphanumeric","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"trim","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"trim_left","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"trim_right","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"derived_property","std_unicode","",null,null],[5,"Case_Ignorable","std_unicode::derived_property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"Cased","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[0,"property","std_unicode","",null,null],[5,"Pattern_White_Space","std_unicode::property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"clone","std_unicode::str","",5,{"inputs":[{"name":"self"}],"output":{"name":"utf16encoder"}}],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",5,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std_unicode::char","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"count","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"count","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[8,"UnicodeStr"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"DecodeUtf8"],[3,"CharTryFromError"]]};
searchIndex["syntax"] = {"doc":"The Rust parser and macro expander.","items":[[0,"diagnostics","syntax","",null,null],[0,"plugin","syntax::diagnostics","",null,null],[3,"ErrorInfo","syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",0,null],[12,"use_site","","",0,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"metadata","syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",1,null],[12,"use_site","","",1,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",2,null],[12,"line","","",2,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_span","","Create an error location from a span.",2,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"diagnostic_list","syntax","",null,null],[0,"util","","",null,null],[3,"ThinVec","syntax::util","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[3,"RcSlice","","",null,null],[0,"lev_distance","","",null,null],[5,"lev_distance","syntax::util::lev_distance","To find the Levenshtein distance between two strings",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"find_best_match_for_name","","To find the best match for a given string from an iterator of names As a loose rule to avoid the obviously incorrect suggestions, it takes an optional limit for the maximum allowable edit distance, which defaults to one-third of the given word",null,{"inputs":[{"name":"t"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[0,"node_count","syntax::util","",null,null],[3,"NodeCounter","syntax::util::node_count","",null,null],[12,"count","","",3,null],[11,"new","","",3,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",3,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",3,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",3,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",3,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",3,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",3,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",3,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",3,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",3,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",3,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",3,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",3,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",3,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",3,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",3,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",3,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",3,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",3,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",3,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",3,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",3,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",3,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",3,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_path","","",3,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",3,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_parameters","","",3,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",3,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",3,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[0,"parser","syntax::util","",null,null],[4,"AssocOp","syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",4,null],[13,"Subtract","","`-`",4,null],[13,"Multiply","","`*`",4,null],[13,"Divide","","`/`",4,null],[13,"Modulus","","`%`",4,null],[13,"LAnd","","`&&`",4,null],[13,"LOr","","`||`",4,null],[13,"BitXor","","`^`",4,null],[13,"BitAnd","","`&`",4,null],[13,"BitOr","","`|`",4,null],[13,"ShiftLeft","","`<<`",4,null],[13,"ShiftRight","","`>>`",4,null],[13,"Equal","","`==`",4,null],[13,"Less","","`<`",4,null],[13,"LessEqual","","`<=`",4,null],[13,"NotEqual","","`!=`",4,null],[13,"Greater","","`>`",4,null],[13,"GreaterEqual","","`>=`",4,null],[13,"Assign","","`=`",4,null],[13,"Inplace","","`<-`",4,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",4,null],[13,"As","","`as`",4,null],[13,"DotDot","","`..` range",4,null],[13,"DotDotDot","","`...` range",4,null],[13,"Colon","","`:`",4,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",5,null],[13,"Right","","The operator is right-associative",5,null],[13,"None","","The operator is not associative",5,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"from_token","","Create a new AssocOP from a token",4,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",4,{"inputs":[{"name":"binopkind"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fixity","","Gets the fixity of this operator",4,{"inputs":[{"name":"self"}],"output":{"name":"fixity"}}],[11,"is_comparison","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_assign_like","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ast_binop","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"small_vector","syntax::util","",null,null],[6,"SmallVector","syntax::util::small_vector","",null,null],[0,"move_map","syntax::util","",null,null],[8,"MoveMap","syntax::util::move_map","",null,null],[11,"move_map","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"move_flat_map","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"move_flat_map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"clone","syntax::util","",8,{"inputs":[{"name":"self"}],"output":{"name":"thinvec"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",8,null],[11,"extend","","",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rcslice"}}],[11,"new","","",9,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"deref","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","syntax","A JSON emitter for errors.",null,null],[3,"JsonEmitter","syntax::json","",null,null],[11,"stderr","","",10,{"inputs":[{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"basic","","",10,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"new","","",10,{"inputs":[{"name":"box"},{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",10,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[0,"syntax","syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntax::abi","",null,null],[4,"Abi","","",null,null],[13,"Cdecl","","",11,null],[13,"Stdcall","","",11,null],[13,"Fastcall","","",11,null],[13,"Vectorcall","","",11,null],[13,"Aapcs","","",11,null],[13,"Win64","","",11,null],[13,"SysV64","","",11,null],[13,"PtxKernel","","",11,null],[13,"Msp430Interrupt","","",11,null],[13,"X86Interrupt","","",11,null],[13,"Rust","","",11,null],[13,"C","","",11,null],[13,"System","","",11,null],[13,"RustIntrinsic","","",11,null],[13,"RustCall","","",11,null],[13,"PlatformIntrinsic","","",11,null],[13,"Unadjusted","","",11,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"name":"vec"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"data","","",11,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"generic","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ast","syntax","",null,null],[3,"ThinVec","syntax::ast","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[3,"Ident","","An identifier contains a Name (index into the interner table) and a SyntaxContext to track renaming and macro expansion per Flatt et al., \"Macros That Work Together\"",null,null],[12,"name","","",13,null],[12,"ctxt","","",13,null],[3,"Lifetime","","",null,null],[12,"id","","",14,null],[12,"span","","",14,null],[12,"name","","",14,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",15,null],[12,"lifetime","","",15,null],[12,"bounds","","",15,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"span","","",16,null],[12,"segments","","The segments in the path: the things separated by `::`. Global paths begin with `keywords::CrateRoot`.",16,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"identifier","","The identifier portion of this path segment.",17,null],[12,"span","","Span of the segment identifier.",17,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction. The `Option<P<..>>` wrapper is purely a size optimization; `None` is used to represent both `Path` and `Path<>`.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"span","","Overall span",19,null],[12,"inputs","","`(A,B)`",19,null],[12,"output","","`C`",19,null],[3,"NodeId","","",null,null],[3,"TyParam","","",null,null],[12,"attrs","","",20,null],[12,"ident","","",20,null],[12,"id","","",20,null],[12,"bounds","","",20,null],[12,"default","","",20,null],[12,"span","","",20,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",21,null],[12,"ty_params","","",21,null],[12,"where_clause","","",21,null],[12,"span","","",21,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",22,null],[12,"predicates","","",22,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"span","","",23,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",23,null],[12,"bounded_ty","","The type being bounded",23,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",23,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"span","","",24,null],[12,"lifetime","","",24,null],[12,"bounds","","",24,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"id","","",25,null],[12,"span","","",25,null],[12,"lhs_ty","","",25,null],[12,"rhs_ty","","",25,null],[3,"Crate","","",null,null],[12,"module","","",26,null],[12,"attrs","","",26,null],[12,"span","","",26,null],[3,"MetaItem","","A spanned compile-time attribute item.",null,null],[12,"name","","",27,null],[12,"node","","",27,null],[12,"span","","",27,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",28,null],[12,"id","","",28,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",28,null],[12,"span","","",28,null],[3,"Pat","","",null,null],[12,"id","","",29,null],[12,"node","","",29,null],[12,"span","","",29,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",30,null],[12,"pat","","The pattern the field is destructured to",30,null],[12,"is_shorthand","","",30,null],[12,"attrs","","",30,null],[3,"Stmt","","A statement",null,null],[12,"id","","",31,null],[12,"node","","",31,null],[12,"span","","",31,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",32,null],[12,"ty","","",32,null],[12,"init","","Initializer expression to set the value, if any",32,null],[12,"id","","",32,null],[12,"span","","",32,null],[12,"attrs","","",32,null],[3,"Arm","","An arm of a 'match'.",null,null],[12,"attrs","","",33,null],[12,"pats","","",33,null],[12,"guard","","",33,null],[12,"body","","",33,null],[3,"Field","","",null,null],[12,"ident","","",34,null],[12,"expr","","",34,null],[12,"span","","",34,null],[12,"is_shorthand","","",34,null],[12,"attrs","","",34,null],[3,"Expr","","An expression",null,null],[12,"id","","",35,null],[12,"node","","",35,null],[12,"span","","",35,null],[12,"attrs","","",35,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",36,null],[12,"position","","",36,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",37,null],[12,"tts","","",37,null],[3,"MutTy","","",null,null],[12,"ty","","",38,null],[12,"mutbl","","",38,null],[3,"MethodSig","","Represents a method's signature in a trait declaration, or in an implementation.",null,null],[12,"unsafety","","",39,null],[12,"constness","","",39,null],[12,"abi","","",39,null],[12,"decl","","",39,null],[12,"generics","","",39,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",40,null],[12,"ident","","",40,null],[12,"attrs","","",40,null],[12,"node","","",40,null],[12,"span","","",40,null],[3,"ImplItem","","",null,null],[12,"id","","",41,null],[12,"ident","","",41,null],[12,"vis","","",41,null],[12,"defaultness","","",41,null],[12,"attrs","","",41,null],[12,"node","","",41,null],[12,"span","","",41,null],[3,"TypeBinding","","",null,null],[12,"id","","",42,null],[12,"ident","","",42,null],[12,"ty","","",42,null],[12,"span","","",42,null],[3,"Ty","","",null,null],[12,"id","","",43,null],[12,"node","","",43,null],[12,"span","","",43,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",44,null],[12,"abi","","",44,null],[12,"lifetimes","","",44,null],[12,"decl","","",44,null],[3,"InlineAsmOutput","","Inline assembly.",null,null],[12,"constraint","","",45,null],[12,"expr","","",45,null],[12,"is_rw","","",45,null],[12,"is_indirect","","",45,null],[3,"InlineAsm","","Inline assembly.",null,null],[12,"asm","","",46,null],[12,"asm_str_style","","",46,null],[12,"outputs","","",46,null],[12,"inputs","","",46,null],[12,"clobbers","","",46,null],[12,"volatile","","",46,null],[12,"alignstack","","",46,null],[12,"dialect","","",46,null],[12,"expn_id","","",46,null],[3,"Arg","","An argument in a function header.",null,null],[12,"ty","","",47,null],[12,"pat","","",47,null],[12,"id","","",47,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",48,null],[12,"output","","",48,null],[12,"variadic","","",48,null],[3,"Mod","","Module declaration.",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`. For `mod foo;`, the inner span ranges from the first token to the last token in the external file.",49,null],[12,"items","","",49,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",50,null],[12,"items","","",50,null],[3,"EnumDef","","",null,null],[12,"variants","","",51,null],[3,"Variant_","","",null,null],[12,"name","","",52,null],[12,"attrs","","",52,null],[12,"data","","",52,null],[12,"disr_expr","","Explicit discriminant, e.g. `Foo = 1`",52,null],[3,"PathListItem_","","",null,null],[12,"name","","",53,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",53,null],[12,"id","","",53,null],[3,"AttrId","","",null,null],[12,"0","","",54,null],[3,"Attribute","","Meta-data associated with an item Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",55,null],[12,"style","","",55,null],[12,"value","","",55,null],[12,"is_sugared_doc","","",55,null],[12,"span","","",55,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",56,null],[12,"ref_id","","",56,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",57,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",57,null],[12,"span","","",57,null],[3,"StructField","","Field of a struct.",null,null],[12,"span","","",58,null],[12,"ident","","",58,null],[12,"vis","","",58,null],[12,"id","","",58,null],[12,"ty","","",58,null],[12,"attrs","","",58,null],[3,"Item","","An item",null,null],[12,"ident","","",59,null],[12,"attrs","","",59,null],[12,"id","","",59,null],[12,"node","","",59,null],[12,"vis","","",59,null],[12,"span","","",59,null],[3,"ForeignItem","","",null,null],[12,"ident","","",60,null],[12,"attrs","","",60,null],[12,"node","","",60,null],[12,"id","","",60,null],[12,"span","","",60,null],[12,"vis","","",60,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`",61,null],[13,"Parenthesized","","The `(A,B)` and `C` in `Foo(A,B) -> C`",61,null],[4,"TyParamBound","","The AST represents all type param bounds as types. typeck::collect::compute_bounds matches these against the \"special\" built-in traits (see middle::lang_items) and detects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",62,null],[13,"RegionTyParamBound","","",62,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",63,null],[13,"Maybe","","",63,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",64,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",64,null],[13,"EqPredicate","","An equality predicate (unsupported)",64,null],[4,"NestedMetaItemKind","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",65,null],[13,"Literal","","A literal.",65,null],[4,"MetaItemKind","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",66,null],[13,"List","","List meta item.",66,null],[13,"NameValue","","Name value meta item.",66,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",67,null],[13,"ByValue","","",67,null],[4,"RangeEnd","","",null,null],[13,"Included","","",68,null],[13,"Excluded","","",68,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",69,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`), or a unit struct/variant pattern, or a const pattern (in the last two cases the third field must be `None`). Disambiguation cannot be done with parser alone, so it happens during name resolution.",69,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",69,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",69,null],[13,"Path","","A possibly qualified path pattern. Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can only legally refer to associated constants.",69,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",69,null],[13,"Box","","A `box` pattern",69,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",69,null],[13,"Lit","","A literal",69,null],[13,"Range","","A range pattern, e.g. `1...2` or `1..2`",69,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `PatKind::Slice(box [a, b], Some(i), box [y, z])`",69,null],[13,"Mac","","A macro pattern; pre-expansion",69,null],[4,"Mutability","","",null,null],[13,"Mutable","","",70,null],[13,"Immutable","","",70,null],[4,"BinOpKind","","",null,null],[13,"Add","","The `+` operator (addition)",71,null],[13,"Sub","","The `-` operator (subtraction)",71,null],[13,"Mul","","The `*` operator (multiplication)",71,null],[13,"Div","","The `/` operator (division)",71,null],[13,"Rem","","The `%` operator (modulus)",71,null],[13,"And","","The `&&` operator (logical and)",71,null],[13,"Or","","The `||` operator (logical or)",71,null],[13,"BitXor","","The `^` operator (bitwise xor)",71,null],[13,"BitAnd","","The `&` operator (bitwise and)",71,null],[13,"BitOr","","The `|` operator (bitwise or)",71,null],[13,"Shl","","The `<<` operator (shift left)",71,null],[13,"Shr","","The `>>` operator (shift right)",71,null],[13,"Eq","","The `==` operator (equality)",71,null],[13,"Lt","","The `<` operator (less than)",71,null],[13,"Le","","The `<=` operator (less than or equal to)",71,null],[13,"Ne","","The `!=` operator (not equal to)",71,null],[13,"Ge","","The `>=` operator (greater than or equal to)",71,null],[13,"Gt","","The `>` operator (greater than)",71,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",72,null],[13,"Not","","The `!` operator for logical inversion",72,null],[13,"Neg","","The `-` operator for negation",72,null],[4,"StmtKind","","",null,null],[13,"Local","","A local (let) binding.",73,null],[13,"Item","","An item definition.",73,null],[13,"Expr","","Expr without trailing semi-colon.",73,null],[13,"Semi","","",73,null],[13,"Mac","","",73,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };` `foo!(...);`, `foo![...];`",74,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",74,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g. `foo!(...)`. All of these will end up being converted into macro expressions.",74,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",75,null],[13,"Unsafe","","",75,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",76,null],[13,"UserProvided","","",76,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",77,null],[13,"Closed","","Inclusive at the beginning and end",77,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",78,null],[13,"InPlace","","First expr is the place; second expr is the value.",78,null],[13,"Array","","An array (`[a, b, c, d]`)",78,null],[13,"Call","","A function call",78,null],[13,"MethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",78,null],[13,"Tup","","A tuple (`(a, b, c ,d)`)",78,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",78,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",78,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",78,null],[13,"Cast","","A cast (`foo as f64`)",78,null],[13,"Type","","",78,null],[13,"If","","An `if` block, with an optional else block",78,null],[13,"IfLet","","An `if let` expression with an optional else block",78,null],[13,"While","","A while loop, with an optional label",78,null],[13,"WhileLet","","A while-let loop, with an optional label",78,null],[13,"ForLoop","","A for loop, with an optional label",78,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",78,null],[13,"Match","","A `match` block.",78,null],[13,"Closure","","A closure (for example, `move |a, b, c| a + b + c`)",78,null],[13,"Block","","A block (`{ ... }`)",78,null],[13,"Catch","","A catch block (`catch { ... }`)",78,null],[13,"Assign","","An assignment (`a = foo()`)",78,null],[13,"AssignOp","","An assignment with an operator",78,null],[13,"Field","","Access of a named struct field (`obj.foo`)",78,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",78,null],[13,"Index","","An indexing operation (`foo[2]`)",78,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",78,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::<baz>.",78,null],[13,"AddrOf","","A referencing operation (`&a` or `&mut a`)",78,null],[13,"Break","","A `break`, with an optional label to break, and an optional expression",78,null],[13,"Continue","","A `continue`, with an optional label",78,null],[13,"Ret","","A `return`, with an optional value to be returned",78,null],[13,"InlineAsm","","Output of the `asm!()` macro",78,null],[13,"Mac","","A macro invocation; pre-expansion",78,null],[13,"Struct","","A struct literal expression.",78,null],[13,"Repeat","","An array literal constructed from one repeated element.",78,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",78,null],[13,"Try","","`expr?`",78,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",79,null],[13,"Ref","","",79,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",80,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",80,null],[4,"LitIntType","","",null,null],[13,"Signed","","",81,null],[13,"Unsigned","","",81,null],[13,"Unsuffixed","","",81,null],[4,"LitKind","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",82,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",82,null],[13,"Byte","","A byte char (`b'f'`)",82,null],[13,"Char","","A character literal (`'a'`)",82,null],[13,"Int","","An integer literal (`1`)",82,null],[13,"Float","","A float literal (`1f64` or `1E10f64`)",82,null],[13,"FloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",82,null],[13,"Bool","","A boolean literal",82,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",83,null],[13,"Method","","",83,null],[13,"Type","","",83,null],[13,"Macro","","",83,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",84,null],[13,"Method","","",84,null],[13,"Type","","",84,null],[13,"Macro","","",84,null],[4,"IntTy","","",null,null],[13,"Is","","",85,null],[13,"I8","","",85,null],[13,"I16","","",85,null],[13,"I32","","",85,null],[13,"I64","","",85,null],[13,"I128","","",85,null],[4,"UintTy","","",null,null],[13,"Us","","",86,null],[13,"U8","","",86,null],[13,"U16","","",86,null],[13,"U32","","",86,null],[13,"U64","","",86,null],[13,"U128","","",86,null],[4,"FloatTy","","",null,null],[13,"F32","","",87,null],[13,"F64","","",87,null],[4,"TyKind","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length slice (`[T]`)",88,null],[13,"Array","","A fixed length array (`[T; n]`)",88,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",88,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",88,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",88,null],[13,"Never","","The never type (`!`)",88,null],[13,"Tup","","A tuple (`(A, B, C, D,...)`)",88,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",88,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",88,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",88,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",88,null],[13,"Typeof","","Unused for now",88,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",88,null],[13,"ImplicitSelf","","Inferred type of a `self` or `&self` argument in a method.",88,null],[13,"Mac","","",88,null],[4,"AsmDialect","","Inline assembly dialect.",null,null],[13,"Att","","",89,null],[13,"Intel","","",89,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",90,null],[13,"Region","","`&'lt self`, `&'lt mut self`",90,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",90,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",91,null],[13,"Normal","","",91,null],[4,"Constness","","",null,null],[13,"Const","","",92,null],[13,"NotConst","","",92,null],[4,"Defaultness","","",null,null],[13,"Default","","",93,null],[13,"Final","","",93,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",94,null],[13,"Negative","","`impl !Trait for Type`",94,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",95,null],[13,"Ty","","Everything else",95,null],[4,"ViewPath_","","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",96,null],[13,"ViewPathGlob","","`foo::bar::*`",96,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",96,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",97,null],[13,"Inner","","",97,null],[4,"Visibility","","",null,null],[13,"Public","","",98,null],[13,"Crate","","",98,null],[13,"Restricted","","",98,null],[12,"path","syntax::ast::Visibility","",98,null],[12,"id","","",98,null],[13,"Inherited","syntax::ast","",98,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","Struct variant.",99,null],[13,"Tuple","","Tuple variant.",99,null],[13,"Unit","","Unit variant.",99,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",100,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",100,null],[13,"Static","","A static item (`static` or `pub static`).",100,null],[13,"Const","","A constant item (`const` or `pub const`).",100,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",100,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",100,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",100,null],[13,"Ty","","A type alias (`type` or `pub type`).",100,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",100,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",100,null],[13,"Union","","A union definition (`union` or `pub union`).",100,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",100,null],[13,"DefaultImpl","","",100,null],[13,"Impl","","An implementation.",100,null],[13,"Mac","","A macro invocation.",100,null],[13,"MacroDef","","A macro definition.",100,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",101,null],[13,"Static","","A foreign static item (`static ext: u8`), with optional mutability (the boolean is true when mutable)",101,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate, used to drive conditional compilation",null,null],[6,"NestedMetaItem","","A spanned compile-time attribute list item.",null,null],[6,"BinOp","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST node value. Then later, in the renumber pass, we renumber them to have small, positive ids.",null,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"with_empty_ctxt","","",13,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"from_str","","Maps a string to an identifier with an empty syntax context.",13,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[11,"unhygienize","","",13,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","","",16,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"default_to_global","","",16,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"is_global","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","","",17,{"inputs":[{"name":"ident"},{"name":"span"}],"output":{"name":"self"}}],[11,"crate_root","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"into","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"cmp","","",102,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ordering"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",102,{"inputs":[{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"from_u32","","",102,{"inputs":[{"name":"u32"}],"output":{"name":"nodeid"}}],[11,"as_usize","","",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_encode","","",102,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",102,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_lt_parameterized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_for_name","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"default","","Creates an instance of `Generics`.",21,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitemkind"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"nestedmetaitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"nestedmetaitemkind"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"metaitemkind"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"metaitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"metaitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"walk","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"rangeend"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"bool"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"binopkind"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"binopkind"}],"output":{"name":"bool"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"lazy","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shift","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_comparison","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",72,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",72,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"add_trailing_semicolon","","",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"stmtkind"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"macstmtstyle"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"unsafesource"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"encode","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"captureby"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"bool"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"mac_"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","",37,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"litinttype"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"litkind"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_str","","Returns true if this literal is a string and false otherwise.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unsuffixed","","Returns true if this literal has no suffix. Note: this will return true for literals with prefixes such as raw strings and byte strings.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_suffixed","","Returns true if this literal has a suffix.",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",85,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"string"}}],[11,"bit_width","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"uintty"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"ty_to_string","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",86,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"string"}}],[11,"bit_width","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"bit_width","","",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"tykind"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"asmdialect"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmoutput"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"inlineasm"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"selfkind"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_self","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_self","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_self","","",47,{"inputs":[{"name":"explicitself"},{"name":"spannedident"}],"output":{"name":"arg"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_self","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_self","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",95,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"variant_"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"pathlistitem_"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"viewpath_"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","",96,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"attrid"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"structfield"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"encode","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fields","","",99,null],[11,"id","","",99,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"itemkind"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",100,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemkind"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",101,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"attr","syntax","",null,null],[3,"Stability","syntax::attr","Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.",null,null],[12,"level","","",103,null],[12,"feature","","",103,null],[12,"rustc_depr","","",103,null],[3,"RustcDeprecation","","",null,null],[12,"since","","",104,null],[12,"reason","","",104,null],[3,"Deprecation","","",null,null],[12,"since","","",105,null],[12,"note","","",105,null],[4,"InlineAttr","","",null,null],[13,"None","","",106,null],[13,"Hint","","",106,null],[13,"Always","","",106,null],[13,"Never","","",106,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",107,null],[12,"reason","syntax::attr::StabilityLevel","",107,null],[12,"issue","","",107,null],[13,"Stable","syntax::attr","",107,null],[12,"since","syntax::attr::StabilityLevel","",107,null],[4,"ReprAttr","syntax::attr","",null,null],[13,"ReprInt","","",108,null],[13,"ReprExtern","","",108,null],[13,"ReprPacked","","",108,null],[13,"ReprSimd","","",108,null],[4,"IntType","","",null,null],[13,"SignedInt","","",109,null],[13,"UnsignedInt","","",109,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mark_known","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_known","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"name"},{"name":"symbol"}],"output":{"name":"metaitem"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"name"},{"name":"lit"}],"output":{"name":"metaitem"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[5,"mk_list_word_item","","",null,{"inputs":[{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"name"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_name_value_item","","",null,{"inputs":[{"name":"span"},{"name":"name"},{"name":"lit"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_list_item","","",null,{"inputs":[{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[5,"mk_spanned_word_item","","",null,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_inner","","Returns an innter attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_outer","","Returns an outer attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"symbol"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"attribute"}}],[5,"list_contains_name","","",null,null],[5,"contains_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"find_crate_name","","",null,null],[5,"find_export_name_attr","","Find the value of #[export_name=*] attribute and check its validity.",null,null],[5,"contains_extern_indicator","","",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,{"inputs":[{"name":"metaitem"},{"name":"parsesess"},{"name":"option"}],"output":{"name":"bool"}}],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"find_deprecation","","Find the deprecation attribute. `None` if none exists.",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"handler"},{"name":"attribute"}],"output":{"name":"vec"}}],[8,"HasAttrs","","",null,null],[10,"attrs","","",110,null],[10,"map_attrs","","",110,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"meta_item","","Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","Returns the Lit if self is a NestedMetaItemKind::Literal.",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the Span for `self`.",111,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"check_name","","Returns true if this list item is a MetaItem with a name of `name`.",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","Returns the name of the meta item, e.g. `foo` in `#[foo]`, `#[foo=\"bar\"]` and `#[foo(bar)]`, if self is a MetaItem",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_str","","Gets the string value if self is a MetaItem and the MetaItem is a MetaItemKind::NameValue variant containing a string, otherwise None.",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"word","","Returns a MetaItem if self is a MetaItem with Kind Word.",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_meta_item","","Returns `true` if the variant is MetaItem.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_literal","","Returns `true` if the variant is Literal.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_word","","Returns `true` if self is a MetaItem and the meta item is a word.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","Returns `true` if self is a MetaItem and the meta item is a ValueString.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","Returns `true` if self is a MetaItem and the meta item is a list.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"check_name","syntax::ast","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","",55,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"value_str","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",55,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_meta_item_list","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","Indicates if the attribute is a Value String.",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","",27,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"value_str","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",27,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"check_name","","",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_value_str","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"meta","","Extract the MetaItem from inside this Attribute.",55,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a comment like `///` or `/** */`. (Returns self unchanged for non-sugared doc attributes.)",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"clone","syntax::attr","",106,{"inputs":[{"name":"self"}],"output":{"name":"inlineattr"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"encode","","",103,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"encode","","",107,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"encode","","",104,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"rustcdeprecation"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"encode","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"deprecation"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"is_unstable","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",108,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"reprattr"}}],[11,"hash","","",109,null],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",109,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"is_signed","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attrs","syntax::util","",8,null],[11,"map_attrs","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntax::ast","",73,null],[11,"map_attrs","","",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",31,null],[11,"map_attrs","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",59,null],[11,"map_attrs","","",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",35,null],[11,"map_attrs","","",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",32,null],[11,"map_attrs","","",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",60,null],[11,"map_attrs","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",58,null],[11,"map_attrs","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",41,null],[11,"map_attrs","","",41,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",40,null],[11,"map_attrs","","",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",33,null],[11,"map_attrs","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",34,null],[11,"map_attrs","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",30,null],[11,"map_attrs","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",52,null],[11,"map_attrs","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"codemap","syntax","The CodeMap tracks all the source code used within a single crate, mapping from integer byte positions to the original source code location. Each bit of source parsed during crate parsing (typically files, in-memory strings, or various bits of macro expansion) cover a continuous range of bytes in the CodeMap and are represented by FileMaps. Byte positions are stored in `spans` and used pervasively in the compiler. They are absolute positions within the CodeMap, which upon request can be converted to line and column information, source code snippets, etc.",null,null],[3,"Spanned","syntax::codemap","",null,null],[12,"node","","",112,null],[12,"span","","",112,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",113,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",113,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",113,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",114,null],[12,"callee","","Information about the expansion.",114,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[12,"files","","",115,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] <item>",116,null],[13,"MacroBang","","e.g. `format!()`",116,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",116,null],[5,"original_sp","","Return the span itself if it doesn't come from a macro expansion, otherwise return the call site span up to the `enclosing_sp` by following the `expn_info` chain.",null,{"inputs":[{"name":"codemap"},{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[5,"spanned","","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",117,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[10,"abs_path","","Return an absolute path to a file, if possible.",117,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[10,"read_file","","Read the contents of an UTF-8 file into memory.",117,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"expnformat"}}],[11,"hash","","",116,null],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"spanned"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"encode","","",112,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",112,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"nameandspan"}}],[11,"hash","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",113,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"hash","","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"file_exists","","",118,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"abs_path","","",118,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"read_file","","",118,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","",115,{"inputs":[],"output":{"name":"codemap"}}],[11,"with_file_loader","","",115,{"inputs":[{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",115,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",115,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't intend to set the line information yourself, you should use new_filemap_and_lines.",115,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"option"},{"name":"string"}],"output":{"name":"rc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",115,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"},{"name":"str"}],"output":{"name":"rc"}}],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external crate. The source code of such an \"imported filemap\" is not available, but we still know enough to generate accurate debuginfo location information for things inlined from other crates.",115,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"option"},{"name":"usize"},{"name":"vec"},{"name":"vec"}],"output":{"name":"rc"}}],[11,"mk_substr_filename","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",115,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_char_pos_adj","","",115,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"merge_spans","","Returns `Some(span)`, a union of the lhs and rhs span.  The lhs must precede the rhs. If there are gaps between lhs and rhs, the resulting union will cross these gaps. For this to work, the spans have to be:    * the expn_id of both spans much match    * the lhs span needs to end on the same line the rhs span begins    * the lhs span must start at or before the rhs span",115,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_to_string","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_expanded_string","","Returns a formatted string showing the expansion chain of a span",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"source_callee","","Return the source callee.",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_to_filename","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"span_to_lines","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_snippet","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"get_filemap","","",115,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",115,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",115,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"lookup_filemap_idx","","",115,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"usize"}}],[11,"record_expansion","","",115,{"inputs":[{"name":"self"},{"name":"expninfo"}],"output":{"name":"expnid"}}],[11,"with_expn_info","","",115,{"inputs":[{"name":"self"},{"name":"expnid"},{"name":"f"}],"output":{"name":"t"}}],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"count_lines","","",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"macro_backtrace","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"vec"}}],[11,"lookup_char_pos","","",115,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"span_to_lines","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_string","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"macro_backtrace","","",115,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"vec"}}],[11,"merge_spans","","",115,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"option"}}],[0,"config","syntax","",null,null],[3,"StripUnconfigured","syntax::config","A folder that strips out items that do not belong in the current configuration.",null,null],[12,"should_test","","",119,null],[12,"sess","","",119,null],[12,"features","","",119,null],[5,"features","","",null,null],[5,"is_test_or_bench","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[11,"configure","","",119,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"process_cfg_attrs","","",119,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"in_cfg","","",119,null],[11,"configure_foreign_mod","","",119,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"configure_item_kind","","",119,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"configure_expr_kind","","",119,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"exprkind"}}],[11,"configure_expr","","",119,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"configure_stmt","","",119,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"option"}}],[11,"configure_struct_expr_field","","",119,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"option"}}],[11,"configure_pat","","",119,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_foreign_mod","","",119,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_item_kind","","",119,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_expr","","",119,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",119,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_stmt","","",119,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_item","","",119,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",119,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",119,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_mac","","",119,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_pat","","",119,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[0,"entry","syntax","",null,null],[4,"EntryPointType","syntax::entry","",null,null],[13,"None","","",120,null],[13,"MainNamed","","",120,null],[13,"MainAttr","","",120,null],[13,"Start","","",120,null],[13,"OtherMain","","",120,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntax","Feature gating",null,null],[3,"Features","syntax::feature_gate","A set of features to be used by later passes.",null,null],[12,"declared_stable_lang_features","","![feature] attrs for stable language features, for error reporting",121,null],[12,"declared_lib_features","","![feature] attrs for non-language (library) features",121,null],[12,"asm","","",121,null],[12,"concat_idents","","",121,null],[12,"link_args","","",121,null],[12,"log_syntax","","",121,null],[12,"non_ascii_idents","","",121,null],[12,"plugin_registrar","","",121,null],[12,"thread_local","","",121,null],[12,"trace_macros","","",121,null],[12,"intrinsics","","",121,null],[12,"lang_items","","",121,null],[12,"link_llvm_intrinsics","","",121,null],[12,"linkage","","",121,null],[12,"quote","","",121,null],[12,"simd","","",121,null],[12,"rustc_diagnostic_macros","","",121,null],[12,"advanced_slice_patterns","","",121,null],[12,"box_syntax","","",121,null],[12,"placement_in_syntax","","",121,null],[12,"unboxed_closures","","",121,null],[12,"allocator","","",121,null],[12,"fundamental","","",121,null],[12,"main","","",121,null],[12,"needs_allocator","","",121,null],[12,"on_unimplemented","","",121,null],[12,"plugin","","",121,null],[12,"simd_ffi","","",121,null],[12,"start","","",121,null],[12,"structural_match","","",121,null],[12,"panic_runtime","","",121,null],[12,"needs_panic_runtime","","",121,null],[12,"optin_builtin_traits","","",121,null],[12,"macro_reexport","","",121,null],[12,"staged_api","","",121,null],[12,"no_core","","",121,null],[12,"box_patterns","","",121,null],[12,"dropck_parametricity","","",121,null],[12,"dropck_eyepatch","","",121,null],[12,"custom_attribute","","",121,null],[12,"custom_derive","","",121,null],[12,"rustc_attrs","","",121,null],[12,"allow_internal_unstable","","",121,null],[12,"slice_patterns","","",121,null],[12,"associated_consts","","",121,null],[12,"const_fn","","",121,null],[12,"const_indexing","","",121,null],[12,"prelude_import","","",121,null],[12,"default_type_parameter_fallback","","",121,null],[12,"associated_type_defaults","","",121,null],[12,"repr_simd","","",121,null],[12,"cfg_target_feature","","",121,null],[12,"platform_intrinsics","","",121,null],[12,"unwind_attributes","","",121,null],[12,"naked_functions","","",121,null],[12,"no_debug","","",121,null],[12,"omit_gdb_pretty_printer_section","","",121,null],[12,"cfg_target_vendor","","",121,null],[12,"stmt_expr_attributes","","",121,null],[12,"type_ascription","","",121,null],[12,"cfg_target_thread_local","","",121,null],[12,"abi_vectorcall","","",121,null],[12,"inclusive_range_syntax","","",121,null],[12,"exclusive_range_pattern","","",121,null],[12,"specialization","","",121,null],[12,"pub_restricted","","",121,null],[12,"drop_types_in_const","","",121,null],[12,"cfg_target_has_atomic","","",121,null],[12,"conservative_impl_trait","","",121,null],[12,"relaxed_adts","","",121,null],[12,"never_type","","",121,null],[12,"attr_literals","","",121,null],[12,"abi_sysv64","","",121,null],[12,"untagged_unions","","",121,null],[12,"compiler_builtins","","",121,null],[12,"generic_param_attrs","","",121,null],[12,"windows_subsystem","","",121,null],[12,"link_cfg","","",121,null],[12,"use_extern_macros","","",121,null],[12,"loop_break_value","","",121,null],[12,"target_feature","","",121,null],[12,"abi_ptx","","",121,null],[12,"i128_type","","",121,null],[12,"abi_unadjusted","","",121,null],[12,"proc_macro","","",121,null],[12,"struct_field_attributes","","",121,null],[12,"static_nobundle","","",121,null],[12,"abi_msp430_interrupt","","",121,null],[12,"closure_to_fn_coercion","","",121,null],[12,"sanitizer_runtime","","",121,null],[12,"abi_x86_interrupt","","",121,null],[12,"catch_expr","","",121,null],[3,"GatedCfg","","",null,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed by the compiler before the unused_attribute check",122,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler before the unused_attribute check. These attributes will be ignored by the unused_attribute lint",122,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",122,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate, reason and function to check if enabled",123,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",123,null],[4,"Stability","","",null,null],[13,"Unstable","","",124,null],[13,"Deprecated","","",124,null],[4,"GateIssue","","",null,null],[13,"Language","","",125,null],[13,"Library","","",125,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on beta/stable channels.",126,null],[13,"Allow","","Allow features to be activated, as on nightly.",126,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time during the build that feature-related lints are set to warn or above because the build turns on warnings-as-errors and uses lots of unstable features. As a result, this is always required for building Rust itself.",126,null],[5,"deprecated_attributes","","",null,{"inputs":[],"output":{"name":"vec"}}],[5,"is_builtin_attr","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"check_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"parsesess"},{"name":"codemap"},{"name":"features"}],"output":null}],[5,"find_lang_feature_accepted_version","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[5,"get_features","","",null,null],[5,"check_crate","","",null,null],[17,"BUILTIN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_STMT_ATTR_SYNTAX","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DEPR_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DERIVE_UNDERSCORE","","",null,null],[17,"EXPLAIN_PLACEMENT_IN","","",null,null],[17,"CLOSURE_TO_FN_COERCION","","",null,null],[11,"new","","",121,{"inputs":[],"output":{"name":"features"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"attributetype"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"gate","","",127,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"check_and_emit","","",127,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"features"}],"output":null}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"unstablefeatures"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"unstablefeatures"}],"output":{"name":"bool"}}],[11,"hash","","",126,null],[11,"from_environment","","",126,{"inputs":[],"output":{"name":"unstablefeatures"}}],[11,"is_nightly_build","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"fold","syntax","A Folder represents an AST->AST fold; it accepts an AST piece, and returns a piece of the same type. So, for instance, macro expansion is a Folder that walks over an AST and produces another AST.",null,null],[5,"noop_fold_meta_items","syntax::fold","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"fold_thin_attrs","","",null,{"inputs":[{"name":"thinvec"},{"name":"t"}],"output":{"name":"thinvec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_meta_list_item","","",null,{"inputs":[{"name":"nestedmetaitem"},{"name":"t"}],"output":{"name":"nestedmetaitem"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"metaitem"},{"name":"t"}],"output":{"name":"metaitem"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,{"inputs":[{"name":"tokenstream"},{"name":"t"}],"output":{"name":"tokenstream"}}],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_kind","","",null,{"inputs":[{"name":"itemkind"},{"name":"t"}],"output":{"name":"itemkind"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_range_end","","",null,{"inputs":[{"name":"rangeend"},{"name":"t"}],"output":{"name":"rangeend"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_opt_expr","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_exprs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_stmt_kind","","",null,{"inputs":[{"name":"stmtkind"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_vis","","",null,{"inputs":[{"name":"visibility"},{"name":"t"}],"output":{"name":"visibility"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",128,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_meta_items","","",128,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_meta_list_item","","",128,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"nestedmetaitem"}}],[11,"fold_meta_item","","",128,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"metaitem"}}],[11,"fold_view_path","","",128,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_foreign_item","","",128,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fold_item","","",128,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_item_simple","","",128,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_struct_field","","",128,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"structfield"}}],[11,"fold_item_kind","","",128,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_trait_item","","",128,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",128,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_fn_decl","","",128,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_block","","",128,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_stmt","","",128,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_arm","","",128,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_pat","","",128,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_expr","","",128,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_range_end","","",128,{"inputs":[{"name":"self"},{"name":"rangeend"}],"output":{"name":"rangeend"}}],[11,"fold_opt_expr","","",128,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_exprs","","",128,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_ty","","",128,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty_binding","","",128,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"typebinding"}}],[11,"fold_mod","","",128,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_foreign_mod","","",128,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_variant","","",128,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"variant"}}],[11,"fold_ident","","",128,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_usize","","",128,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"fold_path","","",128,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_parameters","","",128,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"fold_angle_bracketed_parameter_data","","",128,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fold_parenthesized_parameter_data","","",128,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fold_local","","",128,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",128,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_lifetime","","",128,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",128,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_attribute","","",128,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"option"}}],[11,"fold_arg","","",128,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"arg"}}],[11,"fold_generics","","",128,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_trait_ref","","",128,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fold_poly_trait_ref","","",128,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fold_variant_data","","",128,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"fold_lifetimes","","",128,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_lifetime_defs","","",128,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_ty_param","","",128,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fold_ty_params","","",128,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_tt","","",128,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"fold_tts","","",128,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"fold_token","","",128,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"token"}}],[11,"fold_interpolated","","",128,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fold_opt_lifetime","","",128,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_opt_bounds","","",128,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_bounds","","",128,{"inputs":[{"name":"self"},{"name":"typarambounds"}],"output":{"name":"typarambounds"}}],[11,"fold_ty_param_bound","","",128,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fold_mt","","",128,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fold_field","","",128,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_where_clause","","",128,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",128,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"fold_vis","","",128,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"new_id","","",128,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"new_span","","",128,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[0,"parse","syntax","The main parser interface",null,null],[3,"ParseSess","syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",129,null],[12,"unstable_features","","",129,null],[12,"config","","",129,null],[12,"missing_fragment_specifiers","","",129,null],[3,"Directory","","",null,null],[12,"path","","",130,null],[12,"ownership","","",130,null],[4,"DirectoryOwnership","","",null,null],[13,"Owned","","",131,null],[13,"UnownedViaBlock","","",131,null],[13,"UnownedViaMod","","",131,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_item_from_source_str","","Parses an item.",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stream_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"parsesess"}],"output":{"name":"tokenstream"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate if the file doesn't exist",null,{"inputs":[{"name":"parsesess"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add the file at the given path to the codemap, and return a parser. On an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"path"},{"name":"directoryownership"},{"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"filemap_to_stream","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"tokenstream"}}],[5,"stream_to_parser","","Given stream and the ParseSess, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"tokenstream"}],"output":{"name":"parser"}}],[5,"char_lit","","Parse a string representing a character literal into its final form. Rather than just accepting/rejecting a given literal, unescapes it as well. Can take any slice prefixed by a character escape. Returns the character and the number of characters consumed.",null,null],[5,"str_lit","","Parse a string representing a string literal into its final form. Does unescaping.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The only operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[0,"parser","","",null,null],[3,"Restrictions","syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",132,null],[12,"token","","the current token:",132,null],[12,"span","","the span of the current token:",132,null],[12,"prev_span","","the span of the previous token:",132,null],[12,"restrictions","","",132,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress extra detail when the same error is seen twice",132,null],[12,"directory","","Used to determine the path to externally loaded source files",132,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the name is not known. This does not change while the parser is descending into modules, and sub-parsers have new values for this name.",132,null],[12,"expected_tokens","","",132,null],[12,"desugar_doc_comments","","",132,null],[12,"cfg_mods","","Whether we should configure out of line modules as we parse.",132,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",133,null],[12,"path_exists","","",133,null],[12,"result","","",133,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",134,null],[12,"directory_ownership","","",134,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",135,null],[12,"help_msg","","",135,null],[4,"PathStyle","","How to parse a path. There are three different kinds of paths, all of which are parsed somewhat differently.",null,null],[13,"Mod","","A path with no type parameters, e.g. `foo::bar::Baz`, used in imports or visibilities.",136,null],[13,"Type","","A path with a lifetime and type parameters, with no double colons before the type parameters; e.g. `foo::bar<'a>::Baz<T>`, used in types. Paths using this style can be passed into macros expecting `path` nonterminals.",136,null],[13,"Expr","","A path with a lifetime and type parameters with double colons before the type parameters; e.g. `foo::bar::<'a>::Baz::<T>`, used in expressions or patterns.",136,null],[4,"SemiColonMode","","",null,null],[13,"Break","","",137,null],[13,"Ignore","","",137,null],[4,"TokenType","","",null,null],[13,"Token","","",138,null],[13,"Keyword","","",138,null],[13,"Operator","","",138,null],[13,"Lifetime","","",138,null],[13,"Ident","","",138,null],[13,"Path","","",138,null],[13,"Type","","",138,null],[4,"Error","","",null,null],[13,"FileNotFoundForModule","","",139,null],[12,"mod_name","syntax::parse::parser::Error","",139,null],[12,"default_path","","",139,null],[12,"secondary_path","","",139,null],[12,"dir_path","","",139,null],[13,"DuplicatePaths","syntax::parse::parser","",139,null],[12,"mod_name","syntax::parse::parser::Error","",139,null],[12,"default_path","","",139,null],[12,"secondary_path","","",139,null],[13,"UselessDocComment","syntax::parse::parser","",139,null],[13,"InclusiveRangeWithNoEnd","","",139,null],[4,"LhsExpr","","",null,null],[13,"NotYetParsed","","",140,null],[13,"AttributesParsed","","",140,null],[13,"AlreadyParsed","","",140,null],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"partial_cmp","","",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"option"}}],[11,"lt","","",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"le","","",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"gt","","",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ge","","",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"cmp","","",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"ordering"}}],[11,"hash","","",141,null],[18,"RESTRICTION_STMT_EXPR","","",141,null],[18,"RESTRICTION_NO_STRUCT_LITERAL","","",141,null],[11,"empty","","Returns an empty set of flags.",141,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",141,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",141,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",141,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",141,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if all of the flags in `other` are contained within `self`.",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",141,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"not","","Returns the complement of this set of flags.",141,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"pathstyle"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"semicolonmode"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"semicolonmode"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"span_err","","",139,{"inputs":[{"name":"self"},{"name":"span"},{"name":"handler"}],"output":{"name":"diagnosticbuilder"}}],[11,"from","","",140,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",140,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"new","","",132,{"inputs":[{"name":"parsesess"},{"name":"tokenstream"},{"name":"option"},{"name":"bool"}],"output":{"name":"self"}}],[11,"token_to_string","","Convert a token to a string using self's reader",132,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self's reader",132,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"this_token_descr","","",132,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unexpected_last","","",132,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"unexpected","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"expect","","Expect and consume the token t. Signal an error if the next token is not t.",132,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible, then consume it; if inedible, then return without consuming anything.  Signal a fatal error if next token is unexpected.",132,null],[11,"parse_ident","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"check","","Check if the next token is `tok`, and return `true` if so.",132,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given token was present, false otherwise.",132,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"check_keyword","","",132,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword","","If the next token is the given keyword, eat it and return true. Otherwise, return false.",132,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword_noexpect","","",132,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"check_contextual_keyword","","",132,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"eat_contextual_keyword","","",132,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"expect_keyword","","If the given word is not a keyword, signal an error. If the next token is not the given word, signal an error. Otherwise, eat it.",132,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"presult"}}],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",132,{"inputs":[{"name":"self"}],"output":null}],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",132,{"inputs":[{"name":"self"}],"output":null}],[11,"expect_no_suffix","","",132,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"option"}],"output":null}],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it with a single > and continue. If a GT is not seen, signal an error.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt_or_return","","",132,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping before the '>'.",132,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt","","",132,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt_or_return","","",132,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees, passes through any errors encountered. Used for error recovery.",132,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",132,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",132,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"vec"}}],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",132,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq","","",132,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"bump","","Advance the parser by one token",132,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when consuming a part of a token. For example a single `<` from `<<`.",132,{"inputs":[{"name":"self"},{"name":"token"},{"name":"bytepos"},{"name":"bytepos"}],"output":null}],[11,"look_ahead","","",132,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[11,"fatal","","",132,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",132,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal_err","","",132,{"inputs":[{"name":"self"},{"name":"span"},{"name":"error"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal_help","","",132,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"bug","","",132,null],[11,"warn","","",132,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"span_warn","","",132,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err","","",132,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err_help","","",132,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_bug","","",132,null],[11,"abort_if_errors","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"diagnostic","","",132,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function type?",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_lifetime","","",132,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"parse_for_in_type","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_impl_trait_type","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty_path","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",132,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"parse_unsafety","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_trait_item","","Parse the items in a trait declaration",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_trait_items","","Parse the items in a trait declaration",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty","","Parse a type.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty_no_plus","","Parse a type in restricted contexts where `+` is not permitted. Example 1: `&'a TYPE`     `+` is prohibited to maintain operator priority (P(+) < P(&)). Example 2: `value1 as TYPE + value2`     `+` is prohibited to avoid interactions with expression grammar.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_borrowed_pointee","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ptr","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"is_named_argument","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require identifier names.",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_arg","","Parse a single function argument",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"maybe_parse_fixed_length_of_vec","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lit","","Matches lit = true | false | token_lit",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_pat_literal_maybe_minus","","matches '-' lit | lit",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segment_ident","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_qualified_path","","Parses qualified path.",132,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"presult"}}],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the mode. The `mode` parameter determines whether lifetimes, types, and/or bounds are permitted and whether `::` must precede type parameter groups.",132,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"presult"}}],[11,"parse_path_segments_without_colons","","Examples: - `a::b<T,U>::c<V,W>` - `a::b<T,U>::c(V) -> W` - `a::b<T,U>::c(V)`",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segments_with_colons","","Examples: - `a::b::<T,U>::c`",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segments_without_types","","Examples: - `a::b::c`",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"eat_lifetime","","Parse single lifetime 'a or nothing.",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_mutability","","Parse mutability (`mut` or nothing).",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_field_name","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_field","","Parse ident (COLON expr)?",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"mk_expr","","",132,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"},{"name":"exprkind"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"mk_unary","","",132,{"inputs":[{"name":"self"},{"name":"unop"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_binary","","",132,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_call","","",132,{"inputs":[{"name":"self"},{"name":"p"},{"name":"vec"}],"output":{"name":"exprkind"}}],[11,"mk_index","","",132,{"inputs":[{"name":"self"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_range","","",132,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"rangelimits"}],"output":{"name":"presult"}}],[11,"mk_field","","",132,{"inputs":[{"name":"self"},{"name":"p"},{"name":"spannedident"}],"output":{"name":"exprkind"}}],[11,"mk_tup_field","","",132,{"inputs":[{"name":"self"},{"name":"p"},{"name":"spanned"}],"output":{"name":"exprkind"}}],[11,"mk_assign_op","","",132,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_mac_expr","","",132,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"},{"name":"mac_"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"mk_lit_u32","","",132,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"parse_block_expr","","Parse a block or unsafe block",132,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"blockcheckmode"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",132,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr_with","","",132,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"check_unknown_macro_variable","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"parse_token_tree","","parse a single token tree from the input.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_all_token_trees","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",132,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr","","Parse an associative expression",132,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",132,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"lhsexpr"}],"output":{"name":"presult"}}],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",132,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",132,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_lambda_expr","","",132,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"captureby"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_else_expr","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",132,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",132,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",132,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_loop_expr","","",132,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_catch_expr","","Parse a `do catch {...}` expression (`do catch` token already eaten)",132,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_arm","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_expr","","Parse an expression",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"with_res","","Evaluate the closure with restrictions in place.",132,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"f"}],"output":{"name":"t"}}],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",132,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_pat","","Parse a pattern.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_stmt","","Parse a statement. This stops just before trailing semicolons on everything but items. e.g. a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_block","","Parse a block. No inner attrs are allowed.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_full_stmt","","Parse a statement, including the trailing semicolon.",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_generic_params","","Parses (possibly empty) list of lifetime and type parameters, possibly including trailing comma and erroneous trailing attributes.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where clauses are not parsed here, and must be added later via `parse_where_clause()`.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_fn_front_matter","","parses all the \"front matter\" for a `fn` declaration, up to and including the `fn` keyword:",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_impl_item","","Parse an impl item.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_record_struct_body","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_tuple_struct_body","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_single_struct_field","","Parse a structure field declaration",132,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"submod_path_from_attr","","",132,null],[11,"default_submod_path","","Returns either a path to a module, or .",132,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main entry point for the parser.",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_optional_str","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"lexer","syntax::parse","",null,null],[3,"TokenAndSpan","syntax::parse::lexer","",null,null],[12,"tok","","",142,null],[12,"sp","","",142,null],[3,"StringReader","","",null,null],[12,"sess","","",143,null],[12,"next_pos","","The absolute offset within the codemap of the next character to read",143,null],[12,"pos","","The absolute offset within the codemap of the current character",143,null],[12,"col","","The column of the next character to read",143,null],[12,"ch","","The current character (which has been read from self.pos)",143,null],[12,"filemap","","",143,null],[12,"terminator","","If Some, stop reading the source at this position (inclusive).",143,null],[12,"save_new_lines_and_multibyte","","Whether to record new-lines and multibyte chars in filemap. This is only necessary the first time a filemap is lexed. If part of a filemap is being re-lexed, this should be set to false.",143,null],[12,"peek_tok","","",143,null],[12,"peek_span","","",143,null],[12,"fatal_errs","","",143,null],[5,"is_pattern_whitespace","","",null,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntax::parse::lexer::comments","",null,null],[12,"style","","",144,null],[12,"lines","","",144,null],[12,"pos","","",144,null],[3,"Literal","","",null,null],[12,"lit","","",145,null],[12,"pos","","",145,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",146,null],[13,"Trailing","","Code exists to the left of the comment",146,null],[13,"Mixed","","Code before /* foo */ and after the comment",146,null],[13,"BlankLine","","Just a manual blank line \"\\n\\n\", for layout",146,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"commentstyle"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"parse_all_token_trees","syntax::parse::lexer","",143,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"real_token","","",143,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",143,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_fatal_errors","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",143,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"new_raw","","For comments.rs, which hackily pokes into next_pos and ch",143,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"self"}}],[11,"new","","",143,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"self"}}],[11,"retokenize","","",143,{"inputs":[{"name":"parsesess"},{"name":"span"}],"output":{"name":"self"}}],[11,"ch_is","","",143,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fatal_span","","Report a fatal lexical error with a given span.",143,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err_span","","Report a lexical error with a given span.",143,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start` up to but excluding `self.pos`, meaning the slice does not include the character `self.ch`.",143,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"f"}],"output":{"name":"t"}}],[11,"name_from","","Create a Name from a given offset to the current offset, each adjusted 1 towards each other (assumes that on either side there is a single-byte delimiter).",143,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"name_from_to","","As name_from, with an explicit endpoint.",143,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"bump","","Advance the StringReader by one character. If a newline is discovered, add it to the FileMap's list of line start offsets.",143,{"inputs":[{"name":"self"}],"output":null}],[11,"nextch","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nextch_is","","",143,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"nextnextch","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nextnextch_is","","",143,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[0,"token","syntax::parse","",null,null],[4,"BinOpToken","syntax::parse::token","",null,null],[13,"Plus","","",147,null],[13,"Minus","","",147,null],[13,"Star","","",147,null],[13,"Slash","","",147,null],[13,"Percent","","",147,null],[13,"Caret","","",147,null],[13,"And","","",147,null],[13,"Or","","",147,null],[13,"Shl","","",147,null],[13,"Shr","","",147,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",148,null],[13,"Bracket","","A square bracket: `[` or `]`",148,null],[13,"Brace","","A curly brace: `{` or `}`",148,null],[13,"NoDelim","","An empty delimiter",148,null],[4,"Lit","","",null,null],[13,"Byte","","",149,null],[13,"Char","","",149,null],[13,"Integer","","",149,null],[13,"Float","","",149,null],[13,"Str_","","",149,null],[13,"StrRaw","","",149,null],[13,"ByteStr","","",149,null],[13,"ByteStrRaw","","",149,null],[4,"Token","","",null,null],[13,"Eq","","",150,null],[13,"Lt","","",150,null],[13,"Le","","",150,null],[13,"EqEq","","",150,null],[13,"Ne","","",150,null],[13,"Ge","","",150,null],[13,"Gt","","",150,null],[13,"AndAnd","","",150,null],[13,"OrOr","","",150,null],[13,"Not","","",150,null],[13,"Tilde","","",150,null],[13,"BinOp","","",150,null],[13,"BinOpEq","","",150,null],[13,"At","","",150,null],[13,"Dot","","",150,null],[13,"DotDot","","",150,null],[13,"DotDotDot","","",150,null],[13,"Comma","","",150,null],[13,"Semi","","",150,null],[13,"Colon","","",150,null],[13,"ModSep","","",150,null],[13,"RArrow","","",150,null],[13,"LArrow","","",150,null],[13,"FatArrow","","",150,null],[13,"Pound","","",150,null],[13,"Dollar","","",150,null],[13,"Question","","",150,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",150,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",150,null],[13,"Literal","","",150,null],[13,"Ident","","",150,null],[13,"Underscore","","",150,null],[13,"Lifetime","","",150,null],[13,"Interpolated","","",150,null],[13,"DocComment","","Doc comment",150,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",150,null],[13,"Whitespace","","Whitespace",150,null],[13,"Comment","","Comment",150,null],[13,"Shebang","","",150,null],[13,"Eof","","",150,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",151,null],[13,"NtBlock","","",151,null],[13,"NtStmt","","",151,null],[13,"NtPat","","",151,null],[13,"NtExpr","","",151,null],[13,"NtTy","","",151,null],[13,"NtIdent","","",151,null],[13,"NtMeta","","Stuff inside brackets for attributes",151,null],[13,"NtPath","","",151,null],[13,"NtTT","","",151,null],[13,"NtArm","","",151,null],[13,"NtImplItem","","",151,null],[13,"NtTraitItem","","",151,null],[13,"NtGenerics","","",151,null],[13,"NtWhereClause","","",151,null],[13,"NtArg","","",151,null],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"encode","","",147,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",147,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",147,null],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"encode","","",148,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",148,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",148,null],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",148,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"encode","","",149,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",149,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",149,null],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"short_name","","",149,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"encode","","",150,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",150,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",150,null],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_like_gt","","Returns `true` if the token starts with '>'.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_begin_type","","Returns `true` if the token can appear at the start of a type.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lit","","Returns `true` if the token is any literal",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ident","","Returns `true` if the token is an identifier.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_doc_comment","","Returns `true` if the token is a documentation comment.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_interpolated","","Returns `true` if the token is interpolated.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path","","Returns `true` if the token is an interpolated path.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_qpath_start","","",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path_start","","",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",150,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_path_segment_keyword","","",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"nonterminal"}}],[11,"encode","","",151,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",151,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"hash","","",151,null],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"attr","syntax::parse","",null,null],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should be preceded by an exclamation mark, but we accept and warn about one terminated by a semicolon. matches inner_attrs*",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_meta_item","","Per RFC#1559, matches the following grammar:",132,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"common","syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntax::parse::common","SeqSep : a sequence separator (token) and whether a trailing separator is allowed.",null,null],[12,"sep","","",152,null],[12,"trailing_sep_allowed","","",152,null],[11,"trailing_allowed","","",152,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",152,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntax::parse::classify","Does this expression require a semicolon to be treated as a statement? The negation of this: 'can this expression be used as a statement without a semicolon' -- is used as an early-bail-out in the parser so that, for instance,     if true {...} else {...}      |x| 5 isn't parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"expr_is_simple_block","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it. note that in one case (stmt_semi), we've already seen the semicolon, and thus don't need another.",null,{"inputs":[{"name":"stmtkind"}],"output":{"name":"bool"}}],[0,"obsolete","syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of these syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",153,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[10,"report","","",153,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"obsoletesyntax"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"hash","","",154,null],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",132,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[11,"report","","",132,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[6,"PResult","syntax::parse","",null,null],[11,"new","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"with_span_handler","","",129,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",129,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"directory"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"directoryownership"}}],[0,"ptr","syntax","The AST pointer",null,null],[3,"P","syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P<T>` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"hash","","",155,null],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"lt","","",155,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"le","","",155,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"gt","","",155,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ge","","",155,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"cmp","","",155,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"ordering"}}],[11,"and_then","","Move out of the pointer. Intended for chaining transformations not covered by `map`.",155,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"unwrap","","Equivalent to and_then(|x| x)",155,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",155,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",155,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",155,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",155,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",155,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",155,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",155,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","Creates an empty `P<[T]>`.",155,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"from","","",155,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",155,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",155,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",155,null],[11,"encode","","",155,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",155,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"show_span","syntax","Span debugger",null,null],[5,"run","syntax::show_span","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntax","",null,null],[5,"injected_crate_name","syntax::std_inject","",null,{"inputs":[{"name":"crate"}],"output":{"name":"option"}}],[5,"maybe_inject_crates_ref","","",null,{"inputs":[{"name":"parsesess"},{"name":"crate"},{"name":"option"}],"output":{"name":"crate"}}],[0,"str","syntax","",null,null],[5,"char_at","syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[0,"symbol","syntax","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e. given a value, one can easily find the type, and vice versa.",null,null],[3,"Symbol","syntax::symbol","A symbol is an interned or gensymed string.",null,null],[3,"Interner","","",null,null],[3,"InternedString","","Represents a string stored in the thread-local interner. Because the interner lives for the life of the thread, this can be safely treated as an immortal string, as long as it never crosses between threads.",null,null],[0,"keywords","","",null,null],[3,"Keyword","syntax::symbol::keywords","",null,null],[17,"Invalid","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Default","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[17,"Catch","","",null,null],[17,"CrateRoot","","",null,null],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ident","","",156,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"name","","",156,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"clone","syntax::symbol","",157,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"option"}}],[11,"lt","","",157,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"le","","",157,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"gt","","",157,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ge","","",157,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"cmp","","",157,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"ordering"}}],[11,"hash","","",157,null],[11,"intern","","Maps a string to its interned representation.",157,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"gensym","","gensym's a new usize, using the current interner.",157,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"as_str","","",157,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"as_u32","","",157,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",157,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",157,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"interner"}}],[11,"new","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"intern","","",158,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"symbol"}}],[11,"get","","",158,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"str"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"hash","","",159,null],[11,"partial_cmp","","",159,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"option"}}],[11,"lt","","",159,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",159,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",159,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",159,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"cmp","","",159,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"deref","","",159,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",159,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",159,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"test","syntax","",null,null],[5,"modify_for_testing","syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"resolver"},{"name":"bool"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"tokenstream","syntax","Token Streams",null,null],[3,"Delimited","syntax::tokenstream","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",160,null],[12,"tts","","The delimited sequence of token trees",160,null],[3,"TokenStream","","Token Streams",null,null],[3,"Cursor","","",null,null],[3,"ThinTokenStream","","The `TokenStream` type is large enough to represent a single `TokenTree` without allocation. `ThinTokenStream` is smaller, but needs to allocate to represent a single `TokenTree`. We must use `ThinTokenStream` in `TokenTree::Delimited` to avoid infinite size due to recursion.",null,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",161,null],[13,"Delimited","","A delimited sequence of token trees",161,null],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"encode","","",160,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",160,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",160,null],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_token","","Returns the opening delimiter as a token.",160,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"close_token","","Returns the closing delimiter as a token.",160,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"open_tt","","Returns the opening delimiter as a token tree.",160,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"close_tt","","Returns the closing delimiter as a token tree.",160,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"stream","","Returns the token trees inside the delimiters.",160,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"encode","","",161,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",161,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"parse","","Use this token tree as a matcher to parse given tts.",161,null],[11,"eq_unspanned","","Check if this TokenTree is equal to the other, regardless of span information.",161,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"span","","Retrieve the TokenTree's span.",161,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq_token","","Indicates if the stream is a token that is equal to the provided token.",161,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",162,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",162,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"empty","","",162,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",162,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"concat","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"trees","","",162,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"into_trees","","",162,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"eq_unspanned","","Compares two TokenStreams, checking equality without regarding span information.",162,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"next","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"original_stream","","",163,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"look_ahead","","",163,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"thintokenstream"}}],[11,"from","","",164,{"inputs":[{"name":"tokenstream"}],"output":{"name":"thintokenstream"}}],[11,"from","","",162,{"inputs":[{"name":"thintokenstream"}],"output":{"name":"tokenstream"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"thintokenstream"}],"output":{"name":"bool"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",162,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",162,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",162,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"encode","","",164,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",164,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",164,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"visit","syntax","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[4,"FnKind","syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",165,null],[13,"Method","","fn foo(&self)",165,null],[13,"Closure","","|x, y| body",165,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_sp_ident","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",166,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_ident","","",166,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",166,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",166,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",166,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",166,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",166,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",166,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",166,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",166,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",166,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_post","","",166,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",166,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",166,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_where_predicate","","",166,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[11,"visit_fn","","",166,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",166,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",166,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",166,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",166,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",166,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",166,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",166,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",166,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",166,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",166,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",166,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",166,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_path","","",166,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",166,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_segment","","",166,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",166,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",166,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",166,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_vis","","",166,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_fn_ret_ty","","",166,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[0,"print","syntax","",null,null],[0,"pp","syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton's Mesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","",null,null],[12,"out","","",167,null],[4,"Breaks","","How to break. Described in more detail in the module docs.",null,null],[13,"Consistent","","",168,null],[13,"Inconsistent","","",168,null],[4,"Token","","",null,null],[13,"String","","",169,null],[13,"Break","","",169,null],[13,"Begin","","",169,null],[13,"End","","",169,null],[13,"Eof","","",169,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",170,null],[13,"Broken","","",170,null],[5,"mk_printer","","",null,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[5,"rbox","","\"raw box\"",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[5,"ibox","","Inconsistent breaking box",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"cbox","","Consistent breaking box",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"break_offset","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[5,"end","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"eof","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"huge_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"zero_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"spaces","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"zerobreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"space","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak_tok_offset","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[5,"hardbreak_tok","","",null,{"inputs":[],"output":{"name":"token"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"breaks"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"breaktoken"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"begintoken"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"is_eof","","",169,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hardbreak_tok","","",169,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"printstackbreak"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"last_token","","",167,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"replace_last_token","","be very careful with this!",167,{"inputs":[{"name":"self"},{"name":"token"}],"output":null}],[11,"pretty_print","","",167,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_stream","","",167,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"scan_push","","",167,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"scan_pop","","",167,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_top","","",167,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_pop_bottom","","",167,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_right","","",167,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_left","","",167,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"check_stack","","",167,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"print_newline","","",167,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"indent","","",167,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"get_top","","",167,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"print_str","","",167,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"print","","",167,{"inputs":[{"name":"self"},{"name":"token"},{"name":"isize"}],"output":{"name":"result"}}],[0,"pprust","syntax::print","",null,null],[3,"NoAnn","syntax::print::pprust","",null,null],[3,"CurrentCommentAndLiteral","","",null,null],[12,"cur_cmnt","","",174,null],[12,"cur_lit","","",174,null],[3,"State","","",null,null],[12,"s","","",175,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",176,null],[13,"NodeName","","",176,null],[13,"NodeBlock","","",176,null],[13,"NodeItem","","",176,null],[13,"NodeSubItem","","",176,null],[13,"NodeExpr","","",176,null],[13,"NodePat","","",176,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that it can scan the input text for comments and literals to copy forward.",null,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_list_item_to_string","","",null,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"INDENT_UNIT","","",null,null],[17,"DEFAULT_COLUMNS","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",177,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",177,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[8,"PrintState","","",null,null],[10,"writer","","",178,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[10,"boxes","","",178,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"comments","","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"cur_cmnt_and_lit","","",178,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[10,"literals","","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"word_space","","",178,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"popen","","",178,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pclose","","",178,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_begin","","",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_end","","",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bol","","",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hardbreak_if_not_bol","","",178,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"rbox","","",178,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[11,"ibox","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"end","","",178,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"commasep","","",178,null],[11,"next_lit","","",178,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"maybe_print_comment","","",178,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"print_comment","","",178,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"result"}}],[11,"next_comment","","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_literal","","",178,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"result"}}],[11,"print_string","","",178,{"inputs":[{"name":"self"},{"name":"str"},{"name":"strstyle"}],"output":{"name":"result"}}],[11,"print_inner_attributes","","",178,null],[11,"print_inner_attributes_no_trailing_hardbreak","","",178,null],[11,"print_outer_attributes","","",178,null],[11,"print_inner_attributes_inline","","",178,null],[11,"print_outer_attributes_inline","","",178,null],[11,"print_either_attributes","","",178,null],[11,"print_attribute","","",178,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"result"}}],[11,"print_attribute_inline","","",178,{"inputs":[{"name":"self"},{"name":"attribute"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_meta_list_item","","",178,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"result"}}],[11,"print_meta_item","","",178,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"space_if_not_bol","","",178,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"nbsp","","",178,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"noann"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"new_from_input","","",175,{"inputs":[{"name":"codemap"},{"name":"parsesess"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",175,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",175,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[11,"boxes","","",175,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"comments","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",175,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cbox","","",175,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"word_nbsp","","",175,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",175,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",175,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bclose_","","",175,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",175,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",175,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"break_offset_if_not_bol","","",175,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",175,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",175,null],[11,"commasep_exprs","","",175,null],[11,"print_mod","","",175,null],[11,"print_foreign_mod","","",175,null],[11,"print_opt_lifetime","","",175,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",175,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",175,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",175,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_enum_def","","",175,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",175,null],[11,"print_visibility","","",175,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",175,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be meaning-preserving. A quick hack that might help would be to look at the spans embedded in the TTs to decide where to put spaces and newlines. But it'd be better to parse these according to the grammar of the appropriate macro, transcribe back into the grammar we just parsed from, and then pretty-print the resulting AST nodes (so, e.g., we print expression arguments as expressions). It can be done! I think.",175,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"result"}}],[11,"print_tts","","",175,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"result"}}],[11,"print_variant","","",175,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"print_method_sig","","",175,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"methodsig"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_trait_item","","",175,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",175,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",175,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"result"}}],[11,"print_block","","",175,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",175,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_with_attrs","","",175,null],[11,"print_block_unclosed_indent","","",175,{"inputs":[{"name":"self"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",175,null],[11,"print_block_maybe_unclosed","","",175,null],[11,"print_if","","",175,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",175,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_mac","","",175,{"inputs":[{"name":"self"},{"name":"mac"},{"name":"delimtoken"}],"output":{"name":"result"}}],[11,"check_expr_bin_needs_paren","","",175,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"print_expr_maybe_paren","","",175,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",175,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",175,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_ident","","",175,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"result"}}],[11,"print_usize","","",175,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",175,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",175,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_pat","","",175,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",175,{"inputs":[{"name":"self"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"option"},{"name":"generics"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_fn_args_and_ret","","",175,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_fn_block_args","","",175,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_capture_clause","","",175,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"result"}}],[11,"print_bounds","","",175,null],[11,"print_lifetime","","",175,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_bounds","","",175,null],[11,"print_generics","","",175,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",175,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",175,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_view_path","","",175,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"result"}}],[11,"print_mutability","","",175,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",175,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_arg","","",175,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_fn_output","","",175,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",175,{"inputs":[{"name":"self"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",175,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",175,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",175,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",175,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",175,{"inputs":[{"name":"self"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",175,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"result"}}],[0,"ext","syntax","",null,null],[0,"base","syntax::ext","",null,null],[3,"MacEager","syntax::ext::base","`MacResult` implementation for the common case where you've already built each form of AST that you might return.",null,null],[12,"expr","","",180,null],[12,"pat","","",180,null],[12,"items","","",180,null],[12,"impl_items","","",180,null],[12,"trait_items","","",180,null],[12,"stmts","","",180,null],[12,"ty","","",180,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue after hitting errors.",null,null],[3,"DummyResolver","","",null,null],[3,"ModuleData","","",null,null],[12,"mod_path","","",181,null],[12,"directory","","",181,null],[3,"ExpansionData","","",null,null],[12,"mark","","",182,null],[12,"depth","","",182,null],[12,"backtrace","","",182,null],[12,"module","","",182,null],[12,"directory_ownership","","",182,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go; when a macro expansion occurs, the resulting nodes have the backtrace() -> expn_info of their expansion context stored into their span.",null,null],[12,"parse_sess","","",183,null],[12,"ecfg","","",183,null],[12,"crate_root","","",183,null],[12,"resolver","","",183,null],[12,"resolve_err_count","","",183,null],[12,"current_expansion","","",183,null],[3,"ChangeSpan","","",null,null],[12,"span","","",184,null],[4,"Annotatable","","",null,null],[13,"Item","","",185,null],[13,"TraitItem","","",185,null],[13,"ImplItem","","",185,null],[4,"MacroKind","","Represents different kinds of macro invocations that can be resolved.",null,null],[13,"Bang","","A bang macro - foo!()",186,null],[13,"Attr","","An attribute macro - #[foo]",186,null],[13,"Derive","","A derive attribute macro - #[derive(Foo)]",186,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items based upon it.",187,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it in-place. Also allows decoration, i.e., creating new items.",187,null],[13,"ProcMacro","","A function-like procedural macro. TokenStream -> TokenStream.",187,null],[13,"AttrProcMacro","","An attribute-like procedural macro. TokenStream, TokenStream -> TokenStream. The first TokenSteam is the attribute, the second is the annotated item. Allows modification of the input items and adding new items, similar to MultiModifier, but uses TokenStreams, rather than AST nodes.",187,null],[13,"NormalTT","","A normal, function-like syntax extension.",187,null],[13,"IdentTT","","A function-like syntax extension that has an extra ident before the block.",187,null],[13,"ProcMacroDerive","","An attribute-like procedural macro. TokenStream -> TokenStream. The input is the annotated item. Allows generating code to implement a Trait for a given struct or enum item.",187,null],[13,"BuiltinDerive","","An attribute-like procedural macro that derives a builtin trait.",187,null],[4,"Determinacy","","",null,null],[13,"Determined","","",188,null],[13,"Undetermined","","",188,null],[5,"expr_to_spanned_string","","Extract a string literal from the macro expanded version of `expr`, emitting `err_msg` if `expr` is not a string literal. This does not stop compilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function returns even when `tts` is non-empty, macros that *need* to stop compilation should call `cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be done as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this is not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a parsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"BuiltinDeriveFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",189,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[8,"MultiItemModifier","","",null,null],[10,"expand","","",190,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"name":"vec"}}],[8,"ProcMacro","","",null,null],[10,"expand","","",191,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[8,"AttrProcMacro","","",null,null],[10,"expand","","",192,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",193,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"box"}}],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",194,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"box"}}],[8,"MacResult","","The result of a macro expansion. The return values of the various methods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","Create zero or more items.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","Create zero or more trait items.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","Create a pattern.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[8,"Resolver","","",null,null],[10,"next_node_id","","",196,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[10,"get_module_scope","","",196,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[10,"eliminate_crate_var","","",196,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"is_whitelisted_legacy_custom_derive","","",196,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[10,"visit_expansion","","",196,null],[10,"add_builtin","","",196,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"rc"}],"output":null}],[10,"resolve_imports","","",196,{"inputs":[{"name":"self"}],"output":null}],[10,"find_legacy_attr_invoc","","",196,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[10,"resolve_invoc","","",196,{"inputs":[{"name":"self"},{"name":"invocation"},{"name":"mark"},{"name":"bool"}],"output":{"name":"result"}}],[10,"resolve_macro","","",196,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"macrokind"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"annotatable"}}],[11,"attrs","","",185,null],[11,"map_attrs","","",185,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"expect_item","","",185,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"map_item_or","","",185,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"annotatable"}}],[11,"expect_trait_item","","",185,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"expect_impl_item","","",185,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"into","","",185,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","",180,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",180,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",180,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",180,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",180,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"trait_items","","",180,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",180,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",180,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",180,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",180,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",180,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",180,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",180,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",180,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",180,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"dummyresult"}}],[11,"any","","Create a default MacResult that can be anything.",197,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",197,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",197,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",197,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",197,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"macrokind"}}],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"macrokind"}],"output":{"name":"bool"}}],[11,"encode","","",186,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",186,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",186,null],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","Return which kind of macro calls this syntax extension.",187,{"inputs":[{"name":"self"}],"output":{"name":"macrokind"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"determinacy"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_node_id","","",198,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"get_module_scope","","",198,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"mark"}}],[11,"eliminate_crate_var","","",198,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"is_whitelisted_legacy_custom_derive","","",198,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"visit_expansion","","",198,null],[11,"add_builtin","","",198,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"rc"}],"output":null}],[11,"resolve_imports","","",198,{"inputs":[{"name":"self"}],"output":null}],[11,"find_legacy_attr_invoc","","",198,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"resolve_invoc","","",198,{"inputs":[{"name":"self"},{"name":"invocation"},{"name":"mark"},{"name":"bool"}],"output":{"name":"result"}}],[11,"resolve_macro","","",198,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"path"},{"name":"macrokind"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"moduledata"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"expansiondata"}}],[11,"new","","",183,{"inputs":[{"name":"parsesess"},{"name":"expansionconfig"},{"name":"resolver"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",183,{"inputs":[{"name":"self"}],"output":{"name":"macroexpander"}}],[11,"monotonic_expander","","Returns a `Folder` that deeply expands all macros and assigns all node ids in an AST node. Once node ids are assigned, the node may not be expanded, removed, or otherwise modified.",183,{"inputs":[{"name":"self"}],"output":{"name":"macroexpander"}}],[11,"new_parser_from_tts","","",183,null],[11,"codemap","","",183,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"parse_sess","","",183,{"inputs":[{"name":"self"}],"output":{"name":"parsesess"}}],[11,"cfg","","",183,{"inputs":[{"name":"self"}],"output":{"name":"crateconfig"}}],[11,"call_site","","",183,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"backtrace","","",183,{"inputs":[{"name":"self"}],"output":{"name":"expnid"}}],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",183,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"bt_push","","",183,{"inputs":[{"name":"self"},{"name":"expninfo"}],"output":null}],[11,"bt_pop","","",183,{"inputs":[{"name":"self"}],"output":null}],[11,"struct_span_warn","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",183,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping compilation.",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_warn","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",183,null],[11,"span_bug","","",183,null],[11,"bug","","",183,null],[11,"trace_macros","","",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_trace_macros","","",183,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ident_of","","",183,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ident"}}],[11,"std_path","","",183,null],[11,"name_of","","",183,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"name"}}],[11,"new_span","","",184,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"fold_mac","","",184,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"build","syntax::ext","",null,null],[8,"AstBuilder","syntax::ext::build","",null,null],[10,"path","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_ident","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[10,"path_global","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_all","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[10,"qpath","","",199,null],[10,"qpath_all","","",199,null],[10,"ty_mt","","",199,{"inputs":[{"name":"self"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[10,"ty","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"name":"p"}}],[10,"ty_path","","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[10,"ty_ident","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"ty_rptr","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_ptr","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_option","","",199,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"ty_infer","","",199,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"typaram","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"typarambounds"},{"name":"option"}],"output":{"name":"typaram"}}],[10,"trait_ref","","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[10,"poly_trait_ref","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[10,"typarambound","","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[10,"lifetime","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[10,"lifetime_def","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[10,"stmt_expr","","",199,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_semi","","",199,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let_typed","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let_type_only","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_item","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"block","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"block_expr","","",199,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"name":"p"}}],[10,"expr_path","","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_qpath","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_ident","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_self","","",199,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_binary","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_deref","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_unary","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_addr_of","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_mut_addr_of","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_field_access","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_tup_field_access","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_call","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_ident","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_global","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_method_call","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_block","","",199,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_cast","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"field_imm","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[10,"expr_struct","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_struct_ident","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_lit","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"name":"p"}}],[10,"expr_usize","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_isize","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[10,"expr_u8","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[10,"expr_u32","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[10,"expr_bool","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[10,"expr_vec","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_vec_ng","","",199,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_vec_slice","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_str","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[10,"expr_some","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_none","","",199,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_break","","",199,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_tuple","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_fail","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[10,"expr_unreachable","","",199,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_ok","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_err","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_try","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"name":"p"}}],[10,"pat_wild","","",199,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_lit","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_ident","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"pat_ident_binding_mode","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[10,"pat_path","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"p"}}],[10,"pat_tuple_struct","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_struct","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_tuple","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_some","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_none","","",199,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_ok","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_err","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"arm","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[10,"arm_unreachable","","",199,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[10,"expr_match","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_if","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[10,"expr_loop","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda_fn_decl","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"span"}],"output":{"name":"p"}}],[10,"lambda","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda0","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda1","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"lambda_stmts","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_0","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_1","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[10,"item","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"itemkind"}],"output":{"name":"p"}}],[10,"arg","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[10,"fn_decl","","",199,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn_poly","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"variant","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[10,"item_enum_poly","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_enum","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[10,"item_struct_poly","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_struct","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[10,"item_mod","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"item_static","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_const","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_ty_poly","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_ty","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[10,"attribute","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[10,"meta_word","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[10,"meta_list_item_word","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[10,"meta_list","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[10,"meta_name_value","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"litkind"}],"output":{"name":"metaitem"}}],[10,"item_use","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_use_simple","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_simple_","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_list","","",199,null],[10,"item_use_glob","","",199,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[11,"path","syntax::ext::base","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_ident","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"path_global","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_all","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[11,"qpath","","Constructs a qualified path.",183,null],[11,"qpath_all","","Constructs a qualified path.",183,null],[11,"ty_mt","","",183,{"inputs":[{"name":"self"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[11,"ty","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"name":"p"}}],[11,"ty_path","","",183,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[11,"ty_ident","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"ty_rptr","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_ptr","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_option","","",183,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"ty_infer","","",183,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"typaram","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"typarambounds"},{"name":"option"}],"output":{"name":"typaram"}}],[11,"trait_ref","","",183,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[11,"poly_trait_ref","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[11,"typarambound","","",183,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[11,"lifetime","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[11,"lifetime_def","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[11,"stmt_expr","","",183,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_semi","","",183,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let_typed","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let_type_only","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_item","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"block_expr","","",183,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"block","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"name":"p"}}],[11,"expr_path","","",183,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_qpath","","Constructs a QPath expression.",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_ident","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_self","","",183,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_binary","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_deref","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_unary","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_field_access","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_tup_field_access","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_addr_of","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_mut_addr_of","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_call","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_ident","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_global","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_method_call","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_block","","",183,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"field_imm","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[11,"expr_struct","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_struct_ident","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_lit","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"name":"p"}}],[11,"expr_usize","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_isize","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[11,"expr_u32","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[11,"expr_u8","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[11,"expr_bool","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[11,"expr_vec","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_vec_ng","","",183,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_vec_slice","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_str","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[11,"expr_cast","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_some","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_none","","",183,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_break","","",183,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_tuple","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_fail","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"symbol"}],"output":{"name":"p"}}],[11,"expr_unreachable","","",183,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_ok","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_err","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_try","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"name":"p"}}],[11,"pat_wild","","",183,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_lit","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_ident","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"pat_ident_binding_mode","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[11,"pat_path","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"p"}}],[11,"pat_tuple_struct","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_struct","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_tuple","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_some","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_none","","",183,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_ok","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_err","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"arm","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[11,"arm_unreachable","","",183,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[11,"expr_match","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_if","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr_loop","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_fn_decl","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"span"}],"output":{"name":"p"}}],[11,"lambda","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda0","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda1","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_stmts","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_0","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_1","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[11,"arg","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[11,"fn_decl","","",183,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"item","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"itemkind"}],"output":{"name":"p"}}],[11,"item_fn_poly","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_fn","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"variant","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[11,"item_enum_poly","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_enum","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[11,"item_struct","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[11,"item_struct_poly","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_mod","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"item_static","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_const","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_ty_poly","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_ty","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"attribute","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"metaitem"}],"output":{"name":"attribute"}}],[11,"meta_word","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"metaitem"}}],[11,"meta_list_item_word","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"nestedmetaitem"}}],[11,"meta_list","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"metaitem"}}],[11,"meta_name_value","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"litkind"}],"output":{"name":"metaitem"}}],[11,"item_use","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_use_simple","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_simple_","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_list","","",183,null],[11,"item_use_glob","","",183,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[0,"derive","syntax::ext","",null,null],[5,"collect_derives","syntax::ext::derive","",null,{"inputs":[{"name":"extctxt"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"add_derived_markers","","",null,null],[0,"expand","syntax::ext","",null,null],[3,"Invocation","syntax::ext::expand","",null,null],[12,"kind","","",200,null],[12,"expansion_data","","",200,null],[3,"MacroExpander","","",null,null],[12,"cx","","",201,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",202,null],[12,"features","","",202,null],[12,"recursion_limit","","",202,null],[12,"trace_mac","","",202,null],[12,"should_test","","",202,null],[12,"single_step","","",202,null],[12,"keep_macs","","",202,null],[4,"ExpansionKind","","",null,null],[13,"OptExpr","","",203,null],[13,"Expr","","",203,null],[13,"Pat","","",203,null],[13,"Ty","","",203,null],[13,"Stmts","","",203,null],[13,"Items","","",203,null],[13,"TraitItems","","",203,null],[13,"ImplItems","","",203,null],[4,"Expansion","","",null,null],[13,"OptExpr","","",204,null],[13,"Expr","","",204,null],[13,"Pat","","",204,null],[13,"Ty","","",204,null],[13,"Stmts","","",204,null],[13,"Items","","",204,null],[13,"TraitItems","","",204,null],[13,"ImplItems","","",204,null],[4,"InvocationKind","","",null,null],[13,"Bang","","",205,null],[12,"mac","syntax::ext::expand::InvocationKind","",205,null],[12,"ident","","",205,null],[12,"span","","",205,null],[13,"Attr","syntax::ext::expand","",205,null],[12,"attr","syntax::ext::expand::InvocationKind","",205,null],[12,"traits","","",205,null],[12,"item","","",205,null],[13,"Derive","syntax::ext::expand","",205,null],[12,"name","syntax::ext::expand::InvocationKind","",205,null],[12,"span","","",205,null],[12,"item","","",205,null],[5,"find_attr_invoc","syntax::ext::expand","",null,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"expansionkind"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"expansionkind"}],"output":{"name":"bool"}}],[11,"name","","",203,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"make_opt_expr","","",204,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"make_expr","","",204,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"make_pat","","",204,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"make_ty","","",204,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"make_stmts","","",204,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"make_items","","",204,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"make_trait_items","","",204,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"make_impl_items","","",204,{"inputs":[{"name":"self"}],"output":{"name":"smallvector"}}],[11,"fold_with","","",204,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"visit_with","","",204,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"fold_opt_expr","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_expr","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_pat","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_stmt","","",201,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_item","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",201,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",201,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"new","","",201,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"expand_crate","","",201,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"parse_expansion","syntax::parse::parser","",132,{"inputs":[{"name":"self"},{"name":"expansionkind"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"ensure_complete_parse","","",132,{"inputs":[{"name":"self"},{"name":"name"},{"name":"str"},{"name":"span"}],"output":null}],[11,"default","syntax::ext::expand","",202,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_asm","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_log_syntax","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_concat_idents","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_trace_macros","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_allow_internal_unstable","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_custom_derive","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"proc_macro_enabled","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"placeholders","syntax::ext","",null,null],[3,"PlaceholderExpander","syntax::ext::placeholders","",null,null],[5,"placeholder","","",null,{"inputs":[{"name":"expansionkind"},{"name":"nodeid"}],"output":{"name":"expansion"}}],[11,"new","","",206,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"add","","",206,{"inputs":[{"name":"self"},{"name":"nodeid"},{"name":"expansion"},{"name":"vec"}],"output":null}],[11,"fold_item","","",206,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",206,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",206,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_expr","","",206,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",206,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_stmt","","",206,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_pat","","",206,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty","","",206,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_block","","",206,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mod","","",206,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_mac","","",206,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[0,"hygiene","syntax::ext","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntax::ext::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",207,null],[12,"prev_ctxt","","",207,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[5,"reset_hygiene_data","","",null,{"inputs":[],"output":null}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"hash","","",208,null],[11,"encode","","",208,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",208,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",208,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"hash","","",209,null],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",209,{"inputs":[],"output":{"name":"mark"}}],[11,"encode","","",209,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",209,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fresh","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",209,{"inputs":[],"output":{"name":"self"}}],[11,"from_placeholder_id","","",209,{"inputs":[{"name":"nodeid"}],"output":{"name":"self"}}],[11,"as_placeholder_id","","",209,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"as_u32","","",209,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"empty","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"data","","",208,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"apply_mark","","Extend a syntax context with a given mark",208,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"syntaxcontext"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"quote","syntax::ext","",null,null],[5,"unflatten","syntax::ext::quote","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"parse_expr_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"metaitem"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathstyle"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[3,"BytePos","syntax::ext::quote::rt","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",210,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans are *absolute* positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",211,null],[12,"hi","","",211,null],[12,"expn_id","","Information about where the macro came from, if this piece of code was created by a macro expansion.",211,null],[17,"DUMMY_SP","","",null,null],[8,"ToTokens","","",null,null],[10,"to_tokens","","",212,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",213,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_expr","","",213,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_stmt","","",213,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[10,"parse_tts","","",213,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::tokenstream","",161,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",112,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",13,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",155,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",41,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",155,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",40,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",155,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",155,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",33,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",155,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",27,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ext::quote::rt","",214,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntax::ext::base","",183,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",183,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[11,"parse_expr","","",183,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",183,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"vec"}}],[0,"source_util","syntax::ext","",null,null],[5,"expand_line","syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_file","","file!(): expands to the current filename */ The filemap (`loc.file`) contains a bunch more information we could spit out if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr This is generally a bad idea because it's going to behave unhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"tt","syntax::ext","",null,null],[0,"transcribe","syntax::ext::tt","",null,null],[5,"transcribe","syntax::ext::tt::transcribe","This can do Macro-By-Example transcription. On the other hand, if `src` contains no `TokenTree::{Sequence, Match}`s, or `SubstNt`s, `interp` can (and should) be None.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"vec"}],"output":{"name":"tokenstream"}}],[0,"macro_parser","syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals, only by calling out to the main rust parser for named nonterminals (which it commits to fully when it hits one in a grammar). This means that there are no completer or predictor rules, and therefore no need to store one column per token: instead, there's a set of current Earley items and a set of next ones. Instead of NTs, we have a special case for Kleene star. The big-O, in pathological cases, is worse than traditional Earley parsing, but it's an easier fit for Macro-by-Example-style rules, and I think the overhead is lower. (In order to prevent the pathological case, we'd need to lazily construct the resulting `NamedMatch`es at the very end. It'd be a pain, and require more memory to keep around old items, but it would also save overhead)",null,null],[4,"NamedMatch","syntax::ext::tt::macro_parser","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL: so it is associated with a single ident in a parse, and all `MatchedNonterminal`s in the NamedMatch have the same nonterminal type (expr, item, etc). Each leaf in a single NamedMatch corresponds to a single token::MATCH_NONTERMINAL in the TokenTree that produced it.",null,null],[13,"MatchedSeq","","",215,null],[13,"MatchedNonterminal","","",215,null],[4,"ParseResult","","",null,null],[13,"Success","","",216,null],[13,"Failure","","Arm failed to match. If the second parameter is `token::Eof`, it indicates an unexpected end of macro invocation. Otherwise, it indicates that no rules expected the given token.",216,null],[13,"Error","","Fatal error (malformed macro?). Abort compilation.",216,null],[5,"count_names","","",null,null],[5,"parse_failure_msg","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"parse","","",null,null],[6,"NamedParseResult","","",null,null],[0,"macro_rules","syntax::ext::tt","",null,null],[3,"ParserAnyMacro","syntax::ext::tt::macro_rules","",null,null],[5,"compile","","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"parsesess"},{"name":"item"}],"output":{"name":"syntaxextension"}}],[11,"make","","",217,{"inputs":[{"name":"box"},{"name":"expansionkind"}],"output":{"name":"expansion"}}],[0,"quoted","syntax::ext::tt","",null,null],[3,"Delimited","syntax::ext::tt::quoted","",null,null],[12,"delim","","",218,null],[12,"tts","","",218,null],[3,"SequenceRepetition","","",null,null],[12,"tts","","The sequence of token trees",219,null],[12,"separator","","The optional separator",219,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",219,null],[12,"num_captures","","The number of `Match`s that appear in the sequence (and subsequences)",219,null],[4,"KleeneOp","","A Kleene-style repetition operator for token sequences.",null,null],[13,"ZeroOrMore","","",220,null],[13,"OneOrMore","","",220,null],[4,"TokenTree","","Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, and `$(...)` are \"first-class\" token trees.",null,null],[13,"Token","","",221,null],[13,"Delimited","","",221,null],[13,"Sequence","","A kleene-style repetition sequence with a span",221,null],[13,"MetaVarDecl","","Matches a nonterminal. This is only used in the left hand side of MBE macros.",221,null],[5,"parse","","",null,{"inputs":[{"name":"tokenstream"},{"name":"bool"},{"name":"parsesess"}],"output":{"name":"vec"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"encode","","",218,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",218,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",218,null],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_token","","",218,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"close_token","","",218,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"open_tt","","",218,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"close_tt","","",218,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokentree"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"sequencerepetition"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"encode","","",219,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",219,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",219,null],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"kleeneop"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"encode","","",220,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",220,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",220,null],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"encode","","",221,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",221,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",221,null],[11,"len","","",221,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_tt","","",221,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"span","","Retrieve the TokenTree's span.",221,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[14,"panictry","syntax","",null,null],[14,"register_diagnostic","","",null,null],[14,"span_fatal","","",null,null],[14,"span_err","","",null,null],[14,"span_warn","","",null,null],[14,"span_err_or_warn","","",null,null],[14,"struct_span_fatal","","",null,null],[14,"struct_span_err","","",null,null],[14,"struct_span_warn","","",null,null],[14,"struct_span_err_or_warn","","",null,null],[14,"span_note","","",null,null],[14,"span_help","","",null,null],[14,"help","","",null,null],[14,"register_diagnostics","","",null,null],[14,"register_long_diagnostics","","",null,null],[14,"walk_list","","",null,null],[11,"move_flat_map","syntax::ptr","",155,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntax::codemap","",112,null],[11,"map_attrs","","",112,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntax::ptr","",155,null],[11,"map_attrs","","",155,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"make_expr","syntax::ext::tt::macro_rules","",217,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",217,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",217,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",217,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",217,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",217,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",217,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"fmt","syntax::ext::quote::rt","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",211,null],[11,"hash","","",210,null],[11,"encode","","",210,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"partial_cmp","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"lt","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"sub","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"from_usize","","",210,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",210,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decode","","",210,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"add","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"default_encode","","",211,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"default_decode","","",211,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"cmp","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"cmp","","",210,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"end_point","","Returns a new span representing just the end-point of this span",211,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",211,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}]],"paths":[[3,"ErrorInfo"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[8,"MoveMap"],[6,"SmallVector"],[3,"ThinVec"],[3,"RcSlice"],[3,"JsonEmitter"],[4,"Abi"],[3,"AbiData"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MetaItem"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Stmt"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Mac_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"PathListItem_"],[3,"AttrId"],[3,"Attribute"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"Item"],[3,"ForeignItem"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"NestedMetaItemKind"],[4,"MetaItemKind"],[4,"BindingMode"],[4,"RangeEnd"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[4,"StmtKind"],[4,"MacStmtStyle"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"RangeLimits"],[4,"ExprKind"],[4,"CaptureBy"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"TyKind"],[4,"AsmDialect"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"VariantData"],[4,"ItemKind"],[4,"ForeignItemKind"],[3,"NodeId"],[3,"Stability"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"HasAttrs"],[6,"NestedMetaItem"],[3,"Spanned"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"CodeMap"],[4,"ExpnFormat"],[8,"FileLoader"],[3,"RealFileLoader"],[3,"StripUnconfigured"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"Stability"],[4,"GateIssue"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"Folder"],[3,"ParseSess"],[3,"Directory"],[4,"DirectoryOwnership"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathStyle"],[4,"SemiColonMode"],[4,"TokenType"],[4,"Error"],[4,"LhsExpr"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"SeqSep"],[8,"ParserObsoleteMethods"],[4,"ObsoleteSyntax"],[3,"P"],[3,"Keyword"],[3,"Symbol"],[3,"Interner"],[3,"InternedString"],[3,"Delimited"],[4,"TokenTree"],[3,"TokenStream"],[3,"Cursor"],[3,"ThinTokenStream"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"CurrentCommentAndLiteral"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"MacEager"],[3,"ModuleData"],[3,"ExpansionData"],[3,"ExtCtxt"],[3,"ChangeSpan"],[4,"Annotatable"],[4,"MacroKind"],[4,"SyntaxExtension"],[4,"Determinacy"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"ProcMacro"],[8,"AttrProcMacro"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[8,"Resolver"],[3,"DummyResult"],[3,"DummyResolver"],[8,"AstBuilder"],[3,"Invocation"],[3,"MacroExpander"],[3,"ExpansionConfig"],[4,"ExpansionKind"],[4,"Expansion"],[4,"InvocationKind"],[3,"PlaceholderExpander"],[3,"SyntaxContextData"],[3,"SyntaxContext"],[3,"Mark"],[3,"BytePos"],[3,"Span"],[8,"ToTokens"],[8,"ExtParseUtils"],[6,"Lit"],[4,"NamedMatch"],[4,"ParseResult"],[3,"ParserAnyMacro"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"]]};
searchIndex["syntax_ext"] = {"doc":"Syntax extensions in the Rust compiler.","items":[[5,"register_builtins","syntax_ext","",null,{"inputs":[{"name":"resolver"},{"name":"vec"},{"name":"bool"}],"output":null}],[0,"proc_macro_registrar","","",null,null],[5,"modify","syntax_ext::proc_macro_registrar","",null,{"inputs":[{"name":"parsesess"},{"name":"resolver"},{"name":"crate"},{"name":"bool"},{"name":"bool"},{"name":"usize"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"deriving","syntax_ext","The compiler code necessary to implement the `#[derive]` extensions.",null,null],[5,"is_builtin_trait","syntax_ext::deriving","",null,{"inputs":[{"name":"name"}],"output":{"name":"bool"}}],[5,"register_builtin_derives","","",null,{"inputs":[{"name":"resolver"}],"output":null}],[0,"bounds","","",null,null],[5,"expand_deriving_unsafe_bound","syntax_ext::deriving::bounds","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_copy","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"clone","syntax_ext::deriving","",null,null],[5,"expand_deriving_clone","syntax_ext::deriving::clone","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"encodable","syntax_ext::deriving","The compiler code necessary to implement the `#[derive(Encodable)]` (and `Decodable`, in decodable.rs) extension.  The idea here is that type-defining items may be tagged with `#[derive(Encodable, Decodable)]`.",null,null],[5,"expand_deriving_rustc_encodable","syntax_ext::deriving::encodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_encodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"decodable","syntax_ext::deriving","The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.",null,null],[5,"expand_deriving_rustc_decodable","syntax_ext::deriving::decodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_decodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"hash","syntax_ext::deriving","",null,null],[5,"expand_deriving_hash","syntax_ext::deriving::hash","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"debug","syntax_ext::deriving","",null,null],[5,"expand_deriving_debug","syntax_ext::deriving::debug","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"default","syntax_ext::deriving","",null,null],[5,"expand_deriving_default","syntax_ext::deriving::default","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"custom","syntax_ext::deriving","",null,null],[3,"ProcMacroDerive","syntax_ext::deriving::custom","",null,null],[11,"new","","",0,null],[11,"expand","","",0,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"name":"vec"}}],[0,"partial_eq","syntax_ext::deriving","",null,null],[5,"expand_deriving_partial_eq","syntax_ext::deriving::partial_eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"eq","syntax_ext::deriving","",null,null],[5,"expand_deriving_eq","syntax_ext::deriving::eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"partial_ord","syntax_ext::deriving","",null,null],[4,"OrderingOp","syntax_ext::deriving::partial_ord","",null,null],[13,"PartialCmpOp","","",1,null],[13,"LtOp","","",1,null],[13,"LeOp","","",1,null],[13,"GtOp","","",1,null],[13,"GeOp","","",1,null],[5,"expand_deriving_partial_ord","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"some_ordering_collapsed","","",null,null],[5,"cs_partial_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"orderingop"}}],[0,"ord","syntax_ext::deriving","",null,null],[5,"expand_deriving_ord","syntax_ext::deriving::ord","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"ordering_collapsed","","",null,null],[5,"cs_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[0,"generic","syntax_ext::deriving","Some code that abstracts away much of the boilerplate of writing `derive` instances for traits. Among other things it manages getting access to the fields of the 4 different sorts of structs and enum variants, as well as creating the method and impl ast instances.",null,null],[3,"TraitDef","syntax_ext::deriving::generic","",null,null],[12,"span","","The span for the current #[derive(Foo)] header.",2,null],[12,"attributes","","",2,null],[12,"path","","Path of the trait, including any type parameters",2,null],[12,"additional_bounds","","Additional bounds required of any type parameters of the type, other than the current trait",2,null],[12,"generics","","Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`",2,null],[12,"is_unsafe","","Is it an `unsafe` trait?",2,null],[12,"supports_unions","","Can this trait be derived for unions?",2,null],[12,"methods","","",2,null],[12,"associated_types","","",2,null],[3,"MethodDef","","",null,null],[12,"name","","name of the method",3,null],[12,"generics","","List of generics, e.g. `R: rand::Rng`",3,null],[12,"explicit_self","","Whether there is a self argument (outer Option) i.e. whether this is a static function, and whether it is a pointer (inner Option)",3,null],[12,"args","","Arguments other than the self argument",3,null],[12,"ret_ty","","Return type",3,null],[12,"attributes","","",3,null],[12,"is_unsafe","","",3,null],[12,"unify_fieldless_variants","","Can we combine fieldless variants for enums into a single match arm?",3,null],[12,"combine_substructure","","",3,null],[3,"Substructure","","All the data about the data structure/method being derived upon.",null,null],[12,"type_ident","","ident of self",4,null],[12,"method_ident","","ident of the method",4,null],[12,"self_args","","dereferenced access to any `Self_` or `Ptr(Self_, _)` arguments",4,null],[12,"nonself_args","","verbatim access to any other arguments",4,null],[12,"fields","","",4,null],[3,"FieldInfo","","Summary of the relevant parts of a struct/enum field.",null,null],[12,"span","","",5,null],[12,"name","","None for tuple structs/normal enum variants, Some for normal structs/struct enum variants.",5,null],[12,"self_","","The expression corresponding to this field of `self` (specifically, a reference to it).",5,null],[12,"other","","The expressions corresponding to references to this field in the other `Self` arguments.",5,null],[12,"attrs","","The attributes on the field",5,null],[4,"StaticFields","","Fields for a static method",null,null],[13,"Unnamed","","Tuple and unit structs/enum variants like this.",6,null],[13,"Named","","Normal structs/struct variants.",6,null],[4,"SubstructureFields","","A summary of the possible sets of fields.",null,null],[13,"Struct","","",7,null],[13,"EnumMatching","","Matching variants of the enum: variant index, ast::Variant, fields: the field name is only non-`None` in the case of a struct variant.",7,null],[13,"EnumNonMatchingCollapsed","","Non-matching variants of the enum, but with all state hidden from the consequent code.  The first component holds `Ident`s for all of the `Self` arguments; the second component is a slice of all of the variants for the enum itself, and the third component is a list of `Ident`s bound to the variant index values for each of the actual input `Self` arguments.",7,null],[13,"StaticStruct","","A static method where `Self` is a struct.",7,null],[13,"StaticEnum","","A static method where `Self` is an enum.",7,null],[5,"combine_substructure","","",null,{"inputs":[{"name":"combinesubstructurefunc"}],"output":{"name":"refcell"}}],[5,"cs_fold","","Fold the fields. `use_foldl` controls whether this is done left-to-right (`true`) or right-to-left (`false`).",null,{"inputs":[{"name":"bool"},{"name":"f"},{"name":"p"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"cs_same_method","","Call the method that is being derived on all the fields, and then process the collected results. i.e.",null,{"inputs":[{"name":"f"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"is_type_without_fields","","Return true if the type has no value fields (for an enum, no variant has any fields)",null,{"inputs":[{"name":"annotatable"}],"output":{"name":"bool"}}],[0,"ty","","A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use when specifying impls to be derived.",null,null],[3,"Path","syntax_ext::deriving::generic::ty","A path, e.g. `::std::option::Option::<i32>` (global). Has support for type parameters and a lifetime.",null,null],[12,"path","","",8,null],[12,"lifetime","","",8,null],[12,"params","","",8,null],[12,"global","","",8,null],[3,"LifetimeBounds","","Lifetimes and bounds on type parameters",null,null],[12,"lifetimes","","",9,null],[12,"bounds","","",9,null],[4,"PtrTy","","The types of pointers",null,null],[13,"Borrowed","","&'lifetime mut",10,null],[13,"Raw","","*mut",10,null],[4,"Ty","","A type. Supports pointers, Self, and literals",null,null],[13,"Self_","","",11,null],[13,"Ptr","","&/Box/ Ty",11,null],[13,"Literal","","mod::mod::Type<[lifetime], [Params...]>, including a plain type parameter, and things like `i32`",11,null],[13,"Tuple","","includes unit",11,null],[5,"borrowed_ptrty","","",null,{"inputs":[],"output":{"name":"ptrty"}}],[5,"borrowed","","",null,{"inputs":[{"name":"box"}],"output":{"name":"ty"}}],[5,"borrowed_explicit_self","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"borrowed_self","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"nil_ty","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"get_explicit_self","","",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ptrty"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"new","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"path"}}],[11,"new_local","","",8,{"inputs":[{"name":"str"}],"output":{"name":"path"}}],[11,"new_","","",8,{"inputs":[{"name":"vec"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"path"}}],[11,"to_ty","","",8,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",8,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"to_ty","","",11,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",11,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"lifetimebounds"}}],[11,"empty","","",9,{"inputs":[],"output":{"name":"lifetimebounds"}}],[11,"to_generics","","",9,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"generics"}}],[6,"CombineSubstructureFunc","syntax_ext::deriving::generic","Combine the values of all the fields together. The last argument is all the fields of all the structures.",null,null],[6,"EnumNonMatchCollapsedFunc","","Deal with non-matching enum variants.  The tuple is a list of identifiers (one for each `Self` argument, which could be any of the variants since they have been collapsed together) and the identifiers holding the variant index value for each of the `Self` arguments.  The last argument is all the non-`Self` args of the method being derived.",null,null],[11,"expand","","",2,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[11,"expand_ext","","",2,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"},{"name":"bool"}],"output":null}],[0,"proc_macro_impl","syntax_ext","",null,null],[3,"AttrProcMacro","syntax_ext::proc_macro_impl","",null,null],[12,"inner","","",12,null],[3,"BangProcMacro","","",null,null],[12,"inner","","",13,null],[11,"expand","","",12,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"expand","","",13,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[[3,"ProcMacroDerive"],[4,"OrderingOp"],[3,"TraitDef"],[3,"MethodDef"],[3,"Substructure"],[3,"FieldInfo"],[4,"StaticFields"],[4,"SubstructureFields"],[3,"Path"],[3,"LifetimeBounds"],[4,"PtrTy"],[4,"Ty"],[3,"AttrProcMacro"],[3,"BangProcMacro"]]};
searchIndex["syntax_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntax_pos","Spans represent a region of code, used for error reporting. Positions in spans are *absolute* positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[12,"expn_id","","Information about where the macro came from, if this piece of code was created by a macro expansion.",0,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",1,null],[12,"is_primary","","Is this a primary span? This is the \"locus\" of the message, and is indicated with a `^^^^` underline, versus `----`.",1,null],[12,"label","","What label should we attach to this span (if any)?",1,null],[3,"ExpnId","","",null,null],[12,"0","","",2,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",3,null],[12,"bytes","","The number of bytes, >=2",3,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't originate from files has names between angle brackets by convention, e.g. `<anon>`",4,null],[12,"abs_path","","The absolute path of the file that the source came from.",4,null],[12,"src","","The complete source code",4,null],[12,"start_pos","","The start position of this source in the CodeMap",4,null],[12,"end_pos","","The end position of this source in the CodeMap",4,null],[12,"lines","","Locations of lines beginnings in the source code",4,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",4,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",5,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset is not equivalent to a character offset. The CodeMap will convert BytePos values to CharPos values as necessary.",null,null],[12,"0","","",6,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",7,null],[12,"line","","The (1-based) line number",7,null],[12,"col","","The (0-based) column offset",7,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[12,"file","","",8,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",9,null],[12,"line","","",9,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",10,null],[12,"pos","","",10,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",11,null],[12,"start_col","","Column in line where span begins, starting from 0.",11,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",11,null],[3,"FileLines","","",null,null],[12,"file","","",12,null],[12,"lines","","",12,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",13,null],[12,"macro_decl_name","","name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")",13,null],[12,"def_site_span","","span where macro was defined (if known)",13,null],[3,"DistinctSources","","",null,null],[12,"begin","","",14,null],[12,"end","","",14,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",15,null],[12,"source_len","","",15,null],[12,"begin_pos","","",15,null],[12,"end_pos","","",15,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",16,null],[13,"DistinctSources","","",16,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",17,null],[13,"DistinctSources","","",17,null],[13,"MalformedForCodemap","","",17,null],[13,"SourceNotAvailable","","",17,null],[12,"filename","syntax_pos::SpanSnippetError","",17,null],[5,"mk_sp","syntax_pos","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"span"}}],[6,"FileName","","",null,null],[6,"FileLinesResult","","",null,null],[7,"SPAN_DEBUG","","",null,null],[17,"DUMMY_SP","","",null,null],[17,"COMMAND_LINE_SP","","",null,null],[17,"NO_EXPANSION","","",null,null],[17,"COMMAND_LINE_EXPN","","",null,null],[17,"PROC_EXPN","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"multispan"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"end_point","","Returns a new span representing just the end-point of this span",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"spanlabel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_encode","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",19,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",19,{"inputs":[{"name":"self"},{"name":"span"},{"name":"string"}],"output":null}],[11,"primary_span","","Selects the first primary span (if any)",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"primary_spans","","Returns all primary spans.",19,null],[11,"replace","","Replaces all occurances of one Span with another. Used to move Spans in areas that don't display well (like std macros). Returns true if replacements occurred.",19,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"span_labels","","Returns the strings to highlight. We always ensure that there is an entry for each of the primary spans -- for each primary span P, if there is at least one label with span P, we return those labels (marked as primary). But otherwise we return `SpanLabel` instances with empty labels.",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expnid"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"from_u32","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"multibytechar"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the table of line-beginnings. UNCHECKED INVARIANT: these offsets must be added in the right order and must be in the right places; there is shared knowledge about what ends a line between this file and parse.rs WARNING: pos param here is the offset relative to start of CodeMap, and CodeMap will append a newline when adding a filemap without a newline at the end, so the safe way to call this is with value calculated as filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":null}],[11,"get_line","","get a line from the list of pre-computed line-beginnings. line-number here is 0-based.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"record_multibyte_char","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"usize"}],"output":null}],[11,"is_real_file","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_imported","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_length","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_lines","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lookup_line","","Find the line containing the given position. The return value is the index into the `lines` array of this FileMap, not the 1-based line number. If the filemap is empty or the position is located before the first line, None is returned.",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"line_bounds","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"charpos"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"ordering"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_usize","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"loc"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lineinfo"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"spanlineserror"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"spansnippeterror"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"distinctsources"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"malformedcodemappositions"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Span"],[3,"SpanLabel"],[3,"ExpnId"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[8,"Pos"],[3,"MultiSpan"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",1,null],[12,"bools","","Map of capability name to boolean value",1,null],[12,"numbers","","Map of capability name to numeric value",1,null],[12,"strings","","Map of capability name to raw (unexpanded) string",1,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its parsed Terminfo database record.",null,null],[4,"Error","","A terminfo creation error.",null,null],[13,"TermUnset","","TermUnset Indicates that the environment doesn't include enough information to find the terminfo entry.",2,null],[13,"MalformedTerminfo","","MalformedTerminfo indicates that parsing the terminfo entry failed.",2,null],[13,"IoError","","io::Error forwards any io::Errors encountered when finding or reading the terminfo entry.",2,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing. ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",3,null],[13,"Number","","",3,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"new","","Return a new zero-initialized Variables",4,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_env","","Create a TermInfo based on current environment.",1,{"inputs":[],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fg","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",5,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",5,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",5,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",5,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal (foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",6,null],[10,"fg","","Sets the foreground color to the given color.",6,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",6,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)` if the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if there was an I/O error.",6,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",6,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",6,null],[10,"get_mut","","Gets a mutable reference to the stream inside",6,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",6,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}]],"paths":[[4,"Attr"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["test"] = {"doc":"Support code for rustc's built in unit-test and micro-benchmarking framework.","items":[[3,"Bencher","test","Manager of the benchmarking runs.",null,null],[12,"bytes","","",0,null],[3,"TestDesc","","",null,null],[12,"name","","",1,null],[12,"ignore","","",1,null],[12,"should_panic","","",1,null],[3,"TestPaths","","",null,null],[12,"file","","",2,null],[12,"base","","",2,null],[12,"relative_dir","","",2,null],[3,"TestDescAndFn","","",null,null],[12,"desc","","",3,null],[12,"testfn","","",3,null],[3,"Metric","","",null,null],[3,"MetricMap","","",null,null],[3,"TestOpts","","",null,null],[12,"list","","",4,null],[12,"filter","","",4,null],[12,"filter_exact","","",4,null],[12,"run_ignored","","",4,null],[12,"run_tests","","",4,null],[12,"bench_benchmarks","","",4,null],[12,"logfile","","",4,null],[12,"nocapture","","",4,null],[12,"color","","",4,null],[12,"quiet","","",4,null],[12,"test_threads","","",4,null],[12,"skip","","",4,null],[3,"BenchSamples","","",null,null],[4,"TestName","","",null,null],[13,"StaticTestName","","",5,null],[13,"DynTestName","","",5,null],[4,"NamePadding","","",null,null],[13,"PadNone","","",6,null],[13,"PadOnRight","","",6,null],[4,"TestFn","","",null,null],[13,"StaticTestFn","","",7,null],[13,"StaticBenchFn","","",7,null],[13,"StaticMetricFn","","",7,null],[13,"DynTestFn","","",7,null],[13,"DynMetricFn","","",7,null],[13,"DynBenchFn","","",7,null],[4,"BenchMode","","",null,null],[13,"Auto","","",8,null],[13,"Single","","",8,null],[4,"ShouldPanic","","",null,null],[13,"No","","",9,null],[13,"Yes","","",9,null],[13,"YesWithMessage","","",9,null],[4,"ColorConfig","","",null,null],[13,"AutoColor","","",10,null],[13,"AlwaysColor","","",10,null],[13,"NeverColor","","",10,null],[4,"TestResult","","",null,null],[13,"TrOk","","",11,null],[13,"TrFailed","","",11,null],[13,"TrFailedMsg","","",11,null],[13,"TrIgnored","","",11,null],[13,"TrMetrics","","",11,null],[13,"TrBench","","",11,null],[4,"TestEvent","","",null,null],[13,"TeFiltered","","",12,null],[13,"TeWait","","",12,null],[13,"TeResult","","",12,null],[13,"TeTimeout","","",12,null],[5,"test_main","","",null,null],[5,"test_main_static","","",null,null],[5,"parse_opts","","",null,null],[5,"fmt_bench_samples","","",null,{"inputs":[{"name":"benchsamples"}],"output":{"name":"string"}}],[5,"list_tests_console","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"result"}}],[5,"run_tests_console","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"result"}}],[5,"run_tests","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"},{"name":"f"}],"output":{"name":"result"}}],[5,"filter_tests","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"convert_benchmarks_to_tests","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"run_test","","",null,{"inputs":[{"name":"testopts"},{"name":"bool"},{"name":"testdescandfn"},{"name":"sender"}],"output":null}],[5,"black_box","","A function that is opaque to the optimizer, to allow benchmarks to pretend to use outputs to assist in avoiding dead-code elimination.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"iter","","",null,{"inputs":[{"name":"f"}],"output":{"name":"summary"}}],[0,"test","","",null,null],[0,"stats","","",null,null],[3,"Summary","test::stats","Extracted collection of all the summary statistics of a sample set.",null,null],[12,"sum","","",13,null],[12,"min","","",13,null],[12,"max","","",13,null],[12,"mean","","",13,null],[12,"median","","",13,null],[12,"var","","",13,null],[12,"std_dev","","",13,null],[12,"std_dev_pct","","",13,null],[12,"median_abs_dev","","",13,null],[12,"median_abs_dev_pct","","",13,null],[12,"quartiles","","",13,null],[12,"iqr","","",13,null],[5,"winsorize","","Winsorize a set of samples, replacing values above the `100-pct` percentile and below the `pct` percentile with those percentiles themselves. This is a way of minimizing the effect of outliers, at the cost of biasing the sample. It differs from trimming in that it does not change the number of samples, just changes the values of those that are outliers.",null,null],[8,"Stats","","Trait that provides simple descriptive statistics on a univariate set of numeric samples.",null,null],[10,"sum","","Sum of the samples.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"min","","Minimum value of the samples.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"max","","Maximum value of the samples.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"mean","","Arithmetic mean (average) of the samples: sum divided by sample-count.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"median","","Median of the samples: value separating the lower half of the samples from the higher half. Equal to `self.percentile(50.0)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"var","","Variance of the samples: bias-corrected mean of the squares of the differences of each sample from the sample mean. Note that this calculates the _sample variance_ rather than the population variance, which is assumed to be unknown. It therefore corrects the `(n-1)/n` bias that would appear if we calculated a population variance, by dividing by `(n-1)` rather than `n`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"std_dev","","Standard deviation: the square root of the sample variance.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"std_dev_pct","","Standard deviation as a percent of the mean value. See `std_dev` and `mean`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"median_abs_dev","","Scaled median of the absolute deviations of each sample from the sample median. This is a robust (distribution-agnostic) estimator of sample variability. Use this in preference to `std_dev` if you cannot assume your sample is normally distributed. Note that this is scaled by the constant `1.4826` to allow its use as a consistent estimator for the standard deviation.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"percentile","","Percentile: the value below which `pct` percent of the values in `self` fall. For example, percentile(95.0) will return the value `v` such that 95% of the samples `s` in `self` satisfy `s <= v`.",14,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[10,"quartiles","","Quartiles of the sample: three values that divide the sample into four equal groups, each with 1/4 of the data. The middle value is the median. See `median` and `percentile`. This function may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but is otherwise equivalent.",14,null],[10,"iqr","","Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th percentile (3rd quartile). See `quartiles`.",14,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"summary"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"new","","Construct a new summary of a sample set.",13,null],[0,"bench","test","",null,null],[5,"benchmark","test::bench","",null,{"inputs":[{"name":"f"}],"output":{"name":"benchsamples"}}],[5,"run_once","","",null,{"inputs":[{"name":"f"}],"output":null}],[6,"OptRes","test","Result of parsing the options.",null,null],[6,"MonitorMsg","","",null,null],[8,"TDynBenchFn","","Represents a benchmark function.",null,null],[10,"run","","",15,{"inputs":[{"name":"self"},{"name":"bencher"}],"output":null}],[8,"FnBox","","",null,null],[10,"call_box","","",16,{"inputs":[{"name":"box"},{"name":"t"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"testname"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"testname"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"testname"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"namepadding"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"namepadding"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bencher"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"benchmode"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"benchmode"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"shouldpanic"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"shouldpanic"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"shouldpanic"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"testdesc"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"testdesc"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"testdesc"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"testpaths"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"metric"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"metric"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"metricmap"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"metricmap"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"metricmap"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"benchsamples"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"benchsamples"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"benchsamples"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"testresult"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"testresult"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"testresult"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"testevent"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"metricmap"}}],[11,"insert_metric","","Insert a named `value` (+/- `noise`) metric into the map. The value must be non-negative. The `noise` indicates the uncertainty of the metric, which doubles as the \"noise range\" of acceptable pairwise-regressions on this named value, when comparing from one metric to the next using `compare_to_old`.",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"fmt_metrics","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"iter","","Callback for benchmark functions to run in their body.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"bench","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}]],"paths":[[3,"Bencher"],[3,"TestDesc"],[3,"TestPaths"],[3,"TestDescAndFn"],[3,"TestOpts"],[4,"TestName"],[4,"NamePadding"],[4,"TestFn"],[4,"BenchMode"],[4,"ShouldPanic"],[4,"ColorConfig"],[4,"TestResult"],[4,"TestEvent"],[3,"Summary"],[8,"Stats"],[8,"TDynBenchFn"],[8,"FnBox"],[3,"Metric"],[3,"MetricMap"],[3,"BenchSamples"]]};
searchIndex["unwind"] = {"doc":"","items":[[3,"_Unwind_Exception","unwind","",null,null],[12,"exception_class","","",0,null],[12,"exception_cleanup","","",0,null],[12,"private","","",0,null],[4,"_Unwind_Reason_Code","","",null,null],[13,"_URC_NO_REASON","","",1,null],[13,"_URC_FOREIGN_EXCEPTION_CAUGHT","","",1,null],[13,"_URC_FATAL_PHASE2_ERROR","","",1,null],[13,"_URC_FATAL_PHASE1_ERROR","","",1,null],[13,"_URC_NORMAL_STOP","","",1,null],[13,"_URC_END_OF_STACK","","",1,null],[13,"_URC_HANDLER_FOUND","","",1,null],[13,"_URC_INSTALL_CONTEXT","","",1,null],[13,"_URC_CONTINUE_UNWIND","","",1,null],[13,"_URC_FAILURE","","",1,null],[4,"_Unwind_Context","","",null,null],[4,"_Unwind_Action","","",null,null],[13,"_UA_SEARCH_PHASE","","",2,null],[13,"_UA_CLEANUP_PHASE","","",2,null],[13,"_UA_HANDLER_FRAME","","",2,null],[13,"_UA_FORCE_UNWIND","","",2,null],[13,"_UA_END_OF_STACK","","",2,null],[5,"_Unwind_Resume","","",null,null],[5,"_Unwind_DeleteException","","",null,null],[5,"_Unwind_GetLanguageSpecificData","","",null,null],[5,"_Unwind_GetRegionStart","","",null,null],[5,"_Unwind_GetTextRelBase","","",null,null],[5,"_Unwind_GetDataRelBase","","",null,null],[5,"_Unwind_GetGR","","",null,null],[5,"_Unwind_SetGR","","",null,null],[5,"_Unwind_GetIP","","",null,null],[5,"_Unwind_SetIP","","",null,null],[5,"_Unwind_GetIPInfo","","",null,null],[5,"_Unwind_FindEnclosingFunction","","",null,null],[5,"_Unwind_RaiseException","","",null,null],[5,"_Unwind_Backtrace","","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"_unwind_reason_code"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"_unwind_reason_code"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"_unwind_action"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"_unwind_action"}],"output":{"name":"bool"}}],[6,"_Unwind_Exception_Class","","",null,null],[6,"_Unwind_Word","","",null,null],[6,"_Unwind_Ptr","","",null,null],[6,"_Unwind_Trace_Fn","","",null,null],[6,"_Unwind_Exception_Cleanup_Fn","","",null,null],[17,"unwinder_private_data_size","","",null,null]],"paths":[[3,"_Unwind_Exception"],[4,"_Unwind_Reason_Code"],[4,"_Unwind_Action"]]};
initSearch(searchIndex);
